/*
 * battery.h
 *
 *  Created on: May 31, 2023
 *      Author: Dean Claxton
 */

#ifndef INC_BATTERY_H_
#define INC_BATTERY_H_

#include "main.h"




#define MAX_CELLS_PER_MODULE   256
#define MAX_MODULES_PER_PACK   32





typedef enum {
  isolated,
  locked,
  charging,
  unlocked,
  enabled
}moduleState;


typedef struct {
  uint16_t    voltage;    // cell 10 bit temperature
  uint16_t    temp;       // cell 12 bit temperature
  uint8_t     soc;				// cell 8 bit soc
}batteryCell;


typedef struct {
  uint8_t     mfgId;			// nodule manufacturer ID
  uint8_t     partId;  		// module part ID
  uint32_t    uniqueId;		// module unique Id
  uint8_t     moduleId;		// module Id
  uint8_t     hwVersion;	// module hardware version
  uint8_t     fwVersion;	// module firmware version		
  uint16_t    mmv;				// module measured voltage
  uint16_t    mmc;				// module measured current
  uint16_t    tempHi;     // module 12 bit temperature
  uint16_t    tempLo;     // module 12 bit temperature
  uint8_t     state;			// module operating state
  uint8_t     soc;				// module state of charge
  uint8_t     cellCount;	// module cell count
  batteryCell cell[MAX_CELLS_PER_MODULE];
}batteryModule;


batteryModule module[MAX_MODULES_PER_PACK];
uint8_t       moduleCount;

uint16_t      busVoltage;




#define PKT_MODULE_ANNOUNCE   0x500
#define PKT_REGISTER_MODULE   0x501
#define PKT_MODULE_STATUS     0x502
#define PKT_CELL_DETAIL       0x503
#define PKT_REQUEST_DETAIL    0x504
#define PKT_STATE_CHANGE      0x505
#define PKT_ALL_DEREGISTER    0x550
#define PKT_ALL_ISOLATE       0x555



/*
                                  =====================
                                  CAN PACKET STRUCTURES
                                  =====================
*/
typedef struct {                  // 0x500 ANNOUNCEMENT PACKET STRUCTURE - 8 bytes
  uint32_t moduleFw : 8;          // module firmware version
  uint32_t moduleHw : 8;          // module hardware capability
  uint32_t moduleMfgId : 8;       // module hardware manufacturer
  uint32_t modulePartId : 8;      // module part ID
  uint32_t moduleUniqueId : 32;   // module unique ID
}CANPKT_ANNOUNCE;

typedef struct {                  // 0x501 REGISTRATION PACKET STRUCTURE - 8 bytes
  uint32_t moduleId : 8;          // modules Id number used for future data exchange rather than unique ID
  uint32_t controllerId : 8;      // controller Id that the module has been registered with
  uint32_t  moduleMfgId : 8;      // module hardware manufacturer
  uint32_t  modulePartId : 8;     // module part ID
  uint32_t moduleUniqueId : 32;   // module unique ID
}CANPKT_REGISTER;

/*
typedef struct {                  // 0x502 MODULE STATUS - 12 bytes
  uint16_t moduleId 		: 8;      // module ID
  uint16_t moduleState 	: 3;      // module current state
  //	2 bytes		padding : 5
  uint16_t moduleSoc 		: 7;      // module 7 bit state of charge
  // 2 bytes    padding	: 9	
  uint16_t moduleHiTemp : 12;     // module 13 bit temperature
  // 2 bytes    padding	: 3
  uint16_t moduleLoTemp : 12;     // module 13 bit temperature
  // 2 bytes    padding	: 3
  uint16_t moduleMmc 		: 10;     // module measured current
  // 2 bytes    padding	: 6
  uint16_t moduleMmv 		: 10;			// module measured voltage
  // 2 bytes    padding	: 6
}CANPKT_MODULE_STATUS;
*/

typedef struct {                  // 0x502 MODULE STATUS - 8 bytes
  uint32_t moduleId 		: 8;      // module ID
  uint32_t moduleState 	: 4;      // module current state
  uint32_t moduleSoc 		: 8;      // module 8 bit state of charge
  uint32_t moduleHiTemp : 12;     // module 12 bit temperature
  uint32_t moduleLoTemp : 12;     // module 12 bit temperature
  uint32_t moduleMmc 		: 10;     // module measured voltage
  uint32_t moduleMmc 		: 10;     // module measured current
}CANPKT_MODULE_STATUS;


/*
typedef struct {                  // 0x503 MODULE CELL DETAIL - 8 bytes
  uint32_t moduleId     : 8;      // module ID
  uint32_t cellCount    : 10;     // module total number of cells
  uint32_t cellId       : 10;     // cell ID
  // 4 bytes    padding	: 4
  uint32_t cellTemp     : 13;     // cell 13 bit temperature
  uint32_t cellVoltage  : 10;     // cell 10 bit voltage
  uint32_t cellSoc      : 7;      // cell 7 bit SOC
  //4 bytes     padding : 2
  uint32_t unused       : 6;      // unused 6 bits
  // 4 bytes    padding : 32!
}CANPKT_CELL_DETAIL;
*/


typedef struct {                  // 0x503 MODULE CELL DETAIL - 8 bytes
  uint32_t moduleId     : 8;      // module ID
  uint32_t cellCount    : 10;     // module total number of cells
  uint32_t cellId       : 10;     // cell ID
  // 4 bytes ( padding  : 4 )
  uint32_t cellTemp     : 12;     // cell 12 bit temperature
  uint32_t cellVoltage  : 10;     // cell 10 bit voltage
  uint32_t cellSoc      : 8;      // cell 8 bit SOC
	// 4 bytes ( padding  : 2 )
}CANPKT_CELL_DETAIL;




typedef struct {                  // 0x504 MODULE CELL DETAIL REQUEST - 3 bytes
  uint8_t moduleId      : 8;      // module ID
  uint16_t cellId       : 10;     // module cell number
  // 3 bytes  (padding  : 6 )
}CANPKT_CELL_REQUEST;


typedef struct {                  // 0x505 MODULE STATE CHANGE - 2 bytes
  uint8_t moduleId      : 8;      // module ID
  uint8_t state         : 4;      // module state
  // 2 bytes  ( padding : 4 )
}CANPKT_STATE_CHANGE;


typedef struct {                  // 0x550 ALL MODULES DEREGISTER - 1 bytes
  uint8_t controllerId      : 8;      // module ID
}CANPKT_ALL_DEREGISTER;


typedef struct {                  // 0x555 ALL MODULES ISOLATE - 1 bytes
  uint8_t controllerId      : 8;      // module ID
}CANPKT_ALL_ISOLATE;



#endif /* INC_BATTERY_H_ */
