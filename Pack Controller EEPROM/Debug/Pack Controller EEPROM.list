
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017800  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c30  08017940  08017940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019570  08019570  0001a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019578  08019578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801957c  0801957c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c0  20000008  08019580  0001b008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a628  200002c8  08019840  0001b2c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a8f0  08019840  0001b8f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001b2c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030683  00000000  00000000  0001b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005427  00000000  00000000  0004b97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bf8  00000000  00000000  00050da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002249  00000000  00000000  000539a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00028677  00000000  00000000  00055be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d969  00000000  00000000  0007e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f9a35  00000000  00000000  000abbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  001a55fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d5f4  00000000  00000000  001a5684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001b2c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c8 	.word	0x200002c8
 800015c:	00000000 	.word	0x00000000
 8000160:	08017920 	.word	0x08017920

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002cc 	.word	0x200002cc
 800017c:	08017920 	.word	0x08017920

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
  if(index==CAN3){
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d11a      	bne.n	800103e <DRV_CANFDSPI_Reset+0x56>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <DRV_CANFDSPI_Reset+0xd8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <DRV_CANFDSPI_Reset+0xdc>)
 800100e:	8811      	ldrh	r1, [r2, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00c ffac 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	2264      	movs	r2, #100	@ 0x64
 800101c:	9200      	str	r2, [sp, #0]
 800101e:	4a2a      	ldr	r2, [pc, #168]	@ (80010c8 <DRV_CANFDSPI_Reset+0xe0>)
 8001020:	4926      	ldr	r1, [pc, #152]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8001022:	482a      	ldr	r0, [pc, #168]	@ (80010cc <DRV_CANFDSPI_Reset+0xe4>)
 8001024:	f00f fb22 	bl	801066c <HAL_SPI_TransmitReceive>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <DRV_CANFDSPI_Reset+0xd8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a24      	ldr	r2, [pc, #144]	@ (80010c4 <DRV_CANFDSPI_Reset+0xdc>)
 8001032:	8811      	ldrh	r1, [r2, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f00c ff9a 	bl	800df70 <HAL_GPIO_WritePin>
 800103c:	e037      	b.n	80010ae <DRV_CANFDSPI_Reset+0xc6>
  } else if(index==CAN2){
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d11a      	bne.n	800107a <DRV_CANFDSPI_Reset+0x92>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <DRV_CANFDSPI_Reset+0xe8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <DRV_CANFDSPI_Reset+0xec>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00c ff8e 	bl	800df70 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <DRV_CANFDSPI_Reset+0xe0>)
 800105c:	4917      	ldr	r1, [pc, #92]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 800105e:	481b      	ldr	r0, [pc, #108]	@ (80010cc <DRV_CANFDSPI_Reset+0xe4>)
 8001060:	f00f fb04 	bl	801066c <HAL_SPI_TransmitReceive>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <DRV_CANFDSPI_Reset+0xe8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	@ (80010d4 <DRV_CANFDSPI_Reset+0xec>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f00c ff7c 	bl	800df70 <HAL_GPIO_WritePin>
 8001078:	e019      	b.n	80010ae <DRV_CANFDSPI_Reset+0xc6>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <DRV_CANFDSPI_Reset+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <DRV_CANFDSPI_Reset+0xf4>)
 8001080:	8811      	ldrh	r1, [r2, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f00c ff73 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	2264      	movs	r2, #100	@ 0x64
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <DRV_CANFDSPI_Reset+0xe0>)
 8001092:	490a      	ldr	r1, [pc, #40]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <DRV_CANFDSPI_Reset+0xe4>)
 8001096:	f00f fae9 	bl	801066c <HAL_SPI_TransmitReceive>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <DRV_CANFDSPI_Reset+0xf0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	@ (80010dc <DRV_CANFDSPI_Reset+0xf4>)
 80010a4:	8811      	ldrh	r1, [r2, #0]
 80010a6:	2201      	movs	r2, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00c ff61 	bl	800df70 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200002e4 	.word	0x200002e4
 80010c0:	20000cb0 	.word	0x20000cb0
 80010c4:	20000cae 	.word	0x20000cae
 80010c8:	20000344 	.word	0x20000344
 80010cc:	20000508 	.word	0x20000508
 80010d0:	20000c90 	.word	0x20000c90
 80010d4:	20000c8e 	.word	0x20000c8e
 80010d8:	20000c70 	.word	0x20000c70
 80010dc:	20000c6e 	.word	0x20000c6e

080010e0 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	603a      	str	r2, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	460b      	mov	r3, r1
 80010ee:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010f0:	2303      	movs	r3, #3
 80010f2:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3330      	adds	r3, #48	@ 0x30
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001108:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b32      	ldr	r3, [pc, #200]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001110:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 8001112:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001114:	2200      	movs	r2, #0
 8001116:	709a      	strb	r2, [r3, #2]

  if(index==CAN3){
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d11a      	bne.n	8001154 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <DRV_CANFDSPI_ReadByte+0xfc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2f      	ldr	r2, [pc, #188]	@ (80011e0 <DRV_CANFDSPI_ReadByte+0x100>)
 8001124:	8811      	ldrh	r1, [r2, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00c ff21 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800112e:	89bb      	ldrh	r3, [r7, #12]
 8001130:	2264      	movs	r2, #100	@ 0x64
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	4a2b      	ldr	r2, [pc, #172]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 8001136:	4928      	ldr	r1, [pc, #160]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001138:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <DRV_CANFDSPI_ReadByte+0x108>)
 800113a:	f00f fa97 	bl	801066c <HAL_SPI_TransmitReceive>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <DRV_CANFDSPI_ReadByte+0xfc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a26      	ldr	r2, [pc, #152]	@ (80011e0 <DRV_CANFDSPI_ReadByte+0x100>)
 8001148:	8811      	ldrh	r1, [r2, #0]
 800114a:	2201      	movs	r2, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f00c ff0f 	bl	800df70 <HAL_GPIO_WritePin>
 8001152:	e037      	b.n	80011c4 <DRV_CANFDSPI_ReadByte+0xe4>
  } else if(index==CAN2){
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d11a      	bne.n	8001190 <DRV_CANFDSPI_ReadByte+0xb0>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <DRV_CANFDSPI_ReadByte+0x10c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a24      	ldr	r2, [pc, #144]	@ (80011f0 <DRV_CANFDSPI_ReadByte+0x110>)
 8001160:	8811      	ldrh	r1, [r2, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00c ff03 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 8001172:	4919      	ldr	r1, [pc, #100]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001174:	481c      	ldr	r0, [pc, #112]	@ (80011e8 <DRV_CANFDSPI_ReadByte+0x108>)
 8001176:	f00f fa79 	bl	801066c <HAL_SPI_TransmitReceive>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <DRV_CANFDSPI_ReadByte+0x10c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <DRV_CANFDSPI_ReadByte+0x110>)
 8001184:	8811      	ldrh	r1, [r2, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f00c fef1 	bl	800df70 <HAL_GPIO_WritePin>
 800118e:	e019      	b.n	80011c4 <DRV_CANFDSPI_ReadByte+0xe4>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <DRV_CANFDSPI_ReadByte+0x114>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <DRV_CANFDSPI_ReadByte+0x118>)
 8001196:	8811      	ldrh	r1, [r2, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00c fee8 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	2264      	movs	r2, #100	@ 0x64
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 80011a8:	490b      	ldr	r1, [pc, #44]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011aa:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <DRV_CANFDSPI_ReadByte+0x108>)
 80011ac:	f00f fa5e 	bl	801066c <HAL_SPI_TransmitReceive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <DRV_CANFDSPI_ReadByte+0x114>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <DRV_CANFDSPI_ReadByte+0x118>)
 80011ba:	8811      	ldrh	r1, [r2, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f00c fed6 	bl	800df70 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 80011c6:	789a      	ldrb	r2, [r3, #2]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 80011cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200002e4 	.word	0x200002e4
 80011dc:	20000cb0 	.word	0x20000cb0
 80011e0:	20000cae 	.word	0x20000cae
 80011e4:	20000344 	.word	0x20000344
 80011e8:	20000508 	.word	0x20000508
 80011ec:	20000c90 	.word	0x20000c90
 80011f0:	20000c8e 	.word	0x20000c8e
 80011f4:	20000c70 	.word	0x20000c70
 80011f8:	20000c6e 	.word	0x20000c6e

080011fc <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	460b      	mov	r3, r1
 8001208:	80bb      	strh	r3, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800120e:	2303      	movs	r3, #3
 8001210:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3320      	adds	r3, #32
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001226:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001228:	88bb      	ldrh	r3, [r7, #4]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 800122e:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8001230:	4a2f      	ldr	r2, [pc, #188]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	7093      	strb	r3, [r2, #2]

  if(index==CAN3){
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d11a      	bne.n	8001272 <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <DRV_CANFDSPI_WriteByte+0xf8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2d      	ldr	r2, [pc, #180]	@ (80012f8 <DRV_CANFDSPI_WriteByte+0xfc>)
 8001242:	8811      	ldrh	r1, [r2, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f00c fe92 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2264      	movs	r2, #100	@ 0x64
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	4a2a      	ldr	r2, [pc, #168]	@ (80012fc <DRV_CANFDSPI_WriteByte+0x100>)
 8001254:	4926      	ldr	r1, [pc, #152]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001256:	482a      	ldr	r0, [pc, #168]	@ (8001300 <DRV_CANFDSPI_WriteByte+0x104>)
 8001258:	f00f fa08 	bl	801066c <HAL_SPI_TransmitReceive>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <DRV_CANFDSPI_WriteByte+0xf8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a24      	ldr	r2, [pc, #144]	@ (80012f8 <DRV_CANFDSPI_WriteByte+0xfc>)
 8001266:	8811      	ldrh	r1, [r2, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f00c fe80 	bl	800df70 <HAL_GPIO_WritePin>
 8001270:	e037      	b.n	80012e2 <DRV_CANFDSPI_WriteByte+0xe6>
  } else if(index==CAN2){
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d11a      	bne.n	80012ae <DRV_CANFDSPI_WriteByte+0xb2>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <DRV_CANFDSPI_WriteByte+0x108>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a22      	ldr	r2, [pc, #136]	@ (8001308 <DRV_CANFDSPI_WriteByte+0x10c>)
 800127e:	8811      	ldrh	r1, [r2, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00c fe74 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	@ 0x64
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <DRV_CANFDSPI_WriteByte+0x100>)
 8001290:	4917      	ldr	r1, [pc, #92]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001292:	481b      	ldr	r0, [pc, #108]	@ (8001300 <DRV_CANFDSPI_WriteByte+0x104>)
 8001294:	f00f f9ea 	bl	801066c <HAL_SPI_TransmitReceive>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <DRV_CANFDSPI_WriteByte+0x108>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00c fe62 	bl	800df70 <HAL_GPIO_WritePin>
 80012ac:	e019      	b.n	80012e2 <DRV_CANFDSPI_WriteByte+0xe6>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <DRV_CANFDSPI_WriteByte+0x110>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <DRV_CANFDSPI_WriteByte+0x114>)
 80012b4:	8811      	ldrh	r1, [r2, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00c fe59 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	2264      	movs	r2, #100	@ 0x64
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <DRV_CANFDSPI_WriteByte+0x100>)
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <DRV_CANFDSPI_WriteByte+0x104>)
 80012ca:	f00f f9cf 	bl	801066c <HAL_SPI_TransmitReceive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <DRV_CANFDSPI_WriteByte+0x110>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <DRV_CANFDSPI_WriteByte+0x114>)
 80012d8:	8811      	ldrh	r1, [r2, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f00c fe47 	bl	800df70 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002e4 	.word	0x200002e4
 80012f4:	20000cb0 	.word	0x20000cb0
 80012f8:	20000cae 	.word	0x20000cae
 80012fc:	20000344 	.word	0x20000344
 8001300:	20000508 	.word	0x20000508
 8001304:	20000c90 	.word	0x20000c90
 8001308:	20000c8e 	.word	0x20000c8e
 800130c:	20000c70 	.word	0x20000c70
 8001310:	20000c6e 	.word	0x20000c6e

08001314 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	4603      	mov	r3, r0
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001324:	2306      	movs	r3, #6
 8001326:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3330      	adds	r3, #48	@ 0x30
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 800133c:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 8001344:	705a      	strb	r2, [r3, #1]

  if(index==CAN3){
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11a      	bne.n	8001382 <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800134c:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <DRV_CANFDSPI_ReadWord+0x130>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a3d      	ldr	r2, [pc, #244]	@ (8001448 <DRV_CANFDSPI_ReadWord+0x134>)
 8001352:	8811      	ldrh	r1, [r2, #0]
 8001354:	2200      	movs	r2, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00c fe0a 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	2264      	movs	r2, #100	@ 0x64
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	4a3a      	ldr	r2, [pc, #232]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 8001364:	4936      	ldr	r1, [pc, #216]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 8001366:	483a      	ldr	r0, [pc, #232]	@ (8001450 <DRV_CANFDSPI_ReadWord+0x13c>)
 8001368:	f00f f980 	bl	801066c <HAL_SPI_TransmitReceive>
 800136c:	4603      	mov	r3, r0
 800136e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001370:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <DRV_CANFDSPI_ReadWord+0x130>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a34      	ldr	r2, [pc, #208]	@ (8001448 <DRV_CANFDSPI_ReadWord+0x134>)
 8001376:	8811      	ldrh	r1, [r2, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f00c fdf8 	bl	800df70 <HAL_GPIO_WritePin>
 8001380:	e037      	b.n	80013f2 <DRV_CANFDSPI_ReadWord+0xde>
  } else if(index==CAN2){
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11a      	bne.n	80013be <DRV_CANFDSPI_ReadWord+0xaa>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <DRV_CANFDSPI_ReadWord+0x140>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <DRV_CANFDSPI_ReadWord+0x144>)
 800138e:	8811      	ldrh	r1, [r2, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00c fdec 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001398:	89bb      	ldrh	r3, [r7, #12]
 800139a:	2264      	movs	r2, #100	@ 0x64
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	4a2b      	ldr	r2, [pc, #172]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 80013a0:	4927      	ldr	r1, [pc, #156]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 80013a2:	482b      	ldr	r0, [pc, #172]	@ (8001450 <DRV_CANFDSPI_ReadWord+0x13c>)
 80013a4:	f00f f962 	bl	801066c <HAL_SPI_TransmitReceive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <DRV_CANFDSPI_ReadWord+0x140>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a29      	ldr	r2, [pc, #164]	@ (8001458 <DRV_CANFDSPI_ReadWord+0x144>)
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00c fdda 	bl	800df70 <HAL_GPIO_WritePin>
 80013bc:	e019      	b.n	80013f2 <DRV_CANFDSPI_ReadWord+0xde>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013be:	4b27      	ldr	r3, [pc, #156]	@ (800145c <DRV_CANFDSPI_ReadWord+0x148>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a27      	ldr	r2, [pc, #156]	@ (8001460 <DRV_CANFDSPI_ReadWord+0x14c>)
 80013c4:	8811      	ldrh	r1, [r2, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00c fdd1 	bl	800df70 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013ce:	89bb      	ldrh	r3, [r7, #12]
 80013d0:	2264      	movs	r2, #100	@ 0x64
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 80013d6:	491a      	ldr	r1, [pc, #104]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 80013d8:	481d      	ldr	r0, [pc, #116]	@ (8001450 <DRV_CANFDSPI_ReadWord+0x13c>)
 80013da:	f00f f947 	bl	801066c <HAL_SPI_TransmitReceive>
 80013de:	4603      	mov	r3, r0
 80013e0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <DRV_CANFDSPI_ReadWord+0x148>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <DRV_CANFDSPI_ReadWord+0x14c>)
 80013e8:	8811      	ldrh	r1, [r2, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00c fdbf 	bl	800df70 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <DRV_CANFDSPI_ReadWord+0xea>
      return spiTransferError;
 80013f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013fc:	e01c      	b.n	8001438 <DRV_CANFDSPI_ReadWord+0x124>
  }

  // Update data
  *rxd = 0;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001404:	2302      	movs	r3, #2
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e011      	b.n	800142e <DRV_CANFDSPI_ReadWord+0x11a>
      x = (uint32_t) spiReceiveBuffer[i];
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3b02      	subs	r3, #2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	441a      	add	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d9ea      	bls.n	800140a <DRV_CANFDSPI_ReadWord+0xf6>
  }

  return spiTransferError;
 8001434:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002e4 	.word	0x200002e4
 8001444:	20000cb0 	.word	0x20000cb0
 8001448:	20000cae 	.word	0x20000cae
 800144c:	20000344 	.word	0x20000344
 8001450:	20000508 	.word	0x20000508
 8001454:	20000c90 	.word	0x20000c90
 8001458:	20000c8e 	.word	0x20000c8e
 800145c:	20000c70 	.word	0x20000c70
 8001460:	20000c6e 	.word	0x20000c6e

08001464 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	603a      	str	r2, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	460b      	mov	r3, r1
 8001472:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 8001474:	2306      	movs	r3, #6
 8001476:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001478:	88bb      	ldrh	r3, [r7, #4]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3320      	adds	r3, #32
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 800148c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 8001494:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e00b      	b.n	80014b4 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	40da      	lsrs	r2, r3
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3302      	adds	r3, #2
 80014a8:	b2d1      	uxtb	r1, r2
 80014aa:	4a32      	ldr	r2, [pc, #200]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 80014ac:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d9f0      	bls.n	800149c <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN3){
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d11a      	bne.n	80014f6 <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <DRV_CANFDSPI_WriteWord+0x114>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <DRV_CANFDSPI_WriteWord+0x118>)
 80014c6:	8811      	ldrh	r1, [r2, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00c fd50 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	2264      	movs	r2, #100	@ 0x64
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <DRV_CANFDSPI_WriteWord+0x11c>)
 80014d8:	4926      	ldr	r1, [pc, #152]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 80014da:	482a      	ldr	r0, [pc, #168]	@ (8001584 <DRV_CANFDSPI_WriteWord+0x120>)
 80014dc:	f00f f8c6 	bl	801066c <HAL_SPI_TransmitReceive>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <DRV_CANFDSPI_WriteWord+0x114>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a24      	ldr	r2, [pc, #144]	@ (800157c <DRV_CANFDSPI_WriteWord+0x118>)
 80014ea:	8811      	ldrh	r1, [r2, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00c fd3e 	bl	800df70 <HAL_GPIO_WritePin>
 80014f4:	e037      	b.n	8001566 <DRV_CANFDSPI_WriteWord+0x102>
    } else if(index==CAN2){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d11a      	bne.n	8001532 <DRV_CANFDSPI_WriteWord+0xce>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <DRV_CANFDSPI_WriteWord+0x124>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a22      	ldr	r2, [pc, #136]	@ (800158c <DRV_CANFDSPI_WriteWord+0x128>)
 8001502:	8811      	ldrh	r1, [r2, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00c fd32 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	2264      	movs	r2, #100	@ 0x64
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <DRV_CANFDSPI_WriteWord+0x11c>)
 8001514:	4917      	ldr	r1, [pc, #92]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 8001516:	481b      	ldr	r0, [pc, #108]	@ (8001584 <DRV_CANFDSPI_WriteWord+0x120>)
 8001518:	f00f f8a8 	bl	801066c <HAL_SPI_TransmitReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <DRV_CANFDSPI_WriteWord+0x124>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	@ (800158c <DRV_CANFDSPI_WriteWord+0x128>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f00c fd20 	bl	800df70 <HAL_GPIO_WritePin>
 8001530:	e019      	b.n	8001566 <DRV_CANFDSPI_WriteWord+0x102>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <DRV_CANFDSPI_WriteWord+0x12c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <DRV_CANFDSPI_WriteWord+0x130>)
 8001538:	8811      	ldrh	r1, [r2, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00c fd17 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001542:	89bb      	ldrh	r3, [r7, #12]
 8001544:	2264      	movs	r2, #100	@ 0x64
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <DRV_CANFDSPI_WriteWord+0x11c>)
 800154a:	490a      	ldr	r1, [pc, #40]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 800154c:	480d      	ldr	r0, [pc, #52]	@ (8001584 <DRV_CANFDSPI_WriteWord+0x120>)
 800154e:	f00f f88d 	bl	801066c <HAL_SPI_TransmitReceive>
 8001552:	4603      	mov	r3, r0
 8001554:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <DRV_CANFDSPI_WriteWord+0x12c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <DRV_CANFDSPI_WriteWord+0x130>)
 800155c:	8811      	ldrh	r1, [r2, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f00c fd05 	bl	800df70 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8001566:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002e4 	.word	0x200002e4
 8001578:	20000cb0 	.word	0x20000cb0
 800157c:	20000cae 	.word	0x20000cae
 8001580:	20000344 	.word	0x20000344
 8001584:	20000508 	.word	0x20000508
 8001588:	20000c90 	.word	0x20000c90
 800158c:	20000c8e 	.word	0x20000c8e
 8001590:	20000c70 	.word	0x20000c70
 8001594:	20000c6e 	.word	0x20000c6e

08001598 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	460b      	mov	r3, r1
 80015a6:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3330      	adds	r3, #48	@ 0x30
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b42      	ldr	r3, [pc, #264]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015c0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015c8:	705a      	strb	r2, [r3, #1]

    if(index==CAN3){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d11a      	bne.n	8001606 <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80015d0:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <DRV_CANFDSPI_ReadHalfWord+0x134>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3e      	ldr	r2, [pc, #248]	@ (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x138>)
 80015d6:	8811      	ldrh	r1, [r2, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00c fcc8 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	2264      	movs	r2, #100	@ 0x64
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	4a3b      	ldr	r2, [pc, #236]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 80015e8:	4937      	ldr	r1, [pc, #220]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015ea:	483b      	ldr	r0, [pc, #236]	@ (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 80015ec:	f00f f83e 	bl	801066c <HAL_SPI_TransmitReceive>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80015f4:	4b35      	ldr	r3, [pc, #212]	@ (80016cc <DRV_CANFDSPI_ReadHalfWord+0x134>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a35      	ldr	r2, [pc, #212]	@ (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x138>)
 80015fa:	8811      	ldrh	r1, [r2, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f00c fcb6 	bl	800df70 <HAL_GPIO_WritePin>
 8001604:	e037      	b.n	8001676 <DRV_CANFDSPI_ReadHalfWord+0xde>
    } else if(index==CAN2){
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d11a      	bne.n	8001642 <DRV_CANFDSPI_ReadHalfWord+0xaa>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800160c:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00c fcaa 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	4a2c      	ldr	r2, [pc, #176]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001624:	4928      	ldr	r1, [pc, #160]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001626:	482c      	ldr	r0, [pc, #176]	@ (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001628:	f00f f820 	bl	801066c <HAL_SPI_TransmitReceive>
 800162c:	4603      	mov	r3, r0
 800162e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <DRV_CANFDSPI_ReadHalfWord+0x144>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2a      	ldr	r2, [pc, #168]	@ (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f00c fc98 	bl	800df70 <HAL_GPIO_WritePin>
 8001640:	e019      	b.n	8001676 <DRV_CANFDSPI_ReadHalfWord+0xde>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001642:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a28      	ldr	r2, [pc, #160]	@ (80016e8 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001648:	8811      	ldrh	r1, [r2, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00c fc8f 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001652:	89bb      	ldrh	r3, [r7, #12]
 8001654:	2264      	movs	r2, #100	@ 0x64
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	4a1e      	ldr	r2, [pc, #120]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 800165a:	491b      	ldr	r1, [pc, #108]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 800165c:	481e      	ldr	r0, [pc, #120]	@ (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 800165e:	f00f f805 	bl	801066c <HAL_SPI_TransmitReceive>
 8001662:	4603      	mov	r3, r0
 8001664:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	@ (80016e8 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 800166c:	8811      	ldrh	r1, [r2, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f00c fc7d 	bl	800df70 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <DRV_CANFDSPI_ReadHalfWord+0xea>
        return spiTransferError;
 800167c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001680:	e01e      	b.n	80016c0 <DRV_CANFDSPI_ReadHalfWord+0x128>
    }

    // Update data
    *rxd = 0;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001688:	2302      	movs	r3, #2
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e013      	b.n	80016b6 <DRV_CANFDSPI_ReadHalfWord+0x11e>
        x = (uint32_t) spiReceiveBuffer[i];
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3b02      	subs	r3, #2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d9e8      	bls.n	800168e <DRV_CANFDSPI_ReadHalfWord+0xf6>
    }

    return spiTransferError;
 80016bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200002e4 	.word	0x200002e4
 80016cc:	20000cb0 	.word	0x20000cb0
 80016d0:	20000cae 	.word	0x20000cae
 80016d4:	20000344 	.word	0x20000344
 80016d8:	20000508 	.word	0x20000508
 80016dc:	20000c90 	.word	0x20000c90
 80016e0:	20000c8e 	.word	0x20000c8e
 80016e4:	20000c70 	.word	0x20000c70
 80016e8:	20000c6e 	.word	0x20000c6e

080016ec <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 80016fe:	2304      	movs	r3, #4
 8001700:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29b      	uxth	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3320      	adds	r3, #32
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001716:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800171e:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e00b      	b.n	800173e <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	411a      	asrs	r2, r3
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3302      	adds	r3, #2
 8001732:	b2d1      	uxtb	r1, r2
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001736:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	3301      	adds	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d9f0      	bls.n	8001726 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN3){
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d11a      	bne.n	8001780 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <DRV_CANFDSPI_WriteHalfWord+0x114>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a2d      	ldr	r2, [pc, #180]	@ (8001804 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 8001750:	8811      	ldrh	r1, [r2, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f00c fc0b 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800175a:	89bb      	ldrh	r3, [r7, #12]
 800175c:	2264      	movs	r2, #100	@ 0x64
 800175e:	9200      	str	r2, [sp, #0]
 8001760:	4a29      	ldr	r2, [pc, #164]	@ (8001808 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 8001762:	4926      	ldr	r1, [pc, #152]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001764:	4829      	ldr	r0, [pc, #164]	@ (800180c <DRV_CANFDSPI_WriteHalfWord+0x120>)
 8001766:	f00e ff81 	bl	801066c <HAL_SPI_TransmitReceive>
 800176a:	4603      	mov	r3, r0
 800176c:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 8001774:	8811      	ldrh	r1, [r2, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f00c fbf9 	bl	800df70 <HAL_GPIO_WritePin>
 800177e:	e037      	b.n	80017f0 <DRV_CANFDSPI_WriteHalfWord+0x104>
    } else if(index==CAN2){
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d11a      	bne.n	80017bc <DRV_CANFDSPI_WriteHalfWord+0xd0>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <DRV_CANFDSPI_WriteHalfWord+0x124>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 800178c:	8811      	ldrh	r1, [r2, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00c fbed 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 800179e:	4917      	ldr	r1, [pc, #92]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017a0:	481a      	ldr	r0, [pc, #104]	@ (800180c <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017a2:	f00e ff63 	bl	801066c <HAL_SPI_TransmitReceive>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017aa:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017b0:	8811      	ldrh	r1, [r2, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00c fbdb 	bl	800df70 <HAL_GPIO_WritePin>
 80017ba:	e019      	b.n	80017f0 <DRV_CANFDSPI_WriteHalfWord+0x104>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017c2:	8811      	ldrh	r1, [r2, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00c fbd2 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017cc:	89bb      	ldrh	r3, [r7, #12]
 80017ce:	2264      	movs	r2, #100	@ 0x64
 80017d0:	9200      	str	r2, [sp, #0]
 80017d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017d4:	4909      	ldr	r1, [pc, #36]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017d8:	f00e ff48 	bl	801066c <HAL_SPI_TransmitReceive>
 80017dc:	4603      	mov	r3, r0
 80017de:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017e6:	8811      	ldrh	r1, [r2, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00c fbc0 	bl	800df70 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 80017f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200002e4 	.word	0x200002e4
 8001800:	20000cb0 	.word	0x20000cb0
 8001804:	20000cae 	.word	0x20000cae
 8001808:	20000344 	.word	0x20000344
 800180c:	20000508 	.word	0x20000508
 8001810:	20000c90 	.word	0x20000c90
 8001814:	20000c8e 	.word	0x20000c8e
 8001818:	20000c70 	.word	0x20000c70
 800181c:	20000c6e 	.word	0x20000c6e

08001820 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	460b      	mov	r3, r1
 8001830:	81bb      	strh	r3, [r7, #12]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	3302      	adds	r3, #2
 800183a:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 800183c:	8a7b      	ldrh	r3, [r7, #18]
 800183e:	2b60      	cmp	r3, #96	@ 0x60
 8001840:	d902      	bls.n	8001848 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e086      	b.n	8001956 <DRV_CANFDSPI_ReadByteArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3330      	adds	r3, #48	@ 0x30
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 800185c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800185e:	89bb      	ldrh	r3, [r7, #12]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001864:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001866:	2302      	movs	r3, #2
 8001868:	82fb      	strh	r3, [r7, #22]
 800186a:	e006      	b.n	800187a <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001870:	2100      	movs	r1, #0
 8001872:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	3301      	adds	r3, #1
 8001878:	82fb      	strh	r3, [r7, #22]
 800187a:	8afa      	ldrh	r2, [r7, #22]
 800187c:	8a7b      	ldrh	r3, [r7, #18]
 800187e:	429a      	cmp	r2, r3
 8001880:	d3f4      	bcc.n	800186c <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN3){
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d11a      	bne.n	80018be <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <DRV_CANFDSPI_ReadByteArray+0x144>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <DRV_CANFDSPI_ReadByteArray+0x148>)
 800188e:	8811      	ldrh	r1, [r2, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00c fb6c 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001898:	8a7b      	ldrh	r3, [r7, #18]
 800189a:	2264      	movs	r2, #100	@ 0x64
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	4a33      	ldr	r2, [pc, #204]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018a0:	492f      	ldr	r1, [pc, #188]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018a2:	4833      	ldr	r0, [pc, #204]	@ (8001970 <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018a4:	f00e fee2 	bl	801066c <HAL_SPI_TransmitReceive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018b2:	8811      	ldrh	r1, [r2, #0]
 80018b4:	2201      	movs	r2, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00c fb5a 	bl	800df70 <HAL_GPIO_WritePin>
 80018bc:	e037      	b.n	800192e <DRV_CANFDSPI_ReadByteArray+0x10e>
    } else if(index==CAN2){
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11a      	bne.n	80018fa <DRV_CANFDSPI_ReadByteArray+0xda>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <DRV_CANFDSPI_ReadByteArray+0x154>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <DRV_CANFDSPI_ReadByteArray+0x158>)
 80018ca:	8811      	ldrh	r1, [r2, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c fb4e 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	2264      	movs	r2, #100	@ 0x64
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4a24      	ldr	r2, [pc, #144]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018dc:	4920      	ldr	r1, [pc, #128]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018de:	4824      	ldr	r0, [pc, #144]	@ (8001970 <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018e0:	f00e fec4 	bl	801066c <HAL_SPI_TransmitReceive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <DRV_CANFDSPI_ReadByteArray+0x154>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <DRV_CANFDSPI_ReadByteArray+0x158>)
 80018ee:	8811      	ldrh	r1, [r2, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00c fb3c 	bl	800df70 <HAL_GPIO_WritePin>
 80018f8:	e019      	b.n	800192e <DRV_CANFDSPI_ReadByteArray+0x10e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <DRV_CANFDSPI_ReadByteArray+0x15c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a20      	ldr	r2, [pc, #128]	@ (8001980 <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001900:	8811      	ldrh	r1, [r2, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00c fb33 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800190a:	8a7b      	ldrh	r3, [r7, #18]
 800190c:	2264      	movs	r2, #100	@ 0x64
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001912:	4913      	ldr	r1, [pc, #76]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001914:	4816      	ldr	r0, [pc, #88]	@ (8001970 <DRV_CANFDSPI_ReadByteArray+0x150>)
 8001916:	f00e fea9 	bl	801066c <HAL_SPI_TransmitReceive>
 800191a:	4603      	mov	r3, r0
 800191c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a17      	ldr	r2, [pc, #92]	@ (8001980 <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001924:	8811      	ldrh	r1, [r2, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f00c fb21 	bl	800df70 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	82fb      	strh	r3, [r7, #22]
 8001932:	e00a      	b.n	800194a <DRV_CANFDSPI_ReadByteArray+0x12a>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001934:	8afb      	ldrh	r3, [r7, #22]
 8001936:	1c9a      	adds	r2, r3, #2
 8001938:	8afb      	ldrh	r3, [r7, #22]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	440b      	add	r3, r1
 800193e:	490b      	ldr	r1, [pc, #44]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001940:	5c8a      	ldrb	r2, [r1, r2]
 8001942:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001944:	8afb      	ldrh	r3, [r7, #22]
 8001946:	3301      	adds	r3, #1
 8001948:	82fb      	strh	r3, [r7, #22]
 800194a:	8afa      	ldrh	r2, [r7, #22]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3f0      	bcc.n	8001934 <DRV_CANFDSPI_ReadByteArray+0x114>
    }

    return spiTransferError;
 8001952:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200002e4 	.word	0x200002e4
 8001964:	20000cb0 	.word	0x20000cb0
 8001968:	20000cae 	.word	0x20000cae
 800196c:	20000344 	.word	0x20000344
 8001970:	20000508 	.word	0x20000508
 8001974:	20000c90 	.word	0x20000c90
 8001978:	20000c8e 	.word	0x20000c8e
 800197c:	20000c70 	.word	0x20000c70
 8001980:	20000c6e 	.word	0x20000c6e

08001984 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af02      	add	r7, sp, #8
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	461a      	mov	r2, r3
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	460b      	mov	r3, r1
 8001994:	81bb      	strh	r3, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3302      	adds	r3, #2
 800199e:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80019a0:	8a7b      	ldrh	r3, [r7, #18]
 80019a2:	2b60      	cmp	r3, #96	@ 0x60
 80019a4:	d902      	bls.n	80019ac <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e078      	b.n	8001a9e <DRV_CANFDSPI_WriteByteArray+0x11a>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3320      	adds	r3, #32
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019c0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019c2:	89bb      	ldrh	r3, [r7, #12]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019c8:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	82fb      	strh	r3, [r7, #22]
 80019ce:	e00a      	b.n	80019e6 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80019d0:	8afb      	ldrh	r3, [r7, #22]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	441a      	add	r2, r3
 80019d6:	8afb      	ldrh	r3, [r7, #22]
 80019d8:	3302      	adds	r3, #2
 80019da:	7811      	ldrb	r1, [r2, #0]
 80019dc:	4a32      	ldr	r2, [pc, #200]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019de:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80019e0:	8afb      	ldrh	r3, [r7, #22]
 80019e2:	3301      	adds	r3, #1
 80019e4:	82fb      	strh	r3, [r7, #22]
 80019e6:	8afa      	ldrh	r2, [r7, #22]
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3f0      	bcc.n	80019d0 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN3){
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d11a      	bne.n	8001a2a <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80019f4:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <DRV_CANFDSPI_WriteByteArray+0x128>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x12c>)
 80019fa:	8811      	ldrh	r1, [r2, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00c fab6 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a04:	8a7b      	ldrh	r3, [r7, #18]
 8001a06:	2264      	movs	r2, #100	@ 0x64
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a0c:	4926      	ldr	r1, [pc, #152]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a0e:	482a      	ldr	r0, [pc, #168]	@ (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a10:	f00e fe2c 	bl	801066c <HAL_SPI_TransmitReceive>
 8001a14:	4603      	mov	r3, r0
 8001a16:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a24      	ldr	r2, [pc, #144]	@ (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a1e:	8811      	ldrh	r1, [r2, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00c faa4 	bl	800df70 <HAL_GPIO_WritePin>
 8001a28:	e037      	b.n	8001a9a <DRV_CANFDSPI_WriteByteArray+0x116>
    } else if(index==CAN2){
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d11a      	bne.n	8001a66 <DRV_CANFDSPI_WriteByteArray+0xe2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a36:	8811      	ldrh	r1, [r2, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00c fa98 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a48:	4917      	ldr	r1, [pc, #92]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a4a:	481b      	ldr	r0, [pc, #108]	@ (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a4c:	f00e fe0e 	bl	801066c <HAL_SPI_TransmitReceive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a5a:	8811      	ldrh	r1, [r2, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00c fa86 	bl	800df70 <HAL_GPIO_WritePin>
 8001a64:	e019      	b.n	8001a9a <DRV_CANFDSPI_WriteByteArray+0x116>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001a6c:	8811      	ldrh	r1, [r2, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00c fa7d 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a76:	8a7b      	ldrh	r3, [r7, #18]
 8001a78:	2264      	movs	r2, #100	@ 0x64
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a7e:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a82:	f00e fdf3 	bl	801066c <HAL_SPI_TransmitReceive>
 8001a86:	4603      	mov	r3, r0
 8001a88:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001a90:	8811      	ldrh	r1, [r2, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00c fa6b 	bl	800df70 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001a9a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002e4 	.word	0x200002e4
 8001aac:	20000cb0 	.word	0x20000cb0
 8001ab0:	20000cae 	.word	0x20000cae
 8001ab4:	20000344 	.word	0x20000344
 8001ab8:	20000508 	.word	0x20000508
 8001abc:	20000c90 	.word	0x20000c90
 8001ac0:	20000c8e 	.word	0x20000c8e
 8001ac4:	20000c70 	.word	0x20000c70
 8001ac8:	20000c6e 	.word	0x20000c6e

08001acc <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	460b      	mov	r3, r1
 8001adc:	81bb      	strh	r3, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3302      	adds	r3, #2
 8001aea:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001aec:	8afb      	ldrh	r3, [r7, #22]
 8001aee:	2b60      	cmp	r3, #96	@ 0x60
 8001af0:	d902      	bls.n	8001af8 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e0a2      	b.n	8001c3e <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3330      	adds	r3, #48	@ 0x30
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b0c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001b0e:	89bb      	ldrh	r3, [r7, #12]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b14:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001b16:	2302      	movs	r3, #2
 8001b18:	83fb      	strh	r3, [r7, #30]
 8001b1a:	e006      	b.n	8001b2a <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001b1c:	8bfb      	ldrh	r3, [r7, #30]
 8001b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001b24:	8bfb      	ldrh	r3, [r7, #30]
 8001b26:	3301      	adds	r3, #1
 8001b28:	83fb      	strh	r3, [r7, #30]
 8001b2a:	8bfa      	ldrh	r2, [r7, #30]
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3f4      	bcc.n	8001b1c <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN3){
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d11a      	bne.n	8001b6e <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001b38:	4b44      	ldr	r3, [pc, #272]	@ (8001c4c <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a44      	ldr	r2, [pc, #272]	@ (8001c50 <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b3e:	8811      	ldrh	r1, [r2, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00c fa14 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	2264      	movs	r2, #100	@ 0x64
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	4a41      	ldr	r2, [pc, #260]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b50:	493d      	ldr	r1, [pc, #244]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b52:	4841      	ldr	r0, [pc, #260]	@ (8001c58 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b54:	f00e fd8a 	bl	801066c <HAL_SPI_TransmitReceive>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3b      	ldr	r2, [pc, #236]	@ (8001c50 <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b62:	8811      	ldrh	r1, [r2, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00c fa02 	bl	800df70 <HAL_GPIO_WritePin>
 8001b6c:	e037      	b.n	8001bde <DRV_CANFDSPI_ReadWordArray+0x112>
    } else if(index==CAN2){
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d11a      	bne.n	8001baa <DRV_CANFDSPI_ReadWordArray+0xde>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001b74:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a39      	ldr	r2, [pc, #228]	@ (8001c60 <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001b7a:	8811      	ldrh	r1, [r2, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00c f9f6 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2264      	movs	r2, #100	@ 0x64
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b8c:	492e      	ldr	r1, [pc, #184]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b8e:	4832      	ldr	r0, [pc, #200]	@ (8001c58 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b90:	f00e fd6c 	bl	801066c <HAL_SPI_TransmitReceive>
 8001b94:	4603      	mov	r3, r0
 8001b96:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a30      	ldr	r2, [pc, #192]	@ (8001c60 <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001b9e:	8811      	ldrh	r1, [r2, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00c f9e4 	bl	800df70 <HAL_GPIO_WritePin>
 8001ba8:	e019      	b.n	8001bde <DRV_CANFDSPI_ReadWordArray+0x112>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2e      	ldr	r2, [pc, #184]	@ (8001c68 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bb0:	8811      	ldrh	r1, [r2, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00c f9db 	bl	800df70 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bba:	8afb      	ldrh	r3, [r7, #22]
 8001bbc:	2264      	movs	r2, #100	@ 0x64
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	4a24      	ldr	r2, [pc, #144]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bc2:	4921      	ldr	r1, [pc, #132]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001bc4:	4824      	ldr	r0, [pc, #144]	@ (8001c58 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001bc6:	f00e fd51 	bl	801066c <HAL_SPI_TransmitReceive>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a25      	ldr	r2, [pc, #148]	@ (8001c68 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bd4:	8811      	ldrh	r1, [r2, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00c f9c9 	bl	800df70 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001bde:	7e7b      	ldrb	r3, [r7, #25]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <DRV_CANFDSPI_ReadWordArray+0x11e>
        return spiTransferError;
 8001be4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001be8:	e029      	b.n	8001c3e <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Convert Byte array to Word array
    n = 2;
 8001bea:	2302      	movs	r3, #2
 8001bec:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	83fb      	strh	r3, [r7, #30]
 8001bf2:	e01e      	b.n	8001c32 <DRV_CANFDSPI_ReadWordArray+0x166>
        w.word = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	83bb      	strh	r3, [r7, #28]
 8001bfc:	e00d      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x14e>
            w.byte[j] = spiReceiveBuffer[n];
 8001bfe:	8b7a      	ldrh	r2, [r7, #26]
 8001c00:	8bbb      	ldrh	r3, [r7, #28]
 8001c02:	4914      	ldr	r1, [pc, #80]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001c04:	5c8a      	ldrb	r2, [r1, r2]
 8001c06:	3320      	adds	r3, #32
 8001c08:	443b      	add	r3, r7
 8001c0a:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001c0e:	8bbb      	ldrh	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	83bb      	strh	r3, [r7, #28]
 8001c14:	8b7b      	ldrh	r3, [r7, #26]
 8001c16:	3301      	adds	r3, #1
 8001c18:	837b      	strh	r3, [r7, #26]
 8001c1a:	8bbb      	ldrh	r3, [r7, #28]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d9ee      	bls.n	8001bfe <DRV_CANFDSPI_ReadWordArray+0x132>
        }
        rxd[i] = w.word;
 8001c20:	8bfb      	ldrh	r3, [r7, #30]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001c2c:	8bfb      	ldrh	r3, [r7, #30]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	83fb      	strh	r3, [r7, #30]
 8001c32:	8bfa      	ldrh	r2, [r7, #30]
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3dc      	bcc.n	8001bf4 <DRV_CANFDSPI_ReadWordArray+0x128>
    }

    return spiTransferError;
 8001c3a:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002e4 	.word	0x200002e4
 8001c4c:	20000cb0 	.word	0x20000cb0
 8001c50:	20000cae 	.word	0x20000cae
 8001c54:	20000344 	.word	0x20000344
 8001c58:	20000508 	.word	0x20000508
 8001c5c:	20000c90 	.word	0x20000c90
 8001c60:	20000c8e 	.word	0x20000c8e
 8001c64:	20000c70 	.word	0x20000c70
 8001c68:	20000c6e 	.word	0x20000c6e

08001c6c <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001c7c:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <DRV_CANFDSPI_Configure+0x118>)
 8001c7e:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	7a3b      	ldrb	r3, [r7, #8]
 8001c8c:	f362 0304 	bfi	r3, r2, #0, #5
 8001c90:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	7a3b      	ldrb	r3, [r7, #8]
 8001c9e:	f362 1345 	bfi	r3, r2, #5, #1
 8001ca2:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	7a3b      	ldrb	r3, [r7, #8]
 8001cb0:	f362 1386 	bfi	r3, r2, #6, #1
 8001cb4:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	7a7b      	ldrb	r3, [r7, #9]
 8001cc2:	f362 0300 	bfi	r3, r2, #0, #1
 8001cc6:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	7a7b      	ldrb	r3, [r7, #9]
 8001cd4:	f362 0342 	bfi	r3, r2, #1, #2
 8001cd8:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	7a7b      	ldrb	r3, [r7, #9]
 8001ce6:	f362 1304 	bfi	r3, r2, #4, #1
 8001cea:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	7abb      	ldrb	r3, [r7, #10]
 8001cf8:	f362 0300 	bfi	r3, r2, #0, #1
 8001cfc:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	7abb      	ldrb	r3, [r7, #10]
 8001d0a:	f362 0341 	bfi	r3, r2, #1, #1
 8001d0e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	f362 0382 	bfi	r3, r2, #2, #1
 8001d20:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	7abb      	ldrb	r3, [r7, #10]
 8001d2e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d32:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	7abb      	ldrb	r3, [r7, #10]
 8001d40:	f362 1304 	bfi	r3, r2, #4, #1
 8001d44:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	f362 1307 	bfi	r3, r2, #4, #4
 8001d56:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fb80 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e001      	b.n	8001d7a <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	04980760 	.word	0x04980760

08001d88 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001d90:	4b3a      	ldr	r3, [pc, #232]	@ (8001e7c <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001d92:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	7813      	ldrb	r3, [r2, #0]
 8001da0:	f361 0304 	bfi	r3, r1, #0, #5
 8001da4:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001da6:	7b3b      	ldrb	r3, [r7, #12]
 8001da8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001dac:	b2d9      	uxtb	r1, r3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	7813      	ldrb	r3, [r2, #0]
 8001db2:	f361 1345 	bfi	r3, r1, #5, #1
 8001db6:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001db8:	7b3b      	ldrb	r3, [r7, #12]
 8001dba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dbe:	b2d9      	uxtb	r1, r3
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	7813      	ldrb	r3, [r2, #0]
 8001dc4:	f361 1386 	bfi	r3, r1, #6, #1
 8001dc8:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dd0:	b2d9      	uxtb	r1, r3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	7813      	ldrb	r3, [r2, #0]
 8001dd6:	f361 13c7 	bfi	r3, r1, #7, #1
 8001dda:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001de2:	b2d9      	uxtb	r1, r3
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	7853      	ldrb	r3, [r2, #1]
 8001de8:	f361 0301 	bfi	r3, r1, #0, #2
 8001dec:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001dee:	7b7b      	ldrb	r3, [r7, #13]
 8001df0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001df4:	b2d9      	uxtb	r1, r3
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	7853      	ldrb	r3, [r2, #1]
 8001dfa:	f361 0382 	bfi	r3, r1, #2, #1
 8001dfe:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e06:	b2d9      	uxtb	r1, r3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	7853      	ldrb	r3, [r2, #1]
 8001e0c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e10:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e18:	b2d9      	uxtb	r1, r3
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	7853      	ldrb	r3, [r2, #1]
 8001e1e:	f361 1304 	bfi	r3, r1, #4, #1
 8001e22:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e2a:	b2d9      	uxtb	r1, r3
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	7853      	ldrb	r3, [r2, #1]
 8001e30:	f361 1345 	bfi	r3, r1, #5, #1
 8001e34:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001e36:	7bbb      	ldrb	r3, [r7, #14]
 8001e38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e3c:	b2d9      	uxtb	r1, r3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	7853      	ldrb	r3, [r2, #1]
 8001e42:	f361 1386 	bfi	r3, r1, #6, #1
 8001e46:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e4e:	b2d9      	uxtb	r1, r3
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	7853      	ldrb	r3, [r2, #1]
 8001e54:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e58:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e60:	b2d9      	uxtb	r1, r3
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	7893      	ldrb	r3, [r2, #2]
 8001e66:	f361 0303 	bfi	r3, r1, #0, #4
 8001e6a:	7093      	strb	r3, [r2, #2]

    return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	04980760 	.word	0x04980760

08001e80 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001e98:	f107 020e 	add.w	r2, r7, #14
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f91d 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e01a      	b.n	8001eee <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001ec2:	7bba      	ldrb	r2, [r7, #14]
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001ecc:	7bba      	ldrb	r2, [r7, #14]
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2103      	movs	r1, #3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f992 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001ee4:	f06f 0301 	mvn.w	r3, #1
 8001ee8:	e001      	b.n	8001eee <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	603a      	str	r2, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
 8001f04:	460b      	mov	r3, r1
 8001f06:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001f12:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001f14:	7a3b      	ldrb	r3, [r7, #8]
 8001f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f1a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f362 0304 	bfi	r3, r2, #0, #5
 8001f2c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	f362 1347 	bfi	r3, r2, #5, #3
 8001f3e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	7abb      	ldrb	r3, [r7, #10]
 8001f4c:	f362 1346 	bfi	r3, r2, #5, #2
 8001f50:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	7abb      	ldrb	r3, [r7, #10]
 8001f5e:	f362 0304 	bfi	r3, r2, #0, #5
 8001f62:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	7a3b      	ldrb	r3, [r7, #8]
 8001f70:	f362 1386 	bfi	r3, r2, #6, #1
 8001f74:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	0052      	lsls	r2, r2, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3350      	adds	r3, #80	@ 0x50
 8001f86:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	89b9      	ldrh	r1, [r7, #12]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fa68 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	00600400 	.word	0x00600400

08001fa8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001fb2:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001fb4:	7b3b      	ldrb	r3, [r7, #12]
 8001fb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fba:	b2d9      	uxtb	r1, r3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	7813      	ldrb	r3, [r2, #0]
 8001fc0:	f361 0300 	bfi	r3, r1, #0, #1
 8001fc4:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	7813      	ldrb	r3, [r2, #0]
 8001fd2:	f361 0345 	bfi	r3, r1, #1, #5
 8001fd6:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001fde:	b2d9      	uxtb	r1, r3
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	7813      	ldrb	r3, [r2, #0]
 8001fe4:	f361 1387 	bfi	r3, r1, #6, #2
 8001fe8:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ff0:	b2d9      	uxtb	r1, r3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7853      	ldrb	r3, [r2, #1]
 8001ff6:	f361 0304 	bfi	r3, r1, #0, #5
 8001ffa:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002002:	b2d9      	uxtb	r1, r3
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	7853      	ldrb	r3, [r2, #1]
 8002008:	f361 1347 	bfi	r3, r1, #5, #3
 800200c:	7053      	strb	r3, [r2, #1]

    return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	00600400 	.word	0x00600400

08002020 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0a0      	sub	sp, #128	@ 0x80
 8002024:	af00      	add	r7, sp, #0
 8002026:	60ba      	str	r2, [r7, #8]
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	460b      	mov	r3, r1
 8002030:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	0052      	lsls	r2, r2, #1
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	b29b      	uxth	r3, r3
 8002046:	3350      	adds	r3, #80	@ 0x50
 8002048:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 800204c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002050:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8002054:	7bf8      	ldrb	r0, [r7, #15]
 8002056:	2303      	movs	r3, #3
 8002058:	f7ff fd38 	bl	8001acc <DRV_CANFDSPI_ReadWordArray>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002062:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e0c5      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8002070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002072:	667b      	str	r3, [r7, #100]	@ 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8002074:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002078:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8002082:	f06f 0301 	mvn.w	r3, #1
 8002086:	e0b9      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	791b      	ldrb	r3, [r3, #4]
 800208c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f001 fc3a 	bl	800390c <DRV_CANFDSPI_DlcToDataBytes>
 8002098:	6778      	str	r0, [r7, #116]	@ 0x74
    if (dataBytesInObject < txdNumBytes) {
 800209a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800209c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d202      	bcs.n	80020aa <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 80020a4:	f06f 0302 	mvn.w	r3, #2
 80020a8:	e0a8      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 80020aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ac:	663b      	str	r3, [r7, #96]	@ 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 80020ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80020b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
#endif
    a += cRAMADDR_START;
 80020c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80020c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020c8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	789b      	ldrb	r3, [r3, #2]
 80020dc:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	791b      	ldrb	r3, [r3, #4]
 80020e8:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	795b      	ldrb	r3, [r3, #5]
 80020ee:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	799b      	ldrb	r3, [r3, #6]
 80020f4:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	79db      	ldrb	r3, [r3, #7]
 80020fa:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002102:	e010      	b.n	8002126 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8002104:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	441a      	add	r2, r3
 800210c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002110:	3308      	adds	r3, #8
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	3380      	adds	r3, #128	@ 0x80
 8002116:	443b      	add	r3, r7
 8002118:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 800211c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002120:	3301      	adds	r3, #1
 8002122:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002126:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800212a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800212e:	429a      	cmp	r2, r3
 8002130:	d8e8      	bhi.n	8002104 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    uint8_t j = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if (txdNumBytes % 4) {
 800213e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02b      	beq.n	80021a2 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 800214a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800214e:	b29b      	uxth	r3, r3
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	b29b      	uxth	r3, r3
 8002156:	f1c3 0304 	rsb	r3, r3, #4
 800215a:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        i = txdNumBytes + 8;
 800215e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3308      	adds	r3, #8
 8002166:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        for (j = 0; j < n; j++) {
 800216a:	2300      	movs	r3, #0
 800216c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002170:	e010      	b.n	8002194 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8002172:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800217e:	4413      	add	r3, r2
 8002180:	3380      	adds	r3, #128	@ 0x80
 8002182:	443b      	add	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 800218a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800218e:	3301      	adds	r3, #1
 8002190:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002194:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002198:	b29b      	uxth	r3, r3
 800219a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 800219e:	429a      	cmp	r2, r3
 80021a0:	d8e7      	bhi.n	8002172 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80021a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80021ac:	4413      	add	r3, r2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3308      	adds	r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f107 0210 	add.w	r2, r7, #16
 80021b8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 80021bc:	7bf8      	ldrb	r0, [r7, #15]
 80021be:	f7ff fbe1 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 80021c8:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 80021d0:	f06f 0303 	mvn.w	r3, #3
 80021d4:	e012      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 80021d6:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 80021da:	7bb9      	ldrb	r1, [r7, #14]
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f83a 	bl	8002258 <DRV_CANFDSPI_TransmitChannelUpdate>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 80021ea:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 80021f2:	f06f 0304 	mvn.w	r3, #4
 80021f6:	e001      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 80021f8:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3780      	adds	r7, #128	@ 0x80
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	0052      	lsls	r2, r2, #1
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	b29b      	uxth	r3, r3
 800222e:	3350      	adds	r3, #80	@ 0x50
 8002230:	81bb      	strh	r3, [r7, #12]
    a += 1;
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	3301      	adds	r3, #1
 8002236:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8002238:	2302      	movs	r3, #2
 800223a:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	89b9      	ldrh	r1, [r7, #12]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ffda 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 8002248:	4603      	mov	r3, r0
 800224a:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 800224c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	460b      	mov	r3, r1
 8002264:	71bb      	strb	r3, [r7, #6]
 8002266:	4613      	mov	r3, r2
 8002268:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	0052      	lsls	r2, r2, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	b29b      	uxth	r3, r3
 800227c:	3351      	adds	r3, #81	@ 0x51
 800227e:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8002284:	7a7b      	ldrb	r3, [r7, #9]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 800228c:	797b      	ldrb	r3, [r7, #5]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8002292:	7a7b      	ldrb	r3, [r7, #9]
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800229a:	7a7a      	ldrb	r2, [r7, #9]
 800229c:	89b9      	ldrh	r1, [r7, #12]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe ffab 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e001      	b.n	80022bc <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80022b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	603a      	str	r2, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	460b      	mov	r3, r1
 80022d2:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	333e      	adds	r3, #62	@ 0x3e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	89b9      	ldrh	r1, [r7, #12]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f8b6 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80022fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	603a      	str	r2, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	460b      	mov	r3, r1
 8002316:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	b29b      	uxth	r3, r3
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	b29b      	uxth	r3, r3
 800232e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002332:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	89b9      	ldrh	r1, [r7, #12]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f892 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	4603      	mov	r3, r0
 8002364:	71bb      	strb	r3, [r7, #6]
 8002366:	460b      	mov	r3, r1
 8002368:	717b      	strb	r3, [r7, #5]
 800236a:	4613      	mov	r3, r2
 800236c:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 8002372:	793b      	ldrb	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 8002378:	7a3b      	ldrb	r3, [r7, #8]
 800237a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800237e:	723b      	strb	r3, [r7, #8]
 8002380:	e003      	b.n	800238a <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	f36f 13c7 	bfc	r3, #7, #1
 8002388:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 800238a:	797b      	ldrb	r3, [r7, #5]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	b2da      	uxtb	r2, r3
 8002392:	7a3b      	ldrb	r3, [r7, #8]
 8002394:	f362 0304 	bfi	r3, r2, #0, #5
 8002398:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80023a2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80023a4:	7a3a      	ldrb	r2, [r7, #8]
 80023a6:	89b9      	ldrh	r1, [r7, #12]
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ff26 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}

080023c0 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	603a      	str	r2, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	460b      	mov	r3, r1
 80023ce:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 80023de:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80023e2:	e033      	b.n	800244c <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 80023e6:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 80023e8:	7a3b      	ldrb	r3, [r7, #8]
 80023ea:	f36f 13c7 	bfc	r3, #7, #1
 80023ee:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	f362 0304 	bfi	r3, r2, #0, #5
 8002400:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800240a:	b2da      	uxtb	r2, r3
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	f362 1347 	bfi	r3, r2, #5, #3
 8002412:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	7a3b      	ldrb	r3, [r7, #8]
 8002420:	f362 1345 	bfi	r3, r2, #5, #1
 8002424:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	b29b      	uxth	r3, r3
 8002434:	3350      	adds	r3, #80	@ 0x50
 8002436:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	89b9      	ldrh	r1, [r7, #12]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f810 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	00600400 	.word	0x00600400

08002458 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 8002462:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	7813      	ldrb	r3, [r2, #0]
 8002470:	f361 0345 	bfi	r3, r1, #1, #5
 8002474:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800247c:	b2d9      	uxtb	r1, r3
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	8813      	ldrh	r3, [r2, #0]
 8002482:	f361 1388 	bfi	r3, r1, #6, #3
 8002486:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8002488:	7b3b      	ldrb	r3, [r7, #12]
 800248a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800248e:	b2d9      	uxtb	r1, r3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	7813      	ldrb	r3, [r2, #0]
 8002494:	f361 0300 	bfi	r3, r1, #0, #1
 8002498:	7013      	strb	r3, [r2, #0]

    return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	00600400 	.word	0x00600400

080024ac <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0a0      	sub	sp, #128	@ 0x80
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60ba      	str	r2, [r7, #8]
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	460b      	mov	r3, r1
 80024bc:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t i = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3350      	adds	r3, #80	@ 0x50
 80024e0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 80024e4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80024e8:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80024ec:	7bf8      	ldrb	r0, [r7, #15]
 80024ee:	2303      	movs	r3, #3
 80024f0:	f7ff faec 	bl	8001acc <DRV_CANFDSPI_ReadWordArray>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80024fa:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e0cd      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800250a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (ciFifoCon.txBF.TxEnable) {
 800250c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002510:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800251a:	f06f 0301 	mvn.w	r3, #1
 800251e:	e0c1      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002520:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002522:	667b      	str	r3, [r7, #100]	@ 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002526:	663b      	str	r3, [r7, #96]	@ 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002528:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	b29b      	uxth	r3, r3
 8002532:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
#endif
    a += cRAMADDR_START;
 8002536:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800253a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800253e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 8002542:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002546:	3308      	adds	r3, #8
 8002548:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 800254c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 800255a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800255e:	3304      	adds	r3, #4
 8002560:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 8002564:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 8002572:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3304      	adds	r3, #4
 800257e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 8002582:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002586:	2b4c      	cmp	r3, #76	@ 0x4c
 8002588:	d902      	bls.n	8002590 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 800258a:	234c      	movs	r3, #76	@ 0x4c
 800258c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8002590:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002594:	b29b      	uxth	r3, r3
 8002596:	f107 0214 	add.w	r2, r7, #20
 800259a:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 800259e:	7bf8      	ldrb	r0, [r7, #15]
 80025a0:	f7ff f93e 	bl	8001820 <DRV_CANFDSPI_ReadByteArray>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80025aa:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80025b2:	f06f 0302 	mvn.w	r3, #2
 80025b6:	e075      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80025b8:	7d3b      	ldrb	r3, [r7, #20]
 80025ba:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80025bc:	7d7b      	ldrb	r3, [r7, #21]
 80025be:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80025c0:	7dbb      	ldrb	r3, [r7, #22]
 80025c2:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 80025ce:	7e3b      	ldrb	r3, [r7, #24]
 80025d0:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 80025d2:	7e7b      	ldrb	r3, [r7, #25]
 80025d4:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 80025d6:	7ebb      	ldrb	r3, [r7, #26]
 80025d8:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 80025da:	7efb      	ldrb	r3, [r7, #27]
 80025dc:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80025e4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d027      	beq.n	8002642 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 80025f2:	7f3b      	ldrb	r3, [r7, #28]
 80025f4:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 80025f6:	7f7b      	ldrb	r3, [r7, #29]
 80025f8:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 80025fa:	7fbb      	ldrb	r3, [r7, #30]
 80025fc:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
 8002600:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800260e:	e011      	b.n	8002634 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002610:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002614:	f103 020c 	add.w	r2, r3, #12
 8002618:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	440b      	add	r3, r1
 8002620:	3280      	adds	r2, #128	@ 0x80
 8002622:	443a      	add	r2, r7
 8002624:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002628:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800262a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800262e:	3301      	adds	r3, #1
 8002630:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002634:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002638:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800263c:	429a      	cmp	r2, r3
 800263e:	d3e7      	bcc.n	8002610 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8002640:	e01e      	b.n	8002680 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002648:	2300      	movs	r3, #0
 800264a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800264e:	e011      	b.n	8002674 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8002650:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002654:	f103 0208 	add.w	r2, r3, #8
 8002658:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	440b      	add	r3, r1
 8002660:	3280      	adds	r2, #128	@ 0x80
 8002662:	443a      	add	r2, r7
 8002664:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002668:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800266a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800266e:	3301      	adds	r3, #1
 8002670:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002674:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002678:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800267c:	429a      	cmp	r2, r3
 800267e:	d3e7      	bcc.n	8002650 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8002680:	7bba      	ldrb	r2, [r7, #14]
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f810 	bl	80026ac <DRV_CANFDSPI_ReceiveChannelUpdate>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002692:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 800269a:	f06f 0303 	mvn.w	r3, #3
 800269e:	e001      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80026a0:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3780      	adds	r7, #128	@ 0x80
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	460a      	mov	r2, r1
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3351      	adds	r3, #81	@ 0x51
 80026d8:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 80026da:	7a7b      	ldrb	r3, [r7, #9]
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80026e2:	7a7a      	ldrb	r2, [r7, #9]
 80026e4:	89f9      	ldrh	r1, [r7, #14]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fd87 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80026ee:	4603      	mov	r3, r0
 80026f0:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80026f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	460a      	mov	r2, r1
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	4613      	mov	r3, r2
 800270c:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002716:	231e      	movs	r3, #30
 8002718:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800271e:	f107 0208 	add.w	r2, r7, #8
 8002722:	89b9      	ldrh	r1, [r7, #12]
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe ff36 	bl	8001598 <DRV_CANFDSPI_ReadHalfWord>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	e01b      	b.n	8002776 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	b21a      	sxth	r2, r3
 8002742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002746:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21b      	sxth	r3, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	89b9      	ldrh	r1, [r7, #12]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe ffc6 	bl	80016ec <DRV_CANFDSPI_WriteHalfWord>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 800276c:	f06f 0301 	mvn.w	r3, #1
 8002770:	e001      	b.n	8002776 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	460b      	mov	r3, r1
 800278c:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	0052      	lsls	r2, r2, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3354      	adds	r3, #84	@ 0x54
 80027aa:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80027ac:	f107 0208 	add.w	r2, r7, #8
 80027b0:	89b9      	ldrh	r1, [r7, #12]
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fc93 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e007      	b.n	80027dc <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 80027cc:	7a3b      	ldrb	r3, [r7, #8]
 80027ce:	f003 0317 	and.w	r3, r3, #23
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	603a      	str	r2, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	460b      	mov	r3, r1
 80027f2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8002802:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002806:	e022      	b.n	800284e <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	0052      	lsls	r2, r2, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	b29b      	uxth	r3, r3
 800281a:	3354      	adds	r3, #84	@ 0x54
 800281c:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800281e:	f107 0208 	add.w	r2, r7, #8
 8002822:	89b9      	ldrh	r1, [r7, #12]
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc5a 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	e007      	b.n	800284e <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800283e:	7a3b      	ldrb	r3, [r7, #8]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	b2da      	uxtb	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
 8002860:	460b      	mov	r3, r1
 8002862:	71bb      	strb	r3, [r7, #6]
 8002864:	4613      	mov	r3, r2
 8002866:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8002876:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800287a:	e036      	b.n	80028ea <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800287c:	79bb      	ldrb	r3, [r7, #6]
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	b29b      	uxth	r3, r3
 800288a:	3350      	adds	r3, #80	@ 0x50
 800288c:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 8002892:	f107 0208 	add.w	r2, r7, #8
 8002896:	89b9      	ldrh	r1, [r7, #12]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fc20 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	e01b      	b.n	80028ea <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80028b2:	7a3b      	ldrb	r3, [r7, #8]
 80028b4:	b25a      	sxtb	r2, r3
 80028b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 80028c8:	7a3a      	ldrb	r2, [r7, #8]
 80028ca:	89b9      	ldrh	r1, [r7, #12]
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fc94 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 80028e0:	f06f 0301 	mvn.w	r3, #1
 80028e4:	e001      	b.n	80028ea <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800290a:	2334      	movs	r3, #52	@ 0x34
 800290c:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002912:	f107 0210 	add.w	r2, r7, #16
 8002916:	8ab9      	ldrh	r1, [r7, #20]
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fcfa 	bl	8001314 <DRV_CANFDSPI_ReadWord>
 8002920:	4603      	mov	r3, r0
 8002922:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	e00d      	b.n	800294e <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002932:	7c7a      	ldrb	r2, [r7, #17]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002938:	7c3a      	ldrb	r2, [r7, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800293e:	7cbb      	ldrb	r3, [r7, #18]
 8002940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002944:	b2da      	uxtb	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800294a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8002968:	f107 020e 	add.w	r2, r7, #14
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f640 610c 	movw	r1, #3596	@ 0xe0c
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fbb4 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 8002978:	4603      	mov	r3, r0
 800297a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800297c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e015      	b.n	80029b6 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 800298a:	7bbb      	ldrb	r3, [r7, #14]
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 8002994:	7bba      	ldrb	r2, [r7, #14]
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f640 610c 	movw	r1, #3596	@ 0xe0c
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fc2d 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80029ae:	f06f 0301 	mvn.w	r3, #1
 80029b2:	e000      	b.n	80029b6 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b090      	sub	sp, #64	@ 0x40
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	460a      	mov	r2, r1
 80029c8:	71fb      	strb	r3, [r7, #7]
 80029ca:	4613      	mov	r3, r2
 80029cc:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80029d4:	2300      	movs	r3, #0
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d8:	e008      	b.n	80029ec <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 80029da:	f107 0208 	add.w	r2, r7, #8
 80029de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e0:	4413      	add	r3, r2
 80029e2:	79ba      	ldrb	r2, [r7, #6]
 80029e4:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80029e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e8:	3301      	adds	r3, #1
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80029f0:	d9f3      	bls.n	80029da <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 80029f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f6:	873b      	strh	r3, [r7, #56]	@ 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fc:	e016      	b.n	8002a2c <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 80029fe:	f107 0208 	add.w	r2, r7, #8
 8002a02:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a04:	79f8      	ldrb	r0, [r7, #7]
 8002a06:	2330      	movs	r3, #48	@ 0x30
 8002a08:	f7fe ffbc 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (spiTransferError) {
 8002a12:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e00a      	b.n	8002a36 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002a20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a22:	3330      	adds	r3, #48	@ 0x30
 8002a24:	873b      	strh	r3, [r7, #56]	@ 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	3301      	adds	r3, #1
 8002a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2e:	2b29      	cmp	r3, #41	@ 0x29
 8002a30:	d9e5      	bls.n	80029fe <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002a32:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3740      	adds	r7, #64	@ 0x40
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002a3e:	b590      	push	{r4, r7, lr}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4604      	mov	r4, r0
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	4603      	mov	r3, r0
 8002a52:	71bb      	strb	r3, [r7, #6]
 8002a54:	460b      	mov	r3, r1
 8002a56:	717b      	strb	r3, [r7, #5]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002a60:	793b      	ldrb	r3, [r7, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d036      	beq.n	8002ad4 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	dc4c      	bgt.n	8002b04 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d018      	beq.n	8002aa4 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002a72:	e047      	b.n	8002b04 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002a74:	79ba      	ldrb	r2, [r7, #6]
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f84c 	bl	8002b18 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	e03d      	b.n	8002b0e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002a92:	797a      	ldrb	r2, [r7, #5]
 8002a94:	79b9      	ldrb	r1, [r7, #6]
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f8c3 	bl	8002c24 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
            break;
 8002aa2:	e032      	b.n	8002b0a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002aa4:	79ba      	ldrb	r2, [r7, #6]
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 faf2 	bl	8003094 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	e025      	b.n	8002b0e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002ac2:	797a      	ldrb	r2, [r7, #5]
 8002ac4:	79b9      	ldrb	r1, [r7, #6]
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb6f 	bl	80031ac <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]
            break;
 8002ad2:	e01a      	b.n	8002b0a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002ad4:	79ba      	ldrb	r2, [r7, #6]
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fd10 	bl	8003500 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	e00d      	b.n	8002b0e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002af2:	797a      	ldrb	r2, [r7, #5]
 8002af4:	79b9      	ldrb	r1, [r7, #6]
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd8d 	bl	8003618 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	73fb      	strb	r3, [r7, #15]
            break;
 8002b02:	e002      	b.n	8002b0a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002b04:	23ff      	movs	r3, #255	@ 0xff
 8002b06:	73fb      	strb	r3, [r7, #15]
            break;
 8002b08:	bf00      	nop
    }

    return spiTransferError;
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
	...

08002b18 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460a      	mov	r2, r1
 8002b22:	71fb      	strb	r3, [r7, #7]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c20 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002b2e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	2b11      	cmp	r3, #17
 8002b34:	d862      	bhi.n	8002bfc <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002b36:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b85 	.word	0x08002b85
 8002b40:	08002b85 	.word	0x08002b85
 8002b44:	08002b85 	.word	0x08002b85
 8002b48:	08002b85 	.word	0x08002b85
 8002b4c:	08002b85 	.word	0x08002b85
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002b85 	.word	0x08002b85
 8002b58:	08002b85 	.word	0x08002b85
 8002b5c:	08002ba3 	.word	0x08002ba3
 8002b60:	08002ba3 	.word	0x08002ba3
 8002b64:	08002ba3 	.word	0x08002ba3
 8002b68:	08002ba3 	.word	0x08002ba3
 8002b6c:	08002ba3 	.word	0x08002ba3
 8002b70:	08002ba3 	.word	0x08002ba3
 8002b74:	08002ba3 	.word	0x08002ba3
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bdf 	.word	0x08002bdf
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002b88:	233e      	movs	r3, #62	@ 0x3e
 8002b8a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002b8c:	7a7b      	ldrb	r3, [r7, #9]
 8002b8e:	220f      	movs	r2, #15
 8002b90:	f362 0306 	bfi	r3, r2, #0, #7
 8002b94:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002b96:	7a3b      	ldrb	r3, [r7, #8]
 8002b98:	220f      	movs	r2, #15
 8002b9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9e:	723b      	strb	r3, [r7, #8]
            break;
 8002ba0:	e02f      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002ba6:	237e      	movs	r3, #126	@ 0x7e
 8002ba8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002baa:	7a7b      	ldrb	r3, [r7, #9]
 8002bac:	221f      	movs	r2, #31
 8002bae:	f362 0306 	bfi	r3, r2, #0, #7
 8002bb2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002bb4:	7a3b      	ldrb	r3, [r7, #8]
 8002bb6:	221f      	movs	r2, #31
 8002bb8:	f362 0306 	bfi	r3, r2, #0, #7
 8002bbc:	723b      	strb	r3, [r7, #8]
            break;
 8002bbe:	e020      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002bc4:	231e      	movs	r3, #30
 8002bc6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	2207      	movs	r2, #7
 8002bcc:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002bd2:	7a3b      	ldrb	r3, [r7, #8]
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e011      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002be2:	23fe      	movs	r3, #254	@ 0xfe
 8002be4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002be6:	7a7b      	ldrb	r3, [r7, #9]
 8002be8:	223f      	movs	r2, #63	@ 0x3f
 8002bea:	f362 0306 	bfi	r3, r2, #0, #7
 8002bee:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002bf0:	7a3b      	ldrb	r3, [r7, #8]
 8002bf2:	223f      	movs	r2, #63	@ 0x3f
 8002bf4:	f362 0306 	bfi	r3, r2, #0, #7
 8002bf8:	723b      	strb	r3, [r7, #8]
            break;
 8002bfa:	e002      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	e009      	b.n	8002c16 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2104      	movs	r1, #4
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fc2b 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	003e0f0f 	.word	0x003e0f0f

08002c24 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	71bb      	strb	r3, [r7, #6]
 8002c32:	4613      	mov	r3, r2
 8002c34:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002c3a:	4be2      	ldr	r3, [pc, #904]	@ (8002fc4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002c3c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002c42:	7abb      	ldrb	r3, [r7, #10]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f362 0301 	bfi	r3, r2, #0, #2
 8002c4a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002c50:	79bb      	ldrb	r3, [r7, #6]
 8002c52:	2b11      	cmp	r3, #17
 8002c54:	f200 81f6 	bhi.w	8003044 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002ca9 	.word	0x08002ca9
 8002c64:	08002ce7 	.word	0x08002ce7
 8002c68:	08002d25 	.word	0x08002d25
 8002c6c:	08002d63 	.word	0x08002d63
 8002c70:	08002da1 	.word	0x08002da1
 8002c74:	08002ddf 	.word	0x08002ddf
 8002c78:	08002e19 	.word	0x08002e19
 8002c7c:	08002e4d 	.word	0x08002e4d
 8002c80:	08002e7f 	.word	0x08002e7f
 8002c84:	08002ec5 	.word	0x08002ec5
 8002c88:	08002f0b 	.word	0x08002f0b
 8002c8c:	08002f49 	.word	0x08002f49
 8002c90:	08002f87 	.word	0x08002f87
 8002c94:	08002fc9 	.word	0x08002fc9
 8002c98:	08003007 	.word	0x08003007
 8002c9c:	08002d63 	.word	0x08002d63
 8002ca0:	08002e19 	.word	0x08002e19
 8002ca4:	08002e7f 	.word	0x08002e7f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	221e      	movs	r2, #30
 8002cb0:	f362 0304 	bfi	r3, r2, #0, #5
 8002cb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	f362 0303 	bfi	r3, r2, #0, #4
 8002cbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	221f      	movs	r2, #31
 8002cce:	f362 0306 	bfi	r3, r2, #0, #7
 8002cd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	f362 0305 	bfi	r3, r2, #0, #6
 8002ce2:	723b      	strb	r3, [r7, #8]
            break;
 8002ce4:	e1b1      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	220e      	movs	r2, #14
 8002cee:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f362 0303 	bfi	r3, r2, #0, #4
 8002d06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	7a3b      	ldrb	r3, [r7, #8]
 8002d1c:	f362 0305 	bfi	r3, r2, #0, #6
 8002d20:	723b      	strb	r3, [r7, #8]
            break;
 8002d22:	e192      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	f362 0304 	bfi	r3, r2, #0, #5
 8002d30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f362 0303 	bfi	r3, r2, #0, #4
 8002d3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d3c:	7b3b      	ldrb	r3, [r7, #12]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f362 0303 	bfi	r3, r2, #0, #4
 8002d44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d46:	7a7b      	ldrb	r3, [r7, #9]
 8002d48:	2209      	movs	r2, #9
 8002d4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	7a3b      	ldrb	r3, [r7, #8]
 8002d5a:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5e:	723b      	strb	r3, [r7, #8]
            break;
 8002d60:	e173      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
 8002d68:	2206      	movs	r2, #6
 8002d6a:	f362 0304 	bfi	r3, r2, #0, #5
 8002d6e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d70:	7b7b      	ldrb	r3, [r7, #13]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f362 0303 	bfi	r3, r2, #0, #4
 8002d78:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d7a:	7b3b      	ldrb	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d82:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d84:	7a7b      	ldrb	r3, [r7, #9]
 8002d86:	2207      	movs	r2, #7
 8002d88:	f362 0306 	bfi	r3, r2, #0, #7
 8002d8c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	7a3b      	ldrb	r3, [r7, #8]
 8002d98:	f362 0305 	bfi	r3, r2, #0, #6
 8002d9c:	723b      	strb	r3, [r7, #8]
            break;
 8002d9e:	e154      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002da4:	7bbb      	ldrb	r3, [r7, #14]
 8002da6:	2204      	movs	r2, #4
 8002da8:	f362 0304 	bfi	r3, r2, #0, #5
 8002dac:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dae:	7b7b      	ldrb	r3, [r7, #13]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f362 0303 	bfi	r3, r2, #0, #4
 8002db6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002db8:	7b3b      	ldrb	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f362 0303 	bfi	r3, r2, #0, #4
 8002dc0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002dc2:	7a7b      	ldrb	r3, [r7, #9]
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	f362 0306 	bfi	r3, r2, #0, #7
 8002dca:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	7a3b      	ldrb	r3, [r7, #8]
 8002dd6:	f362 0305 	bfi	r3, r2, #0, #6
 8002dda:	723b      	strb	r3, [r7, #8]
            break;
 8002ddc:	e135      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	2203      	movs	r2, #3
 8002de6:	f362 0304 	bfi	r3, r2, #0, #5
 8002dea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	f36f 0303 	bfc	r3, #0, #4
 8002df2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	f36f 0303 	bfc	r3, #0, #4
 8002dfa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002dfc:	7a7b      	ldrb	r3, [r7, #9]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	f362 0306 	bfi	r3, r2, #0, #7
 8002e04:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	7a3b      	ldrb	r3, [r7, #8]
 8002e10:	f362 0305 	bfi	r3, r2, #0, #6
 8002e14:	723b      	strb	r3, [r7, #8]
            break;
 8002e16:	e118      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e1c:	7bbb      	ldrb	r3, [r7, #14]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f362 0304 	bfi	r3, r2, #0, #5
 8002e24:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e26:	7b7b      	ldrb	r3, [r7, #13]
 8002e28:	f36f 0303 	bfc	r3, #0, #4
 8002e2c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	f36f 0303 	bfc	r3, #0, #4
 8002e34:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e36:	7a7b      	ldrb	r3, [r7, #9]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f362 0306 	bfi	r3, r2, #0, #7
 8002e3e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002e40:	7a3b      	ldrb	r3, [r7, #8]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f362 0305 	bfi	r3, r2, #0, #6
 8002e48:	723b      	strb	r3, [r7, #8]
            break;
 8002e4a:	e0fe      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f362 0304 	bfi	r3, r2, #0, #5
 8002e58:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f36f 0303 	bfc	r3, #0, #4
 8002e60:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e62:	7b3b      	ldrb	r3, [r7, #12]
 8002e64:	f36f 0303 	bfc	r3, #0, #4
 8002e68:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002e6a:	7a7b      	ldrb	r3, [r7, #9]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f362 0306 	bfi	r3, r2, #0, #7
 8002e72:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002e74:	7a3b      	ldrb	r3, [r7, #8]
 8002e76:	f36f 0305 	bfc	r3, #0, #6
 8002e7a:	723b      	strb	r3, [r7, #8]
            break;
 8002e7c:	e0e5      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	221e      	movs	r2, #30
 8002e86:	f362 0304 	bfi	r3, r2, #0, #5
 8002e8a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002e8c:	7b7b      	ldrb	r3, [r7, #13]
 8002e8e:	2207      	movs	r2, #7
 8002e90:	f362 0303 	bfi	r3, r2, #0, #4
 8002e94:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002e96:	7b3b      	ldrb	r3, [r7, #12]
 8002e98:	2207      	movs	r2, #7
 8002e9a:	f362 0303 	bfi	r3, r2, #0, #4
 8002e9e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002ea0:	7a7b      	ldrb	r3, [r7, #9]
 8002ea2:	221f      	movs	r2, #31
 8002ea4:	f362 0306 	bfi	r3, r2, #0, #7
 8002ea8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	7a3b      	ldrb	r3, [r7, #8]
 8002eb4:	f362 0305 	bfi	r3, r2, #0, #6
 8002eb8:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002eba:	7abb      	ldrb	r3, [r7, #10]
 8002ebc:	f36f 0301 	bfc	r3, #0, #2
 8002ec0:	72bb      	strb	r3, [r7, #10]
            break;
 8002ec2:	e0c2      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002ec8:	7bbb      	ldrb	r3, [r7, #14]
 8002eca:	2211      	movs	r2, #17
 8002ecc:	f362 0304 	bfi	r3, r2, #0, #5
 8002ed0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	f362 0303 	bfi	r3, r2, #0, #4
 8002eda:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	f362 0303 	bfi	r3, r2, #0, #4
 8002ee4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002ee6:	7a7b      	ldrb	r3, [r7, #9]
 8002ee8:	2212      	movs	r2, #18
 8002eea:	f362 0306 	bfi	r3, r2, #0, #7
 8002eee:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	7a3b      	ldrb	r3, [r7, #8]
 8002efa:	f362 0305 	bfi	r3, r2, #0, #6
 8002efe:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f00:	7abb      	ldrb	r3, [r7, #10]
 8002f02:	f36f 0301 	bfc	r3, #0, #2
 8002f06:	72bb      	strb	r3, [r7, #10]
            break;
 8002f08:	e09f      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	221e      	movs	r2, #30
 8002f12:	f362 0304 	bfi	r3, r2, #0, #5
 8002f16:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002f18:	7b7b      	ldrb	r3, [r7, #13]
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002f20:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002f22:	7b3b      	ldrb	r3, [r7, #12]
 8002f24:	2207      	movs	r2, #7
 8002f26:	f362 0303 	bfi	r3, r2, #0, #4
 8002f2a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002f2c:	7a7b      	ldrb	r3, [r7, #9]
 8002f2e:	221f      	movs	r2, #31
 8002f30:	f362 0306 	bfi	r3, r2, #0, #7
 8002f34:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	7a3b      	ldrb	r3, [r7, #8]
 8002f40:	f362 0305 	bfi	r3, r2, #0, #6
 8002f44:	723b      	strb	r3, [r7, #8]
            break;
 8002f46:	e080      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	2212      	movs	r2, #18
 8002f50:	f362 0304 	bfi	r3, r2, #0, #5
 8002f54:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002f56:	7b7b      	ldrb	r3, [r7, #13]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f362 0303 	bfi	r3, r2, #0, #4
 8002f5e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002f60:	7b3b      	ldrb	r3, [r7, #12]
 8002f62:	2205      	movs	r2, #5
 8002f64:	f362 0303 	bfi	r3, r2, #0, #4
 8002f68:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002f6a:	7a7b      	ldrb	r3, [r7, #9]
 8002f6c:	2213      	movs	r2, #19
 8002f6e:	f362 0306 	bfi	r3, r2, #0, #7
 8002f72:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	7a3b      	ldrb	r3, [r7, #8]
 8002f7e:	f362 0305 	bfi	r3, r2, #0, #6
 8002f82:	723b      	strb	r3, [r7, #8]
            break;
 8002f84:	e061      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f8a:	7bbb      	ldrb	r3, [r7, #14]
 8002f8c:	220e      	movs	r2, #14
 8002f8e:	f362 0304 	bfi	r3, r2, #0, #5
 8002f92:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f94:	7b7b      	ldrb	r3, [r7, #13]
 8002f96:	2203      	movs	r2, #3
 8002f98:	f362 0303 	bfi	r3, r2, #0, #4
 8002f9c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002f9e:	7b3b      	ldrb	r3, [r7, #12]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fa8:	7a7b      	ldrb	r3, [r7, #9]
 8002faa:	220f      	movs	r2, #15
 8002fac:	f362 0306 	bfi	r3, r2, #0, #7
 8002fb0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	7a3b      	ldrb	r3, [r7, #8]
 8002fbc:	f362 0305 	bfi	r3, r2, #0, #6
 8002fc0:	723b      	strb	r3, [r7, #8]
            break;
 8002fc2:	e042      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002fc4:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	f362 0304 	bfi	r3, r2, #0, #5
 8002fd4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002fd6:	7b7b      	ldrb	r3, [r7, #13]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f362 0303 	bfi	r3, r2, #0, #4
 8002fde:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002fe0:	7b3b      	ldrb	r3, [r7, #12]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002fea:	7a7b      	ldrb	r3, [r7, #9]
 8002fec:	2209      	movs	r2, #9
 8002fee:	f362 0306 	bfi	r3, r2, #0, #7
 8002ff2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	7a3b      	ldrb	r3, [r7, #8]
 8002ffe:	f362 0305 	bfi	r3, r2, #0, #6
 8003002:	723b      	strb	r3, [r7, #8]
            break;
 8003004:	e021      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	2206      	movs	r2, #6
 800300e:	f362 0304 	bfi	r3, r2, #0, #5
 8003012:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003014:	7b7b      	ldrb	r3, [r7, #13]
 8003016:	2201      	movs	r2, #1
 8003018:	f362 0303 	bfi	r3, r2, #0, #4
 800301c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800301e:	7b3b      	ldrb	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f362 0303 	bfi	r3, r2, #0, #4
 8003026:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003028:	7a7b      	ldrb	r3, [r7, #9]
 800302a:	2207      	movs	r2, #7
 800302c:	f362 0306 	bfi	r3, r2, #0, #7
 8003030:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003038:	b2da      	uxtb	r2, r3
 800303a:	7a3b      	ldrb	r3, [r7, #8]
 800303c:	f362 0305 	bfi	r3, r2, #0, #6
 8003040:	723b      	strb	r3, [r7, #8]
            break;
 8003042:	e002      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	e01f      	b.n	800308a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2108      	movs	r1, #8
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fa07 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800305a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8003062:	f06f 0301 	mvn.w	r3, #1
 8003066:	e010      	b.n	800308a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	210c      	movs	r1, #12
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f9f8 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8003080:	f06f 0302 	mvn.w	r3, #2
 8003084:	e001      	b.n	800308a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8003086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop

08003094 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	460a      	mov	r2, r1
 800309e:	71fb      	strb	r3, [r7, #7]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80030aa:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030ac:	79bb      	ldrb	r3, [r7, #6]
 80030ae:	2b11      	cmp	r3, #17
 80030b0:	d862      	bhi.n	8003178 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80030b2:	a201      	add	r2, pc, #4	@ (adr r2, 80030b8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	08003101 	.word	0x08003101
 80030bc:	08003101 	.word	0x08003101
 80030c0:	08003179 	.word	0x08003179
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	08003101 	.word	0x08003101
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	0800311f 	.word	0x0800311f
 80030dc:	0800311f 	.word	0x0800311f
 80030e0:	0800311f 	.word	0x0800311f
 80030e4:	0800311f 	.word	0x0800311f
 80030e8:	0800311f 	.word	0x0800311f
 80030ec:	0800311f 	.word	0x0800311f
 80030f0:	0800311f 	.word	0x0800311f
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800315b 	.word	0x0800315b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003104:	231e      	movs	r3, #30
 8003106:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003108:	7a7b      	ldrb	r3, [r7, #9]
 800310a:	2207      	movs	r2, #7
 800310c:	f362 0306 	bfi	r3, r2, #0, #7
 8003110:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003112:	7a3b      	ldrb	r3, [r7, #8]
 8003114:	2207      	movs	r2, #7
 8003116:	f362 0306 	bfi	r3, r2, #0, #7
 800311a:	723b      	strb	r3, [r7, #8]
            break;
 800311c:	e02f      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003122:	233e      	movs	r3, #62	@ 0x3e
 8003124:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003126:	7a7b      	ldrb	r3, [r7, #9]
 8003128:	220f      	movs	r2, #15
 800312a:	f362 0306 	bfi	r3, r2, #0, #7
 800312e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003130:	7a3b      	ldrb	r3, [r7, #8]
 8003132:	220f      	movs	r2, #15
 8003134:	f362 0306 	bfi	r3, r2, #0, #7
 8003138:	723b      	strb	r3, [r7, #8]
            break;
 800313a:	e020      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003140:	230e      	movs	r3, #14
 8003142:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	2203      	movs	r2, #3
 8003148:	f362 0306 	bfi	r3, r2, #0, #7
 800314c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	2203      	movs	r2, #3
 8003152:	f362 0306 	bfi	r3, r2, #0, #7
 8003156:	723b      	strb	r3, [r7, #8]
            break;
 8003158:	e011      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800315e:	237e      	movs	r3, #126	@ 0x7e
 8003160:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8003162:	7a7b      	ldrb	r3, [r7, #9]
 8003164:	221f      	movs	r2, #31
 8003166:	f362 0306 	bfi	r3, r2, #0, #7
 800316a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 800316c:	7a3b      	ldrb	r3, [r7, #8]
 800316e:	221f      	movs	r2, #31
 8003170:	f362 0306 	bfi	r3, r2, #0, #7
 8003174:	723b      	strb	r3, [r7, #8]
            break;
 8003176:	e002      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e010      	b.n	80031a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	2104      	movs	r1, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe f96d 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8003196:	f06f 0301 	mvn.w	r3, #1
 800319a:	e001      	b.n	80031a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 800319c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	003e0f0f 	.word	0x003e0f0f

080031ac <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	460b      	mov	r3, r1
 80031b8:	71bb      	strb	r3, [r7, #6]
 80031ba:	4613      	mov	r3, r2
 80031bc:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031c2:	4bce      	ldr	r3, [pc, #824]	@ (80034fc <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 80031c4:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80031ca:	7abb      	ldrb	r3, [r7, #10]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f362 0301 	bfi	r3, r2, #0, #2
 80031d2:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80031d8:	79bb      	ldrb	r3, [r7, #6]
 80031da:	2b11      	cmp	r3, #17
 80031dc:	f200 8166 	bhi.w	80034ac <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	08003231 	.word	0x08003231
 80031ec:	0800326f 	.word	0x0800326f
 80031f0:	080034ad 	.word	0x080034ad
 80031f4:	080032ad 	.word	0x080032ad
 80031f8:	080032e7 	.word	0x080032e7
 80031fc:	08003321 	.word	0x08003321
 8003200:	08003321 	.word	0x08003321
 8003204:	08003321 	.word	0x08003321
 8003208:	08003327 	.word	0x08003327
 800320c:	0800336d 	.word	0x0800336d
 8003210:	080033b3 	.word	0x080033b3
 8003214:	080033f1 	.word	0x080033f1
 8003218:	0800342f 	.word	0x0800342f
 800321c:	0800346d 	.word	0x0800346d
 8003220:	08003473 	.word	0x08003473
 8003224:	080032ad 	.word	0x080032ad
 8003228:	08003321 	.word	0x08003321
 800322c:	08003327 	.word	0x08003327
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003234:	7bbb      	ldrb	r3, [r7, #14]
 8003236:	220e      	movs	r2, #14
 8003238:	f362 0304 	bfi	r3, r2, #0, #5
 800323c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800323e:	7b7b      	ldrb	r3, [r7, #13]
 8003240:	2203      	movs	r2, #3
 8003242:	f362 0303 	bfi	r3, r2, #0, #4
 8003246:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003248:	7b3b      	ldrb	r3, [r7, #12]
 800324a:	2203      	movs	r2, #3
 800324c:	f362 0303 	bfi	r3, r2, #0, #4
 8003250:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003252:	7a7b      	ldrb	r3, [r7, #9]
 8003254:	220f      	movs	r2, #15
 8003256:	f362 0306 	bfi	r3, r2, #0, #7
 800325a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003262:	b2da      	uxtb	r2, r3
 8003264:	7a3b      	ldrb	r3, [r7, #8]
 8003266:	f362 0305 	bfi	r3, r2, #0, #6
 800326a:	723b      	strb	r3, [r7, #8]
            break;
 800326c:	e121      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	2206      	movs	r2, #6
 8003276:	f362 0304 	bfi	r3, r2, #0, #5
 800327a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800327c:	7b7b      	ldrb	r3, [r7, #13]
 800327e:	2201      	movs	r2, #1
 8003280:	f362 0303 	bfi	r3, r2, #0, #4
 8003284:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003286:	7b3b      	ldrb	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f362 0303 	bfi	r3, r2, #0, #4
 800328e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003290:	7a7b      	ldrb	r3, [r7, #9]
 8003292:	2207      	movs	r2, #7
 8003294:	f362 0306 	bfi	r3, r2, #0, #7
 8003298:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	7a3b      	ldrb	r3, [r7, #8]
 80032a4:	f362 0305 	bfi	r3, r2, #0, #6
 80032a8:	723b      	strb	r3, [r7, #8]
            break;
 80032aa:	e102      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032b0:	7bbb      	ldrb	r3, [r7, #14]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f362 0304 	bfi	r3, r2, #0, #5
 80032b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032ba:	7b7b      	ldrb	r3, [r7, #13]
 80032bc:	f36f 0303 	bfc	r3, #0, #4
 80032c0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	f36f 0303 	bfc	r3, #0, #4
 80032c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80032ca:	7a7b      	ldrb	r3, [r7, #9]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f362 0306 	bfi	r3, r2, #0, #7
 80032d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	7a3b      	ldrb	r3, [r7, #8]
 80032de:	f362 0305 	bfi	r3, r2, #0, #6
 80032e2:	723b      	strb	r3, [r7, #8]
            break;
 80032e4:	e0e5      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80032ea:	7bbb      	ldrb	r3, [r7, #14]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f362 0304 	bfi	r3, r2, #0, #5
 80032f2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032f4:	7b7b      	ldrb	r3, [r7, #13]
 80032f6:	f36f 0303 	bfc	r3, #0, #4
 80032fa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032fc:	7b3b      	ldrb	r3, [r7, #12]
 80032fe:	f36f 0303 	bfc	r3, #0, #4
 8003302:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003304:	7a7b      	ldrb	r3, [r7, #9]
 8003306:	2202      	movs	r2, #2
 8003308:	f362 0306 	bfi	r3, r2, #0, #7
 800330c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003314:	b2da      	uxtb	r2, r3
 8003316:	7a3b      	ldrb	r3, [r7, #8]
 8003318:	f362 0305 	bfi	r3, r2, #0, #6
 800331c:	723b      	strb	r3, [r7, #8]
            break;
 800331e:	e0c8      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	e0e5      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	221e      	movs	r2, #30
 800332e:	f362 0304 	bfi	r3, r2, #0, #5
 8003332:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	2207      	movs	r2, #7
 8003338:	f362 0303 	bfi	r3, r2, #0, #4
 800333c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800333e:	7b3b      	ldrb	r3, [r7, #12]
 8003340:	2207      	movs	r2, #7
 8003342:	f362 0303 	bfi	r3, r2, #0, #4
 8003346:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003348:	7a7b      	ldrb	r3, [r7, #9]
 800334a:	221f      	movs	r2, #31
 800334c:	f362 0306 	bfi	r3, r2, #0, #7
 8003350:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003358:	b2da      	uxtb	r2, r3
 800335a:	7a3b      	ldrb	r3, [r7, #8]
 800335c:	f362 0305 	bfi	r3, r2, #0, #6
 8003360:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003362:	7abb      	ldrb	r3, [r7, #10]
 8003364:	f36f 0301 	bfc	r3, #0, #2
 8003368:	72bb      	strb	r3, [r7, #10]
            break;
 800336a:	e0a2      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	2211      	movs	r2, #17
 8003374:	f362 0304 	bfi	r3, r2, #0, #5
 8003378:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 800337a:	7b7b      	ldrb	r3, [r7, #13]
 800337c:	2204      	movs	r2, #4
 800337e:	f362 0303 	bfi	r3, r2, #0, #4
 8003382:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8003384:	7b3b      	ldrb	r3, [r7, #12]
 8003386:	2204      	movs	r2, #4
 8003388:	f362 0303 	bfi	r3, r2, #0, #4
 800338c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 800338e:	7a7b      	ldrb	r3, [r7, #9]
 8003390:	2212      	movs	r2, #18
 8003392:	f362 0306 	bfi	r3, r2, #0, #7
 8003396:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	7a3b      	ldrb	r3, [r7, #8]
 80033a2:	f362 0305 	bfi	r3, r2, #0, #6
 80033a6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80033a8:	7abb      	ldrb	r3, [r7, #10]
 80033aa:	f36f 0301 	bfc	r3, #0, #2
 80033ae:	72bb      	strb	r3, [r7, #10]
            break;
 80033b0:	e07f      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80033b6:	7bbb      	ldrb	r3, [r7, #14]
 80033b8:	220e      	movs	r2, #14
 80033ba:	f362 0304 	bfi	r3, r2, #0, #5
 80033be:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80033c0:	7b7b      	ldrb	r3, [r7, #13]
 80033c2:	2203      	movs	r2, #3
 80033c4:	f362 0303 	bfi	r3, r2, #0, #4
 80033c8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80033ca:	7b3b      	ldrb	r3, [r7, #12]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f362 0303 	bfi	r3, r2, #0, #4
 80033d2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80033d4:	7a7b      	ldrb	r3, [r7, #9]
 80033d6:	220f      	movs	r2, #15
 80033d8:	f362 0306 	bfi	r3, r2, #0, #7
 80033dc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	7a3b      	ldrb	r3, [r7, #8]
 80033e8:	f362 0305 	bfi	r3, r2, #0, #6
 80033ec:	723b      	strb	r3, [r7, #8]
            break;
 80033ee:	e060      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80033f4:	7bbb      	ldrb	r3, [r7, #14]
 80033f6:	2208      	movs	r2, #8
 80033f8:	f362 0304 	bfi	r3, r2, #0, #5
 80033fc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80033fe:	7b7b      	ldrb	r3, [r7, #13]
 8003400:	2202      	movs	r2, #2
 8003402:	f362 0303 	bfi	r3, r2, #0, #4
 8003406:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003408:	7b3b      	ldrb	r3, [r7, #12]
 800340a:	2202      	movs	r2, #2
 800340c:	f362 0303 	bfi	r3, r2, #0, #4
 8003410:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003412:	7a7b      	ldrb	r3, [r7, #9]
 8003414:	2209      	movs	r2, #9
 8003416:	f362 0306 	bfi	r3, r2, #0, #7
 800341a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003422:	b2da      	uxtb	r2, r3
 8003424:	7a3b      	ldrb	r3, [r7, #8]
 8003426:	f362 0305 	bfi	r3, r2, #0, #6
 800342a:	723b      	strb	r3, [r7, #8]
            break;
 800342c:	e041      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	2206      	movs	r2, #6
 8003436:	f362 0304 	bfi	r3, r2, #0, #5
 800343a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	2201      	movs	r2, #1
 8003440:	f362 0303 	bfi	r3, r2, #0, #4
 8003444:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003446:	7b3b      	ldrb	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f362 0303 	bfi	r3, r2, #0, #4
 800344e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003450:	7a7b      	ldrb	r3, [r7, #9]
 8003452:	2207      	movs	r2, #7
 8003454:	f362 0306 	bfi	r3, r2, #0, #7
 8003458:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003460:	b2da      	uxtb	r2, r3
 8003462:	7a3b      	ldrb	r3, [r7, #8]
 8003464:	f362 0305 	bfi	r3, r2, #0, #6
 8003468:	723b      	strb	r3, [r7, #8]
            break;
 800346a:	e022      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	e03f      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	2202      	movs	r2, #2
 800347a:	f362 0304 	bfi	r3, r2, #0, #5
 800347e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003480:	7b7b      	ldrb	r3, [r7, #13]
 8003482:	f36f 0303 	bfc	r3, #0, #4
 8003486:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003488:	7b3b      	ldrb	r3, [r7, #12]
 800348a:	f36f 0303 	bfc	r3, #0, #4
 800348e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003490:	7a7b      	ldrb	r3, [r7, #9]
 8003492:	2203      	movs	r2, #3
 8003494:	f362 0306 	bfi	r3, r2, #0, #7
 8003498:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	7a3b      	ldrb	r3, [r7, #8]
 80034a4:	f362 0305 	bfi	r3, r2, #0, #6
 80034a8:	723b      	strb	r3, [r7, #8]
            break;
 80034aa:	e002      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
 80034b0:	e01f      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	2108      	movs	r1, #8
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd ffd3 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 80034ca:	f06f 0301 	mvn.w	r3, #1
 80034ce:	e010      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	210c      	movs	r1, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd ffc4 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 80034e8:	f06f 0302 	mvn.w	r3, #2
 80034ec:	e001      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 80034ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000e0303 	.word	0x000e0303

08003500 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	460a      	mov	r2, r1
 800350a:	71fb      	strb	r3, [r7, #7]
 800350c:	4613      	mov	r3, r2
 800350e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003514:	4b3f      	ldr	r3, [pc, #252]	@ (8003614 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003516:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003518:	79bb      	ldrb	r3, [r7, #6]
 800351a:	2b11      	cmp	r3, #17
 800351c:	d862      	bhi.n	80035e4 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	0800356d 	.word	0x0800356d
 8003528:	0800356d 	.word	0x0800356d
 800352c:	080035e5 	.word	0x080035e5
 8003530:	0800356d 	.word	0x0800356d
 8003534:	0800356d 	.word	0x0800356d
 8003538:	0800356d 	.word	0x0800356d
 800353c:	0800356d 	.word	0x0800356d
 8003540:	0800356d 	.word	0x0800356d
 8003544:	0800358b 	.word	0x0800358b
 8003548:	0800358b 	.word	0x0800358b
 800354c:	0800358b 	.word	0x0800358b
 8003550:	0800358b 	.word	0x0800358b
 8003554:	0800358b 	.word	0x0800358b
 8003558:	0800358b 	.word	0x0800358b
 800355c:	0800358b 	.word	0x0800358b
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	080035c7 	.word	0x080035c7
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003570:	230e      	movs	r3, #14
 8003572:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003574:	7a7b      	ldrb	r3, [r7, #9]
 8003576:	2203      	movs	r2, #3
 8003578:	f362 0306 	bfi	r3, r2, #0, #7
 800357c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800357e:	7a3b      	ldrb	r3, [r7, #8]
 8003580:	2203      	movs	r2, #3
 8003582:	f362 0306 	bfi	r3, r2, #0, #7
 8003586:	723b      	strb	r3, [r7, #8]
            break;
 8003588:	e02f      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800358e:	231e      	movs	r3, #30
 8003590:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003592:	7a7b      	ldrb	r3, [r7, #9]
 8003594:	2207      	movs	r2, #7
 8003596:	f362 0306 	bfi	r3, r2, #0, #7
 800359a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800359c:	7a3b      	ldrb	r3, [r7, #8]
 800359e:	2207      	movs	r2, #7
 80035a0:	f362 0306 	bfi	r3, r2, #0, #7
 80035a4:	723b      	strb	r3, [r7, #8]
            break;
 80035a6:	e020      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80035ac:	2307      	movs	r3, #7
 80035ae:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f362 0306 	bfi	r3, r2, #0, #7
 80035b8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80035ba:	7a3b      	ldrb	r3, [r7, #8]
 80035bc:	2202      	movs	r2, #2
 80035be:	f362 0306 	bfi	r3, r2, #0, #7
 80035c2:	723b      	strb	r3, [r7, #8]
            break;
 80035c4:	e011      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80035ca:	233e      	movs	r3, #62	@ 0x3e
 80035cc:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	220f      	movs	r2, #15
 80035d2:	f362 0306 	bfi	r3, r2, #0, #7
 80035d6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	220f      	movs	r2, #15
 80035dc:	f362 0306 	bfi	r3, r2, #0, #7
 80035e0:	723b      	strb	r3, [r7, #8]
            break;
 80035e2:	e002      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	e010      	b.n	800360c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2104      	movs	r1, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd ff37 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80035f6:	4603      	mov	r3, r0
 80035f8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003602:	f06f 0301 	mvn.w	r3, #1
 8003606:	e001      	b.n	800360c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	003e0f0f 	.word	0x003e0f0f

08003618 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
 8003622:	460b      	mov	r3, r1
 8003624:	71bb      	strb	r3, [r7, #6]
 8003626:	4613      	mov	r3, r2
 8003628:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800362e:	4b92      	ldr	r3, [pc, #584]	@ (8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003630:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003636:	7abb      	ldrb	r3, [r7, #10]
 8003638:	2202      	movs	r2, #2
 800363a:	f362 0301 	bfi	r3, r2, #0, #2
 800363e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003644:	79bb      	ldrb	r3, [r7, #6]
 8003646:	2b11      	cmp	r3, #17
 8003648:	f200 80ef 	bhi.w	800382a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 800364c:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	0800369d 	.word	0x0800369d
 8003658:	080036db 	.word	0x080036db
 800365c:	0800382b 	.word	0x0800382b
 8003660:	08003715 	.word	0x08003715
 8003664:	08003715 	.word	0x08003715
 8003668:	08003715 	.word	0x08003715
 800366c:	08003715 	.word	0x08003715
 8003670:	08003715 	.word	0x08003715
 8003674:	0800371b 	.word	0x0800371b
 8003678:	08003761 	.word	0x08003761
 800367c:	080037a7 	.word	0x080037a7
 8003680:	080037e5 	.word	0x080037e5
 8003684:	080037eb 	.word	0x080037eb
 8003688:	08003825 	.word	0x08003825
 800368c:	08003825 	.word	0x08003825
 8003690:	08003715 	.word	0x08003715
 8003694:	08003715 	.word	0x08003715
 8003698:	0800371b 	.word	0x0800371b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	2206      	movs	r2, #6
 80036a4:	f362 0304 	bfi	r3, r2, #0, #5
 80036a8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036aa:	7b7b      	ldrb	r3, [r7, #13]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f362 0303 	bfi	r3, r2, #0, #4
 80036b2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036b4:	7b3b      	ldrb	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f362 0303 	bfi	r3, r2, #0, #4
 80036bc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80036be:	7a7b      	ldrb	r3, [r7, #9]
 80036c0:	2207      	movs	r2, #7
 80036c2:	f362 0306 	bfi	r3, r2, #0, #7
 80036c6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	7a3b      	ldrb	r3, [r7, #8]
 80036d2:	f362 0305 	bfi	r3, r2, #0, #6
 80036d6:	723b      	strb	r3, [r7, #8]
            break;
 80036d8:	e0aa      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80036de:	7bbb      	ldrb	r3, [r7, #14]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f362 0304 	bfi	r3, r2, #0, #5
 80036e6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80036e8:	7b7b      	ldrb	r3, [r7, #13]
 80036ea:	f36f 0303 	bfc	r3, #0, #4
 80036ee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80036f0:	7b3b      	ldrb	r3, [r7, #12]
 80036f2:	f36f 0303 	bfc	r3, #0, #4
 80036f6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80036f8:	7a7b      	ldrb	r3, [r7, #9]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f362 0306 	bfi	r3, r2, #0, #7
 8003700:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003708:	b2da      	uxtb	r2, r3
 800370a:	7a3b      	ldrb	r3, [r7, #8]
 800370c:	f362 0305 	bfi	r3, r2, #0, #6
 8003710:	723b      	strb	r3, [r7, #8]
            break;
 8003712:	e08d      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	e0aa      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	220e      	movs	r2, #14
 8003722:	f362 0304 	bfi	r3, r2, #0, #5
 8003726:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003728:	7b7b      	ldrb	r3, [r7, #13]
 800372a:	2203      	movs	r2, #3
 800372c:	f362 0303 	bfi	r3, r2, #0, #4
 8003730:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003732:	7b3b      	ldrb	r3, [r7, #12]
 8003734:	2203      	movs	r2, #3
 8003736:	f362 0303 	bfi	r3, r2, #0, #4
 800373a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800373c:	7a7b      	ldrb	r3, [r7, #9]
 800373e:	220f      	movs	r2, #15
 8003740:	f362 0306 	bfi	r3, r2, #0, #7
 8003744:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800374c:	b2da      	uxtb	r2, r3
 800374e:	7a3b      	ldrb	r3, [r7, #8]
 8003750:	f362 0305 	bfi	r3, r2, #0, #6
 8003754:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003756:	7abb      	ldrb	r3, [r7, #10]
 8003758:	f36f 0301 	bfc	r3, #0, #2
 800375c:	72bb      	strb	r3, [r7, #10]
            break;
 800375e:	e067      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	2207      	movs	r2, #7
 8003768:	f362 0304 	bfi	r3, r2, #0, #5
 800376c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800376e:	7b7b      	ldrb	r3, [r7, #13]
 8003770:	2202      	movs	r2, #2
 8003772:	f362 0303 	bfi	r3, r2, #0, #4
 8003776:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003778:	7b3b      	ldrb	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	f362 0303 	bfi	r3, r2, #0, #4
 8003780:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 8003782:	7a7b      	ldrb	r3, [r7, #9]
 8003784:	2208      	movs	r2, #8
 8003786:	f362 0306 	bfi	r3, r2, #0, #7
 800378a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003792:	b2da      	uxtb	r2, r3
 8003794:	7a3b      	ldrb	r3, [r7, #8]
 8003796:	f362 0305 	bfi	r3, r2, #0, #6
 800379a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800379c:	7abb      	ldrb	r3, [r7, #10]
 800379e:	f36f 0301 	bfc	r3, #0, #2
 80037a2:	72bb      	strb	r3, [r7, #10]
            break;
 80037a4:	e044      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80037aa:	7bbb      	ldrb	r3, [r7, #14]
 80037ac:	2206      	movs	r2, #6
 80037ae:	f362 0304 	bfi	r3, r2, #0, #5
 80037b2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80037b4:	7b7b      	ldrb	r3, [r7, #13]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f362 0303 	bfi	r3, r2, #0, #4
 80037bc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037be:	7b3b      	ldrb	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f362 0303 	bfi	r3, r2, #0, #4
 80037c6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80037c8:	7a7b      	ldrb	r3, [r7, #9]
 80037ca:	2207      	movs	r2, #7
 80037cc:	f362 0306 	bfi	r3, r2, #0, #7
 80037d0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	7a3b      	ldrb	r3, [r7, #8]
 80037dc:	f362 0305 	bfi	r3, r2, #0, #6
 80037e0:	723b      	strb	r3, [r7, #8]
            break;
 80037e2:	e025      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	e042      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80037ee:	7bbb      	ldrb	r3, [r7, #14]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f362 0304 	bfi	r3, r2, #0, #5
 80037f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80037f8:	7b7b      	ldrb	r3, [r7, #13]
 80037fa:	f36f 0303 	bfc	r3, #0, #4
 80037fe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	f36f 0303 	bfc	r3, #0, #4
 8003806:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003808:	7a7b      	ldrb	r3, [r7, #9]
 800380a:	2203      	movs	r2, #3
 800380c:	f362 0306 	bfi	r3, r2, #0, #7
 8003810:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003818:	b2da      	uxtb	r2, r3
 800381a:	7a3b      	ldrb	r3, [r7, #8]
 800381c:	f362 0305 	bfi	r3, r2, #0, #6
 8003820:	723b      	strb	r3, [r7, #8]
            break;
 8003822:	e005      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	e022      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e01f      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2108      	movs	r1, #8
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fe14 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003848:	f06f 0301 	mvn.w	r3, #1
 800384c:	e010      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	210c      	movs	r1, #12
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fe05 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800385e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8003866:	f06f 0302 	mvn.w	r3, #2
 800386a:	e001      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 800386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	000e0303 	.word	0x000e0303

0800387c <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
 8003886:	460b      	mov	r3, r1
 8003888:	71bb      	strb	r3, [r7, #6]
 800388a:	4613      	mov	r3, r2
 800388c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8003896:	f640 6307 	movw	r3, #3591	@ 0xe07
 800389a:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	1cda      	adds	r2, r3, #3
 80038a6:	89b9      	ldrh	r1, [r7, #12]
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fc18 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295
 80038c0:	e020      	b.n	8003904 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80038c2:	79bb      	ldrb	r3, [r7, #6]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	f362 0300 	bfi	r3, r2, #0, #1
 80038d0:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 80038d2:	797b      	ldrb	r3, [r7, #5]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f362 0341 	bfi	r3, r2, #1, #1
 80038e0:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 80038e2:	7afa      	ldrb	r2, [r7, #11]
 80038e4:	89b9      	ldrh	r1, [r7, #12]
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fc87 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80038ee:	4603      	mov	r3, r0
 80038f0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 80038fa:	f06f 0301 	mvn.w	r3, #1
 80038fe:	e001      	b.n	8003904 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d802      	bhi.n	8003926 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e02a      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	3b09      	subs	r3, #9
 800392a:	2b06      	cmp	r3, #6
 800392c:	d825      	bhi.n	800397a <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800392e:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003951 	.word	0x08003951
 8003938:	08003957 	.word	0x08003957
 800393c:	0800395d 	.word	0x0800395d
 8003940:	08003963 	.word	0x08003963
 8003944:	08003969 	.word	0x08003969
 8003948:	0800396f 	.word	0x0800396f
 800394c:	08003975 	.word	0x08003975
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8003950:	230c      	movs	r3, #12
 8003952:	60fb      	str	r3, [r7, #12]
                break;
 8003954:	e012      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003956:	2310      	movs	r3, #16
 8003958:	60fb      	str	r3, [r7, #12]
                break;
 800395a:	e00f      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 800395c:	2314      	movs	r3, #20
 800395e:	60fb      	str	r3, [r7, #12]
                break;
 8003960:	e00c      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 8003962:	2318      	movs	r3, #24
 8003964:	60fb      	str	r3, [r7, #12]
                break;
 8003966:	e009      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8003968:	2320      	movs	r3, #32
 800396a:	60fb      	str	r3, [r7, #12]
                break;
 800396c:	e006      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 800396e:	2330      	movs	r3, #48	@ 0x30
 8003970:	60fb      	str	r3, [r7, #12]
                break;
 8003972:	e003      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8003974:	2340      	movs	r3, #64	@ 0x40
 8003976:	60fb      	str	r3, [r7, #12]
                break;
 8003978:	e000      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 800397a:	bf00      	nop
        }
    }

    return dataBytesInObject;
 800397c:	68fb      	ldr	r3, [r7, #12]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop

0800398c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003998:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800399a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 0218 	bic.w	r2, r3, #24
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	615a      	str	r2, [r3, #20]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	801a      	strh	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	@ 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8003a82:	2305      	movs	r3, #5
 8003a84:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8003a86:	2300      	movs	r3, #0
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8003a92:	2300      	movs	r3, #0
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8003abe:	f001 fd67 	bl	8005590 <FI_CheckBankConfig>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003ac8:	230e      	movs	r3, #14
 8003aca:	f000 bcb4 	b.w	8004436 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8003ace:	f001 fcbd 	bl	800544c <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003ad2:	4b93      	ldr	r3, [pc, #588]	@ (8003d20 <EE_Init+0x2a8>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003ad8:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <EE_Init+0x2ac>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	029a      	lsls	r2, r3, #10
 8003ade:	4b92      	ldr	r3, [pc, #584]	@ (8003d28 <EE_Init+0x2b0>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ae6:	fbb2 f1f3 	udiv	r1, r2, r3
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	0b1b      	lsrs	r3, r3, #12
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af4:	e02e      	b.n	8003b54 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003afc:	031a      	lsls	r2, r3, #12
 8003afe:	4b89      	ldr	r3, [pc, #548]	@ (8003d24 <EE_Init+0x2ac>)
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	0299      	lsls	r1, r3, #10
 8003b04:	4b88      	ldr	r3, [pc, #544]	@ (8003d28 <EE_Init+0x2b0>)
 8003b06:	400b      	ands	r3, r1
 8003b08:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003b0c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b10:	4b84      	ldr	r3, [pc, #528]	@ (8003d24 <EE_Init+0x2ac>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	0298      	lsls	r0, r3, #10
 8003b16:	4b84      	ldr	r3, [pc, #528]	@ (8003d28 <EE_Init+0x2b0>)
 8003b18:	4003      	ands	r3, r0
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b22:	2300      	movs	r3, #0
 8003b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b26:	e00e      	b.n	8003b46 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003b28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d2c <EE_Init+0x2b4>)
 8003b30:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	4413      	add	r3, r2
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	3308      	adds	r3, #8
 8003b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4c:	d3ec      	bcc.n	8003b28 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b50:	3301      	adds	r3, #1
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b54:	4b73      	ldr	r3, [pc, #460]	@ (8003d24 <EE_Init+0x2ac>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	029a      	lsls	r2, r3, #10
 8003b5a:	4b73      	ldr	r3, [pc, #460]	@ (8003d28 <EE_Init+0x2b0>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b62:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	0b1b      	lsrs	r3, r3, #12
 8003b6e:	3304      	adds	r3, #4
 8003b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3bf      	bcc.n	8003af6 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8003b76:	4b6a      	ldr	r3, [pc, #424]	@ (8003d20 <EE_Init+0x2a8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b7c:	4b69      	ldr	r3, [pc, #420]	@ (8003d24 <EE_Init+0x2ac>)
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	029a      	lsls	r2, r3, #10
 8003b82:	4b69      	ldr	r3, [pc, #420]	@ (8003d28 <EE_Init+0x2b0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b8a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	0b1b      	lsrs	r3, r3, #12
 8003b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b98:	e034      	b.n	8003c04 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003ba0:	031a      	lsls	r2, r3, #12
 8003ba2:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <EE_Init+0x2ac>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	0299      	lsls	r1, r3, #10
 8003ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8003d28 <EE_Init+0x2b0>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003bb0:	fbb1 f1f3 	udiv	r1, r1, r3
 8003bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <EE_Init+0x2ac>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	0298      	lsls	r0, r3, #10
 8003bba:	4b5b      	ldr	r3, [pc, #364]	@ (8003d28 <EE_Init+0x2b0>)
 8003bbc:	4003      	ands	r3, r0
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003bc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bc8:	f001 fbde 	bl	8005388 <GetPageState>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003bd0:	7ebb      	ldrb	r3, [r7, #26]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d002      	beq.n	8003bdc <EE_Init+0x164>
 8003bd6:	7ebb      	ldrb	r3, [r7, #26]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d103      	bne.n	8003be4 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	3301      	adds	r3, #1
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be2:	e00c      	b.n	8003bfe <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003be4:	7ebb      	ldrb	r3, [r7, #26]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d109      	bne.n	8003bfe <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8003bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf2:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c00:	3301      	adds	r3, #1
 8003c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c04:	4b47      	ldr	r3, [pc, #284]	@ (8003d24 <EE_Init+0x2ac>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	029a      	lsls	r2, r3, #10
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <EE_Init+0x2b0>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c12:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	0b1b      	lsrs	r3, r3, #12
 8003c1e:	3304      	adds	r3, #4
 8003c20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3b9      	bcc.n	8003b9a <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d16a      	bne.n	8003d02 <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d062      	beq.n	8003cf8 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <EE_Init+0x2ac>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	029a      	lsls	r2, r3, #10
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <EE_Init+0x2b0>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	0b1b      	lsrs	r3, r3, #12
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	3303      	adds	r3, #3
 8003c52:	f003 0103 	and.w	r1, r3, #3
 8003c56:	4b33      	ldr	r3, [pc, #204]	@ (8003d24 <EE_Init+0x2ac>)
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	029a      	lsls	r2, r3, #10
 8003c5c:	4b32      	ldr	r3, [pc, #200]	@ (8003d28 <EE_Init+0x2b0>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c64:	fbb2 f0f3 	udiv	r0, r2, r3
 8003c68:	fb00 f303 	mul.w	r3, r0, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	0b1b      	lsrs	r3, r3, #12
 8003c70:	440b      	add	r3, r1
 8003c72:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003c76:	031a      	lsls	r2, r3, #12
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <EE_Init+0x2ac>)
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	0299      	lsls	r1, r3, #10
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d28 <EE_Init+0x2b0>)
 8003c80:	400b      	ands	r3, r1
 8003c82:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003c86:	fbb1 f1f3 	udiv	r1, r1, r3
 8003c8a:	4b26      	ldr	r3, [pc, #152]	@ (8003d24 <EE_Init+0x2ac>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	0298      	lsls	r0, r3, #10
 8003c90:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <EE_Init+0x2b0>)
 8003c92:	4003      	ands	r3, r0
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fb74 	bl	8005388 <GetPageState>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d12d      	bne.n	8003d02 <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <EE_Init+0x2ac>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	029a      	lsls	r2, r3, #10
 8003cac:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <EE_Init+0x2b0>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	0b1b      	lsrs	r3, r3, #12
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f003 0103 	and.w	r1, r3, #3
 8003cca:	4b16      	ldr	r3, [pc, #88]	@ (8003d24 <EE_Init+0x2ac>)
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	029a      	lsls	r2, r3, #10
 8003cd0:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <EE_Init+0x2b0>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cd8:	fbb2 f0f3 	udiv	r0, r2, r3
 8003cdc:	fb00 f303 	mul.w	r3, r0, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	0b1b      	lsrs	r3, r3, #12
 8003ce4:	440b      	add	r3, r1
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fa8b 	bl	8005204 <SetPageState>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e39e      	b.n	8004436 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f000 fba7 	bl	800444c <EE_Format>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	e399      	b.n	8004436 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <EE_Init+0x2ac>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	029a      	lsls	r2, r3, #10
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <EE_Init+0x2b0>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d10:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	0b1b      	lsrs	r3, r3, #12
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d1e:	e0de      	b.n	8003ede <EE_Init+0x466>
 8003d20:	200003ac 	.word	0x200003ac
 8003d24:	1fff75e0 	.word	0x1fff75e0
 8003d28:	001ffc00 	.word	0x001ffc00
 8003d2c:	200003a8 	.word	0x200003a8
  {
    pageaddress = PAGE_ADDRESS(page);
 8003d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d32:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003d36:	031a      	lsls	r2, r3, #12
 8003d38:	4bba      	ldr	r3, [pc, #744]	@ (8004024 <EE_Init+0x5ac>)
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	0299      	lsls	r1, r3, #10
 8003d3e:	4bba      	ldr	r3, [pc, #744]	@ (8004028 <EE_Init+0x5b0>)
 8003d40:	400b      	ands	r3, r1
 8003d42:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003d46:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d4a:	4bb6      	ldr	r3, [pc, #728]	@ (8004024 <EE_Init+0x5ac>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	0298      	lsls	r0, r3, #10
 8003d50:	4bb5      	ldr	r3, [pc, #724]	@ (8004028 <EE_Init+0x5b0>)
 8003d52:	4003      	ands	r3, r0
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003d5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d5e:	f001 fb13 	bl	8005388 <GetPageState>
 8003d62:	4603      	mov	r3, r0
 8003d64:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003d66:	7ebb      	ldrb	r3, [r7, #26]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80b5 	bne.w	8003ed8 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003d6e:	4bad      	ldr	r3, [pc, #692]	@ (8004024 <EE_Init+0x5ac>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	029a      	lsls	r2, r3, #10
 8003d74:	4bac      	ldr	r3, [pc, #688]	@ (8004028 <EE_Init+0x5b0>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	0b1b      	lsrs	r3, r3, #12
 8003d88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d050      	beq.n	8003e30 <EE_Init+0x3b8>
 8003d8e:	4ba5      	ldr	r3, [pc, #660]	@ (8004024 <EE_Init+0x5ac>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	029a      	lsls	r2, r3, #10
 8003d94:	4ba4      	ldr	r3, [pc, #656]	@ (8004028 <EE_Init+0x5b0>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	0b1b      	lsrs	r3, r3, #12
 8003da8:	3302      	adds	r3, #2
 8003daa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d03f      	beq.n	8003e30 <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003db0:	4b9c      	ldr	r3, [pc, #624]	@ (8004024 <EE_Init+0x5ac>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	029a      	lsls	r2, r3, #10
 8003db6:	4b9c      	ldr	r3, [pc, #624]	@ (8004028 <EE_Init+0x5b0>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dbe:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	0b1b      	lsrs	r3, r3, #12
 8003dca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	3303      	adds	r3, #3
 8003dd0:	f003 0103 	and.w	r1, r3, #3
 8003dd4:	4b93      	ldr	r3, [pc, #588]	@ (8004024 <EE_Init+0x5ac>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	029a      	lsls	r2, r3, #10
 8003dda:	4b93      	ldr	r3, [pc, #588]	@ (8004028 <EE_Init+0x5b0>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003de2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003de6:	fb00 f303 	mul.w	r3, r0, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	0b1b      	lsrs	r3, r3, #12
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003df4:	031a      	lsls	r2, r3, #12
 8003df6:	4b8b      	ldr	r3, [pc, #556]	@ (8004024 <EE_Init+0x5ac>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	0299      	lsls	r1, r3, #10
 8003dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8004028 <EE_Init+0x5b0>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e04:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e08:	4b86      	ldr	r3, [pc, #536]	@ (8004024 <EE_Init+0x5ac>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	0298      	lsls	r0, r3, #10
 8003e0e:	4b86      	ldr	r3, [pc, #536]	@ (8004028 <EE_Init+0x5b0>)
 8003e10:	4003      	ands	r3, r0
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fab5 	bl	8005388 <GetPageState>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d102      	bne.n	8003e2a <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e28:	e041      	b.n	8003eae <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e2e:	e03e      	b.n	8003eae <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003e30:	4b7c      	ldr	r3, [pc, #496]	@ (8004024 <EE_Init+0x5ac>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	029a      	lsls	r2, r3, #10
 8003e36:	4b7c      	ldr	r3, [pc, #496]	@ (8004028 <EE_Init+0x5b0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	0b1b      	lsrs	r3, r3, #12
 8003e4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f003 0103 	and.w	r1, r3, #3
 8003e54:	4b73      	ldr	r3, [pc, #460]	@ (8004024 <EE_Init+0x5ac>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	029a      	lsls	r2, r3, #10
 8003e5a:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <EE_Init+0x5b0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e62:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e66:	fb00 f303 	mul.w	r3, r0, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	0b1b      	lsrs	r3, r3, #12
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003e74:	031a      	lsls	r2, r3, #12
 8003e76:	4b6b      	ldr	r3, [pc, #428]	@ (8004024 <EE_Init+0x5ac>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	0299      	lsls	r1, r3, #10
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004028 <EE_Init+0x5b0>)
 8003e7e:	400b      	ands	r3, r1
 8003e80:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e84:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e88:	4b66      	ldr	r3, [pc, #408]	@ (8004024 <EE_Init+0x5ac>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	0298      	lsls	r0, r3, #10
 8003e8e:	4b66      	ldr	r3, [pc, #408]	@ (8004028 <EE_Init+0x5b0>)
 8003e90:	4003      	ands	r3, r0
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fa75 	bl	8005388 <GetPageState>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	76fb      	strb	r3, [r7, #27]
 8003ea8:	e001      	b.n	8003eae <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003eae:	7efb      	ldrb	r3, [r7, #27]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d111      	bne.n	8003ed8 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	@ (800402c <EE_Init+0x5b4>)
 8003eba:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f000 fef3 	bl	8004cac <PagesTransfer>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ecc:	d001      	beq.n	8003ed2 <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	e2b1      	b.n	8004436 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003ed6:	e014      	b.n	8003f02 <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	3301      	adds	r3, #1
 8003edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ede:	4b51      	ldr	r3, [pc, #324]	@ (8004024 <EE_Init+0x5ac>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	029a      	lsls	r2, r3, #10
 8003ee4:	4b50      	ldr	r3, [pc, #320]	@ (8004028 <EE_Init+0x5b0>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003eec:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	0b1b      	lsrs	r3, r3, #12
 8003ef8:	3304      	adds	r3, #4
 8003efa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f4ff af17 	bcc.w	8003d30 <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f06:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <EE_Init+0x5ac>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	029a      	lsls	r2, r3, #10
 8003f0c:	4b46      	ldr	r3, [pc, #280]	@ (8004028 <EE_Init+0x5b0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	0b1b      	lsrs	r3, r3, #12
 8003f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f22:	e0dc      	b.n	80040de <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f26:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003f2a:	031a      	lsls	r2, r3, #12
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004024 <EE_Init+0x5ac>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	0299      	lsls	r1, r3, #10
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <EE_Init+0x5b0>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003f3a:	fbb1 f1f3 	udiv	r1, r1, r3
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <EE_Init+0x5ac>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	0298      	lsls	r0, r3, #10
 8003f44:	4b38      	ldr	r3, [pc, #224]	@ (8004028 <EE_Init+0x5b0>)
 8003f46:	4003      	ands	r3, r0
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003f50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f52:	f001 fa19 	bl	8005388 <GetPageState>
 8003f56:	4603      	mov	r3, r0
 8003f58:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003f5a:	7ebb      	ldrb	r3, [r7, #26]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f040 80b6 	bne.w	80040ce <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f62:	4b30      	ldr	r3, [pc, #192]	@ (8004024 <EE_Init+0x5ac>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	029a      	lsls	r2, r3, #10
 8003f68:	4b2f      	ldr	r3, [pc, #188]	@ (8004028 <EE_Init+0x5b0>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f70:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	0b1b      	lsrs	r3, r3, #12
 8003f7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d056      	beq.n	8004030 <EE_Init+0x5b8>
 8003f82:	4b28      	ldr	r3, [pc, #160]	@ (8004024 <EE_Init+0x5ac>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	029a      	lsls	r2, r3, #10
 8003f88:	4b27      	ldr	r3, [pc, #156]	@ (8004028 <EE_Init+0x5b0>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f90:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	0b1b      	lsrs	r3, r3, #12
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d045      	beq.n	8004030 <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <EE_Init+0x5ac>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	029a      	lsls	r2, r3, #10
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <EE_Init+0x5b0>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fb2:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	0b1b      	lsrs	r3, r3, #12
 8003fbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	3303      	adds	r3, #3
 8003fc4:	f003 0103 	and.w	r1, r3, #3
 8003fc8:	4b16      	ldr	r3, [pc, #88]	@ (8004024 <EE_Init+0x5ac>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	029a      	lsls	r2, r3, #10
 8003fce:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <EE_Init+0x5b0>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fd6:	fbb2 f0f3 	udiv	r0, r2, r3
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	0b1b      	lsrs	r3, r3, #12
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003fe8:	031a      	lsls	r2, r3, #12
 8003fea:	4b0e      	ldr	r3, [pc, #56]	@ (8004024 <EE_Init+0x5ac>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	0299      	lsls	r1, r3, #10
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <EE_Init+0x5b0>)
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003ff8:	fbb1 f1f3 	udiv	r1, r1, r3
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <EE_Init+0x5ac>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	0298      	lsls	r0, r3, #10
 8004002:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <EE_Init+0x5b0>)
 8004004:	4003      	ands	r3, r0
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f001 f9bb 	bl	8005388 <GetPageState>
 8004012:	4603      	mov	r3, r0
 8004014:	2b03      	cmp	r3, #3
 8004016:	d102      	bne.n	800401e <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800401c:	e047      	b.n	80040ae <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800401e:	2301      	movs	r3, #1
 8004020:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8004022:	e044      	b.n	80040ae <EE_Init+0x636>
 8004024:	1fff75e0 	.word	0x1fff75e0
 8004028:	001ffc00 	.word	0x001ffc00
 800402c:	200003a6 	.word	0x200003a6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8004030:	4b98      	ldr	r3, [pc, #608]	@ (8004294 <EE_Init+0x81c>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	029a      	lsls	r2, r3, #10
 8004036:	4b98      	ldr	r3, [pc, #608]	@ (8004298 <EE_Init+0x820>)
 8004038:	4013      	ands	r3, r2
 800403a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800403e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	0b1b      	lsrs	r3, r3, #12
 800404a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	3301      	adds	r3, #1
 8004050:	f003 0103 	and.w	r1, r3, #3
 8004054:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <EE_Init+0x81c>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	029a      	lsls	r2, r3, #10
 800405a:	4b8f      	ldr	r3, [pc, #572]	@ (8004298 <EE_Init+0x820>)
 800405c:	4013      	ands	r3, r2
 800405e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004062:	fbb2 f0f3 	udiv	r0, r2, r3
 8004066:	fb00 f303 	mul.w	r3, r0, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	0b1b      	lsrs	r3, r3, #12
 800406e:	440b      	add	r3, r1
 8004070:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004074:	031a      	lsls	r2, r3, #12
 8004076:	4b87      	ldr	r3, [pc, #540]	@ (8004294 <EE_Init+0x81c>)
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	0299      	lsls	r1, r3, #10
 800407c:	4b86      	ldr	r3, [pc, #536]	@ (8004298 <EE_Init+0x820>)
 800407e:	400b      	ands	r3, r1
 8004080:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004084:	fbb1 f1f3 	udiv	r1, r1, r3
 8004088:	4b82      	ldr	r3, [pc, #520]	@ (8004294 <EE_Init+0x81c>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	0298      	lsls	r0, r3, #10
 800408e:	4b82      	ldr	r3, [pc, #520]	@ (8004298 <EE_Init+0x820>)
 8004090:	4003      	ands	r3, r0
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f001 f975 	bl	8005388 <GetPageState>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e001      	b.n	80040ae <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80040aa:	2301      	movs	r3, #1
 80040ac:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 80040ae:	7efb      	ldrb	r3, [r7, #27]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 80040ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b77      	ldr	r3, [pc, #476]	@ (800429c <EE_Init+0x824>)
 80040c0:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	3301      	adds	r3, #1
 80040c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c8:	e006      	b.n	80040d8 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 80040ca:	230a      	movs	r3, #10
 80040cc:	e1b3      	b.n	8004436 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 80040ce:	7ebb      	ldrb	r3, [r7, #26]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d101      	bne.n	80040d8 <EE_Init+0x660>
    {
      lastvalidpage = page;
 80040d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80040d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040da:	3301      	adds	r3, #1
 80040dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040de:	4b6d      	ldr	r3, [pc, #436]	@ (8004294 <EE_Init+0x81c>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	029a      	lsls	r2, r3, #10
 80040e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004298 <EE_Init+0x820>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80040ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	0b1b      	lsrs	r3, r3, #12
 80040f8:	3304      	adds	r3, #4
 80040fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f4ff af11 	bcc.w	8003f24 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d133      	bne.n	8004170 <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	b2d9      	uxtb	r1, r3
 800410c:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <EE_Init+0x81c>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	029a      	lsls	r2, r3, #10
 8004112:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <EE_Init+0x820>)
 8004114:	4013      	ands	r3, r2
 8004116:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800411a:	fbb2 f0f3 	udiv	r0, r2, r3
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	0b1b      	lsrs	r3, r3, #12
 8004126:	b2db      	uxtb	r3, r3
 8004128:	1acb      	subs	r3, r1, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3301      	adds	r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	4b57      	ldr	r3, [pc, #348]	@ (8004294 <EE_Init+0x81c>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	029a      	lsls	r2, r3, #10
 800413c:	4b56      	ldr	r3, [pc, #344]	@ (8004298 <EE_Init+0x820>)
 800413e:	4013      	ands	r3, r2
 8004140:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004144:	fbb2 f0f3 	udiv	r0, r2, r3
 8004148:	fb00 f303 	mul.w	r3, r0, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	0b1b      	lsrs	r3, r3, #12
 8004150:	b2db      	uxtb	r3, r3
 8004152:	440b      	add	r3, r1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b51      	ldr	r3, [pc, #324]	@ (800429c <EE_Init+0x824>)
 8004158:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800415a:	4b50      	ldr	r3, [pc, #320]	@ (800429c <EE_Init+0x824>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f84f 	bl	8005204 <SetPageState>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 800416c:	2302      	movs	r3, #2
 800416e:	e162      	b.n	8004436 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8004170:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <EE_Init+0x828>)
 8004172:	2200      	movs	r2, #0
 8004174:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004176:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <EE_Init+0x82c>)
 8004178:	2220      	movs	r2, #32
 800417a:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800417c:	2320      	movs	r3, #32
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004180:	e031      	b.n	80041e6 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004182:	4b46      	ldr	r3, [pc, #280]	@ (800429c <EE_Init+0x824>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800418a:	031a      	lsls	r2, r3, #12
 800418c:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <EE_Init+0x81c>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	0299      	lsls	r1, r3, #10
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <EE_Init+0x820>)
 8004194:	400b      	ands	r3, r1
 8004196:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800419a:	fbb1 f1f3 	udiv	r1, r1, r3
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <EE_Init+0x81c>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	0298      	lsls	r0, r3, #10
 80041a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <EE_Init+0x820>)
 80041a6:	4003      	ands	r3, r0
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	441a      	add	r2, r3
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	4413      	add	r3, r2
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80041ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	bf08      	it	eq
 80041c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80041c8:	d012      	beq.n	80041f0 <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 80041ca:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <EE_Init+0x828>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b33      	ldr	r3, [pc, #204]	@ (80042a0 <EE_Init+0x828>)
 80041d4:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <EE_Init+0x82c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <EE_Init+0x82c>)
 80041de:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	3308      	adds	r3, #8
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ec:	d3c9      	bcc.n	8004182 <EE_Init+0x70a>
 80041ee:	e000      	b.n	80041f2 <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 80041f0:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 80041f2:	4b2a      	ldr	r3, [pc, #168]	@ (800429c <EE_Init+0x824>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 80041f8:	4b28      	ldr	r3, [pc, #160]	@ (800429c <EE_Init+0x824>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80041fe:	e053      	b.n	80042a8 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8004200:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <EE_Init+0x81c>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	029a      	lsls	r2, r3, #10
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <EE_Init+0x820>)
 8004208:	4013      	ands	r3, r2
 800420a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800420e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	0b1b      	lsrs	r3, r3, #12
 800421a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	3303      	adds	r3, #3
 8004220:	f003 0103 	and.w	r1, r3, #3
 8004224:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <EE_Init+0x81c>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	029a      	lsls	r2, r3, #10
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <EE_Init+0x820>)
 800422c:	4013      	ands	r3, r2
 800422e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004232:	fbb2 f0f3 	udiv	r0, r2, r3
 8004236:	fb00 f303 	mul.w	r3, r0, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	0b1b      	lsrs	r3, r3, #12
 800423e:	440b      	add	r3, r1
 8004240:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004244:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004248:	031a      	lsls	r2, r3, #12
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <EE_Init+0x81c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	0299      	lsls	r1, r3, #10
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <EE_Init+0x820>)
 8004252:	400b      	ands	r3, r1
 8004254:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004258:	fbb1 f1f3 	udiv	r1, r1, r3
 800425c:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <EE_Init+0x81c>)
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	0298      	lsls	r0, r3, #10
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <EE_Init+0x820>)
 8004264:	4003      	ands	r3, r0
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f88b 	bl	8005388 <GetPageState>
 8004272:	4603      	mov	r3, r0
 8004274:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8004276:	7ebb      	ldrb	r3, [r7, #26]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d109      	bne.n	8004290 <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800427c:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <EE_Init+0x828>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004284:	b29a      	uxth	r2, r3
 8004286:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <EE_Init+0x828>)
 8004288:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	e00b      	b.n	80042a8 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8004290:	230a      	movs	r3, #10
 8004292:	e0d0      	b.n	8004436 <EE_Init+0x9be>
 8004294:	1fff75e0 	.word	0x1fff75e0
 8004298:	001ffc00 	.word	0x001ffc00
 800429c:	200003a6 	.word	0x200003a6
 80042a0:	200003a4 	.word	0x200003a4
 80042a4:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80042a8:	4b65      	ldr	r3, [pc, #404]	@ (8004440 <EE_Init+0x9c8>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	029a      	lsls	r2, r3, #10
 80042ae:	4b65      	ldr	r3, [pc, #404]	@ (8004444 <EE_Init+0x9cc>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	0b1b      	lsrs	r3, r3, #12
 80042c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d010      	beq.n	80042ea <EE_Init+0x872>
 80042c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004440 <EE_Init+0x9c8>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	029a      	lsls	r2, r3, #10
 80042ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004444 <EE_Init+0x9cc>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	0b1b      	lsrs	r3, r3, #12
 80042e2:	3302      	adds	r3, #2
 80042e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d18a      	bne.n	8004200 <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 80042ea:	4b57      	ldr	r3, [pc, #348]	@ (8004448 <EE_Init+0x9d0>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <EE_Init+0x9c8>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	029a      	lsls	r2, r3, #10
 80042f6:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <EE_Init+0x9cc>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	0b1b      	lsrs	r3, r3, #12
 800430a:	1ac3      	subs	r3, r0, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f003 0103 	and.w	r1, r3, #3
 8004312:	4b4b      	ldr	r3, [pc, #300]	@ (8004440 <EE_Init+0x9c8>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	029a      	lsls	r2, r3, #10
 8004318:	4b4a      	ldr	r3, [pc, #296]	@ (8004444 <EE_Init+0x9cc>)
 800431a:	4013      	ands	r3, r2
 800431c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004320:	fbb2 f0f3 	udiv	r0, r2, r3
 8004324:	fb00 f303 	mul.w	r3, r0, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	0b1b      	lsrs	r3, r3, #12
 800432c:	440b      	add	r3, r1
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8004330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004332:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004336:	031a      	lsls	r2, r3, #12
 8004338:	4b41      	ldr	r3, [pc, #260]	@ (8004440 <EE_Init+0x9c8>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	0299      	lsls	r1, r3, #10
 800433e:	4b41      	ldr	r3, [pc, #260]	@ (8004444 <EE_Init+0x9cc>)
 8004340:	400b      	ands	r3, r1
 8004342:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004346:	fbb1 f1f3 	udiv	r1, r1, r3
 800434a:	4b3d      	ldr	r3, [pc, #244]	@ (8004440 <EE_Init+0x9c8>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	0298      	lsls	r0, r3, #10
 8004350:	4b3c      	ldr	r3, [pc, #240]	@ (8004444 <EE_Init+0x9cc>)
 8004352:	4003      	ands	r3, r0
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 800435c:	e053      	b.n	8004406 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 8004364:	2101      	movs	r1, #1
 8004366:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004368:	f001 f8b1 	bl	80054ce <FI_PageErase>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e05f      	b.n	8004436 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 8004376:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800437a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800437c:	f000 fb5d 	bl	8004a3a <VerifyPageFullyErased>
 8004380:	4603      	mov	r3, r0
 8004382:	2b10      	cmp	r3, #16
 8004384:	d108      	bne.n	8004398 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004386:	2101      	movs	r1, #1
 8004388:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800438a:	f001 f8a0 	bl	80054ce <FI_PageErase>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e04e      	b.n	8004436 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 8004398:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <EE_Init+0x9c8>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	029a      	lsls	r2, r3, #10
 800439e:	4b29      	ldr	r3, [pc, #164]	@ (8004444 <EE_Init+0x9cc>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	0b1b      	lsrs	r3, r3, #12
 80043b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f003 0103 	and.w	r1, r3, #3
 80043bc:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <EE_Init+0x9c8>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	029a      	lsls	r2, r3, #10
 80043c2:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <EE_Init+0x9cc>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043ca:	fbb2 f0f3 	udiv	r0, r2, r3
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	0b1b      	lsrs	r3, r3, #12
 80043d6:	440b      	add	r3, r1
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 80043da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80043e0:	031a      	lsls	r2, r3, #12
 80043e2:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <EE_Init+0x9c8>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	0299      	lsls	r1, r3, #10
 80043e8:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <EE_Init+0x9cc>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80043f0:	fbb1 f1f3 	udiv	r1, r1, r3
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <EE_Init+0x9c8>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0298      	lsls	r0, r3, #10
 80043fa:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <EE_Init+0x9cc>)
 80043fc:	4003      	ands	r3, r0
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8004406:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	429a      	cmp	r2, r3
 800440c:	d1a7      	bne.n	800435e <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800440e:	f001 f89d 	bl	800554c <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10d      	bne.n	8004434 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004418:	2100      	movs	r1, #0
 800441a:	2000      	movs	r0, #0
 800441c:	f000 fe6c 	bl	80050f8 <VerifyPagesFullWriteVariable>
 8004420:	4603      	mov	r3, r0
 8004422:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <EE_Init+0x9bc>
 800442a:	89fb      	ldrh	r3, [r7, #14]
 800442c:	2b12      	cmp	r3, #18
 800442e:	d001      	beq.n	8004434 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 8004430:	2302      	movs	r3, #2
 8004432:	e000      	b.n	8004436 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3740      	adds	r7, #64	@ 0x40
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	1fff75e0 	.word	0x1fff75e0
 8004444:	001ffc00 	.word	0x001ffc00
 8004448:	200003a6 	.word	0x200003a6

0800444c <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800445a:	f001 f899 	bl	8005590 <FI_CheckBankConfig>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 8004464:	230e      	movs	r3, #14
 8004466:	e083      	b.n	8004570 <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004468:	4b43      	ldr	r3, [pc, #268]	@ (8004578 <EE_Format+0x12c>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	029a      	lsls	r2, r3, #10
 800446e:	4b43      	ldr	r3, [pc, #268]	@ (800457c <EE_Format+0x130>)
 8004470:	4013      	ands	r3, r2
 8004472:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004476:	fbb2 f1f3 	udiv	r1, r2, r3
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	0b1b      	lsrs	r3, r3, #12
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e034      	b.n	80044f0 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800448c:	2101      	movs	r1, #1
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 f81d 	bl	80054ce <FI_PageErase>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d027      	beq.n	80044ea <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e068      	b.n	8004570 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80044a4:	031a      	lsls	r2, r3, #12
 80044a6:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <EE_Format+0x12c>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	0299      	lsls	r1, r3, #10
 80044ac:	4b33      	ldr	r3, [pc, #204]	@ (800457c <EE_Format+0x130>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80044b4:	fbb1 f1f3 	udiv	r1, r1, r3
 80044b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004578 <EE_Format+0x12c>)
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	0298      	lsls	r0, r3, #10
 80044be:	4b2f      	ldr	r3, [pc, #188]	@ (800457c <EE_Format+0x130>)
 80044c0:	4003      	ands	r3, r0
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fab4 	bl	8004a3a <VerifyPageFullyErased>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d108      	bne.n	80044ea <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 80044d8:	2101      	movs	r1, #1
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fff7 	bl	80054ce <FI_PageErase>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e042      	b.n	8004570 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <EE_Format+0x12c>)
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	029a      	lsls	r2, r3, #10
 80044f6:	4b21      	ldr	r3, [pc, #132]	@ (800457c <EE_Format+0x130>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	0b1b      	lsrs	r3, r3, #12
 800450a:	3304      	adds	r3, #4
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3b9      	bcc.n	8004486 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8004512:	f001 f81b 	bl	800554c <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004516:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <EE_Format+0x12c>)
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	029a      	lsls	r2, r3, #10
 800451c:	4b17      	ldr	r3, [pc, #92]	@ (800457c <EE_Format+0x130>)
 800451e:	4013      	ands	r3, r2
 8004520:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004524:	fbb2 f1f3 	udiv	r1, r2, r3
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	0b1b      	lsrs	r3, r3, #12
 8004530:	2102      	movs	r1, #2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fe66 	bl	8005204 <SetPageState>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800453e:	2302      	movs	r3, #2
 8004540:	e016      	b.n	8004570 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 8004542:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <EE_Format+0x134>)
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <EE_Format+0x12c>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	029a      	lsls	r2, r3, #10
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <EE_Format+0x130>)
 8004550:	4013      	ands	r3, r2
 8004552:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004556:	fbb2 f1f3 	udiv	r1, r2, r3
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	0b1b      	lsrs	r3, r3, #12
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <EE_Format+0x138>)
 8004566:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 8004568:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <EE_Format+0x13c>)
 800456a:	2220      	movs	r2, #32
 800456c:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	1fff75e0 	.word	0x1fff75e0
 800457c:	001ffc00 	.word	0x001ffc00
 8004580:	200003a4 	.word	0x200003a4
 8004584:	200003a6 	.word	0x200003a6
 8004588:	20000008 	.word	0x20000008

0800458c <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <EE_ReadVariable32bits+0x40>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d011      	beq.n	80045cc <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80045b0:	f107 0208 	add.w	r2, r7, #8
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f94b 	bl	8004854 <ReadVariable>
 80045be:	4603      	mov	r3, r0
 80045c0:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]

    return status;
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	e000      	b.n	80045ce <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 80045cc:	2308      	movs	r3, #8
  } 
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	6039      	str	r1, [r7, #0]
 80045e0:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <EE_WriteVariable32bits+0x2a>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d006      	beq.n	8004600 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fa00 	bl	80049fc <WriteVariable>
 80045fc:	4603      	mov	r3, r0
 80045fe:	e000      	b.n	8004602 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004600:	2308      	movs	r3, #8
  } 
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004622:	2305      	movs	r3, #5
 8004624:	71fb      	strb	r3, [r7, #7]
 8004626:	2305      	movs	r3, #5
 8004628:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800462a:	4b3f      	ldr	r3, [pc, #252]	@ (8004728 <EE_CleanUp+0x11c>)
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	029a      	lsls	r2, r3, #10
 8004630:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <EE_CleanUp+0x120>)
 8004632:	4013      	ands	r3, r2
 8004634:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004638:	fbb2 f1f3 	udiv	r1, r2, r3
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	0b1b      	lsrs	r3, r3, #12
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e059      	b.n	80046fc <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800464e:	031a      	lsls	r2, r3, #12
 8004650:	4b35      	ldr	r3, [pc, #212]	@ (8004728 <EE_CleanUp+0x11c>)
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	0299      	lsls	r1, r3, #10
 8004656:	4b35      	ldr	r3, [pc, #212]	@ (800472c <EE_CleanUp+0x120>)
 8004658:	400b      	ands	r3, r1
 800465a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800465e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004662:	4b31      	ldr	r3, [pc, #196]	@ (8004728 <EE_CleanUp+0x11c>)
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	0298      	lsls	r0, r3, #10
 8004668:	4b30      	ldr	r3, [pc, #192]	@ (800472c <EE_CleanUp+0x120>)
 800466a:	4003      	ands	r3, r0
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fe87 	bl	8005388 <GetPageState>
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d138      	bne.n	80046f6 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	e022      	b.n	80046d2 <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004692:	031a      	lsls	r2, r3, #12
 8004694:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <EE_CleanUp+0x11c>)
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	0299      	lsls	r1, r3, #10
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <EE_CleanUp+0x120>)
 800469c:	400b      	ands	r3, r1
 800469e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80046a2:	fbb1 f1f3 	udiv	r1, r1, r3
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <EE_CleanUp+0x11c>)
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	0298      	lsls	r0, r3, #10
 80046ac:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <EE_CleanUp+0x120>)
 80046ae:	4003      	ands	r3, r0
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f000 fe65 	bl	8005388 <GetPageState>
 80046be:	4603      	mov	r3, r0
 80046c0:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d001      	beq.n	80046cc <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80046c8:	2305      	movs	r3, #5
 80046ca:	e029      	b.n	8004720 <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3301      	adds	r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	3302      	adds	r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3d7      	bcc.n	800468c <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 80046dc:	2102      	movs	r1, #2
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f000 fef5 	bl	80054ce <FI_PageErase>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e018      	b.n	8004720 <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 80046ee:	f000 ff2d 	bl	800554c <FI_CacheFlush>
        
        return EE_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e014      	b.n	8004720 <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3302      	adds	r3, #2
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <EE_CleanUp+0x11c>)
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	029a      	lsls	r2, r3, #10
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <EE_CleanUp+0x120>)
 8004704:	4013      	ands	r3, r2
 8004706:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800470a:	fbb2 f1f3 	udiv	r1, r2, r3
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	0b1b      	lsrs	r3, r3, #12
 8004716:	3304      	adds	r3, #4
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	429a      	cmp	r2, r3
 800471c:	d394      	bcc.n	8004648 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800471e:	2305      	movs	r3, #5
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	1fff75e0 	.word	0x1fff75e0
 800472c:	001ffc00 	.word	0x001ffc00

08004730 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004746:	2305      	movs	r3, #5
 8004748:	71fb      	strb	r3, [r7, #7]
 800474a:	2305      	movs	r3, #5
 800474c:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800474e:	4b3f      	ldr	r3, [pc, #252]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	029a      	lsls	r2, r3, #10
 8004754:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <EE_CleanUp_IT+0x120>)
 8004756:	4013      	ands	r3, r2
 8004758:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800475c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	0b1b      	lsrs	r3, r3, #12
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e059      	b.n	8004820 <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004772:	031a      	lsls	r2, r3, #12
 8004774:	4b35      	ldr	r3, [pc, #212]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	0299      	lsls	r1, r3, #10
 800477a:	4b35      	ldr	r3, [pc, #212]	@ (8004850 <EE_CleanUp_IT+0x120>)
 800477c:	400b      	ands	r3, r1
 800477e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004782:	fbb1 f1f3 	udiv	r1, r1, r3
 8004786:	4b31      	ldr	r3, [pc, #196]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	0298      	lsls	r0, r3, #10
 800478c:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <EE_CleanUp_IT+0x120>)
 800478e:	4003      	ands	r3, r0
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	4413      	add	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fdf5 	bl	8005388 <GetPageState>
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d138      	bne.n	800481a <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3301      	adds	r3, #1
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e022      	b.n	80047f6 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047b6:	031a      	lsls	r2, r3, #12
 80047b8:	4b24      	ldr	r3, [pc, #144]	@ (800484c <EE_CleanUp_IT+0x11c>)
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	0299      	lsls	r1, r3, #10
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <EE_CleanUp_IT+0x120>)
 80047c0:	400b      	ands	r3, r1
 80047c2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80047c6:	fbb1 f1f3 	udiv	r1, r1, r3
 80047ca:	4b20      	ldr	r3, [pc, #128]	@ (800484c <EE_CleanUp_IT+0x11c>)
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	0298      	lsls	r0, r3, #10
 80047d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004850 <EE_CleanUp_IT+0x120>)
 80047d2:	4003      	ands	r3, r0
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80047dc:	68b8      	ldr	r0, [r7, #8]
 80047de:	f000 fdd3 	bl	8005388 <GetPageState>
 80047e2:	4603      	mov	r3, r0
 80047e4:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d001      	beq.n	80047f0 <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80047ec:	2305      	movs	r3, #5
 80047ee:	e029      	b.n	8004844 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3301      	adds	r3, #1
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	3302      	adds	r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3d7      	bcc.n	80047b0 <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004800:	2102      	movs	r1, #2
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f000 fe85 	bl	8005512 <FI_PageErase_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e018      	b.n	8004844 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8004812:	f000 fe9b 	bl	800554c <FI_CacheFlush>
        return EE_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e014      	b.n	8004844 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3302      	adds	r3, #2
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	029a      	lsls	r2, r3, #10
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <EE_CleanUp_IT+0x120>)
 8004828:	4013      	ands	r3, r2
 800482a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800482e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	0b1b      	lsrs	r3, r3, #12
 800483a:	3304      	adds	r3, #4
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	429a      	cmp	r2, r3
 8004840:	d394      	bcc.n	800476c <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 8004842:	2305      	movs	r3, #5
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	1fff75e0 	.word	0x1fff75e0
 8004850:	001ffc00 	.word	0x001ffc00

08004854 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	@ 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	2300      	movs	r3, #0
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800487c:	2305      	movs	r3, #5
 800487e:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 8004880:	2000      	movs	r0, #0
 8004882:	f000 f8ff 	bl	8004a84 <FindPage>
 8004886:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d101      	bne.n	8004894 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8004890:	2303      	movs	r3, #3
 8004892:	e0ab      	b.n	80049ec <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800489a:	031a      	lsls	r2, r3, #12
 800489c:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <ReadVariable+0x1a0>)
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	0299      	lsls	r1, r3, #10
 80048a2:	4b55      	ldr	r3, [pc, #340]	@ (80049f8 <ReadVariable+0x1a4>)
 80048a4:	400b      	ands	r3, r1
 80048a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80048aa:	fbb1 f1f3 	udiv	r1, r1, r3
 80048ae:	4b51      	ldr	r3, [pc, #324]	@ (80049f4 <ReadVariable+0x1a0>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	0298      	lsls	r0, r3, #10
 80048b4:	4b50      	ldr	r3, [pc, #320]	@ (80049f8 <ReadVariable+0x1a4>)
 80048b6:	4003      	ands	r3, r0
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80048c0:	6a38      	ldr	r0, [r7, #32]
 80048c2:	f000 fd61 	bl	8005388 <GetPageState>
 80048c6:	4603      	mov	r3, r0
 80048c8:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80048ca:	e082      	b.n	80049d2 <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 80048cc:	f640 73f8 	movw	r3, #4088	@ 0xff8
 80048d0:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 80048d2:	e03f      	b.n	8004954 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 80048e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	bf08      	it	eq
 80048ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80048f0:	d02d      	beq.n	800494e <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 80048f2:	8a3b      	ldrh	r3, [r7, #16]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d129      	bne.n	800494e <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 80048fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	000a      	movs	r2, r1
 8004908:	2300      	movs	r3, #0
 800490a:	8a3b      	ldrh	r3, [r7, #16]
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 fdb0 	bl	8005474 <CalculateCrc>
 8004914:	4603      	mov	r3, r0
 8004916:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004918:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	0c02      	lsrs	r2, r0, #16
 8004926:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800492a:	0c0b      	lsrs	r3, r1, #16
 800492c:	b293      	uxth	r3, r2
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4293      	cmp	r3, r2
 8004934:	d10b      	bne.n	800494e <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	000a      	movs	r2, r1
 8004944:	2300      	movs	r3, #0
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e04e      	b.n	80049ec <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b08      	subs	r3, #8
 8004952:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b1f      	cmp	r3, #31
 8004958:	d8bc      	bhi.n	80048d4 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800495a:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <ReadVariable+0x1a0>)
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	029a      	lsls	r2, r3, #10
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <ReadVariable+0x1a4>)
 8004962:	4013      	ands	r3, r2
 8004964:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004968:	fbb2 f1f3 	udiv	r1, r2, r3
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	0b1b      	lsrs	r3, r3, #12
 8004974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	3303      	adds	r3, #3
 800497a:	f003 0103 	and.w	r1, r3, #3
 800497e:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <ReadVariable+0x1a0>)
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	029a      	lsls	r2, r3, #10
 8004984:	4b1c      	ldr	r3, [pc, #112]	@ (80049f8 <ReadVariable+0x1a4>)
 8004986:	4013      	ands	r3, r2
 8004988:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800498c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004990:	fb00 f303 	mul.w	r3, r0, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	0b1b      	lsrs	r3, r3, #12
 8004998:	440b      	add	r3, r1
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
    pageaddress = PAGE_ADDRESS(page);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80049a2:	031a      	lsls	r2, r3, #12
 80049a4:	4b13      	ldr	r3, [pc, #76]	@ (80049f4 <ReadVariable+0x1a0>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	0299      	lsls	r1, r3, #10
 80049aa:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <ReadVariable+0x1a4>)
 80049ac:	400b      	ands	r3, r1
 80049ae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80049b2:	fbb1 f1f3 	udiv	r1, r1, r3
 80049b6:	4b0f      	ldr	r3, [pc, #60]	@ (80049f4 <ReadVariable+0x1a0>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	0298      	lsls	r0, r3, #10
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <ReadVariable+0x1a4>)
 80049be:	4003      	ands	r3, r0
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 80049c8:	6a38      	ldr	r0, [r7, #32]
 80049ca:	f000 fcdd 	bl	8005388 <GetPageState>
 80049ce:	4603      	mov	r3, r0
 80049d0:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f43f af79 	beq.w	80048cc <ReadVariable+0x78>
 80049da:	7efb      	ldrb	r3, [r7, #27]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	f43f af75 	beq.w	80048cc <ReadVariable+0x78>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	f43f af71 	beq.w	80048cc <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 80049ea:	2307      	movs	r3, #7
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3728      	adds	r7, #40	@ 0x28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	1fff75e0 	.word	0x1fff75e0
 80049f8:	001ffc00 	.word	0x001ffc00

080049fc <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fb71 	bl	80050f8 <VerifyPagesFullWriteVariable>
 8004a16:	4603      	mov	r3, r0
 8004a18:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	2b12      	cmp	r3, #18
 8004a1e:	d107      	bne.n	8004a30 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	2200      	movs	r2, #0
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f940 	bl	8004cac <PagesTransfer>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e000      	b.n	8004a32 <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004a30:	89fb      	ldrh	r3, [r7, #14]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8004a44:	2311      	movs	r3, #17
 8004a46:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8004a4c:	e00f      	b.n	8004a6e <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4413      	add	r3, r2
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	bf08      	it	eq
 8004a5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004a62:	d001      	beq.n	8004a68 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8004a64:	2310      	movs	r3, #16
 8004a66:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d3eb      	bcc.n	8004a4e <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8004a76:	89fb      	ldrh	r3, [r7, #14]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8004a8e:	2305      	movs	r3, #5
 8004a90:	75fb      	strb	r3, [r7, #23]
 8004a92:	2305      	movs	r3, #5
 8004a94:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8004c9c <FindPage+0x218>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004aae:	031a      	lsls	r2, r3, #12
 8004ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca0 <FindPage+0x21c>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	0299      	lsls	r1, r3, #10
 8004ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca4 <FindPage+0x220>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004abe:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ac2:	4b77      	ldr	r3, [pc, #476]	@ (8004ca0 <FindPage+0x21c>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	0298      	lsls	r0, r3, #10
 8004ac8:	4b76      	ldr	r3, [pc, #472]	@ (8004ca4 <FindPage+0x220>)
 8004aca:	4003      	ands	r3, r0
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fc58 	bl	8005388 <GetPageState>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8004adc:	4b70      	ldr	r3, [pc, #448]	@ (8004ca0 <FindPage+0x21c>)
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	029a      	lsls	r2, r3, #10
 8004ae2:	4b70      	ldr	r3, [pc, #448]	@ (8004ca4 <FindPage+0x220>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004aea:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	0b1b      	lsrs	r3, r3, #12
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	3301      	adds	r3, #1
 8004afc:	f003 0103 	and.w	r1, r3, #3
 8004b00:	4b67      	ldr	r3, [pc, #412]	@ (8004ca0 <FindPage+0x21c>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	029a      	lsls	r2, r3, #10
 8004b06:	4b67      	ldr	r3, [pc, #412]	@ (8004ca4 <FindPage+0x220>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b0e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b12:	fb00 f303 	mul.w	r3, r0, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	0b1b      	lsrs	r3, r3, #12
 8004b1a:	440b      	add	r3, r1
 8004b1c:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004b24:	031a      	lsls	r2, r3, #12
 8004b26:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca0 <FindPage+0x21c>)
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	0299      	lsls	r1, r3, #10
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca4 <FindPage+0x220>)
 8004b2e:	400b      	ands	r3, r1
 8004b30:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004b34:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b38:	4b59      	ldr	r3, [pc, #356]	@ (8004ca0 <FindPage+0x21c>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	0298      	lsls	r0, r3, #10
 8004b3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ca4 <FindPage+0x220>)
 8004b40:	4003      	ands	r3, r0
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fc1d 	bl	8005388 <GetPageState>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8004b52:	4b53      	ldr	r3, [pc, #332]	@ (8004ca0 <FindPage+0x21c>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	029a      	lsls	r2, r3, #10
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <FindPage+0x220>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b60:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	0b1b      	lsrs	r3, r3, #12
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	3303      	adds	r3, #3
 8004b72:	f003 0103 	and.w	r1, r3, #3
 8004b76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca0 <FindPage+0x21c>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	029a      	lsls	r2, r3, #10
 8004b7c:	4b49      	ldr	r3, [pc, #292]	@ (8004ca4 <FindPage+0x220>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b84:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	0b1b      	lsrs	r3, r3, #12
 8004b90:	440b      	add	r3, r1
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d071      	beq.n	8004c7e <FindPage+0x1fa>
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	dc77      	bgt.n	8004c8e <FindPage+0x20a>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d060      	beq.n	8004c64 <FindPage+0x1e0>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d173      	bne.n	8004c8e <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d12a      	bne.n	8004c02 <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8004bac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca8 <FindPage+0x224>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb4:	d201      	bcs.n	8004bba <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	e06b      	b.n	8004c92 <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8004bba:	7dbb      	ldrb	r3, [r7, #22]
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d107      	bne.n	8004bd0 <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004bc0:	f7ff fd24 	bl	800460c <EE_CleanUp>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	e060      	b.n	8004c92 <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004bd0:	2103      	movs	r1, #3
 8004bd2:	6938      	ldr	r0, [r7, #16]
 8004bd4:	f000 fb16 	bl	8005204 <SetPageState>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	e056      	b.n	8004c92 <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004be4:	2102      	movs	r1, #2
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb0c 	bl	8005204 <SetPageState>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	e04c      	b.n	8004c92 <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <FindPage+0x224>)
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	e047      	b.n	8004c92 <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d12a      	bne.n	8004c5e <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <FindPage+0x224>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c10:	d201      	bcs.n	8004c16 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	e03d      	b.n	8004c92 <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004c16:	7dbb      	ldrb	r3, [r7, #22]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8004c1c:	f7ff fcf6 	bl	800460c <EE_CleanUp>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e032      	b.n	8004c92 <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c2c:	2103      	movs	r1, #3
 8004c2e:	6938      	ldr	r0, [r7, #16]
 8004c30:	f000 fae8 	bl	8005204 <SetPageState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e028      	b.n	8004c92 <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8004c40:	2101      	movs	r1, #1
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fade 	bl	8005204 <SetPageState>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e01e      	b.n	8004c92 <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <FindPage+0x224>)
 8004c56:	2220      	movs	r2, #32
 8004c58:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	e019      	b.n	8004c92 <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	e016      	b.n	8004c92 <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d101      	bne.n	8004c6e <FindPage+0x1ea>
      {
        return currentpage;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	e011      	b.n	8004c92 <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <FindPage+0x1f4>
        {
          return previouspage;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	e00c      	b.n	8004c92 <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	e009      	b.n	8004c92 <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8004c7e:	7dbb      	ldrb	r3, [r7, #22]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <FindPage+0x204>
      {
        return followingpage;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e004      	b.n	8004c92 <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	e001      	b.n	8004c92 <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200003a6 	.word	0x200003a6
 8004ca0:	1fff75e0 	.word	0x1fff75e0
 8004ca4:	001ffc00 	.word	0x001ffc00
 8004ca8:	20000008 	.word	0x20000008

08004cac <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	@ 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	80fb      	strh	r3, [r7, #6]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004cbc:	2305      	movs	r3, #5
 8004cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t pageaddress = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004ce2:	797b      	ldrb	r3, [r7, #5]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <PagesTransfer+0x40>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e000      	b.n	8004cee <PagesTransfer+0x42>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fec8 	bl	8004a84 <FindPage>
 8004cf4:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d101      	bne.n	8004d02 <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004cfe:	2304      	movs	r3, #4
 8004d00:	e1ed      	b.n	80050de <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004d02:	4ba4      	ldr	r3, [pc, #656]	@ (8004f94 <PagesTransfer+0x2e8>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4ba2      	ldr	r3, [pc, #648]	@ (8004f98 <PagesTransfer+0x2ec>)
 8004d0e:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004d10:	4ba2      	ldr	r3, [pc, #648]	@ (8004f9c <PagesTransfer+0x2f0>)
 8004d12:	2220      	movs	r2, #32
 8004d14:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004d16:	797b      	ldrb	r3, [r7, #5]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	6a38      	ldr	r0, [r7, #32]
 8004d20:	f000 fa70 	bl	8005204 <SetPageState>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e1d7      	b.n	80050de <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	029a      	lsls	r2, r3, #10
 8004d34:	4b9b      	ldr	r3, [pc, #620]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	0b1b      	lsrs	r3, r3, #12
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	3303      	adds	r3, #3
 8004d4e:	f003 0103 	and.w	r1, r3, #3
 8004d52:	4b93      	ldr	r3, [pc, #588]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	029a      	lsls	r2, r3, #10
 8004d58:	4b92      	ldr	r3, [pc, #584]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d60:	fbb2 f0f3 	udiv	r0, r2, r3
 8004d64:	fb00 f303 	mul.w	r3, r0, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	0b1b      	lsrs	r3, r3, #12
 8004d6c:	440b      	add	r3, r1
 8004d6e:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004d76:	031a      	lsls	r2, r3, #12
 8004d78:	4b89      	ldr	r3, [pc, #548]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	0299      	lsls	r1, r3, #10
 8004d7e:	4b89      	ldr	r3, [pc, #548]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d80:	400b      	ands	r3, r1
 8004d82:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004d86:	fbb1 f1f3 	udiv	r1, r1, r3
 8004d8a:	4b85      	ldr	r3, [pc, #532]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	0298      	lsls	r0, r3, #10
 8004d90:	4b84      	ldr	r3, [pc, #528]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d92:	4003      	ands	r3, r0
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004d9c:	69b8      	ldr	r0, [r7, #24]
 8004d9e:	f000 faf3 	bl	8005388 <GetPageState>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d004      	beq.n	8004dba <PagesTransfer+0x10e>
 8004db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	f040 809e 	bne.w	8004ef6 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d108      	bne.n	8004dd4 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004dc2:	2104      	movs	r1, #4
 8004dc4:	6a38      	ldr	r0, [r7, #32]
 8004dc6:	f000 fa1d 	bl	8005204 <SetPageState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e184      	b.n	80050de <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004dd4:	4b72      	ldr	r3, [pc, #456]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	029a      	lsls	r2, r3, #10
 8004dda:	4b72      	ldr	r3, [pc, #456]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004de2:	fbb2 f1f3 	udiv	r1, r2, r3
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	0b1b      	lsrs	r3, r3, #12
 8004dee:	6a3a      	ldr	r2, [r7, #32]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	3303      	adds	r3, #3
 8004df4:	f003 0103 	and.w	r1, r3, #3
 8004df8:	4b69      	ldr	r3, [pc, #420]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	029a      	lsls	r2, r3, #10
 8004dfe:	4b69      	ldr	r3, [pc, #420]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e06:	fbb2 f0f3 	udiv	r0, r2, r3
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	0b1b      	lsrs	r3, r3, #12
 8004e12:	440b      	add	r3, r1
 8004e14:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004e1c:	031a      	lsls	r2, r3, #12
 8004e1e:	4b60      	ldr	r3, [pc, #384]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	0299      	lsls	r1, r3, #10
 8004e24:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004e2c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e30:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	0298      	lsls	r0, r3, #10
 8004e36:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e38:	4003      	ands	r3, r0
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f000 faa0 	bl	8005388 <GetPageState>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004e4e:	e049      	b.n	8004ee4 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d108      	bne.n	8004e6a <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004e58:	2104      	movs	r1, #4
 8004e5a:	6a38      	ldr	r0, [r7, #32]
 8004e5c:	f000 f9d2 	bl	8005204 <SetPageState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004e66:	2302      	movs	r3, #2
 8004e68:	e139      	b.n	80050de <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	029a      	lsls	r2, r3, #10
 8004e70:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e78:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	0b1b      	lsrs	r3, r3, #12
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	3303      	adds	r3, #3
 8004e8a:	f003 0103 	and.w	r1, r3, #3
 8004e8e:	4b44      	ldr	r3, [pc, #272]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	029a      	lsls	r2, r3, #10
 8004e94:	4b43      	ldr	r3, [pc, #268]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e9c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004ea0:	fb00 f303 	mul.w	r3, r0, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	0b1b      	lsrs	r3, r3, #12
 8004ea8:	440b      	add	r3, r1
 8004eaa:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004eb2:	031a      	lsls	r2, r3, #12
 8004eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	0299      	lsls	r1, r3, #10
 8004eba:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004ebc:	400b      	ands	r3, r1
 8004ebe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004ec2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ec6:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	0298      	lsls	r0, r3, #10
 8004ecc:	4b35      	ldr	r3, [pc, #212]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004ece:	4003      	ands	r3, r0
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004ed8:	69b8      	ldr	r0, [r7, #24]
 8004eda:	f000 fa55 	bl	8005388 <GetPageState>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d0b1      	beq.n	8004e50 <PagesTransfer+0x1a4>
 8004eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d0ad      	beq.n	8004e50 <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004ef4:	e008      	b.n	8004f08 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004ef6:	797b      	ldrb	r3, [r7, #5]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d103      	bne.n	8004f04 <PagesTransfer+0x258>
 8004efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d001      	beq.n	8004f08 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004f04:	230a      	movs	r3, #10
 8004f06:	e0ea      	b.n	80050de <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004f08:	797b      	ldrb	r3, [r7, #5]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	f040 809b 	bne.w	8005046 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f10:	2320      	movs	r3, #32
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e031      	b.n	8004f7a <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004f16:	4b20      	ldr	r3, [pc, #128]	@ (8004f98 <PagesTransfer+0x2ec>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004f1e:	031a      	lsls	r2, r3, #12
 8004f20:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	0299      	lsls	r1, r3, #10
 8004f26:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004f28:	400b      	ands	r3, r1
 8004f2a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004f2e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	0298      	lsls	r0, r3, #10
 8004f38:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004f3a:	4003      	ands	r3, r0
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	441a      	add	r2, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	bf08      	it	eq
 8004f58:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004f5c:	d012      	beq.n	8004f84 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <PagesTransfer+0x2e8>)
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <PagesTransfer+0x2e8>)
 8004f68:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <PagesTransfer+0x2f0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <PagesTransfer+0x2f0>)
 8004f72:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	3308      	adds	r3, #8
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f80:	d3c9      	bcc.n	8004f16 <PagesTransfer+0x26a>
 8004f82:	e000      	b.n	8004f86 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004f84:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004f86:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <PagesTransfer+0x2ec>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e054      	b.n	800503c <PagesTransfer+0x390>
 8004f92:	bf00      	nop
 8004f94:	200003a4 	.word	0x200003a4
 8004f98:	200003a6 	.word	0x200003a6
 8004f9c:	20000008 	.word	0x20000008
 8004fa0:	1fff75e0 	.word	0x1fff75e0
 8004fa4:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80050e8 <PagesTransfer+0x43c>)
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	029a      	lsls	r2, r3, #10
 8004fae:	4b4f      	ldr	r3, [pc, #316]	@ (80050ec <PagesTransfer+0x440>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004fb6:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	0b1b      	lsrs	r3, r3, #12
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	f003 0103 	and.w	r1, r3, #3
 8004fcc:	4b46      	ldr	r3, [pc, #280]	@ (80050e8 <PagesTransfer+0x43c>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	029a      	lsls	r2, r3, #10
 8004fd2:	4b46      	ldr	r3, [pc, #280]	@ (80050ec <PagesTransfer+0x440>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004fda:	fbb2 f0f3 	udiv	r0, r2, r3
 8004fde:	fb00 f303 	mul.w	r3, r0, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	0b1b      	lsrs	r3, r3, #12
 8004fe6:	440b      	add	r3, r1
 8004fe8:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004ff0:	031a      	lsls	r2, r3, #12
 8004ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80050e8 <PagesTransfer+0x43c>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	0299      	lsls	r1, r3, #10
 8004ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80050ec <PagesTransfer+0x440>)
 8004ffa:	400b      	ands	r3, r1
 8004ffc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005000:	fbb1 f1f3 	udiv	r1, r1, r3
 8005004:	4b38      	ldr	r3, [pc, #224]	@ (80050e8 <PagesTransfer+0x43c>)
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	0298      	lsls	r0, r3, #10
 800500a:	4b38      	ldr	r3, [pc, #224]	@ (80050ec <PagesTransfer+0x440>)
 800500c:	4003      	ands	r3, r0
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f9b7 	bl	8005388 <GetPageState>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8005020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005024:	2b03      	cmp	r3, #3
 8005026:	d10d      	bne.n	8005044 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8005028:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <PagesTransfer+0x444>)
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8005030:	b29a      	uxth	r2, r3
 8005032:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <PagesTransfer+0x444>)
 8005034:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3301      	adds	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d9b2      	bls.n	8004fa8 <PagesTransfer+0x2fc>
 8005042:	e000      	b.n	8005046 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8005044:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f854 	bl	80050f8 <VerifyPagesFullWriteVariable>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8005056:	2302      	movs	r3, #2
 8005058:	e041      	b.n	80050de <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800505a:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <PagesTransfer+0x444>)
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d903      	bls.n	800506a <PagesTransfer+0x3be>
 8005062:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <PagesTransfer+0x444>)
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	3b02      	subs	r3, #2
 8005068:	e000      	b.n	800506c <PagesTransfer+0x3c0>
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e026      	b.n	80050be <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d01f      	beq.n	80050b8 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f107 0208 	add.w	r2, r7, #8
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fbe6 	bl	8004854 <ReadVariable>
 8005088:	4603      	mov	r3, r0
 800508a:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 800508c:	89fb      	ldrh	r3, [r7, #14]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	b29b      	uxth	r3, r3
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f82c 	bl	80050f8 <VerifyPagesFullWriteVariable>
 80050a0:	4603      	mov	r3, r0
 80050a2:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <PagesTransfer+0x40c>
        {
          return status;
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	e017      	b.n	80050de <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	2b07      	cmp	r3, #7
 80050b2:	d001      	beq.n	80050b8 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	e012      	b.n	80050de <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b32      	cmp	r3, #50	@ 0x32
 80050c2:	d9d5      	bls.n	8005070 <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <PagesTransfer+0x448>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f89a 	bl	8005204 <SetPageState>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 80050d6:	2302      	movs	r3, #2
 80050d8:	e001      	b.n	80050de <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 80050da:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	@ 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	1fff75e0 	.word	0x1fff75e0
 80050ec:	001ffc00 	.word	0x001ffc00
 80050f0:	200003a4 	.word	0x200003a4
 80050f4:	200003a6 	.word	0x200003a6

080050f8 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	b08b      	sub	sp, #44	@ 0x2c
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	6139      	str	r1, [r7, #16]
 8005104:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800510a:	4b3a      	ldr	r3, [pc, #232]	@ (80051f4 <VerifyPagesFullWriteVariable+0xfc>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	f5b3 7f7e 	cmp.w	r3, #1016	@ 0x3f8
 8005112:	d301      	bcc.n	8005118 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8005114:	2312      	movs	r3, #18
 8005116:	e068      	b.n	80051ea <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8005118:	2001      	movs	r0, #1
 800511a:	f7ff fcb3 	bl	8004a84 <FindPage>
 800511e:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d101      	bne.n	8005130 <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800512c:	2303      	movs	r3, #3
 800512e:	e05c      	b.n	80051ea <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005136:	0319      	lsls	r1, r3, #12
 8005138:	4b2f      	ldr	r3, [pc, #188]	@ (80051f8 <VerifyPagesFullWriteVariable+0x100>)
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	029a      	lsls	r2, r3, #10
 800513e:	4b2f      	ldr	r3, [pc, #188]	@ (80051fc <VerifyPagesFullWriteVariable+0x104>)
 8005140:	4013      	ands	r3, r2
 8005142:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005146:	fbb2 f2f3 	udiv	r2, r2, r3
 800514a:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <VerifyPagesFullWriteVariable+0x100>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	0298      	lsls	r0, r3, #10
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <VerifyPagesFullWriteVariable+0x104>)
 8005152:	4003      	ands	r3, r0
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	440b      	add	r3, r1
 800515a:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <VerifyPagesFullWriteVariable+0x76>
 8005162:	8afb      	ldrh	r3, [r7, #22]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
 800516c:	e006      	b.n	800517c <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800516e:	8afb      	ldrh	r3, [r7, #22]
 8005170:	4619      	mov	r1, r3
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f000 f97e 	bl	8005474 <CalculateCrc>
 8005178:	4603      	mov	r3, r0
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800517c:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <VerifyPagesFullWriteVariable+0x108>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	18d0      	adds	r0, r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2200      	movs	r2, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	60fa      	str	r2, [r7, #12]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	000b      	movs	r3, r1
 8005198:	2200      	movs	r2, #0
 800519a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800519c:	0409      	lsls	r1, r1, #16
 800519e:	2600      	movs	r6, #0
 80051a0:	468a      	mov	sl, r1
 80051a2:	46b3      	mov	fp, r6
 80051a4:	ea42 040a 	orr.w	r4, r2, sl
 80051a8:	ea43 050b 	orr.w	r5, r3, fp
 80051ac:	8afb      	ldrh	r3, [r7, #22]
 80051ae:	2200      	movs	r2, #0
 80051b0:	4698      	mov	r8, r3
 80051b2:	4691      	mov	r9, r2
 80051b4:	ea44 0308 	orr.w	r3, r4, r8
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	ea45 0309 	orr.w	r3, r5, r9
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c4:	f000 f972 	bl	80054ac <FI_WriteDoubleWord>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 80051ce:	2302      	movs	r3, #2
 80051d0:	e00b      	b.n	80051ea <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 80051d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <VerifyPagesFullWriteVariable+0x108>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	4a09      	ldr	r2, [pc, #36]	@ (8005200 <VerifyPagesFullWriteVariable+0x108>)
 80051da:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 80051dc:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <VerifyPagesFullWriteVariable+0xfc>)
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	4b03      	ldr	r3, [pc, #12]	@ (80051f4 <VerifyPagesFullWriteVariable+0xfc>)
 80051e6:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	372c      	adds	r7, #44	@ 0x2c
 80051ee:	46bd      	mov	sp, r7
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	200003a4 	.word	0x200003a4
 80051f8:	1fff75e0 	.word	0x1fff75e0
 80051fc:	001ffc00 	.word	0x001ffc00
 8005200:	20000008 	.word	0x20000008

08005204 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005226:	031a      	lsls	r2, r3, #12
 8005228:	4b54      	ldr	r3, [pc, #336]	@ (800537c <SetPageState+0x178>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	0299      	lsls	r1, r3, #10
 800522e:	4b54      	ldr	r3, [pc, #336]	@ (8005380 <SetPageState+0x17c>)
 8005230:	400b      	ands	r3, r1
 8005232:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005236:	fbb1 f1f3 	udiv	r1, r1, r3
 800523a:	4b50      	ldr	r3, [pc, #320]	@ (800537c <SetPageState+0x178>)
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	0298      	lsls	r0, r3, #10
 8005240:	4b4f      	ldr	r3, [pc, #316]	@ (8005380 <SetPageState+0x17c>)
 8005242:	4003      	ands	r3, r0
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005252:	031a      	lsls	r2, r3, #12
 8005254:	4b49      	ldr	r3, [pc, #292]	@ (800537c <SetPageState+0x178>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	0299      	lsls	r1, r3, #10
 800525a:	4b49      	ldr	r3, [pc, #292]	@ (8005380 <SetPageState+0x17c>)
 800525c:	400b      	ands	r3, r1
 800525e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005262:	fbb1 f1f3 	udiv	r1, r1, r3
 8005266:	4b45      	ldr	r3, [pc, #276]	@ (800537c <SetPageState+0x178>)
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	0298      	lsls	r0, r3, #10
 800526c:	4b44      	ldr	r3, [pc, #272]	@ (8005380 <SetPageState+0x17c>)
 800526e:	4003      	ands	r3, r0
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	4413      	add	r3, r2
 8005276:	3308      	adds	r3, #8
 8005278:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005280:	031a      	lsls	r2, r3, #12
 8005282:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <SetPageState+0x178>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	0299      	lsls	r1, r3, #10
 8005288:	4b3d      	ldr	r3, [pc, #244]	@ (8005380 <SetPageState+0x17c>)
 800528a:	400b      	ands	r3, r1
 800528c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005290:	fbb1 f1f3 	udiv	r1, r1, r3
 8005294:	4b39      	ldr	r3, [pc, #228]	@ (800537c <SetPageState+0x178>)
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	0298      	lsls	r0, r3, #10
 800529a:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <SetPageState+0x17c>)
 800529c:	4003      	ands	r3, r0
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	3310      	adds	r3, #16
 80052a6:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052ae:	031a      	lsls	r2, r3, #12
 80052b0:	4b32      	ldr	r3, [pc, #200]	@ (800537c <SetPageState+0x178>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	0299      	lsls	r1, r3, #10
 80052b6:	4b32      	ldr	r3, [pc, #200]	@ (8005380 <SetPageState+0x17c>)
 80052b8:	400b      	ands	r3, r1
 80052ba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052be:	fbb1 f1f3 	udiv	r1, r1, r3
 80052c2:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <SetPageState+0x178>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	0298      	lsls	r0, r3, #10
 80052c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <SetPageState+0x17c>)
 80052ca:	4003      	ands	r3, r0
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3318      	adds	r3, #24
 80052d4:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	3b01      	subs	r3, #1
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d844      	bhi.n	8005368 <SetPageState+0x164>
 80052de:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <SetPageState+0xe0>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005317 	.word	0x08005317
 80052ec:	08005339 	.word	0x08005339
 80052f0:	08005351 	.word	0x08005351
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 80052f4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80052f8:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80052fc:	6978      	ldr	r0, [r7, #20]
 80052fe:	f000 f8d5 	bl	80054ac <FI_WriteDoubleWord>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005308:	2302      	movs	r3, #2
 800530a:	e033      	b.n	8005374 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <SetPageState+0x180>)
 8005312:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005314:	e02d      	b.n	8005372 <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005316:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800531a:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f000 f8c4 	bl	80054ac <FI_WriteDoubleWord>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 800532a:	2302      	movs	r3, #2
 800532c:	e022      	b.n	8005374 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <SetPageState+0x180>)
 8005334:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005336:	e01c      	b.n	8005372 <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005338:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800533c:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f8b3 	bl	80054ac <FI_WriteDoubleWord>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00f      	beq.n	800536c <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 800534c:	2302      	movs	r3, #2
 800534e:	e011      	b.n	8005374 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 8005350:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005354:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	f000 f8a7 	bl	80054ac <FI_WriteDoubleWord>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 8005364:	2302      	movs	r3, #2
 8005366:	e005      	b.n	8005374 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 8005368:	bf00      	nop
 800536a:	e002      	b.n	8005372 <SetPageState+0x16e>
    break;
 800536c:	bf00      	nop
 800536e:	e000      	b.n	8005372 <SetPageState+0x16e>
    break;
 8005370:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	1fff75e0 	.word	0x1fff75e0
 8005380:	001ffc00 	.word	0x001ffc00
 8005384:	200003a6 	.word	0x200003a6

08005388 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 8005388:	b480      	push	{r7}
 800538a:	b08b      	sub	sp, #44	@ 0x2c
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3308      	adds	r3, #8
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3310      	adds	r3, #16
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3318      	adds	r3, #24
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 80053ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	bf08      	it	eq
 80053f8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80053fc:	d001      	beq.n	8005402 <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 80053fe:	2304      	movs	r3, #4
 8005400:	e01e      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 8005402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	bf08      	it	eq
 800540c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005410:	d001      	beq.n	8005416 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 8005412:	2303      	movs	r3, #3
 8005414:	e014      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	bf08      	it	eq
 8005420:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005424:	d001      	beq.n	800542a <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005426:	2302      	movs	r3, #2
 8005428:	e00a      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800542a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	bf08      	it	eq
 8005434:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005438:	d001      	beq.n	800543e <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	372c      	adds	r7, #44	@ 0x2c
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8005450:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005454:	f7fe fa9a 	bl	800398c <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8005458:	f248 0105 	movw	r1, #32773	@ 0x8005
 800545c:	4804      	ldr	r0, [pc, #16]	@ (8005470 <ConfigureCrc+0x24>)
 800545e:	f7fe fad1 	bl	8003a04 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 8005462:	2108      	movs	r1, #8
 8005464:	4802      	ldr	r0, [pc, #8]	@ (8005470 <ConfigureCrc+0x24>)
 8005466:	f7fe faba 	bl	80039de <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023000 	.word	0x40023000

08005474 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 8005480:	4809      	ldr	r0, [pc, #36]	@ (80054a8 <CalculateCrc+0x34>)
 8005482:	f7fe fa9c 	bl	80039be <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4807      	ldr	r0, [pc, #28]	@ (80054a8 <CalculateCrc+0x34>)
 800548a:	f7fe fac9 	bl	8003a20 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	4619      	mov	r1, r3
 8005492:	4805      	ldr	r0, [pc, #20]	@ (80054a8 <CalculateCrc+0x34>)
 8005494:	f7fe fad2 	bl	8003a3c <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 8005498:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <CalculateCrc+0x34>)
 800549a:	f7fe fae0 	bl	8003a5e <LL_CRC_ReadData16>
 800549e:	4603      	mov	r3, r0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40023000 	.word	0x40023000

080054ac <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80054b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	2001      	movs	r0, #1
 80054c0:	f008 f9b4 	bl	800d82c <HAL_FLASH_Program>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80054e2:	2302      	movs	r3, #2
 80054e4:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 80054ee:	f107 020c 	add.w	r2, r7, #12
 80054f2:	f107 0310 	add.w	r3, r7, #16
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f008 faab 	bl	800da54 <HAL_FLASHEx_Erase>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005508:	8bfb      	ldrh	r3, [r7, #30]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005522:	2302      	movs	r3, #2
 8005524:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005526:	887b      	ldrh	r3, [r7, #2]
 8005528:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4618      	mov	r0, r3
 8005534:	f008 fade 	bl	800daf4 <HAL_FLASHEx_Erase_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 8005542:	8afb      	ldrh	r3, [r7, #22]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8005550:	4b0e      	ldr	r3, [pc, #56]	@ (800558c <FI_CacheFlush+0x40>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0d      	ldr	r2, [pc, #52]	@ (800558c <FI_CacheFlush+0x40>)
 8005556:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800555a:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 800555c:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <FI_CacheFlush+0x40>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <FI_CacheFlush+0x40>)
 8005562:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b08      	ldr	r3, [pc, #32]	@ (800558c <FI_CacheFlush+0x40>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a07      	ldr	r2, [pc, #28]	@ (800558c <FI_CacheFlush+0x40>)
 800556e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005572:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005574:	4b05      	ldr	r3, [pc, #20]	@ (800558c <FI_CacheFlush+0x40>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a04      	ldr	r2, [pc, #16]	@ (800558c <FI_CacheFlush+0x40>)
 800557a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	58004000 	.word	0x58004000

08005590 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 8005594:	2300      	movs	r3, #0
#endif
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80055a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	f023 0218 	bic.w	r2, r3, #24
 80055b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055f0:	68fb      	ldr	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005608:	f000 f834 	bl	8005674 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	@ (8005658 <serialOut+0x58>)
 8005610:	4912      	ldr	r1, [pc, #72]	@ (800565c <serialOut+0x5c>)
 8005612:	4813      	ldr	r0, [pc, #76]	@ (8005660 <serialOut+0x60>)
 8005614:	f00e fc10 	bl	8013e38 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005618:	4811      	ldr	r0, [pc, #68]	@ (8005660 <serialOut+0x60>)
 800561a:	f7fa fe11 	bl	8000240 <strlen>
 800561e:	4603      	mov	r3, r0
 8005620:	b29a      	uxth	r2, r3
 8005622:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005626:	490e      	ldr	r1, [pc, #56]	@ (8005660 <serialOut+0x60>)
 8005628:	480e      	ldr	r0, [pc, #56]	@ (8005664 <serialOut+0x64>)
 800562a:	f00c fcfb 	bl	8012024 <HAL_UART_Transmit>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005634:	4b0c      	ldr	r3, [pc, #48]	@ (8005668 <serialOut+0x68>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <serialOut+0x4e>
 8005640:	490a      	ldr	r1, [pc, #40]	@ (800566c <serialOut+0x6c>)
 8005642:	480b      	ldr	r0, [pc, #44]	@ (8005670 <serialOut+0x70>)
 8005644:	f00e fbf8 	bl	8013e38 <siprintf>
 8005648:	4809      	ldr	r0, [pc, #36]	@ (8005670 <serialOut+0x70>)
 800564a:	f7ff ffd9 	bl	8005600 <serialOut>
  }
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000a54 	.word	0x20000a54
 800565c:	08017940 	.word	0x08017940
 8005660:	20000a60 	.word	0x20000a60
 8005664:	20000444 	.word	0x20000444
 8005668:	2000000c 	.word	0x2000000c
 800566c:	08017948 	.word	0x08017948
 8005670:	20000b5c 	.word	0x20000b5c

08005674 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	2201      	movs	r2, #1
 8005694:	4619      	mov	r1, r3
 8005696:	480e      	ldr	r0, [pc, #56]	@ (80056d0 <getTimeBCD+0x5c>)
 8005698:	f00a fd4a 	bl	8010130 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	2201      	movs	r2, #1
 80056a0:	4619      	mov	r1, r3
 80056a2:	480b      	ldr	r0, [pc, #44]	@ (80056d0 <getTimeBCD+0x5c>)
 80056a4:	f00a fe4e 	bl	8010344 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80056a8:	7abb      	ldrb	r3, [r7, #10]
 80056aa:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80056ac:	7a7b      	ldrb	r3, [r7, #9]
 80056ae:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80056b0:	7a3b      	ldrb	r3, [r7, #8]
 80056b2:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80056b4:	7f7a      	ldrb	r2, [r7, #29]
 80056b6:	7fb9      	ldrb	r1, [r7, #30]
 80056b8:	7ffb      	ldrb	r3, [r7, #31]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	460b      	mov	r3, r1
 80056be:	4905      	ldr	r1, [pc, #20]	@ (80056d4 <getTimeBCD+0x60>)
 80056c0:	4805      	ldr	r0, [pc, #20]	@ (80056d8 <getTimeBCD+0x64>)
 80056c2:	f00e fbb9 	bl	8013e38 <siprintf>
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200004e4 	.word	0x200004e4
 80056d4:	0801796c 	.word	0x0801796c
 80056d8:	20000a54 	.word	0x20000a54

080056dc <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 80056dc:	b5b0      	push	{r4, r5, r7, lr}
 80056de:	b092      	sub	sp, #72	@ 0x48
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 80056e6:	463b      	mov	r3, r7
 80056e8:	4618      	mov	r0, r3
 80056ea:	f00e fc13 	bl	8013f14 <localtime>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f107 040c 	add.w	r4, r7, #12
 80056f4:	461d      	mov	r5, r3
 80056f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800571a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800571e:	2200      	movs	r2, #0
 8005720:	4619      	mov	r1, r3
 8005722:	4826      	ldr	r0, [pc, #152]	@ (80057bc <writeRTC+0xe0>)
 8005724:	f00a fc40 	bl	800ffa8 <HAL_RTC_SetTime>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <writeRTC+0xe4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <writeRTC+0x6c>
 800573a:	4922      	ldr	r1, [pc, #136]	@ (80057c4 <writeRTC+0xe8>)
 800573c:	4822      	ldr	r0, [pc, #136]	@ (80057c8 <writeRTC+0xec>)
 800573e:	f00e fb7b 	bl	8013e38 <siprintf>
 8005742:	4821      	ldr	r0, [pc, #132]	@ (80057c8 <writeRTC+0xec>)
 8005744:	f7ff ff5c 	bl	8005600 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <writeRTC+0x76>
 800574e:	2307      	movs	r3, #7
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3301      	adds	r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	3b64      	subs	r3, #100	@ 0x64
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800577a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800577e:	2200      	movs	r2, #0
 8005780:	4619      	mov	r1, r3
 8005782:	480e      	ldr	r0, [pc, #56]	@ (80057bc <writeRTC+0xe0>)
 8005784:	f00a fd30 	bl	80101e8 <HAL_RTC_SetDate>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 800578e:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <writeRTC+0xe4>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <writeRTC+0xcc>
 800579a:	490c      	ldr	r1, [pc, #48]	@ (80057cc <writeRTC+0xf0>)
 800579c:	480a      	ldr	r0, [pc, #40]	@ (80057c8 <writeRTC+0xec>)
 800579e:	f00e fb4b 	bl	8013e38 <siprintf>
 80057a2:	4809      	ldr	r0, [pc, #36]	@ (80057c8 <writeRTC+0xec>)
 80057a4:	f7ff ff2c 	bl	8005600 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80057a8:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80057ac:	2100      	movs	r1, #0
 80057ae:	4803      	ldr	r0, [pc, #12]	@ (80057bc <writeRTC+0xe0>)
 80057b0:	f00a fea1 	bl	80104f6 <HAL_RTCEx_BKUPWrite>

}
 80057b4:	bf00      	nop
 80057b6:	3748      	adds	r7, #72	@ 0x48
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdb0      	pop	{r4, r5, r7, pc}
 80057bc:	200004e4 	.word	0x200004e4
 80057c0:	2000000c 	.word	0x2000000c
 80057c4:	0801797c 	.word	0x0801797c
 80057c8:	20000b5c 	.word	0x20000b5c
 80057cc:	080179a4 	.word	0x080179a4

080057d0 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b094      	sub	sp, #80	@ 0x50
 80057d4:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  struct tm tim = {0};
 80057e2:	463b      	mov	r3, r7
 80057e4:	2224      	movs	r2, #36	@ 0x24
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f00e fb8a 	bl	8013f02 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80057ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057f2:	2200      	movs	r2, #0
 80057f4:	4619      	mov	r1, r3
 80057f6:	4822      	ldr	r0, [pc, #136]	@ (8005880 <readRTC+0xb0>)
 80057f8:	f00a fc9a 	bl	8010130 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80057fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005800:	2200      	movs	r2, #0
 8005802:	4619      	mov	r1, r3
 8005804:	481e      	ldr	r0, [pc, #120]	@ (8005880 <readRTC+0xb0>)
 8005806:	f00a fd9d 	bl	8010344 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 800580a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800580e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t mm  = rtcTime.Minutes;
 8005812:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005816:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t ss  = rtcTime.Seconds;
 800581a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800581e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t d   = rtcDate.Date;
 8005822:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005826:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t m   = rtcDate.Month;
 800582a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  uint16_t y  = rtcDate.Year;
 8005832:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005836:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 800583a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800583e:	3364      	adds	r3, #100	@ 0x64
 8005840:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  tim.tm_year = yr;
 8005842:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005844:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 8005846:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800584a:	3b01      	subs	r3, #1
 800584c:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 800584e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8005852:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 8005854:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005858:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 800585a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800585e:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 8005860:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005864:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 8005866:	463b      	mov	r3, r7
 8005868:	4618      	mov	r0, r3
 800586a:	f00e fd33 	bl	80142d4 <mktime>
 800586e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

  return currentTime;
 8005872:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	3750      	adds	r7, #80	@ 0x50
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200004e4 	.word	0x200004e4

08005884 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 800588e:	2301      	movs	r3, #1
 8005890:	80fb      	strh	r3, [r7, #6]
 8005892:	e010      	b.n	80058b6 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4a0b      	ldr	r2, [pc, #44]	@ (80058c8 <LoadAllEEPROM+0x44>)
 800589a:	441a      	add	r2, r3
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fe73 	bl	800458c <EE_ReadVariable32bits>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	3301      	adds	r3, #1
 80058b4:	80fb      	strh	r3, [r7, #6]
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	2b32      	cmp	r3, #50	@ 0x32
 80058ba:	d9eb      	bls.n	8005894 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 80058bc:	88bb      	ldrh	r3, [r7, #4]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000984 	.word	0x20000984

080058cc <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 80058dc:	f007 ffea 	bl	800d8b4 <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <StoreEEPROM+0x88>)
 80058e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80058e6:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 80058e8:	bf00      	nop
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <StoreEEPROM+0x88>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f6:	d0f8      	beq.n	80058ea <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 80058f8:	bf00      	nop
 80058fa:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <StoreEEPROM+0x8c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d0fb      	beq.n	80058fa <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fe64 	bl	80045d6 <EE_WriteVariable32bits>
 800590e:	4603      	mov	r3, r0
 8005910:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 8005912:	463a      	mov	r2, r7
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fe37 	bl	800458c <EE_ReadVariable32bits>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	89fb      	ldrh	r3, [r7, #14]
 8005924:	4313      	orrs	r3, r2
 8005926:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <StoreEEPROM+0x7a>
 8005932:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <StoreEEPROM+0x8c>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f7fe fefa 	bl	8004730 <EE_CleanUp_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	4313      	orrs	r3, r2
 8005944:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005946:	f007 ffd7 	bl	800d8f8 <HAL_FLASH_Lock>

  return eeStatus;
 800594a:	89fb      	ldrh	r3, [r7, #14]

    */



}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	58004000 	.word	0x58004000
 8005958:	20000980 	.word	0x20000980

0800595c <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d82f      	bhi.n	80059cc <switchLedOn+0x70>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <switchLedOn+0x18>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005985 	.word	0x08005985
 8005978:	08005997 	.word	0x08005997
 800597c:	080059a9 	.word	0x080059a9
 8005980:	080059bb 	.word	0x080059bb
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_SET);
 8005984:	4b14      	ldr	r3, [pc, #80]	@ (80059d8 <switchLedOn+0x7c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a14      	ldr	r2, [pc, #80]	@ (80059dc <switchLedOn+0x80>)
 800598a:	8811      	ldrh	r1, [r2, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	4618      	mov	r0, r3
 8005990:	f008 faee 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 8005994:	e01b      	b.n	80059ce <switchLedOn+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_SET);
 8005996:	4b12      	ldr	r3, [pc, #72]	@ (80059e0 <switchLedOn+0x84>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a12      	ldr	r2, [pc, #72]	@ (80059e4 <switchLedOn+0x88>)
 800599c:	8811      	ldrh	r1, [r2, #0]
 800599e:	2201      	movs	r2, #1
 80059a0:	4618      	mov	r0, r3
 80059a2:	f008 fae5 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 80059a6:	e012      	b.n	80059ce <switchLedOn+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_SET);
 80059a8:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <switchLedOn+0x8c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0f      	ldr	r2, [pc, #60]	@ (80059ec <switchLedOn+0x90>)
 80059ae:	8811      	ldrh	r1, [r2, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	4618      	mov	r0, r3
 80059b4:	f008 fadc 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 80059b8:	e009      	b.n	80059ce <switchLedOn+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_SET);
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <switchLedOn+0x94>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a0d      	ldr	r2, [pc, #52]	@ (80059f4 <switchLedOn+0x98>)
 80059c0:	8811      	ldrh	r1, [r2, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f008 fad3 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 80059ca:	e000      	b.n	80059ce <switchLedOn+0x72>
      default: break;
 80059cc:	bf00      	nop
  }
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000ce8 	.word	0x20000ce8
 80059dc:	20000ce6 	.word	0x20000ce6
 80059e0:	20000cf0 	.word	0x20000cf0
 80059e4:	20000cec 	.word	0x20000cec
 80059e8:	20000cf8 	.word	0x20000cf8
 80059ec:	20000cf4 	.word	0x20000cf4
 80059f0:	20000d00 	.word	0x20000d00
 80059f4:	20000cfc 	.word	0x20000cfc

080059f8 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d82f      	bhi.n	8005a68 <switchLedOff+0x70>
 8005a08:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <switchLedOff+0x18>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a33 	.word	0x08005a33
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	08005a57 	.word	0x08005a57
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_RESET);
 8005a20:	4b14      	ldr	r3, [pc, #80]	@ (8005a74 <switchLedOff+0x7c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a14      	ldr	r2, [pc, #80]	@ (8005a78 <switchLedOff+0x80>)
 8005a26:	8811      	ldrh	r1, [r2, #0]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f008 faa0 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 8005a30:	e01b      	b.n	8005a6a <switchLedOff+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_RESET);
 8005a32:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <switchLedOff+0x84>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <switchLedOff+0x88>)
 8005a38:	8811      	ldrh	r1, [r2, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f008 fa97 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 8005a42:	e012      	b.n	8005a6a <switchLedOff+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_RESET);
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <switchLedOff+0x8c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0f      	ldr	r2, [pc, #60]	@ (8005a88 <switchLedOff+0x90>)
 8005a4a:	8811      	ldrh	r1, [r2, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f008 fa8e 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 8005a54:	e009      	b.n	8005a6a <switchLedOff+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_RESET);
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <switchLedOff+0x94>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a90 <switchLedOff+0x98>)
 8005a5c:	8811      	ldrh	r1, [r2, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f008 fa85 	bl	800df70 <HAL_GPIO_WritePin>
          break;
 8005a66:	e000      	b.n	8005a6a <switchLedOff+0x72>
      default: break;
 8005a68:	bf00      	nop
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000ce8 	.word	0x20000ce8
 8005a78:	20000ce6 	.word	0x20000ce6
 8005a7c:	20000cf0 	.word	0x20000cf0
 8005a80:	20000cec 	.word	0x20000cec
 8005a84:	20000cf8 	.word	0x20000cf8
 8005a88:	20000cf4 	.word	0x20000cf4
 8005a8c:	20000d00 	.word	0x20000d00
 8005a90:	20000cfc 	.word	0x20000cfc

08005a94 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
  // BUTTON2_PIN    = GPIO_PIN_10 Port B
  // CAN1_INT1_Pin  = GPIO_PIN_10 Port A



  if(GPIO_Pin == CAN1_INT_Pin){
 8005a9e:	4b39      	ldr	r3, [pc, #228]	@ (8005b84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d068      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8005aa8:	4b37      	ldr	r3, [pc, #220]	@ (8005b88 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d103      	bne.n	8005aba <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8005ab2:	4b36      	ldr	r3, [pc, #216]	@ (8005b8c <HAL_GPIO_EXTI_Callback+0xf8>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON3_Pin){

  }else if(GPIO_Pin == BUTTON4_Pin){

  }
}
 8005ab8:	e05f      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8005aba:	4b35      	ldr	r3, [pc, #212]	@ (8005b90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d11c      	bne.n	8005afe <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8005ac4:	4b33      	ldr	r3, [pc, #204]	@ (8005b94 <HAL_GPIO_EXTI_Callback+0x100>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a31      	ldr	r2, [pc, #196]	@ (8005b90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f008 fa36 	bl	800df40 <HAL_GPIO_ReadPin>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b98 <HAL_GPIO_EXTI_Callback+0x104>)
 8005ae4:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8005b98 <HAL_GPIO_EXTI_Callback+0x104>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_EXTI_Callback+0x62>
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7ff ff34 	bl	800595c <switchLedOn>
}
 8005af4:	e041      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
     else switchLedOff(VCU_RX_LED);
 8005af6:	2000      	movs	r0, #0
 8005af8:	f7ff ff7e 	bl	80059f8 <switchLedOff>
}
 8005afc:	e03d      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <HAL_GPIO_EXTI_Callback+0x108>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d038      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005b08:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d103      	bne.n	8005b1a <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8005b12:	4b24      	ldr	r3, [pc, #144]	@ (8005ba4 <HAL_GPIO_EXTI_Callback+0x110>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
}
 8005b18:	e02f      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005b1a:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d11c      	bne.n	8005b5e <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005b24:	4b21      	ldr	r3, [pc, #132]	@ (8005bac <HAL_GPIO_EXTI_Callback+0x118>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f008 fa06 	bl	800df40 <HAL_GPIO_ReadPin>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b44:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005b46:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_EXTI_Callback+0xc2>
 8005b4e:	2001      	movs	r0, #1
 8005b50:	f7ff ff04 	bl	800595c <switchLedOn>
}
 8005b54:	e011      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
    else switchLedOff(MCU_RX_LED);
 8005b56:	2001      	movs	r0, #1
 8005b58:	f7ff ff4e 	bl	80059f8 <switchLedOff>
}
 8005b5c:	e00d      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005b5e:	4b15      	ldr	r3, [pc, #84]	@ (8005bb4 <HAL_GPIO_EXTI_Callback+0x120>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d008      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005b68:	4b13      	ldr	r3, [pc, #76]	@ (8005bb8 <HAL_GPIO_EXTI_Callback+0x124>)
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON3_Pin){
 8005b72:	4b12      	ldr	r3, [pc, #72]	@ (8005bbc <HAL_GPIO_EXTI_Callback+0x128>)
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	429a      	cmp	r2, r3
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000c56 	.word	0x20000c56
 8005b88:	20000c5e 	.word	0x20000c5e
 8005b8c:	20000d1f 	.word	0x20000d1f
 8005b90:	20000c66 	.word	0x20000c66
 8005b94:	20000c68 	.word	0x20000c68
 8005b98:	20000d1e 	.word	0x20000d1e
 8005b9c:	20000c74 	.word	0x20000c74
 8005ba0:	20000c7e 	.word	0x20000c7e
 8005ba4:	20000d1d 	.word	0x20000d1d
 8005ba8:	20000c86 	.word	0x20000c86
 8005bac:	20000c88 	.word	0x20000c88
 8005bb0:	20000d1c 	.word	0x20000d1c
 8005bb4:	20000cc4 	.word	0x20000cc4
 8005bb8:	20000cce 	.word	0x20000cce
 8005bbc:	20000cd6 	.word	0x20000cd6

08005bc0 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d140      	bne.n	8005c56 <HAL_TIM_PeriodElapsedCallback+0x96>
    // last contact timer overflow
    etTimerOverflows++;
 8005bd4:	4b23      	ldr	r3, [pc, #140]	@ (8005c64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	4a22      	ldr	r2, [pc, #136]	@ (8005c64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005bdc:	6013      	str	r3, [r2, #0]
    decSec++;
 8005bde:	4b22      	ldr	r3, [pc, #136]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b20      	ldr	r3, [pc, #128]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005be8:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8005bea:	4b1f      	ldr	r3, [pc, #124]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b0a      	cmp	r3, #10
 8005bf0:	d117      	bne.n	8005c22 <HAL_TIM_PeriodElapsedCallback+0x62>
      decSec = 0;
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]

      if(hwPlatform == PLATFORM_NUCLEO){
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c6c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d108      	bne.n	8005c12 <HAL_TIM_PeriodElapsedCallback+0x52>
        HAL_GPIO_TogglePin(LED3_GPIO_Port,  LED3_Pin);
 8005c00:	4b1b      	ldr	r3, [pc, #108]	@ (8005c70 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	@ (8005c74 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005c06:	8812      	ldrh	r2, [r2, #0]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f008 f9c8 	bl	800dfa0 <HAL_GPIO_TogglePin>
 8005c10:	e007      	b.n	8005c22 <HAL_TIM_PeriodElapsedCallback+0x62>
      } else {
        // PLATFORM_MODBATT
        HAL_GPIO_TogglePin(LED4_GPIO_Port,  LED4_Pin);
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a19      	ldr	r2, [pc, #100]	@ (8005c7c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f008 f9bf 	bl	800dfa0 <HAL_GPIO_TogglePin>
      }
    }
    if((decSec % 2) == 0) sendMaxState = 1;
 8005c22:	4b11      	ldr	r3, [pc, #68]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_TIM_PeriodElapsedCallback+0x76>
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
    if((decSec % 5) == 0) sendState = 1;
 8005c36:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	0899      	lsrs	r1, r3, #2
 8005c42:	460b      	mov	r3, r1
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_TIM_PeriodElapsedCallback+0x96>
 8005c50:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200005d0 	.word	0x200005d0
 8005c64:	20000d20 	.word	0x20000d20
 8005c68:	20000d24 	.word	0x20000d24
 8005c6c:	20000a50 	.word	0x20000a50
 8005c70:	20000cf8 	.word	0x20000cf8
 8005c74:	20000cf4 	.word	0x20000cf4
 8005c78:	20000d00 	.word	0x20000d00
 8005c7c:	20000cfc 	.word	0x20000cfc
 8005c80:	20000d25 	.word	0x20000d25
 8005c84:	cccccccd 	.word	0xcccccccd
 8005c88:	20000d26 	.word	0x20000d26

08005c8c <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005c96:	f007 fe0d 	bl	800d8b4 <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005c9a:	492f      	ldr	r1, [pc, #188]	@ (8005d58 <eepromDefaults+0xcc>)
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f7fe fc9a 	bl	80045d6 <EE_WriteVariable32bits>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <eepromDefaults+0x3e>
 8005cb6:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <eepromDefaults+0xd0>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f7fe fd38 	bl	8004730 <EE_CleanUp_IT>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005cca:	bf00      	nop
 8005ccc:	4b23      	ldr	r3, [pc, #140]	@ (8005d5c <eepromDefaults+0xd0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1fb      	bne.n	8005ccc <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 8005cd4:	4922      	ldr	r1, [pc, #136]	@ (8005d60 <eepromDefaults+0xd4>)
 8005cd6:	2002      	movs	r0, #2
 8005cd8:	f7fe fc7d 	bl	80045d6 <EE_WriteVariable32bits>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	461a      	mov	r2, r3
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <eepromDefaults+0x78>
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d5c <eepromDefaults+0xd0>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	f7fe fd1b 	bl	8004730 <EE_CleanUp_IT>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d04:	bf00      	nop
 8005d06:	4b15      	ldr	r3, [pc, #84]	@ (8005d5c <eepromDefaults+0xd0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1fb      	bne.n	8005d06 <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 8005d0e:	2100      	movs	r1, #0
 8005d10:	2003      	movs	r0, #3
 8005d12:	f7fe fc60 	bl	80045d6 <EE_WriteVariable32bits>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <eepromDefaults+0xb2>
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <eepromDefaults+0xd0>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f7fe fcfe 	bl	8004730 <EE_CleanUp_IT>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d3e:	bf00      	nop
 8005d40:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <eepromDefaults+0xd0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1fb      	bne.n	8005d40 <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005d48:	f007 fdd6 	bl	800d8f8 <HAL_FLASH_Lock>

  return eeStatus;
 8005d4c:	88fb      	ldrh	r3, [r7, #6]

}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	50616c61 	.word	0x50616c61
 8005d5c:	20000980 	.word	0x20000980
 8005d60:	746f7621 	.word	0x746f7621

08005d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d6e:	f007 fae5 	bl	800d33c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d72:	f000 f8bb 	bl	8005eec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005d76:	f000 f925 	bl	8005fc4 <PeriphCommonClock_Config>
  // FLASH STUFF WAS HERE

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d7a:	f000 fb67 	bl	800644c <MX_GPIO_Init>
  MX_SPI1_Init();
 8005d7e:	f000 fa13 	bl	80061a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005d82:	f000 fa4f 	bl	8006224 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005d86:	f000 f987 	bl	8006098 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005d8a:	f000 fb37 	bl	80063fc <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005d8e:	f000 f9cf 	bl	8006130 <MX_PKA_Init>
  MX_RTC_Init();
 8005d92:	f000 f9e1 	bl	8006158 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005d96:	f000 f933 	bl	8006000 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005d9a:	f000 fa81 	bl	80062a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2100      	movs	r1, #0
 8005da2:	2004      	movs	r0, #4
 8005da4:	f007 fc4f 	bl	800d646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005da8:	2004      	movs	r0, #4
 8005daa:	f007 fc66 	bl	800d67a <HAL_NVIC_EnableIRQ>

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005dae:	f007 fd81 	bl	800d8b4 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005db2:	4b45      	ldr	r3, [pc, #276]	@ (8005ec8 <main+0x164>)
 8005db4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005db8:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005dba:	bf00      	nop
 8005dbc:	4b42      	ldr	r3, [pc, #264]	@ (8005ec8 <main+0x164>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc8:	d0f8      	beq.n	8005dbc <main+0x58>

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005dca:	4b40      	ldr	r3, [pc, #256]	@ (8005ecc <main+0x168>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <main+0x8a>
  {
    // System reset comes from a power-on reset: Forced Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f7fd fe4d 	bl	8003a78 <EE_Init>
 8005dde:	4603      	mov	r3, r0
 8005de0:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <main+0xb8>
 8005de8:	f000 ffbe 	bl	8006d68 <Error_Handler>
 8005dec:	e016      	b.n	8005e1c <main+0xb8>
  }
  else
  {
    // Clear the Standby flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005dee:	4b37      	ldr	r3, [pc, #220]	@ (8005ecc <main+0x168>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Check and Clear the Wakeup flag
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005df6:	4b35      	ldr	r3, [pc, #212]	@ (8005ecc <main+0x168>)
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <main+0xa4>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005e02:	4b32      	ldr	r3, [pc, #200]	@ (8005ecc <main+0x168>)
 8005e04:	2204      	movs	r2, #4
 8005e06:	619a      	str	r2, [r3, #24]
    }
    // System reset comes from a STANDBY wakeup: Conditional Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005e08:	2001      	movs	r0, #1
 8005e0a:	f7fd fe35 	bl	8003a78 <EE_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <main+0xb8>
 8005e18:	f000 ffa6 	bl	8006d68 <Error_Handler>
  }

  // Load EEPROM
  LoadAllEEPROM();
 8005e1c:	f7ff fd32 	bl	8005884 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005e20:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed0 <main+0x16c>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed4 <main+0x170>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d104      	bne.n	8005e34 <main+0xd0>
 8005e2a:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <main+0x16c>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <main+0x174>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d005      	beq.n	8005e40 <main+0xdc>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005e34:	f7ff ff2a 	bl	8005c8c <eepromDefaults>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005e3c:	f7ff fd22 	bl	8005884 <LoadAllEEPROM>
  }
  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005e40:	f007 fd5a 	bl	800d8f8 <HAL_FLASH_Lock>
  // Enable Battery Charger
  //HAL_GPIO_WritePin(BAT_CHRG_EN_GPIO_Port,  BAT_CHRG_EN_Pin , GPIO_PIN_RESET);


  // Cycle LED's
  switchLedOn(VCU_RX_LED);
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7ff fd89 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e4a:	20fa      	movs	r0, #250	@ 0xfa
 8005e4c:	f007 fafc 	bl	800d448 <HAL_Delay>
  switchLedOff(VCU_RX_LED);
 8005e50:	2000      	movs	r0, #0
 8005e52:	f7ff fdd1 	bl	80059f8 <switchLedOff>
  switchLedOn(MCU_RX_LED);
 8005e56:	2001      	movs	r0, #1
 8005e58:	f7ff fd80 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e5c:	20fa      	movs	r0, #250	@ 0xfa
 8005e5e:	f007 faf3 	bl	800d448 <HAL_Delay>
  switchLedOff(MCU_RX_LED);
 8005e62:	2001      	movs	r0, #1
 8005e64:	f7ff fdc8 	bl	80059f8 <switchLedOff>
  switchLedOn(MCU2_RX_LED);
 8005e68:	2002      	movs	r0, #2
 8005e6a:	f7ff fd77 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e6e:	20fa      	movs	r0, #250	@ 0xfa
 8005e70:	f007 faea 	bl	800d448 <HAL_Delay>
  switchLedOff(MCU2_RX_LED);
 8005e74:	2002      	movs	r0, #2
 8005e76:	f7ff fdbf 	bl	80059f8 <switchLedOff>
  switchLedOn(HBEAT_LED);
 8005e7a:	2003      	movs	r0, #3
 8005e7c:	f7ff fd6e 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e80:	20fa      	movs	r0, #250	@ 0xfa
 8005e82:	f007 fae1 	bl	800d448 <HAL_Delay>
  switchLedOff(HBEAT_LED);
 8005e86:	2003      	movs	r0, #3
 8005e88:	f7ff fdb6 	bl	80059f8 <switchLedOff>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005e8c:	4813      	ldr	r0, [pc, #76]	@ (8005edc <main+0x178>)
 8005e8e:	f00a ffc9 	bl	8010e24 <HAL_TIM_Base_Start_IT>

  // Enable CAN Clock
  HAL_GPIO_WritePin(CAN_CLK_EN_GPIO_Port,  CAN_CLK_EN_Pin , GPIO_PIN_SET);
 8005e92:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <main+0x17c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <main+0x180>)
 8005e98:	8811      	ldrh	r1, [r2, #0]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f008 f867 	bl	800df70 <HAL_GPIO_WritePin>

  // Reset CAN interfaces
  DRV_CANFDSPI_Reset(CAN1);
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fb f8a0 	bl	8000fe8 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN2);
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f7fb f89d 	bl	8000fe8 <DRV_CANFDSPI_Reset>

  if(hwPlatform==PLATFORM_MODBATT){
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <main+0x184>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d102      	bne.n	8005ebc <main+0x158>
    DRV_CANFDSPI_Reset(CAN3);
 8005eb6:	2002      	movs	r0, #2
 8005eb8:	f7fb f896 	bl	8000fe8 <DRV_CANFDSPI_Reset>
  }
  PCU_Initialize();
 8005ebc:	f000 ff64 	bl	8006d88 <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005ec0:	f001 f92e 	bl	8007120 <PCU_Tasks>
 8005ec4:	e7fc      	b.n	8005ec0 <main+0x15c>
 8005ec6:	bf00      	nop
 8005ec8:	58004000 	.word	0x58004000
 8005ecc:	58000400 	.word	0x58000400
 8005ed0:	20000984 	.word	0x20000984
 8005ed4:	50616c61 	.word	0x50616c61
 8005ed8:	746f7621 	.word	0x746f7621
 8005edc:	200005d0 	.word	0x200005d0
 8005ee0:	20000d10 	.word	0x20000d10
 8005ee4:	20000d0c 	.word	0x20000d0c
 8005ee8:	20000a50 	.word	0x20000a50

08005eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b09a      	sub	sp, #104	@ 0x68
 8005ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ef2:	f107 0320 	add.w	r3, r7, #32
 8005ef6:	2248      	movs	r2, #72	@ 0x48
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00e f801 	bl	8013f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	609a      	str	r2, [r3, #8]
 8005f0a:	60da      	str	r2, [r3, #12]
 8005f0c:	611a      	str	r2, [r3, #16]
 8005f0e:	615a      	str	r2, [r3, #20]
 8005f10:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005f12:	f008 f9cd 	bl	800e2b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005f16:	2010      	movs	r0, #16
 8005f18:	f7ff fb42 	bl	80055a0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <SystemClock_Config+0xd4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f24:	4a26      	ldr	r2, [pc, #152]	@ (8005fc0 <SystemClock_Config+0xd4>)
 8005f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <SystemClock_Config+0xd4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005f38:	2307      	movs	r3, #7
 8005f3a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f42:	2301      	movs	r3, #1
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f4c:	2340      	movs	r3, #64	@ 0x40
 8005f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f50:	2302      	movs	r3, #2
 8005f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f54:	2303      	movs	r3, #3
 8005f56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005f58:	2310      	movs	r3, #16
 8005f5a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005f6a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f72:	f107 0320 	add.w	r3, r7, #32
 8005f76:	4618      	mov	r0, r3
 8005f78:	f008 fd2e 	bl	800e9d8 <HAL_RCC_OscConfig>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005f82:	f000 fef1 	bl	8006d68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005f86:	236f      	movs	r3, #111	@ 0x6f
 8005f88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005f9a:	2380      	movs	r3, #128	@ 0x80
 8005f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f009 f88a 	bl	800f0c0 <HAL_RCC_ClockConfig>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005fb2:	f000 fed9 	bl	8006d68 <Error_Handler>
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3768      	adds	r7, #104	@ 0x68
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	58000400 	.word	0x58000400

08005fc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b094      	sub	sp, #80	@ 0x50
 8005fc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fca:	463b      	mov	r3, r7
 8005fcc:	2250      	movs	r2, #80	@ 0x50
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00d ff96 	bl	8013f02 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fda:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f009 fca7 	bl	800f93a <HAL_RCCEx_PeriphCLKConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8005ff2:	f000 feb9 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005ff6:	bf00      	nop
 8005ff8:	3750      	adds	r7, #80	@ 0x50
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006004:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006006:	4a23      	ldr	r2, [pc, #140]	@ (8006094 <MX_LPUART1_UART_Init+0x94>)
 8006008:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800600a:	4b21      	ldr	r3, [pc, #132]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800600c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006010:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006012:	4b1f      	ldr	r3, [pc, #124]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006014:	2200      	movs	r2, #0
 8006016:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800601a:	2200      	movs	r2, #0
 800601c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800601e:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006020:	2200      	movs	r2, #0
 8006022:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006024:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006026:	220c      	movs	r2, #12
 8006028:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800602a:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800602c:	2200      	movs	r2, #0
 800602e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006030:	4b17      	ldr	r3, [pc, #92]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006032:	2200      	movs	r2, #0
 8006034:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006036:	4b16      	ldr	r3, [pc, #88]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006038:	2200      	movs	r2, #0
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800603c:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006044:	2200      	movs	r2, #0
 8006046:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006048:	4811      	ldr	r0, [pc, #68]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800604a:	f00b ff9b 	bl	8011f84 <HAL_UART_Init>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006054:	f000 fe88 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006058:	2100      	movs	r1, #0
 800605a:	480d      	ldr	r0, [pc, #52]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800605c:	f00d f88d 	bl	801317a <HAL_UARTEx_SetTxFifoThreshold>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006066:	f000 fe7f 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800606a:	2100      	movs	r1, #0
 800606c:	4808      	ldr	r0, [pc, #32]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800606e:	f00d f8c2 	bl	80131f6 <HAL_UARTEx_SetRxFifoThreshold>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006078:	f000 fe76 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800607c:	4804      	ldr	r0, [pc, #16]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800607e:	f00d f843 	bl	8013108 <HAL_UARTEx_DisableFifoMode>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006088:	f000 fe6e 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800608c:	bf00      	nop
 800608e:	bd80      	pop	{r7, pc}
 8006090:	200003b0 	.word	0x200003b0
 8006094:	40008000 	.word	0x40008000

08006098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800609c:	4b22      	ldr	r3, [pc, #136]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 800609e:	4a23      	ldr	r2, [pc, #140]	@ (800612c <MX_USART1_UART_Init+0x94>)
 80060a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060a2:	4b21      	ldr	r3, [pc, #132]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060be:	220c      	movs	r2, #12
 80060c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060c2:	4b19      	ldr	r3, [pc, #100]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060c8:	4b17      	ldr	r3, [pc, #92]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060ce:	4b16      	ldr	r3, [pc, #88]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060d4:	4b14      	ldr	r3, [pc, #80]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060da:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060dc:	2200      	movs	r2, #0
 80060de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060e0:	4811      	ldr	r0, [pc, #68]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060e2:	f00b ff4f 	bl	8011f84 <HAL_UART_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80060ec:	f000 fe3c 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060f0:	2100      	movs	r1, #0
 80060f2:	480d      	ldr	r0, [pc, #52]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060f4:	f00d f841 	bl	801317a <HAL_UARTEx_SetTxFifoThreshold>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80060fe:	f000 fe33 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006102:	2100      	movs	r1, #0
 8006104:	4808      	ldr	r0, [pc, #32]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 8006106:	f00d f876 	bl	80131f6 <HAL_UARTEx_SetRxFifoThreshold>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006110:	f000 fe2a 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006114:	4804      	ldr	r0, [pc, #16]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 8006116:	f00c fff7 	bl	8013108 <HAL_UARTEx_DisableFifoMode>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006120:	f000 fe22 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000444 	.word	0x20000444
 800612c:	40013800 	.word	0x40013800

08006130 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8006134:	4b06      	ldr	r3, [pc, #24]	@ (8006150 <MX_PKA_Init+0x20>)
 8006136:	4a07      	ldr	r2, [pc, #28]	@ (8006154 <MX_PKA_Init+0x24>)
 8006138:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 800613a:	4805      	ldr	r0, [pc, #20]	@ (8006150 <MX_PKA_Init+0x20>)
 800613c:	f008 f889 	bl	800e252 <HAL_PKA_Init>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8006146:	f000 fe0f 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200004d8 	.word	0x200004d8
 8006154:	58002000 	.word	0x58002000

08006158 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800615c:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <MX_RTC_Init+0x48>)
 800615e:	4a11      	ldr	r2, [pc, #68]	@ (80061a4 <MX_RTC_Init+0x4c>)
 8006160:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006162:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006168:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <MX_RTC_Init+0x48>)
 800616a:	227f      	movs	r2, #127	@ 0x7f
 800616c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800616e:	4b0c      	ldr	r3, [pc, #48]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006170:	22ff      	movs	r2, #255	@ 0xff
 8006172:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006174:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006176:	2200      	movs	r2, #0
 8006178:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <MX_RTC_Init+0x48>)
 800617c:	2200      	movs	r2, #0
 800617e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006182:	2200      	movs	r2, #0
 8006184:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006186:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800618c:	4804      	ldr	r0, [pc, #16]	@ (80061a0 <MX_RTC_Init+0x48>)
 800618e:	f009 fe5b 	bl	800fe48 <HAL_RTC_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006198:	f000 fde6 	bl	8006d68 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200004e4 	.word	0x200004e4
 80061a4:	40002800 	.word	0x40002800

080061a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061ac:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <MX_SPI1_Init+0x74>)
 80061ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006220 <MX_SPI1_Init+0x78>)
 80061b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061b2:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <MX_SPI1_Init+0x74>)
 80061b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80061b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061ba:	4b18      	ldr	r3, [pc, #96]	@ (800621c <MX_SPI1_Init+0x74>)
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061c0:	4b16      	ldr	r3, [pc, #88]	@ (800621c <MX_SPI1_Init+0x74>)
 80061c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80061c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <MX_SPI1_Init+0x74>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061ce:	4b13      	ldr	r3, [pc, #76]	@ (800621c <MX_SPI1_Init+0x74>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061d4:	4b11      	ldr	r3, [pc, #68]	@ (800621c <MX_SPI1_Init+0x74>)
 80061d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80061dc:	4b0f      	ldr	r3, [pc, #60]	@ (800621c <MX_SPI1_Init+0x74>)
 80061de:	2208      	movs	r2, #8
 80061e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061e2:	4b0e      	ldr	r3, [pc, #56]	@ (800621c <MX_SPI1_Init+0x74>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <MX_SPI1_Init+0x74>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <MX_SPI1_Init+0x74>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80061f4:	4b09      	ldr	r3, [pc, #36]	@ (800621c <MX_SPI1_Init+0x74>)
 80061f6:	2207      	movs	r2, #7
 80061f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80061fa:	4b08      	ldr	r3, [pc, #32]	@ (800621c <MX_SPI1_Init+0x74>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <MX_SPI1_Init+0x74>)
 8006202:	2200      	movs	r2, #0
 8006204:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006206:	4805      	ldr	r0, [pc, #20]	@ (800621c <MX_SPI1_Init+0x74>)
 8006208:	f00a f98d 	bl	8010526 <HAL_SPI_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006212:	f000 fda9 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006216:	bf00      	nop
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000508 	.word	0x20000508
 8006220:	40013000 	.word	0x40013000

08006224 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006228:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <MX_SPI2_Init+0x74>)
 800622a:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <MX_SPI2_Init+0x78>)
 800622c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006234:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006236:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006238:	2200      	movs	r2, #0
 800623a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800623c:	4b16      	ldr	r3, [pc, #88]	@ (8006298 <MX_SPI2_Init+0x74>)
 800623e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006242:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006244:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <MX_SPI2_Init+0x74>)
 800624c:	2200      	movs	r2, #0
 800624e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006250:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006256:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006258:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <MX_SPI2_Init+0x74>)
 800625a:	2200      	movs	r2, #0
 800625c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800625e:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006260:	2200      	movs	r2, #0
 8006262:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006264:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006266:	2200      	movs	r2, #0
 8006268:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626a:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <MX_SPI2_Init+0x74>)
 800626c:	2200      	movs	r2, #0
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006270:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006272:	2207      	movs	r2, #7
 8006274:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006276:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800627c:	4b06      	ldr	r3, [pc, #24]	@ (8006298 <MX_SPI2_Init+0x74>)
 800627e:	2208      	movs	r2, #8
 8006280:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006282:	4805      	ldr	r0, [pc, #20]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006284:	f00a f94f 	bl	8010526 <HAL_SPI_Init>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800628e:	f000 fd6b 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006292:	bf00      	nop
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2000056c 	.word	0x2000056c
 800629c:	40003800 	.word	0x40003800

080062a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b09c      	sub	sp, #112	@ 0x70
 80062a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	609a      	str	r2, [r3, #8]
 80062b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
 80062d0:	615a      	str	r2, [r3, #20]
 80062d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	2234      	movs	r2, #52	@ 0x34
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f00d fe11 	bl	8013f02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062e0:	4b44      	ldr	r3, [pc, #272]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062e2:	4a45      	ldr	r2, [pc, #276]	@ (80063f8 <MX_TIM1_Init+0x158>)
 80062e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80062e6:	4b43      	ldr	r3, [pc, #268]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062e8:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80062ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ee:	4b41      	ldr	r3, [pc, #260]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80062f4:	4b3f      	ldr	r3, [pc, #252]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062f6:	2263      	movs	r2, #99	@ 0x63
 80062f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062fa:	4b3e      	ldr	r3, [pc, #248]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006300:	4b3c      	ldr	r3, [pc, #240]	@ (80063f4 <MX_TIM1_Init+0x154>)
 8006302:	2200      	movs	r2, #0
 8006304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006306:	4b3b      	ldr	r3, [pc, #236]	@ (80063f4 <MX_TIM1_Init+0x154>)
 8006308:	2200      	movs	r2, #0
 800630a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800630c:	4839      	ldr	r0, [pc, #228]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800630e:	f00a fd25 	bl	8010d5c <HAL_TIM_Base_Init>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006318:	f000 fd26 	bl	8006d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800631c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006320:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006322:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006326:	4619      	mov	r1, r3
 8006328:	4832      	ldr	r0, [pc, #200]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800632a:	f00a fff3 	bl	8011314 <HAL_TIM_ConfigClockSource>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8006334:	f000 fd18 	bl	8006d68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006338:	482e      	ldr	r0, [pc, #184]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800633a:	f00a fdc1 	bl	8010ec0 <HAL_TIM_OC_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8006344:	f000 fd10 	bl	8006d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006348:	2300      	movs	r3, #0
 800634a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800634c:	2300      	movs	r3, #0
 800634e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006350:	2300      	movs	r3, #0
 8006352:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006358:	4619      	mov	r1, r3
 800635a:	4826      	ldr	r0, [pc, #152]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800635c:	f00b fcda 	bl	8011d14 <HAL_TIMEx_MasterConfigSynchronization>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8006366:	f000 fcff 	bl	8006d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800636a:	2300      	movs	r3, #0
 800636c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006372:	2300      	movs	r3, #0
 8006374:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006376:	2300      	movs	r3, #0
 8006378:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800637a:	2300      	movs	r3, #0
 800637c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800637e:	2300      	movs	r3, #0
 8006380:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006386:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800638a:	2200      	movs	r2, #0
 800638c:	4619      	mov	r1, r3
 800638e:	4819      	ldr	r0, [pc, #100]	@ (80063f4 <MX_TIM1_Init+0x154>)
 8006390:	f00a ff46 	bl	8011220 <HAL_TIM_OC_ConfigChannel>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800639a:	f000 fce5 	bl	8006d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80063bc:	2300      	movs	r3, #0
 80063be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80063c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80063ce:	2300      	movs	r3, #0
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4806      	ldr	r0, [pc, #24]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80063dc:	f00b fcfa 	bl	8011dd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80063e6:	f000 fcbf 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80063ea:	bf00      	nop
 80063ec:	3770      	adds	r7, #112	@ 0x70
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200005d0 	.word	0x200005d0
 80063f8:	40012c00 	.word	0x40012c00

080063fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006400:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006402:	4a11      	ldr	r2, [pc, #68]	@ (8006448 <MX_USB_PCD_Init+0x4c>)
 8006404:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006406:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006408:	2208      	movs	r2, #8
 800640a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800640c:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 800640e:	2202      	movs	r2, #2
 8006410:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006412:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006414:	2202      	movs	r2, #2
 8006416:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 800641a:	2200      	movs	r2, #0
 800641c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800641e:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006420:	2200      	movs	r2, #0
 8006422:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006424:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006426:	2200      	movs	r2, #0
 8006428:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 800642c:	2200      	movs	r2, #0
 800642e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006430:	4804      	ldr	r0, [pc, #16]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006432:	f007 fe0b 	bl	800e04c <HAL_PCD_Init>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800643c:	f000 fc94 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006440:	bf00      	nop
 8006442:	bd80      	pop	{r7, pc}
 8006444:	2000068c 	.word	0x2000068c
 8006448:	40006800 	.word	0x40006800

0800644c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 8006460:	4b9d      	ldr	r3, [pc, #628]	@ (80066d8 <MX_GPIO_Init+0x28c>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 81c5 	bne.w	80067f4 <MX_GPIO_Init+0x3a8>



    CAN1_INT0_Pin         = GPIO_PIN_8;
 800646a:	4b9c      	ldr	r3, [pc, #624]	@ (80066dc <MX_GPIO_Init+0x290>)
 800646c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006470:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOB;
 8006472:	4b9b      	ldr	r3, [pc, #620]	@ (80066e0 <MX_GPIO_Init+0x294>)
 8006474:	4a9b      	ldr	r2, [pc, #620]	@ (80066e4 <MX_GPIO_Init+0x298>)
 8006476:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006478:	4b9b      	ldr	r3, [pc, #620]	@ (80066e8 <MX_GPIO_Init+0x29c>)
 800647a:	2217      	movs	r2, #23
 800647c:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_9;
 800647e:	4b9b      	ldr	r3, [pc, #620]	@ (80066ec <MX_GPIO_Init+0x2a0>)
 8006480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006484:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOB;
 8006486:	4b9a      	ldr	r3, [pc, #616]	@ (80066f0 <MX_GPIO_Init+0x2a4>)
 8006488:	4a96      	ldr	r2, [pc, #600]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800648a:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 800648c:	4b99      	ldr	r3, [pc, #612]	@ (80066f4 <MX_GPIO_Init+0x2a8>)
 800648e:	2217      	movs	r2, #23
 8006490:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006492:	4b99      	ldr	r3, [pc, #612]	@ (80066f8 <MX_GPIO_Init+0x2ac>)
 8006494:	2201      	movs	r2, #1
 8006496:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 8006498:	4b98      	ldr	r3, [pc, #608]	@ (80066fc <MX_GPIO_Init+0x2b0>)
 800649a:	4a99      	ldr	r2, [pc, #612]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 800649c:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 800649e:	4b99      	ldr	r3, [pc, #612]	@ (8006704 <MX_GPIO_Init+0x2b8>)
 80064a0:	2208      	movs	r2, #8
 80064a2:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80064a4:	4b98      	ldr	r3, [pc, #608]	@ (8006708 <MX_GPIO_Init+0x2bc>)
 80064a6:	4a96      	ldr	r2, [pc, #600]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80064a8:	601a      	str	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_5;
 80064aa:	4b98      	ldr	r3, [pc, #608]	@ (800670c <MX_GPIO_Init+0x2c0>)
 80064ac:	2220      	movs	r2, #32
 80064ae:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOA;
 80064b0:	4b97      	ldr	r3, [pc, #604]	@ (8006710 <MX_GPIO_Init+0x2c4>)
 80064b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80064b6:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_4;
 80064b8:	4b96      	ldr	r3, [pc, #600]	@ (8006714 <MX_GPIO_Init+0x2c8>)
 80064ba:	2210      	movs	r2, #16
 80064bc:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOC;
 80064be:	4b96      	ldr	r3, [pc, #600]	@ (8006718 <MX_GPIO_Init+0x2cc>)
 80064c0:	4a8f      	ldr	r2, [pc, #572]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80064c2:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 80064c4:	4b95      	ldr	r3, [pc, #596]	@ (800671c <MX_GPIO_Init+0x2d0>)
 80064c6:	220a      	movs	r2, #10
 80064c8:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_5;
 80064ca:	4b95      	ldr	r3, [pc, #596]	@ (8006720 <MX_GPIO_Init+0x2d4>)
 80064cc:	2220      	movs	r2, #32
 80064ce:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80064d0:	4b94      	ldr	r3, [pc, #592]	@ (8006724 <MX_GPIO_Init+0x2d8>)
 80064d2:	4a8b      	ldr	r2, [pc, #556]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80064d4:	601a      	str	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0; //GREEN
 80064d6:	4b94      	ldr	r3, [pc, #592]	@ (8006728 <MX_GPIO_Init+0x2dc>)
 80064d8:	2201      	movs	r2, #1
 80064da:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 80064dc:	4b93      	ldr	r3, [pc, #588]	@ (800672c <MX_GPIO_Init+0x2e0>)
 80064de:	4a81      	ldr	r2, [pc, #516]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80064e0:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1; //RED
 80064e2:	4b93      	ldr	r3, [pc, #588]	@ (8006730 <MX_GPIO_Init+0x2e4>)
 80064e4:	2202      	movs	r2, #2
 80064e6:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 80064e8:	4b92      	ldr	r3, [pc, #584]	@ (8006734 <MX_GPIO_Init+0x2e8>)
 80064ea:	4a7e      	ldr	r2, [pc, #504]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80064ec:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_12;
 80064ee:	4b92      	ldr	r3, [pc, #584]	@ (8006738 <MX_GPIO_Init+0x2ec>)
 80064f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064f4:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOB;
 80064f6:	4b91      	ldr	r3, [pc, #580]	@ (800673c <MX_GPIO_Init+0x2f0>)
 80064f8:	4a7a      	ldr	r2, [pc, #488]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80064fa:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 80064fc:	4b90      	ldr	r3, [pc, #576]	@ (8006740 <MX_GPIO_Init+0x2f4>)
 80064fe:	2228      	movs	r2, #40	@ 0x28
 8006500:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_13;
 8006502:	4b90      	ldr	r3, [pc, #576]	@ (8006744 <MX_GPIO_Init+0x2f8>)
 8006504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006508:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOB;
 800650a:	4b8f      	ldr	r3, [pc, #572]	@ (8006748 <MX_GPIO_Init+0x2fc>)
 800650c:	4a75      	ldr	r2, [pc, #468]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800650e:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006510:	4b8e      	ldr	r3, [pc, #568]	@ (800674c <MX_GPIO_Init+0x300>)
 8006512:	2228      	movs	r2, #40	@ 0x28
 8006514:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_14;
 8006516:	4b8e      	ldr	r3, [pc, #568]	@ (8006750 <MX_GPIO_Init+0x304>)
 8006518:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800651c:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOB;
 800651e:	4b8d      	ldr	r3, [pc, #564]	@ (8006754 <MX_GPIO_Init+0x308>)
 8006520:	4a70      	ldr	r2, [pc, #448]	@ (80066e4 <MX_GPIO_Init+0x298>)
 8006522:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006524:	4b8c      	ldr	r3, [pc, #560]	@ (8006758 <MX_GPIO_Init+0x30c>)
 8006526:	2228      	movs	r2, #40	@ 0x28
 8006528:	801a      	strh	r2, [r3, #0]
    CAN1_INT_Pin          = GPIO_PIN_10;
 800652a:	4b8c      	ldr	r3, [pc, #560]	@ (800675c <MX_GPIO_Init+0x310>)
 800652c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006530:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOA;
 8006532:	4b8b      	ldr	r3, [pc, #556]	@ (8006760 <MX_GPIO_Init+0x314>)
 8006534:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006538:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800653a:	4b8a      	ldr	r3, [pc, #552]	@ (8006764 <MX_GPIO_Init+0x318>)
 800653c:	2228      	movs	r2, #40	@ 0x28
 800653e:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_0;
 8006540:	4b89      	ldr	r3, [pc, #548]	@ (8006768 <MX_GPIO_Init+0x31c>)
 8006542:	2201      	movs	r2, #1
 8006544:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOD;
 8006546:	4b89      	ldr	r3, [pc, #548]	@ (800676c <MX_GPIO_Init+0x320>)
 8006548:	4a89      	ldr	r2, [pc, #548]	@ (8006770 <MX_GPIO_Init+0x324>)
 800654a:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 800654c:	4b89      	ldr	r3, [pc, #548]	@ (8006774 <MX_GPIO_Init+0x328>)
 800654e:	2206      	movs	r2, #6
 8006550:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_1;
 8006552:	4b89      	ldr	r3, [pc, #548]	@ (8006778 <MX_GPIO_Init+0x32c>)
 8006554:	2202      	movs	r2, #2
 8006556:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOD;
 8006558:	4b88      	ldr	r3, [pc, #544]	@ (800677c <MX_GPIO_Init+0x330>)
 800655a:	4a85      	ldr	r2, [pc, #532]	@ (8006770 <MX_GPIO_Init+0x324>)
 800655c:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 800655e:	4b88      	ldr	r3, [pc, #544]	@ (8006780 <MX_GPIO_Init+0x334>)
 8006560:	2207      	movs	r2, #7
 8006562:	801a      	strh	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_5; //BLUE
 8006564:	4b87      	ldr	r3, [pc, #540]	@ (8006784 <MX_GPIO_Init+0x338>)
 8006566:	2220      	movs	r2, #32
 8006568:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOB;
 800656a:	4b87      	ldr	r3, [pc, #540]	@ (8006788 <MX_GPIO_Init+0x33c>)
 800656c:	4a5d      	ldr	r2, [pc, #372]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800656e:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006570:	2004      	movs	r0, #4
 8006572:	f7ff f82b 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006576:	2002      	movs	r0, #2
 8006578:	f7ff f828 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657c:	2001      	movs	r0, #1
 800657e:	f7ff f825 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006582:	2008      	movs	r0, #8
 8006584:	f7ff f822 	bl	80055cc <LL_AHB2_GRP1_EnableClock>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8006588:	4b5b      	ldr	r3, [pc, #364]	@ (80066f8 <MX_GPIO_Init+0x2ac>)
 800658a:	881a      	ldrh	r2, [r3, #0]
 800658c:	4b5d      	ldr	r3, [pc, #372]	@ (8006704 <MX_GPIO_Init+0x2b8>)
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	4313      	orrs	r3, r2
 8006592:	b29a      	uxth	r2, r3
 8006594:	4b62      	ldr	r3, [pc, #392]	@ (8006720 <MX_GPIO_Init+0x2d4>)
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	2200      	movs	r2, #0
 800659e:	4619      	mov	r1, r3
 80065a0:	4857      	ldr	r0, [pc, #348]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80065a2:	f007 fce5 	bl	800df70 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80065a6:	4b5a      	ldr	r3, [pc, #360]	@ (8006710 <MX_GPIO_Init+0x2c4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a58      	ldr	r2, [pc, #352]	@ (800670c <MX_GPIO_Init+0x2c0>)
 80065ac:	8811      	ldrh	r1, [r2, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f007 fcdd 	bl	800df70 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006728 <MX_GPIO_Init+0x2dc>)
 80065b8:	881a      	ldrh	r2, [r3, #0]
 80065ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006730 <MX_GPIO_Init+0x2e4>)
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	4b70      	ldr	r3, [pc, #448]	@ (8006784 <MX_GPIO_Init+0x338>)
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2200      	movs	r2, #0
 80065cc:	4619      	mov	r1, r3
 80065ce:	4845      	ldr	r0, [pc, #276]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80065d0:	f007 fcce 	bl	800df70 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin   CAN2_INT1_Pin */
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                            |CAN2_INT1_Pin;
 80065d4:	4b41      	ldr	r3, [pc, #260]	@ (80066dc <MX_GPIO_Init+0x290>)
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	4b44      	ldr	r3, [pc, #272]	@ (80066ec <MX_GPIO_Init+0x2a0>)
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b55      	ldr	r3, [pc, #340]	@ (8006738 <MX_GPIO_Init+0x2ec>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	4b56      	ldr	r3, [pc, #344]	@ (8006744 <MX_GPIO_Init+0x2f8>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	4b57      	ldr	r3, [pc, #348]	@ (8006750 <MX_GPIO_Init+0x304>)
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b29b      	uxth	r3, r3
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 80065f8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80065fa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80065fe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006600:	2301      	movs	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4836      	ldr	r0, [pc, #216]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800660a:	f007 fb29 	bl	800dc60 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
    GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 800660e:	4b3a      	ldr	r3, [pc, #232]	@ (80066f8 <MX_GPIO_Init+0x2ac>)
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	4b3c      	ldr	r3, [pc, #240]	@ (8006704 <MX_GPIO_Init+0x2b8>)
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	4b41      	ldr	r3, [pc, #260]	@ (8006720 <MX_GPIO_Init+0x2d4>)
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	b29b      	uxth	r3, r3
 8006622:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006624:	2301      	movs	r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	4619      	mov	r1, r3
 8006634:	4832      	ldr	r0, [pc, #200]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 8006636:	f007 fb13 	bl	800dc60 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_CS_Pin */
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 800663a:	4b34      	ldr	r3, [pc, #208]	@ (800670c <MX_GPIO_Init+0x2c0>)
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006640:	2301      	movs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 800664c:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <MX_GPIO_Init+0x2c4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1d3a      	adds	r2, r7, #4
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f007 fb03 	bl	800dc60 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON1_Pin */
    GPIO_InitStruct.Pin = BUTTON1_Pin;
 800665a:	4b2e      	ldr	r3, [pc, #184]	@ (8006714 <MX_GPIO_Init+0x2c8>)
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006660:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006664:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006666:	2301      	movs	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800666a:	4b2b      	ldr	r3, [pc, #172]	@ (8006718 <MX_GPIO_Init+0x2cc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1d3a      	adds	r2, r7, #4
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f007 faf4 	bl	800dc60 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8006678:	4b2b      	ldr	r3, [pc, #172]	@ (8006728 <MX_GPIO_Init+0x2dc>)
 800667a:	881a      	ldrh	r2, [r3, #0]
 800667c:	4b2c      	ldr	r3, [pc, #176]	@ (8006730 <MX_GPIO_Init+0x2e4>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	4b3f      	ldr	r3, [pc, #252]	@ (8006784 <MX_GPIO_Init+0x338>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	4313      	orrs	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800668e:	2301      	movs	r3, #1
 8006690:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4811      	ldr	r0, [pc, #68]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80066a0:	f007 fade 	bl	800dc60 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_INT_Pin */
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80066a4:	4b2d      	ldr	r3, [pc, #180]	@ (800675c <MX_GPIO_Init+0x310>)
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80066ae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80066b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006760 <MX_GPIO_Init+0x314>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	1d3a      	adds	r2, r7, #4
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f007 facf 	bl	800dc60 <HAL_GPIO_Init>

    /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
    GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80066c2:	4b29      	ldr	r3, [pc, #164]	@ (8006768 <MX_GPIO_Init+0x31c>)
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006778 <MX_GPIO_Init+0x32c>)
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80066d4:	e05a      	b.n	800678c <MX_GPIO_Init+0x340>
 80066d6:	bf00      	nop
 80066d8:	20000a50 	.word	0x20000a50
 80066dc:	20000c5e 	.word	0x20000c5e
 80066e0:	20000c60 	.word	0x20000c60
 80066e4:	48000400 	.word	0x48000400
 80066e8:	20000c64 	.word	0x20000c64
 80066ec:	20000c66 	.word	0x20000c66
 80066f0:	20000c68 	.word	0x20000c68
 80066f4:	20000c6c 	.word	0x20000c6c
 80066f8:	20000cb4 	.word	0x20000cb4
 80066fc:	20000cb8 	.word	0x20000cb8
 8006700:	48000800 	.word	0x48000800
 8006704:	20000cbc 	.word	0x20000cbc
 8006708:	20000cc0 	.word	0x20000cc0
 800670c:	20000c6e 	.word	0x20000c6e
 8006710:	20000c70 	.word	0x20000c70
 8006714:	20000cc4 	.word	0x20000cc4
 8006718:	20000cc8 	.word	0x20000cc8
 800671c:	20000ccc 	.word	0x20000ccc
 8006720:	20000c8e 	.word	0x20000c8e
 8006724:	20000c90 	.word	0x20000c90
 8006728:	20000ce6 	.word	0x20000ce6
 800672c:	20000ce8 	.word	0x20000ce8
 8006730:	20000cec 	.word	0x20000cec
 8006734:	20000cf0 	.word	0x20000cf0
 8006738:	20000c74 	.word	0x20000c74
 800673c:	20000c78 	.word	0x20000c78
 8006740:	20000c7c 	.word	0x20000c7c
 8006744:	20000c7e 	.word	0x20000c7e
 8006748:	20000c80 	.word	0x20000c80
 800674c:	20000c84 	.word	0x20000c84
 8006750:	20000c86 	.word	0x20000c86
 8006754:	20000c88 	.word	0x20000c88
 8006758:	20000c8c 	.word	0x20000c8c
 800675c:	20000c56 	.word	0x20000c56
 8006760:	20000c58 	.word	0x20000c58
 8006764:	20000c5c 	.word	0x20000c5c
 8006768:	20000cce 	.word	0x20000cce
 800676c:	20000cd0 	.word	0x20000cd0
 8006770:	48000c00 	.word	0x48000c00
 8006774:	20000cd4 	.word	0x20000cd4
 8006778:	20000cd6 	.word	0x20000cd6
 800677c:	20000cd8 	.word	0x20000cd8
 8006780:	20000cdc 	.word	0x20000cdc
 8006784:	20000cf4 	.word	0x20000cf4
 8006788:	20000cf8 	.word	0x20000cf8
 800678c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800678e:	2301      	movs	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4816      	ldr	r0, [pc, #88]	@ (80067f0 <MX_GPIO_Init+0x3a4>)
 8006798:	f007 fa62 	bl	800dc60 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	2006      	movs	r0, #6
 80067a2:	f006 ff50 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067a6:	2006      	movs	r0, #6
 80067a8:	f006 ff67 	bl	800d67a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	2007      	movs	r0, #7
 80067b2:	f006 ff48 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80067b6:	2007      	movs	r0, #7
 80067b8:	f006 ff5f 	bl	800d67a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	200a      	movs	r0, #10
 80067c2:	f006 ff40 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80067c6:	200a      	movs	r0, #10
 80067c8:	f006 ff57 	bl	800d67a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	2017      	movs	r0, #23
 80067d2:	f006 ff38 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067d6:	2017      	movs	r0, #23
 80067d8:	f006 ff4f 	bl	800d67a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80067dc:	2200      	movs	r2, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	2028      	movs	r0, #40	@ 0x28
 80067e2:	f006 ff30 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80067e6:	2028      	movs	r0, #40	@ 0x28
 80067e8:	f006 ff47 	bl	800d67a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  }
}
 80067ec:	e290      	b.n	8006d10 <MX_GPIO_Init+0x8c4>
 80067ee:	bf00      	nop
 80067f0:	48000c00 	.word	0x48000c00
    CAN1_INT_Pin          = GPIO_PIN_15;
 80067f4:	4b9d      	ldr	r3, [pc, #628]	@ (8006a6c <MX_GPIO_Init+0x620>)
 80067f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80067fa:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 80067fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006a70 <MX_GPIO_Init+0x624>)
 80067fe:	4a9d      	ldr	r2, [pc, #628]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006800:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006802:	4b9d      	ldr	r3, [pc, #628]	@ (8006a78 <MX_GPIO_Init+0x62c>)
 8006804:	2228      	movs	r2, #40	@ 0x28
 8006806:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006808:	4b9c      	ldr	r3, [pc, #624]	@ (8006a7c <MX_GPIO_Init+0x630>)
 800680a:	2240      	movs	r2, #64	@ 0x40
 800680c:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800680e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a80 <MX_GPIO_Init+0x634>)
 8006810:	4a9c      	ldr	r2, [pc, #624]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006812:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006814:	4b9c      	ldr	r3, [pc, #624]	@ (8006a88 <MX_GPIO_Init+0x63c>)
 8006816:	2217      	movs	r2, #23
 8006818:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 800681a:	4b9c      	ldr	r3, [pc, #624]	@ (8006a8c <MX_GPIO_Init+0x640>)
 800681c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006820:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 8006822:	4b9b      	ldr	r3, [pc, #620]	@ (8006a90 <MX_GPIO_Init+0x644>)
 8006824:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006828:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 800682a:	4b9a      	ldr	r3, [pc, #616]	@ (8006a94 <MX_GPIO_Init+0x648>)
 800682c:	2228      	movs	r2, #40	@ 0x28
 800682e:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 8006830:	4b99      	ldr	r3, [pc, #612]	@ (8006a98 <MX_GPIO_Init+0x64c>)
 8006832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006836:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006838:	4b98      	ldr	r3, [pc, #608]	@ (8006a9c <MX_GPIO_Init+0x650>)
 800683a:	4a8e      	ldr	r2, [pc, #568]	@ (8006a74 <MX_GPIO_Init+0x628>)
 800683c:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800683e:	4b98      	ldr	r3, [pc, #608]	@ (8006aa0 <MX_GPIO_Init+0x654>)
 8006840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006844:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006846:	4b97      	ldr	r3, [pc, #604]	@ (8006aa4 <MX_GPIO_Init+0x658>)
 8006848:	4a8e      	ldr	r2, [pc, #568]	@ (8006a84 <MX_GPIO_Init+0x638>)
 800684a:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800684c:	4b96      	ldr	r3, [pc, #600]	@ (8006aa8 <MX_GPIO_Init+0x65c>)
 800684e:	2228      	movs	r2, #40	@ 0x28
 8006850:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 8006852:	4b96      	ldr	r3, [pc, #600]	@ (8006aac <MX_GPIO_Init+0x660>)
 8006854:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006858:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 800685a:	4b95      	ldr	r3, [pc, #596]	@ (8006ab0 <MX_GPIO_Init+0x664>)
 800685c:	4a89      	ldr	r2, [pc, #548]	@ (8006a84 <MX_GPIO_Init+0x638>)
 800685e:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006860:	4b94      	ldr	r3, [pc, #592]	@ (8006ab4 <MX_GPIO_Init+0x668>)
 8006862:	2228      	movs	r2, #40	@ 0x28
 8006864:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 8006866:	4b94      	ldr	r3, [pc, #592]	@ (8006ab8 <MX_GPIO_Init+0x66c>)
 8006868:	2201      	movs	r2, #1
 800686a:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 800686c:	4b93      	ldr	r3, [pc, #588]	@ (8006abc <MX_GPIO_Init+0x670>)
 800686e:	4a94      	ldr	r2, [pc, #592]	@ (8006ac0 <MX_GPIO_Init+0x674>)
 8006870:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 8006872:	4b94      	ldr	r3, [pc, #592]	@ (8006ac4 <MX_GPIO_Init+0x678>)
 8006874:	2206      	movs	r2, #6
 8006876:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 8006878:	4b93      	ldr	r3, [pc, #588]	@ (8006ac8 <MX_GPIO_Init+0x67c>)
 800687a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800687e:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 8006880:	4b92      	ldr	r3, [pc, #584]	@ (8006acc <MX_GPIO_Init+0x680>)
 8006882:	4a80      	ldr	r2, [pc, #512]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006884:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 8006886:	4b92      	ldr	r3, [pc, #584]	@ (8006ad0 <MX_GPIO_Init+0x684>)
 8006888:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800688c:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 800688e:	4b91      	ldr	r3, [pc, #580]	@ (8006ad4 <MX_GPIO_Init+0x688>)
 8006890:	4a78      	ldr	r2, [pc, #480]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006892:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 8006894:	4b90      	ldr	r3, [pc, #576]	@ (8006ad8 <MX_GPIO_Init+0x68c>)
 8006896:	2217      	movs	r2, #23
 8006898:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 800689a:	4b90      	ldr	r3, [pc, #576]	@ (8006adc <MX_GPIO_Init+0x690>)
 800689c:	2210      	movs	r2, #16
 800689e:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80068a0:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae0 <MX_GPIO_Init+0x694>)
 80068a2:	4a74      	ldr	r2, [pc, #464]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80068a4:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80068a6:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae4 <MX_GPIO_Init+0x698>)
 80068a8:	220a      	movs	r2, #10
 80068aa:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80068ac:	4b8e      	ldr	r3, [pc, #568]	@ (8006ae8 <MX_GPIO_Init+0x69c>)
 80068ae:	2220      	movs	r2, #32
 80068b0:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 80068b2:	4b8e      	ldr	r3, [pc, #568]	@ (8006aec <MX_GPIO_Init+0x6a0>)
 80068b4:	4a6f      	ldr	r2, [pc, #444]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80068b6:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 80068b8:	4b8d      	ldr	r3, [pc, #564]	@ (8006af0 <MX_GPIO_Init+0x6a4>)
 80068ba:	2217      	movs	r2, #23
 80068bc:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 80068be:	4b8d      	ldr	r3, [pc, #564]	@ (8006af4 <MX_GPIO_Init+0x6a8>)
 80068c0:	2202      	movs	r2, #2
 80068c2:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 80068c4:	4b8c      	ldr	r3, [pc, #560]	@ (8006af8 <MX_GPIO_Init+0x6ac>)
 80068c6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ac0 <MX_GPIO_Init+0x674>)
 80068c8:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 80068ca:	4b8c      	ldr	r3, [pc, #560]	@ (8006afc <MX_GPIO_Init+0x6b0>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80068d0:	4b8b      	ldr	r3, [pc, #556]	@ (8006b00 <MX_GPIO_Init+0x6b4>)
 80068d2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80068d4:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80068d6:	4b8b      	ldr	r3, [pc, #556]	@ (8006b04 <MX_GPIO_Init+0x6b8>)
 80068d8:	2208      	movs	r2, #8
 80068da:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80068dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006b08 <MX_GPIO_Init+0x6bc>)
 80068de:	4a69      	ldr	r2, [pc, #420]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80068e0:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;      // BTN0 in Schematic, SW2 PCB
 80068e2:	4b8a      	ldr	r3, [pc, #552]	@ (8006b0c <MX_GPIO_Init+0x6c0>)
 80068e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068e8:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 80068ea:	4b89      	ldr	r3, [pc, #548]	@ (8006b10 <MX_GPIO_Init+0x6c4>)
 80068ec:	4a61      	ldr	r2, [pc, #388]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80068ee:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 80068f0:	4b88      	ldr	r3, [pc, #544]	@ (8006b14 <MX_GPIO_Init+0x6c8>)
 80068f2:	2228      	movs	r2, #40	@ 0x28
 80068f4:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;      // BTN1 in Schematic, SW3 PCB
 80068f6:	4b88      	ldr	r3, [pc, #544]	@ (8006b18 <MX_GPIO_Init+0x6cc>)
 80068f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068fc:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 80068fe:	4b87      	ldr	r3, [pc, #540]	@ (8006b1c <MX_GPIO_Init+0x6d0>)
 8006900:	4a5c      	ldr	r2, [pc, #368]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006902:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI15_10_IRQn;
 8006904:	4b86      	ldr	r3, [pc, #536]	@ (8006b20 <MX_GPIO_Init+0x6d4>)
 8006906:	2228      	movs	r2, #40	@ 0x28
 8006908:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;       // BTN2 in Schematic, SW4 PCB
 800690a:	4b86      	ldr	r3, [pc, #536]	@ (8006b24 <MX_GPIO_Init+0x6d8>)
 800690c:	2204      	movs	r2, #4
 800690e:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 8006910:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <MX_GPIO_Init+0x6dc>)
 8006912:	4a58      	ldr	r2, [pc, #352]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006914:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006916:	4b85      	ldr	r3, [pc, #532]	@ (8006b2c <MX_GPIO_Init+0x6e0>)
 8006918:	2208      	movs	r2, #8
 800691a:	801a      	strh	r2, [r3, #0]
    BUTTON4_Pin           = GPIO_PIN_5;       // NC in Schematic
 800691c:	4b84      	ldr	r3, [pc, #528]	@ (8006b30 <MX_GPIO_Init+0x6e4>)
 800691e:	2220      	movs	r2, #32
 8006920:	801a      	strh	r2, [r3, #0]
    BUTTON4_GPIO_Port     = GPIOC;
 8006922:	4b84      	ldr	r3, [pc, #528]	@ (8006b34 <MX_GPIO_Init+0x6e8>)
 8006924:	4a57      	ldr	r2, [pc, #348]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006926:	601a      	str	r2, [r3, #0]
    BUTTON4_EXTI_IRQn     = EXTI9_5_IRQn;
 8006928:	4b83      	ldr	r3, [pc, #524]	@ (8006b38 <MX_GPIO_Init+0x6ec>)
 800692a:	2217      	movs	r2, #23
 800692c:	801a      	strh	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0;       // LED_CAN1 Schematic, CAN1 PCB
 800692e:	4b83      	ldr	r3, [pc, #524]	@ (8006b3c <MX_GPIO_Init+0x6f0>)
 8006930:	2201      	movs	r2, #1
 8006932:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006934:	4b82      	ldr	r3, [pc, #520]	@ (8006b40 <MX_GPIO_Init+0x6f4>)
 8006936:	4a4f      	ldr	r2, [pc, #316]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006938:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1;       // LED_CAN2 Schematic, CAN2 PCB
 800693a:	4b82      	ldr	r3, [pc, #520]	@ (8006b44 <MX_GPIO_Init+0x6f8>)
 800693c:	2202      	movs	r2, #2
 800693e:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 8006940:	4b81      	ldr	r3, [pc, #516]	@ (8006b48 <MX_GPIO_Init+0x6fc>)
 8006942:	4a4c      	ldr	r2, [pc, #304]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006944:	601a      	str	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_4;       // LED_CAN3 Schematic, CAN3 PCB
 8006946:	4b81      	ldr	r3, [pc, #516]	@ (8006b4c <MX_GPIO_Init+0x700>)
 8006948:	2210      	movs	r2, #16
 800694a:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOE;
 800694c:	4b80      	ldr	r3, [pc, #512]	@ (8006b50 <MX_GPIO_Init+0x704>)
 800694e:	4a81      	ldr	r2, [pc, #516]	@ (8006b54 <MX_GPIO_Init+0x708>)
 8006950:	601a      	str	r2, [r3, #0]
    LED4_Pin              = GPIO_PIN_12;      // LED_HB Schematic, HB PCB
 8006952:	4b81      	ldr	r3, [pc, #516]	@ (8006b58 <MX_GPIO_Init+0x70c>)
 8006954:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006958:	801a      	strh	r2, [r3, #0]
    LED4_GPIO_Port        = GPIOB;
 800695a:	4b80      	ldr	r3, [pc, #512]	@ (8006b5c <MX_GPIO_Init+0x710>)
 800695c:	4a45      	ldr	r2, [pc, #276]	@ (8006a74 <MX_GPIO_Init+0x628>)
 800695e:	601a      	str	r2, [r3, #0]
    VDETECT_5V_Pin       = GPIO_PIN_9;
 8006960:	4b7f      	ldr	r3, [pc, #508]	@ (8006b60 <MX_GPIO_Init+0x714>)
 8006962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006966:	801a      	strh	r2, [r3, #0]
    VDETECT_5V_GPIO_Port = GPIOB;
 8006968:	4b7e      	ldr	r3, [pc, #504]	@ (8006b64 <MX_GPIO_Init+0x718>)
 800696a:	4a42      	ldr	r2, [pc, #264]	@ (8006a74 <MX_GPIO_Init+0x628>)
 800696c:	601a      	str	r2, [r3, #0]
    CAN_CLK_EN_Pin       = GPIO_PIN_15;
 800696e:	4b7e      	ldr	r3, [pc, #504]	@ (8006b68 <MX_GPIO_Init+0x71c>)
 8006970:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006974:	801a      	strh	r2, [r3, #0]
    CAN_CLK_EN_GPIO_Port = GPIOA;
 8006976:	4b7d      	ldr	r3, [pc, #500]	@ (8006b6c <MX_GPIO_Init+0x720>)
 8006978:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800697c:	601a      	str	r2, [r3, #0]
    BAT_CHRG_EN_Pin      = GPIO_PIN_4;
 800697e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b70 <MX_GPIO_Init+0x724>)
 8006980:	2210      	movs	r2, #16
 8006982:	801a      	strh	r2, [r3, #0]
    BAT_CHRG_EN_GPIO_Port= GPIOA;
 8006984:	4b7b      	ldr	r3, [pc, #492]	@ (8006b74 <MX_GPIO_Init+0x728>)
 8006986:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800698a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698c:	2001      	movs	r0, #1
 800698e:	f7fe fe1d 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006992:	2002      	movs	r0, #2
 8006994:	f7fe fe1a 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006998:	2004      	movs	r0, #4
 800699a:	f7fe fe17 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800699e:	2008      	movs	r0, #8
 80069a0:	f7fe fe14 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069a4:	2010      	movs	r0, #16
 80069a6:	f7fe fe11 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin | SPI2_CS2_Pin , GPIO_PIN_SET);
 80069aa:	4b54      	ldr	r3, [pc, #336]	@ (8006afc <MX_GPIO_Init+0x6b0>)
 80069ac:	881a      	ldrh	r2, [r3, #0]
 80069ae:	4b55      	ldr	r3, [pc, #340]	@ (8006b04 <MX_GPIO_Init+0x6b8>)
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2201      	movs	r2, #1
 80069b8:	4619      	mov	r1, r3
 80069ba:	4832      	ldr	r0, [pc, #200]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80069bc:	f007 fad8 	bl	800df70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, CAN1_CS_Pin, GPIO_PIN_SET);
 80069c0:	4b35      	ldr	r3, [pc, #212]	@ (8006a98 <MX_GPIO_Init+0x64c>)
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2201      	movs	r2, #1
 80069c6:	4619      	mov	r1, r3
 80069c8:	482a      	ldr	r0, [pc, #168]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80069ca:	f007 fad1 	bl	800df70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, CAN2_CS_Pin, GPIO_PIN_SET);
 80069ce:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac8 <MX_GPIO_Init+0x67c>)
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	4619      	mov	r1, r3
 80069d6:	482b      	ldr	r0, [pc, #172]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80069d8:	f007 faca 	bl	800df70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CAN3_CS_Pin, GPIO_PIN_SET);
 80069dc:	4b45      	ldr	r3, [pc, #276]	@ (8006af4 <MX_GPIO_Init+0x6a8>)
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	4619      	mov	r1, r3
 80069e4:	4836      	ldr	r0, [pc, #216]	@ (8006ac0 <MX_GPIO_Init+0x674>)
 80069e6:	f007 fac3 	bl	800df70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin |LED4_Pin, GPIO_PIN_RESET);
 80069ea:	4b54      	ldr	r3, [pc, #336]	@ (8006b3c <MX_GPIO_Init+0x6f0>)
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	4b55      	ldr	r3, [pc, #340]	@ (8006b44 <MX_GPIO_Init+0x6f8>)
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	4b58      	ldr	r3, [pc, #352]	@ (8006b58 <MX_GPIO_Init+0x70c>)
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2200      	movs	r2, #0
 8006a00:	4619      	mov	r1, r3
 8006a02:	481c      	ldr	r0, [pc, #112]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006a04:	f007 fab4 	bl	800df70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8006a08:	4b50      	ldr	r3, [pc, #320]	@ (8006b4c <MX_GPIO_Init+0x700>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4850      	ldr	r0, [pc, #320]	@ (8006b54 <MX_GPIO_Init+0x708>)
 8006a12:	f007 faad 	bl	800df70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BAT_CHRG_EN_Pin , GPIO_PIN_SET);
 8006a16:	4b56      	ldr	r3, [pc, #344]	@ (8006b70 <MX_GPIO_Init+0x724>)
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a22:	f007 faa5 	bl	800df70 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin =  CAN1_INT0_Pin | CAN2_INT_Pin | CAN2_INT0_Pin;
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <MX_GPIO_Init+0x630>)
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa0 <MX_GPIO_Init+0x654>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	4b1e      	ldr	r3, [pc, #120]	@ (8006aac <MX_GPIO_Init+0x660>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a3c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a40:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a42:	2301      	movs	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	480e      	ldr	r0, [pc, #56]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006a4c:	f007 f908 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN1_INT1_Pin;
 8006a50:	4b0e      	ldr	r3, [pc, #56]	@ (8006a8c <MX_GPIO_Init+0x640>)
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a5a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a68:	e086      	b.n	8006b78 <MX_GPIO_Init+0x72c>
 8006a6a:	bf00      	nop
 8006a6c:	20000c56 	.word	0x20000c56
 8006a70:	20000c58 	.word	0x20000c58
 8006a74:	48000400 	.word	0x48000400
 8006a78:	20000c5c 	.word	0x20000c5c
 8006a7c:	20000c5e 	.word	0x20000c5e
 8006a80:	20000c60 	.word	0x20000c60
 8006a84:	48000800 	.word	0x48000800
 8006a88:	20000c64 	.word	0x20000c64
 8006a8c:	20000c66 	.word	0x20000c66
 8006a90:	20000c68 	.word	0x20000c68
 8006a94:	20000c6c 	.word	0x20000c6c
 8006a98:	20000c6e 	.word	0x20000c6e
 8006a9c:	20000c70 	.word	0x20000c70
 8006aa0:	20000c74 	.word	0x20000c74
 8006aa4:	20000c78 	.word	0x20000c78
 8006aa8:	20000c7c 	.word	0x20000c7c
 8006aac:	20000c7e 	.word	0x20000c7e
 8006ab0:	20000c80 	.word	0x20000c80
 8006ab4:	20000c84 	.word	0x20000c84
 8006ab8:	20000c86 	.word	0x20000c86
 8006abc:	20000c88 	.word	0x20000c88
 8006ac0:	48000c00 	.word	0x48000c00
 8006ac4:	20000c8c 	.word	0x20000c8c
 8006ac8:	20000c8e 	.word	0x20000c8e
 8006acc:	20000c90 	.word	0x20000c90
 8006ad0:	20000c94 	.word	0x20000c94
 8006ad4:	20000c98 	.word	0x20000c98
 8006ad8:	20000c9c 	.word	0x20000c9c
 8006adc:	20000c9e 	.word	0x20000c9e
 8006ae0:	20000ca0 	.word	0x20000ca0
 8006ae4:	20000ca4 	.word	0x20000ca4
 8006ae8:	20000ca6 	.word	0x20000ca6
 8006aec:	20000ca8 	.word	0x20000ca8
 8006af0:	20000cac 	.word	0x20000cac
 8006af4:	20000cae 	.word	0x20000cae
 8006af8:	20000cb0 	.word	0x20000cb0
 8006afc:	20000cb4 	.word	0x20000cb4
 8006b00:	20000cb8 	.word	0x20000cb8
 8006b04:	20000cbc 	.word	0x20000cbc
 8006b08:	20000cc0 	.word	0x20000cc0
 8006b0c:	20000cc4 	.word	0x20000cc4
 8006b10:	20000cc8 	.word	0x20000cc8
 8006b14:	20000ccc 	.word	0x20000ccc
 8006b18:	20000cce 	.word	0x20000cce
 8006b1c:	20000cd0 	.word	0x20000cd0
 8006b20:	20000cd4 	.word	0x20000cd4
 8006b24:	20000cd6 	.word	0x20000cd6
 8006b28:	20000cd8 	.word	0x20000cd8
 8006b2c:	20000cdc 	.word	0x20000cdc
 8006b30:	20000cde 	.word	0x20000cde
 8006b34:	20000ce0 	.word	0x20000ce0
 8006b38:	20000ce4 	.word	0x20000ce4
 8006b3c:	20000ce6 	.word	0x20000ce6
 8006b40:	20000ce8 	.word	0x20000ce8
 8006b44:	20000cec 	.word	0x20000cec
 8006b48:	20000cf0 	.word	0x20000cf0
 8006b4c:	20000cf4 	.word	0x20000cf4
 8006b50:	20000cf8 	.word	0x20000cf8
 8006b54:	48001000 	.word	0x48001000
 8006b58:	20000cfc 	.word	0x20000cfc
 8006b5c:	20000d00 	.word	0x20000d00
 8006b60:	20000d04 	.word	0x20000d04
 8006b64:	20000d08 	.word	0x20000d08
 8006b68:	20000d0c 	.word	0x20000d0c
 8006b6c:	20000d10 	.word	0x20000d10
 8006b70:	20000d14 	.word	0x20000d14
 8006b74:	20000d18 	.word	0x20000d18
 8006b78:	f007 f872 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 8006b7c:	4b66      	ldr	r3, [pc, #408]	@ (8006d18 <MX_GPIO_Init+0x8cc>)
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006b86:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4862      	ldr	r0, [pc, #392]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006b92:	f007 f865 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN2_INT1_Pin;
 8006b96:	4b62      	ldr	r3, [pc, #392]	@ (8006d20 <MX_GPIO_Init+0x8d4>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006b9c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006ba0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	485e      	ldr	r0, [pc, #376]	@ (8006d24 <MX_GPIO_Init+0x8d8>)
 8006bac:	f007 f858 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_CS1_Pin | SPI2_CS2_Pin | CAN2_CS_Pin;
 8006bb0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d28 <MX_GPIO_Init+0x8dc>)
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8006d2c <MX_GPIO_Init+0x8e0>)
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d30 <MX_GPIO_Init+0x8e4>)
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bd2:	1d3b      	adds	r3, r7, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4857      	ldr	r0, [pc, #348]	@ (8006d34 <MX_GPIO_Init+0x8e8>)
 8006bd8:	f007 f842 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006bdc:	4b56      	ldr	r3, [pc, #344]	@ (8006d38 <MX_GPIO_Init+0x8ec>)
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006be2:	2301      	movs	r3, #1
 8006be4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	484a      	ldr	r0, [pc, #296]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006bf4:	f007 f834 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8006bf8:	4b50      	ldr	r3, [pc, #320]	@ (8006d3c <MX_GPIO_Init+0x8f0>)
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <MX_GPIO_Init+0x8f4>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	4b4f      	ldr	r3, [pc, #316]	@ (8006d44 <MX_GPIO_Init+0x8f8>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c12:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c14:	2301      	movs	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	483f      	ldr	r0, [pc, #252]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006c1e:	f007 f81f 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON4_Pin;
 8006c22:	4b49      	ldr	r3, [pc, #292]	@ (8006d48 <MX_GPIO_Init+0x8fc>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c2c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c32:	1d3b      	adds	r3, r7, #4
 8006c34:	4619      	mov	r1, r3
 8006c36:	483f      	ldr	r0, [pc, #252]	@ (8006d34 <MX_GPIO_Init+0x8e8>)
 8006c38:	f007 f812 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED4_Pin;
 8006c3c:	4b43      	ldr	r3, [pc, #268]	@ (8006d4c <MX_GPIO_Init+0x900>)
 8006c3e:	881a      	ldrh	r2, [r3, #0]
 8006c40:	4b43      	ldr	r3, [pc, #268]	@ (8006d50 <MX_GPIO_Init+0x904>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b42      	ldr	r3, [pc, #264]	@ (8006d54 <MX_GPIO_Init+0x908>)
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c52:	2301      	movs	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c5e:	1d3b      	adds	r3, r7, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	482e      	ldr	r0, [pc, #184]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006c64:	f006 fffc 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED3_Pin;
 8006c68:	4b3b      	ldr	r3, [pc, #236]	@ (8006d58 <MX_GPIO_Init+0x90c>)
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4837      	ldr	r0, [pc, #220]	@ (8006d5c <MX_GPIO_Init+0x910>)
 8006c80:	f006 ffee 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN_CLK_EN_Pin   ;
 8006c84:	4b36      	ldr	r3, [pc, #216]	@ (8006d60 <MX_GPIO_Init+0x914>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c9e:	f006 ffdf 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  BAT_CHRG_EN_Pin  ;
 8006ca2:	4b30      	ldr	r3, [pc, #192]	@ (8006d64 <MX_GPIO_Init+0x918>)
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb4:	1d3b      	adds	r3, r7, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cbc:	f006 ffd0 	bl	800dc60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2006      	movs	r0, #6
 8006cc6:	f006 fcbe 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006cca:	2006      	movs	r0, #6
 8006ccc:	f006 fcd5 	bl	800d67a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	2008      	movs	r0, #8
 8006cd6:	f006 fcb6 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006cda:	2008      	movs	r0, #8
 8006cdc:	f006 fccd 	bl	800d67a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	200a      	movs	r0, #10
 8006ce6:	f006 fcae 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006cea:	200a      	movs	r0, #10
 8006cec:	f006 fcc5 	bl	800d67a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	2017      	movs	r0, #23
 8006cf6:	f006 fca6 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006cfa:	2017      	movs	r0, #23
 8006cfc:	f006 fcbd 	bl	800d67a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d00:	2200      	movs	r2, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	2028      	movs	r0, #40	@ 0x28
 8006d06:	f006 fc9e 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d0a:	2028      	movs	r0, #40	@ 0x28
 8006d0c:	f006 fcb5 	bl	800d67a <HAL_NVIC_EnableIRQ>
}
 8006d10:	bf00      	nop
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000c56 	.word	0x20000c56
 8006d1c:	48000400 	.word	0x48000400
 8006d20:	20000c86 	.word	0x20000c86
 8006d24:	48000c00 	.word	0x48000c00
 8006d28:	20000cb4 	.word	0x20000cb4
 8006d2c:	20000cbc 	.word	0x20000cbc
 8006d30:	20000c8e 	.word	0x20000c8e
 8006d34:	48000800 	.word	0x48000800
 8006d38:	20000c6e 	.word	0x20000c6e
 8006d3c:	20000cc4 	.word	0x20000cc4
 8006d40:	20000cce 	.word	0x20000cce
 8006d44:	20000cd6 	.word	0x20000cd6
 8006d48:	20000cde 	.word	0x20000cde
 8006d4c:	20000ce6 	.word	0x20000ce6
 8006d50:	20000cec 	.word	0x20000cec
 8006d54:	20000cfc 	.word	0x20000cfc
 8006d58:	20000cf4 	.word	0x20000cf4
 8006d5c:	48001000 	.word	0x48001000
 8006d60:	20000d0c 	.word	0x20000d0c
 8006d64:	20000d14 	.word	0x20000d14

08006d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006d6c:	4904      	ldr	r1, [pc, #16]	@ (8006d80 <Error_Handler+0x18>)
 8006d6e:	4805      	ldr	r0, [pc, #20]	@ (8006d84 <Error_Handler+0x1c>)
 8006d70:	f00d f862 	bl	8013e38 <siprintf>
 8006d74:	4803      	ldr	r0, [pc, #12]	@ (8006d84 <Error_Handler+0x1c>)
 8006d76:	f7fe fc43 	bl	8005600 <serialOut>
  return;
 8006d7a:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	080179cc 	.word	0x080179cc
 8006d84:	20000b5c 	.word	0x20000b5c

08006d88 <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 8006d8e:	f7fe fd79 	bl	8005884 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 8006d92:	2254      	movs	r2, #84	@ 0x54
 8006d94:	2100      	movs	r1, #0
 8006d96:	48ac      	ldr	r0, [pc, #688]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006d98:	f00d f8b3 	bl	8013f02 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 8006d9c:	4bab      	ldr	r3, [pc, #684]	@ (800704c <PCU_Initialize+0x2c4>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	4ba9      	ldr	r3, [pc, #676]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006da4:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 8006da6:	4ba8      	ldr	r3, [pc, #672]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8006dac:	4ba6      	ldr	r3, [pc, #664]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8006db2:	4ba5      	ldr	r3, [pc, #660]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 8006db8:	4ba3      	ldr	r3, [pc, #652]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 8006dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	815a      	strh	r2, [r3, #10]
 8006dc6:	e007      	b.n	8006dd8 <PCU_Initialize+0x50>
  else if (pack.id == 1)
 8006dc8:	4b9f      	ldr	r3, [pc, #636]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d103      	bne.n	8006dd8 <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 8006dd0:	4b9d      	ldr	r3, [pc, #628]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dd6:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 8006dd8:	4b9b      	ldr	r3, [pc, #620]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8006dde:	4b9a      	ldr	r3, [pc, #616]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8006de4:	4b98      	ldr	r3, [pc, #608]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 8006dea:	4b97      	ldr	r3, [pc, #604]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8006df0:	4b95      	ldr	r3, [pc, #596]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 8006df6:	4b94      	ldr	r3, [pc, #592]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8006dfc:	4b92      	ldr	r3, [pc, #584]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8006e02:	4b91      	ldr	r3, [pc, #580]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 8006e08:	4b8f      	ldr	r3, [pc, #572]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	845a      	strh	r2, [r3, #34]	@ 0x22
  pack.cellAvgTemp=0;
 8006e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	84da      	strh	r2, [r3, #38]	@ 0x26
  pack.cellHiVolt=0;
 8006e14:	4b8c      	ldr	r3, [pc, #560]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	851a      	strh	r2, [r3, #40]	@ 0x28
  pack.cellLoVolt=0;
 8006e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  pack.cellAvgVolt=0;
 8006e20:	4b89      	ldr	r3, [pc, #548]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	861a      	strh	r2, [r3, #48]	@ 0x30
  pack.status=0;
 8006e26:	4b88      	ldr	r3, [pc, #544]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  pack.vcuStateChange=0;
 8006e2e:	4b86      	ldr	r3, [pc, #536]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  pack.state=0;
 8006e36:	4b84      	ldr	r3, [pc, #528]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  pack.vcuRequestedState=0;
 8006e3e:	4b82      	ldr	r3, [pc, #520]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  pack.soc=0;
 8006e46:	4b80      	ldr	r3, [pc, #512]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  pack.soh=0;
 8006e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  pack.vcuLastContact.overflows=0;
 8006e56:	4b7c      	ldr	r3, [pc, #496]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	649a      	str	r2, [r3, #72]	@ 0x48
  pack.vcuLastContact.ticks=0;
 8006e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
  pack.cellBalanceActive=0;
 8006e62:	4b79      	ldr	r3, [pc, #484]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 8006e68:	4b77      	ldr	r3, [pc, #476]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 8006e6e:	4b76      	ldr	r3, [pc, #472]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 8006e74:	4b74      	ldr	r3, [pc, #464]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	71fb      	strb	r3, [r7, #7]
 8006e80:	e00f      	b.n	8006ea2 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	4a70      	ldr	r2, [pc, #448]	@ (8007050 <PCU_Initialize+0x2c8>)
 8006e8e:	4413      	add	r3, r2
 8006e90:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f00d f833 	bl	8013f02 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	71fb      	strb	r3, [r7, #7]
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	2b1f      	cmp	r3, #31
 8006ea6:	d9ec      	bls.n	8006e82 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 8006ea8:	486a      	ldr	r0, [pc, #424]	@ (8007054 <PCU_Initialize+0x2cc>)
 8006eaa:	f7fe fba9 	bl	8005600 <serialOut>
  serialOut("");
 8006eae:	4869      	ldr	r0, [pc, #420]	@ (8007054 <PCU_Initialize+0x2cc>)
 8006eb0:	f7fe fba6 	bl	8005600 <serialOut>
  serialOut("        ██    ██");
 8006eb4:	4868      	ldr	r0, [pc, #416]	@ (8007058 <PCU_Initialize+0x2d0>)
 8006eb6:	f7fe fba3 	bl	8005600 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8006eba:	4868      	ldr	r0, [pc, #416]	@ (800705c <PCU_Initialize+0x2d4>)
 8006ebc:	f7fe fba0 	bl	8005600 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2024");
 8006ec0:	4867      	ldr	r0, [pc, #412]	@ (8007060 <PCU_Initialize+0x2d8>)
 8006ec2:	f7fe fb9d 	bl	8005600 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 8006ec6:	4867      	ldr	r0, [pc, #412]	@ (8007064 <PCU_Initialize+0x2dc>)
 8006ec8:	f7fe fb9a 	bl	8005600 <serialOut>
  serialOut("     ██    ██    ██");
 8006ecc:	4866      	ldr	r0, [pc, #408]	@ (8007068 <PCU_Initialize+0x2e0>)
 8006ece:	f7fe fb97 	bl	8005600 <serialOut>
  serialOut("     m o d b a t t");
 8006ed2:	4866      	ldr	r0, [pc, #408]	@ (800706c <PCU_Initialize+0x2e4>)
 8006ed4:	f7fe fb94 	bl	8005600 <serialOut>
  serialOut("");
 8006ed8:	485e      	ldr	r0, [pc, #376]	@ (8007054 <PCU_Initialize+0x2cc>)
 8006eda:	f7fe fb91 	bl	8005600 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f003 fdce 	bl	800aa80 <CAN_TestRamAccess>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 8006ee8:	79bb      	ldrb	r3, [r7, #6]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <PCU_Initialize+0x176>
 8006eee:	4960      	ldr	r1, [pc, #384]	@ (8007070 <PCU_Initialize+0x2e8>)
 8006ef0:	4860      	ldr	r0, [pc, #384]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006ef2:	f00c ffa1 	bl	8013e38 <siprintf>
 8006ef6:	485f      	ldr	r0, [pc, #380]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006ef8:	f7fe fb82 	bl	8005600 <serialOut>
 8006efc:	e006      	b.n	8006f0c <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006efe:	495e      	ldr	r1, [pc, #376]	@ (8007078 <PCU_Initialize+0x2f0>)
 8006f00:	485c      	ldr	r0, [pc, #368]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f02:	f00c ff99 	bl	8013e38 <siprintf>
 8006f06:	485b      	ldr	r0, [pc, #364]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f08:	f7fe fb7a 	bl	8005600 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f003 fd3d 	bl	800a98c <CAN_TestRegisterAccess>
 8006f12:	4603      	mov	r3, r0
 8006f14:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 8006f16:	79bb      	ldrb	r3, [r7, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <PCU_Initialize+0x1a4>
 8006f1c:	4957      	ldr	r1, [pc, #348]	@ (800707c <PCU_Initialize+0x2f4>)
 8006f1e:	4855      	ldr	r0, [pc, #340]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f20:	f00c ff8a 	bl	8013e38 <siprintf>
 8006f24:	4853      	ldr	r0, [pc, #332]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f26:	f7fe fb6b 	bl	8005600 <serialOut>
 8006f2a:	e006      	b.n	8006f3a <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006f2c:	4954      	ldr	r1, [pc, #336]	@ (8007080 <PCU_Initialize+0x2f8>)
 8006f2e:	4851      	ldr	r0, [pc, #324]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f30:	f00c ff82 	bl	8013e38 <siprintf>
 8006f34:	484f      	ldr	r0, [pc, #316]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f36:	f7fe fb63 	bl	8005600 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006f3a:	4952      	ldr	r1, [pc, #328]	@ (8007084 <PCU_Initialize+0x2fc>)
 8006f3c:	484d      	ldr	r0, [pc, #308]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f3e:	f00c ff7b 	bl	8013e38 <siprintf>
 8006f42:	484c      	ldr	r0, [pc, #304]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f44:	f7fe fb5c 	bl	8005600 <serialOut>

  if(hwPlatform == PLATFORM_NUCLEO){
 8006f48:	4b4f      	ldr	r3, [pc, #316]	@ (8007088 <PCU_Initialize+0x300>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d135      	bne.n	8006fbc <PCU_Initialize+0x234>
    passed = CAN_TestRamAccess(CAN2);
 8006f50:	2001      	movs	r0, #1
 8006f52:	f003 fd95 	bl	800aa80 <CAN_TestRamAccess>
 8006f56:	4603      	mov	r3, r0
 8006f58:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : OK"); serialOut(tempBuffer);
 8006f5a:	79bb      	ldrb	r3, [r7, #6]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <PCU_Initialize+0x1e8>
 8006f60:	494a      	ldr	r1, [pc, #296]	@ (800708c <PCU_Initialize+0x304>)
 8006f62:	4844      	ldr	r0, [pc, #272]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f64:	f00c ff68 	bl	8013e38 <siprintf>
 8006f68:	4842      	ldr	r0, [pc, #264]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f6a:	f7fe fb49 	bl	8005600 <serialOut>
 8006f6e:	e006      	b.n	8006f7e <PCU_Initialize+0x1f6>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006f70:	4947      	ldr	r1, [pc, #284]	@ (8007090 <PCU_Initialize+0x308>)
 8006f72:	4840      	ldr	r0, [pc, #256]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f74:	f00c ff60 	bl	8013e38 <siprintf>
 8006f78:	483e      	ldr	r0, [pc, #248]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f7a:	f7fe fb41 	bl	8005600 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f003 fd04 	bl	800a98c <CAN_TestRegisterAccess>
 8006f84:	4603      	mov	r3, r0
 8006f86:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : OK"); serialOut(tempBuffer);
 8006f88:	79bb      	ldrb	r3, [r7, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <PCU_Initialize+0x216>
 8006f8e:	4941      	ldr	r1, [pc, #260]	@ (8007094 <PCU_Initialize+0x30c>)
 8006f90:	4838      	ldr	r0, [pc, #224]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f92:	f00c ff51 	bl	8013e38 <siprintf>
 8006f96:	4837      	ldr	r0, [pc, #220]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f98:	f7fe fb32 	bl	8005600 <serialOut>
 8006f9c:	e006      	b.n	8006fac <PCU_Initialize+0x224>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006f9e:	493e      	ldr	r1, [pc, #248]	@ (8007098 <PCU_Initialize+0x310>)
 8006fa0:	4834      	ldr	r0, [pc, #208]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fa2:	f00c ff49 	bl	8013e38 <siprintf>
 8006fa6:	4833      	ldr	r0, [pc, #204]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fa8:	f7fe fb2a 	bl	8005600 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006fac:	4935      	ldr	r1, [pc, #212]	@ (8007084 <PCU_Initialize+0x2fc>)
 8006fae:	4831      	ldr	r0, [pc, #196]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fb0:	f00c ff42 	bl	8013e38 <siprintf>
 8006fb4:	482f      	ldr	r0, [pc, #188]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fb6:	f7fe fb23 	bl	8005600 <serialOut>
 8006fba:	e09e      	b.n	80070fa <PCU_Initialize+0x372>
  }else{
    // PLATFORM_MODBATT
    passed = CAN_TestRamAccess(CAN2);
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f003 fd5f 	bl	800aa80 <CAN_TestRamAccess>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 8006fc6:	79bb      	ldrb	r3, [r7, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <PCU_Initialize+0x254>
 8006fcc:	4933      	ldr	r1, [pc, #204]	@ (800709c <PCU_Initialize+0x314>)
 8006fce:	4829      	ldr	r0, [pc, #164]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fd0:	f00c ff32 	bl	8013e38 <siprintf>
 8006fd4:	4827      	ldr	r0, [pc, #156]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fd6:	f7fe fb13 	bl	8005600 <serialOut>
 8006fda:	e006      	b.n	8006fea <PCU_Initialize+0x262>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006fdc:	4930      	ldr	r1, [pc, #192]	@ (80070a0 <PCU_Initialize+0x318>)
 8006fde:	4825      	ldr	r0, [pc, #148]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fe0:	f00c ff2a 	bl	8013e38 <siprintf>
 8006fe4:	4823      	ldr	r0, [pc, #140]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fe6:	f7fe fb0b 	bl	8005600 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 8006fea:	2001      	movs	r0, #1
 8006fec:	f003 fcce 	bl	800a98c <CAN_TestRegisterAccess>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8006ff4:	79bb      	ldrb	r3, [r7, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <PCU_Initialize+0x282>
 8006ffa:	492a      	ldr	r1, [pc, #168]	@ (80070a4 <PCU_Initialize+0x31c>)
 8006ffc:	481d      	ldr	r0, [pc, #116]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006ffe:	f00c ff1b 	bl	8013e38 <siprintf>
 8007002:	481c      	ldr	r0, [pc, #112]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007004:	f7fe fafc 	bl	8005600 <serialOut>
 8007008:	e006      	b.n	8007018 <PCU_Initialize+0x290>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 800700a:	4927      	ldr	r1, [pc, #156]	@ (80070a8 <PCU_Initialize+0x320>)
 800700c:	4819      	ldr	r0, [pc, #100]	@ (8007074 <PCU_Initialize+0x2ec>)
 800700e:	f00c ff13 	bl	8013e38 <siprintf>
 8007012:	4818      	ldr	r0, [pc, #96]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007014:	f7fe faf4 	bl	8005600 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007018:	491a      	ldr	r1, [pc, #104]	@ (8007084 <PCU_Initialize+0x2fc>)
 800701a:	4816      	ldr	r0, [pc, #88]	@ (8007074 <PCU_Initialize+0x2ec>)
 800701c:	f00c ff0c 	bl	8013e38 <siprintf>
 8007020:	4814      	ldr	r0, [pc, #80]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007022:	f7fe faed 	bl	8005600 <serialOut>

    passed = CAN_TestRamAccess(CAN3);
 8007026:	2002      	movs	r0, #2
 8007028:	f003 fd2a 	bl	800aa80 <CAN_TestRamAccess>
 800702c:	4603      	mov	r3, r0
 800702e:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : OK"); serialOut(tempBuffer);
 8007030:	79bb      	ldrb	r3, [r7, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d03c      	beq.n	80070b0 <PCU_Initialize+0x328>
 8007036:	491d      	ldr	r1, [pc, #116]	@ (80070ac <PCU_Initialize+0x324>)
 8007038:	480e      	ldr	r0, [pc, #56]	@ (8007074 <PCU_Initialize+0x2ec>)
 800703a:	f00c fefd 	bl	8013e38 <siprintf>
 800703e:	480d      	ldr	r0, [pc, #52]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007040:	f7fe fade 	bl	8005600 <serialOut>
 8007044:	e03b      	b.n	80070be <PCU_Initialize+0x336>
 8007046:	bf00      	nop
 8007048:	2000a664 	.word	0x2000a664
 800704c:	20000984 	.word	0x20000984
 8007050:	20000de4 	.word	0x20000de4
 8007054:	080179dc 	.word	0x080179dc
 8007058:	080179e0 	.word	0x080179e0
 800705c:	080179fc 	.word	0x080179fc
 8007060:	08017a24 	.word	0x08017a24
 8007064:	08017a74 	.word	0x08017a74
 8007068:	08017ac4 	.word	0x08017ac4
 800706c:	08017ae4 	.word	0x08017ae4
 8007070:	08017af8 	.word	0x08017af8
 8007074:	20000b5c 	.word	0x20000b5c
 8007078:	08017b28 	.word	0x08017b28
 800707c:	08017b60 	.word	0x08017b60
 8007080:	08017b90 	.word	0x08017b90
 8007084:	08017bc8 	.word	0x08017bc8
 8007088:	20000a50 	.word	0x20000a50
 800708c:	08017bcc 	.word	0x08017bcc
 8007090:	08017bfc 	.word	0x08017bfc
 8007094:	08017c34 	.word	0x08017c34
 8007098:	08017c64 	.word	0x08017c64
 800709c:	08017c9c 	.word	0x08017c9c
 80070a0:	08017ccc 	.word	0x08017ccc
 80070a4:	08017d04 	.word	0x08017d04
 80070a8:	08017d34 	.word	0x08017d34
 80070ac:	08017d6c 	.word	0x08017d6c
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : FAILED!"); serialOut(tempBuffer);
 80070b0:	4915      	ldr	r1, [pc, #84]	@ (8007108 <PCU_Initialize+0x380>)
 80070b2:	4816      	ldr	r0, [pc, #88]	@ (800710c <PCU_Initialize+0x384>)
 80070b4:	f00c fec0 	bl	8013e38 <siprintf>
 80070b8:	4814      	ldr	r0, [pc, #80]	@ (800710c <PCU_Initialize+0x384>)
 80070ba:	f7fe faa1 	bl	8005600 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN3);
 80070be:	2002      	movs	r0, #2
 80070c0:	f003 fc64 	bl	800a98c <CAN_TestRegisterAccess>
 80070c4:	4603      	mov	r3, r0
 80070c6:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : OK"); serialOut(tempBuffer);
 80070c8:	79bb      	ldrb	r3, [r7, #6]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <PCU_Initialize+0x356>
 80070ce:	4910      	ldr	r1, [pc, #64]	@ (8007110 <PCU_Initialize+0x388>)
 80070d0:	480e      	ldr	r0, [pc, #56]	@ (800710c <PCU_Initialize+0x384>)
 80070d2:	f00c feb1 	bl	8013e38 <siprintf>
 80070d6:	480d      	ldr	r0, [pc, #52]	@ (800710c <PCU_Initialize+0x384>)
 80070d8:	f7fe fa92 	bl	8005600 <serialOut>
 80070dc:	e006      	b.n	80070ec <PCU_Initialize+0x364>
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : FAILED!"); serialOut(tempBuffer);
 80070de:	490d      	ldr	r1, [pc, #52]	@ (8007114 <PCU_Initialize+0x38c>)
 80070e0:	480a      	ldr	r0, [pc, #40]	@ (800710c <PCU_Initialize+0x384>)
 80070e2:	f00c fea9 	bl	8013e38 <siprintf>
 80070e6:	4809      	ldr	r0, [pc, #36]	@ (800710c <PCU_Initialize+0x384>)
 80070e8:	f7fe fa8a 	bl	8005600 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 80070ec:	490a      	ldr	r1, [pc, #40]	@ (8007118 <PCU_Initialize+0x390>)
 80070ee:	4807      	ldr	r0, [pc, #28]	@ (800710c <PCU_Initialize+0x384>)
 80070f0:	f00c fea2 	bl	8013e38 <siprintf>
 80070f4:	4805      	ldr	r0, [pc, #20]	@ (800710c <PCU_Initialize+0x384>)
 80070f6:	f7fe fa83 	bl	8005600 <serialOut>

  }
  appData.state = PC_STATE_INIT;
 80070fa:	4b08      	ldr	r3, [pc, #32]	@ (800711c <PCU_Initialize+0x394>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	08017d9c 	.word	0x08017d9c
 800710c:	20000b5c 	.word	0x20000b5c
 8007110:	08017dd4 	.word	0x08017dd4
 8007114:	08017e04 	.word	0x08017e04
 8007118:	08017bc8 	.word	0x08017bc8
 800711c:	20000d28 	.word	0x20000d28

08007120 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t moduleId;
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 8007126:	4ba7      	ldr	r3, [pc, #668]	@ (80073c4 <PCU_Tasks+0x2a4>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d11a      	bne.n	8007164 <PCU_Tasks+0x44>

    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 800712e:	2000      	movs	r0, #0
 8007130:	f000 fcf2 	bl	8007b18 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8007134:	2001      	movs	r0, #1
 8007136:	f000 fcef 	bl	8007b18 <DRV_CANFDSPI_Init>

    MCU_IsolateAllModules();
 800713a:	f001 fdcd 	bl	8008cd8 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 800713e:	f001 fd77 	bl	8008c30 <MCU_DeRegisterAllModules>

    pack.vcuRequestedState = packOff;
 8007142:	4ba1      	ldr	r3, [pc, #644]	@ (80073c8 <PCU_Tasks+0x2a8>)
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 800714a:	4ba0      	ldr	r3, [pc, #640]	@ (80073cc <PCU_Tasks+0x2ac>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a9e      	ldr	r2, [pc, #632]	@ (80073c8 <PCU_Tasks+0x2a8>)
 8007150:	6493      	str	r3, [r2, #72]	@ 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 8007152:	4b9f      	ldr	r3, [pc, #636]	@ (80073d0 <PCU_Tasks+0x2b0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007158:	4a9b      	ldr	r2, [pc, #620]	@ (80073c8 <PCU_Tasks+0x2a8>)
 800715a:	6453      	str	r3, [r2, #68]	@ 0x44

    appData.state = PC_STATE_RUN;
 800715c:	4b99      	ldr	r3, [pc, #612]	@ (80073c4 <PCU_Tasks+0x2a4>)
 800715e:	2201      	movs	r2, #1
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e126      	b.n	80073b2 <PCU_Tasks+0x292>

  }else if (appData.state == PC_STATE_RUN){
 8007164:	4b97      	ldr	r3, [pc, #604]	@ (80073c4 <PCU_Tasks+0x2a4>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	f040 8122 	bne.w	80073b2 <PCU_Tasks+0x292>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 800716e:	4b99      	ldr	r3, [pc, #612]	@ (80073d4 <PCU_Tasks+0x2b4>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <PCU_Tasks+0x5a>
      VCU_ReceiveMessages();
 8007176:	f004 f973 	bl	800b460 <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 800717a:	4b97      	ldr	r3, [pc, #604]	@ (80073d8 <PCU_Tasks+0x2b8>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <PCU_Tasks+0x66>
      MCU_ReceiveMessages();
 8007182:	f001 fa69 	bl	8008658 <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 8007186:	f004 fe15 	bl	800bdb4 <VCU_TicksSinceLastMessage>
 800718a:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8007192:	d920      	bls.n	80071d6 <PCU_Tasks+0xb6>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 8007194:	4b8c      	ldr	r3, [pc, #560]	@ (80073c8 <PCU_Tasks+0x2a8>)
 8007196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800719a:	2b03      	cmp	r3, #3
 800719c:	d009      	beq.n	80071b2 <PCU_Tasks+0x92>
 800719e:	4b8a      	ldr	r3, [pc, #552]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80071a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d004      	beq.n	80071b2 <PCU_Tasks+0x92>
 80071a8:	4b87      	ldr	r3, [pc, #540]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80071aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d130      	bne.n	8007214 <PCU_Tasks+0xf4>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80071b2:	4b8a      	ldr	r3, [pc, #552]	@ (80073dc <PCU_Tasks+0x2bc>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d006      	beq.n	80071cc <PCU_Tasks+0xac>
 80071be:	4988      	ldr	r1, [pc, #544]	@ (80073e0 <PCU_Tasks+0x2c0>)
 80071c0:	4888      	ldr	r0, [pc, #544]	@ (80073e4 <PCU_Tasks+0x2c4>)
 80071c2:	f00c fe39 	bl	8013e38 <siprintf>
 80071c6:	4887      	ldr	r0, [pc, #540]	@ (80073e4 <PCU_Tasks+0x2c4>)
 80071c8:	f7fe fa1a 	bl	8005600 <serialOut>
        pack.vcuRequestedState = packOff;
 80071cc:	4b7e      	ldr	r3, [pc, #504]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071d4:	e01e      	b.n	8007214 <PCU_Tasks+0xf4>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80071dc:	d91a      	bls.n	8007214 <PCU_Tasks+0xf4>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 80071de:	4b7a      	ldr	r3, [pc, #488]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80071e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d004      	beq.n	80071f2 <PCU_Tasks+0xd2>
 80071e8:	4b77      	ldr	r3, [pc, #476]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80071ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d110      	bne.n	8007214 <PCU_Tasks+0xf4>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 80071f2:	4b7a      	ldr	r3, [pc, #488]	@ (80073dc <PCU_Tasks+0x2bc>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d006      	beq.n	800720c <PCU_Tasks+0xec>
 80071fe:	497a      	ldr	r1, [pc, #488]	@ (80073e8 <PCU_Tasks+0x2c8>)
 8007200:	4878      	ldr	r0, [pc, #480]	@ (80073e4 <PCU_Tasks+0x2c4>)
 8007202:	f00c fe19 	bl	8013e38 <siprintf>
 8007206:	4877      	ldr	r0, [pc, #476]	@ (80073e4 <PCU_Tasks+0x2c4>)
 8007208:	f7fe f9fa 	bl	8005600 <serialOut>
        pack.vcuRequestedState = packStandby;
 800720c:	4b6e      	ldr	r3, [pc, #440]	@ (80073c8 <PCU_Tasks+0x2a8>)
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      }
    }

    //Check for expired last contact from module
    for (index =0;index < pack.moduleCount;index++){
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
 8007218:	e0c5      	b.n	80073a6 <PCU_Tasks+0x286>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	4a73      	ldr	r2, [pc, #460]	@ (80073ec <PCU_Tasks+0x2cc>)
 800721e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	4413      	add	r3, r2
 8007228:	3308      	adds	r3, #8
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f003 fabd 	bl	800a7ac <MCU_TicksSinceLastMessage>
 8007232:	60b8      	str	r0, [r7, #8]
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800723a:	d95d      	bls.n	80072f8 <PCU_Tasks+0x1d8>
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	4a6b      	ldr	r2, [pc, #428]	@ (80073ec <PCU_Tasks+0x2cc>)
 8007240:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	4413      	add	r3, r2
 800724a:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d051      	beq.n	80072f8 <PCU_Tasks+0x1d8>
        if( module[index].faultCode.commsError == false){
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	4a65      	ldr	r2, [pc, #404]	@ (80073ec <PCU_Tasks+0x2cc>)
 8007258:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007266:	789b      	ldrb	r3, [r3, #2]
 8007268:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	f040 8096 	bne.w	80073a0 <PCU_Tasks+0x280>
          // Isolate Module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x",module[index].moduleId ); serialOut(tempBuffer);}
 8007274:	4b59      	ldr	r3, [pc, #356]	@ (80073dc <PCU_Tasks+0x2bc>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d110      	bne.n	80072a2 <PCU_Tasks+0x182>
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	4a5a      	ldr	r2, [pc, #360]	@ (80073ec <PCU_Tasks+0x2cc>)
 8007284:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	4413      	add	r3, r2
 800728e:	3308      	adds	r3, #8
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	4956      	ldr	r1, [pc, #344]	@ (80073f0 <PCU_Tasks+0x2d0>)
 8007296:	4853      	ldr	r0, [pc, #332]	@ (80073e4 <PCU_Tasks+0x2c4>)
 8007298:	f00c fdce 	bl	8013e38 <siprintf>
 800729c:	4851      	ldr	r0, [pc, #324]	@ (80073e4 <PCU_Tasks+0x2c4>)
 800729e:	f7fe f9af 	bl	8005600 <serialOut>
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 80072a2:	4b49      	ldr	r3, [pc, #292]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80072a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d10d      	bne.n	80072c8 <PCU_Tasks+0x1a8>
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	4a4f      	ldr	r2, [pc, #316]	@ (80073ec <PCU_Tasks+0x2cc>)
 80072b0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	4413      	add	r3, r2
 80072ba:	3327      	adds	r3, #39	@ 0x27
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d102      	bne.n	80072c8 <PCU_Tasks+0x1a8>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 80072c2:	4b41      	ldr	r3, [pc, #260]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	769a      	strb	r2, [r3, #26]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	4a48      	ldr	r2, [pc, #288]	@ (80073ec <PCU_Tasks+0x2cc>)
 80072cc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	3328      	adds	r3, #40	@ 0x28
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	4a43      	ldr	r2, [pc, #268]	@ (80073ec <PCU_Tasks+0x2cc>)
 80072e0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 80072ee:	7893      	ldrb	r3, [r2, #2]
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	7093      	strb	r3, [r2, #2]
        if( module[index].faultCode.commsError == false){
 80072f6:	e053      	b.n	80073a0 <PCU_Tasks+0x280>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80072fe:	d933      	bls.n	8007368 <PCU_Tasks+0x248>
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	4a3a      	ldr	r2, [pc, #232]	@ (80073ec <PCU_Tasks+0x2cc>)
 8007304:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f083 0301 	eor.w	r3, r3, #1
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d024      	beq.n	8007368 <PCU_Tasks+0x248>
        // Send State
        MCU_RequestModuleStatus(module[index].moduleId);
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	4a32      	ldr	r2, [pc, #200]	@ (80073ec <PCU_Tasks+0x2cc>)
 8007322:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007326:	fb01 f303 	mul.w	r3, r1, r3
 800732a:	4413      	add	r3, r2
 800732c:	3308      	adds	r3, #8
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f002 f8ff 	bl	8009534 <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	4a2c      	ldr	r2, [pc, #176]	@ (80073ec <PCU_Tasks+0x2cc>)
 800733a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d028      	beq.n	80073a0 <PCU_Tasks+0x280>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	4a26      	ldr	r2, [pc, #152]	@ (80073ec <PCU_Tasks+0x2cc>)
 8007352:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	4413      	add	r3, r2
 800735c:	3308      	adds	r3, #8
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f001 fd8d 	bl	8008e80 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 8007366:	e01b      	b.n	80073a0 <PCU_Tasks+0x280>
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	4a20      	ldr	r2, [pc, #128]	@ (80073ec <PCU_Tasks+0x2cc>)
 800736c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	4413      	add	r3, r2
 8007376:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800737a:	789b      	ldrb	r3, [r3, #2]
 800737c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b01      	cmp	r3, #1
 8007384:	d10c      	bne.n	80073a0 <PCU_Tasks+0x280>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	4a18      	ldr	r2, [pc, #96]	@ (80073ec <PCU_Tasks+0x2cc>)
 800738a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	4413      	add	r3, r2
 8007394:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007398:	7893      	ldrb	r3, [r2, #2]
 800739a:	f36f 0300 	bfc	r3, #0, #1
 800739e:	7093      	strb	r3, [r2, #2]
    for (index =0;index < pack.moduleCount;index++){
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	3301      	adds	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]
 80073a6:	4b08      	ldr	r3, [pc, #32]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80073a8:	7d1b      	ldrb	r3, [r3, #20]
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	f4ff af34 	bcc.w	800721a <PCU_Tasks+0xfa>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 80073b2:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <PCU_Tasks+0x2a8>)
 80073b4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	f040 80e4 	bne.w	8007586 <PCU_Tasks+0x466>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < pack.moduleCount;index++){
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
 80073c2:	e0c7      	b.n	8007554 <PCU_Tasks+0x434>
 80073c4:	20000d28 	.word	0x20000d28
 80073c8:	2000a664 	.word	0x2000a664
 80073cc:	20000d20 	.word	0x20000d20
 80073d0:	200005d0 	.word	0x200005d0
 80073d4:	20000d1e 	.word	0x20000d1e
 80073d8:	20000d1c 	.word	0x20000d1c
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	08017e3c 	.word	0x08017e3c
 80073e4:	20000b5c 	.word	0x20000b5c
 80073e8:	08017e60 	.word	0x08017e60
 80073ec:	20000de4 	.word	0x20000de4
 80073f0:	08017e84 	.word	0x08017e84
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	4ab3      	ldr	r2, [pc, #716]	@ (80076c4 <PCU_Tasks+0x5a4>)
 80073f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007406:	789b      	ldrb	r3, [r3, #2]
 8007408:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b01      	cmp	r3, #1
 8007410:	d123      	bne.n	800745a <PCU_Tasks+0x33a>
        if (module[index].currentState != moduleOff){
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4aab      	ldr	r2, [pc, #684]	@ (80076c4 <PCU_Tasks+0x5a4>)
 8007416:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	4413      	add	r3, r2
 8007420:	3327      	adds	r3, #39	@ 0x27
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8092 	beq.w	800754e <PCU_Tasks+0x42e>
          // Turn off the module
          module[index].nextState = moduleOff;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	4aa5      	ldr	r2, [pc, #660]	@ (80076c4 <PCU_Tasks+0x5a4>)
 800742e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007432:	fb01 f303 	mul.w	r3, r1, r3
 8007436:	4413      	add	r3, r2
 8007438:	3328      	adds	r3, #40	@ 0x28
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	4aa0      	ldr	r2, [pc, #640]	@ (80076c4 <PCU_Tasks+0x5a4>)
 8007442:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007446:	fb01 f303 	mul.w	r3, r1, r3
 800744a:	4413      	add	r3, r2
 800744c:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007450:	7893      	ldrb	r3, [r2, #2]
 8007452:	f36f 0382 	bfc	r3, #2, #1
 8007456:	7093      	strb	r3, [r2, #2]
 8007458:	e079      	b.n	800754e <PCU_Tasks+0x42e>
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	4a99      	ldr	r2, [pc, #612]	@ (80076c4 <PCU_Tasks+0x5a4>)
 800745e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800746c:	789b      	ldrb	r3, [r3, #2]
 800746e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d16a      	bne.n	800754e <PCU_Tasks+0x42e>
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	4a92      	ldr	r2, [pc, #584]	@ (80076c4 <PCU_Tasks+0x5a4>)
 800747c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007480:	fb01 f303 	mul.w	r3, r1, r3
 8007484:	4413      	add	r3, r2
 8007486:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800748a:	789b      	ldrb	r3, [r3, #2]
 800748c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d15b      	bne.n	800754e <PCU_Tasks+0x42e>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	4a8a      	ldr	r2, [pc, #552]	@ (80076c4 <PCU_Tasks+0x5a4>)
 800749a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	332a      	adds	r3, #42	@ 0x2a
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d13a      	bne.n	8007522 <PCU_Tasks+0x402>
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	4a85      	ldr	r2, [pc, #532]	@ (80076c4 <PCU_Tasks+0x5a4>)
 80074b0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	3329      	adds	r3, #41	@ 0x29
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	4980      	ldr	r1, [pc, #512]	@ (80076c4 <PCU_Tasks+0x5a4>)
 80074c2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80074c6:	fb00 f303 	mul.w	r3, r0, r3
 80074ca:	440b      	add	r3, r1
 80074cc:	3328      	adds	r3, #40	@ 0x28
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d126      	bne.n	8007522 <PCU_Tasks+0x402>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4a7b      	ldr	r2, [pc, #492]	@ (80076c4 <PCU_Tasks+0x5a4>)
 80074d8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	3308      	adds	r3, #8
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f003 f9d8 	bl	800a89c <MCU_TicksSinceLastStateTx>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074f2:	d92c      	bls.n	800754e <PCU_Tasks+0x42e>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	4a73      	ldr	r2, [pc, #460]	@ (80076c4 <PCU_Tasks+0x5a4>)
 80074f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	4413      	add	r3, r2
 8007502:	3308      	adds	r3, #8
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	496e      	ldr	r1, [pc, #440]	@ (80076c4 <PCU_Tasks+0x5a4>)
 800750a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800750e:	fb00 f303 	mul.w	r3, r0, r3
 8007512:	440b      	add	r3, r1
 8007514:	3328      	adds	r3, #40	@ 0x28
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f002 fed8 	bl	800a2d0 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007520:	e015      	b.n	800754e <PCU_Tasks+0x42e>
          }
        }else {
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	4a67      	ldr	r2, [pc, #412]	@ (80076c4 <PCU_Tasks+0x5a4>)
 8007526:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800752a:	fb01 f303 	mul.w	r3, r1, r3
 800752e:	4413      	add	r3, r2
 8007530:	3308      	adds	r3, #8
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4963      	ldr	r1, [pc, #396]	@ (80076c4 <PCU_Tasks+0x5a4>)
 8007538:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800753c:	fb00 f303 	mul.w	r3, r0, r3
 8007540:	440b      	add	r3, r1
 8007542:	3328      	adds	r3, #40	@ 0x28
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f002 fec1 	bl	800a2d0 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	3301      	adds	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
 8007554:	4b5c      	ldr	r3, [pc, #368]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007556:	7d1b      	ldrb	r3, [r3, #20]
 8007558:	7bfa      	ldrb	r2, [r7, #15]
 800755a:	429a      	cmp	r2, r3
 800755c:	f4ff af4a 	bcc.w	80073f4 <PCU_Tasks+0x2d4>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8007560:	4b5a      	ldr	r3, [pc, #360]	@ (80076cc <PCU_Tasks+0x5ac>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 82ca 	beq.w	8007afe <PCU_Tasks+0x9de>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 800756a:	f005 faf7 	bl	800cb5c <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 800756e:	f005 fc0f 	bl	800cd90 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8007572:	f005 fc99 	bl	800cea8 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8007576:	f005 fd2b 	bl	800cfd0 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 800757a:	f005 fdbd 	bl	800d0f8 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 800757e:	4b53      	ldr	r3, [pc, #332]	@ (80076cc <PCU_Tasks+0x5ac>)
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8007584:	e2bb      	b.n	8007afe <PCU_Tasks+0x9de>
  } else if(pack.controlMode == packMode){
 8007586:	4b50      	ldr	r3, [pc, #320]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007588:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 82b6 	bne.w	8007afe <PCU_Tasks+0x9de>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8007592:	4b4d      	ldr	r3, [pc, #308]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007598:	2b03      	cmp	r3, #3
 800759a:	d005      	beq.n	80075a8 <PCU_Tasks+0x488>
 800759c:	4b4a      	ldr	r3, [pc, #296]	@ (80076c8 <PCU_Tasks+0x5a8>)
 800759e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	f040 813c 	bne.w	8007820 <PCU_Tasks+0x700>
      if(pack.powerStatus.powerStage == stageSelectModule){
 80075a8:	4b47      	ldr	r3, [pc, #284]	@ (80076c8 <PCU_Tasks+0x5a8>)
 80075aa:	7e9b      	ldrb	r3, [r3, #26]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 80a1 	bne.w	80076f4 <PCU_Tasks+0x5d4>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 80075b2:	4b47      	ldr	r3, [pc, #284]	@ (80076d0 <PCU_Tasks+0x5b0>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	f003 030a 	and.w	r3, r3, #10
 80075ba:	2b0a      	cmp	r3, #10
 80075bc:	d115      	bne.n	80075ea <PCU_Tasks+0x4ca>
 80075be:	4b42      	ldr	r3, [pc, #264]	@ (80076c8 <PCU_Tasks+0x5a8>)
 80075c0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80075c4:	4a43      	ldr	r2, [pc, #268]	@ (80076d4 <PCU_Tasks+0x5b4>)
 80075c6:	fba2 1203 	umull	r1, r2, r2, r3
 80075ca:	0b12      	lsrs	r2, r2, #12
 80075cc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80075d0:	fb01 f202 	mul.w	r2, r1, r2
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <PCU_Tasks+0x4ca>
 80075dc:	493e      	ldr	r1, [pc, #248]	@ (80076d8 <PCU_Tasks+0x5b8>)
 80075de:	483f      	ldr	r0, [pc, #252]	@ (80076dc <PCU_Tasks+0x5bc>)
 80075e0:	f00c fc2a 	bl	8013e38 <siprintf>
 80075e4:	483d      	ldr	r0, [pc, #244]	@ (80076dc <PCU_Tasks+0x5bc>)
 80075e6:	f7fe f80b 	bl	8005600 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 80075ea:	f002 f83b 	bl	8009664 <MCU_FindMaxVoltageModule>
 80075ee:	4603      	mov	r3, r0
 80075f0:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d12f      	bne.n	8007658 <PCU_Tasks+0x538>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 80075f8:	4b35      	ldr	r3, [pc, #212]	@ (80076d0 <PCU_Tasks+0x5b0>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d115      	bne.n	8007630 <PCU_Tasks+0x510>
 8007604:	4b30      	ldr	r3, [pc, #192]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007606:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800760a:	4a32      	ldr	r2, [pc, #200]	@ (80076d4 <PCU_Tasks+0x5b4>)
 800760c:	fba2 1203 	umull	r1, r2, r2, r3
 8007610:	0b12      	lsrs	r2, r2, #12
 8007612:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007616:	fb01 f202 	mul.w	r2, r1, r2
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <PCU_Tasks+0x510>
 8007622:	492f      	ldr	r1, [pc, #188]	@ (80076e0 <PCU_Tasks+0x5c0>)
 8007624:	482d      	ldr	r0, [pc, #180]	@ (80076dc <PCU_Tasks+0x5bc>)
 8007626:	f00c fc07 	bl	8013e38 <siprintf>
 800762a:	482c      	ldr	r0, [pc, #176]	@ (80076dc <PCU_Tasks+0x5bc>)
 800762c:	f7fd ffe8 	bl	8005600 <serialOut>
          pack.errorCounts.firstModule ++;
 8007630:	4b25      	ldr	r3, [pc, #148]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007632:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007636:	3301      	adds	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	4b23      	ldr	r3, [pc, #140]	@ (80076c8 <PCU_Tasks+0x5a8>)
 800763c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007640:	4b21      	ldr	r3, [pc, #132]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007642:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007646:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 800764a:	4293      	cmp	r3, r2
 800764c:	d952      	bls.n	80076f4 <PCU_Tasks+0x5d4>
 800764e:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007650:	2200      	movs	r2, #0
 8007652:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007656:	e04d      	b.n	80076f4 <PCU_Tasks+0x5d4>
        }else if (moduleId == pack.moduleCount +1 ){
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	4b1b      	ldr	r3, [pc, #108]	@ (80076c8 <PCU_Tasks+0x5a8>)
 800765c:	7d1b      	ldrb	r3, [r3, #20]
 800765e:	3301      	adds	r3, #1
 8007660:	429a      	cmp	r2, r3
 8007662:	d141      	bne.n	80076e8 <PCU_Tasks+0x5c8>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8007664:	4b1a      	ldr	r3, [pc, #104]	@ (80076d0 <PCU_Tasks+0x5b0>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	2b03      	cmp	r3, #3
 800766e:	d115      	bne.n	800769c <PCU_Tasks+0x57c>
 8007670:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <PCU_Tasks+0x5a8>)
 8007672:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007676:	4a17      	ldr	r2, [pc, #92]	@ (80076d4 <PCU_Tasks+0x5b4>)
 8007678:	fba2 1203 	umull	r1, r2, r2, r3
 800767c:	0b12      	lsrs	r2, r2, #12
 800767e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007682:	fb01 f202 	mul.w	r2, r1, r2
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <PCU_Tasks+0x57c>
 800768e:	4915      	ldr	r1, [pc, #84]	@ (80076e4 <PCU_Tasks+0x5c4>)
 8007690:	4812      	ldr	r0, [pc, #72]	@ (80076dc <PCU_Tasks+0x5bc>)
 8007692:	f00c fbd1 	bl	8013e38 <siprintf>
 8007696:	4811      	ldr	r0, [pc, #68]	@ (80076dc <PCU_Tasks+0x5bc>)
 8007698:	f7fd ffb2 	bl	8005600 <serialOut>
          pack.errorCounts.firstModule ++;
 800769c:	4b0a      	ldr	r3, [pc, #40]	@ (80076c8 <PCU_Tasks+0x5a8>)
 800769e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80076a2:	3301      	adds	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	4b08      	ldr	r3, [pc, #32]	@ (80076c8 <PCU_Tasks+0x5a8>)
 80076a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <PCU_Tasks+0x5a8>)
 80076ae:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80076b2:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d91c      	bls.n	80076f4 <PCU_Tasks+0x5d4>
 80076ba:	4b03      	ldr	r3, [pc, #12]	@ (80076c8 <PCU_Tasks+0x5a8>)
 80076bc:	2200      	movs	r2, #0
 80076be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 80076c2:	e017      	b.n	80076f4 <PCU_Tasks+0x5d4>
 80076c4:	20000de4 	.word	0x20000de4
 80076c8:	2000a664 	.word	0x2000a664
 80076cc:	20000d26 	.word	0x20000d26
 80076d0:	2000000c 	.word	0x2000000c
 80076d4:	d1b71759 	.word	0xd1b71759
 80076d8:	08017ea8 	.word	0x08017ea8
 80076dc:	20000b5c 	.word	0x20000b5c
 80076e0:	08017edc 	.word	0x08017edc
 80076e4:	08017f00 	.word	0x08017f00
          pack.powerStatus.firstModuleId = moduleId;
 80076e8:	4ab5      	ldr	r2, [pc, #724]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 80076ee:	4bb4      	ldr	r3, [pc, #720]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 80076f4:	4bb2      	ldr	r3, [pc, #712]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80076f6:	7e9b      	ldrb	r3, [r3, #26]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 8091 	bne.w	8007820 <PCU_Tasks+0x700>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 80076fe:	4bb0      	ldr	r3, [pc, #704]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007700:	7e5b      	ldrb	r3, [r3, #25]
 8007702:	4618      	mov	r0, r3
 8007704:	f003 f81e 	bl	800a744 <MCU_ModuleIndexFromId>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]
        if (firstModuleIndex != pack.moduleCount){
 800770c:	4bac      	ldr	r3, [pc, #688]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800770e:	7d1b      	ldrb	r3, [r3, #20]
 8007710:	7bba      	ldrb	r2, [r7, #14]
 8007712:	429a      	cmp	r2, r3
 8007714:	d077      	beq.n	8007806 <PCU_Tasks+0x6e6>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4aaa      	ldr	r2, [pc, #680]	@ (80079c4 <PCU_Tasks+0x8a4>)
 800771a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	4413      	add	r3, r2
 8007724:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007728:	789b      	ldrb	r3, [r3, #2]
 800772a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d00e      	beq.n	8007752 <PCU_Tasks+0x632>
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	4aa3      	ldr	r2, [pc, #652]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007738:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	4413      	add	r3, r2
 8007742:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007746:	789b      	ldrb	r3, [r3, #2]
 8007748:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d113      	bne.n	800777a <PCU_Tasks+0x65a>
             pack.powerStatus.powerStage = stageSelectModule;
 8007752:	4b9b      	ldr	r3, [pc, #620]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007754:	2200      	movs	r2, #0
 8007756:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8007758:	4b9b      	ldr	r3, [pc, #620]	@ (80079c8 <PCU_Tasks+0x8a8>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	2b03      	cmp	r3, #3
 8007762:	d15d      	bne.n	8007820 <PCU_Tasks+0x700>
 8007764:	4b96      	ldr	r3, [pc, #600]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007766:	7e5b      	ldrb	r3, [r3, #25]
 8007768:	461a      	mov	r2, r3
 800776a:	4998      	ldr	r1, [pc, #608]	@ (80079cc <PCU_Tasks+0x8ac>)
 800776c:	4898      	ldr	r0, [pc, #608]	@ (80079d0 <PCU_Tasks+0x8b0>)
 800776e:	f00c fb63 	bl	8013e38 <siprintf>
 8007772:	4897      	ldr	r0, [pc, #604]	@ (80079d0 <PCU_Tasks+0x8b0>)
 8007774:	f7fd ff44 	bl	8005600 <serialOut>
 8007778:	e052      	b.n	8007820 <PCU_Tasks+0x700>
          } else if (pack.vcuRequestedState == packOn){
 800777a:	4b91      	ldr	r3, [pc, #580]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800777c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007780:	2b03      	cmp	r3, #3
 8007782:	d11d      	bne.n	80077c0 <PCU_Tasks+0x6a0>
            if (module[firstModuleIndex].currentState == moduleOn){
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	4a8f      	ldr	r2, [pc, #572]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007788:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	3327      	adds	r3, #39	@ 0x27
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b03      	cmp	r3, #3
 8007798:	d107      	bne.n	80077aa <PCU_Tasks+0x68a>
              pack.state = packOn;
 800779a:	4b89      	ldr	r3, [pc, #548]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800779c:	2203      	movs	r2, #3
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 80077a2:	4b87      	ldr	r3, [pc, #540]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80077a4:	2202      	movs	r2, #2
 80077a6:	769a      	strb	r2, [r3, #26]
 80077a8:	e03a      	b.n	8007820 <PCU_Tasks+0x700>
                module[firstModuleIndex].nextState = moduleOn;
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	4a85      	ldr	r2, [pc, #532]	@ (80079c4 <PCU_Tasks+0x8a4>)
 80077ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077b2:	fb01 f303 	mul.w	r3, r1, r3
 80077b6:	4413      	add	r3, r2
 80077b8:	3328      	adds	r3, #40	@ 0x28
 80077ba:	2203      	movs	r2, #3
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e02f      	b.n	8007820 <PCU_Tasks+0x700>
          } else if (pack.vcuRequestedState == packPrecharge){
 80077c0:	4b7f      	ldr	r3, [pc, #508]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80077c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d12a      	bne.n	8007820 <PCU_Tasks+0x700>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	4a7d      	ldr	r2, [pc, #500]	@ (80079c4 <PCU_Tasks+0x8a4>)
 80077ce:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	3327      	adds	r3, #39	@ 0x27
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d107      	bne.n	80077f0 <PCU_Tasks+0x6d0>
              pack.state = packPrecharge;
 80077e0:	4b77      	ldr	r3, [pc, #476]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 80077e8:	4b75      	ldr	r3, [pc, #468]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80077ea:	2202      	movs	r2, #2
 80077ec:	769a      	strb	r2, [r3, #26]
 80077ee:	e017      	b.n	8007820 <PCU_Tasks+0x700>
                module[firstModuleIndex].nextState = modulePrecharge;
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	4a74      	ldr	r2, [pc, #464]	@ (80079c4 <PCU_Tasks+0x8a4>)
 80077f4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077f8:	fb01 f303 	mul.w	r3, r1, r3
 80077fc:	4413      	add	r3, r2
 80077fe:	3328      	adds	r3, #40	@ 0x28
 8007800:	2202      	movs	r2, #2
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e00c      	b.n	8007820 <PCU_Tasks+0x700>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007806:	4b70      	ldr	r3, [pc, #448]	@ (80079c8 <PCU_Tasks+0x8a8>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d106      	bne.n	8007820 <PCU_Tasks+0x700>
 8007812:	4970      	ldr	r1, [pc, #448]	@ (80079d4 <PCU_Tasks+0x8b4>)
 8007814:	486e      	ldr	r0, [pc, #440]	@ (80079d0 <PCU_Tasks+0x8b0>)
 8007816:	f00c fb0f 	bl	8013e38 <siprintf>
 800781a:	486d      	ldr	r0, [pc, #436]	@ (80079d0 <PCU_Tasks+0x8b0>)
 800781c:	f7fd fef0 	bl	8005600 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e138      	b.n	8007a98 <PCU_Tasks+0x978>
      if(module[index].faultCode.overCurrent == true){
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	4a66      	ldr	r2, [pc, #408]	@ (80079c4 <PCU_Tasks+0x8a4>)
 800782a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007838:	789b      	ldrb	r3, [r3, #2]
 800783a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d127      	bne.n	8007894 <PCU_Tasks+0x774>
        if (pack.vcuRequestedState != packOff){
 8007844:	4b5e      	ldr	r3, [pc, #376]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <PCU_Tasks+0x744>
          module[index].nextState = moduleStandby;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	4a5c      	ldr	r2, [pc, #368]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007852:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	4413      	add	r3, r2
 800785c:	3328      	adds	r3, #40	@ 0x28
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e0ba      	b.n	80079da <PCU_Tasks+0x8ba>
          module[index].nextState = moduleOff;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	4a57      	ldr	r2, [pc, #348]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007868:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	3328      	adds	r3, #40	@ 0x28
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4a52      	ldr	r2, [pc, #328]	@ (80079c4 <PCU_Tasks+0x8a4>)
 800787c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800788a:	7893      	ldrb	r3, [r2, #2]
 800788c:	f36f 0382 	bfc	r3, #2, #1
 8007890:	7093      	strb	r3, [r2, #2]
 8007892:	e0a2      	b.n	80079da <PCU_Tasks+0x8ba>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	4a4b      	ldr	r2, [pc, #300]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007898:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80078a6:	789b      	ldrb	r3, [r3, #2]
 80078a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f040 8093 	bne.w	80079da <PCU_Tasks+0x8ba>
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	4a43      	ldr	r2, [pc, #268]	@ (80079c4 <PCU_Tasks+0x8a4>)
 80078b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f040 8083 	bne.w	80079da <PCU_Tasks+0x8ba>
        switch (pack.vcuRequestedState){
 80078d4:	4b3a      	ldr	r3, [pc, #232]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80078d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d87c      	bhi.n	80079d8 <PCU_Tasks+0x8b8>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <PCU_Tasks+0x7c4>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	0800799b 	.word	0x0800799b
 80078e8:	08007975 	.word	0x08007975
 80078ec:	08007945 	.word	0x08007945
 80078f0:	080078f5 	.word	0x080078f5
            if(pack.state == packOn){
 80078f4:	4b32      	ldr	r3, [pc, #200]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80078f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d109      	bne.n	8007912 <PCU_Tasks+0x7f2>
              module[index].nextState = moduleOn;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	4a30      	ldr	r2, [pc, #192]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007902:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	4413      	add	r3, r2
 800790c:	3328      	adds	r3, #40	@ 0x28
 800790e:	2203      	movs	r2, #3
 8007910:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 8007912:	4b2b      	ldr	r3, [pc, #172]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007914:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007918:	2b09      	cmp	r3, #9
 800791a:	d804      	bhi.n	8007926 <PCU_Tasks+0x806>
 800791c:	4b28      	ldr	r3, [pc, #160]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007924:	e059      	b.n	80079da <PCU_Tasks+0x8ba>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 8007926:	4b26      	ldr	r3, [pc, #152]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800792c:	2bbe      	cmp	r3, #190	@ 0xbe
 800792e:	d904      	bls.n	800793a <PCU_Tasks+0x81a>
 8007930:	4b23      	ldr	r3, [pc, #140]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007932:	2203      	movs	r2, #3
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007938:	e04f      	b.n	80079da <PCU_Tasks+0x8ba>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 800793a:	4b21      	ldr	r3, [pc, #132]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800793c:	2202      	movs	r2, #2
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007942:	e04a      	b.n	80079da <PCU_Tasks+0x8ba>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8007944:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800794a:	2b02      	cmp	r3, #2
 800794c:	d10d      	bne.n	800796a <PCU_Tasks+0x84a>
 800794e:	7bfa      	ldrb	r2, [r7, #15]
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	429a      	cmp	r2, r3
 8007954:	d009      	beq.n	800796a <PCU_Tasks+0x84a>
              module[index].nextState = moduleStandby;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	4a1a      	ldr	r2, [pc, #104]	@ (80079c4 <PCU_Tasks+0x8a4>)
 800795a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800795e:	fb01 f303 	mul.w	r3, r1, r3
 8007962:	4413      	add	r3, r2
 8007964:	3328      	adds	r3, #40	@ 0x28
 8007966:	2201      	movs	r2, #1
 8007968:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 800796a:	4b15      	ldr	r3, [pc, #84]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007972:	e032      	b.n	80079da <PCU_Tasks+0x8ba>
            module[index].nextState = moduleStandby;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	4a13      	ldr	r2, [pc, #76]	@ (80079c4 <PCU_Tasks+0x8a4>)
 8007978:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	4413      	add	r3, r2
 8007982:	3328      	adds	r3, #40	@ 0x28
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 8007988:	4b0d      	ldr	r3, [pc, #52]	@ (80079c0 <PCU_Tasks+0x8a0>)
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <PCU_Tasks+0x8a0>)
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007998:	e01f      	b.n	80079da <PCU_Tasks+0x8ba>
            module[index].nextState = moduleOff;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	4a09      	ldr	r2, [pc, #36]	@ (80079c4 <PCU_Tasks+0x8a4>)
 800799e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	3328      	adds	r3, #40	@ 0x28
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 80079ae:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 80079b6:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <PCU_Tasks+0x8a0>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 80079be:	e00c      	b.n	80079da <PCU_Tasks+0x8ba>
 80079c0:	2000a664 	.word	0x2000a664
 80079c4:	20000de4 	.word	0x20000de4
 80079c8:	2000000c 	.word	0x2000000c
 80079cc:	08017f24 	.word	0x08017f24
 80079d0:	20000b5c 	.word	0x20000b5c
 80079d4:	08017f64 	.word	0x08017f64
            break;
 80079d8:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007b08 <PCU_Tasks+0x9e8>)
 80079de:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	4413      	add	r3, r2
 80079e8:	332a      	adds	r3, #42	@ 0x2a
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d13a      	bne.n	8007a66 <PCU_Tasks+0x946>
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4a45      	ldr	r2, [pc, #276]	@ (8007b08 <PCU_Tasks+0x9e8>)
 80079f4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079f8:	fb01 f303 	mul.w	r3, r1, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	3329      	adds	r3, #41	@ 0x29
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	4940      	ldr	r1, [pc, #256]	@ (8007b08 <PCU_Tasks+0x9e8>)
 8007a06:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007a0a:	fb00 f303 	mul.w	r3, r0, r3
 8007a0e:	440b      	add	r3, r1
 8007a10:	3328      	adds	r3, #40	@ 0x28
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d126      	bne.n	8007a66 <PCU_Tasks+0x946>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8007b08 <PCU_Tasks+0x9e8>)
 8007a1c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a20:	fb01 f303 	mul.w	r3, r1, r3
 8007a24:	4413      	add	r3, r2
 8007a26:	3308      	adds	r3, #8
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f002 ff36 	bl	800a89c <MCU_TicksSinceLastStateTx>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a36:	d92c      	bls.n	8007a92 <PCU_Tasks+0x972>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	4a33      	ldr	r2, [pc, #204]	@ (8007b08 <PCU_Tasks+0x9e8>)
 8007a3c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	3308      	adds	r3, #8
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	492e      	ldr	r1, [pc, #184]	@ (8007b08 <PCU_Tasks+0x9e8>)
 8007a4e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007a52:	fb00 f303 	mul.w	r3, r0, r3
 8007a56:	440b      	add	r3, r1
 8007a58:	3328      	adds	r3, #40	@ 0x28
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f002 fc36 	bl	800a2d0 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007a64:	e015      	b.n	8007a92 <PCU_Tasks+0x972>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	4a27      	ldr	r2, [pc, #156]	@ (8007b08 <PCU_Tasks+0x9e8>)
 8007a6a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	3308      	adds	r3, #8
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	4923      	ldr	r1, [pc, #140]	@ (8007b08 <PCU_Tasks+0x9e8>)
 8007a7c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007a80:	fb00 f303 	mul.w	r3, r0, r3
 8007a84:	440b      	add	r3, r1
 8007a86:	3328      	adds	r3, #40	@ 0x28
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f002 fc1f 	bl	800a2d0 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	3301      	adds	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
 8007a98:	4b1c      	ldr	r3, [pc, #112]	@ (8007b0c <PCU_Tasks+0x9ec>)
 8007a9a:	7d1b      	ldrb	r3, [r3, #20]
 8007a9c:	7bfa      	ldrb	r2, [r7, #15]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	f4ff aec1 	bcc.w	8007826 <PCU_Tasks+0x706>
    MCU_UpdateStats();
 8007aa4:	f000 f8ec 	bl	8007c80 <MCU_UpdateStats>
    if(sendMaxState >0){
 8007aa8:	4b19      	ldr	r3, [pc, #100]	@ (8007b10 <PCU_Tasks+0x9f0>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <PCU_Tasks+0x99c>
      MCU_TransmitMaxState(pack.vcuRequestedState);
 8007ab0:	4b16      	ldr	r3, [pc, #88]	@ (8007b0c <PCU_Tasks+0x9ec>)
 8007ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f002 fccc 	bl	800a454 <MCU_TransmitMaxState>
    if(sendState > 0){
 8007abc:	4b15      	ldr	r3, [pc, #84]	@ (8007b14 <PCU_Tasks+0x9f4>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01c      	beq.n	8007afe <PCU_Tasks+0x9de>
      if (pack.rtcValid == false) VCU_RequestTime();
 8007ac4:	4b11      	ldr	r3, [pc, #68]	@ (8007b0c <PCU_Tasks+0x9ec>)
 8007ac6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007aca:	f083 0301 	eor.w	r3, r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <PCU_Tasks+0x9b8>
 8007ad4:	f005 fba4 	bl	800d220 <VCU_RequestTime>
      VCU_TransmitBmsState();
 8007ad8:	f004 f9a2 	bl	800be20 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8007adc:	f004 fa88 	bl	800bff0 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8007ae0:	f004 fb6a 	bl	800c1b8 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8007ae4:	f004 fcac 	bl	800c440 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 8007ae8:	f004 fdd6 	bl	800c698 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 8007aec:	f004 fef4 	bl	800c8d8 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8007af0:	f004 ff60 	bl	800c9b4 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8007af4:	f004 ffcc 	bl	800ca90 <VCU_TransmitBmsData10>
      sendState=0;
 8007af8:	4b06      	ldr	r3, [pc, #24]	@ (8007b14 <PCU_Tasks+0x9f4>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000de4 	.word	0x20000de4
 8007b0c:	2000a664 	.word	0x2000a664
 8007b10:	20000d25 	.word	0x20000d25
 8007b14:	20000d26 	.word	0x20000d26

08007b18 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7f9 fa5f 	bl	8000fe8 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fa ff12 	bl	8002956 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	21ff      	movs	r1, #255	@ 0xff
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fa ff41 	bl	80029be <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 8007b3c:	484a      	ldr	r0, [pc, #296]	@ (8007c68 <DRV_CANFDSPI_Init+0x150>)
 8007b3e:	f7fa f923 	bl	8001d88 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 8007b42:	4a49      	ldr	r2, [pc, #292]	@ (8007c68 <DRV_CANFDSPI_Init+0x150>)
 8007b44:	7813      	ldrb	r3, [r2, #0]
 8007b46:	f043 0320 	orr.w	r3, r3, #32
 8007b4a:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8007b4c:	4a46      	ldr	r2, [pc, #280]	@ (8007c68 <DRV_CANFDSPI_Init+0x150>)
 8007b4e:	7853      	ldrb	r3, [r2, #1]
 8007b50:	f36f 1386 	bfc	r3, #6, #1
 8007b54:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	4943      	ldr	r1, [pc, #268]	@ (8007c68 <DRV_CANFDSPI_Init+0x150>)
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fa f886 	bl	8001c6c <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8007b60:	4842      	ldr	r0, [pc, #264]	@ (8007c6c <DRV_CANFDSPI_Init+0x154>)
 8007b62:	f7fa fa21 	bl	8001fa8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8007b66:	4a41      	ldr	r2, [pc, #260]	@ (8007c6c <DRV_CANFDSPI_Init+0x154>)
 8007b68:	7853      	ldrb	r3, [r2, #1]
 8007b6a:	2107      	movs	r1, #7
 8007b6c:	f361 0304 	bfi	r3, r1, #0, #5
 8007b70:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 8007b72:	4a3e      	ldr	r2, [pc, #248]	@ (8007c6c <DRV_CANFDSPI_Init+0x154>)
 8007b74:	7853      	ldrb	r3, [r2, #1]
 8007b76:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8007b7a:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8007b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8007c6c <DRV_CANFDSPI_Init+0x154>)
 8007b7e:	7813      	ldrb	r3, [r2, #0]
 8007b80:	2101      	movs	r1, #1
 8007b82:	f361 0345 	bfi	r3, r1, #1, #5
 8007b86:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	4a38      	ldr	r2, [pc, #224]	@ (8007c6c <DRV_CANFDSPI_Init+0x154>)
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fa f9b2 	bl	8001ef8 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8007b94:	4836      	ldr	r0, [pc, #216]	@ (8007c70 <DRV_CANFDSPI_Init+0x158>)
 8007b96:	f7fa fc5f 	bl	8002458 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 8007b9a:	4a35      	ldr	r2, [pc, #212]	@ (8007c70 <DRV_CANFDSPI_Init+0x158>)
 8007b9c:	7813      	ldrb	r3, [r2, #0]
 8007b9e:	210f      	movs	r1, #15
 8007ba0:	f361 0345 	bfi	r3, r1, #1, #5
 8007ba4:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8007ba6:	4a32      	ldr	r2, [pc, #200]	@ (8007c70 <DRV_CANFDSPI_Init+0x158>)
 8007ba8:	8813      	ldrh	r3, [r2, #0]
 8007baa:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8007bae:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c70 <DRV_CANFDSPI_Init+0x158>)
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fa fc02 	bl	80023c0 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8007bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c74 <DRV_CANFDSPI_Init+0x15c>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8007bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8007c74 <DRV_CANFDSPI_Init+0x15c>)
 8007bc4:	8813      	ldrh	r3, [r2, #0]
 8007bc6:	f36f 030a 	bfc	r3, #0, #11
 8007bca:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8007bcc:	4a29      	ldr	r2, [pc, #164]	@ (8007c74 <DRV_CANFDSPI_Init+0x15c>)
 8007bce:	78d3      	ldrb	r3, [r2, #3]
 8007bd0:	f36f 1386 	bfc	r3, #6, #1
 8007bd4:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 8007bd6:	4a27      	ldr	r2, [pc, #156]	@ (8007c74 <DRV_CANFDSPI_Init+0x15c>)
 8007bd8:	6813      	ldr	r3, [r2, #0]
 8007bda:	f36f 23dc 	bfc	r3, #11, #18
 8007bde:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	4a24      	ldr	r2, [pc, #144]	@ (8007c74 <DRV_CANFDSPI_Init+0x15c>)
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fa fb6c 	bl	80022c4 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8007bec:	4b22      	ldr	r3, [pc, #136]	@ (8007c78 <DRV_CANFDSPI_Init+0x160>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8007bf2:	4a21      	ldr	r2, [pc, #132]	@ (8007c78 <DRV_CANFDSPI_Init+0x160>)
 8007bf4:	8813      	ldrh	r3, [r2, #0]
 8007bf6:	f36f 030a 	bfc	r3, #0, #11
 8007bfa:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c78 <DRV_CANFDSPI_Init+0x160>)
 8007bfe:	78d3      	ldrb	r3, [r2, #3]
 8007c00:	f36f 1386 	bfc	r3, #6, #1
 8007c04:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 8007c06:	4a1c      	ldr	r2, [pc, #112]	@ (8007c78 <DRV_CANFDSPI_Init+0x160>)
 8007c08:	6813      	ldr	r3, [r2, #0]
 8007c0a:	f36f 23dc 	bfc	r3, #11, #18
 8007c0e:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	4a19      	ldr	r2, [pc, #100]	@ (8007c78 <DRV_CANFDSPI_Init+0x160>)
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fa fb76 	bl	8002308 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 8007c1c:	79f8      	ldrb	r0, [r7, #7]
 8007c1e:	2301      	movs	r3, #1
 8007c20:	2201      	movs	r2, #1
 8007c22:	2100      	movs	r1, #0
 8007c24:	f7fa fb94 	bl	8002350 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8007c28:	79f8      	ldrb	r0, [r7, #7]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	2101      	movs	r1, #1
 8007c30:	f7fa ff05 	bl	8002a3e <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fb fe1e 	bl	800387c <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2201      	movs	r2, #1
 8007c44:	2101      	movs	r1, #1
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fa fe05 	bl	8002856 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2103      	movs	r1, #3
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fa fd54 	bl	80026fe <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fa f910 	bl	8001e80 <DRV_CANFDSPI_OperationModeSelect>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000d2c 	.word	0x20000d2c
 8007c6c:	20000d30 	.word	0x20000d30
 8007c70:	20000d84 	.word	0x20000d84
 8007c74:	20000d88 	.word	0x20000d88
 8007c78:	20000d8c 	.word	0x20000d8c
 8007c7c:	00000000 	.word	0x00000000

08007c80 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8007c80:	b5b0      	push	{r4, r5, r7, lr}
 8007c82:	b094      	sub	sp, #80	@ 0x50
 8007c84:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint32_t voltage             = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  float moduleCurrent          = 0;
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float moduleMaxChargeA       = 0;
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8007ca8:	23ff      	movs	r3, #255	@ 0xff
 8007caa:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t lowestSoh           = 255;
 8007cac:	23ff      	movs	r3, #255	@ 0xff
 8007cae:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint32_t totalAvgCellVolt    = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t highestCellVolt     = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t lowestCellVolt      = 65535;
 8007cb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cbc:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint32_t totalAvgCellTemp    = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t highestCellTemp     = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t lowestCellTemp      = 65535;
 8007cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cca:	853b      	strh	r3, [r7, #40]	@ 0x28
  float    maxChargeA          = 0;
 8007ccc:	f04f 0300 	mov.w	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  float    maxDischargeA       = 0;
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007cfc:	e275      	b.n	80081ea <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 8007cfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d02:	4a85      	ldr	r2, [pc, #532]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007d04:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007d12:	789b      	ldrb	r3, [r3, #2]
 8007d14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 8260 	bne.w	80081e0 <MCU_UpdateStats+0x560>
 8007d20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d24:	4a7c      	ldr	r2, [pc, #496]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007d26:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007d34:	789b      	ldrb	r3, [r3, #2]
 8007d36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 824f 	bne.w	80081e0 <MCU_UpdateStats+0x560>
 8007d42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d46:	4a74      	ldr	r2, [pc, #464]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007d48:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007d56:	789b      	ldrb	r3, [r3, #2]
 8007d58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 823e 	bne.w	80081e0 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 8007d64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d68:	4a6b      	ldr	r2, [pc, #428]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007d6a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	3327      	adds	r3, #39	@ 0x27
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	f040 8146 	bne.w	800800a <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 8007d7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d82:	4a65      	ldr	r2, [pc, #404]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007d84:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	330e      	adds	r3, #14
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7f8 fbae 	bl	80004f4 <__aeabi_i2d>
 8007d98:	a359      	add	r3, pc, #356	@ (adr r3, 8007f00 <MCU_UpdateStats+0x280>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fc13 	bl	80005c8 <__aeabi_dmul>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4610      	mov	r0, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	a357      	add	r3, pc, #348	@ (adr r3, 8007f08 <MCU_UpdateStats+0x288>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f7f8 fa52 	bl	8000258 <__aeabi_dsub>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4610      	mov	r0, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f7f8 fefc 	bl	8000bb8 <__aeabi_d2f>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8007dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007dc8:	4a53      	ldr	r2, [pc, #332]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007dca:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007dce:	fb01 f303 	mul.w	r3, r1, r3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3310      	adds	r3, #16
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7f8 fb8b 	bl	80004f4 <__aeabi_i2d>
 8007dde:	a348      	add	r3, pc, #288	@ (adr r3, 8007f00 <MCU_UpdateStats+0x280>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f7f8 fbf0 	bl	80005c8 <__aeabi_dmul>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4610      	mov	r0, r2
 8007dee:	4619      	mov	r1, r3
 8007df0:	a345      	add	r3, pc, #276	@ (adr r3, 8007f08 <MCU_UpdateStats+0x288>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fa2f 	bl	8000258 <__aeabi_dsub>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7f8 fed9 	bl	8000bb8 <__aeabi_d2f>
 8007e06:	4603      	mov	r3, r0
 8007e08:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 8007e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007e0e:	4a42      	ldr	r2, [pc, #264]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007e10:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	4413      	add	r3, r2
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e22:	4413      	add	r3, r2
 8007e24:	643b      	str	r3, [r7, #64]	@ 0x40
        //increment module on count
        modulesOn++;
 8007e26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 8007e30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007e34:	4a38      	ldr	r2, [pc, #224]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007e36:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e3a:	fb01 f303 	mul.w	r3, r1, r3
 8007e3e:	4413      	add	r3, r2
 8007e40:	3316      	adds	r3, #22
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f8 fb55 	bl	80004f4 <__aeabi_i2d>
 8007e4a:	a32d      	add	r3, pc, #180	@ (adr r3, 8007f00 <MCU_UpdateStats+0x280>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 fbba 	bl	80005c8 <__aeabi_dmul>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	a32a      	add	r3, pc, #168	@ (adr r3, 8007f08 <MCU_UpdateStats+0x288>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 f9f9 	bl	8000258 <__aeabi_dsub>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f7f8 fea3 	bl	8000bb8 <__aeabi_d2f>
 8007e72:	4603      	mov	r3, r0
 8007e74:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f7f8 fb4e 	bl	8000518 <__aeabi_f2d>
 8007e7c:	a324      	add	r3, pc, #144	@ (adr r3, 8007f10 <MCU_UpdateStats+0x290>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f7f8 f9e9 	bl	8000258 <__aeabi_dsub>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4614      	mov	r4, r2
 8007e8c:	461d      	mov	r5, r3
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7f8 fb42 	bl	8000518 <__aeabi_f2d>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 fe24 	bl	8000ae8 <__aeabi_dcmpgt>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d040      	beq.n	8007f28 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 8007ea6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f18 <MCU_UpdateStats+0x298>)
 8007eac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007eb0:	fb01 f303 	mul.w	r3, r1, r3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007eba:	7893      	ldrb	r3, [r2, #2]
 8007ebc:	f043 0304 	orr.w	r3, r3, #4
 8007ec0:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 8007ec2:	4b16      	ldr	r3, [pc, #88]	@ (8007f1c <MCU_UpdateStats+0x29c>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d16d      	bne.n	8007faa <MCU_UpdateStats+0x32a>
 8007ece:	6938      	ldr	r0, [r7, #16]
 8007ed0:	f7f8 fb22 	bl	8000518 <__aeabi_f2d>
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7f8 fb1d 	bl	8000518 <__aeabi_f2d>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	e9cd 2300 	strd	r2, r3, [sp]
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	462b      	mov	r3, r5
 8007eea:	490d      	ldr	r1, [pc, #52]	@ (8007f20 <MCU_UpdateStats+0x2a0>)
 8007eec:	480d      	ldr	r0, [pc, #52]	@ (8007f24 <MCU_UpdateStats+0x2a4>)
 8007eee:	f00b ffa3 	bl	8013e38 <siprintf>
 8007ef2:	480c      	ldr	r0, [pc, #48]	@ (8007f24 <MCU_UpdateStats+0x2a4>)
 8007ef4:	f7fd fb84 	bl	8005600 <serialOut>
 8007ef8:	e057      	b.n	8007faa <MCU_UpdateStats+0x32a>
 8007efa:	bf00      	nop
 8007efc:	f3af 8000 	nop.w
 8007f00:	47ae147b 	.word	0x47ae147b
 8007f04:	3f947ae1 	.word	0x3f947ae1
 8007f08:	47ae147b 	.word	0x47ae147b
 8007f0c:	40847ae1 	.word	0x40847ae1
 8007f10:	33333333 	.word	0x33333333
 8007f14:	3fd33333 	.word	0x3fd33333
 8007f18:	20000de4 	.word	0x20000de4
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	08017f88 	.word	0x08017f88
 8007f24:	20000b5c 	.word	0x20000b5c
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 8007f28:	6938      	ldr	r0, [r7, #16]
 8007f2a:	f7f8 faf5 	bl	8000518 <__aeabi_f2d>
 8007f2e:	a3d7      	add	r3, pc, #860	@ (adr r3, 800828c <MCU_UpdateStats+0x60c>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 f992 	bl	800025c <__adddf3>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	461d      	mov	r5, r3
 8007f40:	68b8      	ldr	r0, [r7, #8]
 8007f42:	f7f8 fae9 	bl	8000518 <__aeabi_f2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 fdad 	bl	8000aac <__aeabi_dcmplt>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d028      	beq.n	8007faa <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 8007f58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007f5c:	4ac4      	ldr	r2, [pc, #784]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8007f5e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f62:	fb01 f303 	mul.w	r3, r1, r3
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007f6c:	7893      	ldrb	r3, [r2, #2]
 8007f6e:	f043 0304 	orr.w	r3, r3, #4
 8007f72:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 8007f74:	4bbf      	ldr	r3, [pc, #764]	@ (8008274 <MCU_UpdateStats+0x5f4>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d114      	bne.n	8007faa <MCU_UpdateStats+0x32a>
 8007f80:	6938      	ldr	r0, [r7, #16]
 8007f82:	f7f8 fac9 	bl	8000518 <__aeabi_f2d>
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	68b8      	ldr	r0, [r7, #8]
 8007f8c:	f7f8 fac4 	bl	8000518 <__aeabi_f2d>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	e9cd 2300 	strd	r2, r3, [sp]
 8007f98:	4622      	mov	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	49b6      	ldr	r1, [pc, #728]	@ (8008278 <MCU_UpdateStats+0x5f8>)
 8007f9e:	48b7      	ldr	r0, [pc, #732]	@ (800827c <MCU_UpdateStats+0x5fc>)
 8007fa0:	f00b ff4a 	bl	8013e38 <siprintf>
 8007fa4:	48b5      	ldr	r0, [pc, #724]	@ (800827c <MCU_UpdateStats+0x5fc>)
 8007fa6:	f7fd fb2b 	bl	8005600 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 8007faa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007fae:	4ab0      	ldr	r2, [pc, #704]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8007fb0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007fbe:	789b      	ldrb	r3, [r3, #2]
 8007fc0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d107      	bne.n	8007fda <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 8007fca:	4bad      	ldr	r3, [pc, #692]	@ (8008280 <MCU_UpdateStats+0x600>)
 8007fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d102      	bne.n	8007fda <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 8007fd4:	4baa      	ldr	r3, [pc, #680]	@ (8008280 <MCU_UpdateStats+0x600>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 8007fda:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fe6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 8007fea:	ed97 7a08 	vldr	s14, [r7, #32]
 8007fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ff6:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 8007ffa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8007ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8008002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008006:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 800800a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800800e:	4a98      	ldr	r2, [pc, #608]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008010:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	4413      	add	r3, r2
 800801a:	3312      	adds	r3, #18
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 8008026:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800802a:	4a91      	ldr	r2, [pc, #580]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 800802c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	4413      	add	r3, r2
 8008036:	3322      	adds	r3, #34	@ 0x22
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803e:	4413      	add	r3, r2
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 8008042:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008046:	4a8a      	ldr	r2, [pc, #552]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008048:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	331c      	adds	r3, #28
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	4413      	add	r3, r2
 800805c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 800805e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008062:	4a83      	ldr	r2, [pc, #524]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008064:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	4413      	add	r3, r2
 800806e:	332b      	adds	r3, #43	@ 0x2b
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008076:	4293      	cmp	r3, r2
 8008078:	d90a      	bls.n	8008090 <MCU_UpdateStats+0x410>
 800807a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800807e:	4a7c      	ldr	r2, [pc, #496]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008080:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	4413      	add	r3, r2
 800808a:	332b      	adds	r3, #43	@ 0x2b
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8008090:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008094:	4a76      	ldr	r2, [pc, #472]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008096:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800809a:	fb01 f303 	mul.w	r3, r1, r3
 800809e:	4413      	add	r3, r2
 80080a0:	332c      	adds	r3, #44	@ 0x2c
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d90a      	bls.n	80080c2 <MCU_UpdateStats+0x442>
 80080ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080b0:	4a6f      	ldr	r2, [pc, #444]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 80080b2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	4413      	add	r3, r2
 80080bc:	332c      	adds	r3, #44	@ 0x2c
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	873b      	strh	r3, [r7, #56]	@ 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 80080c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080c6:	4a6a      	ldr	r2, [pc, #424]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 80080c8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	3320      	adds	r3, #32
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80080d8:	429a      	cmp	r2, r3
 80080da:	d915      	bls.n	8008108 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 80080dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080e0:	4a63      	ldr	r2, [pc, #396]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 80080e2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	4413      	add	r3, r2
 80080ec:	3320      	adds	r3, #32
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	863b      	strh	r3, [r7, #48]	@ 0x30
        modLowestCellVolt = module[index].moduleId;
 80080f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080f6:	4a5e      	ldr	r2, [pc, #376]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 80080f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	4413      	add	r3, r2
 8008102:	3308      	adds	r3, #8
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 8008108:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800810c:	4a58      	ldr	r2, [pc, #352]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 800810e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	331e      	adds	r3, #30
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800811e:	429a      	cmp	r2, r3
 8008120:	d215      	bcs.n	800814e <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 8008122:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008126:	4a52      	ldr	r2, [pc, #328]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008128:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	4413      	add	r3, r2
 8008132:	331e      	adds	r3, #30
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	867b      	strh	r3, [r7, #50]	@ 0x32
        modHighestCellVolt = module[index].moduleId;
 8008138:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800813c:	4a4c      	ldr	r2, [pc, #304]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 800813e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008142:	fb01 f303 	mul.w	r3, r1, r3
 8008146:	4413      	add	r3, r2
 8008148:	3308      	adds	r3, #8
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 800814e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008152:	4a47      	ldr	r2, [pc, #284]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008154:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	4413      	add	r3, r2
 800815e:	3318      	adds	r3, #24
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008164:	429a      	cmp	r2, r3
 8008166:	d215      	bcs.n	8008194 <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8008168:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800816c:	4a40      	ldr	r2, [pc, #256]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 800816e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	4413      	add	r3, r2
 8008178:	3318      	adds	r3, #24
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        modHighestCellTemp = module[index].moduleId;
 800817e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008182:	4a3b      	ldr	r2, [pc, #236]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 8008184:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	4413      	add	r3, r2
 800818e:	3308      	adds	r3, #8
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 8008194:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008198:	4a35      	ldr	r2, [pc, #212]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 800819a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	4413      	add	r3, r2
 80081a4:	331a      	adds	r3, #26
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d915      	bls.n	80081da <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 80081ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80081b2:	4a2f      	ldr	r2, [pc, #188]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 80081b4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80081b8:	fb01 f303 	mul.w	r3, r1, r3
 80081bc:	4413      	add	r3, r2
 80081be:	331a      	adds	r3, #26
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	853b      	strh	r3, [r7, #40]	@ 0x28
        modLowestCellTemp = module[index].moduleId;
 80081c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80081c8:	4a29      	ldr	r2, [pc, #164]	@ (8008270 <MCU_UpdateStats+0x5f0>)
 80081ca:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	3308      	adds	r3, #8
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 80081da:	7efb      	ldrb	r3, [r7, #27]
 80081dc:	3301      	adds	r3, #1
 80081de:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 80081e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80081e4:	3301      	adds	r3, #1
 80081e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80081ea:	4b25      	ldr	r3, [pc, #148]	@ (8008280 <MCU_UpdateStats+0x600>)
 80081ec:	7d1b      	ldrb	r3, [r3, #20]
 80081ee:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80081f2:	429a      	cmp	r2, r3
 80081f4:	f4ff ad83 	bcc.w	8007cfe <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 80081f8:	4a21      	ldr	r2, [pc, #132]	@ (8008280 <MCU_UpdateStats+0x600>)
 80081fa:	7efb      	ldrb	r3, [r7, #27]
 80081fc:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 80081fe:	4b20      	ldr	r3, [pc, #128]	@ (8008280 <MCU_UpdateStats+0x600>)
 8008200:	7d1a      	ldrb	r2, [r3, #20]
 8008202:	4b1f      	ldr	r3, [pc, #124]	@ (8008280 <MCU_UpdateStats+0x600>)
 8008204:	7ddb      	ldrb	r3, [r3, #23]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4b1d      	ldr	r3, [pc, #116]	@ (8008280 <MCU_UpdateStats+0x600>)
 800820c:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 800820e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8087 	beq.w	8008326 <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 8008218:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800821c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800821e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008222:	b29a      	uxth	r2, r3
 8008224:	4b16      	ldr	r3, [pc, #88]	@ (8008280 <MCU_UpdateStats+0x600>)
 8008226:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008228:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800822c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008284 <MCU_UpdateStats+0x604>
 8008230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008238:	dd32      	ble.n	80082a0 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 800823a:	4b0e      	ldr	r3, [pc, #56]	@ (8008274 <MCU_UpdateStats+0x5f4>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b03      	cmp	r3, #3
 8008244:	d129      	bne.n	800829a <MCU_UpdateStats+0x61a>
 8008246:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008248:	f7f8 f966 	bl	8000518 <__aeabi_f2d>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	a105      	add	r1, pc, #20	@ (adr r1, 8008268 <MCU_UpdateStats+0x5e8>)
 8008252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008256:	e9cd 0100 	strd	r0, r1, [sp]
 800825a:	490b      	ldr	r1, [pc, #44]	@ (8008288 <MCU_UpdateStats+0x608>)
 800825c:	4807      	ldr	r0, [pc, #28]	@ (800827c <MCU_UpdateStats+0x5fc>)
 800825e:	f00b fdeb 	bl	8013e38 <siprintf>
 8008262:	e017      	b.n	8008294 <MCU_UpdateStats+0x614>
 8008264:	f3af 8000 	nop.w
 8008268:	00000000 	.word	0x00000000
 800826c:	409a3300 	.word	0x409a3300
 8008270:	20000de4 	.word	0x20000de4
 8008274:	2000000c 	.word	0x2000000c
 8008278:	08017fd4 	.word	0x08017fd4
 800827c:	20000b5c 	.word	0x20000b5c
 8008280:	2000a664 	.word	0x2000a664
 8008284:	44d19800 	.word	0x44d19800
 8008288:	08018024 	.word	0x08018024
 800828c:	33333333 	.word	0x33333333
 8008290:	3fd33333 	.word	0x3fd33333
 8008294:	48b0      	ldr	r0, [pc, #704]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 8008296:	f7fd f9b3 	bl	8005600 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 800829a:	4bb0      	ldr	r3, [pc, #704]	@ (800855c <MCU_UpdateStats+0x8dc>)
 800829c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800829e:	e01e      	b.n	80082de <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 80082a0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80082a4:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8008560 <MCU_UpdateStats+0x8e0>
 80082a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b0:	d515      	bpl.n	80082de <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 80082b2:	4bac      	ldr	r3, [pc, #688]	@ (8008564 <MCU_UpdateStats+0x8e4>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d10d      	bne.n	80082da <MCU_UpdateStats+0x65a>
 80082be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80082c0:	f7f8 f92a 	bl	8000518 <__aeabi_f2d>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	49a7      	ldr	r1, [pc, #668]	@ (8008568 <MCU_UpdateStats+0x8e8>)
 80082ca:	9100      	str	r1, [sp, #0]
 80082cc:	49a7      	ldr	r1, [pc, #668]	@ (800856c <MCU_UpdateStats+0x8ec>)
 80082ce:	48a2      	ldr	r0, [pc, #648]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 80082d0:	f00b fdb2 	bl	8013e38 <siprintf>
 80082d4:	48a0      	ldr	r0, [pc, #640]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 80082d6:	f7fd f993 	bl	8005600 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 80082da:	4ba5      	ldr	r3, [pc, #660]	@ (8008570 <MCU_UpdateStats+0x8f0>)
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80082de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80082e0:	f7f8 f91a 	bl	8000518 <__aeabi_f2d>
 80082e4:	a398      	add	r3, pc, #608	@ (adr r3, 8008548 <MCU_UpdateStats+0x8c8>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f8 fa97 	bl	800081c <__aeabi_ddiv>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4610      	mov	r0, r2
 80082f4:	4619      	mov	r1, r3
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	4b9e      	ldr	r3, [pc, #632]	@ (8008574 <MCU_UpdateStats+0x8f4>)
 80082fc:	f7f7 ffae 	bl	800025c <__adddf3>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	f7f8 fc56 	bl	8000bb8 <__aeabi_d2f>
 800830c:	4603      	mov	r3, r0
 800830e:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008310:	edd7 7a01 	vldr	s15, [r7, #4]
 8008314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008318:	ee17 3a90 	vmov	r3, s15
 800831c:	b29b      	uxth	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	4b95      	ldr	r3, [pc, #596]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008322:	611a      	str	r2, [r3, #16]
 8008324:	e00e      	b.n	8008344 <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 8008326:	4b94      	ldr	r3, [pc, #592]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008328:	2200      	movs	r2, #0
 800832a:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 800832c:	4b93      	ldr	r3, [pc, #588]	@ (800857c <MCU_UpdateStats+0x8fc>)
 800832e:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008330:	edd7 7a01 	vldr	s15, [r7, #4]
 8008334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008338:	ee17 3a90 	vmov	r3, s15
 800833c:	b29b      	uxth	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	4b8d      	ldr	r3, [pc, #564]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008342:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008344:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008348:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8008580 <MCU_UpdateStats+0x900>
 800834c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008354:	dd19      	ble.n	800838a <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008356:	4b83      	ldr	r3, [pc, #524]	@ (8008564 <MCU_UpdateStats+0x8e4>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b03      	cmp	r3, #3
 8008360:	d110      	bne.n	8008384 <MCU_UpdateStats+0x704>
 8008362:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008364:	f7f8 f8d8 	bl	8000518 <__aeabi_f2d>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	a178      	add	r1, pc, #480	@ (adr r1, 8008550 <MCU_UpdateStats+0x8d0>)
 800836e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008372:	e9cd 0100 	strd	r0, r1, [sp]
 8008376:	4983      	ldr	r1, [pc, #524]	@ (8008584 <MCU_UpdateStats+0x904>)
 8008378:	4877      	ldr	r0, [pc, #476]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 800837a:	f00b fd5d 	bl	8013e38 <siprintf>
 800837e:	4876      	ldr	r0, [pc, #472]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 8008380:	f7fd f93e 	bl	8005600 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008384:	4b75      	ldr	r3, [pc, #468]	@ (800855c <MCU_UpdateStats+0x8dc>)
 8008386:	627b      	str	r3, [r7, #36]	@ 0x24
 8008388:	e01e      	b.n	80083c8 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 800838a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800838e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8008560 <MCU_UpdateStats+0x8e0>
 8008392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839a:	d515      	bpl.n	80083c8 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 800839c:	4b71      	ldr	r3, [pc, #452]	@ (8008564 <MCU_UpdateStats+0x8e4>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d10d      	bne.n	80083c4 <MCU_UpdateStats+0x744>
 80083a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80083aa:	f7f8 f8b5 	bl	8000518 <__aeabi_f2d>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	496d      	ldr	r1, [pc, #436]	@ (8008568 <MCU_UpdateStats+0x8e8>)
 80083b4:	9100      	str	r1, [sp, #0]
 80083b6:	4974      	ldr	r1, [pc, #464]	@ (8008588 <MCU_UpdateStats+0x908>)
 80083b8:	4867      	ldr	r0, [pc, #412]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 80083ba:	f00b fd3d 	bl	8013e38 <siprintf>
 80083be:	4866      	ldr	r0, [pc, #408]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 80083c0:	f7fd f91e 	bl	8005600 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 80083c4:	4b6a      	ldr	r3, [pc, #424]	@ (8008570 <MCU_UpdateStats+0x8f0>)
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80083c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80083ca:	f7f8 f8a5 	bl	8000518 <__aeabi_f2d>
 80083ce:	a35e      	add	r3, pc, #376	@ (adr r3, 8008548 <MCU_UpdateStats+0x8c8>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 fa22 	bl	800081c <__aeabi_ddiv>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	4b63      	ldr	r3, [pc, #396]	@ (8008574 <MCU_UpdateStats+0x8f4>)
 80083e6:	f7f7 ff39 	bl	800025c <__adddf3>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	f7f8 fbc1 	bl	8000b78 <__aeabi_d2uiz>
 80083f6:	4603      	mov	r3, r0
 80083f8:	4a5f      	ldr	r2, [pc, #380]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 80083fa:	6353      	str	r3, [r2, #52]	@ 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80083fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8008400:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8008580 <MCU_UpdateStats+0x900>
 8008404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840c:	dd19      	ble.n	8008442 <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 800840e:	4b55      	ldr	r3, [pc, #340]	@ (8008564 <MCU_UpdateStats+0x8e4>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	2b03      	cmp	r3, #3
 8008418:	d110      	bne.n	800843c <MCU_UpdateStats+0x7bc>
 800841a:	6a38      	ldr	r0, [r7, #32]
 800841c:	f7f8 f87c 	bl	8000518 <__aeabi_f2d>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	a14a      	add	r1, pc, #296	@ (adr r1, 8008550 <MCU_UpdateStats+0x8d0>)
 8008426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800842a:	e9cd 0100 	strd	r0, r1, [sp]
 800842e:	4957      	ldr	r1, [pc, #348]	@ (800858c <MCU_UpdateStats+0x90c>)
 8008430:	4849      	ldr	r0, [pc, #292]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 8008432:	f00b fd01 	bl	8013e38 <siprintf>
 8008436:	4848      	ldr	r0, [pc, #288]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 8008438:	f7fd f8e2 	bl	8005600 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 800843c:	4b47      	ldr	r3, [pc, #284]	@ (800855c <MCU_UpdateStats+0x8dc>)
 800843e:	623b      	str	r3, [r7, #32]
 8008440:	e01e      	b.n	8008480 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8008442:	edd7 7a08 	vldr	s15, [r7, #32]
 8008446:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8008560 <MCU_UpdateStats+0x8e0>
 800844a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800844e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008452:	d515      	bpl.n	8008480 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008454:	4b43      	ldr	r3, [pc, #268]	@ (8008564 <MCU_UpdateStats+0x8e4>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	2b03      	cmp	r3, #3
 800845e:	d10d      	bne.n	800847c <MCU_UpdateStats+0x7fc>
 8008460:	6a38      	ldr	r0, [r7, #32]
 8008462:	f7f8 f859 	bl	8000518 <__aeabi_f2d>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	493f      	ldr	r1, [pc, #252]	@ (8008568 <MCU_UpdateStats+0x8e8>)
 800846c:	9100      	str	r1, [sp, #0]
 800846e:	4948      	ldr	r1, [pc, #288]	@ (8008590 <MCU_UpdateStats+0x910>)
 8008470:	4839      	ldr	r0, [pc, #228]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 8008472:	f00b fce1 	bl	8013e38 <siprintf>
 8008476:	4838      	ldr	r0, [pc, #224]	@ (8008558 <MCU_UpdateStats+0x8d8>)
 8008478:	f7fd f8c2 	bl	8005600 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 800847c:	4b3c      	ldr	r3, [pc, #240]	@ (8008570 <MCU_UpdateStats+0x8f0>)
 800847e:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008482:	f7f8 f849 	bl	8000518 <__aeabi_f2d>
 8008486:	a330      	add	r3, pc, #192	@ (adr r3, 8008548 <MCU_UpdateStats+0x8c8>)
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f7f8 f9c6 	bl	800081c <__aeabi_ddiv>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	4b35      	ldr	r3, [pc, #212]	@ (8008574 <MCU_UpdateStats+0x8f4>)
 800849e:	f7f7 fedd 	bl	800025c <__adddf3>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4610      	mov	r0, r2
 80084a8:	4619      	mov	r1, r3
 80084aa:	f7f8 fb65 	bl	8000b78 <__aeabi_d2uiz>
 80084ae:	4603      	mov	r3, r0
 80084b0:	4a31      	ldr	r2, [pc, #196]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 80084b2:	6353      	str	r3, [r2, #52]	@ 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80084b4:	6a38      	ldr	r0, [r7, #32]
 80084b6:	f7f8 f82f 	bl	8000518 <__aeabi_f2d>
 80084ba:	a323      	add	r3, pc, #140	@ (adr r3, 8008548 <MCU_UpdateStats+0x8c8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f8 f9ac 	bl	800081c <__aeabi_ddiv>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4610      	mov	r0, r2
 80084ca:	4619      	mov	r1, r3
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	4b28      	ldr	r3, [pc, #160]	@ (8008574 <MCU_UpdateStats+0x8f4>)
 80084d2:	f7f7 fec3 	bl	800025c <__adddf3>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	f7f8 fb4b 	bl	8000b78 <__aeabi_d2uiz>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4a24      	ldr	r2, [pc, #144]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 80084e6:	6393      	str	r3, [r2, #56]	@ 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 80084e8:	4b23      	ldr	r3, [pc, #140]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 80084ea:	7ddb      	ldrb	r3, [r3, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <MCU_UpdateStats+0x884>
 80084f0:	4b21      	ldr	r3, [pc, #132]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 80084f2:	7ddb      	ldrb	r3, [r3, #23]
 80084f4:	461a      	mov	r2, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008500:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8008502:	e002      	b.n	800850a <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 8008504:	4b1c      	ldr	r3, [pc, #112]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008506:	2200      	movs	r2, #0
 8008508:	879a      	strh	r2, [r3, #60]	@ 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 800850a:	4b1b      	ldr	r3, [pc, #108]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 800850c:	7ddb      	ldrb	r3, [r3, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <MCU_UpdateStats+0x8a4>
 8008512:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008514:	2bfe      	cmp	r3, #254	@ 0xfe
 8008516:	d805      	bhi.n	8008524 <MCU_UpdateStats+0x8a4>
 8008518:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800851a:	b2da      	uxtb	r2, r3
 800851c:	4b16      	ldr	r3, [pc, #88]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008522:	e003      	b.n	800852c <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 8008524:	4b14      	ldr	r3, [pc, #80]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 800852c:	4b12      	ldr	r3, [pc, #72]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 800852e:	7ddb      	ldrb	r3, [r3, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d02f      	beq.n	8008594 <MCU_UpdateStats+0x914>
 8008534:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008536:	2bfe      	cmp	r3, #254	@ 0xfe
 8008538:	d82c      	bhi.n	8008594 <MCU_UpdateStats+0x914>
 800853a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800853c:	b2da      	uxtb	r2, r3
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <MCU_UpdateStats+0x8f8>)
 8008540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008544:	e02a      	b.n	800859c <MCU_UpdateStats+0x91c>
 8008546:	bf00      	nop
 8008548:	9999999a 	.word	0x9999999a
 800854c:	3fa99999 	.word	0x3fa99999
 8008550:	00000000 	.word	0x00000000
 8008554:	409a3300 	.word	0x409a3300
 8008558:	20000b5c 	.word	0x20000b5c
 800855c:	44d19800 	.word	0x44d19800
 8008560:	c4c80000 	.word	0xc4c80000
 8008564:	2000000c 	.word	0x2000000c
 8008568:	fffff9c0 	.word	0xfffff9c0
 800856c:	08018068 	.word	0x08018068
 8008570:	c4c80000 	.word	0xc4c80000
 8008574:	40df4000 	.word	0x40df4000
 8008578:	2000a664 	.word	0x2000a664
 800857c:	46fa0000 	.word	0x46fa0000
 8008580:	44d19800 	.word	0x44d19800
 8008584:	080180ac 	.word	0x080180ac
 8008588:	080180f4 	.word	0x080180f4
 800858c:	0801813c 	.word	0x0801813c
 8008590:	08018188 	.word	0x08018188
  else pack.soh = 0;
 8008594:	4b2f      	ldr	r3, [pc, #188]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 800859c:	4b2d      	ldr	r3, [pc, #180]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 800859e:	7ddb      	ldrb	r3, [r3, #23]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <MCU_UpdateStats+0x938>
 80085a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085a6:	7ddb      	ldrb	r3, [r3, #23]
 80085a8:	461a      	mov	r2, r3
 80085aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	4b28      	ldr	r3, [pc, #160]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085b4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80085b6:	e002      	b.n	80085be <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 80085b8:	4b26      	ldr	r3, [pc, #152]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	861a      	strh	r2, [r3, #48]	@ 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 80085be:	4a25      	ldr	r2, [pc, #148]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80085c2:	8513      	strh	r3, [r2, #40]	@ 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 80085c4:	4a23      	ldr	r2, [pc, #140]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085c6:	7e7b      	ldrb	r3, [r7, #25]
 80085c8:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
  if (lowestCellVolt < 65535){
 80085cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 80085d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085da:	8593      	strh	r3, [r2, #44]	@ 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 80085dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085de:	7ebb      	ldrb	r3, [r7, #26]
 80085e0:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 80085e4:	e006      	b.n	80085f4 <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 80085e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pack.modCellLoVolt = 0;
 80085ec:	4b19      	ldr	r3, [pc, #100]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 80085f4:	4b17      	ldr	r3, [pc, #92]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085f6:	7ddb      	ldrb	r3, [r3, #23]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <MCU_UpdateStats+0x990>
 80085fc:	4b15      	ldr	r3, [pc, #84]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 80085fe:	7ddb      	ldrb	r3, [r3, #23]
 8008600:	461a      	mov	r2, r3
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	fbb3 f3f2 	udiv	r3, r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	4b12      	ldr	r3, [pc, #72]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 800860c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800860e:	e002      	b.n	8008616 <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8008610:	4b10      	ldr	r3, [pc, #64]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008612:	2200      	movs	r2, #0
 8008614:	84da      	strh	r2, [r3, #38]	@ 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8008616:	4a0f      	ldr	r2, [pc, #60]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008618:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800861a:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 800861c:	4a0d      	ldr	r2, [pc, #52]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8008624:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800862a:	4293      	cmp	r3, r2
 800862c:	d007      	beq.n	800863e <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 800862e:	4a09      	ldr	r2, [pc, #36]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008630:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008632:	8453      	strh	r3, [r2, #34]	@ 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8008634:	4a07      	ldr	r2, [pc, #28]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008636:	7e3b      	ldrb	r3, [r7, #24]
 8008638:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 800863c:	e006      	b.n	800864c <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 800863e:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008640:	2200      	movs	r2, #0
 8008642:	845a      	strh	r2, [r3, #34]	@ 0x22
    pack.modCellLoTemp = 0;
 8008644:	4b03      	ldr	r3, [pc, #12]	@ (8008654 <MCU_UpdateStats+0x9d4>)
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800864c:	bf00      	nop
 800864e:	3748      	adds	r7, #72	@ 0x48
 8008650:	46bd      	mov	sp, r7
 8008652:	bdb0      	pop	{r4, r5, r7, pc}
 8008654:	2000a664 	.word	0x2000a664

08008658 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8008658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865a:	b08b      	sub	sp, #44	@ 0x2c
 800865c:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 800865e:	4a64      	ldr	r2, [pc, #400]	@ (80087f0 <MCU_ReceiveMessages+0x198>)
 8008660:	2101      	movs	r1, #1
 8008662:	2001      	movs	r0, #1
 8008664:	f7fa f8be 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008668:	e0b6      	b.n	80087d8 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 800866a:	2340      	movs	r3, #64	@ 0x40
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	4b61      	ldr	r3, [pc, #388]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 8008670:	4a61      	ldr	r2, [pc, #388]	@ (80087f8 <MCU_ReceiveMessages+0x1a0>)
 8008672:	2101      	movs	r1, #1
 8008674:	2001      	movs	r0, #1
 8008676:	f7f9 ff19 	bl	80024ac <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 800867a:	4b60      	ldr	r3, [pc, #384]	@ (80087fc <MCU_ReceiveMessages+0x1a4>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f003 030a 	and.w	r3, r3, #10
 8008682:	2b0a      	cmp	r3, #10
 8008684:	d133      	bne.n	80086ee <MCU_ReceiveMessages+0x96>
 8008686:	4b5c      	ldr	r3, [pc, #368]	@ (80087f8 <MCU_ReceiveMessages+0x1a0>)
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800868e:	b29b      	uxth	r3, r3
 8008690:	469c      	mov	ip, r3
 8008692:	4b59      	ldr	r3, [pc, #356]	@ (80087f8 <MCU_ReceiveMessages+0x1a0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800869a:	469e      	mov	lr, r3
 800869c:	4b55      	ldr	r3, [pc, #340]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b54      	ldr	r3, [pc, #336]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	4619      	mov	r1, r3
 80086a8:	4b52      	ldr	r3, [pc, #328]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086aa:	789b      	ldrb	r3, [r3, #2]
 80086ac:	4618      	mov	r0, r3
 80086ae:	4b51      	ldr	r3, [pc, #324]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	461c      	mov	r4, r3
 80086b4:	4b4f      	ldr	r3, [pc, #316]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086b6:	791b      	ldrb	r3, [r3, #4]
 80086b8:	461d      	mov	r5, r3
 80086ba:	4b4e      	ldr	r3, [pc, #312]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086bc:	795b      	ldrb	r3, [r3, #5]
 80086be:	461e      	mov	r6, r3
 80086c0:	4b4c      	ldr	r3, [pc, #304]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086c2:	799b      	ldrb	r3, [r3, #6]
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	4b4b      	ldr	r3, [pc, #300]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80086c8:	79db      	ldrb	r3, [r3, #7]
 80086ca:	9307      	str	r3, [sp, #28]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	9306      	str	r3, [sp, #24]
 80086d0:	9605      	str	r6, [sp, #20]
 80086d2:	9504      	str	r5, [sp, #16]
 80086d4:	9403      	str	r4, [sp, #12]
 80086d6:	9002      	str	r0, [sp, #8]
 80086d8:	9101      	str	r1, [sp, #4]
 80086da:	9200      	str	r2, [sp, #0]
 80086dc:	4673      	mov	r3, lr
 80086de:	4662      	mov	r2, ip
 80086e0:	4947      	ldr	r1, [pc, #284]	@ (8008800 <MCU_ReceiveMessages+0x1a8>)
 80086e2:	4848      	ldr	r0, [pc, #288]	@ (8008804 <MCU_ReceiveMessages+0x1ac>)
 80086e4:	f00b fba8 	bl	8013e38 <siprintf>
 80086e8:	4846      	ldr	r0, [pc, #280]	@ (8008804 <MCU_ReceiveMessages+0x1ac>)
 80086ea:	f7fc ff89 	bl	8005600 <serialOut>

    switch (rxObj.bF.id.SID) {
 80086ee:	4b42      	ldr	r3, [pc, #264]	@ (80087f8 <MCU_ReceiveMessages+0x1a0>)
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 80086fc:	2b07      	cmp	r3, #7
 80086fe:	d82b      	bhi.n	8008758 <MCU_ReceiveMessages+0x100>
 8008700:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <MCU_ReceiveMessages+0xb0>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	08008729 	.word	0x08008729
 800870c:	08008735 	.word	0x08008735
 8008710:	0800873b 	.word	0x0800873b
 8008714:	08008741 	.word	0x08008741
 8008718:	08008747 	.word	0x08008747
 800871c:	0800872f 	.word	0x0800872f
 8008720:	0800874d 	.word	0x0800874d
 8008724:	08008753 	.word	0x08008753
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8008728:	f000 f8ce 	bl	80088c8 <MCU_RegisterModule>
        break;
 800872c:	e04f      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 800872e:	f001 fee1 	bl	800a4f4 <MCU_ProcessCellDetail>
        break;
 8008732:	e04c      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8008734:	f000 fc3c 	bl	8008fb0 <MCU_ProcessModuleHardware>
        break;
 8008738:	e049      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 800873a:	f001 f80d 	bl	8009758 <MCU_ProcessModuleStatus1>
        break;
 800873e:	e046      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8008740:	f001 fa92 	bl	8009c68 <MCU_ProcessModuleStatus2>
        break;
 8008744:	e043      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8008746:	f001 fc03 	bl	8009f50 <MCU_ProcessModuleStatus3>
        break;
 800874a:	e040      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 800874c:	f000 fb1e 	bl	8008d8c <MCU_ProcessModuleTime>
        break;
 8008750:	e03d      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8008752:	f001 fd39 	bl	800a1c8 <MCU_ProcessCellCommStatus1>
        break;
 8008756:	e03a      	b.n	80087ce <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008758:	4b28      	ldr	r3, [pc, #160]	@ (80087fc <MCU_ReceiveMessages+0x1a4>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f003 0303 	and.w	r3, r3, #3
 8008760:	2b03      	cmp	r3, #3
 8008762:	d133      	bne.n	80087cc <MCU_ReceiveMessages+0x174>
 8008764:	4b24      	ldr	r3, [pc, #144]	@ (80087f8 <MCU_ReceiveMessages+0x1a0>)
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800876c:	b29b      	uxth	r3, r3
 800876e:	469c      	mov	ip, r3
 8008770:	4b21      	ldr	r3, [pc, #132]	@ (80087f8 <MCU_ReceiveMessages+0x1a0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008778:	469e      	mov	lr, r3
 800877a:	4b1e      	ldr	r3, [pc, #120]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	4b1c      	ldr	r3, [pc, #112]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	4619      	mov	r1, r3
 8008786:	4b1b      	ldr	r3, [pc, #108]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 8008788:	789b      	ldrb	r3, [r3, #2]
 800878a:	4618      	mov	r0, r3
 800878c:	4b19      	ldr	r3, [pc, #100]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 800878e:	78db      	ldrb	r3, [r3, #3]
 8008790:	461c      	mov	r4, r3
 8008792:	4b18      	ldr	r3, [pc, #96]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 8008794:	791b      	ldrb	r3, [r3, #4]
 8008796:	461d      	mov	r5, r3
 8008798:	4b16      	ldr	r3, [pc, #88]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 800879a:	795b      	ldrb	r3, [r3, #5]
 800879c:	461e      	mov	r6, r3
 800879e:	4b15      	ldr	r3, [pc, #84]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80087a0:	799b      	ldrb	r3, [r3, #6]
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	4b13      	ldr	r3, [pc, #76]	@ (80087f4 <MCU_ReceiveMessages+0x19c>)
 80087a6:	79db      	ldrb	r3, [r3, #7]
 80087a8:	9307      	str	r3, [sp, #28]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	9306      	str	r3, [sp, #24]
 80087ae:	9605      	str	r6, [sp, #20]
 80087b0:	9504      	str	r5, [sp, #16]
 80087b2:	9403      	str	r4, [sp, #12]
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	9101      	str	r1, [sp, #4]
 80087b8:	9200      	str	r2, [sp, #0]
 80087ba:	4673      	mov	r3, lr
 80087bc:	4662      	mov	r2, ip
 80087be:	4912      	ldr	r1, [pc, #72]	@ (8008808 <MCU_ReceiveMessages+0x1b0>)
 80087c0:	4810      	ldr	r0, [pc, #64]	@ (8008804 <MCU_ReceiveMessages+0x1ac>)
 80087c2:	f00b fb39 	bl	8013e38 <siprintf>
 80087c6:	480f      	ldr	r0, [pc, #60]	@ (8008804 <MCU_ReceiveMessages+0x1ac>)
 80087c8:	f7fc ff1a 	bl	8005600 <serialOut>
        break;
 80087cc:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 80087ce:	4a08      	ldr	r2, [pc, #32]	@ (80087f0 <MCU_ReceiveMessages+0x198>)
 80087d0:	2101      	movs	r1, #1
 80087d2:	2001      	movs	r0, #1
 80087d4:	f7fa f806 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 80087d8:	4b05      	ldr	r3, [pc, #20]	@ (80087f0 <MCU_ReceiveMessages+0x198>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af42 	bne.w	800866a <MCU_ReceiveMessages+0x12>
  }
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f0:	20000d90 	.word	0x20000d90
 80087f4:	20000da0 	.word	0x20000da0
 80087f8:	20000d94 	.word	0x20000d94
 80087fc:	2000000c 	.word	0x2000000c
 8008800:	080181d0 	.word	0x080181d0
 8008804:	20000b5c 	.word	0x20000b5c
 8008808:	08018234 	.word	0x08018234

0800880c <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af02      	add	r7, sp, #8
 8008812:	4603      	mov	r3, r0
 8008814:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8008816:	2332      	movs	r3, #50	@ 0x32
 8008818:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	4a21      	ldr	r2, [pc, #132]	@ (80088a4 <MCU_TransmitMessageQueue+0x98>)
 800881e:	2102      	movs	r1, #2
 8008820:	4618      	mov	r0, r3
 8008822:	f7f9 ffac 	bl	800277e <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11a      	bne.n	8008862 <MCU_TransmitMessageQueue+0x56>
        Nop();
 800882c:	bf00      	nop
        Nop();
 800882e:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008830:	79f8      	ldrb	r0, [r7, #7]
 8008832:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <MCU_TransmitMessageQueue+0x9c>)
 8008834:	4a1d      	ldr	r2, [pc, #116]	@ (80088ac <MCU_TransmitMessageQueue+0xa0>)
 8008836:	491e      	ldr	r1, [pc, #120]	@ (80088b0 <MCU_TransmitMessageQueue+0xa4>)
 8008838:	f7fa f85b 	bl	80028f2 <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <MCU_TransmitMessageQueue+0xa8>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b03      	cmp	r3, #3
 8008846:	d106      	bne.n	8008856 <MCU_TransmitMessageQueue+0x4a>
 8008848:	491b      	ldr	r1, [pc, #108]	@ (80088b8 <MCU_TransmitMessageQueue+0xac>)
 800884a:	481c      	ldr	r0, [pc, #112]	@ (80088bc <MCU_TransmitMessageQueue+0xb0>)
 800884c:	f00b faf4 	bl	8013e38 <siprintf>
 8008850:	481a      	ldr	r0, [pc, #104]	@ (80088bc <MCU_TransmitMessageQueue+0xb0>)
 8008852:	f7fc fed5 	bl	8005600 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	2102      	movs	r1, #2
 800885a:	4618      	mov	r0, r3
 800885c:	f7f9 fcd2 	bl	8002204 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8008860:	e01c      	b.n	800889c <MCU_TransmitMessageQueue+0x90>
      }
      attempts--;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	3b01      	subs	r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008868:	4b0e      	ldr	r3, [pc, #56]	@ (80088a4 <MCU_TransmitMessageQueue+0x98>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0d2      	beq.n	800881a <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8008874:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <MCU_TransmitMessageQueue+0xb4>)
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800887c:	b2db      	uxtb	r3, r3
 800887e:	4618      	mov	r0, r3
 8008880:	f7fb f844 	bl	800390c <DRV_CANFDSPI_DlcToDataBytes>
 8008884:	4603      	mov	r3, r0
 8008886:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	79f8      	ldrb	r0, [r7, #7]
 800888c:	2201      	movs	r2, #1
 800888e:	9201      	str	r2, [sp, #4]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	4b0c      	ldr	r3, [pc, #48]	@ (80088c4 <MCU_TransmitMessageQueue+0xb8>)
 8008894:	4a0a      	ldr	r2, [pc, #40]	@ (80088c0 <MCU_TransmitMessageQueue+0xb4>)
 8008896:	2102      	movs	r1, #2
 8008898:	f7f9 fbc2 	bl	8002020 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000d34 	.word	0x20000d34
 80088a8:	20000de3 	.word	0x20000de3
 80088ac:	20000de2 	.word	0x20000de2
 80088b0:	20000de1 	.word	0x20000de1
 80088b4:	2000000c 	.word	0x2000000c
 80088b8:	080182a0 	.word	0x080182a0
 80088bc:	20000b5c 	.word	0x20000b5c
 80088c0:	20000d38 	.word	0x20000d38
 80088c4:	20000d44 	.word	0x20000d44

080088c8 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b08b      	sub	sp, #44	@ 0x2c
 80088cc:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 80088d2:	4a12      	ldr	r2, [pc, #72]	@ (800891c <MCU_RegisterModule+0x54>)
 80088d4:	f107 030c 	add.w	r3, r7, #12
 80088d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088dc:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 80088e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008920 <MCU_RegisterModule+0x58>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d010      	beq.n	800890e <MCU_RegisterModule+0x46>
 80088ec:	89bb      	ldrh	r3, [r7, #12]
 80088ee:	4619      	mov	r1, r3
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	4618      	mov	r0, r3
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	9201      	str	r2, [sp, #4]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4603      	mov	r3, r0
 80088fe:	460a      	mov	r2, r1
 8008900:	4908      	ldr	r1, [pc, #32]	@ (8008924 <MCU_RegisterModule+0x5c>)
 8008902:	4809      	ldr	r0, [pc, #36]	@ (8008928 <MCU_RegisterModule+0x60>)
 8008904:	f00b fa98 	bl	8013e38 <siprintf>
 8008908:	4807      	ldr	r0, [pc, #28]	@ (8008928 <MCU_RegisterModule+0x60>)
 800890a:	f7fc fe79 	bl	8005600 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800890e:	4b07      	ldr	r3, [pc, #28]	@ (800892c <MCU_RegisterModule+0x64>)
 8008910:	7d1b      	ldrb	r3, [r3, #20]
 8008912:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8008914:	2300      	movs	r3, #0
 8008916:	75bb      	strb	r3, [r7, #22]
 8008918:	e06f      	b.n	80089fa <MCU_RegisterModule+0x132>
 800891a:	bf00      	nop
 800891c:	20000da0 	.word	0x20000da0
 8008920:	2000000c 	.word	0x2000000c
 8008924:	080182d0 	.word	0x080182d0
 8008928:	20000b5c 	.word	0x20000b5c
 800892c:	2000a664 	.word	0x2000a664
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8008930:	7bba      	ldrb	r2, [r7, #14]
 8008932:	7dbb      	ldrb	r3, [r7, #22]
 8008934:	49b4      	ldr	r1, [pc, #720]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008936:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800893a:	fb00 f303 	mul.w	r3, r0, r3
 800893e:	440b      	add	r3, r1
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d156      	bne.n	80089f4 <MCU_RegisterModule+0x12c>
 8008946:	7bfa      	ldrb	r2, [r7, #15]
 8008948:	7dbb      	ldrb	r3, [r7, #22]
 800894a:	49af      	ldr	r1, [pc, #700]	@ (8008c08 <MCU_RegisterModule+0x340>)
 800894c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008950:	fb00 f303 	mul.w	r3, r0, r3
 8008954:	440b      	add	r3, r1
 8008956:	3301      	adds	r3, #1
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d14a      	bne.n	80089f4 <MCU_RegisterModule+0x12c>
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	7dbb      	ldrb	r3, [r7, #22]
 8008962:	49a9      	ldr	r1, [pc, #676]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008964:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008968:	fb00 f303 	mul.w	r3, r0, r3
 800896c:	440b      	add	r3, r1
 800896e:	3304      	adds	r3, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d13e      	bne.n	80089f4 <MCU_RegisterModule+0x12c>
      moduleIndex = index; // module is already registered, save the index
 8008976:	7dbb      	ldrb	r3, [r7, #22]
 8008978:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	4aa2      	ldr	r2, [pc, #648]	@ (8008c08 <MCU_RegisterModule+0x340>)
 800897e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008982:	fb01 f303 	mul.w	r3, r1, r3
 8008986:	4413      	add	r3, r2
 8008988:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800898c:	7893      	ldrb	r3, [r2, #2]
 800898e:	f36f 0300 	bfc	r3, #0, #1
 8008992:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8008994:	4b9d      	ldr	r3, [pc, #628]	@ (8008c0c <MCU_RegisterModule+0x344>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800899c:	499a      	ldr	r1, [pc, #616]	@ (8008c08 <MCU_RegisterModule+0x340>)
 800899e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80089a2:	fb00 f303 	mul.w	r3, r0, r3
 80089a6:	440b      	add	r3, r1
 80089a8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80089ac:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	4a97      	ldr	r2, [pc, #604]	@ (8008c10 <MCU_RegisterModule+0x348>)
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	4994      	ldr	r1, [pc, #592]	@ (8008c08 <MCU_RegisterModule+0x340>)
 80089b6:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80089ba:	fb00 f303 	mul.w	r3, r0, r3
 80089be:	440b      	add	r3, r1
 80089c0:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80089c4:	601a      	str	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 80089c6:	4b93      	ldr	r3, [pc, #588]	@ (8008c14 <MCU_RegisterModule+0x34c>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d110      	bne.n	80089f4 <MCU_RegisterModule+0x12c>
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	4a8c      	ldr	r2, [pc, #560]	@ (8008c08 <MCU_RegisterModule+0x340>)
 80089d6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	4413      	add	r3, r2
 80089e0:	3308      	adds	r3, #8
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	498c      	ldr	r1, [pc, #560]	@ (8008c18 <MCU_RegisterModule+0x350>)
 80089e8:	488c      	ldr	r0, [pc, #560]	@ (8008c1c <MCU_RegisterModule+0x354>)
 80089ea:	f00b fa25 	bl	8013e38 <siprintf>
 80089ee:	488b      	ldr	r0, [pc, #556]	@ (8008c1c <MCU_RegisterModule+0x354>)
 80089f0:	f7fc fe06 	bl	8005600 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 80089f4:	7dbb      	ldrb	r3, [r7, #22]
 80089f6:	3301      	adds	r3, #1
 80089f8:	75bb      	strb	r3, [r7, #22]
 80089fa:	4b89      	ldr	r3, [pc, #548]	@ (8008c20 <MCU_RegisterModule+0x358>)
 80089fc:	7d1b      	ldrb	r3, [r3, #20]
 80089fe:	7dba      	ldrb	r2, [r7, #22]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d395      	bcc.n	8008930 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 8008a04:	4b86      	ldr	r3, [pc, #536]	@ (8008c20 <MCU_RegisterModule+0x358>)
 8008a06:	7d1b      	ldrb	r3, [r3, #20]
 8008a08:	7dfa      	ldrb	r2, [r7, #23]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d15f      	bne.n	8008ace <MCU_RegisterModule+0x206>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	89b8      	ldrh	r0, [r7, #12]
 8008a12:	4a7d      	ldr	r2, [pc, #500]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a14:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	330a      	adds	r3, #10
 8008a20:	4602      	mov	r2, r0
 8008a22:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	7bf8      	ldrb	r0, [r7, #15]
 8008a28:	4a77      	ldr	r2, [pc, #476]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a2a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	3301      	adds	r3, #1
 8008a36:	4602      	mov	r2, r0
 8008a38:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	7bb8      	ldrb	r0, [r7, #14]
 8008a3e:	4a72      	ldr	r2, [pc, #456]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a40:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	4413      	add	r3, r2
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	496d      	ldr	r1, [pc, #436]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a54:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008a58:	fb00 f303 	mul.w	r3, r0, r3
 8008a5c:	440b      	add	r3, r1
 8008a5e:	3304      	adds	r3, #4
 8008a60:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8008a62:	4b6a      	ldr	r3, [pc, #424]	@ (8008c0c <MCU_RegisterModule+0x344>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a6a:	4967      	ldr	r1, [pc, #412]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a6c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008a70:	fb00 f303 	mul.w	r3, r0, r3
 8008a74:	440b      	add	r3, r1
 8008a76:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8008a7a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	4a64      	ldr	r2, [pc, #400]	@ (8008c10 <MCU_RegisterModule+0x348>)
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	4961      	ldr	r1, [pc, #388]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a84:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008a88:	fb00 f303 	mul.w	r3, r0, r3
 8008a8c:	440b      	add	r3, r1
 8008a8e:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8008a92:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	4a5c      	ldr	r2, [pc, #368]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008a98:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008a9c:	fb01 f303 	mul.w	r3, r1, r3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 8008aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8008c20 <MCU_RegisterModule+0x358>)
 8008aac:	7d1b      	ldrb	r3, [r3, #20]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8008c20 <MCU_RegisterModule+0x358>)
 8008ab4:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	4a59      	ldr	r2, [pc, #356]	@ (8008c20 <MCU_RegisterModule+0x358>)
 8008aba:	7d10      	ldrb	r0, [r2, #20]
 8008abc:	4a52      	ldr	r2, [pc, #328]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008abe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3308      	adds	r3, #8
 8008aca:	4602      	mov	r2, r0
 8008acc:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	4a4d      	ldr	r2, [pc, #308]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008ad2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	4a48      	ldr	r2, [pc, #288]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008ae8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008af6:	2201      	movs	r2, #1
 8008af8:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	4a42      	ldr	r2, [pc, #264]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008afe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	3308      	adds	r3, #8
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 8008b0e:	4b44      	ldr	r3, [pc, #272]	@ (8008c20 <MCU_RegisterModule+0x358>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	4a3c      	ldr	r2, [pc, #240]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008b18:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	3301      	adds	r3, #1
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	4a37      	ldr	r2, [pc, #220]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008b2c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008b30:	fb01 f303 	mul.w	r3, r1, r3
 8008b34:	4413      	add	r3, r2
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	4a32      	ldr	r2, [pc, #200]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008b3e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	3304      	adds	r3, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8008b4e:	4b35      	ldr	r3, [pc, #212]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008b54:	4b33      	ldr	r3, [pc, #204]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008b5a:	4b32      	ldr	r3, [pc, #200]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 8008b60:	4b31      	ldr	r3, [pc, #196]	@ (8008c28 <MCU_RegisterModule+0x360>)
 8008b62:	461a      	mov	r2, r3
 8008b64:	1d3b      	adds	r3, r7, #4
 8008b66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b6a:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 8008b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008b70:	8813      	ldrh	r3, [r2, #0]
 8008b72:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8008b76:	f361 030a 	bfi	r3, r1, #0, #11
 8008b7a:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	4a22      	ldr	r2, [pc, #136]	@ (8008c08 <MCU_RegisterModule+0x340>)
 8008b80:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008b94:	4923      	ldr	r1, [pc, #140]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008b96:	680b      	ldr	r3, [r1, #0]
 8008b98:	f362 23dc 	bfi	r3, r2, #11, #18
 8008b9c:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008b9e:	4a21      	ldr	r2, [pc, #132]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008ba0:	7913      	ldrb	r3, [r2, #4]
 8008ba2:	f36f 1386 	bfc	r3, #6, #1
 8008ba6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8008ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008baa:	7913      	ldrb	r3, [r2, #4]
 8008bac:	2108      	movs	r1, #8
 8008bae:	f361 0303 	bfi	r3, r1, #0, #4
 8008bb2:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008bb6:	7913      	ldrb	r3, [r2, #4]
 8008bb8:	f36f 13c7 	bfc	r3, #7, #1
 8008bbc:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008bbe:	4a19      	ldr	r2, [pc, #100]	@ (8008c24 <MCU_RegisterModule+0x35c>)
 8008bc0:	7913      	ldrb	r3, [r2, #4]
 8008bc2:	f043 0310 	orr.w	r3, r3, #16
 8008bc6:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8008bc8:	4b12      	ldr	r3, [pc, #72]	@ (8008c14 <MCU_RegisterModule+0x34c>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d012      	beq.n	8008bfa <MCU_RegisterModule+0x332>
 8008bd4:	793b      	ldrb	r3, [r7, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	797b      	ldrb	r3, [r7, #5]
 8008bda:	461c      	mov	r4, r3
 8008bdc:	79bb      	ldrb	r3, [r7, #6]
 8008bde:	79fa      	ldrb	r2, [r7, #7]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	9102      	str	r1, [sp, #8]
 8008be4:	9201      	str	r2, [sp, #4]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	4623      	mov	r3, r4
 8008bea:	4602      	mov	r2, r0
 8008bec:	490f      	ldr	r1, [pc, #60]	@ (8008c2c <MCU_RegisterModule+0x364>)
 8008bee:	480b      	ldr	r0, [pc, #44]	@ (8008c1c <MCU_RegisterModule+0x354>)
 8008bf0:	f00b f922 	bl	8013e38 <siprintf>
 8008bf4:	4809      	ldr	r0, [pc, #36]	@ (8008c1c <MCU_RegisterModule+0x354>)
 8008bf6:	f7fc fd03 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	f7ff fe06 	bl	800880c <MCU_TransmitMessageQueue>
}
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd90      	pop	{r4, r7, pc}
 8008c08:	20000de4 	.word	0x20000de4
 8008c0c:	200005d0 	.word	0x200005d0
 8008c10:	20000d20 	.word	0x20000d20
 8008c14:	2000000c 	.word	0x2000000c
 8008c18:	08018310 	.word	0x08018310
 8008c1c:	20000b5c 	.word	0x20000b5c
 8008c20:	2000a664 	.word	0x2000a664
 8008c24:	20000d38 	.word	0x20000d38
 8008c28:	20000d44 	.word	0x20000d44
 8008c2c:	08018344 	.word	0x08018344

08008c30 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 8008c36:	4b22      	ldr	r3, [pc, #136]	@ (8008cc0 <MCU_DeRegisterAllModules+0x90>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8008c3c:	4b21      	ldr	r3, [pc, #132]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008c42:	4b20      	ldr	r3, [pc, #128]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008c48:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8008c4e:	793a      	ldrb	r2, [r7, #4]
 8008c50:	4b1d      	ldr	r3, [pc, #116]	@ (8008cc8 <MCU_DeRegisterAllModules+0x98>)
 8008c52:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8008c54:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c56:	8813      	ldrh	r3, [r2, #0]
 8008c58:	f240 511e 	movw	r1, #1310	@ 0x51e
 8008c5c:	f361 030a 	bfi	r3, r1, #0, #11
 8008c60:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 8008c62:	4a18      	ldr	r2, [pc, #96]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c64:	6813      	ldr	r3, [r2, #0]
 8008c66:	f36f 23dc 	bfc	r3, #11, #18
 8008c6a:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008c6c:	4a15      	ldr	r2, [pc, #84]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c6e:	7913      	ldrb	r3, [r2, #4]
 8008c70:	f36f 1386 	bfc	r3, #6, #1
 8008c74:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8008c76:	4a13      	ldr	r2, [pc, #76]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c78:	7913      	ldrb	r3, [r2, #4]
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	f361 0303 	bfi	r3, r1, #0, #4
 8008c80:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008c82:	4a10      	ldr	r2, [pc, #64]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c84:	7913      	ldrb	r3, [r2, #4]
 8008c86:	f36f 13c7 	bfc	r3, #7, #1
 8008c8a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc4 <MCU_DeRegisterAllModules+0x94>)
 8008c8e:	7913      	ldrb	r3, [r2, #4]
 8008c90:	f043 0310 	orr.w	r3, r3, #16
 8008c94:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 8008c96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ccc <MCU_DeRegisterAllModules+0x9c>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d006      	beq.n	8008cb0 <MCU_DeRegisterAllModules+0x80>
 8008ca2:	490b      	ldr	r1, [pc, #44]	@ (8008cd0 <MCU_DeRegisterAllModules+0xa0>)
 8008ca4:	480b      	ldr	r0, [pc, #44]	@ (8008cd4 <MCU_DeRegisterAllModules+0xa4>)
 8008ca6:	f00b f8c7 	bl	8013e38 <siprintf>
 8008caa:	480a      	ldr	r0, [pc, #40]	@ (8008cd4 <MCU_DeRegisterAllModules+0xa4>)
 8008cac:	f7fc fca8 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	f7ff fdab 	bl	800880c <MCU_TransmitMessageQueue>
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	2000a664 	.word	0x2000a664
 8008cc4:	20000d38 	.word	0x20000d38
 8008cc8:	20000d44 	.word	0x20000d44
 8008ccc:	2000000c 	.word	0x2000000c
 8008cd0:	08018390 	.word	0x08018390
 8008cd4:	20000b5c 	.word	0x20000b5c

08008cd8 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8008cde:	1d3b      	adds	r3, r7, #4
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f00b f90c 	bl	8013f02 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8008cea:	4b22      	ldr	r3, [pc, #136]	@ (8008d74 <MCU_IsolateAllModules+0x9c>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8008cf0:	4b21      	ldr	r3, [pc, #132]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008cf6:	4b20      	ldr	r3, [pc, #128]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	609a      	str	r2, [r3, #8]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 8008d02:	793a      	ldrb	r2, [r7, #4]
 8008d04:	4b1d      	ldr	r3, [pc, #116]	@ (8008d7c <MCU_IsolateAllModules+0xa4>)
 8008d06:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8008d08:	4a1b      	ldr	r2, [pc, #108]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008d0a:	8813      	ldrh	r3, [r2, #0]
 8008d0c:	f240 511f 	movw	r1, #1311	@ 0x51f
 8008d10:	f361 030a 	bfi	r3, r1, #0, #11
 8008d14:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8008d16:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008d18:	6813      	ldr	r3, [r2, #0]
 8008d1a:	f36f 23dc 	bfc	r3, #11, #18
 8008d1e:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008d20:	4a15      	ldr	r2, [pc, #84]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008d22:	7913      	ldrb	r3, [r2, #4]
 8008d24:	f36f 1386 	bfc	r3, #6, #1
 8008d28:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8008d2a:	4a13      	ldr	r2, [pc, #76]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008d2c:	7913      	ldrb	r3, [r2, #4]
 8008d2e:	2101      	movs	r1, #1
 8008d30:	f361 0303 	bfi	r3, r1, #0, #4
 8008d34:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008d36:	4a10      	ldr	r2, [pc, #64]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008d38:	7913      	ldrb	r3, [r2, #4]
 8008d3a:	f36f 13c7 	bfc	r3, #7, #1
 8008d3e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008d40:	4a0d      	ldr	r2, [pc, #52]	@ (8008d78 <MCU_IsolateAllModules+0xa0>)
 8008d42:	7913      	ldrb	r3, [r2, #4]
 8008d44:	f043 0310 	orr.w	r3, r3, #16
 8008d48:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <MCU_IsolateAllModules+0xa8>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <MCU_IsolateAllModules+0x8c>
 8008d56:	490b      	ldr	r1, [pc, #44]	@ (8008d84 <MCU_IsolateAllModules+0xac>)
 8008d58:	480b      	ldr	r0, [pc, #44]	@ (8008d88 <MCU_IsolateAllModules+0xb0>)
 8008d5a:	f00b f86d 	bl	8013e38 <siprintf>
 8008d5e:	480a      	ldr	r0, [pc, #40]	@ (8008d88 <MCU_IsolateAllModules+0xb0>)
 8008d60:	f7fc fc4e 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008d64:	2001      	movs	r0, #1
 8008d66:	f7ff fd51 	bl	800880c <MCU_TransmitMessageQueue>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	2000a664 	.word	0x2000a664
 8008d78:	20000d38 	.word	0x20000d38
 8008d7c:	20000d44 	.word	0x20000d44
 8008d80:	2000000c 	.word	0x2000000c
 8008d84:	080183b8 	.word	0x080183b8
 8008d88:	20000b5c 	.word	0x20000b5c

08008d8c <MCU_ProcessModuleTime>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 8008d8c:	b5b0      	push	{r4, r5, r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 8008d92:	4b34      	ldr	r3, [pc, #208]	@ (8008e64 <MCU_ProcessModuleTime+0xd8>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <MCU_ProcessModuleTime+0x20>
 8008d9e:	4932      	ldr	r1, [pc, #200]	@ (8008e68 <MCU_ProcessModuleTime+0xdc>)
 8008da0:	4832      	ldr	r0, [pc, #200]	@ (8008e6c <MCU_ProcessModuleTime+0xe0>)
 8008da2:	f00b f849 	bl	8013e38 <siprintf>
 8008da6:	4831      	ldr	r0, [pc, #196]	@ (8008e6c <MCU_ProcessModuleTime+0xe0>)
 8008da8:	f7fc fc2a 	bl	8005600 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 8008dac:	f7fc fd10 	bl	80057d0 <readRTC>
 8008db0:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 8008db4:	4b2e      	ldr	r3, [pc, #184]	@ (8008e70 <MCU_ProcessModuleTime+0xe4>)
 8008db6:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	f362 13c7 	bfi	r3, r2, #7, #1
 8008dc0:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 8008dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dc6:	4614      	mov	r4, r2
 8008dc8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8008dcc:	4623      	mov	r3, r4
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	f362 031e 	bfi	r3, r2, #0, #31
 8008dd8:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 8008dda:	4b26      	ldr	r3, [pc, #152]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008de0:	4b24      	ldr	r3, [pc, #144]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008de6:	4b23      	ldr	r3, [pc, #140]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 8008dec:	463b      	mov	r3, r7
 8008dee:	2208      	movs	r2, #8
 8008df0:	4619      	mov	r1, r3
 8008df2:	4821      	ldr	r0, [pc, #132]	@ (8008e78 <MCU_ProcessModuleTime+0xec>)
 8008df4:	f00b ff7d 	bl	8014cf2 <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8008df8:	4a1e      	ldr	r2, [pc, #120]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008dfa:	8813      	ldrh	r3, [r2, #0]
 8008dfc:	f240 5116 	movw	r1, #1302	@ 0x516
 8008e00:	f361 030a 	bfi	r3, r1, #0, #11
 8008e04:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8008e06:	4a1b      	ldr	r2, [pc, #108]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008e08:	6813      	ldr	r3, [r2, #0]
 8008e0a:	f36f 23dc 	bfc	r3, #11, #18
 8008e0e:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008e10:	4a18      	ldr	r2, [pc, #96]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008e12:	7913      	ldrb	r3, [r2, #4]
 8008e14:	f36f 1386 	bfc	r3, #6, #1
 8008e18:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8008e1a:	4a16      	ldr	r2, [pc, #88]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008e1c:	7913      	ldrb	r3, [r2, #4]
 8008e1e:	2108      	movs	r1, #8
 8008e20:	f361 0303 	bfi	r3, r1, #0, #4
 8008e24:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008e26:	4a13      	ldr	r2, [pc, #76]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008e28:	7913      	ldrb	r3, [r2, #4]
 8008e2a:	f36f 13c7 	bfc	r3, #7, #1
 8008e2e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008e30:	4a10      	ldr	r2, [pc, #64]	@ (8008e74 <MCU_ProcessModuleTime+0xe8>)
 8008e32:	7913      	ldrb	r3, [r2, #4]
 8008e34:	f043 0310 	orr.w	r3, r3, #16
 8008e38:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e64 <MCU_ProcessModuleTime+0xd8>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d006      	beq.n	8008e54 <MCU_ProcessModuleTime+0xc8>
 8008e46:	490d      	ldr	r1, [pc, #52]	@ (8008e7c <MCU_ProcessModuleTime+0xf0>)
 8008e48:	4808      	ldr	r0, [pc, #32]	@ (8008e6c <MCU_ProcessModuleTime+0xe0>)
 8008e4a:	f00a fff5 	bl	8013e38 <siprintf>
 8008e4e:	4807      	ldr	r0, [pc, #28]	@ (8008e6c <MCU_ProcessModuleTime+0xe0>)
 8008e50:	f7fc fbd6 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008e54:	2001      	movs	r0, #1
 8008e56:	f7ff fcd9 	bl	800880c <MCU_TransmitMessageQueue>
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bdb0      	pop	{r4, r5, r7, pc}
 8008e62:	bf00      	nop
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	080183dc 	.word	0x080183dc
 8008e6c:	20000b5c 	.word	0x20000b5c
 8008e70:	2000a664 	.word	0x2000a664
 8008e74:	20000d38 	.word	0x20000d38
 8008e78:	20000d44 	.word	0x20000d44
 8008e7c:	080183f8 	.word	0x080183f8

08008e80 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8008e8a:	4b41      	ldr	r3, [pc, #260]	@ (8008f90 <MCU_RequestHardware+0x110>)
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]
 8008e94:	e010      	b.n	8008eb8 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	4a3e      	ldr	r2, [pc, #248]	@ (8008f94 <MCU_RequestHardware+0x114>)
 8008e9a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	79fa      	ldrb	r2, [r7, #7]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d101      	bne.n	8008eb2 <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	73bb      	strb	r3, [r7, #14]
 8008eb8:	4b35      	ldr	r3, [pc, #212]	@ (8008f90 <MCU_RequestHardware+0x110>)
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	7bba      	ldrb	r2, [r7, #14]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d3e9      	bcc.n	8008e96 <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8008ec2:	4b33      	ldr	r3, [pc, #204]	@ (8008f90 <MCU_RequestHardware+0x110>)
 8008ec4:	7d1b      	ldrb	r3, [r3, #20]
 8008ec6:	7bfa      	ldrb	r2, [r7, #15]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d10d      	bne.n	8008ee8 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 8008ecc:	4b32      	ldr	r3, [pc, #200]	@ (8008f98 <MCU_RequestHardware+0x118>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 0303 	and.w	r3, r3, #3
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d156      	bne.n	8008f86 <MCU_RequestHardware+0x106>
 8008ed8:	4930      	ldr	r1, [pc, #192]	@ (8008f9c <MCU_RequestHardware+0x11c>)
 8008eda:	4831      	ldr	r0, [pc, #196]	@ (8008fa0 <MCU_RequestHardware+0x120>)
 8008edc:	f00a ffac 	bl	8013e38 <siprintf>
 8008ee0:	482f      	ldr	r0, [pc, #188]	@ (8008fa0 <MCU_RequestHardware+0x120>)
 8008ee2:	f7fc fb8d 	bl	8005600 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8008ee6:	e04e      	b.n	8008f86 <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	4a2a      	ldr	r2, [pc, #168]	@ (8008f94 <MCU_RequestHardware+0x114>)
 8008eec:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008efa:	2201      	movs	r2, #1
 8008efc:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8008f02:	4b28      	ldr	r3, [pc, #160]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008f08:	4b26      	ldr	r3, [pc, #152]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008f0e:	4b25      	ldr	r3, [pc, #148]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	609a      	str	r2, [r3, #8]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8008f14:	7b3a      	ldrb	r2, [r7, #12]
 8008f16:	4b24      	ldr	r3, [pc, #144]	@ (8008fa8 <MCU_RequestHardware+0x128>)
 8008f18:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8008f1a:	4a22      	ldr	r2, [pc, #136]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f1c:	8813      	ldrh	r3, [r2, #0]
 8008f1e:	f240 5111 	movw	r1, #1297	@ 0x511
 8008f22:	f361 030a 	bfi	r3, r1, #0, #11
 8008f26:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008f28:	79fa      	ldrb	r2, [r7, #7]
 8008f2a:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008f2e:	491d      	ldr	r1, [pc, #116]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f30:	680b      	ldr	r3, [r1, #0]
 8008f32:	f362 23dc 	bfi	r3, r2, #11, #18
 8008f36:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008f38:	4a1a      	ldr	r2, [pc, #104]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f3a:	7913      	ldrb	r3, [r2, #4]
 8008f3c:	f36f 1386 	bfc	r3, #6, #1
 8008f40:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8008f42:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f44:	7913      	ldrb	r3, [r2, #4]
 8008f46:	2101      	movs	r1, #1
 8008f48:	f361 0303 	bfi	r3, r1, #0, #4
 8008f4c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008f4e:	4a15      	ldr	r2, [pc, #84]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f50:	7913      	ldrb	r3, [r2, #4]
 8008f52:	f36f 13c7 	bfc	r3, #7, #1
 8008f56:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008f58:	4a12      	ldr	r2, [pc, #72]	@ (8008fa4 <MCU_RequestHardware+0x124>)
 8008f5a:	7913      	ldrb	r3, [r2, #4]
 8008f5c:	f043 0310 	orr.w	r3, r3, #16
 8008f60:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <MCU_RequestHardware+0x118>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <MCU_RequestHardware+0x100>
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	461a      	mov	r2, r3
 8008f72:	490e      	ldr	r1, [pc, #56]	@ (8008fac <MCU_RequestHardware+0x12c>)
 8008f74:	480a      	ldr	r0, [pc, #40]	@ (8008fa0 <MCU_RequestHardware+0x120>)
 8008f76:	f00a ff5f 	bl	8013e38 <siprintf>
 8008f7a:	4809      	ldr	r0, [pc, #36]	@ (8008fa0 <MCU_RequestHardware+0x120>)
 8008f7c:	f7fc fb40 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008f80:	2001      	movs	r0, #1
 8008f82:	f7ff fc43 	bl	800880c <MCU_TransmitMessageQueue>
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000a664 	.word	0x2000a664
 8008f94:	20000de4 	.word	0x20000de4
 8008f98:	2000000c 	.word	0x2000000c
 8008f9c:	08018410 	.word	0x08018410
 8008fa0:	20000b5c 	.word	0x20000b5c
 8008fa4:	20000d38 	.word	0x20000d38
 8008fa8:	20000d44 	.word	0x20000d44
 8008fac:	0801844c 	.word	0x0801844c

08008fb0 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	b08e      	sub	sp, #56	@ 0x38
 8008fb6:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 8008fb8:	463b      	mov	r3, r7
 8008fba:	2208      	movs	r2, #8
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f00a ff9f 	bl	8013f02 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 8008fc4:	4a94      	ldr	r2, [pc, #592]	@ (8009218 <MCU_ProcessModuleHardware+0x268>)
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fcc:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8008fd0:	4b92      	ldr	r3, [pc, #584]	@ (800921c <MCU_ProcessModuleHardware+0x26c>)
 8008fd2:	7d1b      	ldrb	r3, [r3, #20]
 8008fd4:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75bb      	strb	r3, [r7, #22]
 8008fda:	e015      	b.n	8009008 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8008fdc:	4b90      	ldr	r3, [pc, #576]	@ (8009220 <MCU_ProcessModuleHardware+0x270>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8008fe4:	7dbb      	ldrb	r3, [r7, #22]
 8008fe6:	498f      	ldr	r1, [pc, #572]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 8008fe8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008fec:	fb00 f303 	mul.w	r3, r0, r3
 8008ff0:	440b      	add	r3, r1
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d101      	bne.n	8009002 <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 8008ffe:	7dbb      	ldrb	r3, [r7, #22]
 8009000:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009002:	7dbb      	ldrb	r3, [r7, #22]
 8009004:	3301      	adds	r3, #1
 8009006:	75bb      	strb	r3, [r7, #22]
 8009008:	4b84      	ldr	r3, [pc, #528]	@ (800921c <MCU_ProcessModuleHardware+0x26c>)
 800900a:	7d1b      	ldrb	r3, [r3, #20]
 800900c:	7dba      	ldrb	r2, [r7, #22]
 800900e:	429a      	cmp	r2, r3
 8009010:	d3e4      	bcc.n	8008fdc <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 8009012:	4b82      	ldr	r3, [pc, #520]	@ (800921c <MCU_ProcessModuleHardware+0x26c>)
 8009014:	7d1b      	ldrb	r3, [r3, #20]
 8009016:	7dfa      	ldrb	r2, [r7, #23]
 8009018:	429a      	cmp	r2, r3
 800901a:	d10e      	bne.n	800903a <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 800901c:	4b82      	ldr	r3, [pc, #520]	@ (8009228 <MCU_ProcessModuleHardware+0x278>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f003 0303 	and.w	r3, r3, #3
 8009024:	2b03      	cmp	r3, #3
 8009026:	f040 825d 	bne.w	80094e4 <MCU_ProcessModuleHardware+0x534>
 800902a:	4980      	ldr	r1, [pc, #512]	@ (800922c <MCU_ProcessModuleHardware+0x27c>)
 800902c:	4880      	ldr	r0, [pc, #512]	@ (8009230 <MCU_ProcessModuleHardware+0x280>)
 800902e:	f00a ff03 	bl	8013e38 <siprintf>
 8009032:	487f      	ldr	r0, [pc, #508]	@ (8009230 <MCU_ProcessModuleHardware+0x280>)
 8009034:	f7fc fae4 	bl	8005600 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8009038:	e254      	b.n	80094e4 <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	8838      	ldrh	r0, [r7, #0]
 800903e:	4a79      	ldr	r2, [pc, #484]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 8009040:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009044:	fb01 f303 	mul.w	r3, r1, r3
 8009048:	4413      	add	r3, r2
 800904a:	330e      	adds	r3, #14
 800904c:	4602      	mov	r2, r0
 800904e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	8878      	ldrh	r0, [r7, #2]
 8009054:	4a73      	ldr	r2, [pc, #460]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 8009056:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800905a:	fb01 f303 	mul.w	r3, r1, r3
 800905e:	4413      	add	r3, r2
 8009060:	3310      	adds	r3, #16
 8009062:	4602      	mov	r2, r0
 8009064:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	88b8      	ldrh	r0, [r7, #4]
 800906a:	4a6e      	ldr	r2, [pc, #440]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 800906c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009070:	fb01 f303 	mul.w	r3, r1, r3
 8009074:	4413      	add	r3, r2
 8009076:	3312      	adds	r3, #18
 8009078:	4602      	mov	r2, r0
 800907a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	88f8      	ldrh	r0, [r7, #6]
 8009080:	4a68      	ldr	r2, [pc, #416]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 8009082:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009086:	fb01 f303 	mul.w	r3, r1, r3
 800908a:	4413      	add	r3, r2
 800908c:	330c      	adds	r3, #12
 800908e:	4602      	mov	r2, r0
 8009090:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009092:	4b68      	ldr	r3, [pc, #416]	@ (8009234 <MCU_ProcessModuleHardware+0x284>)
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800909a:	4962      	ldr	r1, [pc, #392]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 800909c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80090a0:	fb00 f303 	mul.w	r3, r0, r3
 80090a4:	440b      	add	r3, r1
 80090a6:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80090aa:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	4a62      	ldr	r2, [pc, #392]	@ (8009238 <MCU_ProcessModuleHardware+0x288>)
 80090b0:	6812      	ldr	r2, [r2, #0]
 80090b2:	495c      	ldr	r1, [pc, #368]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80090b4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80090b8:	fb00 f303 	mul.w	r3, r0, r3
 80090bc:	440b      	add	r3, r1
 80090be:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80090c2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	4a57      	ldr	r2, [pc, #348]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80090c8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	4a51      	ldr	r2, [pc, #324]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80090de:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090e2:	fb01 f303 	mul.w	r3, r1, r3
 80090e6:	4413      	add	r3, r2
 80090e8:	330e      	adds	r3, #14
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f7 fa01 	bl	80004f4 <__aeabi_i2d>
 80090f2:	a345      	add	r3, pc, #276	@ (adr r3, 8009208 <MCU_ProcessModuleHardware+0x258>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 fa66 	bl	80005c8 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4610      	mov	r0, r2
 8009102:	4619      	mov	r1, r3
 8009104:	a342      	add	r3, pc, #264	@ (adr r3, 8009210 <MCU_ProcessModuleHardware+0x260>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f8a5 	bl	8000258 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4610      	mov	r0, r2
 8009114:	4619      	mov	r1, r3
 8009116:	f7f7 fd4f 	bl	8000bb8 <__aeabi_d2f>
 800911a:	4603      	mov	r3, r0
 800911c:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	4a40      	ldr	r2, [pc, #256]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 8009122:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	4413      	add	r3, r2
 800912c:	3310      	adds	r3, #16
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f7f7 f9df 	bl	80004f4 <__aeabi_i2d>
 8009136:	a334      	add	r3, pc, #208	@ (adr r3, 8009208 <MCU_ProcessModuleHardware+0x258>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 fa44 	bl	80005c8 <__aeabi_dmul>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4610      	mov	r0, r2
 8009146:	4619      	mov	r1, r3
 8009148:	a331      	add	r3, pc, #196	@ (adr r3, 8009210 <MCU_ProcessModuleHardware+0x260>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f7f7 f883 	bl	8000258 <__aeabi_dsub>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4610      	mov	r0, r2
 8009158:	4619      	mov	r1, r3
 800915a:	f7f7 fd2d 	bl	8000bb8 <__aeabi_d2f>
 800915e:	4603      	mov	r3, r0
 8009160:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 8009162:	edd7 7a04 	vldr	s15, [r7, #16]
 8009166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800916a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800916e:	d567      	bpl.n	8009240 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8009170:	4b2d      	ldr	r3, [pc, #180]	@ (8009228 <MCU_ProcessModuleHardware+0x278>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	2b03      	cmp	r3, #3
 800917a:	d113      	bne.n	80091a4 <MCU_ProcessModuleHardware+0x1f4>
 800917c:	4b28      	ldr	r3, [pc, #160]	@ (8009220 <MCU_ProcessModuleHardware+0x270>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009184:	461c      	mov	r4, r3
 8009186:	6938      	ldr	r0, [r7, #16]
 8009188:	f7f7 f9c6 	bl	8000518 <__aeabi_f2d>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	e9cd 2300 	strd	r2, r3, [sp]
 8009194:	4622      	mov	r2, r4
 8009196:	4929      	ldr	r1, [pc, #164]	@ (800923c <MCU_ProcessModuleHardware+0x28c>)
 8009198:	4825      	ldr	r0, [pc, #148]	@ (8009230 <MCU_ProcessModuleHardware+0x280>)
 800919a:	f00a fe4d 	bl	8013e38 <siprintf>
 800919e:	4824      	ldr	r0, [pc, #144]	@ (8009230 <MCU_ProcessModuleHardware+0x280>)
 80091a0:	f7fc fa2e 	bl	8005600 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80091a8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091ac:	fb01 f303 	mul.w	r3, r1, r3
 80091b0:	4413      	add	r3, r2
 80091b2:	330e      	adds	r3, #14
 80091b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80091b8:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	4a19      	ldr	r2, [pc, #100]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80091be:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091c2:	fb01 f303 	mul.w	r3, r1, r3
 80091c6:	4413      	add	r3, r2
 80091c8:	3310      	adds	r3, #16
 80091ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80091ce:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	4a14      	ldr	r2, [pc, #80]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80091d4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091d8:	fb01 f303 	mul.w	r3, r1, r3
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 80091e2:	7893      	ldrb	r3, [r2, #2]
 80091e4:	f043 0302 	orr.w	r3, r3, #2
 80091e8:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009224 <MCU_ProcessModuleHardware+0x274>)
 80091ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	3308      	adds	r3, #8
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 f866 	bl	800a2d0 <MCU_TransmitState>
 8009204:	e04f      	b.n	80092a6 <MCU_ProcessModuleHardware+0x2f6>
 8009206:	bf00      	nop
 8009208:	47ae147b 	.word	0x47ae147b
 800920c:	3f947ae1 	.word	0x3f947ae1
 8009210:	47ae147b 	.word	0x47ae147b
 8009214:	40847ae1 	.word	0x40847ae1
 8009218:	20000da0 	.word	0x20000da0
 800921c:	2000a664 	.word	0x2000a664
 8009220:	20000d94 	.word	0x20000d94
 8009224:	20000de4 	.word	0x20000de4
 8009228:	2000000c 	.word	0x2000000c
 800922c:	08018474 	.word	0x08018474
 8009230:	20000b5c 	.word	0x20000b5c
 8009234:	200005d0 	.word	0x200005d0
 8009238:	20000d20 	.word	0x20000d20
 800923c:	080184b4 	.word	0x080184b4
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8009240:	edd7 7a04 	vldr	s15, [r7, #16]
 8009244:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800924c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009250:	dd29      	ble.n	80092a6 <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8009252:	4bad      	ldr	r3, [pc, #692]	@ (8009508 <MCU_ProcessModuleHardware+0x558>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d018      	beq.n	8009290 <MCU_ProcessModuleHardware+0x2e0>
 800925e:	4bab      	ldr	r3, [pc, #684]	@ (800950c <MCU_ProcessModuleHardware+0x55c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009266:	461c      	mov	r4, r3
 8009268:	6938      	ldr	r0, [r7, #16]
 800926a:	f7f7 f955 	bl	8000518 <__aeabi_f2d>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	f04f 0000 	mov.w	r0, #0
 8009276:	49a6      	ldr	r1, [pc, #664]	@ (8009510 <MCU_ProcessModuleHardware+0x560>)
 8009278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800927c:	e9cd 2300 	strd	r2, r3, [sp]
 8009280:	4622      	mov	r2, r4
 8009282:	49a4      	ldr	r1, [pc, #656]	@ (8009514 <MCU_ProcessModuleHardware+0x564>)
 8009284:	48a4      	ldr	r0, [pc, #656]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 8009286:	f00a fdd7 	bl	8013e38 <siprintf>
 800928a:	48a3      	ldr	r0, [pc, #652]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 800928c:	f7fc f9b8 	bl	8005600 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	4aa2      	ldr	r2, [pc, #648]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 8009294:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	4413      	add	r3, r2
 800929e:	330e      	adds	r3, #14
 80092a0:	f248 12f4 	movw	r2, #33268	@ 0x81f4
 80092a4:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 80092a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80092aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	dd4a      	ble.n	800934a <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 80092b4:	4b94      	ldr	r3, [pc, #592]	@ (8009508 <MCU_ProcessModuleHardware+0x558>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d113      	bne.n	80092e8 <MCU_ProcessModuleHardware+0x338>
 80092c0:	4b92      	ldr	r3, [pc, #584]	@ (800950c <MCU_ProcessModuleHardware+0x55c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80092c8:	461c      	mov	r4, r3
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7f7 f924 	bl	8000518 <__aeabi_f2d>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9cd 2300 	strd	r2, r3, [sp]
 80092d8:	4622      	mov	r2, r4
 80092da:	4991      	ldr	r1, [pc, #580]	@ (8009520 <MCU_ProcessModuleHardware+0x570>)
 80092dc:	488e      	ldr	r0, [pc, #568]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 80092de:	f00a fdab 	bl	8013e38 <siprintf>
 80092e2:	488d      	ldr	r0, [pc, #564]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 80092e4:	f7fc f98c 	bl	8005600 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	4a8c      	ldr	r2, [pc, #560]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 80092ec:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80092f0:	fb01 f303 	mul.w	r3, r1, r3
 80092f4:	4413      	add	r3, r2
 80092f6:	330e      	adds	r3, #14
 80092f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80092fc:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
 8009300:	4a86      	ldr	r2, [pc, #536]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 8009302:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	4413      	add	r3, r2
 800930c:	3310      	adds	r3, #16
 800930e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009312:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	4a81      	ldr	r2, [pc, #516]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 8009318:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	4413      	add	r3, r2
 8009322:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009326:	7893      	ldrb	r3, [r2, #2]
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	4a7a      	ldr	r2, [pc, #488]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 8009332:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009336:	fb01 f303 	mul.w	r3, r1, r3
 800933a:	4413      	add	r3, r2
 800933c:	3308      	adds	r3, #8
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2100      	movs	r1, #0
 8009342:	4618      	mov	r0, r3
 8009344:	f000 ffc4 	bl	800a2d0 <MCU_TransmitState>
 8009348:	e032      	b.n	80093b0 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 800934a:	edd7 7a03 	vldr	s15, [r7, #12]
 800934e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8009524 <MCU_ProcessModuleHardware+0x574>
 8009352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935a:	d529      	bpl.n	80093b0 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 800935c:	4b6a      	ldr	r3, [pc, #424]	@ (8009508 <MCU_ProcessModuleHardware+0x558>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d018      	beq.n	800939a <MCU_ProcessModuleHardware+0x3ea>
 8009368:	4b68      	ldr	r3, [pc, #416]	@ (800950c <MCU_ProcessModuleHardware+0x55c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009370:	461c      	mov	r4, r3
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7f7 f8d0 	bl	8000518 <__aeabi_f2d>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	f04f 0000 	mov.w	r0, #0
 8009380:	4969      	ldr	r1, [pc, #420]	@ (8009528 <MCU_ProcessModuleHardware+0x578>)
 8009382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009386:	e9cd 2300 	strd	r2, r3, [sp]
 800938a:	4622      	mov	r2, r4
 800938c:	4967      	ldr	r1, [pc, #412]	@ (800952c <MCU_ProcessModuleHardware+0x57c>)
 800938e:	4862      	ldr	r0, [pc, #392]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 8009390:	f00a fd52 	bl	8013e38 <siprintf>
 8009394:	4860      	ldr	r0, [pc, #384]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 8009396:	f7fc f933 	bl	8005600 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	4a5f      	ldr	r2, [pc, #380]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 800939e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	3310      	adds	r3, #16
 80093aa:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 80093ae:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80093b0:	4b55      	ldr	r3, [pc, #340]	@ (8009508 <MCU_ProcessModuleHardware+0x558>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8093 	beq.w	80094e4 <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	4a56      	ldr	r2, [pc, #344]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 80093c2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80093c6:	fb01 f303 	mul.w	r3, r1, r3
 80093ca:	4413      	add	r3, r2
 80093cc:	330e      	adds	r3, #14
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7f7 f88f 	bl	80004f4 <__aeabi_i2d>
 80093d6:	a346      	add	r3, pc, #280	@ (adr r3, 80094f0 <MCU_ProcessModuleHardware+0x540>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f7f7 f8f4 	bl	80005c8 <__aeabi_dmul>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4610      	mov	r0, r2
 80093e6:	4619      	mov	r1, r3
 80093e8:	a343      	add	r3, pc, #268	@ (adr r3, 80094f8 <MCU_ProcessModuleHardware+0x548>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	f7f6 ff33 	bl	8000258 <__aeabi_dsub>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4610      	mov	r0, r2
 80093f8:	4619      	mov	r1, r3
 80093fa:	f7f7 fbdd 	bl	8000bb8 <__aeabi_d2f>
 80093fe:	4603      	mov	r3, r0
 8009400:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	4a45      	ldr	r2, [pc, #276]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 8009406:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	4413      	add	r3, r2
 8009410:	3310      	adds	r3, #16
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f7f7 f86d 	bl	80004f4 <__aeabi_i2d>
 800941a:	a335      	add	r3, pc, #212	@ (adr r3, 80094f0 <MCU_ProcessModuleHardware+0x540>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f7 f8d2 	bl	80005c8 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4610      	mov	r0, r2
 800942a:	4619      	mov	r1, r3
 800942c:	a332      	add	r3, pc, #200	@ (adr r3, 80094f8 <MCU_ProcessModuleHardware+0x548>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 ff11 	bl	8000258 <__aeabi_dsub>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4610      	mov	r0, r2
 800943c:	4619      	mov	r1, r3
 800943e:	f7f7 fbbb 	bl	8000bb8 <__aeabi_d2f>
 8009442:	4603      	mov	r3, r0
 8009444:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	4a34      	ldr	r2, [pc, #208]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 800944a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800944e:	fb01 f303 	mul.w	r3, r1, r3
 8009452:	4413      	add	r3, r2
 8009454:	3312      	adds	r3, #18
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	4618      	mov	r0, r3
 800945a:	f7f7 f84b 	bl	80004f4 <__aeabi_i2d>
 800945e:	a328      	add	r3, pc, #160	@ (adr r3, 8009500 <MCU_ProcessModuleHardware+0x550>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f7 f8b0 	bl	80005c8 <__aeabi_dmul>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4610      	mov	r0, r2
 800946e:	4619      	mov	r1, r3
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	f7f6 fef0 	bl	800025c <__adddf3>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4610      	mov	r0, r2
 8009482:	4619      	mov	r1, r3
 8009484:	f7f7 fb98 	bl	8000bb8 <__aeabi_d2f>
 8009488:	4603      	mov	r3, r0
 800948a:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 800948c:	4b1f      	ldr	r3, [pc, #124]	@ (800950c <MCU_ProcessModuleHardware+0x55c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8009494:	469a      	mov	sl, r3
 8009496:	6938      	ldr	r0, [r7, #16]
 8009498:	f7f7 f83e 	bl	8000518 <__aeabi_f2d>
 800949c:	4604      	mov	r4, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7f7 f839 	bl	8000518 <__aeabi_f2d>
 80094a6:	4680      	mov	r8, r0
 80094a8:	4689      	mov	r9, r1
 80094aa:	68b8      	ldr	r0, [r7, #8]
 80094ac:	f7f7 f834 	bl	8000518 <__aeabi_f2d>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 80094b4:	7df9      	ldrb	r1, [r7, #23]
 80094b6:	4819      	ldr	r0, [pc, #100]	@ (800951c <MCU_ProcessModuleHardware+0x56c>)
 80094b8:	f240 46c4 	movw	r6, #1220	@ 0x4c4
 80094bc:	fb06 f101 	mul.w	r1, r6, r1
 80094c0:	4401      	add	r1, r0
 80094c2:	310c      	adds	r1, #12
 80094c4:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 80094c6:	9106      	str	r1, [sp, #24]
 80094c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80094d0:	e9cd 4500 	strd	r4, r5, [sp]
 80094d4:	4652      	mov	r2, sl
 80094d6:	4916      	ldr	r1, [pc, #88]	@ (8009530 <MCU_ProcessModuleHardware+0x580>)
 80094d8:	480f      	ldr	r0, [pc, #60]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 80094da:	f00a fcad 	bl	8013e38 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 80094de:	480e      	ldr	r0, [pc, #56]	@ (8009518 <MCU_ProcessModuleHardware+0x568>)
 80094e0:	f7fc f88e 	bl	8005600 <serialOut>
}
 80094e4:	bf00      	nop
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	bf00      	nop
 80094f0:	47ae147b 	.word	0x47ae147b
 80094f4:	3f947ae1 	.word	0x3f947ae1
 80094f8:	47ae147b 	.word	0x47ae147b
 80094fc:	40847ae1 	.word	0x40847ae1
 8009500:	eb851eb8 	.word	0xeb851eb8
 8009504:	3f8eb851 	.word	0x3f8eb851
 8009508:	2000000c 	.word	0x2000000c
 800950c:	20000d94 	.word	0x20000d94
 8009510:	40240000 	.word	0x40240000
 8009514:	080184fc 	.word	0x080184fc
 8009518:	20000b5c 	.word	0x20000b5c
 800951c:	20000de4 	.word	0x20000de4
 8009520:	08018544 	.word	0x08018544
 8009524:	c2280000 	.word	0xc2280000
 8009528:	c0450000 	.word	0xc0450000
 800952c:	0801858c 	.word	0x0801858c
 8009530:	080185d8 	.word	0x080185d8

08009534 <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 800953e:	4b41      	ldr	r3, [pc, #260]	@ (8009644 <MCU_RequestModuleStatus+0x110>)
 8009540:	7d1b      	ldrb	r3, [r3, #20]
 8009542:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]
 8009548:	e010      	b.n	800956c <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	4a3e      	ldr	r2, [pc, #248]	@ (8009648 <MCU_RequestModuleStatus+0x114>)
 800954e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	4413      	add	r3, r2
 8009558:	3308      	adds	r3, #8
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	79fa      	ldrb	r2, [r7, #7]
 800955e:	429a      	cmp	r2, r3
 8009560:	d101      	bne.n	8009566 <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	3301      	adds	r3, #1
 800956a:	73bb      	strb	r3, [r7, #14]
 800956c:	4b35      	ldr	r3, [pc, #212]	@ (8009644 <MCU_RequestModuleStatus+0x110>)
 800956e:	7d1b      	ldrb	r3, [r3, #20]
 8009570:	7bba      	ldrb	r2, [r7, #14]
 8009572:	429a      	cmp	r2, r3
 8009574:	d3e9      	bcc.n	800954a <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8009576:	4b33      	ldr	r3, [pc, #204]	@ (8009644 <MCU_RequestModuleStatus+0x110>)
 8009578:	7d1b      	ldrb	r3, [r3, #20]
 800957a:	7bfa      	ldrb	r2, [r7, #15]
 800957c:	429a      	cmp	r2, r3
 800957e:	d10d      	bne.n	800959c <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8009580:	4b32      	ldr	r3, [pc, #200]	@ (800964c <MCU_RequestModuleStatus+0x118>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	2b03      	cmp	r3, #3
 800958a:	d156      	bne.n	800963a <MCU_RequestModuleStatus+0x106>
 800958c:	4930      	ldr	r1, [pc, #192]	@ (8009650 <MCU_RequestModuleStatus+0x11c>)
 800958e:	4831      	ldr	r0, [pc, #196]	@ (8009654 <MCU_RequestModuleStatus+0x120>)
 8009590:	f00a fc52 	bl	8013e38 <siprintf>
 8009594:	482f      	ldr	r0, [pc, #188]	@ (8009654 <MCU_RequestModuleStatus+0x120>)
 8009596:	f7fc f833 	bl	8005600 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 800959a:	e04e      	b.n	800963a <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4a2a      	ldr	r2, [pc, #168]	@ (8009648 <MCU_RequestModuleStatus+0x114>)
 80095a0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	4413      	add	r3, r2
 80095aa:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80095ae:	2201      	movs	r2, #1
 80095b0:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 80095b6:	4b28      	ldr	r3, [pc, #160]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80095bc:	4b26      	ldr	r3, [pc, #152]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095be:	2200      	movs	r2, #0
 80095c0:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80095c2:	4b25      	ldr	r3, [pc, #148]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	609a      	str	r2, [r3, #8]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 80095c8:	7b3a      	ldrb	r2, [r7, #12]
 80095ca:	4b24      	ldr	r3, [pc, #144]	@ (800965c <MCU_RequestModuleStatus+0x128>)
 80095cc:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 80095ce:	4a22      	ldr	r2, [pc, #136]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095d0:	8813      	ldrh	r3, [r2, #0]
 80095d2:	f240 5112 	movw	r1, #1298	@ 0x512
 80095d6:	f361 030a 	bfi	r3, r1, #0, #11
 80095da:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 80095dc:	79fa      	ldrb	r2, [r7, #7]
 80095de:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80095e2:	491d      	ldr	r1, [pc, #116]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095e4:	680b      	ldr	r3, [r1, #0]
 80095e6:	f362 23dc 	bfi	r3, r2, #11, #18
 80095ea:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 80095ec:	4a1a      	ldr	r2, [pc, #104]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095ee:	7913      	ldrb	r3, [r2, #4]
 80095f0:	f36f 1386 	bfc	r3, #6, #1
 80095f4:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 80095f6:	4a18      	ldr	r2, [pc, #96]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 80095f8:	7913      	ldrb	r3, [r2, #4]
 80095fa:	2101      	movs	r1, #1
 80095fc:	f361 0303 	bfi	r3, r1, #0, #4
 8009600:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009602:	4a15      	ldr	r2, [pc, #84]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 8009604:	7913      	ldrb	r3, [r2, #4]
 8009606:	f36f 13c7 	bfc	r3, #7, #1
 800960a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800960c:	4a12      	ldr	r2, [pc, #72]	@ (8009658 <MCU_RequestModuleStatus+0x124>)
 800960e:	7913      	ldrb	r3, [r2, #4]
 8009610:	f043 0310 	orr.w	r3, r3, #16
 8009614:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8009616:	4b0d      	ldr	r3, [pc, #52]	@ (800964c <MCU_RequestModuleStatus+0x118>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d008      	beq.n	8009634 <MCU_RequestModuleStatus+0x100>
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	461a      	mov	r2, r3
 8009626:	490e      	ldr	r1, [pc, #56]	@ (8009660 <MCU_RequestModuleStatus+0x12c>)
 8009628:	480a      	ldr	r0, [pc, #40]	@ (8009654 <MCU_RequestModuleStatus+0x120>)
 800962a:	f00a fc05 	bl	8013e38 <siprintf>
 800962e:	4809      	ldr	r0, [pc, #36]	@ (8009654 <MCU_RequestModuleStatus+0x120>)
 8009630:	f7fb ffe6 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009634:	2001      	movs	r0, #1
 8009636:	f7ff f8e9 	bl	800880c <MCU_TransmitMessageQueue>
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	2000a664 	.word	0x2000a664
 8009648:	20000de4 	.word	0x20000de4
 800964c:	2000000c 	.word	0x2000000c
 8009650:	08018644 	.word	0x08018644
 8009654:	20000b5c 	.word	0x20000b5c
 8009658:	20000d38 	.word	0x20000d38
 800965c:	20000d44 	.word	0x20000d44
 8009660:	08018684 	.word	0x08018684

08009664 <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8009672:	4b37      	ldr	r3, [pc, #220]	@ (8009750 <MCU_FindMaxVoltageModule+0xec>)
 8009674:	7d1b      	ldrb	r3, [r3, #20]
 8009676:	3301      	adds	r3, #1
 8009678:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 800967a:	2300      	movs	r3, #0
 800967c:	71fb      	strb	r3, [r7, #7]
 800967e:	e052      	b.n	8009726 <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	4a34      	ldr	r2, [pc, #208]	@ (8009754 <MCU_FindMaxVoltageModule+0xf0>)
 8009684:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009688:	fb01 f303 	mul.w	r3, r1, r3
 800968c:	4413      	add	r3, r2
 800968e:	3314      	adds	r3, #20
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	88ba      	ldrh	r2, [r7, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	d243      	bcs.n	8009720 <MCU_FindMaxVoltageModule+0xbc>
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	4a2e      	ldr	r2, [pc, #184]	@ (8009754 <MCU_FindMaxVoltageModule+0xf0>)
 800969c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80096a0:	fb01 f303 	mul.w	r3, r1, r3
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80096aa:	789b      	ldrb	r3, [r3, #2]
 80096ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d134      	bne.n	8009720 <MCU_FindMaxVoltageModule+0xbc>
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	4a26      	ldr	r2, [pc, #152]	@ (8009754 <MCU_FindMaxVoltageModule+0xf0>)
 80096ba:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80096be:	fb01 f303 	mul.w	r3, r1, r3
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80096c8:	789b      	ldrb	r3, [r3, #2]
 80096ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d125      	bne.n	8009720 <MCU_FindMaxVoltageModule+0xbc>
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009754 <MCU_FindMaxVoltageModule+0xf0>)
 80096d8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80096dc:	fb01 f303 	mul.w	r3, r1, r3
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80096e6:	789b      	ldrb	r3, [r3, #2]
 80096e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d116      	bne.n	8009720 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	4a17      	ldr	r2, [pc, #92]	@ (8009754 <MCU_FindMaxVoltageModule+0xf0>)
 80096f6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	3314      	adds	r3, #20
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	4a12      	ldr	r2, [pc, #72]	@ (8009754 <MCU_FindMaxVoltageModule+0xf0>)
 800970a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800970e:	fb01 f303 	mul.w	r3, r1, r3
 8009712:	4413      	add	r3, r2
 8009714:	3308      	adds	r3, #8
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 800971a:	79bb      	ldrb	r3, [r7, #6]
 800971c:	3301      	adds	r3, #1
 800971e:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	3301      	adds	r3, #1
 8009724:	71fb      	strb	r3, [r7, #7]
 8009726:	4b0a      	ldr	r3, [pc, #40]	@ (8009750 <MCU_FindMaxVoltageModule+0xec>)
 8009728:	7d1b      	ldrb	r3, [r3, #20]
 800972a:	79fa      	ldrb	r2, [r7, #7]
 800972c:	429a      	cmp	r2, r3
 800972e:	d3a7      	bcc.n	8009680 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8009730:	88bb      	ldrh	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <MCU_FindMaxVoltageModule+0xdc>
 8009736:	79bb      	ldrb	r3, [r7, #6]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MCU_FindMaxVoltageModule+0xdc>
 800973c:	2300      	movs	r3, #0
 800973e:	e000      	b.n	8009742 <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8009740:	78fb      	ldrb	r3, [r7, #3]
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	2000a664 	.word	0x2000a664
 8009754:	20000de4 	.word	0x20000de4

08009758 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	b09d      	sub	sp, #116	@ 0x74
 800975e:	af0a      	add	r7, sp, #40	@ 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8009760:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009764:	2208      	movs	r2, #8
 8009766:	2100      	movs	r1, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f00a fbca 	bl	8013f02 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 800976e:	4ab1      	ldr	r2, [pc, #708]	@ (8009a34 <MCU_ProcessModuleStatus1+0x2dc>)
 8009770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009778:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 800977c:	4bae      	ldr	r3, [pc, #696]	@ (8009a38 <MCU_ProcessModuleStatus1+0x2e0>)
 800977e:	7d1b      	ldrb	r3, [r3, #20]
 8009780:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8009784:	2300      	movs	r3, #0
 8009786:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800978a:	e01a      	b.n	80097c2 <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 800978c:	4bab      	ldr	r3, [pc, #684]	@ (8009a3c <MCU_ProcessModuleStatus1+0x2e4>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009794:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009798:	49a9      	ldr	r1, [pc, #676]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 800979a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800979e:	fb00 f303 	mul.w	r3, r0, r3
 80097a2:	440b      	add	r3, r1
 80097a4:	3308      	adds	r3, #8
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d103      	bne.n	80097b8 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 80097b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80097b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 80097b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80097bc:	3301      	adds	r3, #1
 80097be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80097c2:	4b9d      	ldr	r3, [pc, #628]	@ (8009a38 <MCU_ProcessModuleStatus1+0x2e0>)
 80097c4:	7d1b      	ldrb	r3, [r3, #20]
 80097c6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d3de      	bcc.n	800978c <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 80097ce:	4b9a      	ldr	r3, [pc, #616]	@ (8009a38 <MCU_ProcessModuleStatus1+0x2e0>)
 80097d0:	7d1b      	ldrb	r3, [r3, #20]
 80097d2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d10e      	bne.n	80097f8 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 80097da:	4b9a      	ldr	r3, [pc, #616]	@ (8009a44 <MCU_ProcessModuleStatus1+0x2ec>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	f040 8222 	bne.w	8009c2c <MCU_ProcessModuleStatus1+0x4d4>
 80097e8:	4997      	ldr	r1, [pc, #604]	@ (8009a48 <MCU_ProcessModuleStatus1+0x2f0>)
 80097ea:	4898      	ldr	r0, [pc, #608]	@ (8009a4c <MCU_ProcessModuleStatus1+0x2f4>)
 80097ec:	f00a fb24 	bl	8013e38 <siprintf>
 80097f0:	4896      	ldr	r0, [pc, #600]	@ (8009a4c <MCU_ProcessModuleStatus1+0x2f4>)
 80097f2:	f7fb ff05 	bl	8005600 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 80097f6:	e219      	b.n	8009c2c <MCU_ProcessModuleStatus1+0x4d4>
    module[moduleIndex].statusPending = false;
 80097f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80097fc:	4a90      	ldr	r2, [pc, #576]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80097fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009802:	fb01 f303 	mul.w	r3, r1, r3
 8009806:	4413      	add	r3, r2
 8009808:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8009810:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009814:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 8009816:	4a8a      	ldr	r2, [pc, #552]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 8009818:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800981c:	fb01 f303 	mul.w	r3, r1, r3
 8009820:	4413      	add	r3, r2
 8009822:	3316      	adds	r3, #22
 8009824:	4602      	mov	r2, r0
 8009826:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8009828:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800982c:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 800982e:	4a84      	ldr	r2, [pc, #528]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 8009830:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	4413      	add	r3, r2
 800983a:	3314      	adds	r3, #20
 800983c:	4602      	mov	r2, r0
 800983e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8009840:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009844:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 8009848:	4a7d      	ldr	r2, [pc, #500]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 800984a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	332b      	adds	r3, #43	@ 0x2b
 8009856:	4602      	mov	r2, r0
 8009858:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 800985a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800985e:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 8009862:	4a77      	ldr	r2, [pc, #476]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 8009864:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	332c      	adds	r3, #44	@ 0x2c
 8009870:	4602      	mov	r2, r0
 8009872:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 8009874:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009878:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800987c:	b2da      	uxtb	r2, r3
 800987e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009882:	4610      	mov	r0, r2
 8009884:	4a6e      	ldr	r2, [pc, #440]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 8009886:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	4413      	add	r3, r2
 8009890:	3327      	adds	r3, #39	@ 0x27
 8009892:	4602      	mov	r2, r0
 8009894:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 8009896:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800989a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80098a4:	4610      	mov	r0, r2
 80098a6:	4a66      	ldr	r2, [pc, #408]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80098a8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80098ac:	fb01 f303 	mul.w	r3, r1, r3
 80098b0:	4413      	add	r3, r2
 80098b2:	3326      	adds	r3, #38	@ 0x26
 80098b4:	4602      	mov	r2, r0
 80098b6:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 80098b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80098bc:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 80098c0:	4a5f      	ldr	r2, [pc, #380]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80098c2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	4413      	add	r3, r2
 80098cc:	332d      	adds	r3, #45	@ 0x2d
 80098ce:	4602      	mov	r2, r0
 80098d0:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80098d2:	4b5f      	ldr	r3, [pc, #380]	@ (8009a50 <MCU_ProcessModuleStatus1+0x2f8>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80098da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80098dc:	4958      	ldr	r1, [pc, #352]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80098de:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80098e2:	fb00 f303 	mul.w	r3, r0, r3
 80098e6:	440b      	add	r3, r1
 80098e8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80098ec:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80098ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80098f2:	4a58      	ldr	r2, [pc, #352]	@ (8009a54 <MCU_ProcessModuleStatus1+0x2fc>)
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	4952      	ldr	r1, [pc, #328]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80098f8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80098fc:	fb00 f303 	mul.w	r3, r0, r3
 8009900:	440b      	add	r3, r1
 8009902:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8009906:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 8009908:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800990c:	4a4c      	ldr	r2, [pc, #304]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 800990e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009912:	fb01 f303 	mul.w	r3, r1, r3
 8009916:	4413      	add	r3, r2
 8009918:	3327      	adds	r3, #39	@ 0x27
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009920:	4947      	ldr	r1, [pc, #284]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 8009922:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009926:	fb00 f303 	mul.w	r3, r0, r3
 800992a:	440b      	add	r3, r1
 800992c:	3329      	adds	r3, #41	@ 0x29
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d10a      	bne.n	800994a <MCU_ProcessModuleStatus1+0x1f2>
     module[moduleIndex].command.commandStatus = commandActive;
 8009934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009938:	4a41      	ldr	r2, [pc, #260]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 800993a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800993e:	fb01 f303 	mul.w	r3, r1, r3
 8009942:	4413      	add	r3, r2
 8009944:	332a      	adds	r3, #42	@ 0x2a
 8009946:	2201      	movs	r2, #1
 8009948:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800994a:	4b3e      	ldr	r3, [pc, #248]	@ (8009a44 <MCU_ProcessModuleStatus1+0x2ec>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 816a 	beq.w	8009c2c <MCU_ProcessModuleStatus1+0x4d4>
      switch (module[moduleIndex].currentState){
 8009958:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800995c:	4a38      	ldr	r2, [pc, #224]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 800995e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009962:	fb01 f303 	mul.w	r3, r1, r3
 8009966:	4413      	add	r3, r2
 8009968:	3327      	adds	r3, #39	@ 0x27
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d014      	beq.n	800999a <MCU_ProcessModuleStatus1+0x242>
 8009970:	2b03      	cmp	r3, #3
 8009972:	dc19      	bgt.n	80099a8 <MCU_ProcessModuleStatus1+0x250>
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <MCU_ProcessModuleStatus1+0x226>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d007      	beq.n	800998c <MCU_ProcessModuleStatus1+0x234>
 800997c:	e014      	b.n	80099a8 <MCU_ProcessModuleStatus1+0x250>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 800997e:	f107 031c 	add.w	r3, r7, #28
 8009982:	4935      	ldr	r1, [pc, #212]	@ (8009a58 <MCU_ProcessModuleStatus1+0x300>)
 8009984:	4618      	mov	r0, r3
 8009986:	f00a fa57 	bl	8013e38 <siprintf>
 800998a:	e01f      	b.n	80099cc <MCU_ProcessModuleStatus1+0x274>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 800998c:	f107 031c 	add.w	r3, r7, #28
 8009990:	4932      	ldr	r1, [pc, #200]	@ (8009a5c <MCU_ProcessModuleStatus1+0x304>)
 8009992:	4618      	mov	r0, r3
 8009994:	f00a fa50 	bl	8013e38 <siprintf>
 8009998:	e018      	b.n	80099cc <MCU_ProcessModuleStatus1+0x274>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 800999a:	f107 031c 	add.w	r3, r7, #28
 800999e:	4930      	ldr	r1, [pc, #192]	@ (8009a60 <MCU_ProcessModuleStatus1+0x308>)
 80099a0:	4618      	mov	r0, r3
 80099a2:	f00a fa49 	bl	8013e38 <siprintf>
 80099a6:	e011      	b.n	80099cc <MCU_ProcessModuleStatus1+0x274>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 80099a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80099ac:	4a24      	ldr	r2, [pc, #144]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80099ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	3327      	adds	r3, #39	@ 0x27
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	f107 031c 	add.w	r3, r7, #28
 80099c2:	4928      	ldr	r1, [pc, #160]	@ (8009a64 <MCU_ProcessModuleStatus1+0x30c>)
 80099c4:	4618      	mov	r0, r3
 80099c6:	f00a fa37 	bl	8013e38 <siprintf>
 80099ca:	bf00      	nop
      switch (module[moduleIndex].status){
 80099cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80099d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009a40 <MCU_ProcessModuleStatus1+0x2e8>)
 80099d2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80099d6:	fb01 f303 	mul.w	r3, r1, r3
 80099da:	4413      	add	r3, r2
 80099dc:	3326      	adds	r3, #38	@ 0x26
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d847      	bhi.n	8009a74 <MCU_ProcessModuleStatus1+0x31c>
 80099e4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <MCU_ProcessModuleStatus1+0x294>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	08009a0b 	.word	0x08009a0b
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a27 	.word	0x08009a27
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 80099fc:	f107 030c 	add.w	r3, r7, #12
 8009a00:	4915      	ldr	r1, [pc, #84]	@ (8009a58 <MCU_ProcessModuleStatus1+0x300>)
 8009a02:	4618      	mov	r0, r3
 8009a04:	f00a fa18 	bl	8013e38 <siprintf>
 8009a08:	e046      	b.n	8009a98 <MCU_ProcessModuleStatus1+0x340>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 8009a0a:	f107 030c 	add.w	r3, r7, #12
 8009a0e:	4916      	ldr	r1, [pc, #88]	@ (8009a68 <MCU_ProcessModuleStatus1+0x310>)
 8009a10:	4618      	mov	r0, r3
 8009a12:	f00a fa11 	bl	8013e38 <siprintf>
 8009a16:	e03f      	b.n	8009a98 <MCU_ProcessModuleStatus1+0x340>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 8009a18:	f107 030c 	add.w	r3, r7, #12
 8009a1c:	4913      	ldr	r1, [pc, #76]	@ (8009a6c <MCU_ProcessModuleStatus1+0x314>)
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f00a fa0a 	bl	8013e38 <siprintf>
 8009a24:	e038      	b.n	8009a98 <MCU_ProcessModuleStatus1+0x340>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 8009a26:	f107 030c 	add.w	r3, r7, #12
 8009a2a:	4911      	ldr	r1, [pc, #68]	@ (8009a70 <MCU_ProcessModuleStatus1+0x318>)
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f00a fa03 	bl	8013e38 <siprintf>
 8009a32:	e031      	b.n	8009a98 <MCU_ProcessModuleStatus1+0x340>
 8009a34:	20000da0 	.word	0x20000da0
 8009a38:	2000a664 	.word	0x2000a664
 8009a3c:	20000d94 	.word	0x20000d94
 8009a40:	20000de4 	.word	0x20000de4
 8009a44:	2000000c 	.word	0x2000000c
 8009a48:	080186ac 	.word	0x080186ac
 8009a4c:	20000b5c 	.word	0x20000b5c
 8009a50:	200005d0 	.word	0x200005d0
 8009a54:	20000d20 	.word	0x20000d20
 8009a58:	080186ec 	.word	0x080186ec
 8009a5c:	080186f4 	.word	0x080186f4
 8009a60:	08018700 	.word	0x08018700
 8009a64:	08018708 	.word	0x08018708
 8009a68:	08018714 	.word	0x08018714
 8009a6c:	08018720 	.word	0x08018720
 8009a70:	0801872c 	.word	0x0801872c
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 8009a74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a78:	4a75      	ldr	r2, [pc, #468]	@ (8009c50 <MCU_ProcessModuleStatus1+0x4f8>)
 8009a7a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	3326      	adds	r3, #38	@ 0x26
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	4971      	ldr	r1, [pc, #452]	@ (8009c54 <MCU_ProcessModuleStatus1+0x4fc>)
 8009a90:	4618      	mov	r0, r3
 8009a92:	f00a f9d1 	bl	8013e38 <siprintf>
 8009a96:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 8009a98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a9c:	4a6c      	ldr	r2, [pc, #432]	@ (8009c50 <MCU_ProcessModuleStatus1+0x4f8>)
 8009a9e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3314      	adds	r3, #20
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f6 fd21 	bl	80004f4 <__aeabi_i2d>
 8009ab2:	a361      	add	r3, pc, #388	@ (adr r3, 8009c38 <MCU_ProcessModuleStatus1+0x4e0>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fd86 	bl	80005c8 <__aeabi_dmul>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	f7f6 fbc6 	bl	800025c <__adddf3>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	f7f7 f86e 	bl	8000bb8 <__aeabi_d2f>
 8009adc:	4603      	mov	r3, r0
 8009ade:	643b      	str	r3, [r7, #64]	@ 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 8009ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8009c50 <MCU_ProcessModuleStatus1+0x4f8>)
 8009ae6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	4413      	add	r3, r2
 8009af0:	3316      	adds	r3, #22
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7f6 fcfd 	bl	80004f4 <__aeabi_i2d>
 8009afa:	a351      	add	r3, pc, #324	@ (adr r3, 8009c40 <MCU_ProcessModuleStatus1+0x4e8>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fd62 	bl	80005c8 <__aeabi_dmul>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	a34e      	add	r3, pc, #312	@ (adr r3, 8009c48 <MCU_ProcessModuleStatus1+0x4f0>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fba1 	bl	8000258 <__aeabi_dsub>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	f7f7 f84b 	bl	8000bb8 <__aeabi_d2f>
 8009b22:	4603      	mov	r3, r0
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 8009b26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b2a:	4a49      	ldr	r2, [pc, #292]	@ (8009c50 <MCU_ProcessModuleStatus1+0x4f8>)
 8009b2c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	332b      	adds	r3, #43	@ 0x2b
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f6 fcda 	bl	80004f4 <__aeabi_i2d>
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	4b44      	ldr	r3, [pc, #272]	@ (8009c58 <MCU_ProcessModuleStatus1+0x500>)
 8009b46:	f7f6 fd3f 	bl	80005c8 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4610      	mov	r0, r2
 8009b50:	4619      	mov	r1, r3
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	f7f6 fb7f 	bl	800025c <__adddf3>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4610      	mov	r0, r2
 8009b64:	4619      	mov	r1, r3
 8009b66:	f7f7 f827 	bl	8000bb8 <__aeabi_d2f>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 8009b6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b72:	4a37      	ldr	r2, [pc, #220]	@ (8009c50 <MCU_ProcessModuleStatus1+0x4f8>)
 8009b74:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009b78:	fb01 f303 	mul.w	r3, r1, r3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	332c      	adds	r3, #44	@ 0x2c
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f6 fcb6 	bl	80004f4 <__aeabi_i2d>
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	4b32      	ldr	r3, [pc, #200]	@ (8009c58 <MCU_ProcessModuleStatus1+0x500>)
 8009b8e:	f7f6 fd1b 	bl	80005c8 <__aeabi_dmul>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4610      	mov	r0, r2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	f04f 0200 	mov.w	r2, #0
 8009b9e:	f04f 0300 	mov.w	r3, #0
 8009ba2:	f7f6 fb5b 	bl	800025c <__adddf3>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4610      	mov	r0, r2
 8009bac:	4619      	mov	r1, r3
 8009bae:	f7f7 f803 	bl	8000bb8 <__aeabi_d2f>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8009bb6:	4b29      	ldr	r3, [pc, #164]	@ (8009c5c <MCU_ProcessModuleStatus1+0x504>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 8009bbe:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8009bc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009bc4:	4a22      	ldr	r2, [pc, #136]	@ (8009c50 <MCU_ProcessModuleStatus1+0x4f8>)
 8009bc6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009bca:	fb01 f303 	mul.w	r3, r1, r3
 8009bce:	4413      	add	r3, r2
 8009bd0:	332d      	adds	r3, #45	@ 0x2d
 8009bd2:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 8009bd4:	461e      	mov	r6, r3
 8009bd6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009bd8:	f7f6 fc9e 	bl	8000518 <__aeabi_f2d>
 8009bdc:	4604      	mov	r4, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009be2:	f7f6 fc99 	bl	8000518 <__aeabi_f2d>
 8009be6:	4680      	mov	r8, r0
 8009be8:	4689      	mov	r9, r1
 8009bea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009bec:	f7f6 fc94 	bl	8000518 <__aeabi_f2d>
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009bf6:	f7f6 fc8f 	bl	8000518 <__aeabi_f2d>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	f107 011c 	add.w	r1, r7, #28
 8009c02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c06:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8009c0a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009c0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c12:	9601      	str	r6, [sp, #4]
 8009c14:	f107 030c 	add.w	r3, r7, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	4910      	ldr	r1, [pc, #64]	@ (8009c60 <MCU_ProcessModuleStatus1+0x508>)
 8009c20:	4810      	ldr	r0, [pc, #64]	@ (8009c64 <MCU_ProcessModuleStatus1+0x50c>)
 8009c22:	f00a f909 	bl	8013e38 <siprintf>
      serialOut(tempBuffer);
 8009c26:	480f      	ldr	r0, [pc, #60]	@ (8009c64 <MCU_ProcessModuleStatus1+0x50c>)
 8009c28:	f7fb fcea 	bl	8005600 <serialOut>
}
 8009c2c:	bf00      	nop
 8009c2e:	374c      	adds	r7, #76	@ 0x4c
 8009c30:	46bd      	mov	sp, r7
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c36:	bf00      	nop
 8009c38:	eb851eb8 	.word	0xeb851eb8
 8009c3c:	3f8eb851 	.word	0x3f8eb851
 8009c40:	47ae147b 	.word	0x47ae147b
 8009c44:	3f947ae1 	.word	0x3f947ae1
 8009c48:	47ae147b 	.word	0x47ae147b
 8009c4c:	40847ae1 	.word	0x40847ae1
 8009c50:	20000de4 	.word	0x20000de4
 8009c54:	08018708 	.word	0x08018708
 8009c58:	3fe00000 	.word	0x3fe00000
 8009c5c:	20000d94 	.word	0x20000d94
 8009c60:	08018734 	.word	0x08018734
 8009c64:	20000b5c 	.word	0x20000b5c

08009c68 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	b091      	sub	sp, #68	@ 0x44
 8009c6e:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 8009c70:	1d3b      	adds	r3, r7, #4
 8009c72:	2208      	movs	r2, #8
 8009c74:	2100      	movs	r1, #0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f00a f943 	bl	8013f02 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 8009c7c:	4aaa      	ldr	r2, [pc, #680]	@ (8009f28 <MCU_ProcessModuleStatus2+0x2c0>)
 8009c7e:	1d3b      	adds	r3, r7, #4
 8009c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c84:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009c88:	4ba8      	ldr	r3, [pc, #672]	@ (8009f2c <MCU_ProcessModuleStatus2+0x2c4>)
 8009c8a:	7d1b      	ldrb	r3, [r3, #20]
 8009c8c:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 8009c8e:	2300      	movs	r3, #0
 8009c90:	77bb      	strb	r3, [r7, #30]
 8009c92:	e015      	b.n	8009cc0 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009c94:	4ba6      	ldr	r3, [pc, #664]	@ (8009f30 <MCU_ProcessModuleStatus2+0x2c8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009c9c:	7fbb      	ldrb	r3, [r7, #30]
 8009c9e:	49a5      	ldr	r1, [pc, #660]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009ca0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009ca4:	fb00 f303 	mul.w	r3, r0, r3
 8009ca8:	440b      	add	r3, r1
 8009caa:	3308      	adds	r3, #8
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d101      	bne.n	8009cba <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 8009cb6:	7fbb      	ldrb	r3, [r7, #30]
 8009cb8:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 8009cba:	7fbb      	ldrb	r3, [r7, #30]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	77bb      	strb	r3, [r7, #30]
 8009cc0:	4b9a      	ldr	r3, [pc, #616]	@ (8009f2c <MCU_ProcessModuleStatus2+0x2c4>)
 8009cc2:	7d1b      	ldrb	r3, [r3, #20]
 8009cc4:	7fba      	ldrb	r2, [r7, #30]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d3e4      	bcc.n	8009c94 <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 8009cca:	4b98      	ldr	r3, [pc, #608]	@ (8009f2c <MCU_ProcessModuleStatus2+0x2c4>)
 8009ccc:	7d1b      	ldrb	r3, [r3, #20]
 8009cce:	7ffa      	ldrb	r2, [r7, #31]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d10e      	bne.n	8009cf2 <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 8009cd4:	4b98      	ldr	r3, [pc, #608]	@ (8009f38 <MCU_ProcessModuleStatus2+0x2d0>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	f040 8114 	bne.w	8009f0a <MCU_ProcessModuleStatus2+0x2a2>
 8009ce2:	4996      	ldr	r1, [pc, #600]	@ (8009f3c <MCU_ProcessModuleStatus2+0x2d4>)
 8009ce4:	4896      	ldr	r0, [pc, #600]	@ (8009f40 <MCU_ProcessModuleStatus2+0x2d8>)
 8009ce6:	f00a f8a7 	bl	8013e38 <siprintf>
 8009cea:	4895      	ldr	r0, [pc, #596]	@ (8009f40 <MCU_ProcessModuleStatus2+0x2d8>)
 8009cec:	f7fb fc88 	bl	8005600 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 8009cf0:	e10b      	b.n	8009f0a <MCU_ProcessModuleStatus2+0x2a2>
    module[moduleIndex].statusPending = false;
 8009cf2:	7ffb      	ldrb	r3, [r7, #31]
 8009cf4:	4a8f      	ldr	r2, [pc, #572]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009cf6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009cfa:	fb01 f303 	mul.w	r3, r1, r3
 8009cfe:	4413      	add	r3, r2
 8009d00:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 8009d08:	7ffb      	ldrb	r3, [r7, #31]
 8009d0a:	8938      	ldrh	r0, [r7, #8]
 8009d0c:	4a89      	ldr	r2, [pc, #548]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009d0e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d12:	fb01 f303 	mul.w	r3, r1, r3
 8009d16:	4413      	add	r3, r2
 8009d18:	3322      	adds	r3, #34	@ 0x22
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 8009d1e:	7ffb      	ldrb	r3, [r7, #31]
 8009d20:	88f8      	ldrh	r0, [r7, #6]
 8009d22:	4a84      	ldr	r2, [pc, #528]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009d24:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d28:	fb01 f303 	mul.w	r3, r1, r3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	331e      	adds	r3, #30
 8009d30:	4602      	mov	r2, r0
 8009d32:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 8009d34:	7ffb      	ldrb	r3, [r7, #31]
 8009d36:	88b8      	ldrh	r0, [r7, #4]
 8009d38:	4a7e      	ldr	r2, [pc, #504]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009d3a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d3e:	fb01 f303 	mul.w	r3, r1, r3
 8009d42:	4413      	add	r3, r2
 8009d44:	3320      	adds	r3, #32
 8009d46:	4602      	mov	r2, r0
 8009d48:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 8009d4a:	7ffb      	ldrb	r3, [r7, #31]
 8009d4c:	8978      	ldrh	r0, [r7, #10]
 8009d4e:	4a79      	ldr	r2, [pc, #484]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009d50:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d54:	fb01 f303 	mul.w	r3, r1, r3
 8009d58:	4413      	add	r3, r2
 8009d5a:	3324      	adds	r3, #36	@ 0x24
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009d60:	4b78      	ldr	r3, [pc, #480]	@ (8009f44 <MCU_ProcessModuleStatus2+0x2dc>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	7ffb      	ldrb	r3, [r7, #31]
 8009d66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009d68:	4972      	ldr	r1, [pc, #456]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009d6a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009d6e:	fb00 f303 	mul.w	r3, r0, r3
 8009d72:	440b      	add	r3, r1
 8009d74:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8009d78:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009d7a:	7ffb      	ldrb	r3, [r7, #31]
 8009d7c:	4a72      	ldr	r2, [pc, #456]	@ (8009f48 <MCU_ProcessModuleStatus2+0x2e0>)
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	496c      	ldr	r1, [pc, #432]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009d82:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009d86:	fb00 f303 	mul.w	r3, r0, r3
 8009d8a:	440b      	add	r3, r1
 8009d8c:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8009d90:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009d92:	4b69      	ldr	r3, [pc, #420]	@ (8009f38 <MCU_ProcessModuleStatus2+0x2d0>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 80b5 	beq.w	8009f0a <MCU_ProcessModuleStatus2+0x2a2>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 8009da0:	7ffb      	ldrb	r3, [r7, #31]
 8009da2:	4a64      	ldr	r2, [pc, #400]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009da4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	4413      	add	r3, r2
 8009dae:	3322      	adds	r3, #34	@ 0x22
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7f6 fb9e 	bl	80004f4 <__aeabi_i2d>
 8009db8:	a357      	add	r3, pc, #348	@ (adr r3, 8009f18 <MCU_ProcessModuleStatus2+0x2b0>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fc03 	bl	80005c8 <__aeabi_dmul>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f04f 0200 	mov.w	r2, #0
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	f7f6 fa43 	bl	800025c <__adddf3>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f7f6 feeb 	bl	8000bb8 <__aeabi_d2f>
 8009de2:	4603      	mov	r3, r0
 8009de4:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 8009de6:	7ffb      	ldrb	r3, [r7, #31]
 8009de8:	4a52      	ldr	r2, [pc, #328]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009dea:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009dee:	fb01 f303 	mul.w	r3, r1, r3
 8009df2:	4413      	add	r3, r2
 8009df4:	331e      	adds	r3, #30
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f6 fb7b 	bl	80004f4 <__aeabi_i2d>
 8009dfe:	a346      	add	r3, pc, #280	@ (adr r3, 8009f18 <MCU_ProcessModuleStatus2+0x2b0>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fbe0 	bl	80005c8 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4619      	mov	r1, r3
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	f7f6 fa20 	bl	800025c <__adddf3>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4610      	mov	r0, r2
 8009e22:	4619      	mov	r1, r3
 8009e24:	f7f6 fec8 	bl	8000bb8 <__aeabi_d2f>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 8009e2c:	7ffb      	ldrb	r3, [r7, #31]
 8009e2e:	4a41      	ldr	r2, [pc, #260]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009e30:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009e34:	fb01 f303 	mul.w	r3, r1, r3
 8009e38:	4413      	add	r3, r2
 8009e3a:	3320      	adds	r3, #32
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7f6 fb58 	bl	80004f4 <__aeabi_i2d>
 8009e44:	a334      	add	r3, pc, #208	@ (adr r3, 8009f18 <MCU_ProcessModuleStatus2+0x2b0>)
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	f7f6 fbbd 	bl	80005c8 <__aeabi_dmul>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	f04f 0300 	mov.w	r3, #0
 8009e5e:	f7f6 f9fd 	bl	800025c <__adddf3>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4610      	mov	r0, r2
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f7f6 fea5 	bl	8000bb8 <__aeabi_d2f>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 8009e72:	7ffb      	ldrb	r3, [r7, #31]
 8009e74:	4a2f      	ldr	r2, [pc, #188]	@ (8009f34 <MCU_ProcessModuleStatus2+0x2cc>)
 8009e76:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009e7a:	fb01 f303 	mul.w	r3, r1, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	3324      	adds	r3, #36	@ 0x24
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f6 fb35 	bl	80004f4 <__aeabi_i2d>
 8009e8a:	a325      	add	r3, pc, #148	@ (adr r3, 8009f20 <MCU_ProcessModuleStatus2+0x2b8>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 fb9a 	bl	80005c8 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	f04f 0300 	mov.w	r3, #0
 8009ea4:	f7f6 f9da 	bl	800025c <__adddf3>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4610      	mov	r0, r2
 8009eae:	4619      	mov	r1, r3
 8009eb0:	f7f6 fe82 	bl	8000bb8 <__aeabi_d2f>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 8009eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f30 <MCU_ProcessModuleStatus2+0x2c8>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 8009ec0:	461e      	mov	r6, r3
 8009ec2:	69b8      	ldr	r0, [r7, #24]
 8009ec4:	f7f6 fb28 	bl	8000518 <__aeabi_f2d>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	6978      	ldr	r0, [r7, #20]
 8009ece:	f7f6 fb23 	bl	8000518 <__aeabi_f2d>
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	4689      	mov	r9, r1
 8009ed6:	6938      	ldr	r0, [r7, #16]
 8009ed8:	f7f6 fb1e 	bl	8000518 <__aeabi_f2d>
 8009edc:	4682      	mov	sl, r0
 8009ede:	468b      	mov	fp, r1
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f7f6 fb19 	bl	8000518 <__aeabi_f2d>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009eee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8009ef2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009ef6:	e9cd 4500 	strd	r4, r5, [sp]
 8009efa:	4632      	mov	r2, r6
 8009efc:	4913      	ldr	r1, [pc, #76]	@ (8009f4c <MCU_ProcessModuleStatus2+0x2e4>)
 8009efe:	4810      	ldr	r0, [pc, #64]	@ (8009f40 <MCU_ProcessModuleStatus2+0x2d8>)
 8009f00:	f009 ff9a 	bl	8013e38 <siprintf>
      serialOut(tempBuffer);
 8009f04:	480e      	ldr	r0, [pc, #56]	@ (8009f40 <MCU_ProcessModuleStatus2+0x2d8>)
 8009f06:	f7fb fb7b 	bl	8005600 <serialOut>
}
 8009f0a:	bf00      	nop
 8009f0c:	3724      	adds	r7, #36	@ 0x24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	f3af 8000 	nop.w
 8009f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f1c:	3f50624d 	.word	0x3f50624d
 8009f20:	eb851eb8 	.word	0xeb851eb8
 8009f24:	3f8eb851 	.word	0x3f8eb851
 8009f28:	20000da0 	.word	0x20000da0
 8009f2c:	2000a664 	.word	0x2000a664
 8009f30:	20000d94 	.word	0x20000d94
 8009f34:	20000de4 	.word	0x20000de4
 8009f38:	2000000c 	.word	0x2000000c
 8009f3c:	080187b4 	.word	0x080187b4
 8009f40:	20000b5c 	.word	0x20000b5c
 8009f44:	200005d0 	.word	0x200005d0
 8009f48:	20000d20 	.word	0x20000d20
 8009f4c:	080187f4 	.word	0x080187f4

08009f50 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 8009f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f54:	b08d      	sub	sp, #52	@ 0x34
 8009f56:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 8009f58:	463b      	mov	r3, r7
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f009 ffcf 	bl	8013f02 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 8009f64:	4a8e      	ldr	r2, [pc, #568]	@ (800a1a0 <MCU_ProcessModuleStatus3+0x250>)
 8009f66:	463b      	mov	r3, r7
 8009f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f6c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009f70:	4b8c      	ldr	r3, [pc, #560]	@ (800a1a4 <MCU_ProcessModuleStatus3+0x254>)
 8009f72:	7d1b      	ldrb	r3, [r3, #20]
 8009f74:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009f76:	2300      	movs	r3, #0
 8009f78:	75bb      	strb	r3, [r7, #22]
 8009f7a:	e015      	b.n	8009fa8 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009f7c:	4b8a      	ldr	r3, [pc, #552]	@ (800a1a8 <MCU_ProcessModuleStatus3+0x258>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009f84:	7dbb      	ldrb	r3, [r7, #22]
 8009f86:	4989      	ldr	r1, [pc, #548]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 8009f88:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009f8c:	fb00 f303 	mul.w	r3, r0, r3
 8009f90:	440b      	add	r3, r1
 8009f92:	3308      	adds	r3, #8
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d101      	bne.n	8009fa2 <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 8009f9e:	7dbb      	ldrb	r3, [r7, #22]
 8009fa0:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009fa2:	7dbb      	ldrb	r3, [r7, #22]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	75bb      	strb	r3, [r7, #22]
 8009fa8:	4b7e      	ldr	r3, [pc, #504]	@ (800a1a4 <MCU_ProcessModuleStatus3+0x254>)
 8009faa:	7d1b      	ldrb	r3, [r3, #20]
 8009fac:	7dba      	ldrb	r2, [r7, #22]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d3e4      	bcc.n	8009f7c <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 8009fb2:	4b7c      	ldr	r3, [pc, #496]	@ (800a1a4 <MCU_ProcessModuleStatus3+0x254>)
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	7dfa      	ldrb	r2, [r7, #23]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d10e      	bne.n	8009fda <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 8009fbc:	4b7c      	ldr	r3, [pc, #496]	@ (800a1b0 <MCU_ProcessModuleStatus3+0x260>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	f040 80dc 	bne.w	800a182 <MCU_ProcessModuleStatus3+0x232>
 8009fca:	497a      	ldr	r1, [pc, #488]	@ (800a1b4 <MCU_ProcessModuleStatus3+0x264>)
 8009fcc:	487a      	ldr	r0, [pc, #488]	@ (800a1b8 <MCU_ProcessModuleStatus3+0x268>)
 8009fce:	f009 ff33 	bl	8013e38 <siprintf>
 8009fd2:	4879      	ldr	r0, [pc, #484]	@ (800a1b8 <MCU_ProcessModuleStatus3+0x268>)
 8009fd4:	f7fb fb14 	bl	8005600 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 8009fd8:	e0d3      	b.n	800a182 <MCU_ProcessModuleStatus3+0x232>
    module[moduleIndex].statusPending = false;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	4a73      	ldr	r2, [pc, #460]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 8009fde:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fe2:	fb01 f303 	mul.w	r3, r1, r3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009fec:	2200      	movs	r2, #0
 8009fee:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	88b8      	ldrh	r0, [r7, #4]
 8009ff4:	4a6d      	ldr	r2, [pc, #436]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 8009ff6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009ffa:	fb01 f303 	mul.w	r3, r1, r3
 8009ffe:	4413      	add	r3, r2
 800a000:	331c      	adds	r3, #28
 800a002:	4602      	mov	r2, r0
 800a004:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	8878      	ldrh	r0, [r7, #2]
 800a00a:	4a68      	ldr	r2, [pc, #416]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a00c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a010:	fb01 f303 	mul.w	r3, r1, r3
 800a014:	4413      	add	r3, r2
 800a016:	3318      	adds	r3, #24
 800a018:	4602      	mov	r2, r0
 800a01a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	8838      	ldrh	r0, [r7, #0]
 800a020:	4a62      	ldr	r2, [pc, #392]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a022:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a026:	fb01 f303 	mul.w	r3, r1, r3
 800a02a:	4413      	add	r3, r2
 800a02c:	331a      	adds	r3, #26
 800a02e:	4602      	mov	r2, r0
 800a030:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a032:	4b62      	ldr	r3, [pc, #392]	@ (800a1bc <MCU_ProcessModuleStatus3+0x26c>)
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a03a:	495c      	ldr	r1, [pc, #368]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a03c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a040:	fb00 f303 	mul.w	r3, r0, r3
 800a044:	440b      	add	r3, r1
 800a046:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a04a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	4a5c      	ldr	r2, [pc, #368]	@ (800a1c0 <MCU_ProcessModuleStatus3+0x270>)
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	4956      	ldr	r1, [pc, #344]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a054:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a058:	fb00 f303 	mul.w	r3, r0, r3
 800a05c:	440b      	add	r3, r1
 800a05e:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a062:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a064:	4b52      	ldr	r3, [pc, #328]	@ (800a1b0 <MCU_ProcessModuleStatus3+0x260>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 8088 	beq.w	800a182 <MCU_ProcessModuleStatus3+0x232>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	4a4d      	ldr	r2, [pc, #308]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a076:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a07a:	fb01 f303 	mul.w	r3, r1, r3
 800a07e:	4413      	add	r3, r2
 800a080:	331c      	adds	r3, #28
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	4618      	mov	r0, r3
 800a086:	f7f6 fa35 	bl	80004f4 <__aeabi_i2d>
 800a08a:	a341      	add	r3, pc, #260	@ (adr r3, 800a190 <MCU_ProcessModuleStatus3+0x240>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f7f6 fa9a 	bl	80005c8 <__aeabi_dmul>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4610      	mov	r0, r2
 800a09a:	4619      	mov	r1, r3
 800a09c:	a33e      	add	r3, pc, #248	@ (adr r3, 800a198 <MCU_ProcessModuleStatus3+0x248>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f8d9 	bl	8000258 <__aeabi_dsub>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f7f6 fd83 	bl	8000bb8 <__aeabi_d2f>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	4a3c      	ldr	r2, [pc, #240]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a0ba:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a0be:	fb01 f303 	mul.w	r3, r1, r3
 800a0c2:	4413      	add	r3, r2
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7f6 fa13 	bl	80004f4 <__aeabi_i2d>
 800a0ce:	a330      	add	r3, pc, #192	@ (adr r3, 800a190 <MCU_ProcessModuleStatus3+0x240>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fa78 	bl	80005c8 <__aeabi_dmul>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4610      	mov	r0, r2
 800a0de:	4619      	mov	r1, r3
 800a0e0:	a32d      	add	r3, pc, #180	@ (adr r3, 800a198 <MCU_ProcessModuleStatus3+0x248>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f7f6 f8b7 	bl	8000258 <__aeabi_dsub>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7f6 fd61 	bl	8000bb8 <__aeabi_d2f>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a1ac <MCU_ProcessModuleStatus3+0x25c>)
 800a0fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a102:	fb01 f303 	mul.w	r3, r1, r3
 800a106:	4413      	add	r3, r2
 800a108:	331a      	adds	r3, #26
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7f6 f9f1 	bl	80004f4 <__aeabi_i2d>
 800a112:	a31f      	add	r3, pc, #124	@ (adr r3, 800a190 <MCU_ProcessModuleStatus3+0x240>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 fa56 	bl	80005c8 <__aeabi_dmul>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4610      	mov	r0, r2
 800a122:	4619      	mov	r1, r3
 800a124:	a31c      	add	r3, pc, #112	@ (adr r3, 800a198 <MCU_ProcessModuleStatus3+0x248>)
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	f7f6 f895 	bl	8000258 <__aeabi_dsub>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	f7f6 fd3f 	bl	8000bb8 <__aeabi_d2f>
 800a13a:	4603      	mov	r3, r0
 800a13c:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800a13e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a8 <MCU_ProcessModuleStatus3+0x258>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800a146:	461e      	mov	r6, r3
 800a148:	6938      	ldr	r0, [r7, #16]
 800a14a:	f7f6 f9e5 	bl	8000518 <__aeabi_f2d>
 800a14e:	4604      	mov	r4, r0
 800a150:	460d      	mov	r5, r1
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7f6 f9e0 	bl	8000518 <__aeabi_f2d>
 800a158:	4680      	mov	r8, r0
 800a15a:	4689      	mov	r9, r1
 800a15c:	68b8      	ldr	r0, [r7, #8]
 800a15e:	f7f6 f9db 	bl	8000518 <__aeabi_f2d>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a16a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a16e:	e9cd 4500 	strd	r4, r5, [sp]
 800a172:	4632      	mov	r2, r6
 800a174:	4913      	ldr	r1, [pc, #76]	@ (800a1c4 <MCU_ProcessModuleStatus3+0x274>)
 800a176:	4810      	ldr	r0, [pc, #64]	@ (800a1b8 <MCU_ProcessModuleStatus3+0x268>)
 800a178:	f009 fe5e 	bl	8013e38 <siprintf>
      serialOut(tempBuffer);
 800a17c:	480e      	ldr	r0, [pc, #56]	@ (800a1b8 <MCU_ProcessModuleStatus3+0x268>)
 800a17e:	f7fb fa3f 	bl	8005600 <serialOut>
}
 800a182:	bf00      	nop
 800a184:	371c      	adds	r7, #28
 800a186:	46bd      	mov	sp, r7
 800a188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a18c:	f3af 8000 	nop.w
 800a190:	47ae147b 	.word	0x47ae147b
 800a194:	3f847ae1 	.word	0x3f847ae1
 800a198:	cccccccd 	.word	0xcccccccd
 800a19c:	404baccc 	.word	0x404baccc
 800a1a0:	20000da0 	.word	0x20000da0
 800a1a4:	2000a664 	.word	0x2000a664
 800a1a8:	20000d94 	.word	0x20000d94
 800a1ac:	20000de4 	.word	0x20000de4
 800a1b0:	2000000c 	.word	0x2000000c
 800a1b4:	08018884 	.word	0x08018884
 800a1b8:	20000b5c 	.word	0x20000b5c
 800a1bc:	200005d0 	.word	0x200005d0
 800a1c0:	20000d20 	.word	0x20000d20
 800a1c4:	080188c4 	.word	0x080188c4

0800a1c8 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b094      	sub	sp, #80	@ 0x50
 800a1cc:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800a1ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1d2:	2208      	movs	r2, #8
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f009 fe93 	bl	8013f02 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800a1dc:	4a31      	ldr	r2, [pc, #196]	@ (800a2a4 <MCU_ProcessCellCommStatus1+0xdc>)
 800a1de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1e6:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800a1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a2a8 <MCU_ProcessCellCommStatus1+0xe0>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d052      	beq.n	800a29c <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800a1f6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a1fa:	2bff      	cmp	r3, #255	@ 0xff
 800a1fc:	d10a      	bne.n	800a214 <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800a1fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800a202:	2b00      	cmp	r3, #0
 800a204:	d106      	bne.n	800a214 <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 800a206:	f107 0318 	add.w	r3, r7, #24
 800a20a:	4928      	ldr	r1, [pc, #160]	@ (800a2ac <MCU_ProcessCellCommStatus1+0xe4>)
 800a20c:	4618      	mov	r0, r3
 800a20e:	f009 fe13 	bl	8013e38 <siprintf>
 800a212:	e019      	b.n	800a248 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 800a214:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a218:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d109      	bne.n	800a234 <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 800a220:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a224:	461a      	mov	r2, r3
 800a226:	f107 0318 	add.w	r3, r7, #24
 800a22a:	4921      	ldr	r1, [pc, #132]	@ (800a2b0 <MCU_ProcessCellCommStatus1+0xe8>)
 800a22c:	4618      	mov	r0, r3
 800a22e:	f009 fe03 	bl	8013e38 <siprintf>
 800a232:	e009      	b.n	800a248 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 800a234:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a238:	461a      	mov	r2, r3
 800a23a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a23e:	f107 0018 	add.w	r0, r7, #24
 800a242:	491c      	ldr	r1, [pc, #112]	@ (800a2b4 <MCU_ProcessCellCommStatus1+0xec>)
 800a244:	f009 fdf8 	bl	8013e38 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 800a248:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800a24c:	2bff      	cmp	r3, #255	@ 0xff
 800a24e:	d105      	bne.n	800a25c <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 800a250:	1d3b      	adds	r3, r7, #4
 800a252:	4919      	ldr	r1, [pc, #100]	@ (800a2b8 <MCU_ProcessCellCommStatus1+0xf0>)
 800a254:	4618      	mov	r0, r3
 800a256:	f009 fdef 	bl	8013e38 <siprintf>
 800a25a:	e007      	b.n	800a26c <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 800a25c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800a260:	461a      	mov	r2, r3
 800a262:	1d3b      	adds	r3, r7, #4
 800a264:	4915      	ldr	r1, [pc, #84]	@ (800a2bc <MCU_ProcessCellCommStatus1+0xf4>)
 800a266:	4618      	mov	r0, r3
 800a268:	f009 fde6 	bl	8013e38 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a26c:	4b14      	ldr	r3, [pc, #80]	@ (800a2c0 <MCU_ProcessCellCommStatus1+0xf8>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a274:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a276:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a278:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a27a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a27e:	f107 0218 	add.w	r2, r7, #24
 800a282:	9302      	str	r3, [sp, #8]
 800a284:	1d3b      	adds	r3, r7, #4
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	9100      	str	r1, [sp, #0]
 800a28a:	4613      	mov	r3, r2
 800a28c:	4602      	mov	r2, r0
 800a28e:	490d      	ldr	r1, [pc, #52]	@ (800a2c4 <MCU_ProcessCellCommStatus1+0xfc>)
 800a290:	480d      	ldr	r0, [pc, #52]	@ (800a2c8 <MCU_ProcessCellCommStatus1+0x100>)
 800a292:	f009 fdd1 	bl	8013e38 <siprintf>

    serialOut(tempBuffer);
 800a296:	480c      	ldr	r0, [pc, #48]	@ (800a2c8 <MCU_ProcessCellCommStatus1+0x100>)
 800a298:	f7fb f9b2 	bl	8005600 <serialOut>
  }
}
 800a29c:	bf00      	nop
 800a29e:	3740      	adds	r7, #64	@ 0x40
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20000da0 	.word	0x20000da0
 800a2a8:	2000000c 	.word	0x2000000c
 800a2ac:	08018930 	.word	0x08018930
 800a2b0:	0801893c 	.word	0x0801893c
 800a2b4:	08018948 	.word	0x08018948
 800a2b8:	08018954 	.word	0x08018954
 800a2bc:	0801895c 	.word	0x0801895c
 800a2c0:	20000d94 	.word	0x20000d94
 800a2c4:	08018970 	.word	0x08018970
 800a2c8:	20000b5c 	.word	0x20000b5c
 800a2cc:	00000000 	.word	0x00000000

0800a2d0 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 800a2d0:	b5b0      	push	{r4, r5, r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	460a      	mov	r2, r1
 800a2da:	71fb      	strb	r3, [r7, #7]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // set up the frame
  stateChange.moduleId = moduleId;
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 800a2e4:	79bb      	ldrb	r3, [r7, #6]
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	7a7b      	ldrb	r3, [r7, #9]
 800a2ee:	f362 0303 	bfi	r3, r2, #0, #4
 800a2f2:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 800a2f4:	7a7b      	ldrb	r3, [r7, #9]
 800a2f6:	f36f 1307 	bfc	r3, #4, #4
 800a2fa:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800a2fc:	4b4c      	ldr	r3, [pc, #304]	@ (800a430 <MCU_TransmitState+0x160>)
 800a2fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a302:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800a304:	4b4b      	ldr	r3, [pc, #300]	@ (800a434 <MCU_TransmitState+0x164>)
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800a30a:	4b4a      	ldr	r3, [pc, #296]	@ (800a434 <MCU_TransmitState+0x164>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800a310:	4b48      	ldr	r3, [pc, #288]	@ (800a434 <MCU_TransmitState+0x164>)
 800a312:	2200      	movs	r2, #0
 800a314:	609a      	str	r2, [r3, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4a47      	ldr	r2, [pc, #284]	@ (800a438 <MCU_TransmitState+0x168>)
 800a31a:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800a31c:	4a45      	ldr	r2, [pc, #276]	@ (800a434 <MCU_TransmitState+0x164>)
 800a31e:	8813      	ldrh	r3, [r2, #0]
 800a320:	f240 5114 	movw	r1, #1300	@ 0x514
 800a324:	f361 030a 	bfi	r3, r1, #0, #11
 800a328:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800a32a:	79fa      	ldrb	r2, [r7, #7]
 800a32c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800a330:	4940      	ldr	r1, [pc, #256]	@ (800a434 <MCU_TransmitState+0x164>)
 800a332:	680b      	ldr	r3, [r1, #0]
 800a334:	f362 23dc 	bfi	r3, r2, #11, #18
 800a338:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800a33a:	4a3e      	ldr	r2, [pc, #248]	@ (800a434 <MCU_TransmitState+0x164>)
 800a33c:	7913      	ldrb	r3, [r2, #4]
 800a33e:	f36f 1386 	bfc	r3, #6, #1
 800a342:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 800a344:	4a3b      	ldr	r2, [pc, #236]	@ (800a434 <MCU_TransmitState+0x164>)
 800a346:	7913      	ldrb	r3, [r2, #4]
 800a348:	2104      	movs	r1, #4
 800a34a:	f361 0303 	bfi	r3, r1, #0, #4
 800a34e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a350:	4a38      	ldr	r2, [pc, #224]	@ (800a434 <MCU_TransmitState+0x164>)
 800a352:	7913      	ldrb	r3, [r2, #4]
 800a354:	f36f 13c7 	bfc	r3, #7, #1
 800a358:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800a35a:	4a36      	ldr	r2, [pc, #216]	@ (800a434 <MCU_TransmitState+0x164>)
 800a35c:	7913      	ldrb	r3, [r2, #4]
 800a35e:	f043 0310 	orr.w	r3, r3, #16
 800a362:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800a364:	4b35      	ldr	r3, [pc, #212]	@ (800a43c <MCU_TransmitState+0x16c>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 0302 	and.w	r3, r3, #2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d019      	beq.n	800a3a4 <MCU_TransmitState+0xd4>
 800a370:	79fc      	ldrb	r4, [r7, #7]
 800a372:	79bd      	ldrb	r5, [r7, #6]
 800a374:	4b2e      	ldr	r3, [pc, #184]	@ (800a430 <MCU_TransmitState+0x160>)
 800a376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7f6 f8ba 	bl	80004f4 <__aeabi_i2d>
 800a380:	a329      	add	r3, pc, #164	@ (adr r3, 800a428 <MCU_TransmitState+0x158>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f91f 	bl	80005c8 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	e9cd 2300 	strd	r2, r3, [sp]
 800a392:	462b      	mov	r3, r5
 800a394:	4622      	mov	r2, r4
 800a396:	492a      	ldr	r1, [pc, #168]	@ (800a440 <MCU_TransmitState+0x170>)
 800a398:	482a      	ldr	r0, [pc, #168]	@ (800a444 <MCU_TransmitState+0x174>)
 800a39a:	f009 fd4d 	bl	8013e38 <siprintf>
 800a39e:	4829      	ldr	r0, [pc, #164]	@ (800a444 <MCU_TransmitState+0x174>)
 800a3a0:	f7fb f92e 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	f7fe fa31 	bl	800880c <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f9c9 	bl	800a744 <MCU_ModuleIndexFromId>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 800a3b6:	4b1e      	ldr	r3, [pc, #120]	@ (800a430 <MCU_TransmitState+0x160>)
 800a3b8:	7d1b      	ldrb	r3, [r3, #20]
 800a3ba:	7bfa      	ldrb	r2, [r7, #15]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d02c      	beq.n	800a41a <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	4a21      	ldr	r2, [pc, #132]	@ (800a448 <MCU_TransmitState+0x178>)
 800a3c4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a3c8:	fb01 f303 	mul.w	r3, r1, r3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3329      	adds	r3, #41	@ 0x29
 800a3d0:	79ba      	ldrb	r2, [r7, #6]
 800a3d2:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a448 <MCU_TransmitState+0x178>)
 800a3d8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	332a      	adds	r3, #42	@ 0x2a
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 800a3e8:	4b18      	ldr	r3, [pc, #96]	@ (800a44c <MCU_TransmitState+0x17c>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a3f0:	4915      	ldr	r1, [pc, #84]	@ (800a448 <MCU_TransmitState+0x178>)
 800a3f2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a3f6:	fb00 f303 	mul.w	r3, r0, r3
 800a3fa:	440b      	add	r3, r1
 800a3fc:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800a400:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	4a12      	ldr	r2, [pc, #72]	@ (800a450 <MCU_TransmitState+0x180>)
 800a406:	6812      	ldr	r2, [r2, #0]
 800a408:	490f      	ldr	r1, [pc, #60]	@ (800a448 <MCU_TransmitState+0x178>)
 800a40a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a40e:	fb00 f303 	mul.w	r3, r0, r3
 800a412:	440b      	add	r3, r1
 800a414:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800a418:	601a      	str	r2, [r3, #0]
  }
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bdb0      	pop	{r4, r5, r7, pc}
 800a422:	bf00      	nop
 800a424:	f3af 8000 	nop.w
 800a428:	eb851eb8 	.word	0xeb851eb8
 800a42c:	3f8eb851 	.word	0x3f8eb851
 800a430:	2000a664 	.word	0x2000a664
 800a434:	20000d38 	.word	0x20000d38
 800a438:	20000d44 	.word	0x20000d44
 800a43c:	2000000c 	.word	0x2000000c
 800a440:	080189f4 	.word	0x080189f4
 800a444:	20000b5c 	.word	0x20000b5c
 800a448:	20000de4 	.word	0x20000de4
 800a44c:	200005d0 	.word	0x200005d0
 800a450:	20000d20 	.word	0x20000d20

0800a454 <MCU_TransmitMaxState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t M a x S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMaxState(moduleState state){
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
  // This is a broadcast to all module to define their maximum permissible state
  // i.e. They will be able to set state to anything up to and including the maximum state

  CANFRM_MODULE_MAX_STATE maxState;

  maxState.maximumState = state;
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	b2da      	uxtb	r2, r3
 800a466:	7b3b      	ldrb	r3, [r7, #12]
 800a468:	f362 0303 	bfi	r3, r2, #0, #4
 800a46c:	733b      	strb	r3, [r7, #12]
  maxState.UNUSED_4_7 = 0;
 800a46e:	7b3b      	ldrb	r3, [r7, #12]
 800a470:	f36f 1307 	bfc	r3, #4, #4
 800a474:	733b      	strb	r3, [r7, #12]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800a476:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800a47c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a47e:	2200      	movs	r2, #0
 800a480:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800a482:	4b19      	ldr	r3, [pc, #100]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a484:	2200      	movs	r2, #0
 800a486:	609a      	str	r2, [r3, #8]

  memcpy(txd, &maxState, sizeof(maxState));
 800a488:	7b3a      	ldrb	r2, [r7, #12]
 800a48a:	4b18      	ldr	r3, [pc, #96]	@ (800a4ec <MCU_TransmitMaxState+0x98>)
 800a48c:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_MAX_STATE;         // Standard ID
 800a48e:	4a16      	ldr	r2, [pc, #88]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a490:	8813      	ldrh	r3, [r2, #0]
 800a492:	f240 5117 	movw	r1, #1303	@ 0x517
 800a496:	f361 030a 	bfi	r3, r1, #0, #11
 800a49a:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = pack.id;                     // Extended ID = controller ID
 800a49c:	4b14      	ldr	r3, [pc, #80]	@ (800a4f0 <MCU_TransmitMaxState+0x9c>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800a4a6:	4910      	ldr	r1, [pc, #64]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a4a8:	680b      	ldr	r3, [r1, #0]
 800a4aa:	f362 23dc 	bfi	r3, r2, #11, #18
 800a4ae:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800a4b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a4b2:	7913      	ldrb	r3, [r2, #4]
 800a4b4:	f36f 1386 	bfc	r3, #6, #1
 800a4b8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800a4ba:	4a0b      	ldr	r2, [pc, #44]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a4bc:	7913      	ldrb	r3, [r2, #4]
 800a4be:	2101      	movs	r1, #1
 800a4c0:	f361 0303 	bfi	r3, r1, #0, #4
 800a4c4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a4c6:	4a08      	ldr	r2, [pc, #32]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a4c8:	7913      	ldrb	r3, [r2, #4]
 800a4ca:	f36f 13c7 	bfc	r3, #7, #1
 800a4ce:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800a4d0:	4a05      	ldr	r2, [pc, #20]	@ (800a4e8 <MCU_TransmitMaxState+0x94>)
 800a4d2:	7913      	ldrb	r3, [r2, #4]
 800a4d4:	f043 0310 	orr.w	r3, r3, #16
 800a4d8:	7113      	strb	r3, [r2, #4]

//  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x517 Maximum Permissible State, STATE=%02x",state); serialOut(tempBuffer);}
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f7fe f996 	bl	800880c <MCU_TransmitMessageQueue>
    module[index].command.commandStatus   = commandIssued;
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
    module[index].lastTransmit.overflows  = etTimerOverflows;
  }
  */
}
 800a4e0:	bf00      	nop
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000d38 	.word	0x20000d38
 800a4ec:	20000d44 	.word	0x20000d44
 800a4f0:	2000a664 	.word	0x2000a664

0800a4f4 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 800a4f4:	b5b0      	push	{r4, r5, r7, lr}
 800a4f6:	b08a      	sub	sp, #40	@ 0x28
 800a4f8:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 800a4fe:	4a85      	ldr	r2, [pc, #532]	@ (800a714 <MCU_ProcessCellDetail+0x220>)
 800a500:	1d3b      	adds	r3, r7, #4
 800a502:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a506:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800a50a:	4b83      	ldr	r3, [pc, #524]	@ (800a718 <MCU_ProcessCellDetail+0x224>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d017      	beq.n	800a546 <MCU_ProcessCellDetail+0x52>
 800a516:	4b81      	ldr	r3, [pc, #516]	@ (800a71c <MCU_ProcessCellDetail+0x228>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800a51e:	461c      	mov	r4, r3
 800a520:	797b      	ldrb	r3, [r7, #5]
 800a522:	461d      	mov	r5, r3
 800a524:	793b      	ldrb	r3, [r7, #4]
 800a526:	7aba      	ldrb	r2, [r7, #10]
 800a528:	88f9      	ldrh	r1, [r7, #6]
 800a52a:	8938      	ldrh	r0, [r7, #8]
 800a52c:	9003      	str	r0, [sp, #12]
 800a52e:	9102      	str	r1, [sp, #8]
 800a530:	9201      	str	r2, [sp, #4]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462b      	mov	r3, r5
 800a536:	4622      	mov	r2, r4
 800a538:	4979      	ldr	r1, [pc, #484]	@ (800a720 <MCU_ProcessCellDetail+0x22c>)
 800a53a:	487a      	ldr	r0, [pc, #488]	@ (800a724 <MCU_ProcessCellDetail+0x230>)
 800a53c:	f009 fc7c 	bl	8013e38 <siprintf>
 800a540:	4878      	ldr	r0, [pc, #480]	@ (800a724 <MCU_ProcessCellDetail+0x230>)
 800a542:	f7fb f85d 	bl	8005600 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800a546:	4b78      	ldr	r3, [pc, #480]	@ (800a728 <MCU_ProcessCellDetail+0x234>)
 800a548:	7d1b      	ldrb	r3, [r3, #20]
 800a54a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a54c:	2300      	movs	r3, #0
 800a54e:	75bb      	strb	r3, [r7, #22]
 800a550:	e015      	b.n	800a57e <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a552:	4b72      	ldr	r3, [pc, #456]	@ (800a71c <MCU_ProcessCellDetail+0x228>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a55a:	7dbb      	ldrb	r3, [r7, #22]
 800a55c:	4973      	ldr	r1, [pc, #460]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a55e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a562:	fb00 f303 	mul.w	r3, r0, r3
 800a566:	440b      	add	r3, r1
 800a568:	3308      	adds	r3, #8
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a570:	429a      	cmp	r2, r3
 800a572:	d101      	bne.n	800a578 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 800a574:	7dbb      	ldrb	r3, [r7, #22]
 800a576:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a578:	7dbb      	ldrb	r3, [r7, #22]
 800a57a:	3301      	adds	r3, #1
 800a57c:	75bb      	strb	r3, [r7, #22]
 800a57e:	4b6a      	ldr	r3, [pc, #424]	@ (800a728 <MCU_ProcessCellDetail+0x234>)
 800a580:	7d1b      	ldrb	r3, [r3, #20]
 800a582:	7dba      	ldrb	r2, [r7, #22]
 800a584:	429a      	cmp	r2, r3
 800a586:	d3e4      	bcc.n	800a552 <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	7978      	ldrb	r0, [r7, #5]
 800a58c:	4a67      	ldr	r2, [pc, #412]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a58e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	4413      	add	r3, r2
 800a598:	332d      	adds	r3, #45	@ 0x2d
 800a59a:	4602      	mov	r2, r0
 800a59c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 800a59e:	7dfa      	ldrb	r2, [r7, #23]
 800a5a0:	793b      	ldrb	r3, [r7, #4]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	7abc      	ldrb	r4, [r7, #10]
 800a5a6:	4961      	ldr	r1, [pc, #388]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	4403      	add	r3, r0
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a5b4:	fb00 f202 	mul.w	r2, r0, r2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	3332      	adds	r3, #50	@ 0x32
 800a5be:	4622      	mov	r2, r4
 800a5c0:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 800a5c2:	7dfa      	ldrb	r2, [r7, #23]
 800a5c4:	793b      	ldrb	r3, [r7, #4]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	7afc      	ldrb	r4, [r7, #11]
 800a5ca:	4958      	ldr	r1, [pc, #352]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4403      	add	r3, r0
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a5d8:	fb00 f202 	mul.w	r2, r0, r2
 800a5dc:	4413      	add	r3, r2
 800a5de:	440b      	add	r3, r1
 800a5e0:	3333      	adds	r3, #51	@ 0x33
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 800a5e6:	7dfa      	ldrb	r2, [r7, #23]
 800a5e8:	793b      	ldrb	r3, [r7, #4]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	88fc      	ldrh	r4, [r7, #6]
 800a5ee:	494f      	ldr	r1, [pc, #316]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	4403      	add	r3, r0
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a5fc:	fb00 f202 	mul.w	r2, r0, r2
 800a600:	4413      	add	r3, r2
 800a602:	440b      	add	r3, r1
 800a604:	3330      	adds	r3, #48	@ 0x30
 800a606:	4622      	mov	r2, r4
 800a608:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800a60a:	7dfa      	ldrb	r2, [r7, #23]
 800a60c:	793b      	ldrb	r3, [r7, #4]
 800a60e:	4618      	mov	r0, r3
 800a610:	893c      	ldrh	r4, [r7, #8]
 800a612:	4946      	ldr	r1, [pc, #280]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a614:	4603      	mov	r3, r0
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	4403      	add	r3, r0
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a620:	fb00 f202 	mul.w	r2, r0, r2
 800a624:	4413      	add	r3, r2
 800a626:	440b      	add	r3, r1
 800a628:	332e      	adds	r3, #46	@ 0x2e
 800a62a:	4622      	mov	r2, r4
 800a62c:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800a62e:	4b40      	ldr	r3, [pc, #256]	@ (800a730 <MCU_ProcessCellDetail+0x23c>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a636:	493d      	ldr	r1, [pc, #244]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a638:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a63c:	fb00 f303 	mul.w	r3, r0, r3
 800a640:	440b      	add	r3, r1
 800a642:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a646:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a648:	7dfb      	ldrb	r3, [r7, #23]
 800a64a:	4a3a      	ldr	r2, [pc, #232]	@ (800a734 <MCU_ProcessCellDetail+0x240>)
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	4937      	ldr	r1, [pc, #220]	@ (800a72c <MCU_ProcessCellDetail+0x238>)
 800a650:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a654:	fb00 f303 	mul.w	r3, r0, r3
 800a658:	440b      	add	r3, r1
 800a65a:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a65e:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 800a660:	793b      	ldrb	r3, [r7, #4]
 800a662:	461a      	mov	r2, r3
 800a664:	797b      	ldrb	r3, [r7, #5]
 800a666:	3b01      	subs	r3, #1
 800a668:	429a      	cmp	r2, r3
 800a66a:	da4f      	bge.n	800a70c <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 800a66c:	793b      	ldrb	r3, [r7, #4]
 800a66e:	3301      	adds	r3, #1
 800a670:	b2db      	uxtb	r3, r3
 800a672:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 800a674:	4b30      	ldr	r3, [pc, #192]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800a67a:	4b2f      	ldr	r3, [pc, #188]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800a680:	4b2d      	ldr	r3, [pc, #180]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a682:	2200      	movs	r2, #0
 800a684:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 800a686:	4b2d      	ldr	r3, [pc, #180]	@ (800a73c <MCU_ProcessCellDetail+0x248>)
 800a688:	461a      	mov	r2, r3
 800a68a:	f107 030c 	add.w	r3, r7, #12
 800a68e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a692:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 800a696:	4a28      	ldr	r2, [pc, #160]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a698:	8813      	ldrh	r3, [r2, #0]
 800a69a:	f240 5115 	movw	r1, #1301	@ 0x515
 800a69e:	f361 030a 	bfi	r3, r1, #0, #11
 800a6a2:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a71c <MCU_ProcessCellDetail+0x228>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 800a6ac:	4a22      	ldr	r2, [pc, #136]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a6ae:	6813      	ldr	r3, [r2, #0]
 800a6b0:	f361 23dc 	bfi	r3, r1, #11, #18
 800a6b4:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800a6b6:	4a20      	ldr	r2, [pc, #128]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a6b8:	7913      	ldrb	r3, [r2, #4]
 800a6ba:	f36f 1386 	bfc	r3, #6, #1
 800a6be:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 800a6c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a6c2:	7913      	ldrb	r3, [r2, #4]
 800a6c4:	2102      	movs	r1, #2
 800a6c6:	f361 0303 	bfi	r3, r1, #0, #4
 800a6ca:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a6cc:	4a1a      	ldr	r2, [pc, #104]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a6ce:	7913      	ldrb	r3, [r2, #4]
 800a6d0:	f36f 13c7 	bfc	r3, #7, #1
 800a6d4:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800a6d6:	4a18      	ldr	r2, [pc, #96]	@ (800a738 <MCU_ProcessCellDetail+0x244>)
 800a6d8:	7913      	ldrb	r3, [r2, #4]
 800a6da:	f043 0310 	orr.w	r3, r3, #16
 800a6de:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 800a6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <MCU_ProcessCellDetail+0x224>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00c      	beq.n	800a706 <MCU_ProcessCellDetail+0x212>
 800a6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a71c <MCU_ProcessCellDetail+0x228>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	7b7b      	ldrb	r3, [r7, #13]
 800a6f8:	4911      	ldr	r1, [pc, #68]	@ (800a740 <MCU_ProcessCellDetail+0x24c>)
 800a6fa:	480a      	ldr	r0, [pc, #40]	@ (800a724 <MCU_ProcessCellDetail+0x230>)
 800a6fc:	f009 fb9c 	bl	8013e38 <siprintf>
 800a700:	4808      	ldr	r0, [pc, #32]	@ (800a724 <MCU_ProcessCellDetail+0x230>)
 800a702:	f7fa ff7d 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800a706:	2001      	movs	r0, #1
 800a708:	f7fe f880 	bl	800880c <MCU_TransmitMessageQueue>
  }
}
 800a70c:	bf00      	nop
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bdb0      	pop	{r4, r5, r7, pc}
 800a714:	20000da0 	.word	0x20000da0
 800a718:	2000000c 	.word	0x2000000c
 800a71c:	20000d94 	.word	0x20000d94
 800a720:	08018a2c 	.word	0x08018a2c
 800a724:	20000b5c 	.word	0x20000b5c
 800a728:	2000a664 	.word	0x2000a664
 800a72c:	20000de4 	.word	0x20000de4
 800a730:	200005d0 	.word	0x200005d0
 800a734:	20000d20 	.word	0x20000d20
 800a738:	20000d38 	.word	0x20000d38
 800a73c:	20000d44 	.word	0x20000d44
 800a740:	08018a88 	.word	0x08018a88

0800a744 <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 800a74e:	4b15      	ldr	r3, [pc, #84]	@ (800a7a4 <MCU_ModuleIndexFromId+0x60>)
 800a750:	7d1b      	ldrb	r3, [r3, #20]
 800a752:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800a754:	2300      	movs	r3, #0
 800a756:	73bb      	strb	r3, [r7, #14]
 800a758:	e010      	b.n	800a77c <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <MCU_ModuleIndexFromId+0x64>)
 800a75e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a762:	fb01 f303 	mul.w	r3, r1, r3
 800a766:	4413      	add	r3, r2
 800a768:	3308      	adds	r3, #8
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	79fa      	ldrb	r2, [r7, #7]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d101      	bne.n	800a776 <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	3301      	adds	r3, #1
 800a77a:	73bb      	strb	r3, [r7, #14]
 800a77c:	4b09      	ldr	r3, [pc, #36]	@ (800a7a4 <MCU_ModuleIndexFromId+0x60>)
 800a77e:	7d1b      	ldrb	r3, [r3, #20]
 800a780:	7bba      	ldrb	r2, [r7, #14]
 800a782:	429a      	cmp	r2, r3
 800a784:	d3e9      	bcc.n	800a75a <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 800a786:	4b07      	ldr	r3, [pc, #28]	@ (800a7a4 <MCU_ModuleIndexFromId+0x60>)
 800a788:	7d1b      	ldrb	r3, [r3, #20]
 800a78a:	7bfa      	ldrb	r2, [r7, #15]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d001      	beq.n	800a794 <MCU_ModuleIndexFromId+0x50>
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	e001      	b.n	800a798 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 800a794:	4b03      	ldr	r3, [pc, #12]	@ (800a7a4 <MCU_ModuleIndexFromId+0x60>)
 800a796:	7d1b      	ldrb	r3, [r3, #20]

}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	2000a664 	.word	0x2000a664
 800a7a8:	20000de4 	.word	0x20000de4

0800a7ac <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 800a7ac:	b590      	push	{r4, r7, lr}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800a7b6:	4b32      	ldr	r3, [pc, #200]	@ (800a880 <MCU_TicksSinceLastMessage+0xd4>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7bc:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800a7be:	4b31      	ldr	r3, [pc, #196]	@ (800a884 <MCU_TicksSinceLastMessage+0xd8>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff ffbc 	bl	800a744 <MCU_ModuleIndexFromId>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800a7d0:	4b2d      	ldr	r3, [pc, #180]	@ (800a888 <MCU_TicksSinceLastMessage+0xdc>)
 800a7d2:	7d1b      	ldrb	r3, [r3, #20]
 800a7d4:	7afa      	ldrb	r2, [r7, #11]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d040      	beq.n	800a85c <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 800a7da:	7afb      	ldrb	r3, [r7, #11]
 800a7dc:	4a2b      	ldr	r2, [pc, #172]	@ (800a88c <MCU_TicksSinceLastMessage+0xe0>)
 800a7de:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a7e2:	fb01 f303 	mul.w	r3, r1, r3
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d10d      	bne.n	800a810 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	4a25      	ldr	r2, [pc, #148]	@ (800a88c <MCU_TicksSinceLastMessage+0xe0>)
 800a7f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a7fc:	fb01 f303 	mul.w	r3, r1, r3
 800a800:	4413      	add	r3, r2
 800a802:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]
 800a80e:	e023      	b.n	800a858 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 800a810:	4b1b      	ldr	r3, [pc, #108]	@ (800a880 <MCU_TicksSinceLastMessage+0xd4>)
 800a812:	68da      	ldr	r2, [r3, #12]
 800a814:	7afb      	ldrb	r3, [r7, #11]
 800a816:	491d      	ldr	r1, [pc, #116]	@ (800a88c <MCU_TicksSinceLastMessage+0xe0>)
 800a818:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a81c:	fb00 f303 	mul.w	r3, r0, r3
 800a820:	440b      	add	r3, r1
 800a822:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	1ad2      	subs	r2, r2, r3
 800a82a:	4b15      	ldr	r3, [pc, #84]	@ (800a880 <MCU_TicksSinceLastMessage+0xd4>)
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	3301      	adds	r3, #1
 800a830:	7af9      	ldrb	r1, [r7, #11]
 800a832:	4816      	ldr	r0, [pc, #88]	@ (800a88c <MCU_TicksSinceLastMessage+0xe0>)
 800a834:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 800a838:	fb04 f101 	mul.w	r1, r4, r1
 800a83c:	4401      	add	r1, r0
 800a83e:	f201 41b4 	addw	r1, r1, #1204	@ 0x4b4
 800a842:	6809      	ldr	r1, [r1, #0]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	1a41      	subs	r1, r0, r1
 800a848:	3901      	subs	r1, #1
 800a84a:	fb01 f303 	mul.w	r3, r1, r3
 800a84e:	441a      	add	r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	4413      	add	r3, r2
 800a854:	3301      	adds	r3, #1
 800a856:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	e00d      	b.n	800a878 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 800a85c:	4b0c      	ldr	r3, [pc, #48]	@ (800a890 <MCU_TicksSinceLastMessage+0xe4>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	2b03      	cmp	r3, #3
 800a866:	d106      	bne.n	800a876 <MCU_TicksSinceLastMessage+0xca>
 800a868:	490a      	ldr	r1, [pc, #40]	@ (800a894 <MCU_TicksSinceLastMessage+0xe8>)
 800a86a:	480b      	ldr	r0, [pc, #44]	@ (800a898 <MCU_TicksSinceLastMessage+0xec>)
 800a86c:	f009 fae4 	bl	8013e38 <siprintf>
 800a870:	4809      	ldr	r0, [pc, #36]	@ (800a898 <MCU_TicksSinceLastMessage+0xec>)
 800a872:	f7fa fec5 	bl	8005600 <serialOut>
    return 0; // TODO Handle this error
 800a876:	2300      	movs	r3, #0
  }
}
 800a878:	4618      	mov	r0, r3
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd90      	pop	{r4, r7, pc}
 800a880:	200005d0 	.word	0x200005d0
 800a884:	20000d20 	.word	0x20000d20
 800a888:	2000a664 	.word	0x2000a664
 800a88c:	20000de4 	.word	0x20000de4
 800a890:	2000000c 	.word	0x2000000c
 800a894:	08018ab8 	.word	0x08018ab8
 800a898:	20000b5c 	.word	0x20000b5c

0800a89c <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800a89c:	b590      	push	{r4, r7, lr}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800a8a6:	4b32      	ldr	r3, [pc, #200]	@ (800a970 <MCU_TicksSinceLastStateTx+0xd4>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ac:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800a8ae:	4b31      	ldr	r3, [pc, #196]	@ (800a974 <MCU_TicksSinceLastStateTx+0xd8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff ff44 	bl	800a744 <MCU_ModuleIndexFromId>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800a8c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a978 <MCU_TicksSinceLastStateTx+0xdc>)
 800a8c2:	7d1b      	ldrb	r3, [r3, #20]
 800a8c4:	7afa      	ldrb	r2, [r7, #11]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d040      	beq.n	800a94c <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800a8ca:	7afb      	ldrb	r3, [r7, #11]
 800a8cc:	4a2b      	ldr	r2, [pc, #172]	@ (800a97c <MCU_TicksSinceLastStateTx+0xe0>)
 800a8ce:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a8d2:	fb01 f303 	mul.w	r3, r1, r3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d10d      	bne.n	800a900 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800a8e4:	7afb      	ldrb	r3, [r7, #11]
 800a8e6:	4a25      	ldr	r2, [pc, #148]	@ (800a97c <MCU_TicksSinceLastStateTx+0xe0>)
 800a8e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e023      	b.n	800a948 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800a900:	4b1b      	ldr	r3, [pc, #108]	@ (800a970 <MCU_TicksSinceLastStateTx+0xd4>)
 800a902:	68da      	ldr	r2, [r3, #12]
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	491d      	ldr	r1, [pc, #116]	@ (800a97c <MCU_TicksSinceLastStateTx+0xe0>)
 800a908:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a90c:	fb00 f303 	mul.w	r3, r0, r3
 800a910:	440b      	add	r3, r1
 800a912:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	1ad2      	subs	r2, r2, r3
 800a91a:	4b15      	ldr	r3, [pc, #84]	@ (800a970 <MCU_TicksSinceLastStateTx+0xd4>)
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	7af9      	ldrb	r1, [r7, #11]
 800a922:	4816      	ldr	r0, [pc, #88]	@ (800a97c <MCU_TicksSinceLastStateTx+0xe0>)
 800a924:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 800a928:	fb04 f101 	mul.w	r1, r4, r1
 800a92c:	4401      	add	r1, r0
 800a92e:	f201 41bc 	addw	r1, r1, #1212	@ 0x4bc
 800a932:	6809      	ldr	r1, [r1, #0]
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	1a41      	subs	r1, r0, r1
 800a938:	3901      	subs	r1, #1
 800a93a:	fb01 f303 	mul.w	r3, r1, r3
 800a93e:	441a      	add	r2, r3
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	4413      	add	r3, r2
 800a944:	3301      	adds	r3, #1
 800a946:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	e00d      	b.n	800a968 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800a94c:	4b0c      	ldr	r3, [pc, #48]	@ (800a980 <MCU_TicksSinceLastStateTx+0xe4>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	2b03      	cmp	r3, #3
 800a956:	d106      	bne.n	800a966 <MCU_TicksSinceLastStateTx+0xca>
 800a958:	490a      	ldr	r1, [pc, #40]	@ (800a984 <MCU_TicksSinceLastStateTx+0xe8>)
 800a95a:	480b      	ldr	r0, [pc, #44]	@ (800a988 <MCU_TicksSinceLastStateTx+0xec>)
 800a95c:	f009 fa6c 	bl	8013e38 <siprintf>
 800a960:	4809      	ldr	r0, [pc, #36]	@ (800a988 <MCU_TicksSinceLastStateTx+0xec>)
 800a962:	f7fa fe4d 	bl	8005600 <serialOut>
    return 0; // TODO Handle this error
 800a966:	2300      	movs	r3, #0
  }
}
 800a968:	4618      	mov	r0, r3
 800a96a:	371c      	adds	r7, #28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd90      	pop	{r4, r7, pc}
 800a970:	200005d0 	.word	0x200005d0
 800a974:	20000d20 	.word	0x20000d20
 800a978:	2000a664 	.word	0x2000a664
 800a97c:	20000de4 	.word	0x20000de4
 800a980:	2000000c 	.word	0x2000000c
 800a984:	08018af8 	.word	0x08018af8
 800a988:	20000b5c 	.word	0x20000b5c

0800a98c <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a996:	2300      	movs	r3, #0
 800a998:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a99a:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a99c:	2301      	movs	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
 800a9a0:	e05d      	b.n	800aa5e <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800a9a2:	4b34      	ldr	r3, [pc, #208]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	e016      	b.n	800a9d8 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800a9aa:	f008 fced 	bl	8013388 <rand>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	4a30      	ldr	r2, [pc, #192]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800a9b4:	7812      	ldrb	r2, [r2, #0]
 800a9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ba:	b2d9      	uxtb	r1, r3
 800a9bc:	4b2e      	ldr	r3, [pc, #184]	@ (800aa78 <CAN_TestRegisterAccess+0xec>)
 800a9be:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a9c0:	4b2c      	ldr	r3, [pc, #176]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa7c <CAN_TestRegisterAccess+0xf0>)
 800a9c8:	21ff      	movs	r1, #255	@ 0xff
 800a9ca:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800a9cc:	4b29      	ldr	r3, [pc, #164]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	4b27      	ldr	r3, [pc, #156]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	4b26      	ldr	r3, [pc, #152]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	7bfa      	ldrb	r2, [r7, #15]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d8e3      	bhi.n	800a9aa <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800a9e2:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	79f8      	ldrb	r0, [r7, #7]
 800a9ea:	4a23      	ldr	r2, [pc, #140]	@ (800aa78 <CAN_TestRegisterAccess+0xec>)
 800a9ec:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800a9f0:	f7f6 ffc8 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	79f8      	ldrb	r0, [r7, #7]
 800a9fa:	4a20      	ldr	r2, [pc, #128]	@ (800aa7c <CAN_TestRegisterAccess+0xf0>)
 800a9fc:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800aa00:	f7f6 ff0e 	bl	8001820 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800aa08:	4b1a      	ldr	r3, [pc, #104]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	e01e      	b.n	800aa4e <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800aa10:	4b18      	ldr	r3, [pc, #96]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	461a      	mov	r2, r3
 800aa16:	4b18      	ldr	r3, [pc, #96]	@ (800aa78 <CAN_TestRegisterAccess+0xec>)
 800aa18:	5c9a      	ldrb	r2, [r3, r2]
 800aa1a:	4b16      	ldr	r3, [pc, #88]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4b16      	ldr	r3, [pc, #88]	@ (800aa7c <CAN_TestRegisterAccess+0xf0>)
 800aa22:	5c5b      	ldrb	r3, [r3, r1]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	bf0c      	ite	eq
 800aa28:	2301      	moveq	r3, #1
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
 800aa30:	f083 0301 	eor.w	r3, r3, #1
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <CAN_TestRegisterAccess+0xb6>
        Nop();
 800aa3a:	bf00      	nop
        Nop();
 800aa3c:	bf00      	nop

        // Data mismatch
        return false;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	e013      	b.n	800aa6a <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800aa42:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	3301      	adds	r3, #1
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	4b09      	ldr	r3, [pc, #36]	@ (800aa74 <CAN_TestRegisterAccess+0xe8>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	7bfa      	ldrb	r2, [r7, #15]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d8db      	bhi.n	800aa10 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b40      	cmp	r3, #64	@ 0x40
 800aa62:	d99e      	bls.n	800a9a2 <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800aa64:	bf00      	nop
  Nop();
 800aa66:	bf00      	nop
  return true;
 800aa68:	2301      	movs	r3, #1
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20000de0 	.word	0x20000de0
 800aa78:	20000d44 	.word	0x20000d44
 800aa7c:	20000da0 	.word	0x20000da0

0800aa80 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73bb      	strb	r3, [r7, #14]
  Nop();
 800aa8e:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800aa90:	2304      	movs	r3, #4
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e05b      	b.n	800ab4e <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800aa96:	4b32      	ldr	r3, [pc, #200]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	e014      	b.n	800aac8 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800aa9e:	f008 fc73 	bl	8013388 <rand>
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	4b2e      	ldr	r3, [pc, #184]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	b2c9      	uxtb	r1, r1
 800aaac:	4b2d      	ldr	r3, [pc, #180]	@ (800ab64 <CAN_TestRamAccess+0xe4>)
 800aaae:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800aab0:	4b2b      	ldr	r3, [pc, #172]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b2c      	ldr	r3, [pc, #176]	@ (800ab68 <CAN_TestRamAccess+0xe8>)
 800aab8:	21ff      	movs	r1, #255	@ 0xff
 800aaba:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800aabc:	4b28      	ldr	r3, [pc, #160]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	4b26      	ldr	r3, [pc, #152]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	4b25      	ldr	r3, [pc, #148]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	7bfa      	ldrb	r2, [r7, #15]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d8e5      	bhi.n	800aa9e <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800aad2:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	79f8      	ldrb	r0, [r7, #7]
 800aada:	4a22      	ldr	r2, [pc, #136]	@ (800ab64 <CAN_TestRamAccess+0xe4>)
 800aadc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aae0:	f7f6 ff50 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	79f8      	ldrb	r0, [r7, #7]
 800aaea:	4a1f      	ldr	r2, [pc, #124]	@ (800ab68 <CAN_TestRamAccess+0xe8>)
 800aaec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aaf0:	f7f6 fe96 	bl	8001820 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800aaf8:	4b19      	ldr	r3, [pc, #100]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	e01e      	b.n	800ab3e <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800ab00:	4b17      	ldr	r3, [pc, #92]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	461a      	mov	r2, r3
 800ab06:	4b17      	ldr	r3, [pc, #92]	@ (800ab64 <CAN_TestRamAccess+0xe4>)
 800ab08:	5c9a      	ldrb	r2, [r3, r2]
 800ab0a:	4b15      	ldr	r3, [pc, #84]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4b15      	ldr	r3, [pc, #84]	@ (800ab68 <CAN_TestRamAccess+0xe8>)
 800ab12:	5c5b      	ldrb	r3, [r3, r1]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	bf0c      	ite	eq
 800ab18:	2301      	moveq	r3, #1
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	f083 0301 	eor.w	r3, r3, #1
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <CAN_TestRamAccess+0xb2>
        Nop();
 800ab2a:	bf00      	nop
        Nop();
 800ab2c:	bf00      	nop

        // Data mismatch
        return false;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e011      	b.n	800ab56 <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800ab32:	4b0b      	ldr	r3, [pc, #44]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	4b09      	ldr	r3, [pc, #36]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	4b08      	ldr	r3, [pc, #32]	@ (800ab60 <CAN_TestRamAccess+0xe0>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	7bfa      	ldrb	r2, [r7, #15]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d8db      	bhi.n	800ab00 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	73fb      	strb	r3, [r7, #15]
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	2b40      	cmp	r3, #64	@ 0x40
 800ab52:	d9a0      	bls.n	800aa96 <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800ab54:	2301      	movs	r3, #1
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	20000de0 	.word	0x20000de0
 800ab64:	20000d44 	.word	0x20000d44
 800ab68:	20000da0 	.word	0x20000da0

0800ab6c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800ab70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab84:	bf00      	nop
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <LL_AHB2_GRP1_EnableClock>:
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ab96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800aba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4013      	ands	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800abb2:	68fb      	ldr	r3, [r7, #12]
}
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800abc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800abd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4013      	ands	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800abe4:	68fb      	ldr	r3, [r7, #12]
}
 800abe6:	bf00      	nop
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b085      	sub	sp, #20
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800abfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ac0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4013      	ands	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac16:	68fb      	ldr	r3, [r7, #12]
}
 800ac18:	bf00      	nop
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800ac2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800ac3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4013      	ands	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac48:	68fb      	ldr	r3, [r7, #12]
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b085      	sub	sp, #20
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800ac5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ac64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800ac6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4013      	ands	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	bf00      	nop
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800ac8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ac90:	f7ff ff96 	bl	800abc0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800ac94:	2200      	movs	r2, #0
 800ac96:	2100      	movs	r1, #0
 800ac98:	202e      	movs	r0, #46	@ 0x2e
 800ac9a:	f002 fcd4 	bl	800d646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800ac9e:	202e      	movs	r0, #46	@ 0x2e
 800aca0:	f002 fceb 	bl	800d67a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aca4:	bf00      	nop
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b09c      	sub	sp, #112	@ 0x70
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	605a      	str	r2, [r3, #4]
 800acba:	609a      	str	r2, [r3, #8]
 800acbc:	60da      	str	r2, [r3, #12]
 800acbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	2250      	movs	r2, #80	@ 0x50
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f009 f91a 	bl	8013f02 <memset>
  if(huart->Instance==LPUART1)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a2f      	ldr	r2, [pc, #188]	@ (800ad90 <HAL_UART_MspInit+0xe8>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d125      	bne.n	800ad24 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800acd8:	2302      	movs	r3, #2
 800acda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800acdc:	2300      	movs	r3, #0
 800acde:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	4618      	mov	r0, r3
 800ace6:	f004 fe28 	bl	800f93a <HAL_RCCEx_PeriphCLKConfig>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800acf0:	f7fc f83a 	bl	8006d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800acf4:	2001      	movs	r0, #1
 800acf6:	f7ff ff95 	bl	800ac24 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acfa:	2001      	movs	r0, #1
 800acfc:	f7ff ff47 	bl	800ab8e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad00:	230c      	movs	r3, #12
 800ad02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad04:	2302      	movs	r3, #2
 800ad06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800ad10:	2308      	movs	r3, #8
 800ad12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad1e:	f002 ff9f 	bl	800dc60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ad22:	e031      	b.n	800ad88 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a1a      	ldr	r2, [pc, #104]	@ (800ad94 <HAL_UART_MspInit+0xec>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d12c      	bne.n	800ad88 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800ad32:	2302      	movs	r3, #2
 800ad34:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad36:	f107 030c 	add.w	r3, r7, #12
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f004 fdfd 	bl	800f93a <HAL_RCCEx_PeriphCLKConfig>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800ad46:	f7fc f80f 	bl	8006d68 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad4a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ad4e:	f7ff ff82 	bl	800ac56 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad52:	2002      	movs	r0, #2
 800ad54:	f7ff ff1b 	bl	800ab8e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ad58:	23c0      	movs	r3, #192	@ 0xc0
 800ad5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad64:	2300      	movs	r3, #0
 800ad66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ad68:	2307      	movs	r3, #7
 800ad6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ad70:	4619      	mov	r1, r3
 800ad72:	4809      	ldr	r0, [pc, #36]	@ (800ad98 <HAL_UART_MspInit+0xf0>)
 800ad74:	f002 ff74 	bl	800dc60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	2024      	movs	r0, #36	@ 0x24
 800ad7e:	f002 fc62 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ad82:	2024      	movs	r0, #36	@ 0x24
 800ad84:	f002 fc79 	bl	800d67a <HAL_NVIC_EnableIRQ>
}
 800ad88:	bf00      	nop
 800ad8a:	3770      	adds	r7, #112	@ 0x70
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	40008000 	.word	0x40008000
 800ad94:	40013800 	.word	0x40013800
 800ad98:	48000400 	.word	0x48000400

0800ad9c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a05      	ldr	r2, [pc, #20]	@ (800adc0 <HAL_PKA_MspInit+0x24>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d103      	bne.n	800adb6 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800adae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800adb2:	f7ff ff05 	bl	800abc0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	58002000 	.word	0x58002000

0800adc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b096      	sub	sp, #88	@ 0x58
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800adcc:	f107 0308 	add.w	r3, r7, #8
 800add0:	2250      	movs	r2, #80	@ 0x50
 800add2:	2100      	movs	r1, #0
 800add4:	4618      	mov	r0, r3
 800add6:	f009 f894 	bl	8013f02 <memset>
  if(hrtc->Instance==RTC)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a0e      	ldr	r2, [pc, #56]	@ (800ae18 <HAL_RTC_MspInit+0x54>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d115      	bne.n	800ae10 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ade4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ade8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800adea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800adf0:	f107 0308 	add.w	r3, r7, #8
 800adf4:	4618      	mov	r0, r3
 800adf6:	f004 fda0 	bl	800f93a <HAL_RCCEx_PeriphCLKConfig>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800ae00:	f7fb ffb2 	bl	8006d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ae04:	f7ff feb2 	bl	800ab6c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ae08:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ae0c:	f7ff fef1 	bl	800abf2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ae10:	bf00      	nop
 800ae12:	3758      	adds	r7, #88	@ 0x58
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	40002800 	.word	0x40002800

0800ae1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae24:	f107 030c 	add.w	r3, r7, #12
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
 800ae2c:	605a      	str	r2, [r3, #4]
 800ae2e:	609a      	str	r2, [r3, #8]
 800ae30:	60da      	str	r2, [r3, #12]
 800ae32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a30      	ldr	r2, [pc, #192]	@ (800aefc <HAL_SPI_MspInit+0xe0>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d118      	bne.n	800ae70 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ae3e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ae42:	f7ff ff08 	bl	800ac56 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae46:	2001      	movs	r0, #1
 800ae48:	f7ff fea1 	bl	800ab8e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800ae4c:	23c2      	movs	r3, #194	@ 0xc2
 800ae4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae50:	2302      	movs	r3, #2
 800ae52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ae5c:	2305      	movs	r3, #5
 800ae5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae60:	f107 030c 	add.w	r3, r7, #12
 800ae64:	4619      	mov	r1, r3
 800ae66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ae6a:	f002 fef9 	bl	800dc60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ae6e:	e040      	b.n	800aef2 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a22      	ldr	r2, [pc, #136]	@ (800af00 <HAL_SPI_MspInit+0xe4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d13b      	bne.n	800aef2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ae7a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ae7e:	f7ff feb8 	bl	800abf2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae82:	2004      	movs	r0, #4
 800ae84:	f7ff fe83 	bl	800ab8e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7ff fe80 	bl	800ab8e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ae8e:	2302      	movs	r3, #2
 800ae90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae92:	2302      	movs	r3, #2
 800ae94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aea2:	f107 030c 	add.w	r3, r7, #12
 800aea6:	4619      	mov	r1, r3
 800aea8:	4816      	ldr	r0, [pc, #88]	@ (800af04 <HAL_SPI_MspInit+0xe8>)
 800aeaa:	f002 fed9 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aeae:	2304      	movs	r3, #4
 800aeb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeba:	2300      	movs	r3, #0
 800aebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800aebe:	2305      	movs	r3, #5
 800aec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aec2:	f107 030c 	add.w	r3, r7, #12
 800aec6:	4619      	mov	r1, r3
 800aec8:	480e      	ldr	r0, [pc, #56]	@ (800af04 <HAL_SPI_MspInit+0xe8>)
 800aeca:	f002 fec9 	bl	800dc60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800aece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aed4:	2302      	movs	r3, #2
 800aed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aedc:	2300      	movs	r3, #0
 800aede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800aee0:	2305      	movs	r3, #5
 800aee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aee4:	f107 030c 	add.w	r3, r7, #12
 800aee8:	4619      	mov	r1, r3
 800aeea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aeee:	f002 feb7 	bl	800dc60 <HAL_GPIO_Init>
}
 800aef2:	bf00      	nop
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	40013000 	.word	0x40013000
 800af00:	40003800 	.word	0x40003800
 800af04:	48000800 	.word	0x48000800

0800af08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a09      	ldr	r2, [pc, #36]	@ (800af3c <HAL_TIM_Base_MspInit+0x34>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d10b      	bne.n	800af32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800af1a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800af1e:	f7ff fe9a 	bl	800ac56 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800af22:	2200      	movs	r2, #0
 800af24:	2100      	movs	r1, #0
 800af26:	2019      	movs	r0, #25
 800af28:	f002 fb8d 	bl	800d646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800af2c:	2019      	movs	r0, #25
 800af2e:	f002 fba4 	bl	800d67a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800af32:	bf00      	nop
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	40012c00 	.word	0x40012c00

0800af40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b09c      	sub	sp, #112	@ 0x70
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	605a      	str	r2, [r3, #4]
 800af52:	609a      	str	r2, [r3, #8]
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af58:	f107 030c 	add.w	r3, r7, #12
 800af5c:	2250      	movs	r2, #80	@ 0x50
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f008 ffce 	bl	8013f02 <memset>
  if(hpcd->Instance==USB)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a1f      	ldr	r2, [pc, #124]	@ (800afe8 <HAL_PCD_MspInit+0xa8>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d136      	bne.n	800afde <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af74:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800af76:	2306      	movs	r3, #6
 800af78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800af7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800af7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800af80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800af84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800af86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800af8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800af8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800af90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800af92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800af96:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af98:	f107 030c 	add.w	r3, r7, #12
 800af9c:	4618      	mov	r0, r3
 800af9e:	f004 fccc 	bl	800f93a <HAL_RCCEx_PeriphCLKConfig>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800afa8:	f7fb fede 	bl	8006d68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afac:	2001      	movs	r0, #1
 800afae:	f7ff fdee 	bl	800ab8e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800afb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800afb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afb8:	2302      	movs	r3, #2
 800afba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afbc:	2300      	movs	r3, #0
 800afbe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afc0:	2300      	movs	r3, #0
 800afc2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800afc4:	230a      	movs	r3, #10
 800afc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800afcc:	4619      	mov	r1, r3
 800afce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800afd2:	f002 fe45 	bl	800dc60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800afd6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800afda:	f7ff fe0a 	bl	800abf2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800afde:	bf00      	nop
 800afe0:	3770      	adds	r7, #112	@ 0x70
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	40006800 	.word	0x40006800

0800afec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800aff0:	bf00      	nop
 800aff2:	e7fd      	b.n	800aff0 <NMI_Handler+0x4>

0800aff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <HardFault_Handler+0x4>

0800affc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b000:	bf00      	nop
 800b002:	e7fd      	b.n	800b000 <MemManage_Handler+0x4>

0800b004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b008:	bf00      	nop
 800b00a:	e7fd      	b.n	800b008 <BusFault_Handler+0x4>

0800b00c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b010:	bf00      	nop
 800b012:	e7fd      	b.n	800b010 <UsageFault_Handler+0x4>

0800b014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b014:	b480      	push	{r7}
 800b016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b018:	bf00      	nop
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b022:	b480      	push	{r7}
 800b024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b026:	bf00      	nop
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b034:	bf00      	nop
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b042:	f002 f9d5 	bl	800d3f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b046:	bf00      	nop
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_IRQn 0 */


  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b050:	4b08      	ldr	r3, [pc, #32]	@ (800b074 <EXTI0_IRQHandler+0x28>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d105      	bne.n	800b064 <EXTI0_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b058:	4b07      	ldr	r3, [pc, #28]	@ (800b078 <EXTI0_IRQHandler+0x2c>)
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f002 ffb9 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
  }else{
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800b062:	e004      	b.n	800b06e <EXTI0_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800b064:	4b05      	ldr	r3, [pc, #20]	@ (800b07c <EXTI0_IRQHandler+0x30>)
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 ffb3 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
}
 800b06e:	bf00      	nop
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20000a50 	.word	0x20000a50
 800b078:	20000cce 	.word	0x20000cce
 800b07c:	20000c86 	.word	0x20000c86

0800b080 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800b084:	4b05      	ldr	r3, [pc, #20]	@ (800b09c <EXTI1_IRQHandler+0x1c>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d104      	bne.n	800b096 <EXTI1_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800b08c:	4b04      	ldr	r3, [pc, #16]	@ (800b0a0 <EXTI1_IRQHandler+0x20>)
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f002 ff9f 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b096:	bf00      	nop
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000a50 	.word	0x20000a50
 800b0a0:	20000cd6 	.word	0x20000cd6

0800b0a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800b0a8:	4b05      	ldr	r3, [pc, #20]	@ (800b0c0 <EXTI2_IRQHandler+0x1c>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <EXTI2_IRQHandler+0x16>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800b0b0:	4b04      	ldr	r3, [pc, #16]	@ (800b0c4 <EXTI2_IRQHandler+0x20>)
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 ff8d 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000a50 	.word	0x20000a50
 800b0c4:	20000cd6 	.word	0x20000cd6

0800b0c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */

  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b0cc:	4b08      	ldr	r3, [pc, #32]	@ (800b0f0 <EXTI4_IRQHandler+0x28>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <EXTI4_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b0d4:	4b07      	ldr	r3, [pc, #28]	@ (800b0f4 <EXTI4_IRQHandler+0x2c>)
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 ff7b 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800b0de:	e004      	b.n	800b0ea <EXTI4_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
 800b0e0:	4b05      	ldr	r3, [pc, #20]	@ (800b0f8 <EXTI4_IRQHandler+0x30>)
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f002 ff75 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
}
 800b0ea:	bf00      	nop
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000a50 	.word	0x20000a50
 800b0f4:	20000cc4 	.word	0x20000cc4
 800b0f8:	20000c9e 	.word	0x20000c9e

0800b0fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI9_5_IRQn 0 */



  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b100:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <EXTI9_5_IRQHandler+0x50>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <EXTI9_5_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800b108:	4b11      	ldr	r3, [pc, #68]	@ (800b150 <EXTI9_5_IRQHandler+0x54>)
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f002 ff61 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800b112:	4b10      	ldr	r3, [pc, #64]	@ (800b154 <EXTI9_5_IRQHandler+0x58>)
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	4618      	mov	r0, r3
 800b118:	f002 ff5c 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b11c:	e013      	b.n	800b146 <EXTI9_5_IRQHandler+0x4a>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800b11e:	4b0c      	ldr	r3, [pc, #48]	@ (800b150 <EXTI9_5_IRQHandler+0x54>)
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	4618      	mov	r0, r3
 800b124:	f002 ff56 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
 800b128:	4b0b      	ldr	r3, [pc, #44]	@ (800b158 <EXTI9_5_IRQHandler+0x5c>)
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f002 ff51 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
 800b132:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <EXTI9_5_IRQHandler+0x60>)
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f002 ff4c 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 800b13c:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <EXTI9_5_IRQHandler+0x64>)
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	4618      	mov	r0, r3
 800b142:	f002 ff47 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
}
 800b146:	bf00      	nop
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000a50 	.word	0x20000a50
 800b150:	20000c5e 	.word	0x20000c5e
 800b154:	20000c66 	.word	0x20000c66
 800b158:	20000c94 	.word	0x20000c94
 800b15c:	20000ca6 	.word	0x20000ca6
 800b160:	20000cde 	.word	0x20000cde

0800b164 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b168:	4802      	ldr	r0, [pc, #8]	@ (800b174 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b16a:	f005 ff17 	bl	8010f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b16e:	bf00      	nop
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	200005d0 	.word	0x200005d0

0800b178 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b17c:	4802      	ldr	r0, [pc, #8]	@ (800b188 <USART1_IRQHandler+0x10>)
 800b17e:	f006 ffdf 	bl	8012140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b182:	bf00      	nop
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20000444 	.word	0x20000444

0800b18c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b190:	4b1c      	ldr	r3, [pc, #112]	@ (800b204 <EXTI15_10_IRQHandler+0x78>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d114      	bne.n	800b1c2 <EXTI15_10_IRQHandler+0x36>

      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800b198:	4b1b      	ldr	r3, [pc, #108]	@ (800b208 <EXTI15_10_IRQHandler+0x7c>)
 800b19a:	881b      	ldrh	r3, [r3, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 ff19 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800b1a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b20c <EXTI15_10_IRQHandler+0x80>)
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f002 ff14 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800b1ac:	4b18      	ldr	r3, [pc, #96]	@ (800b210 <EXTI15_10_IRQHandler+0x84>)
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f002 ff0f 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800b1b6:	4b17      	ldr	r3, [pc, #92]	@ (800b214 <EXTI15_10_IRQHandler+0x88>)
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 ff0a 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>

      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b1c0:	e01d      	b.n	800b1fe <EXTI15_10_IRQHandler+0x72>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800b1c2:	4b11      	ldr	r3, [pc, #68]	@ (800b208 <EXTI15_10_IRQHandler+0x7c>)
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f002 ff04 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800b1cc:	4b12      	ldr	r3, [pc, #72]	@ (800b218 <EXTI15_10_IRQHandler+0x8c>)
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f002 feff 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b20c <EXTI15_10_IRQHandler+0x80>)
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f002 fefa 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b210 <EXTI15_10_IRQHandler+0x84>)
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f002 fef5 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b21c <EXTI15_10_IRQHandler+0x90>)
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f002 fef0 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b1f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b220 <EXTI15_10_IRQHandler+0x94>)
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f002 feeb 	bl	800dfd4 <HAL_GPIO_EXTI_IRQHandler>
}
 800b1fe:	bf00      	nop
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000a50 	.word	0x20000a50
 800b208:	20000c56 	.word	0x20000c56
 800b20c:	20000c74 	.word	0x20000c74
 800b210:	20000c7e 	.word	0x20000c7e
 800b214:	20000c86 	.word	0x20000c86
 800b218:	20000c66 	.word	0x20000c66
 800b21c:	20000cc4 	.word	0x20000cc4
 800b220:	20000cce 	.word	0x20000cce

0800b224 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800b228:	f002 feec 	bl	800e004 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800b22c:	bf00      	nop
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b230:	b480      	push	{r7}
 800b232:	af00      	add	r7, sp, #0
  return 1;
 800b234:	2301      	movs	r3, #1
}
 800b236:	4618      	mov	r0, r3
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <_kill>:

int _kill(int pid, int sig)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b24a:	f009 fd1b 	bl	8014c84 <__errno>
 800b24e:	4603      	mov	r3, r0
 800b250:	2216      	movs	r2, #22
 800b252:	601a      	str	r2, [r3, #0]
  return -1;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <_exit>:

void _exit (int status)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b268:	f04f 31ff 	mov.w	r1, #4294967295
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ffe7 	bl	800b240 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b272:	bf00      	nop
 800b274:	e7fd      	b.n	800b272 <_exit+0x12>

0800b276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b086      	sub	sp, #24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
 800b286:	e00a      	b.n	800b29e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b288:	f3af 8000 	nop.w
 800b28c:	4601      	mov	r1, r0
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	60ba      	str	r2, [r7, #8]
 800b294:	b2ca      	uxtb	r2, r1
 800b296:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	3301      	adds	r3, #1
 800b29c:	617b      	str	r3, [r7, #20]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	dbf0      	blt.n	800b288 <_read+0x12>
  }

  return len;
 800b2a6:	687b      	ldr	r3, [r7, #4]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3718      	adds	r7, #24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	617b      	str	r3, [r7, #20]
 800b2c0:	e009      	b.n	800b2d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	60ba      	str	r2, [r7, #8]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	617b      	str	r3, [r7, #20]
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	dbf1      	blt.n	800b2c2 <_write+0x12>
  }
  return len;
 800b2de:	687b      	ldr	r3, [r7, #4]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <_close>:

int _close(int file)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b2f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b310:	605a      	str	r2, [r3, #4]
  return 0;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <_isatty>:

int _isatty(int file)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b328:	2301      	movs	r3, #1
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b358:	4a14      	ldr	r2, [pc, #80]	@ (800b3ac <_sbrk+0x5c>)
 800b35a:	4b15      	ldr	r3, [pc, #84]	@ (800b3b0 <_sbrk+0x60>)
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b364:	4b13      	ldr	r3, [pc, #76]	@ (800b3b4 <_sbrk+0x64>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b36c:	4b11      	ldr	r3, [pc, #68]	@ (800b3b4 <_sbrk+0x64>)
 800b36e:	4a12      	ldr	r2, [pc, #72]	@ (800b3b8 <_sbrk+0x68>)
 800b370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b372:	4b10      	ldr	r3, [pc, #64]	@ (800b3b4 <_sbrk+0x64>)
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4413      	add	r3, r2
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d207      	bcs.n	800b390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b380:	f009 fc80 	bl	8014c84 <__errno>
 800b384:	4603      	mov	r3, r0
 800b386:	220c      	movs	r2, #12
 800b388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b38a:	f04f 33ff 	mov.w	r3, #4294967295
 800b38e:	e009      	b.n	800b3a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b390:	4b08      	ldr	r3, [pc, #32]	@ (800b3b4 <_sbrk+0x64>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b396:	4b07      	ldr	r3, [pc, #28]	@ (800b3b4 <_sbrk+0x64>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4413      	add	r3, r2
 800b39e:	4a05      	ldr	r2, [pc, #20]	@ (800b3b4 <_sbrk+0x64>)
 800b3a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	20030000 	.word	0x20030000
 800b3b0:	00000400 	.word	0x00000400
 800b3b4:	2000a6bc 	.word	0x2000a6bc
 800b3b8:	2000a8f0 	.word	0x2000a8f0

0800b3bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800b3c0:	4b24      	ldr	r3, [pc, #144]	@ (800b454 <SystemInit+0x98>)
 800b3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3c6:	4a23      	ldr	r2, [pc, #140]	@ (800b454 <SystemInit+0x98>)
 800b3c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b3cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3da:	f043 0301 	orr.w	r3, r3, #1
 800b3de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800b3e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3e4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800b3e8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800b3ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3f4:	4b18      	ldr	r3, [pc, #96]	@ (800b458 <SystemInit+0x9c>)
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800b3fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b406:	f023 0305 	bic.w	r3, r3, #5
 800b40a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800b40e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b416:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b41a:	f023 0301 	bic.w	r3, r3, #1
 800b41e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800b422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b426:	4a0d      	ldr	r2, [pc, #52]	@ (800b45c <SystemInit+0xa0>)
 800b428:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800b42a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b42e:	4a0b      	ldr	r2, [pc, #44]	@ (800b45c <SystemInit+0xa0>)
 800b430:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b43c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b440:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b446:	2200      	movs	r2, #0
 800b448:	619a      	str	r2, [r3, #24]
}
 800b44a:	bf00      	nop
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	e000ed00 	.word	0xe000ed00
 800b458:	faf6fefb 	.word	0xfaf6fefb
 800b45c:	22041000 	.word	0x22041000

0800b460 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	b08b      	sub	sp, #44	@ 0x2c
 800b464:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800b466:	4a7a      	ldr	r2, [pc, #488]	@ (800b650 <VCU_ReceiveMessages+0x1f0>)
 800b468:	2101      	movs	r1, #1
 800b46a:	2000      	movs	r0, #0
 800b46c:	f7f7 f9ba 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800b470:	e0e2      	b.n	800b638 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800b472:	2340      	movs	r3, #64	@ 0x40
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	4b77      	ldr	r3, [pc, #476]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b478:	4a77      	ldr	r2, [pc, #476]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b47a:	2101      	movs	r1, #1
 800b47c:	2000      	movs	r0, #0
 800b47e:	f7f7 f815 	bl	80024ac <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_VERBOSE)) == (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800b482:	4b76      	ldr	r3, [pc, #472]	@ (800b65c <VCU_ReceiveMessages+0x1fc>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	f003 030c 	and.w	r3, r3, #12
 800b48a:	2b0c      	cmp	r3, #12
 800b48c:	d12c      	bne.n	800b4e8 <VCU_ReceiveMessages+0x88>
 800b48e:	4b72      	ldr	r3, [pc, #456]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b496:	b29b      	uxth	r3, r3
 800b498:	469c      	mov	ip, r3
 800b49a:	4b6e      	ldr	r3, [pc, #440]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	469e      	mov	lr, r3
 800b4a0:	4b6c      	ldr	r3, [pc, #432]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4b6b      	ldr	r3, [pc, #428]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4a8:	789b      	ldrb	r3, [r3, #2]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4b69      	ldr	r3, [pc, #420]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4ae:	78db      	ldrb	r3, [r3, #3]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	4b68      	ldr	r3, [pc, #416]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4b4:	791b      	ldrb	r3, [r3, #4]
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	4b66      	ldr	r3, [pc, #408]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4ba:	795b      	ldrb	r3, [r3, #5]
 800b4bc:	461d      	mov	r5, r3
 800b4be:	4b65      	ldr	r3, [pc, #404]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4c0:	799b      	ldrb	r3, [r3, #6]
 800b4c2:	461e      	mov	r6, r3
 800b4c4:	4b63      	ldr	r3, [pc, #396]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b4c6:	79db      	ldrb	r3, [r3, #7]
 800b4c8:	9306      	str	r3, [sp, #24]
 800b4ca:	9605      	str	r6, [sp, #20]
 800b4cc:	9504      	str	r5, [sp, #16]
 800b4ce:	9403      	str	r4, [sp, #12]
 800b4d0:	9002      	str	r0, [sp, #8]
 800b4d2:	9101      	str	r1, [sp, #4]
 800b4d4:	9200      	str	r2, [sp, #0]
 800b4d6:	4673      	mov	r3, lr
 800b4d8:	4662      	mov	r2, ip
 800b4da:	4961      	ldr	r1, [pc, #388]	@ (800b660 <VCU_ReceiveMessages+0x200>)
 800b4dc:	4861      	ldr	r0, [pc, #388]	@ (800b664 <VCU_ReceiveMessages+0x204>)
 800b4de:	f008 fcab 	bl	8013e38 <siprintf>
 800b4e2:	4860      	ldr	r0, [pc, #384]	@ (800b664 <VCU_ReceiveMessages+0x204>)
 800b4e4:	f7fa f88c 	bl	8005600 <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800b4e8:	4b5b      	ldr	r3, [pc, #364]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	4b5c      	ldr	r3, [pc, #368]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b4f6:	895b      	ldrh	r3, [r3, #10]
 800b4f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d102      	bne.n	800b506 <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800b500:	f000 f916 	bl	800b730 <VCU_ProcessVcuCommand>
 800b504:	e093      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800b506:	4b54      	ldr	r3, [pc, #336]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b50e:	b29b      	uxth	r3, r3
 800b510:	461a      	mov	r2, r3
 800b512:	4b55      	ldr	r3, [pc, #340]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b514:	895b      	ldrh	r3, [r3, #10]
 800b516:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d102      	bne.n	800b524 <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800b51e:	f000 fa79 	bl	800ba14 <VCU_ProcessVcuTime>
 800b522:	e084      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800b524:	4b4c      	ldr	r3, [pc, #304]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	461a      	mov	r2, r3
 800b530:	4b4d      	ldr	r3, [pc, #308]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b532:	895b      	ldrh	r3, [r3, #10]
 800b534:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b538:	429a      	cmp	r2, r3
 800b53a:	d102      	bne.n	800b542 <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800b53c:	f000 fab6 	bl	800baac <VCU_ProcessReadEeprom>
 800b540:	e075      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800b542:	4b45      	ldr	r3, [pc, #276]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	461a      	mov	r2, r3
 800b54e:	4b46      	ldr	r3, [pc, #280]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b550:	895b      	ldrh	r3, [r3, #10]
 800b552:	f203 4303 	addw	r3, r3, #1027	@ 0x403
 800b556:	429a      	cmp	r2, r3
 800b558:	d102      	bne.n	800b560 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800b55a:	f000 fb63 	bl	800bc24 <VCU_ProcessWriteEeprom>
 800b55e:	e066      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800b560:	4b3d      	ldr	r3, [pc, #244]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b568:	b29b      	uxth	r3, r3
 800b56a:	461a      	mov	r2, r3
 800b56c:	4b3e      	ldr	r3, [pc, #248]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b56e:	895b      	ldrh	r3, [r3, #10]
 800b570:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b574:	429a      	cmp	r2, r3
 800b576:	d102      	bne.n	800b57e <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800b578:	f000 f984 	bl	800b884 <VCU_ProcessVcuModuleCommand>
 800b57c:	e057      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800b57e:	4b36      	ldr	r3, [pc, #216]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b586:	b29b      	uxth	r3, r3
 800b588:	461a      	mov	r2, r3
 800b58a:	4b37      	ldr	r3, [pc, #220]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b58c:	895b      	ldrh	r3, [r3, #10]
 800b58e:	f203 4305 	addw	r3, r3, #1029	@ 0x405
 800b592:	429a      	cmp	r2, r3
 800b594:	d102      	bne.n	800b59c <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800b596:	f000 f9ed 	bl	800b974 <VCU_ProcessVcuKeepAlive>
 800b59a:	e048      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800b59c:	4b2e      	ldr	r3, [pc, #184]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	4b2f      	ldr	r3, [pc, #188]	@ (800b668 <VCU_ReceiveMessages+0x208>)
 800b5aa:	895b      	ldrh	r3, [r3, #10]
 800b5ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d102      	bne.n	800b5ba <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800b5b4:	f000 fbf6 	bl	800bda4 <VCU_ProcessVcuRequestModuleList>
 800b5b8:	e039      	b.n	800b62e <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800b5ba:	4b28      	ldr	r3, [pc, #160]	@ (800b65c <VCU_ReceiveMessages+0x1fc>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	f003 0305 	and.w	r3, r3, #5
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d133      	bne.n	800b62e <VCU_ReceiveMessages+0x1ce>
 800b5c6:	4b24      	ldr	r3, [pc, #144]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	469c      	mov	ip, r3
 800b5d2:	4b21      	ldr	r3, [pc, #132]	@ (800b658 <VCU_ReceiveMessages+0x1f8>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b5da:	469e      	mov	lr, r3
 800b5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b5ea:	789b      	ldrb	r3, [r3, #2]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	4b19      	ldr	r3, [pc, #100]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b5f0:	78db      	ldrb	r3, [r3, #3]
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	4b17      	ldr	r3, [pc, #92]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b5f6:	791b      	ldrb	r3, [r3, #4]
 800b5f8:	461d      	mov	r5, r3
 800b5fa:	4b16      	ldr	r3, [pc, #88]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b5fc:	795b      	ldrb	r3, [r3, #5]
 800b5fe:	461e      	mov	r6, r3
 800b600:	4b14      	ldr	r3, [pc, #80]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b602:	799b      	ldrb	r3, [r3, #6]
 800b604:	607b      	str	r3, [r7, #4]
 800b606:	4b13      	ldr	r3, [pc, #76]	@ (800b654 <VCU_ReceiveMessages+0x1f4>)
 800b608:	79db      	ldrb	r3, [r3, #7]
 800b60a:	9307      	str	r3, [sp, #28]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	9306      	str	r3, [sp, #24]
 800b610:	9605      	str	r6, [sp, #20]
 800b612:	9504      	str	r5, [sp, #16]
 800b614:	9403      	str	r4, [sp, #12]
 800b616:	9002      	str	r0, [sp, #8]
 800b618:	9101      	str	r1, [sp, #4]
 800b61a:	9200      	str	r2, [sp, #0]
 800b61c:	4673      	mov	r3, lr
 800b61e:	4662      	mov	r2, ip
 800b620:	4912      	ldr	r1, [pc, #72]	@ (800b66c <VCU_ReceiveMessages+0x20c>)
 800b622:	4810      	ldr	r0, [pc, #64]	@ (800b664 <VCU_ReceiveMessages+0x204>)
 800b624:	f008 fc08 	bl	8013e38 <siprintf>
 800b628:	480e      	ldr	r0, [pc, #56]	@ (800b664 <VCU_ReceiveMessages+0x204>)
 800b62a:	f7f9 ffe9 	bl	8005600 <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800b62e:	4a08      	ldr	r2, [pc, #32]	@ (800b650 <VCU_ReceiveMessages+0x1f0>)
 800b630:	2101      	movs	r1, #1
 800b632:	2000      	movs	r0, #0
 800b634:	f7f7 f8d6 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800b638:	4b05      	ldr	r3, [pc, #20]	@ (800b650 <VCU_ReceiveMessages+0x1f0>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	f47f af16 	bne.w	800b472 <VCU_ReceiveMessages+0x12>
  }
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b650:	2000a710 	.word	0x2000a710
 800b654:	2000a720 	.word	0x2000a720
 800b658:	2000a714 	.word	0x2000a714
 800b65c:	2000000c 	.word	0x2000000c
 800b660:	08018b34 	.word	0x08018b34
 800b664:	20000b5c 	.word	0x20000b5c
 800b668:	2000a664 	.word	0x2000a664
 800b66c:	08018b8c 	.word	0x08018b8c

0800b670 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af02      	add	r7, sp, #8
 800b676:	4603      	mov	r3, r0
 800b678:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800b67a:	2332      	movs	r3, #50	@ 0x32
 800b67c:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800b67e:	79fb      	ldrb	r3, [r7, #7]
 800b680:	4a21      	ldr	r2, [pc, #132]	@ (800b708 <VCU_TransmitMessageQueue+0x98>)
 800b682:	2102      	movs	r1, #2
 800b684:	4618      	mov	r0, r3
 800b686:	f7f7 f87a 	bl	800277e <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d11a      	bne.n	800b6c6 <VCU_TransmitMessageQueue+0x56>
      Nop();
 800b690:	bf00      	nop
      Nop();
 800b692:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800b694:	79f8      	ldrb	r0, [r7, #7]
 800b696:	4b1d      	ldr	r3, [pc, #116]	@ (800b70c <VCU_TransmitMessageQueue+0x9c>)
 800b698:	4a1d      	ldr	r2, [pc, #116]	@ (800b710 <VCU_TransmitMessageQueue+0xa0>)
 800b69a:	491e      	ldr	r1, [pc, #120]	@ (800b714 <VCU_TransmitMessageQueue+0xa4>)
 800b69c:	f7f7 f929 	bl	80028f2 <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800b6a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b718 <VCU_TransmitMessageQueue+0xa8>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f003 0305 	and.w	r3, r3, #5
 800b6a8:	2b05      	cmp	r3, #5
 800b6aa:	d106      	bne.n	800b6ba <VCU_TransmitMessageQueue+0x4a>
 800b6ac:	491b      	ldr	r1, [pc, #108]	@ (800b71c <VCU_TransmitMessageQueue+0xac>)
 800b6ae:	481c      	ldr	r0, [pc, #112]	@ (800b720 <VCU_TransmitMessageQueue+0xb0>)
 800b6b0:	f008 fbc2 	bl	8013e38 <siprintf>
 800b6b4:	481a      	ldr	r0, [pc, #104]	@ (800b720 <VCU_TransmitMessageQueue+0xb0>)
 800b6b6:	f7f9 ffa3 	bl	8005600 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800b6ba:	79fb      	ldrb	r3, [r7, #7]
 800b6bc:	2102      	movs	r1, #2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f6 fda0 	bl	8002204 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800b6c4:	e01c      	b.n	800b700 <VCU_TransmitMessageQueue+0x90>
    }
    attempts--;
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800b6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b708 <VCU_TransmitMessageQueue+0x98>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0d2      	beq.n	800b67e <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800b6d8:	4b12      	ldr	r3, [pc, #72]	@ (800b724 <VCU_TransmitMessageQueue+0xb4>)
 800b6da:	791b      	ldrb	r3, [r3, #4]
 800b6dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f8 f912 	bl	800390c <DRV_CANFDSPI_DlcToDataBytes>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73bb      	strb	r3, [r7, #14]

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	79f8      	ldrb	r0, [r7, #7]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	9201      	str	r2, [sp, #4]
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b728 <VCU_TransmitMessageQueue+0xb8>)
 800b6f8:	4a0a      	ldr	r2, [pc, #40]	@ (800b724 <VCU_TransmitMessageQueue+0xb4>)
 800b6fa:	2102      	movs	r1, #2
 800b6fc:	f7f6 fc90 	bl	8002020 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	2000a6c0 	.word	0x2000a6c0
 800b70c:	2000a762 	.word	0x2000a762
 800b710:	2000a761 	.word	0x2000a761
 800b714:	2000a760 	.word	0x2000a760
 800b718:	2000000c 	.word	0x2000000c
 800b71c:	08018bf8 	.word	0x08018bf8
 800b720:	20000b5c 	.word	0x20000b5c
 800b724:	2000a6c4 	.word	0x2000a6c4
 800b728:	2000a6d0 	.word	0x2000a6d0
 800b72c:	00000000 	.word	0x00000000

0800b730 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800b730:	b5b0      	push	{r4, r5, r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b736:	4b4a      	ldr	r3, [pc, #296]	@ (800b860 <VCU_ProcessVcuCommand+0x130>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a4a      	ldr	r2, [pc, #296]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b73c:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b73e:	4b4a      	ldr	r3, [pc, #296]	@ (800b868 <VCU_ProcessVcuCommand+0x138>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b744:	4a47      	ldr	r2, [pc, #284]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b746:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800b748:	4b46      	ldr	r3, [pc, #280]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800b750:	463b      	mov	r3, r7
 800b752:	2208      	movs	r2, #8
 800b754:	2100      	movs	r1, #0
 800b756:	4618      	mov	r0, r3
 800b758:	f008 fbd3 	bl	8013f02 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800b75c:	4a43      	ldr	r2, [pc, #268]	@ (800b86c <VCU_ProcessVcuCommand+0x13c>)
 800b75e:	463b      	mov	r3, r7
 800b760:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b764:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800b768:	887a      	ldrh	r2, [r7, #2]
 800b76a:	4b3e      	ldr	r3, [pc, #248]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b76c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800b770:	4b3c      	ldr	r3, [pc, #240]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b776:	783a      	ldrb	r2, [r7, #0]
 800b778:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800b77c:	b2d2      	uxtb	r2, r2
 800b77e:	4293      	cmp	r3, r2
 800b780:	d03d      	beq.n	800b7fe <VCU_ProcessVcuCommand+0xce>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800b782:	783b      	ldrb	r3, [r7, #0]
 800b784:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	461a      	mov	r2, r3
 800b78c:	4b35      	ldr	r3, [pc, #212]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b78e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    switch (pack.vcuRequestedState) {
 800b792:	4b34      	ldr	r3, [pc, #208]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d81b      	bhi.n	800b7d4 <VCU_ProcessVcuCommand+0xa4>
 800b79c:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a4 <VCU_ProcessVcuCommand+0x74>)
 800b79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a2:	bf00      	nop
 800b7a4:	0800b7f9 	.word	0x0800b7f9
 800b7a8:	0800b7f9 	.word	0x0800b7f9
 800b7ac:	0800b7c5 	.word	0x0800b7c5
 800b7b0:	0800b7b5 	.word	0x0800b7b5
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800b7b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800b7ba:	4b2a      	ldr	r3, [pc, #168]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800b7c2:	e01c      	b.n	800b7fe <VCU_ProcessVcuCommand+0xce>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800b7c4:	4b27      	ldr	r3, [pc, #156]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800b7ca:	4b26      	ldr	r3, [pc, #152]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800b7d2:	e014      	b.n	800b7fe <VCU_ProcessVcuCommand+0xce>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800b7d4:	4b26      	ldr	r3, [pc, #152]	@ (800b870 <VCU_ProcessVcuCommand+0x140>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 0305 	and.w	r3, r3, #5
 800b7dc:	2b05      	cmp	r3, #5
 800b7de:	d10d      	bne.n	800b7fc <VCU_ProcessVcuCommand+0xcc>
 800b7e0:	4b20      	ldr	r3, [pc, #128]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b7e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	4922      	ldr	r1, [pc, #136]	@ (800b874 <VCU_ProcessVcuCommand+0x144>)
 800b7ea:	4823      	ldr	r0, [pc, #140]	@ (800b878 <VCU_ProcessVcuCommand+0x148>)
 800b7ec:	f008 fb24 	bl	8013e38 <siprintf>
 800b7f0:	4821      	ldr	r0, [pc, #132]	@ (800b878 <VCU_ProcessVcuCommand+0x148>)
 800b7f2:	f7f9 ff05 	bl	8005600 <serialOut>
        break;
 800b7f6:	e001      	b.n	800b7fc <VCU_ProcessVcuCommand+0xcc>
        break;
 800b7f8:	bf00      	nop
 800b7fa:	e000      	b.n	800b7fe <VCU_ProcessVcuCommand+0xce>
        break;
 800b7fc:	bf00      	nop
    }
  }
  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800b7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800b870 <VCU_ProcessVcuCommand+0x140>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f003 0304 	and.w	r3, r3, #4
 800b806:	2b00      	cmp	r3, #0
 800b808:	d021      	beq.n	800b84e <VCU_ProcessVcuCommand+0x11e>
 800b80a:	4b1c      	ldr	r3, [pc, #112]	@ (800b87c <VCU_ProcessVcuCommand+0x14c>)
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b812:	b29b      	uxth	r3, r3
 800b814:	461c      	mov	r4, r3
 800b816:	4b13      	ldr	r3, [pc, #76]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b81c:	461d      	mov	r5, r3
 800b81e:	4b11      	ldr	r3, [pc, #68]	@ (800b864 <VCU_ProcessVcuCommand+0x134>)
 800b820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b824:	4618      	mov	r0, r3
 800b826:	f7f4 fe65 	bl	80004f4 <__aeabi_i2d>
 800b82a:	a30b      	add	r3, pc, #44	@ (adr r3, 800b858 <VCU_ProcessVcuCommand+0x128>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f7f4 feca 	bl	80005c8 <__aeabi_dmul>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	e9cd 2300 	strd	r2, r3, [sp]
 800b83c:	462b      	mov	r3, r5
 800b83e:	4622      	mov	r2, r4
 800b840:	490f      	ldr	r1, [pc, #60]	@ (800b880 <VCU_ProcessVcuCommand+0x150>)
 800b842:	480d      	ldr	r0, [pc, #52]	@ (800b878 <VCU_ProcessVcuCommand+0x148>)
 800b844:	f008 faf8 	bl	8013e38 <siprintf>
 800b848:	480b      	ldr	r0, [pc, #44]	@ (800b878 <VCU_ProcessVcuCommand+0x148>)
 800b84a:	f7f9 fed9 	bl	8005600 <serialOut>
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bdb0      	pop	{r4, r5, r7, pc}
 800b856:	bf00      	nop
 800b858:	eb851eb8 	.word	0xeb851eb8
 800b85c:	3f8eb851 	.word	0x3f8eb851
 800b860:	20000d20 	.word	0x20000d20
 800b864:	2000a664 	.word	0x2000a664
 800b868:	200005d0 	.word	0x200005d0
 800b86c:	2000a720 	.word	0x2000a720
 800b870:	2000000c 	.word	0x2000000c
 800b874:	08018c28 	.word	0x08018c28
 800b878:	20000b5c 	.word	0x20000b5c
 800b87c:	2000a6c4 	.word	0x2000a6c4
 800b880:	08018c50 	.word	0x08018c50

0800b884 <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b88a:	4b31      	ldr	r3, [pc, #196]	@ (800b950 <VCU_ProcessVcuModuleCommand+0xcc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a31      	ldr	r2, [pc, #196]	@ (800b954 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b890:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b892:	4b31      	ldr	r3, [pc, #196]	@ (800b958 <VCU_ProcessVcuModuleCommand+0xd4>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b898:	4a2e      	ldr	r2, [pc, #184]	@ (800b954 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b89a:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800b89c:	4b2d      	ldr	r3, [pc, #180]	@ (800b954 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800b8a4:	463b      	mov	r3, r7
 800b8a6:	220c      	movs	r2, #12
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f008 fb29 	bl	8013f02 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800b8b0:	4a2a      	ldr	r2, [pc, #168]	@ (800b95c <VCU_ProcessVcuModuleCommand+0xd8>)
 800b8b2:	463b      	mov	r3, r7
 800b8b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800b8ba:	783a      	ldrb	r2, [r7, #0]
 800b8bc:	4b25      	ldr	r3, [pc, #148]	@ (800b954 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8be:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800b8c2:	4b24      	ldr	r3, [pc, #144]	@ (800b954 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8c4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe ff3b 	bl	800a744 <MCU_ModuleIndexFromId>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800b8d2:	4b20      	ldr	r3, [pc, #128]	@ (800b954 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8d4:	7d1b      	ldrb	r3, [r3, #20]
 800b8d6:	7bfa      	ldrb	r2, [r7, #15]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d034      	beq.n	800b946 <VCU_ProcessVcuModuleCommand+0xc2>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	4a20      	ldr	r2, [pc, #128]	@ (800b960 <VCU_ProcessVcuModuleCommand+0xdc>)
 800b8e0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b8e4:	fb01 f303 	mul.w	r3, r1, r3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3327      	adds	r3, #39	@ 0x27
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	787a      	ldrb	r2, [r7, #1]
 800b8f0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800b8f4:	b2d2      	uxtb	r2, r2
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d00e      	beq.n	800b918 <VCU_ProcessVcuModuleCommand+0x94>
      // State Change! Set requested state
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800b8fa:	787b      	ldrb	r3, [r7, #1]
 800b8fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b900:	b2da      	uxtb	r2, r3
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	4610      	mov	r0, r2
 800b906:	4a16      	ldr	r2, [pc, #88]	@ (800b960 <VCU_ProcessVcuModuleCommand+0xdc>)
 800b908:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b90c:	fb01 f303 	mul.w	r3, r1, r3
 800b910:	4413      	add	r3, r2
 800b912:	3328      	adds	r3, #40	@ 0x28
 800b914:	4602      	mov	r2, r0
 800b916:	701a      	strb	r2, [r3, #0]
 * moduleCommand.module_cell_balance_ctrl
 * moduleCommand.module_hv_bus_actv_iso
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800b918:	4b12      	ldr	r3, [pc, #72]	@ (800b964 <VCU_ProcessVcuModuleCommand+0xe0>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f003 0304 	and.w	r3, r3, #4
 800b920:	2b00      	cmp	r3, #0
 800b922:	d010      	beq.n	800b946 <VCU_ProcessVcuModuleCommand+0xc2>
 800b924:	4b10      	ldr	r3, [pc, #64]	@ (800b968 <VCU_ProcessVcuModuleCommand+0xe4>)
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	461a      	mov	r2, r3
 800b930:	787b      	ldrb	r3, [r7, #1]
 800b932:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b936:	b2db      	uxtb	r3, r3
 800b938:	490c      	ldr	r1, [pc, #48]	@ (800b96c <VCU_ProcessVcuModuleCommand+0xe8>)
 800b93a:	480d      	ldr	r0, [pc, #52]	@ (800b970 <VCU_ProcessVcuModuleCommand+0xec>)
 800b93c:	f008 fa7c 	bl	8013e38 <siprintf>
 800b940:	480b      	ldr	r0, [pc, #44]	@ (800b970 <VCU_ProcessVcuModuleCommand+0xec>)
 800b942:	f7f9 fe5d 	bl	8005600 <serialOut>
  }
}
 800b946:	bf00      	nop
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20000d20 	.word	0x20000d20
 800b954:	2000a664 	.word	0x2000a664
 800b958:	200005d0 	.word	0x200005d0
 800b95c:	2000a720 	.word	0x2000a720
 800b960:	20000de4 	.word	0x20000de4
 800b964:	2000000c 	.word	0x2000000c
 800b968:	2000a6c4 	.word	0x2000a6c4
 800b96c:	08018c80 	.word	0x08018c80
 800b970:	20000b5c 	.word	0x20000b5c

0800b974 <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b97a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9f4 <VCU_ProcessVcuKeepAlive+0x80>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a1e      	ldr	r2, [pc, #120]	@ (800b9f8 <VCU_ProcessVcuKeepAlive+0x84>)
 800b980:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b982:	4b1e      	ldr	r3, [pc, #120]	@ (800b9fc <VCU_ProcessVcuKeepAlive+0x88>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b988:	4a1b      	ldr	r2, [pc, #108]	@ (800b9f8 <VCU_ProcessVcuKeepAlive+0x84>)
 800b98a:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800b98c:	463b      	mov	r3, r7
 800b98e:	2208      	movs	r2, #8
 800b990:	2100      	movs	r1, #0
 800b992:	4618      	mov	r0, r3
 800b994:	f008 fab5 	bl	8013f02 <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800b998:	4a19      	ldr	r2, [pc, #100]	@ (800ba00 <VCU_ProcessVcuKeepAlive+0x8c>)
 800b99a:	463b      	mov	r3, r7
 800b99c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9a0:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800b9a4:	783b      	ldrb	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d008      	beq.n	800b9bc <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800b9aa:	4b13      	ldr	r3, [pc, #76]	@ (800b9f8 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800b9b2:	783a      	ldrb	r2, [r7, #0]
 800b9b4:	4b10      	ldr	r3, [pc, #64]	@ (800b9f8 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b9ba:	e003      	b.n	800b9c4 <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f8 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800ba04 <VCU_ProcessVcuKeepAlive+0x90>)
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00c      	beq.n	800b9ea <VCU_ProcessVcuKeepAlive+0x76>
 800b9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800ba08 <VCU_ProcessVcuKeepAlive+0x94>)
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	461a      	mov	r2, r3
 800b9dc:	490b      	ldr	r1, [pc, #44]	@ (800ba0c <VCU_ProcessVcuKeepAlive+0x98>)
 800b9de:	480c      	ldr	r0, [pc, #48]	@ (800ba10 <VCU_ProcessVcuKeepAlive+0x9c>)
 800b9e0:	f008 fa2a 	bl	8013e38 <siprintf>
 800b9e4:	480a      	ldr	r0, [pc, #40]	@ (800ba10 <VCU_ProcessVcuKeepAlive+0x9c>)
 800b9e6:	f7f9 fe0b 	bl	8005600 <serialOut>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20000d20 	.word	0x20000d20
 800b9f8:	2000a664 	.word	0x2000a664
 800b9fc:	200005d0 	.word	0x200005d0
 800ba00:	2000a720 	.word	0x2000a720
 800ba04:	2000000c 	.word	0x2000000c
 800ba08:	2000a6c4 	.word	0x2000a6c4
 800ba0c:	08018cb0 	.word	0x08018cb0
 800ba10:	20000b5c 	.word	0x20000b5c

0800ba14 <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ba1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ba8c <VCU_ProcessVcuTime+0x78>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	f003 0304 	and.w	r3, r3, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00c      	beq.n	800ba40 <VCU_ProcessVcuTime+0x2c>
 800ba26:	4b1a      	ldr	r3, [pc, #104]	@ (800ba90 <VCU_ProcessVcuTime+0x7c>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	461a      	mov	r2, r3
 800ba32:	4918      	ldr	r1, [pc, #96]	@ (800ba94 <VCU_ProcessVcuTime+0x80>)
 800ba34:	4818      	ldr	r0, [pc, #96]	@ (800ba98 <VCU_ProcessVcuTime+0x84>)
 800ba36:	f008 f9ff 	bl	8013e38 <siprintf>
 800ba3a:	4817      	ldr	r0, [pc, #92]	@ (800ba98 <VCU_ProcessVcuTime+0x84>)
 800ba3c:	f7f9 fde0 	bl	8005600 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ba40:	4b16      	ldr	r3, [pc, #88]	@ (800ba9c <VCU_ProcessVcuTime+0x88>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a16      	ldr	r2, [pc, #88]	@ (800baa0 <VCU_ProcessVcuTime+0x8c>)
 800ba46:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ba48:	4b16      	ldr	r3, [pc, #88]	@ (800baa4 <VCU_ProcessVcuTime+0x90>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4e:	4a14      	ldr	r2, [pc, #80]	@ (800baa0 <VCU_ProcessVcuTime+0x8c>)
 800ba50:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800ba52:	463b      	mov	r3, r7
 800ba54:	2208      	movs	r2, #8
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f008 fa52 	bl	8013f02 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800ba5e:	463b      	mov	r3, r7
 800ba60:	2208      	movs	r2, #8
 800ba62:	4911      	ldr	r1, [pc, #68]	@ (800baa8 <VCU_ProcessVcuTime+0x94>)
 800ba64:	4618      	mov	r0, r3
 800ba66:	f009 f944 	bl	8014cf2 <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800ba6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6e:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800ba72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba76:	f7f9 fe31 	bl	80056dc <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800ba7a:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <VCU_ProcessVcuTime+0x8c>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	2000000c 	.word	0x2000000c
 800ba90:	2000a6c4 	.word	0x2000a6c4
 800ba94:	08018cd0 	.word	0x08018cd0
 800ba98:	20000b5c 	.word	0x20000b5c
 800ba9c:	20000d20 	.word	0x20000d20
 800baa0:	2000a664 	.word	0x2000a664
 800baa4:	200005d0 	.word	0x200005d0
 800baa8:	2000a720 	.word	0x2000a720

0800baac <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bab6:	4b50      	ldr	r3, [pc, #320]	@ (800bbf8 <VCU_ProcessReadEeprom+0x14c>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	f003 0304 	and.w	r3, r3, #4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00c      	beq.n	800badc <VCU_ProcessReadEeprom+0x30>
 800bac2:	4b4e      	ldr	r3, [pc, #312]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800baca:	b29b      	uxth	r3, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	494c      	ldr	r1, [pc, #304]	@ (800bc00 <VCU_ProcessReadEeprom+0x154>)
 800bad0:	484c      	ldr	r0, [pc, #304]	@ (800bc04 <VCU_ProcessReadEeprom+0x158>)
 800bad2:	f008 f9b1 	bl	8013e38 <siprintf>
 800bad6:	484b      	ldr	r0, [pc, #300]	@ (800bc04 <VCU_ProcessReadEeprom+0x158>)
 800bad8:	f7f9 fd92 	bl	8005600 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800badc:	4b4a      	ldr	r3, [pc, #296]	@ (800bc08 <VCU_ProcessReadEeprom+0x15c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a4a      	ldr	r2, [pc, #296]	@ (800bc0c <VCU_ProcessReadEeprom+0x160>)
 800bae2:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800bae4:	4b4a      	ldr	r3, [pc, #296]	@ (800bc10 <VCU_ProcessReadEeprom+0x164>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baea:	4a48      	ldr	r2, [pc, #288]	@ (800bc0c <VCU_ProcessReadEeprom+0x160>)
 800baec:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800baee:	f107 030c 	add.w	r3, r7, #12
 800baf2:	2208      	movs	r2, #8
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f008 fa03 	bl	8013f02 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800bafc:	4a45      	ldr	r2, [pc, #276]	@ (800bc14 <VCU_ProcessReadEeprom+0x168>)
 800bafe:	f107 030c 	add.w	r3, r7, #12
 800bb02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb06:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800bb0a:	7b3b      	ldrb	r3, [r7, #12]
 800bb0c:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800bb0e:	463a      	mov	r2, r7
 800bb10:	8afb      	ldrh	r3, [r7, #22]
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7f8 fd39 	bl	800458c <EE_ReadVariable32bits>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800bb1e:	8abb      	ldrh	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d156      	bne.n	800bbd2 <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f36f 231f 	bfc	r3, #8, #24
 800bb2a:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800bb30:	8afb      	ldrh	r3, [r7, #22]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bb36:	4b31      	ldr	r3, [pc, #196]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800bb3c:	4b2f      	ldr	r3, [pc, #188]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800bb42:	4b2e      	ldr	r3, [pc, #184]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800bb48:	4b33      	ldr	r3, [pc, #204]	@ (800bc18 <VCU_ProcessReadEeprom+0x16c>)
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	1d3b      	adds	r3, r7, #4
 800bb4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb52:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bb56:	4b2d      	ldr	r3, [pc, #180]	@ (800bc0c <VCU_ProcessReadEeprom+0x160>)
 800bb58:	895b      	ldrh	r3, [r3, #10]
 800bb5a:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb64:	b299      	uxth	r1, r3
 800bb66:	4a25      	ldr	r2, [pc, #148]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb68:	8813      	ldrh	r3, [r2, #0]
 800bb6a:	f361 030a 	bfi	r3, r1, #0, #11
 800bb6e:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bb70:	4a22      	ldr	r2, [pc, #136]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb72:	6813      	ldr	r3, [r2, #0]
 800bb74:	f36f 23dc 	bfc	r3, #11, #18
 800bb78:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bb7a:	4a20      	ldr	r2, [pc, #128]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb7c:	7913      	ldrb	r3, [r2, #4]
 800bb7e:	f36f 1386 	bfc	r3, #6, #1
 800bb82:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bb84:	4a1d      	ldr	r2, [pc, #116]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb86:	7913      	ldrb	r3, [r2, #4]
 800bb88:	2108      	movs	r1, #8
 800bb8a:	f361 0303 	bfi	r3, r1, #0, #4
 800bb8e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bb90:	4a1a      	ldr	r2, [pc, #104]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb92:	7913      	ldrb	r3, [r2, #4]
 800bb94:	f36f 13c7 	bfc	r3, #7, #1
 800bb98:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bb9a:	4a18      	ldr	r2, [pc, #96]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bb9c:	7913      	ldrb	r3, [r2, #4]
 800bb9e:	f36f 1304 	bfc	r3, #4, #1
 800bba2:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bba4:	4b14      	ldr	r3, [pc, #80]	@ (800bbf8 <VCU_ProcessReadEeprom+0x14c>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00c      	beq.n	800bbca <VCU_ProcessReadEeprom+0x11e>
 800bbb0:	4b12      	ldr	r3, [pc, #72]	@ (800bbfc <VCU_ProcessReadEeprom+0x150>)
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	461a      	mov	r2, r3
 800bbbc:	4917      	ldr	r1, [pc, #92]	@ (800bc1c <VCU_ProcessReadEeprom+0x170>)
 800bbbe:	4811      	ldr	r0, [pc, #68]	@ (800bc04 <VCU_ProcessReadEeprom+0x158>)
 800bbc0:	f008 f93a 	bl	8013e38 <siprintf>
 800bbc4:	480f      	ldr	r0, [pc, #60]	@ (800bc04 <VCU_ProcessReadEeprom+0x158>)
 800bbc6:	f7f9 fd1b 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bbca:	2000      	movs	r0, #0
 800bbcc:	f7ff fd50 	bl	800b670 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800bbd0:	e00e      	b.n	800bbf0 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800bbd2:	4b09      	ldr	r3, [pc, #36]	@ (800bbf8 <VCU_ProcessReadEeprom+0x14c>)
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d008      	beq.n	800bbf0 <VCU_ProcessReadEeprom+0x144>
 800bbde:	8abb      	ldrh	r3, [r7, #20]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	490f      	ldr	r1, [pc, #60]	@ (800bc20 <VCU_ProcessReadEeprom+0x174>)
 800bbe4:	4807      	ldr	r0, [pc, #28]	@ (800bc04 <VCU_ProcessReadEeprom+0x158>)
 800bbe6:	f008 f927 	bl	8013e38 <siprintf>
 800bbea:	4806      	ldr	r0, [pc, #24]	@ (800bc04 <VCU_ProcessReadEeprom+0x158>)
 800bbec:	f7f9 fd08 	bl	8005600 <serialOut>
}
 800bbf0:	bf00      	nop
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	2000000c 	.word	0x2000000c
 800bbfc:	2000a6c4 	.word	0x2000a6c4
 800bc00:	08018ce8 	.word	0x08018ce8
 800bc04:	20000b5c 	.word	0x20000b5c
 800bc08:	20000d20 	.word	0x20000d20
 800bc0c:	2000a664 	.word	0x2000a664
 800bc10:	200005d0 	.word	0x200005d0
 800bc14:	2000a720 	.word	0x2000a720
 800bc18:	2000a6d0 	.word	0x2000a6d0
 800bc1c:	08018d08 	.word	0x08018d08
 800bc20:	08018d28 	.word	0x08018d28

0800bc24 <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bc2e:	4b52      	ldr	r3, [pc, #328]	@ (800bd78 <VCU_ProcessWriteEeprom+0x154>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00c      	beq.n	800bc54 <VCU_ProcessWriteEeprom+0x30>
 800bc3a:	4b50      	ldr	r3, [pc, #320]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	461a      	mov	r2, r3
 800bc46:	494e      	ldr	r1, [pc, #312]	@ (800bd80 <VCU_ProcessWriteEeprom+0x15c>)
 800bc48:	484e      	ldr	r0, [pc, #312]	@ (800bd84 <VCU_ProcessWriteEeprom+0x160>)
 800bc4a:	f008 f8f5 	bl	8013e38 <siprintf>
 800bc4e:	484d      	ldr	r0, [pc, #308]	@ (800bd84 <VCU_ProcessWriteEeprom+0x160>)
 800bc50:	f7f9 fcd6 	bl	8005600 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800bc54:	4b4c      	ldr	r3, [pc, #304]	@ (800bd88 <VCU_ProcessWriteEeprom+0x164>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a4c      	ldr	r2, [pc, #304]	@ (800bd8c <VCU_ProcessWriteEeprom+0x168>)
 800bc5a:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800bc5c:	4b4c      	ldr	r3, [pc, #304]	@ (800bd90 <VCU_ProcessWriteEeprom+0x16c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc62:	4a4a      	ldr	r2, [pc, #296]	@ (800bd8c <VCU_ProcessWriteEeprom+0x168>)
 800bc64:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800bc66:	f107 0308 	add.w	r3, r7, #8
 800bc6a:	2208      	movs	r2, #8
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f008 f947 	bl	8013f02 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800bc74:	4a47      	ldr	r2, [pc, #284]	@ (800bd94 <VCU_ProcessWriteEeprom+0x170>)
 800bc76:	f107 0308 	add.w	r3, r7, #8
 800bc7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc7e:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800bc82:	7a3b      	ldrb	r3, [r7, #8]
 800bc84:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800bc8a:	8a7b      	ldrh	r3, [r7, #18]
 800bc8c:	6979      	ldr	r1, [r7, #20]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7f9 fe1c 	bl	80058cc <StoreEEPROM>
 800bc94:	4603      	mov	r3, r0
 800bc96:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800bc98:	8a3b      	ldrh	r3, [r7, #16]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d156      	bne.n	800bd4c <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f36f 231f 	bfc	r3, #8, #24
 800bca4:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800bcaa:	8a7b      	ldrh	r3, [r7, #18]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bcb0:	4b32      	ldr	r3, [pc, #200]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800bcb6:	4b31      	ldr	r3, [pc, #196]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800bcbc:	4b2f      	ldr	r3, [pc, #188]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800bcc2:	4b35      	ldr	r3, [pc, #212]	@ (800bd98 <VCU_ProcessWriteEeprom+0x174>)
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bccc:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bcd0:	4b2e      	ldr	r3, [pc, #184]	@ (800bd8c <VCU_ProcessWriteEeprom+0x168>)
 800bcd2:	895b      	ldrh	r3, [r3, #10]
 800bcd4:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcde:	b299      	uxth	r1, r3
 800bce0:	4a26      	ldr	r2, [pc, #152]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bce2:	8813      	ldrh	r3, [r2, #0]
 800bce4:	f361 030a 	bfi	r3, r1, #0, #11
 800bce8:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bcea:	4a24      	ldr	r2, [pc, #144]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bcec:	6813      	ldr	r3, [r2, #0]
 800bcee:	f36f 23dc 	bfc	r3, #11, #18
 800bcf2:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bcf4:	4a21      	ldr	r2, [pc, #132]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bcf6:	7913      	ldrb	r3, [r2, #4]
 800bcf8:	f36f 1386 	bfc	r3, #6, #1
 800bcfc:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bcfe:	4a1f      	ldr	r2, [pc, #124]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bd00:	7913      	ldrb	r3, [r2, #4]
 800bd02:	2108      	movs	r1, #8
 800bd04:	f361 0303 	bfi	r3, r1, #0, #4
 800bd08:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bd0a:	4a1c      	ldr	r2, [pc, #112]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bd0c:	7913      	ldrb	r3, [r2, #4]
 800bd0e:	f36f 13c7 	bfc	r3, #7, #1
 800bd12:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bd14:	4a19      	ldr	r2, [pc, #100]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bd16:	7913      	ldrb	r3, [r2, #4]
 800bd18:	f36f 1304 	bfc	r3, #4, #1
 800bd1c:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bd1e:	4b16      	ldr	r3, [pc, #88]	@ (800bd78 <VCU_ProcessWriteEeprom+0x154>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00c      	beq.n	800bd44 <VCU_ProcessWriteEeprom+0x120>
 800bd2a:	4b14      	ldr	r3, [pc, #80]	@ (800bd7c <VCU_ProcessWriteEeprom+0x158>)
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	461a      	mov	r2, r3
 800bd36:	4919      	ldr	r1, [pc, #100]	@ (800bd9c <VCU_ProcessWriteEeprom+0x178>)
 800bd38:	4812      	ldr	r0, [pc, #72]	@ (800bd84 <VCU_ProcessWriteEeprom+0x160>)
 800bd3a:	f008 f87d 	bl	8013e38 <siprintf>
 800bd3e:	4811      	ldr	r0, [pc, #68]	@ (800bd84 <VCU_ProcessWriteEeprom+0x160>)
 800bd40:	f7f9 fc5e 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bd44:	2000      	movs	r0, #0
 800bd46:	f7ff fc93 	bl	800b670 <VCU_TransmitMessageQueue>
 800bd4a:	e00e      	b.n	800bd6a <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800bd4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd78 <VCU_ProcessWriteEeprom+0x154>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d008      	beq.n	800bd6a <VCU_ProcessWriteEeprom+0x146>
 800bd58:	8a3b      	ldrh	r3, [r7, #16]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	4910      	ldr	r1, [pc, #64]	@ (800bda0 <VCU_ProcessWriteEeprom+0x17c>)
 800bd5e:	4809      	ldr	r0, [pc, #36]	@ (800bd84 <VCU_ProcessWriteEeprom+0x160>)
 800bd60:	f008 f86a 	bl	8013e38 <siprintf>
 800bd64:	4807      	ldr	r0, [pc, #28]	@ (800bd84 <VCU_ProcessWriteEeprom+0x160>)
 800bd66:	f7f9 fc4b 	bl	8005600 <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800bd6a:	f7fb f80d 	bl	8006d88 <PCU_Initialize>
}
 800bd6e:	bf00      	nop
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	2000000c 	.word	0x2000000c
 800bd7c:	2000a6c4 	.word	0x2000a6c4
 800bd80:	08018d4c 	.word	0x08018d4c
 800bd84:	20000b5c 	.word	0x20000b5c
 800bd88:	20000d20 	.word	0x20000d20
 800bd8c:	2000a664 	.word	0x2000a664
 800bd90:	200005d0 	.word	0x200005d0
 800bd94:	2000a720 	.word	0x2000a720
 800bd98:	2000a6d0 	.word	0x2000a6d0
 800bd9c:	08018d08 	.word	0x08018d08
 800bda0:	08018d6c 	.word	0x08018d6c

0800bda4 <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800bda4:	b480      	push	{r7}
 800bda6:	af00      	add	r7, sp, #0

}
 800bda8:	bf00      	nop
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
	...

0800bdb4 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800bdba:	4b16      	ldr	r3, [pc, #88]	@ (800be14 <VCU_TicksSinceLastMessage+0x60>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc0:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800bdc2:	4b15      	ldr	r3, [pc, #84]	@ (800be18 <VCU_TicksSinceLastMessage+0x64>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800bdc8:	4b14      	ldr	r3, [pc, #80]	@ (800be1c <VCU_TicksSinceLastMessage+0x68>)
 800bdca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d105      	bne.n	800bdde <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800bdd2:	4b12      	ldr	r3, [pc, #72]	@ (800be1c <VCU_TicksSinceLastMessage+0x68>)
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e013      	b.n	800be06 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800bdde:	4b0d      	ldr	r3, [pc, #52]	@ (800be14 <VCU_TicksSinceLastMessage+0x60>)
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	4b0e      	ldr	r3, [pc, #56]	@ (800be1c <VCU_TicksSinceLastMessage+0x68>)
 800bde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bde6:	1ad2      	subs	r2, r2, r3
 800bde8:	4b0a      	ldr	r3, [pc, #40]	@ (800be14 <VCU_TicksSinceLastMessage+0x60>)
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	3301      	adds	r3, #1
 800bdee:	490b      	ldr	r1, [pc, #44]	@ (800be1c <VCU_TicksSinceLastMessage+0x68>)
 800bdf0:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	1a41      	subs	r1, r0, r1
 800bdf6:	3901      	subs	r1, #1
 800bdf8:	fb01 f303 	mul.w	r3, r1, r3
 800bdfc:	441a      	add	r2, r3
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4413      	add	r3, r2
 800be02:	3301      	adds	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800be06:	68fb      	ldr	r3, [r7, #12]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	200005d0 	.word	0x200005d0
 800be18:	20000d20 	.word	0x20000d20
 800be1c:	2000a664 	.word	0x2000a664

0800be20 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800be26:	f04f 0300 	mov.w	r3, #0
 800be2a:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800be2c:	f04f 0300 	mov.w	r3, #0
 800be30:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800be32:	4b67      	ldr	r3, [pc, #412]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800be34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f4 fb5b 	bl	80004f4 <__aeabi_i2d>
 800be3e:	f04f 0200 	mov.w	r2, #0
 800be42:	4b64      	ldr	r3, [pc, #400]	@ (800bfd4 <VCU_TransmitBmsState+0x1b4>)
 800be44:	f7f4 fbc0 	bl	80005c8 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4610      	mov	r0, r2
 800be4e:	4619      	mov	r1, r3
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	f04f 0300 	mov.w	r3, #0
 800be58:	f7f4 fa00 	bl	800025c <__adddf3>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4610      	mov	r0, r2
 800be62:	4619      	mov	r1, r3
 800be64:	f7f4 fea8 	bl	8000bb8 <__aeabi_d2f>
 800be68:	4603      	mov	r3, r0
 800be6a:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800be6c:	6978      	ldr	r0, [r7, #20]
 800be6e:	f7f4 fb53 	bl	8000518 <__aeabi_f2d>
 800be72:	a355      	add	r3, pc, #340	@ (adr r3, 800bfc8 <VCU_TransmitBmsState+0x1a8>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fcd0 	bl	800081c <__aeabi_ddiv>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4610      	mov	r0, r2
 800be82:	4619      	mov	r1, r3
 800be84:	f7f4 fe98 	bl	8000bb8 <__aeabi_d2f>
 800be88:	4603      	mov	r3, r0
 800be8a:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800be8c:	edd7 7a04 	vldr	s15, [r7, #16]
 800be90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be94:	edc7 7a01 	vstr	s15, [r7, #4]
 800be98:	793b      	ldrb	r3, [r7, #4]
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	893b      	ldrh	r3, [r7, #8]
 800be9e:	f362 0389 	bfi	r3, r2, #2, #8
 800bea2:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800bea4:	4b4a      	ldr	r3, [pc, #296]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	7a3b      	ldrb	r3, [r7, #8]
 800beb2:	f362 0301 	bfi	r3, r2, #0, #2
 800beb6:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800beb8:	4b45      	ldr	r3, [pc, #276]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800beba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	7a7b      	ldrb	r3, [r7, #9]
 800bec6:	f362 0383 	bfi	r3, r2, #2, #2
 800beca:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800becc:	4b40      	ldr	r3, [pc, #256]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bece:	7d9b      	ldrb	r3, [r3, #22]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	7a7b      	ldrb	r3, [r7, #9]
 800bed8:	f362 1304 	bfi	r3, r2, #4, #1
 800bedc:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800bede:	4b3c      	ldr	r3, [pc, #240]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bee0:	7d5b      	ldrb	r3, [r3, #21]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	7a7b      	ldrb	r3, [r7, #9]
 800beea:	f362 1345 	bfi	r3, r2, #5, #1
 800beee:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800bef0:	4b37      	ldr	r3, [pc, #220]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bef2:	7ddb      	ldrb	r3, [r3, #23]
 800bef4:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800bef6:	4b36      	ldr	r3, [pc, #216]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bef8:	7e1b      	ldrb	r3, [r3, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800befe:	7a7b      	ldrb	r3, [r7, #9]
 800bf00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf04:	727b      	strb	r3, [r7, #9]
 800bf06:	e003      	b.n	800bf10 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800bf08:	7a7b      	ldrb	r3, [r7, #9]
 800bf0a:	f36f 1386 	bfc	r3, #6, #1
 800bf0e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800bf10:	4b2f      	ldr	r3, [pc, #188]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bf12:	7d1b      	ldrb	r3, [r3, #20]
 800bf14:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800bf16:	7a7b      	ldrb	r3, [r7, #9]
 800bf18:	f36f 13c7 	bfc	r3, #7, #1
 800bf1c:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bf22:	4b2d      	ldr	r3, [pc, #180]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bf28:	4b2b      	ldr	r3, [pc, #172]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bf2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800bf34:	4b29      	ldr	r3, [pc, #164]	@ (800bfdc <VCU_TransmitBmsState+0x1bc>)
 800bf36:	461a      	mov	r2, r3
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf40:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bf44:	4b22      	ldr	r3, [pc, #136]	@ (800bfd0 <VCU_TransmitBmsState+0x1b0>)
 800bf46:	895b      	ldrh	r3, [r3, #10]
 800bf48:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf52:	b299      	uxth	r1, r3
 800bf54:	4a20      	ldr	r2, [pc, #128]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf56:	8813      	ldrh	r3, [r2, #0]
 800bf58:	f361 030a 	bfi	r3, r1, #0, #11
 800bf5c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bf5e:	4a1e      	ldr	r2, [pc, #120]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf60:	6813      	ldr	r3, [r2, #0]
 800bf62:	f36f 23dc 	bfc	r3, #11, #18
 800bf66:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bf68:	4a1b      	ldr	r2, [pc, #108]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf6a:	7913      	ldrb	r3, [r2, #4]
 800bf6c:	f36f 1386 	bfc	r3, #6, #1
 800bf70:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bf72:	4a19      	ldr	r2, [pc, #100]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf74:	7913      	ldrb	r3, [r2, #4]
 800bf76:	2108      	movs	r1, #8
 800bf78:	f361 0303 	bfi	r3, r1, #0, #4
 800bf7c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bf7e:	4a16      	ldr	r2, [pc, #88]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf80:	7913      	ldrb	r3, [r2, #4]
 800bf82:	f36f 13c7 	bfc	r3, #7, #1
 800bf86:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bf88:	4a13      	ldr	r2, [pc, #76]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bf8a:	7913      	ldrb	r3, [r2, #4]
 800bf8c:	f36f 1304 	bfc	r3, #4, #1
 800bf90:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bf92:	4b13      	ldr	r3, [pc, #76]	@ (800bfe0 <VCU_TransmitBmsState+0x1c0>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	f003 0304 	and.w	r3, r3, #4
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00c      	beq.n	800bfb8 <VCU_TransmitBmsState+0x198>
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bfd8 <VCU_TransmitBmsState+0x1b8>)
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	490e      	ldr	r1, [pc, #56]	@ (800bfe4 <VCU_TransmitBmsState+0x1c4>)
 800bfac:	480e      	ldr	r0, [pc, #56]	@ (800bfe8 <VCU_TransmitBmsState+0x1c8>)
 800bfae:	f007 ff43 	bl	8013e38 <siprintf>
 800bfb2:	480d      	ldr	r0, [pc, #52]	@ (800bfe8 <VCU_TransmitBmsState+0x1c8>)
 800bfb4:	f7f9 fb24 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bfb8:	2000      	movs	r0, #0
 800bfba:	f7ff fb59 	bl	800b670 <VCU_TransmitMessageQueue>
}
 800bfbe:	bf00      	nop
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	9999999a 	.word	0x9999999a
 800bfcc:	3fd99999 	.word	0x3fd99999
 800bfd0:	2000a664 	.word	0x2000a664
 800bfd4:	3fe00000 	.word	0x3fe00000
 800bfd8:	2000a6c4 	.word	0x2000a6c4
 800bfdc:	2000a6d0 	.word	0x2000a6d0
 800bfe0:	2000000c 	.word	0x2000000c
 800bfe4:	08018d90 	.word	0x08018d90
 800bfe8:	20000b5c 	.word	0x20000b5c
 800bfec:	00000000 	.word	0x00000000

0800bff0 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800bff6:	f04f 0300 	mov.w	r3, #0
 800bffa:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800bffc:	f04f 0300 	mov.w	r3, #0
 800c000:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800c002:	4b65      	ldr	r3, [pc, #404]	@ (800c198 <VCU_TransmitBmsData1+0x1a8>)
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	4618      	mov	r0, r3
 800c008:	f7f4 fa64 	bl	80004d4 <__aeabi_ui2d>
 800c00c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c188 <VCU_TransmitBmsData1+0x198>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 fad9 	bl	80005c8 <__aeabi_dmul>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4610      	mov	r0, r2
 800c01c:	4619      	mov	r1, r3
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	4b5e      	ldr	r3, [pc, #376]	@ (800c19c <VCU_TransmitBmsData1+0x1ac>)
 800c024:	f7f4 f918 	bl	8000258 <__aeabi_dsub>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	4610      	mov	r0, r2
 800c02e:	4619      	mov	r1, r3
 800c030:	f7f4 fdc2 	bl	8000bb8 <__aeabi_d2f>
 800c034:	4603      	mov	r3, r0
 800c036:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7f4 fa6d 	bl	8000518 <__aeabi_f2d>
 800c03e:	a352      	add	r3, pc, #328	@ (adr r3, 800c188 <VCU_TransmitBmsData1+0x198>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 fbea 	bl	800081c <__aeabi_ddiv>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4610      	mov	r0, r2
 800c04e:	4619      	mov	r1, r3
 800c050:	f04f 0200 	mov.w	r2, #0
 800c054:	4b52      	ldr	r3, [pc, #328]	@ (800c1a0 <VCU_TransmitBmsData1+0x1b0>)
 800c056:	f7f4 f901 	bl	800025c <__adddf3>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	4610      	mov	r0, r2
 800c060:	4619      	mov	r1, r3
 800c062:	f7f4 fda9 	bl	8000bb8 <__aeabi_d2f>
 800c066:	4603      	mov	r3, r0
 800c068:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800c06a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c072:	ee17 3a90 	vmov	r3, s15
 800c076:	b29b      	uxth	r3, r3
 800c078:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800c07a:	4b47      	ldr	r3, [pc, #284]	@ (800c198 <VCU_TransmitBmsData1+0x1a8>)
 800c07c:	899b      	ldrh	r3, [r3, #12]
 800c07e:	4618      	mov	r0, r3
 800c080:	f7f4 fa38 	bl	80004f4 <__aeabi_i2d>
 800c084:	a342      	add	r3, pc, #264	@ (adr r3, 800c190 <VCU_TransmitBmsData1+0x1a0>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f7f4 fa9d 	bl	80005c8 <__aeabi_dmul>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4610      	mov	r0, r2
 800c094:	4619      	mov	r1, r3
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	f04f 0300 	mov.w	r3, #0
 800c09e:	f7f4 f8dd 	bl	800025c <__adddf3>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f7f4 fd85 	bl	8000bb8 <__aeabi_d2f>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7f4 fa30 	bl	8000518 <__aeabi_f2d>
 800c0b8:	a333      	add	r3, pc, #204	@ (adr r3, 800c188 <VCU_TransmitBmsData1+0x198>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 fbad 	bl	800081c <__aeabi_ddiv>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7f4 fd75 	bl	8000bb8 <__aeabi_d2f>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800c0d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0da:	ee17 3a90 	vmov	r3, s15
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c0e6:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c0ec:	4b2d      	ldr	r3, [pc, #180]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c0f2:	4b2c      	ldr	r3, [pc, #176]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800c0f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c1a8 <VCU_TransmitBmsData1+0x1b8>)
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	463b      	mov	r3, r7
 800c0fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c102:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c106:	4b24      	ldr	r3, [pc, #144]	@ (800c198 <VCU_TransmitBmsData1+0x1a8>)
 800c108:	895b      	ldrh	r3, [r3, #10]
 800c10a:	f203 4321 	addw	r3, r3, #1057	@ 0x421
 800c10e:	b29b      	uxth	r3, r3
 800c110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c114:	b299      	uxth	r1, r3
 800c116:	4a23      	ldr	r2, [pc, #140]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c118:	8813      	ldrh	r3, [r2, #0]
 800c11a:	f361 030a 	bfi	r3, r1, #0, #11
 800c11e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c120:	4a20      	ldr	r2, [pc, #128]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c122:	6813      	ldr	r3, [r2, #0]
 800c124:	f36f 23dc 	bfc	r3, #11, #18
 800c128:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c12a:	4a1e      	ldr	r2, [pc, #120]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c12c:	7913      	ldrb	r3, [r2, #4]
 800c12e:	f36f 1386 	bfc	r3, #6, #1
 800c132:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c134:	4a1b      	ldr	r2, [pc, #108]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c136:	7913      	ldrb	r3, [r2, #4]
 800c138:	2108      	movs	r1, #8
 800c13a:	f361 0303 	bfi	r3, r1, #0, #4
 800c13e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c140:	4a18      	ldr	r2, [pc, #96]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c142:	7913      	ldrb	r3, [r2, #4]
 800c144:	f36f 13c7 	bfc	r3, #7, #1
 800c148:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c14a:	4a16      	ldr	r2, [pc, #88]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c14c:	7913      	ldrb	r3, [r2, #4]
 800c14e:	f36f 1304 	bfc	r3, #4, #1
 800c152:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c154:	4b15      	ldr	r3, [pc, #84]	@ (800c1ac <VCU_TransmitBmsData1+0x1bc>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	f003 0304 	and.w	r3, r3, #4
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00c      	beq.n	800c17a <VCU_TransmitBmsData1+0x18a>
 800c160:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <VCU_TransmitBmsData1+0x1b4>)
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c168:	b29b      	uxth	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	4910      	ldr	r1, [pc, #64]	@ (800c1b0 <VCU_TransmitBmsData1+0x1c0>)
 800c16e:	4811      	ldr	r0, [pc, #68]	@ (800c1b4 <VCU_TransmitBmsData1+0x1c4>)
 800c170:	f007 fe62 	bl	8013e38 <siprintf>
 800c174:	480f      	ldr	r0, [pc, #60]	@ (800c1b4 <VCU_TransmitBmsData1+0x1c4>)
 800c176:	f7f9 fa43 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c17a:	2000      	movs	r0, #0
 800c17c:	f7ff fa78 	bl	800b670 <VCU_TransmitMessageQueue>
}
 800c180:	bf00      	nop
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	9999999a 	.word	0x9999999a
 800c18c:	3fa99999 	.word	0x3fa99999
 800c190:	eb851eb8 	.word	0xeb851eb8
 800c194:	3f8eb851 	.word	0x3f8eb851
 800c198:	2000a664 	.word	0x2000a664
 800c19c:	40990000 	.word	0x40990000
 800c1a0:	40df4000 	.word	0x40df4000
 800c1a4:	2000a6c4 	.word	0x2000a6c4
 800c1a8:	2000a6d0 	.word	0x2000a6d0
 800c1ac:	2000000c 	.word	0x2000000c
 800c1b0:	08018da8 	.word	0x08018da8
 800c1b4:	20000b5c 	.word	0x20000b5c

0800c1b8 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800c1be:	f04f 0300 	mov.w	r3, #0
 800c1c2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c1c4:	f04f 0300 	mov.w	r3, #0
 800c1c8:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800c1ca:	4b95      	ldr	r3, [pc, #596]	@ (800c420 <VCU_TransmitBmsData2+0x268>)
 800c1cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7f4 f98f 	bl	80004f4 <__aeabi_i2d>
 800c1d6:	f04f 0200 	mov.w	r2, #0
 800c1da:	4b92      	ldr	r3, [pc, #584]	@ (800c424 <VCU_TransmitBmsData2+0x26c>)
 800c1dc:	f7f4 f9f4 	bl	80005c8 <__aeabi_dmul>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	f04f 0200 	mov.w	r2, #0
 800c1ec:	f04f 0300 	mov.w	r3, #0
 800c1f0:	f7f4 f834 	bl	800025c <__adddf3>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f7f4 fcdc 	bl	8000bb8 <__aeabi_d2f>
 800c200:	4603      	mov	r3, r0
 800c202:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7f4 f987 	bl	8000518 <__aeabi_f2d>
 800c20a:	a381      	add	r3, pc, #516	@ (adr r3, 800c410 <VCU_TransmitBmsData2+0x258>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 fb04 	bl	800081c <__aeabi_ddiv>
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	4610      	mov	r0, r2
 800c21a:	4619      	mov	r1, r3
 800c21c:	f7f4 fccc 	bl	8000bb8 <__aeabi_d2f>
 800c220:	4603      	mov	r3, r0
 800c222:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800c224:	edd7 7a02 	vldr	s15, [r7, #8]
 800c228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c22c:	ee17 3a90 	vmov	r3, s15
 800c230:	b29b      	uxth	r3, r3
 800c232:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800c234:	4b7a      	ldr	r3, [pc, #488]	@ (800c420 <VCU_TransmitBmsData2+0x268>)
 800c236:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800c238:	4618      	mov	r0, r3
 800c23a:	f7f4 f95b 	bl	80004f4 <__aeabi_i2d>
 800c23e:	a376      	add	r3, pc, #472	@ (adr r3, 800c418 <VCU_TransmitBmsData2+0x260>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f4 f9c0 	bl	80005c8 <__aeabi_dmul>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4610      	mov	r0, r2
 800c24e:	4619      	mov	r1, r3
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	f7f4 f800 	bl	800025c <__adddf3>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	4610      	mov	r0, r2
 800c262:	4619      	mov	r1, r3
 800c264:	f7f4 fca8 	bl	8000bb8 <__aeabi_d2f>
 800c268:	4603      	mov	r3, r0
 800c26a:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7f4 f953 	bl	8000518 <__aeabi_f2d>
 800c272:	a369      	add	r3, pc, #420	@ (adr r3, 800c418 <VCU_TransmitBmsData2+0x260>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f7f4 fad0 	bl	800081c <__aeabi_ddiv>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4610      	mov	r0, r2
 800c282:	4619      	mov	r1, r3
 800c284:	f7f4 fc98 	bl	8000bb8 <__aeabi_d2f>
 800c288:	4603      	mov	r3, r0
 800c28a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800c28c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c294:	ee17 3a90 	vmov	r3, s15
 800c298:	b29b      	uxth	r3, r3
 800c29a:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800c29c:	4b60      	ldr	r3, [pc, #384]	@ (800c420 <VCU_TransmitBmsData2+0x268>)
 800c29e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f4 f927 	bl	80004f4 <__aeabi_i2d>
 800c2a6:	a35c      	add	r3, pc, #368	@ (adr r3, 800c418 <VCU_TransmitBmsData2+0x260>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f4 f98c 	bl	80005c8 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	f04f 0200 	mov.w	r2, #0
 800c2bc:	f04f 0300 	mov.w	r3, #0
 800c2c0:	f7f3 ffcc 	bl	800025c <__adddf3>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	f7f4 fc74 	bl	8000bb8 <__aeabi_d2f>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7f4 f91f 	bl	8000518 <__aeabi_f2d>
 800c2da:	a34f      	add	r3, pc, #316	@ (adr r3, 800c418 <VCU_TransmitBmsData2+0x260>)
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f7f4 fa9c 	bl	800081c <__aeabi_ddiv>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	f7f4 fc64 	bl	8000bb8 <__aeabi_d2f>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800c2f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2fc:	ee17 3a90 	vmov	r3, s15
 800c300:	b29b      	uxth	r3, r3
 800c302:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800c304:	4b46      	ldr	r3, [pc, #280]	@ (800c420 <VCU_TransmitBmsData2+0x268>)
 800c306:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c308:	4618      	mov	r0, r3
 800c30a:	f7f4 f8f3 	bl	80004f4 <__aeabi_i2d>
 800c30e:	a342      	add	r3, pc, #264	@ (adr r3, 800c418 <VCU_TransmitBmsData2+0x260>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	f7f4 f958 	bl	80005c8 <__aeabi_dmul>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4610      	mov	r0, r2
 800c31e:	4619      	mov	r1, r3
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	f04f 0300 	mov.w	r3, #0
 800c328:	f7f3 ff98 	bl	800025c <__adddf3>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4610      	mov	r0, r2
 800c332:	4619      	mov	r1, r3
 800c334:	f7f4 fc40 	bl	8000bb8 <__aeabi_d2f>
 800c338:	4603      	mov	r3, r0
 800c33a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7f4 f8eb 	bl	8000518 <__aeabi_f2d>
 800c342:	a335      	add	r3, pc, #212	@ (adr r3, 800c418 <VCU_TransmitBmsData2+0x260>)
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f7f4 fa68 	bl	800081c <__aeabi_ddiv>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	4610      	mov	r0, r2
 800c352:	4619      	mov	r1, r3
 800c354:	f7f4 fc30 	bl	8000bb8 <__aeabi_d2f>
 800c358:	4603      	mov	r3, r0
 800c35a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800c35c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c364:	ee17 3a90 	vmov	r3, s15
 800c368:	b29b      	uxth	r3, r3
 800c36a:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c36c:	4b2e      	ldr	r3, [pc, #184]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c36e:	2200      	movs	r2, #0
 800c370:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c372:	4b2d      	ldr	r3, [pc, #180]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c374:	2200      	movs	r2, #0
 800c376:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c378:	4b2b      	ldr	r3, [pc, #172]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800c37e:	4b2b      	ldr	r3, [pc, #172]	@ (800c42c <VCU_TransmitBmsData2+0x274>)
 800c380:	461a      	mov	r2, r3
 800c382:	463b      	mov	r3, r7
 800c384:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c388:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c38c:	4b24      	ldr	r3, [pc, #144]	@ (800c420 <VCU_TransmitBmsData2+0x268>)
 800c38e:	895b      	ldrh	r3, [r3, #10]
 800c390:	f203 4322 	addw	r3, r3, #1058	@ 0x422
 800c394:	b29b      	uxth	r3, r3
 800c396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c39a:	b299      	uxth	r1, r3
 800c39c:	4a22      	ldr	r2, [pc, #136]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c39e:	8813      	ldrh	r3, [r2, #0]
 800c3a0:	f361 030a 	bfi	r3, r1, #0, #11
 800c3a4:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c3a6:	4a20      	ldr	r2, [pc, #128]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c3a8:	6813      	ldr	r3, [r2, #0]
 800c3aa:	f36f 23dc 	bfc	r3, #11, #18
 800c3ae:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c3b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c3b2:	7913      	ldrb	r3, [r2, #4]
 800c3b4:	f36f 1386 	bfc	r3, #6, #1
 800c3b8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c3bc:	7913      	ldrb	r3, [r2, #4]
 800c3be:	2108      	movs	r1, #8
 800c3c0:	f361 0303 	bfi	r3, r1, #0, #4
 800c3c4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c3c6:	4a18      	ldr	r2, [pc, #96]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c3c8:	7913      	ldrb	r3, [r2, #4]
 800c3ca:	f36f 13c7 	bfc	r3, #7, #1
 800c3ce:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c3d0:	4a15      	ldr	r2, [pc, #84]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c3d2:	7913      	ldrb	r3, [r2, #4]
 800c3d4:	f36f 1304 	bfc	r3, #4, #1
 800c3d8:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c3da:	4b15      	ldr	r3, [pc, #84]	@ (800c430 <VCU_TransmitBmsData2+0x278>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	f003 0304 	and.w	r3, r3, #4
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00c      	beq.n	800c400 <VCU_TransmitBmsData2+0x248>
 800c3e6:	4b10      	ldr	r3, [pc, #64]	@ (800c428 <VCU_TransmitBmsData2+0x270>)
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	4910      	ldr	r1, [pc, #64]	@ (800c434 <VCU_TransmitBmsData2+0x27c>)
 800c3f4:	4810      	ldr	r0, [pc, #64]	@ (800c438 <VCU_TransmitBmsData2+0x280>)
 800c3f6:	f007 fd1f 	bl	8013e38 <siprintf>
 800c3fa:	480f      	ldr	r0, [pc, #60]	@ (800c438 <VCU_TransmitBmsData2+0x280>)
 800c3fc:	f7f9 f900 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c400:	2000      	movs	r0, #0
 800c402:	f7ff f935 	bl	800b670 <VCU_TransmitMessageQueue>
}
 800c406:	bf00      	nop
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	9999999a 	.word	0x9999999a
 800c414:	3f599999 	.word	0x3f599999
 800c418:	d2f1a9fc 	.word	0xd2f1a9fc
 800c41c:	3f50624d 	.word	0x3f50624d
 800c420:	2000a664 	.word	0x2000a664
 800c424:	3fe00000 	.word	0x3fe00000
 800c428:	2000a6c4 	.word	0x2000a6c4
 800c42c:	2000a6d0 	.word	0x2000a6d0
 800c430:	2000000c 	.word	0x2000000c
 800c434:	08018dc4 	.word	0x08018dc4
 800c438:	20000b5c 	.word	0x20000b5c
 800c43c:	00000000 	.word	0x00000000

0800c440 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800c452:	4b89      	ldr	r3, [pc, #548]	@ (800c678 <VCU_TransmitBmsData3+0x238>)
 800c454:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c456:	4618      	mov	r0, r3
 800c458:	f7f4 f84c 	bl	80004f4 <__aeabi_i2d>
 800c45c:	a380      	add	r3, pc, #512	@ (adr r3, 800c660 <VCU_TransmitBmsData3+0x220>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f7f4 f8b1 	bl	80005c8 <__aeabi_dmul>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	4610      	mov	r0, r2
 800c46c:	4619      	mov	r1, r3
 800c46e:	a37e      	add	r3, pc, #504	@ (adr r3, 800c668 <VCU_TransmitBmsData3+0x228>)
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f7f3 fef0 	bl	8000258 <__aeabi_dsub>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4610      	mov	r0, r2
 800c47e:	4619      	mov	r1, r3
 800c480:	f7f4 fb9a 	bl	8000bb8 <__aeabi_d2f>
 800c484:	4603      	mov	r3, r0
 800c486:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7f4 f845 	bl	8000518 <__aeabi_f2d>
 800c48e:	f04f 0200 	mov.w	r2, #0
 800c492:	4b7a      	ldr	r3, [pc, #488]	@ (800c67c <VCU_TransmitBmsData3+0x23c>)
 800c494:	f7f4 f9c2 	bl	800081c <__aeabi_ddiv>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4610      	mov	r0, r2
 800c49e:	4619      	mov	r1, r3
 800c4a0:	a373      	add	r3, pc, #460	@ (adr r3, 800c670 <VCU_TransmitBmsData3+0x230>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f7f3 fed9 	bl	800025c <__adddf3>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	f7f4 fb81 	bl	8000bb8 <__aeabi_d2f>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800c4ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c2:	ee17 3a90 	vmov	r3, s15
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800c4ca:	4b6b      	ldr	r3, [pc, #428]	@ (800c678 <VCU_TransmitBmsData3+0x238>)
 800c4cc:	8bdb      	ldrh	r3, [r3, #30]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7f4 f810 	bl	80004f4 <__aeabi_i2d>
 800c4d4:	a362      	add	r3, pc, #392	@ (adr r3, 800c660 <VCU_TransmitBmsData3+0x220>)
 800c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4da:	f7f4 f875 	bl	80005c8 <__aeabi_dmul>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	a360      	add	r3, pc, #384	@ (adr r3, 800c668 <VCU_TransmitBmsData3+0x228>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f3 feb4 	bl	8000258 <__aeabi_dsub>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	f7f4 fb5e 	bl	8000bb8 <__aeabi_d2f>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7f4 f809 	bl	8000518 <__aeabi_f2d>
 800c506:	f04f 0200 	mov.w	r2, #0
 800c50a:	4b5c      	ldr	r3, [pc, #368]	@ (800c67c <VCU_TransmitBmsData3+0x23c>)
 800c50c:	f7f4 f986 	bl	800081c <__aeabi_ddiv>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	4610      	mov	r0, r2
 800c516:	4619      	mov	r1, r3
 800c518:	a355      	add	r3, pc, #340	@ (adr r3, 800c670 <VCU_TransmitBmsData3+0x230>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 fe9d 	bl	800025c <__adddf3>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4610      	mov	r0, r2
 800c528:	4619      	mov	r1, r3
 800c52a:	f7f4 fb45 	bl	8000bb8 <__aeabi_d2f>
 800c52e:	4603      	mov	r3, r0
 800c530:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800c532:	edd7 7a02 	vldr	s15, [r7, #8]
 800c536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c53a:	ee17 3a90 	vmov	r3, s15
 800c53e:	b29b      	uxth	r3, r3
 800c540:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800c542:	4b4d      	ldr	r3, [pc, #308]	@ (800c678 <VCU_TransmitBmsData3+0x238>)
 800c544:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800c546:	4618      	mov	r0, r3
 800c548:	f7f3 ffd4 	bl	80004f4 <__aeabi_i2d>
 800c54c:	a344      	add	r3, pc, #272	@ (adr r3, 800c660 <VCU_TransmitBmsData3+0x220>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	f7f4 f839 	bl	80005c8 <__aeabi_dmul>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4610      	mov	r0, r2
 800c55c:	4619      	mov	r1, r3
 800c55e:	a342      	add	r3, pc, #264	@ (adr r3, 800c668 <VCU_TransmitBmsData3+0x228>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f3 fe78 	bl	8000258 <__aeabi_dsub>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4610      	mov	r0, r2
 800c56e:	4619      	mov	r1, r3
 800c570:	f7f4 fb22 	bl	8000bb8 <__aeabi_d2f>
 800c574:	4603      	mov	r3, r0
 800c576:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7f3 ffcd 	bl	8000518 <__aeabi_f2d>
 800c57e:	f04f 0200 	mov.w	r2, #0
 800c582:	4b3e      	ldr	r3, [pc, #248]	@ (800c67c <VCU_TransmitBmsData3+0x23c>)
 800c584:	f7f4 f94a 	bl	800081c <__aeabi_ddiv>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4610      	mov	r0, r2
 800c58e:	4619      	mov	r1, r3
 800c590:	a337      	add	r3, pc, #220	@ (adr r3, 800c670 <VCU_TransmitBmsData3+0x230>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	f7f3 fe61 	bl	800025c <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7f4 fb09 	bl	8000bb8 <__aeabi_d2f>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800c5aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5b2:	ee17 3a90 	vmov	r3, s15
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c5be:	4b30      	ldr	r3, [pc, #192]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c5c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c5ca:	4b2d      	ldr	r3, [pc, #180]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800c5d0:	4b2c      	ldr	r3, [pc, #176]	@ (800c684 <VCU_TransmitBmsData3+0x244>)
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	463b      	mov	r3, r7
 800c5d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c5da:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c5de:	4b26      	ldr	r3, [pc, #152]	@ (800c678 <VCU_TransmitBmsData3+0x238>)
 800c5e0:	895b      	ldrh	r3, [r3, #10]
 800c5e2:	f203 4323 	addw	r3, r3, #1059	@ 0x423
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5ec:	b299      	uxth	r1, r3
 800c5ee:	4a24      	ldr	r2, [pc, #144]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c5f0:	8813      	ldrh	r3, [r2, #0]
 800c5f2:	f361 030a 	bfi	r3, r1, #0, #11
 800c5f6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800c5f8:	4a21      	ldr	r2, [pc, #132]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c5fa:	6813      	ldr	r3, [r2, #0]
 800c5fc:	f36f 23dc 	bfc	r3, #11, #18
 800c600:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c602:	4a1f      	ldr	r2, [pc, #124]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c604:	7913      	ldrb	r3, [r2, #4]
 800c606:	f36f 1386 	bfc	r3, #6, #1
 800c60a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c60c:	4a1c      	ldr	r2, [pc, #112]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c60e:	7913      	ldrb	r3, [r2, #4]
 800c610:	2108      	movs	r1, #8
 800c612:	f361 0303 	bfi	r3, r1, #0, #4
 800c616:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c618:	4a19      	ldr	r2, [pc, #100]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c61a:	7913      	ldrb	r3, [r2, #4]
 800c61c:	f36f 13c7 	bfc	r3, #7, #1
 800c620:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c622:	4a17      	ldr	r2, [pc, #92]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c624:	7913      	ldrb	r3, [r2, #4]
 800c626:	f36f 1304 	bfc	r3, #4, #1
 800c62a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c62c:	4b16      	ldr	r3, [pc, #88]	@ (800c688 <VCU_TransmitBmsData3+0x248>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	f003 0304 	and.w	r3, r3, #4
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00c      	beq.n	800c652 <VCU_TransmitBmsData3+0x212>
 800c638:	4b11      	ldr	r3, [pc, #68]	@ (800c680 <VCU_TransmitBmsData3+0x240>)
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c640:	b29b      	uxth	r3, r3
 800c642:	461a      	mov	r2, r3
 800c644:	4911      	ldr	r1, [pc, #68]	@ (800c68c <VCU_TransmitBmsData3+0x24c>)
 800c646:	4812      	ldr	r0, [pc, #72]	@ (800c690 <VCU_TransmitBmsData3+0x250>)
 800c648:	f007 fbf6 	bl	8013e38 <siprintf>
 800c64c:	4810      	ldr	r0, [pc, #64]	@ (800c690 <VCU_TransmitBmsData3+0x250>)
 800c64e:	f7f8 ffd7 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c652:	2000      	movs	r0, #0
 800c654:	f7ff f80c 	bl	800b670 <VCU_TransmitMessageQueue>
}
 800c658:	bf00      	nop
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	47ae147b 	.word	0x47ae147b
 800c664:	3f847ae1 	.word	0x3f847ae1
 800c668:	cccccccd 	.word	0xcccccccd
 800c66c:	404baccc 	.word	0x404baccc
 800c670:	00000000 	.word	0x00000000
 800c674:	40c11000 	.word	0x40c11000
 800c678:	2000a664 	.word	0x2000a664
 800c67c:	3fa00000 	.word	0x3fa00000
 800c680:	2000a6c4 	.word	0x2000a6c4
 800c684:	2000a6d0 	.word	0x2000a6d0
 800c688:	2000000c 	.word	0x2000000c
 800c68c:	08018de0 	.word	0x08018de0
 800c690:	20000b5c 	.word	0x20000b5c
 800c694:	00000000 	.word	0x00000000

0800c698 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800c69e:	f04f 0300 	mov.w	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c6a4:	f04f 0300 	mov.w	r3, #0
 800c6a8:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800c6aa:	4b83      	ldr	r3, [pc, #524]	@ (800c8b8 <VCU_TransmitBmsData5+0x220>)
 800c6ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f3 ff10 	bl	80004d4 <__aeabi_ui2d>
 800c6b4:	a37c      	add	r3, pc, #496	@ (adr r3, 800c8a8 <VCU_TransmitBmsData5+0x210>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 ff85 	bl	80005c8 <__aeabi_dmul>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	f04f 0200 	mov.w	r2, #0
 800c6ca:	4b7c      	ldr	r3, [pc, #496]	@ (800c8bc <VCU_TransmitBmsData5+0x224>)
 800c6cc:	f7f3 fdc4 	bl	8000258 <__aeabi_dsub>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f7f4 fa6e 	bl	8000bb8 <__aeabi_d2f>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7f3 ff19 	bl	8000518 <__aeabi_f2d>
 800c6e6:	a370      	add	r3, pc, #448	@ (adr r3, 800c8a8 <VCU_TransmitBmsData5+0x210>)
 800c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ec:	f7f4 f896 	bl	800081c <__aeabi_ddiv>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	f04f 0200 	mov.w	r2, #0
 800c6fc:	4b70      	ldr	r3, [pc, #448]	@ (800c8c0 <VCU_TransmitBmsData5+0x228>)
 800c6fe:	f7f3 fdad 	bl	800025c <__adddf3>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4610      	mov	r0, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	f7f4 fa55 	bl	8000bb8 <__aeabi_d2f>
 800c70e:	4603      	mov	r3, r0
 800c710:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800c712:	edd7 7a02 	vldr	s15, [r7, #8]
 800c716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c71a:	ee17 3a90 	vmov	r3, s15
 800c71e:	b29b      	uxth	r3, r3
 800c720:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800c722:	4b65      	ldr	r3, [pc, #404]	@ (800c8b8 <VCU_TransmitBmsData5+0x220>)
 800c724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c726:	4618      	mov	r0, r3
 800c728:	f7f3 fed4 	bl	80004d4 <__aeabi_ui2d>
 800c72c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c8a8 <VCU_TransmitBmsData5+0x210>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f7f3 ff49 	bl	80005c8 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4610      	mov	r0, r2
 800c73c:	4619      	mov	r1, r3
 800c73e:	f04f 0200 	mov.w	r2, #0
 800c742:	4b5e      	ldr	r3, [pc, #376]	@ (800c8bc <VCU_TransmitBmsData5+0x224>)
 800c744:	f7f3 fd88 	bl	8000258 <__aeabi_dsub>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4610      	mov	r0, r2
 800c74e:	4619      	mov	r1, r3
 800c750:	f7f4 fa32 	bl	8000bb8 <__aeabi_d2f>
 800c754:	4603      	mov	r3, r0
 800c756:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7f3 fedd 	bl	8000518 <__aeabi_f2d>
 800c75e:	a352      	add	r3, pc, #328	@ (adr r3, 800c8a8 <VCU_TransmitBmsData5+0x210>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f7f4 f85a 	bl	800081c <__aeabi_ddiv>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4610      	mov	r0, r2
 800c76e:	4619      	mov	r1, r3
 800c770:	f04f 0200 	mov.w	r2, #0
 800c774:	4b52      	ldr	r3, [pc, #328]	@ (800c8c0 <VCU_TransmitBmsData5+0x228>)
 800c776:	f7f3 fd71 	bl	800025c <__adddf3>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4610      	mov	r0, r2
 800c780:	4619      	mov	r1, r3
 800c782:	f7f4 fa19 	bl	8000bb8 <__aeabi_d2f>
 800c786:	4603      	mov	r3, r0
 800c788:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800c78a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c78e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c792:	ee17 3a90 	vmov	r3, s15
 800c796:	b29b      	uxth	r3, r3
 800c798:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800c79a:	4b47      	ldr	r3, [pc, #284]	@ (800c8b8 <VCU_TransmitBmsData5+0x220>)
 800c79c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7f3 fea8 	bl	80004f4 <__aeabi_i2d>
 800c7a4:	a342      	add	r3, pc, #264	@ (adr r3, 800c8b0 <VCU_TransmitBmsData5+0x218>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	f7f3 ff0d 	bl	80005c8 <__aeabi_dmul>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	f04f 0200 	mov.w	r2, #0
 800c7ba:	f04f 0300 	mov.w	r3, #0
 800c7be:	f7f3 fd4d 	bl	800025c <__adddf3>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	f7f4 f9f5 	bl	8000bb8 <__aeabi_d2f>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f7f3 fea0 	bl	8000518 <__aeabi_f2d>
 800c7d8:	a333      	add	r3, pc, #204	@ (adr r3, 800c8a8 <VCU_TransmitBmsData5+0x210>)
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	f7f4 f81d 	bl	800081c <__aeabi_ddiv>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f7f4 f9e5 	bl	8000bb8 <__aeabi_d2f>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800c7f2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c7f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7fa:	ee17 3a90 	vmov	r3, s15
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c806:	4b2f      	ldr	r3, [pc, #188]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c808:	2200      	movs	r2, #0
 800c80a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c80c:	4b2d      	ldr	r3, [pc, #180]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c80e:	2200      	movs	r2, #0
 800c810:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c812:	4b2c      	ldr	r3, [pc, #176]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c814:	2200      	movs	r2, #0
 800c816:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800c818:	4b2b      	ldr	r3, [pc, #172]	@ (800c8c8 <VCU_TransmitBmsData5+0x230>)
 800c81a:	461a      	mov	r2, r3
 800c81c:	463b      	mov	r3, r7
 800c81e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c822:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c826:	4b24      	ldr	r3, [pc, #144]	@ (800c8b8 <VCU_TransmitBmsData5+0x220>)
 800c828:	895b      	ldrh	r3, [r3, #10]
 800c82a:	f203 4325 	addw	r3, r3, #1061	@ 0x425
 800c82e:	b29b      	uxth	r3, r3
 800c830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c834:	b299      	uxth	r1, r3
 800c836:	4a23      	ldr	r2, [pc, #140]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c838:	8813      	ldrh	r3, [r2, #0]
 800c83a:	f361 030a 	bfi	r3, r1, #0, #11
 800c83e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c840:	4a20      	ldr	r2, [pc, #128]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c842:	6813      	ldr	r3, [r2, #0]
 800c844:	f36f 23dc 	bfc	r3, #11, #18
 800c848:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c84a:	4a1e      	ldr	r2, [pc, #120]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c84c:	7913      	ldrb	r3, [r2, #4]
 800c84e:	f36f 1386 	bfc	r3, #6, #1
 800c852:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c854:	4a1b      	ldr	r2, [pc, #108]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c856:	7913      	ldrb	r3, [r2, #4]
 800c858:	2108      	movs	r1, #8
 800c85a:	f361 0303 	bfi	r3, r1, #0, #4
 800c85e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c860:	4a18      	ldr	r2, [pc, #96]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c862:	7913      	ldrb	r3, [r2, #4]
 800c864:	f36f 13c7 	bfc	r3, #7, #1
 800c868:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c86a:	4a16      	ldr	r2, [pc, #88]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c86c:	7913      	ldrb	r3, [r2, #4]
 800c86e:	f36f 1304 	bfc	r3, #4, #1
 800c872:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c874:	4b15      	ldr	r3, [pc, #84]	@ (800c8cc <VCU_TransmitBmsData5+0x234>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00c      	beq.n	800c89a <VCU_TransmitBmsData5+0x202>
 800c880:	4b10      	ldr	r3, [pc, #64]	@ (800c8c4 <VCU_TransmitBmsData5+0x22c>)
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c888:	b29b      	uxth	r3, r3
 800c88a:	461a      	mov	r2, r3
 800c88c:	4910      	ldr	r1, [pc, #64]	@ (800c8d0 <VCU_TransmitBmsData5+0x238>)
 800c88e:	4811      	ldr	r0, [pc, #68]	@ (800c8d4 <VCU_TransmitBmsData5+0x23c>)
 800c890:	f007 fad2 	bl	8013e38 <siprintf>
 800c894:	480f      	ldr	r0, [pc, #60]	@ (800c8d4 <VCU_TransmitBmsData5+0x23c>)
 800c896:	f7f8 feb3 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c89a:	2000      	movs	r0, #0
 800c89c:	f7fe fee8 	bl	800b670 <VCU_TransmitMessageQueue>
}
 800c8a0:	bf00      	nop
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	9999999a 	.word	0x9999999a
 800c8ac:	3fa99999 	.word	0x3fa99999
 800c8b0:	eb851eb8 	.word	0xeb851eb8
 800c8b4:	3f8eb851 	.word	0x3f8eb851
 800c8b8:	2000a664 	.word	0x2000a664
 800c8bc:	40990000 	.word	0x40990000
 800c8c0:	40df4000 	.word	0x40df4000
 800c8c4:	2000a6c4 	.word	0x2000a6c4
 800c8c8:	2000a6d0 	.word	0x2000a6d0
 800c8cc:	2000000c 	.word	0x2000000c
 800c8d0:	08018dfc 	.word	0x08018dfc
 800c8d4:	20000b5c 	.word	0x20000b5c

0800c8d8 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800c8e6:	4b2d      	ldr	r3, [pc, #180]	@ (800c99c <VCU_TransmitBmsData8+0xc4>)
 800c8e8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c8ec:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800c8f2:	4b2a      	ldr	r3, [pc, #168]	@ (800c99c <VCU_TransmitBmsData8+0xc4>)
 800c8f4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c8f8:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c8fa:	4b29      	ldr	r3, [pc, #164]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c900:	4b27      	ldr	r3, [pc, #156]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c902:	2200      	movs	r2, #0
 800c904:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c906:	4b26      	ldr	r3, [pc, #152]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c908:	2200      	movs	r2, #0
 800c90a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800c90c:	4b25      	ldr	r3, [pc, #148]	@ (800c9a4 <VCU_TransmitBmsData8+0xcc>)
 800c90e:	461a      	mov	r2, r3
 800c910:	463b      	mov	r3, r7
 800c912:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c916:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c91a:	4b20      	ldr	r3, [pc, #128]	@ (800c99c <VCU_TransmitBmsData8+0xc4>)
 800c91c:	895b      	ldrh	r3, [r3, #10]
 800c91e:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800c922:	b29b      	uxth	r3, r3
 800c924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c928:	b299      	uxth	r1, r3
 800c92a:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c92c:	8813      	ldrh	r3, [r2, #0]
 800c92e:	f361 030a 	bfi	r3, r1, #0, #11
 800c932:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c934:	4a1a      	ldr	r2, [pc, #104]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c936:	6813      	ldr	r3, [r2, #0]
 800c938:	f36f 23dc 	bfc	r3, #11, #18
 800c93c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c93e:	4a18      	ldr	r2, [pc, #96]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c940:	7913      	ldrb	r3, [r2, #4]
 800c942:	f36f 1386 	bfc	r3, #6, #1
 800c946:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c948:	4a15      	ldr	r2, [pc, #84]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c94a:	7913      	ldrb	r3, [r2, #4]
 800c94c:	2108      	movs	r1, #8
 800c94e:	f361 0303 	bfi	r3, r1, #0, #4
 800c952:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c954:	4a12      	ldr	r2, [pc, #72]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c956:	7913      	ldrb	r3, [r2, #4]
 800c958:	f36f 13c7 	bfc	r3, #7, #1
 800c95c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c95e:	4a10      	ldr	r2, [pc, #64]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c960:	7913      	ldrb	r3, [r2, #4]
 800c962:	f36f 1304 	bfc	r3, #4, #1
 800c966:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c968:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a8 <VCU_TransmitBmsData8+0xd0>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00c      	beq.n	800c98e <VCU_TransmitBmsData8+0xb6>
 800c974:	4b0a      	ldr	r3, [pc, #40]	@ (800c9a0 <VCU_TransmitBmsData8+0xc8>)
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	461a      	mov	r2, r3
 800c980:	490a      	ldr	r1, [pc, #40]	@ (800c9ac <VCU_TransmitBmsData8+0xd4>)
 800c982:	480b      	ldr	r0, [pc, #44]	@ (800c9b0 <VCU_TransmitBmsData8+0xd8>)
 800c984:	f007 fa58 	bl	8013e38 <siprintf>
 800c988:	4809      	ldr	r0, [pc, #36]	@ (800c9b0 <VCU_TransmitBmsData8+0xd8>)
 800c98a:	f7f8 fe39 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c98e:	2000      	movs	r0, #0
 800c990:	f7fe fe6e 	bl	800b670 <VCU_TransmitMessageQueue>
}
 800c994:	bf00      	nop
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	2000a664 	.word	0x2000a664
 800c9a0:	2000a6c4 	.word	0x2000a6c4
 800c9a4:	2000a6d0 	.word	0x2000a6d0
 800c9a8:	2000000c 	.word	0x2000000c
 800c9ac:	08018e18 	.word	0x08018e18
 800c9b0:	20000b5c 	.word	0x20000b5c

0800c9b4 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800c9be:	2300      	movs	r3, #0
 800c9c0:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800c9c2:	4b2d      	ldr	r3, [pc, #180]	@ (800ca78 <VCU_TransmitBmsData9+0xc4>)
 800c9c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9c8:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800c9ce:	4b2a      	ldr	r3, [pc, #168]	@ (800ca78 <VCU_TransmitBmsData9+0xc4>)
 800c9d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c9d4:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c9d6:	4b29      	ldr	r3, [pc, #164]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c9dc:	4b27      	ldr	r3, [pc, #156]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c9e2:	4b26      	ldr	r3, [pc, #152]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800c9e8:	4b25      	ldr	r3, [pc, #148]	@ (800ca80 <VCU_TransmitBmsData9+0xcc>)
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	463b      	mov	r3, r7
 800c9ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c9f2:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c9f6:	4b20      	ldr	r3, [pc, #128]	@ (800ca78 <VCU_TransmitBmsData9+0xc4>)
 800c9f8:	895b      	ldrh	r3, [r3, #10]
 800c9fa:	f203 4329 	addw	r3, r3, #1065	@ 0x429
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca04:	b299      	uxth	r1, r3
 800ca06:	4a1d      	ldr	r2, [pc, #116]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca08:	8813      	ldrh	r3, [r2, #0]
 800ca0a:	f361 030a 	bfi	r3, r1, #0, #11
 800ca0e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ca10:	4a1a      	ldr	r2, [pc, #104]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca12:	6813      	ldr	r3, [r2, #0]
 800ca14:	f36f 23dc 	bfc	r3, #11, #18
 800ca18:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ca1a:	4a18      	ldr	r2, [pc, #96]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca1c:	7913      	ldrb	r3, [r2, #4]
 800ca1e:	f36f 1386 	bfc	r3, #6, #1
 800ca22:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ca24:	4a15      	ldr	r2, [pc, #84]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca26:	7913      	ldrb	r3, [r2, #4]
 800ca28:	2108      	movs	r1, #8
 800ca2a:	f361 0303 	bfi	r3, r1, #0, #4
 800ca2e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ca30:	4a12      	ldr	r2, [pc, #72]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca32:	7913      	ldrb	r3, [r2, #4]
 800ca34:	f36f 13c7 	bfc	r3, #7, #1
 800ca38:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ca3a:	4a10      	ldr	r2, [pc, #64]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca3c:	7913      	ldrb	r3, [r2, #4]
 800ca3e:	f36f 1304 	bfc	r3, #4, #1
 800ca42:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ca44:	4b0f      	ldr	r3, [pc, #60]	@ (800ca84 <VCU_TransmitBmsData9+0xd0>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00c      	beq.n	800ca6a <VCU_TransmitBmsData9+0xb6>
 800ca50:	4b0a      	ldr	r3, [pc, #40]	@ (800ca7c <VCU_TransmitBmsData9+0xc8>)
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	490a      	ldr	r1, [pc, #40]	@ (800ca88 <VCU_TransmitBmsData9+0xd4>)
 800ca5e:	480b      	ldr	r0, [pc, #44]	@ (800ca8c <VCU_TransmitBmsData9+0xd8>)
 800ca60:	f007 f9ea 	bl	8013e38 <siprintf>
 800ca64:	4809      	ldr	r0, [pc, #36]	@ (800ca8c <VCU_TransmitBmsData9+0xd8>)
 800ca66:	f7f8 fdcb 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	f7fe fe00 	bl	800b670 <VCU_TransmitMessageQueue>

}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	2000a664 	.word	0x2000a664
 800ca7c:	2000a6c4 	.word	0x2000a6c4
 800ca80:	2000a6d0 	.word	0x2000a6d0
 800ca84:	2000000c 	.word	0x2000000c
 800ca88:	08018e34 	.word	0x08018e34
 800ca8c:	20000b5c 	.word	0x20000b5c

0800ca90 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800ca9e:	2300      	movs	r3, #0
 800caa0:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800caa2:	4b28      	ldr	r3, [pc, #160]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800caa8:	4b26      	ldr	r3, [pc, #152]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800caaa:	2200      	movs	r2, #0
 800caac:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800caae:	4b25      	ldr	r3, [pc, #148]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800cab4:	4b24      	ldr	r3, [pc, #144]	@ (800cb48 <VCU_TransmitBmsData10+0xb8>)
 800cab6:	461a      	mov	r2, r3
 800cab8:	463b      	mov	r3, r7
 800caba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cabe:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cac2:	4b22      	ldr	r3, [pc, #136]	@ (800cb4c <VCU_TransmitBmsData10+0xbc>)
 800cac4:	895b      	ldrh	r3, [r3, #10]
 800cac6:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 800caca:	b29b      	uxth	r3, r3
 800cacc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cad0:	b299      	uxth	r1, r3
 800cad2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cad4:	8813      	ldrh	r3, [r2, #0]
 800cad6:	f361 030a 	bfi	r3, r1, #0, #11
 800cada:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cadc:	4a19      	ldr	r2, [pc, #100]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cade:	6813      	ldr	r3, [r2, #0]
 800cae0:	f36f 23dc 	bfc	r3, #11, #18
 800cae4:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cae6:	4a17      	ldr	r2, [pc, #92]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cae8:	7913      	ldrb	r3, [r2, #4]
 800caea:	f36f 1386 	bfc	r3, #6, #1
 800caee:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800caf0:	4a14      	ldr	r2, [pc, #80]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800caf2:	7913      	ldrb	r3, [r2, #4]
 800caf4:	2108      	movs	r1, #8
 800caf6:	f361 0303 	bfi	r3, r1, #0, #4
 800cafa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cafc:	4a11      	ldr	r2, [pc, #68]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cafe:	7913      	ldrb	r3, [r2, #4]
 800cb00:	f36f 13c7 	bfc	r3, #7, #1
 800cb04:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cb06:	4a0f      	ldr	r2, [pc, #60]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cb08:	7913      	ldrb	r3, [r2, #4]
 800cb0a:	f36f 1304 	bfc	r3, #4, #1
 800cb0e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cb10:	4b0f      	ldr	r3, [pc, #60]	@ (800cb50 <VCU_TransmitBmsData10+0xc0>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	f003 0304 	and.w	r3, r3, #4
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00c      	beq.n	800cb36 <VCU_TransmitBmsData10+0xa6>
 800cb1c:	4b09      	ldr	r3, [pc, #36]	@ (800cb44 <VCU_TransmitBmsData10+0xb4>)
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	461a      	mov	r2, r3
 800cb28:	490a      	ldr	r1, [pc, #40]	@ (800cb54 <VCU_TransmitBmsData10+0xc4>)
 800cb2a:	480b      	ldr	r0, [pc, #44]	@ (800cb58 <VCU_TransmitBmsData10+0xc8>)
 800cb2c:	f007 f984 	bl	8013e38 <siprintf>
 800cb30:	4809      	ldr	r0, [pc, #36]	@ (800cb58 <VCU_TransmitBmsData10+0xc8>)
 800cb32:	f7f8 fd65 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cb36:	2000      	movs	r0, #0
 800cb38:	f7fe fd9a 	bl	800b670 <VCU_TransmitMessageQueue>

}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	2000a6c4 	.word	0x2000a6c4
 800cb48:	2000a6d0 	.word	0x2000a6d0
 800cb4c:	2000a664 	.word	0x2000a664
 800cb50:	2000000c 	.word	0x2000000c
 800cb54:	08018e50 	.word	0x08018e50
 800cb58:	20000b5c 	.word	0x20000b5c

0800cb5c <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cb62:	4b84      	ldr	r3, [pc, #528]	@ (800cd74 <VCU_TransmitModuleState+0x218>)
 800cb64:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fd fdeb 	bl	800a744 <MCU_ModuleIndexFromId>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cb72:	4b80      	ldr	r3, [pc, #512]	@ (800cd74 <VCU_TransmitModuleState+0x218>)
 800cb74:	7d1b      	ldrb	r3, [r3, #20]
 800cb76:	7bfa      	ldrb	r2, [r7, #15]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	f000 80f7 	beq.w	800cd6c <VCU_TransmitModuleState+0x210>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleState.module_id                   = pack.dmcModuleId;
 800cb7e:	4b7d      	ldr	r3, [pc, #500]	@ (800cd74 <VCU_TransmitModuleState+0x218>)
 800cb80:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cb84:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	4a7b      	ldr	r2, [pc, #492]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cb8a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cb8e:	fb01 f303 	mul.w	r3, r1, r3
 800cb92:	4413      	add	r3, r2
 800cb94:	332b      	adds	r3, #43	@ 0x2b
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	4a76      	ldr	r2, [pc, #472]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cb9e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cba2:	fb01 f303 	mul.w	r3, r1, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	3327      	adds	r3, #39	@ 0x27
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	f003 0303 	and.w	r3, r3, #3
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	797b      	ldrb	r3, [r7, #5]
 800cbb4:	f362 0301 	bfi	r3, r2, #0, #2
 800cbb8:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
 800cbbc:	4a6e      	ldr	r2, [pc, #440]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cbbe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cbc2:	fb01 f303 	mul.w	r3, r1, r3
 800cbc6:	4413      	add	r3, r2
 800cbc8:	3326      	adds	r3, #38	@ 0x26
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	79bb      	ldrb	r3, [r7, #6]
 800cbd4:	f362 0383 	bfi	r3, r2, #2, #2
 800cbd8:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	4a66      	ldr	r2, [pc, #408]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cbde:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cbe2:	fb01 f303 	mul.w	r3, r1, r3
 800cbe6:	4413      	add	r3, r2
 800cbe8:	332c      	adds	r3, #44	@ 0x2c
 800cbea:	781a      	ldrb	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f362 2391 	bfi	r3, r2, #10, #8
 800cbf2:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	4a60      	ldr	r2, [pc, #384]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cbf8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cbfc:	fb01 f303 	mul.w	r3, r1, r3
 800cc00:	4413      	add	r3, r2
 800cc02:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800cc06:	789b      	ldrb	r3, [r3, #2]
 800cc08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	b25a      	sxtb	r2, r3
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4959      	ldr	r1, [pc, #356]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cc14:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800cc18:	fb00 f303 	mul.w	r3, r0, r3
 800cc1c:	440b      	add	r3, r1
 800cc1e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800cc22:	789b      	ldrb	r3, [r3, #2]
 800cc24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	b25b      	sxtb	r3, r3
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	b25a      	sxtb	r2, r3
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	4950      	ldr	r1, [pc, #320]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cc36:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800cc3a:	fb00 f303 	mul.w	r3, r0, r3
 800cc3e:	440b      	add	r3, r1
 800cc40:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800cc44:	789b      	ldrb	r3, [r3, #2]
 800cc46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	4313      	orrs	r3, r2
 800cc52:	b25a      	sxtb	r2, r3
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	4948      	ldr	r1, [pc, #288]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cc58:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800cc5c:	fb00 f303 	mul.w	r3, r0, r3
 800cc60:	440b      	add	r3, r1
 800cc62:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800cc66:	789b      	ldrb	r3, [r3, #2]
 800cc68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	b25b      	sxtb	r3, r3
 800cc72:	4313      	orrs	r3, r2
 800cc74:	b25a      	sxtb	r2, r3
 800cc76:	7bfb      	ldrb	r3, [r7, #15]
 800cc78:	493f      	ldr	r1, [pc, #252]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800cc7a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800cc7e:	fb00 f303 	mul.w	r3, r0, r3
 800cc82:	440b      	add	r3, r1
 800cc84:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800cc88:	789b      	ldrb	r3, [r3, #2]
 800cc8a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	b25b      	sxtb	r3, r3
 800cc94:	4313      	orrs	r3, r2
 800cc96:	b25b      	sxtb	r3, r3
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	88fb      	ldrh	r3, [r7, #6]
 800cc9c:	f362 138d 	bfi	r3, r2, #6, #8
 800cca0:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800cca2:	79bb      	ldrb	r3, [r7, #6]
 800cca4:	f36f 1345 	bfc	r3, #5, #1
 800cca8:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800ccaa:	79bb      	ldrb	r3, [r7, #6]
 800ccac:	f36f 1304 	bfc	r3, #4, #1
 800ccb0:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800ccb2:	4b30      	ldr	r3, [pc, #192]	@ (800cd74 <VCU_TransmitModuleState+0x218>)
 800ccb4:	7d1b      	ldrb	r3, [r3, #20]
 800ccb6:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800ccb8:	4b2e      	ldr	r3, [pc, #184]	@ (800cd74 <VCU_TransmitModuleState+0x218>)
 800ccba:	7ddb      	ldrb	r3, [r3, #23]
 800ccbc:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	4a2d      	ldr	r2, [pc, #180]	@ (800cd78 <VCU_TransmitModuleState+0x21c>)
 800ccc2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ccc6:	fb01 f303 	mul.w	r3, r1, r3
 800ccca:	4413      	add	r3, r2
 800cccc:	332d      	adds	r3, #45	@ 0x2d
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	72fb      	strb	r3, [r7, #11]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800ccd2:	4b2a      	ldr	r3, [pc, #168]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800ccd8:	4b28      	ldr	r3, [pc, #160]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800ccde:	4b27      	ldr	r3, [pc, #156]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800cce4:	4b26      	ldr	r3, [pc, #152]	@ (800cd80 <VCU_TransmitModuleState+0x224>)
 800cce6:	461a      	mov	r2, r3
 800cce8:	1d3b      	adds	r3, r7, #4
 800ccea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ccee:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ccf2:	4b20      	ldr	r3, [pc, #128]	@ (800cd74 <VCU_TransmitModuleState+0x218>)
 800ccf4:	895b      	ldrh	r3, [r3, #10]
 800ccf6:	f203 4311 	addw	r3, r3, #1041	@ 0x411
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd00:	b299      	uxth	r1, r3
 800cd02:	4a1e      	ldr	r2, [pc, #120]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd04:	8813      	ldrh	r3, [r2, #0]
 800cd06:	f361 030a 	bfi	r3, r1, #0, #11
 800cd0a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cd0c:	4a1b      	ldr	r2, [pc, #108]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd0e:	6813      	ldr	r3, [r2, #0]
 800cd10:	f36f 23dc 	bfc	r3, #11, #18
 800cd14:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cd16:	4a19      	ldr	r2, [pc, #100]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd18:	7913      	ldrb	r3, [r2, #4]
 800cd1a:	f36f 1386 	bfc	r3, #6, #1
 800cd1e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cd20:	4a16      	ldr	r2, [pc, #88]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd22:	7913      	ldrb	r3, [r2, #4]
 800cd24:	2108      	movs	r1, #8
 800cd26:	f361 0303 	bfi	r3, r1, #0, #4
 800cd2a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cd2c:	4a13      	ldr	r2, [pc, #76]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd2e:	7913      	ldrb	r3, [r2, #4]
 800cd30:	f36f 13c7 	bfc	r3, #7, #1
 800cd34:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cd36:	4a11      	ldr	r2, [pc, #68]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd38:	7913      	ldrb	r3, [r2, #4]
 800cd3a:	f36f 1304 	bfc	r3, #4, #1
 800cd3e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cd40:	4b10      	ldr	r3, [pc, #64]	@ (800cd84 <VCU_TransmitModuleState+0x228>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00c      	beq.n	800cd66 <VCU_TransmitModuleState+0x20a>
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd7c <VCU_TransmitModuleState+0x220>)
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	461a      	mov	r2, r3
 800cd58:	490b      	ldr	r1, [pc, #44]	@ (800cd88 <VCU_TransmitModuleState+0x22c>)
 800cd5a:	480c      	ldr	r0, [pc, #48]	@ (800cd8c <VCU_TransmitModuleState+0x230>)
 800cd5c:	f007 f86c 	bl	8013e38 <siprintf>
 800cd60:	480a      	ldr	r0, [pc, #40]	@ (800cd8c <VCU_TransmitModuleState+0x230>)
 800cd62:	f7f8 fc4d 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cd66:	2000      	movs	r0, #0
 800cd68:	f7fe fc82 	bl	800b670 <VCU_TransmitMessageQueue>
  }
}
 800cd6c:	bf00      	nop
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	2000a664 	.word	0x2000a664
 800cd78:	20000de4 	.word	0x20000de4
 800cd7c:	2000a6c4 	.word	0x2000a6c4
 800cd80:	2000a6d0 	.word	0x2000a6d0
 800cd84:	2000000c 	.word	0x2000000c
 800cd88:	08018e6c 	.word	0x08018e6c
 800cd8c:	20000b5c 	.word	0x20000b5c

0800cd90 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cd96:	4b3d      	ldr	r3, [pc, #244]	@ (800ce8c <VCU_TransmitModulePower+0xfc>)
 800cd98:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fd fcd1 	bl	800a744 <MCU_ModuleIndexFromId>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cda6:	4b39      	ldr	r3, [pc, #228]	@ (800ce8c <VCU_TransmitModulePower+0xfc>)
 800cda8:	7d1b      	ldrb	r3, [r3, #20]
 800cdaa:	7bfa      	ldrb	r2, [r7, #15]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d069      	beq.n	800ce84 <VCU_TransmitModulePower+0xf4>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    modulePower.module_id       = pack.dmcModuleId;
 800cdb0:	4b36      	ldr	r3, [pc, #216]	@ (800ce8c <VCU_TransmitModulePower+0xfc>)
 800cdb2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cdb6:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	4a35      	ldr	r2, [pc, #212]	@ (800ce90 <VCU_TransmitModulePower+0x100>)
 800cdbc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cdc0:	fb01 f303 	mul.w	r3, r1, r3
 800cdc4:	4413      	add	r3, r2
 800cdc6:	3316      	adds	r3, #22
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
 800cdce:	4a30      	ldr	r2, [pc, #192]	@ (800ce90 <VCU_TransmitModulePower+0x100>)
 800cdd0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cdd4:	fb01 f303 	mul.w	r3, r1, r3
 800cdd8:	4413      	add	r3, r2
 800cdda:	3314      	adds	r3, #20
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	813b      	strh	r3, [r7, #8]
 800cde6:	2300      	movs	r3, #0
 800cde8:	72bb      	strb	r3, [r7, #10]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cdea:	4b2a      	ldr	r3, [pc, #168]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cdf0:	4b28      	ldr	r3, [pc, #160]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cdf6:	4b27      	ldr	r3, [pc, #156]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800cdfc:	4b26      	ldr	r3, [pc, #152]	@ (800ce98 <VCU_TransmitModulePower+0x108>)
 800cdfe:	461c      	mov	r4, r3
 800ce00:	463b      	mov	r3, r7
 800ce02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce06:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ce0a:	4b20      	ldr	r3, [pc, #128]	@ (800ce8c <VCU_TransmitModulePower+0xfc>)
 800ce0c:	895b      	ldrh	r3, [r3, #10]
 800ce0e:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce18:	b299      	uxth	r1, r3
 800ce1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce1c:	8813      	ldrh	r3, [r2, #0]
 800ce1e:	f361 030a 	bfi	r3, r1, #0, #11
 800ce22:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ce24:	4a1b      	ldr	r2, [pc, #108]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce26:	6813      	ldr	r3, [r2, #0]
 800ce28:	f36f 23dc 	bfc	r3, #11, #18
 800ce2c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ce2e:	4a19      	ldr	r2, [pc, #100]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce30:	7913      	ldrb	r3, [r2, #4]
 800ce32:	f36f 1386 	bfc	r3, #6, #1
 800ce36:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ce38:	4a16      	ldr	r2, [pc, #88]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce3a:	7913      	ldrb	r3, [r2, #4]
 800ce3c:	2108      	movs	r1, #8
 800ce3e:	f361 0303 	bfi	r3, r1, #0, #4
 800ce42:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ce44:	4a13      	ldr	r2, [pc, #76]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce46:	7913      	ldrb	r3, [r2, #4]
 800ce48:	f36f 13c7 	bfc	r3, #7, #1
 800ce4c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ce4e:	4a11      	ldr	r2, [pc, #68]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce50:	7913      	ldrb	r3, [r2, #4]
 800ce52:	f36f 1304 	bfc	r3, #4, #1
 800ce56:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ce58:	4b10      	ldr	r3, [pc, #64]	@ (800ce9c <VCU_TransmitModulePower+0x10c>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	f003 0304 	and.w	r3, r3, #4
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00c      	beq.n	800ce7e <VCU_TransmitModulePower+0xee>
 800ce64:	4b0b      	ldr	r3, [pc, #44]	@ (800ce94 <VCU_TransmitModulePower+0x104>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	461a      	mov	r2, r3
 800ce70:	490b      	ldr	r1, [pc, #44]	@ (800cea0 <VCU_TransmitModulePower+0x110>)
 800ce72:	480c      	ldr	r0, [pc, #48]	@ (800cea4 <VCU_TransmitModulePower+0x114>)
 800ce74:	f006 ffe0 	bl	8013e38 <siprintf>
 800ce78:	480a      	ldr	r0, [pc, #40]	@ (800cea4 <VCU_TransmitModulePower+0x114>)
 800ce7a:	f7f8 fbc1 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ce7e:	2000      	movs	r0, #0
 800ce80:	f7fe fbf6 	bl	800b670 <VCU_TransmitMessageQueue>
  }
}
 800ce84:	bf00      	nop
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}
 800ce8c:	2000a664 	.word	0x2000a664
 800ce90:	20000de4 	.word	0x20000de4
 800ce94:	2000a6c4 	.word	0x2000a6c4
 800ce98:	2000a6d0 	.word	0x2000a6d0
 800ce9c:	2000000c 	.word	0x2000000c
 800cea0:	08018e88 	.word	0x08018e88
 800cea4:	20000b5c 	.word	0x20000b5c

0800cea8 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800cea8:	b590      	push	{r4, r7, lr}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800ceae:	4b41      	ldr	r3, [pc, #260]	@ (800cfb4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800ceb0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fd fc45 	bl	800a744 <MCU_ModuleIndexFromId>
 800ceba:	4603      	mov	r3, r0
 800cebc:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cebe:	4b3d      	ldr	r3, [pc, #244]	@ (800cfb4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800cec0:	7d1b      	ldrb	r3, [r3, #20]
 800cec2:	7bfa      	ldrb	r2, [r7, #15]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d071      	beq.n	800cfac <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800cec8:	4b3a      	ldr	r3, [pc, #232]	@ (800cfb4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800ceca:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cece:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	4a39      	ldr	r2, [pc, #228]	@ (800cfb8 <VCU_TransmitModuleCellVoltage+0x110>)
 800ced4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ced8:	fb01 f303 	mul.w	r3, r1, r3
 800cedc:	4413      	add	r3, r2
 800cede:	3322      	adds	r3, #34	@ 0x22
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
 800cee6:	4a34      	ldr	r2, [pc, #208]	@ (800cfb8 <VCU_TransmitModuleCellVoltage+0x110>)
 800cee8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ceec:	fb01 f303 	mul.w	r3, r1, r3
 800cef0:	4413      	add	r3, r2
 800cef2:	331e      	adds	r3, #30
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
 800cefc:	4a2e      	ldr	r2, [pc, #184]	@ (800cfb8 <VCU_TransmitModuleCellVoltage+0x110>)
 800cefe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800cf02:	fb01 f303 	mul.w	r3, r1, r3
 800cf06:	4413      	add	r3, r2
 800cf08:	3320      	adds	r3, #32
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cf12:	4b2a      	ldr	r3, [pc, #168]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cf18:	4b28      	ldr	r3, [pc, #160]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cf1e:	4b27      	ldr	r3, [pc, #156]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800cf24:	4b26      	ldr	r3, [pc, #152]	@ (800cfc0 <VCU_TransmitModuleCellVoltage+0x118>)
 800cf26:	461c      	mov	r4, r3
 800cf28:	463b      	mov	r3, r7
 800cf2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cf32:	4b20      	ldr	r3, [pc, #128]	@ (800cfb4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800cf34:	895b      	ldrh	r3, [r3, #10]
 800cf36:	f203 4313 	addw	r3, r3, #1043	@ 0x413
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf40:	b299      	uxth	r1, r3
 800cf42:	4a1e      	ldr	r2, [pc, #120]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf44:	8813      	ldrh	r3, [r2, #0]
 800cf46:	f361 030a 	bfi	r3, r1, #0, #11
 800cf4a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cf4c:	4a1b      	ldr	r2, [pc, #108]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf4e:	6813      	ldr	r3, [r2, #0]
 800cf50:	f36f 23dc 	bfc	r3, #11, #18
 800cf54:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cf56:	4a19      	ldr	r2, [pc, #100]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf58:	7913      	ldrb	r3, [r2, #4]
 800cf5a:	f36f 1386 	bfc	r3, #6, #1
 800cf5e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cf60:	4a16      	ldr	r2, [pc, #88]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf62:	7913      	ldrb	r3, [r2, #4]
 800cf64:	2108      	movs	r1, #8
 800cf66:	f361 0303 	bfi	r3, r1, #0, #4
 800cf6a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cf6c:	4a13      	ldr	r2, [pc, #76]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf6e:	7913      	ldrb	r3, [r2, #4]
 800cf70:	f36f 13c7 	bfc	r3, #7, #1
 800cf74:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cf76:	4a11      	ldr	r2, [pc, #68]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf78:	7913      	ldrb	r3, [r2, #4]
 800cf7a:	f36f 1304 	bfc	r3, #4, #1
 800cf7e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cf80:	4b10      	ldr	r3, [pc, #64]	@ (800cfc4 <VCU_TransmitModuleCellVoltage+0x11c>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f003 0304 	and.w	r3, r3, #4
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00c      	beq.n	800cfa6 <VCU_TransmitModuleCellVoltage+0xfe>
 800cf8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cfbc <VCU_TransmitModuleCellVoltage+0x114>)
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	461a      	mov	r2, r3
 800cf98:	490b      	ldr	r1, [pc, #44]	@ (800cfc8 <VCU_TransmitModuleCellVoltage+0x120>)
 800cf9a:	480c      	ldr	r0, [pc, #48]	@ (800cfcc <VCU_TransmitModuleCellVoltage+0x124>)
 800cf9c:	f006 ff4c 	bl	8013e38 <siprintf>
 800cfa0:	480a      	ldr	r0, [pc, #40]	@ (800cfcc <VCU_TransmitModuleCellVoltage+0x124>)
 800cfa2:	f7f8 fb2d 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	f7fe fb62 	bl	800b670 <VCU_TransmitMessageQueue>
  }
}
 800cfac:	bf00      	nop
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}
 800cfb4:	2000a664 	.word	0x2000a664
 800cfb8:	20000de4 	.word	0x20000de4
 800cfbc:	2000a6c4 	.word	0x2000a6c4
 800cfc0:	2000a6d0 	.word	0x2000a6d0
 800cfc4:	2000000c 	.word	0x2000000c
 800cfc8:	08018ea4 	.word	0x08018ea4
 800cfcc:	20000b5c 	.word	0x20000b5c

0800cfd0 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cfd6:	4b41      	ldr	r3, [pc, #260]	@ (800d0dc <VCU_TransmitModuleCellTemp+0x10c>)
 800cfd8:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fd fbb1 	bl	800a744 <MCU_ModuleIndexFromId>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cfe6:	4b3d      	ldr	r3, [pc, #244]	@ (800d0dc <VCU_TransmitModuleCellTemp+0x10c>)
 800cfe8:	7d1b      	ldrb	r3, [r3, #20]
 800cfea:	7bfa      	ldrb	r2, [r7, #15]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d071      	beq.n	800d0d4 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800cff0:	4b3a      	ldr	r3, [pc, #232]	@ (800d0dc <VCU_TransmitModuleCellTemp+0x10c>)
 800cff2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cff6:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
 800cffa:	4a39      	ldr	r2, [pc, #228]	@ (800d0e0 <VCU_TransmitModuleCellTemp+0x110>)
 800cffc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d000:	fb01 f303 	mul.w	r3, r1, r3
 800d004:	4413      	add	r3, r2
 800d006:	331c      	adds	r3, #28
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	4a34      	ldr	r2, [pc, #208]	@ (800d0e0 <VCU_TransmitModuleCellTemp+0x110>)
 800d010:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d014:	fb01 f303 	mul.w	r3, r1, r3
 800d018:	4413      	add	r3, r2
 800d01a:	3318      	adds	r3, #24
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800d022:	7bfb      	ldrb	r3, [r7, #15]
 800d024:	4a2e      	ldr	r2, [pc, #184]	@ (800d0e0 <VCU_TransmitModuleCellTemp+0x110>)
 800d026:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d02a:	fb01 f303 	mul.w	r3, r1, r3
 800d02e:	4413      	add	r3, r2
 800d030:	331a      	adds	r3, #26
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d03a:	4b2a      	ldr	r3, [pc, #168]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d040:	4b28      	ldr	r3, [pc, #160]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d042:	2200      	movs	r2, #0
 800d044:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d046:	4b27      	ldr	r3, [pc, #156]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d048:	2200      	movs	r2, #0
 800d04a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800d04c:	4b26      	ldr	r3, [pc, #152]	@ (800d0e8 <VCU_TransmitModuleCellTemp+0x118>)
 800d04e:	461c      	mov	r4, r3
 800d050:	463b      	mov	r3, r7
 800d052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d056:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d05a:	4b20      	ldr	r3, [pc, #128]	@ (800d0dc <VCU_TransmitModuleCellTemp+0x10c>)
 800d05c:	895b      	ldrh	r3, [r3, #10]
 800d05e:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800d062:	b29b      	uxth	r3, r3
 800d064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d068:	b299      	uxth	r1, r3
 800d06a:	4a1e      	ldr	r2, [pc, #120]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d06c:	8813      	ldrh	r3, [r2, #0]
 800d06e:	f361 030a 	bfi	r3, r1, #0, #11
 800d072:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d074:	4a1b      	ldr	r2, [pc, #108]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d076:	6813      	ldr	r3, [r2, #0]
 800d078:	f36f 23dc 	bfc	r3, #11, #18
 800d07c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d07e:	4a19      	ldr	r2, [pc, #100]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d080:	7913      	ldrb	r3, [r2, #4]
 800d082:	f36f 1386 	bfc	r3, #6, #1
 800d086:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d088:	4a16      	ldr	r2, [pc, #88]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d08a:	7913      	ldrb	r3, [r2, #4]
 800d08c:	2108      	movs	r1, #8
 800d08e:	f361 0303 	bfi	r3, r1, #0, #4
 800d092:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d094:	4a13      	ldr	r2, [pc, #76]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d096:	7913      	ldrb	r3, [r2, #4]
 800d098:	f36f 13c7 	bfc	r3, #7, #1
 800d09c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d09e:	4a11      	ldr	r2, [pc, #68]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d0a0:	7913      	ldrb	r3, [r2, #4]
 800d0a2:	f36f 1304 	bfc	r3, #4, #1
 800d0a6:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d0a8:	4b10      	ldr	r3, [pc, #64]	@ (800d0ec <VCU_TransmitModuleCellTemp+0x11c>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	f003 0304 	and.w	r3, r3, #4
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00c      	beq.n	800d0ce <VCU_TransmitModuleCellTemp+0xfe>
 800d0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e4 <VCU_TransmitModuleCellTemp+0x114>)
 800d0b6:	881b      	ldrh	r3, [r3, #0]
 800d0b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	461a      	mov	r2, r3
 800d0c0:	490b      	ldr	r1, [pc, #44]	@ (800d0f0 <VCU_TransmitModuleCellTemp+0x120>)
 800d0c2:	480c      	ldr	r0, [pc, #48]	@ (800d0f4 <VCU_TransmitModuleCellTemp+0x124>)
 800d0c4:	f006 feb8 	bl	8013e38 <siprintf>
 800d0c8:	480a      	ldr	r0, [pc, #40]	@ (800d0f4 <VCU_TransmitModuleCellTemp+0x124>)
 800d0ca:	f7f8 fa99 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f7fe face 	bl	800b670 <VCU_TransmitMessageQueue>
  }
}
 800d0d4:	bf00      	nop
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd90      	pop	{r4, r7, pc}
 800d0dc:	2000a664 	.word	0x2000a664
 800d0e0:	20000de4 	.word	0x20000de4
 800d0e4:	2000a6c4 	.word	0x2000a6c4
 800d0e8:	2000a6d0 	.word	0x2000a6d0
 800d0ec:	2000000c 	.word	0x2000000c
 800d0f0:	08018ec8 	.word	0x08018ec8
 800d0f4:	20000b5c 	.word	0x20000b5c

0800d0f8 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800d0f8:	b590      	push	{r4, r7, lr}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d0fe:	4b41      	ldr	r3, [pc, #260]	@ (800d204 <VCU_TransmitModuleLimits+0x10c>)
 800d100:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d104:	4618      	mov	r0, r3
 800d106:	f7fd fb1d 	bl	800a744 <MCU_ModuleIndexFromId>
 800d10a:	4603      	mov	r3, r0
 800d10c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d10e:	4b3d      	ldr	r3, [pc, #244]	@ (800d204 <VCU_TransmitModuleLimits+0x10c>)
 800d110:	7d1b      	ldrb	r3, [r3, #20]
 800d112:	7bfa      	ldrb	r2, [r7, #15]
 800d114:	429a      	cmp	r2, r3
 800d116:	d071      	beq.n	800d1fc <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800d118:	4b3a      	ldr	r3, [pc, #232]	@ (800d204 <VCU_TransmitModuleLimits+0x10c>)
 800d11a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d11e:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	4a39      	ldr	r2, [pc, #228]	@ (800d208 <VCU_TransmitModuleLimits+0x110>)
 800d124:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d128:	fb01 f303 	mul.w	r3, r1, r3
 800d12c:	4413      	add	r3, r2
 800d12e:	3312      	adds	r3, #18
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	4a34      	ldr	r2, [pc, #208]	@ (800d208 <VCU_TransmitModuleLimits+0x110>)
 800d138:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d13c:	fb01 f303 	mul.w	r3, r1, r3
 800d140:	4413      	add	r3, r2
 800d142:	330e      	adds	r3, #14
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	4a2f      	ldr	r2, [pc, #188]	@ (800d208 <VCU_TransmitModuleLimits+0x110>)
 800d14c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d150:	fb01 f303 	mul.w	r3, r1, r3
 800d154:	4413      	add	r3, r2
 800d156:	3310      	adds	r3, #16
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d162:	4b2a      	ldr	r3, [pc, #168]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d168:	4b28      	ldr	r3, [pc, #160]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d16e:	4b27      	ldr	r3, [pc, #156]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d170:	2200      	movs	r2, #0
 800d172:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800d174:	4b26      	ldr	r3, [pc, #152]	@ (800d210 <VCU_TransmitModuleLimits+0x118>)
 800d176:	461c      	mov	r4, r3
 800d178:	463b      	mov	r3, r7
 800d17a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d17e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d182:	4b20      	ldr	r3, [pc, #128]	@ (800d204 <VCU_TransmitModuleLimits+0x10c>)
 800d184:	895b      	ldrh	r3, [r3, #10]
 800d186:	f203 4316 	addw	r3, r3, #1046	@ 0x416
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d190:	b299      	uxth	r1, r3
 800d192:	4a1e      	ldr	r2, [pc, #120]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d194:	8813      	ldrh	r3, [r2, #0]
 800d196:	f361 030a 	bfi	r3, r1, #0, #11
 800d19a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d19c:	4a1b      	ldr	r2, [pc, #108]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d19e:	6813      	ldr	r3, [r2, #0]
 800d1a0:	f36f 23dc 	bfc	r3, #11, #18
 800d1a4:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d1a6:	4a19      	ldr	r2, [pc, #100]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d1a8:	7913      	ldrb	r3, [r2, #4]
 800d1aa:	f36f 1386 	bfc	r3, #6, #1
 800d1ae:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d1b0:	4a16      	ldr	r2, [pc, #88]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d1b2:	7913      	ldrb	r3, [r2, #4]
 800d1b4:	2108      	movs	r1, #8
 800d1b6:	f361 0303 	bfi	r3, r1, #0, #4
 800d1ba:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d1bc:	4a13      	ldr	r2, [pc, #76]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d1be:	7913      	ldrb	r3, [r2, #4]
 800d1c0:	f36f 13c7 	bfc	r3, #7, #1
 800d1c4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d1c6:	4a11      	ldr	r2, [pc, #68]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d1c8:	7913      	ldrb	r3, [r2, #4]
 800d1ca:	f36f 1304 	bfc	r3, #4, #1
 800d1ce:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d1d0:	4b10      	ldr	r3, [pc, #64]	@ (800d214 <VCU_TransmitModuleLimits+0x11c>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	f003 0304 	and.w	r3, r3, #4
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00c      	beq.n	800d1f6 <VCU_TransmitModuleLimits+0xfe>
 800d1dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d20c <VCU_TransmitModuleLimits+0x114>)
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	490b      	ldr	r1, [pc, #44]	@ (800d218 <VCU_TransmitModuleLimits+0x120>)
 800d1ea:	480c      	ldr	r0, [pc, #48]	@ (800d21c <VCU_TransmitModuleLimits+0x124>)
 800d1ec:	f006 fe24 	bl	8013e38 <siprintf>
 800d1f0:	480a      	ldr	r0, [pc, #40]	@ (800d21c <VCU_TransmitModuleLimits+0x124>)
 800d1f2:	f7f8 fa05 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	f7fe fa3a 	bl	800b670 <VCU_TransmitMessageQueue>
  }

}
 800d1fc:	bf00      	nop
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	bd90      	pop	{r4, r7, pc}
 800d204:	2000a664 	.word	0x2000a664
 800d208:	20000de4 	.word	0x20000de4
 800d20c:	2000a6c4 	.word	0x2000a6c4
 800d210:	2000a6d0 	.word	0x2000a6d0
 800d214:	2000000c 	.word	0x2000000c
 800d218:	08018ee8 	.word	0x08018ee8
 800d21c:	20000b5c 	.word	0x20000b5c

0800d220 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800d220:	b580      	push	{r7, lr}
 800d222:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d224:	4b23      	ldr	r3, [pc, #140]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d226:	2200      	movs	r2, #0
 800d228:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d22a:	4b22      	ldr	r3, [pc, #136]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d230:	4b20      	ldr	r3, [pc, #128]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d232:	2200      	movs	r2, #0
 800d234:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d236:	4b20      	ldr	r3, [pc, #128]	@ (800d2b8 <VCU_RequestTime+0x98>)
 800d238:	895b      	ldrh	r3, [r3, #10]
 800d23a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d23e:	b29b      	uxth	r3, r3
 800d240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d244:	b299      	uxth	r1, r3
 800d246:	4a1b      	ldr	r2, [pc, #108]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d248:	8813      	ldrh	r3, [r2, #0]
 800d24a:	f361 030a 	bfi	r3, r1, #0, #11
 800d24e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d250:	4a18      	ldr	r2, [pc, #96]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d252:	6813      	ldr	r3, [r2, #0]
 800d254:	f36f 23dc 	bfc	r3, #11, #18
 800d258:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d25a:	4a16      	ldr	r2, [pc, #88]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d25c:	7913      	ldrb	r3, [r2, #4]
 800d25e:	f36f 1386 	bfc	r3, #6, #1
 800d262:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d264:	4a13      	ldr	r2, [pc, #76]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d266:	7913      	ldrb	r3, [r2, #4]
 800d268:	2108      	movs	r1, #8
 800d26a:	f361 0303 	bfi	r3, r1, #0, #4
 800d26e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d270:	4a10      	ldr	r2, [pc, #64]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d272:	7913      	ldrb	r3, [r2, #4]
 800d274:	f36f 13c7 	bfc	r3, #7, #1
 800d278:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d27a:	4a0e      	ldr	r2, [pc, #56]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d27c:	7913      	ldrb	r3, [r2, #4]
 800d27e:	f36f 1304 	bfc	r3, #4, #1
 800d282:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d284:	4b0d      	ldr	r3, [pc, #52]	@ (800d2bc <VCU_RequestTime+0x9c>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 0304 	and.w	r3, r3, #4
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00c      	beq.n	800d2aa <VCU_RequestTime+0x8a>
 800d290:	4b08      	ldr	r3, [pc, #32]	@ (800d2b4 <VCU_RequestTime+0x94>)
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d298:	b29b      	uxth	r3, r3
 800d29a:	461a      	mov	r2, r3
 800d29c:	4908      	ldr	r1, [pc, #32]	@ (800d2c0 <VCU_RequestTime+0xa0>)
 800d29e:	4809      	ldr	r0, [pc, #36]	@ (800d2c4 <VCU_RequestTime+0xa4>)
 800d2a0:	f006 fdca 	bl	8013e38 <siprintf>
 800d2a4:	4807      	ldr	r0, [pc, #28]	@ (800d2c4 <VCU_RequestTime+0xa4>)
 800d2a6:	f7f8 f9ab 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	f7fe f9e0 	bl	800b670 <VCU_TransmitMessageQueue>

}
 800d2b0:	bf00      	nop
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	2000a6c4 	.word	0x2000a6c4
 800d2b8:	2000a664 	.word	0x2000a664
 800d2bc:	2000000c 	.word	0x2000000c
 800d2c0:	08018f04 	.word	0x08018f04
 800d2c4:	20000b5c 	.word	0x20000b5c

0800d2c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800d2c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d2ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d2cc:	3304      	adds	r3, #4

0800d2ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d2ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d2d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800d2d2:	d3f9      	bcc.n	800d2c8 <CopyDataInit>
  bx lr
 800d2d4:	4770      	bx	lr

0800d2d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800d2d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800d2d8:	3004      	adds	r0, #4

0800d2da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800d2da:	4288      	cmp	r0, r1
  bcc FillZerobss
 800d2dc:	d3fb      	bcc.n	800d2d6 <FillZerobss>
  bx lr
 800d2de:	4770      	bx	lr

0800d2e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d2e0:	480c      	ldr	r0, [pc, #48]	@ (800d314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d2e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d2e4:	f7fe f86a 	bl	800b3bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800d2e8:	480b      	ldr	r0, [pc, #44]	@ (800d318 <LoopForever+0x6>)
 800d2ea:	490c      	ldr	r1, [pc, #48]	@ (800d31c <LoopForever+0xa>)
 800d2ec:	4a0c      	ldr	r2, [pc, #48]	@ (800d320 <LoopForever+0xe>)
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f7ff ffed 	bl	800d2ce <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800d2f4:	480b      	ldr	r0, [pc, #44]	@ (800d324 <LoopForever+0x12>)
 800d2f6:	490c      	ldr	r1, [pc, #48]	@ (800d328 <LoopForever+0x16>)
 800d2f8:	4a0c      	ldr	r2, [pc, #48]	@ (800d32c <LoopForever+0x1a>)
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f7ff ffe7 	bl	800d2ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800d300:	480b      	ldr	r0, [pc, #44]	@ (800d330 <LoopForever+0x1e>)
 800d302:	490c      	ldr	r1, [pc, #48]	@ (800d334 <LoopForever+0x22>)
 800d304:	2300      	movs	r3, #0
 800d306:	f7ff ffe8 	bl	800d2da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800d30a:	f007 fcc1 	bl	8014c90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800d30e:	f7f8 fd29 	bl	8005d64 <main>

0800d312 <LoopForever>:

LoopForever:
  b LoopForever
 800d312:	e7fe      	b.n	800d312 <LoopForever>
  ldr   r0, =_estack
 800d314:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800d318:	20000008 	.word	0x20000008
 800d31c:	200002c8 	.word	0x200002c8
 800d320:	08019580 	.word	0x08019580
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800d324:	20030000 	.word	0x20030000
 800d328:	20030000 	.word	0x20030000
 800d32c:	08019840 	.word	0x08019840
  INIT_BSS _sbss, _ebss
 800d330:	200002c8 	.word	0x200002c8
 800d334:	2000a8f0 	.word	0x2000a8f0

0800d338 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d338:	e7fe      	b.n	800d338 <ADC1_IRQHandler>
	...

0800d33c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d346:	4b0c      	ldr	r3, [pc, #48]	@ (800d378 <HAL_Init+0x3c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a0b      	ldr	r2, [pc, #44]	@ (800d378 <HAL_Init+0x3c>)
 800d34c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d350:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d352:	2003      	movs	r0, #3
 800d354:	f000 f96c 	bl	800d630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d358:	200f      	movs	r0, #15
 800d35a:	f000 f80f 	bl	800d37c <HAL_InitTick>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d002      	beq.n	800d36a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800d364:	2301      	movs	r3, #1
 800d366:	71fb      	strb	r3, [r7, #7]
 800d368:	e001      	b.n	800d36e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d36a:	f7fd fc8d 	bl	800ac88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d36e:	79fb      	ldrb	r3, [r7, #7]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	58004000 	.word	0x58004000

0800d37c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800d388:	4b17      	ldr	r3, [pc, #92]	@ (800d3e8 <HAL_InitTick+0x6c>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d024      	beq.n	800d3da <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800d390:	f002 f842 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 800d394:	4602      	mov	r2, r0
 800d396:	4b14      	ldr	r3, [pc, #80]	@ (800d3e8 <HAL_InitTick+0x6c>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	4619      	mov	r1, r3
 800d39c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d3a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 f974 	bl	800d696 <HAL_SYSTICK_Config>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10f      	bne.n	800d3d4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b0f      	cmp	r3, #15
 800d3b8:	d809      	bhi.n	800d3ce <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c2:	f000 f940 	bl	800d646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d3c6:	4a09      	ldr	r2, [pc, #36]	@ (800d3ec <HAL_InitTick+0x70>)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	e007      	b.n	800d3de <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	73fb      	strb	r3, [r7, #15]
 800d3d2:	e004      	b.n	800d3de <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	73fb      	strb	r3, [r7, #15]
 800d3d8:	e001      	b.n	800d3de <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	2000001c 	.word	0x2000001c
 800d3ec:	20000018 	.word	0x20000018

0800d3f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d3f4:	4b06      	ldr	r3, [pc, #24]	@ (800d410 <HAL_IncTick+0x20>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	4b06      	ldr	r3, [pc, #24]	@ (800d414 <HAL_IncTick+0x24>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4413      	add	r3, r2
 800d400:	4a04      	ldr	r2, [pc, #16]	@ (800d414 <HAL_IncTick+0x24>)
 800d402:	6013      	str	r3, [r2, #0]
}
 800d404:	bf00      	nop
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	2000001c 	.word	0x2000001c
 800d414:	2000a764 	.word	0x2000a764

0800d418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d418:	b480      	push	{r7}
 800d41a:	af00      	add	r7, sp, #0
  return uwTick;
 800d41c:	4b03      	ldr	r3, [pc, #12]	@ (800d42c <HAL_GetTick+0x14>)
 800d41e:	681b      	ldr	r3, [r3, #0]
}
 800d420:	4618      	mov	r0, r3
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	2000a764 	.word	0x2000a764

0800d430 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800d430:	b480      	push	{r7}
 800d432:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800d434:	4b03      	ldr	r3, [pc, #12]	@ (800d444 <HAL_GetTickPrio+0x14>)
 800d436:	681b      	ldr	r3, [r3, #0]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000018 	.word	0x20000018

0800d448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d450:	f7ff ffe2 	bl	800d418 <HAL_GetTick>
 800d454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d460:	d005      	beq.n	800d46e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d462:	4b0a      	ldr	r3, [pc, #40]	@ (800d48c <HAL_Delay+0x44>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	4413      	add	r3, r2
 800d46c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d46e:	bf00      	nop
 800d470:	f7ff ffd2 	bl	800d418 <HAL_GetTick>
 800d474:	4602      	mov	r2, r0
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d8f7      	bhi.n	800d470 <HAL_Delay+0x28>
  {
  }
}
 800d480:	bf00      	nop
 800d482:	bf00      	nop
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	2000001c 	.word	0x2000001c

0800d490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f003 0307 	and.w	r3, r3, #7
 800d49e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d4 <__NVIC_SetPriorityGrouping+0x44>)
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d4b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d4bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d4c2:	4a04      	ldr	r2, [pc, #16]	@ (800d4d4 <__NVIC_SetPriorityGrouping+0x44>)
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	60d3      	str	r3, [r2, #12]
}
 800d4c8:	bf00      	nop
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	e000ed00 	.word	0xe000ed00

0800d4d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d4dc:	4b04      	ldr	r3, [pc, #16]	@ (800d4f0 <__NVIC_GetPriorityGrouping+0x18>)
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	0a1b      	lsrs	r3, r3, #8
 800d4e2:	f003 0307 	and.w	r3, r3, #7
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	e000ed00 	.word	0xe000ed00

0800d4f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d4fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d502:	2b00      	cmp	r3, #0
 800d504:	db0b      	blt.n	800d51e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d506:	79fb      	ldrb	r3, [r7, #7]
 800d508:	f003 021f 	and.w	r2, r3, #31
 800d50c:	4907      	ldr	r1, [pc, #28]	@ (800d52c <__NVIC_EnableIRQ+0x38>)
 800d50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d512:	095b      	lsrs	r3, r3, #5
 800d514:	2001      	movs	r0, #1
 800d516:	fa00 f202 	lsl.w	r2, r0, r2
 800d51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	e000e100 	.word	0xe000e100

0800d530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	6039      	str	r1, [r7, #0]
 800d53a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d53c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d540:	2b00      	cmp	r3, #0
 800d542:	db0a      	blt.n	800d55a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	b2da      	uxtb	r2, r3
 800d548:	490c      	ldr	r1, [pc, #48]	@ (800d57c <__NVIC_SetPriority+0x4c>)
 800d54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d54e:	0112      	lsls	r2, r2, #4
 800d550:	b2d2      	uxtb	r2, r2
 800d552:	440b      	add	r3, r1
 800d554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d558:	e00a      	b.n	800d570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	4908      	ldr	r1, [pc, #32]	@ (800d580 <__NVIC_SetPriority+0x50>)
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	f003 030f 	and.w	r3, r3, #15
 800d566:	3b04      	subs	r3, #4
 800d568:	0112      	lsls	r2, r2, #4
 800d56a:	b2d2      	uxtb	r2, r2
 800d56c:	440b      	add	r3, r1
 800d56e:	761a      	strb	r2, [r3, #24]
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	e000e100 	.word	0xe000e100
 800d580:	e000ed00 	.word	0xe000ed00

0800d584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d584:	b480      	push	{r7}
 800d586:	b089      	sub	sp, #36	@ 0x24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f003 0307 	and.w	r3, r3, #7
 800d596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	f1c3 0307 	rsb	r3, r3, #7
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	bf28      	it	cs
 800d5a2:	2304      	movcs	r3, #4
 800d5a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	2b06      	cmp	r3, #6
 800d5ac:	d902      	bls.n	800d5b4 <NVIC_EncodePriority+0x30>
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	3b03      	subs	r3, #3
 800d5b2:	e000      	b.n	800d5b6 <NVIC_EncodePriority+0x32>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	fa02 f303 	lsl.w	r3, r2, r3
 800d5c2:	43da      	mvns	r2, r3
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	401a      	ands	r2, r3
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d5cc:	f04f 31ff 	mov.w	r1, #4294967295
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d6:	43d9      	mvns	r1, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5dc:	4313      	orrs	r3, r2
         );
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3724      	adds	r7, #36	@ 0x24
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
	...

0800d5ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5fc:	d301      	bcc.n	800d602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d5fe:	2301      	movs	r3, #1
 800d600:	e00f      	b.n	800d622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d602:	4a0a      	ldr	r2, [pc, #40]	@ (800d62c <SysTick_Config+0x40>)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3b01      	subs	r3, #1
 800d608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d60a:	210f      	movs	r1, #15
 800d60c:	f04f 30ff 	mov.w	r0, #4294967295
 800d610:	f7ff ff8e 	bl	800d530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d614:	4b05      	ldr	r3, [pc, #20]	@ (800d62c <SysTick_Config+0x40>)
 800d616:	2200      	movs	r2, #0
 800d618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d61a:	4b04      	ldr	r3, [pc, #16]	@ (800d62c <SysTick_Config+0x40>)
 800d61c:	2207      	movs	r2, #7
 800d61e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	e000e010 	.word	0xe000e010

0800d630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ff29 	bl	800d490 <__NVIC_SetPriorityGrouping>
}
 800d63e:	bf00      	nop
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b086      	sub	sp, #24
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	4603      	mov	r3, r0
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	607a      	str	r2, [r7, #4]
 800d652:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d654:	f7ff ff40 	bl	800d4d8 <__NVIC_GetPriorityGrouping>
 800d658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	68b9      	ldr	r1, [r7, #8]
 800d65e:	6978      	ldr	r0, [r7, #20]
 800d660:	f7ff ff90 	bl	800d584 <NVIC_EncodePriority>
 800d664:	4602      	mov	r2, r0
 800d666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff ff5f 	bl	800d530 <__NVIC_SetPriority>
}
 800d672:	bf00      	nop
 800d674:	3718      	adds	r7, #24
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	4603      	mov	r3, r0
 800d682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff ff33 	bl	800d4f4 <__NVIC_EnableIRQ>
}
 800d68e:	bf00      	nop
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7ff ffa4 	bl	800d5ec <SysTick_Config>
 800d6a4:	4603      	mov	r3, r0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d101      	bne.n	800d6c0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e04f      	b.n	800d760 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d008      	beq.n	800d6de <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2204      	movs	r2, #4
 800d6d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e040      	b.n	800d760 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f022 020e 	bic.w	r2, r2, #14
 800d6ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d6fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f022 0201 	bic.w	r2, r2, #1
 800d70c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d712:	f003 021c 	and.w	r2, r3, #28
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d71a:	2101      	movs	r1, #1
 800d71c:	fa01 f202 	lsl.w	r2, r1, r2
 800d720:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d72a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00c      	beq.n	800d74e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d73e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d742:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800d74c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2201      	movs	r2, #1
 800d752:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b02      	cmp	r3, #2
 800d782:	d005      	beq.n	800d790 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2204      	movs	r2, #4
 800d788:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	73fb      	strb	r3, [r7, #15]
 800d78e:	e047      	b.n	800d820 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f022 020e 	bic.w	r2, r2, #14
 800d79e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f022 0201 	bic.w	r2, r2, #1
 800d7ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d7be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7c4:	f003 021c 	and.w	r2, r3, #28
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7cc:	2101      	movs	r1, #1
 800d7ce:	fa01 f202 	lsl.w	r2, r1, r2
 800d7d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d7dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00c      	beq.n	800d800 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d7f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800d7fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	4798      	blx	r3
    }
  }
  return status;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d83a:	4b1c      	ldr	r3, [pc, #112]	@ (800d8ac <HAL_FLASH_Program+0x80>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d101      	bne.n	800d846 <HAL_FLASH_Program+0x1a>
 800d842:	2302      	movs	r3, #2
 800d844:	e02d      	b.n	800d8a2 <HAL_FLASH_Program+0x76>
 800d846:	4b19      	ldr	r3, [pc, #100]	@ (800d8ac <HAL_FLASH_Program+0x80>)
 800d848:	2201      	movs	r2, #1
 800d84a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d84c:	4b17      	ldr	r3, [pc, #92]	@ (800d8ac <HAL_FLASH_Program+0x80>)
 800d84e:	2200      	movs	r2, #0
 800d850:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d852:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d856:	f000 f869 	bl	800d92c <FLASH_WaitForLastOperation>
 800d85a:	4603      	mov	r3, r0
 800d85c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d11a      	bne.n	800d89a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d105      	bne.n	800d876 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d86a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f000 f8ca 	bl	800da08 <FLASH_Program_DoubleWord>
 800d874:	e004      	b.n	800d880 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	4619      	mov	r1, r3
 800d87a:	68b8      	ldr	r0, [r7, #8]
 800d87c:	f00a f85c 	bl	8017938 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d880:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d884:	f000 f852 	bl	800d92c <FLASH_WaitForLastOperation>
 800d888:	4603      	mov	r3, r0
 800d88a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800d88c:	4b08      	ldr	r3, [pc, #32]	@ (800d8b0 <HAL_FLASH_Program+0x84>)
 800d88e:	695a      	ldr	r2, [r3, #20]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	43db      	mvns	r3, r3
 800d894:	4906      	ldr	r1, [pc, #24]	@ (800d8b0 <HAL_FLASH_Program+0x84>)
 800d896:	4013      	ands	r3, r2
 800d898:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d89a:	4b04      	ldr	r3, [pc, #16]	@ (800d8ac <HAL_FLASH_Program+0x80>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2000a768 	.word	0x2000a768
 800d8b0:	58004000 	.word	0x58004000

0800d8b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d8be:	4b0b      	ldr	r3, [pc, #44]	@ (800d8ec <HAL_FLASH_Unlock+0x38>)
 800d8c0:	695b      	ldr	r3, [r3, #20]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da0b      	bge.n	800d8de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d8c6:	4b09      	ldr	r3, [pc, #36]	@ (800d8ec <HAL_FLASH_Unlock+0x38>)
 800d8c8:	4a09      	ldr	r2, [pc, #36]	@ (800d8f0 <HAL_FLASH_Unlock+0x3c>)
 800d8ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d8cc:	4b07      	ldr	r3, [pc, #28]	@ (800d8ec <HAL_FLASH_Unlock+0x38>)
 800d8ce:	4a09      	ldr	r2, [pc, #36]	@ (800d8f4 <HAL_FLASH_Unlock+0x40>)
 800d8d0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d8d2:	4b06      	ldr	r3, [pc, #24]	@ (800d8ec <HAL_FLASH_Unlock+0x38>)
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	da01      	bge.n	800d8de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d8de:	79fb      	ldrb	r3, [r7, #7]
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	58004000 	.word	0x58004000
 800d8f0:	45670123 	.word	0x45670123
 800d8f4:	cdef89ab 	.word	0xcdef89ab

0800d8f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d902:	4b09      	ldr	r3, [pc, #36]	@ (800d928 <HAL_FLASH_Lock+0x30>)
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	4a08      	ldr	r2, [pc, #32]	@ (800d928 <HAL_FLASH_Lock+0x30>)
 800d908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d90c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800d90e:	4b06      	ldr	r3, [pc, #24]	@ (800d928 <HAL_FLASH_Lock+0x30>)
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	2b00      	cmp	r3, #0
 800d914:	db01      	blt.n	800d91a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d91a:	79fb      	ldrb	r3, [r7, #7]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	58004000 	.word	0x58004000

0800d92c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800d934:	f7ff fd70 	bl	800d418 <HAL_GetTick>
 800d938:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d93a:	e009      	b.n	800d950 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800d93c:	f7ff fd6c 	bl	800d418 <HAL_GetTick>
 800d940:	4602      	mov	r2, r0
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d801      	bhi.n	800d950 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800d94c:	2303      	movs	r3, #3
 800d94e:	e053      	b.n	800d9f8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d950:	4b2b      	ldr	r3, [pc, #172]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d95c:	d0ee      	beq.n	800d93c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800d95e:	4b28      	ldr	r3, [pc, #160]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d96e:	4b24      	ldr	r3, [pc, #144]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d970:	2201      	movs	r2, #1
 800d972:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d007      	beq.n	800d98e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800d97e:	4b20      	ldr	r3, [pc, #128]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d980:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d984:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d98c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d994:	4013      	ands	r3, r2
 800d996:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d99e:	d307      	bcc.n	800d9b0 <FLASH_WaitForLastOperation+0x84>
 800d9a0:	4b17      	ldr	r3, [pc, #92]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d9a2:	699a      	ldr	r2, [r3, #24]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d9aa:	4915      	ldr	r1, [pc, #84]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	618b      	str	r3, [r1, #24]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d004      	beq.n	800d9c4 <FLASH_WaitForLastOperation+0x98>
 800d9ba:	4a11      	ldr	r2, [pc, #68]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d9c2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00e      	beq.n	800d9e8 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800d9ca:	4a0e      	ldr	r2, [pc, #56]	@ (800da04 <FLASH_WaitForLastOperation+0xd8>)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e011      	b.n	800d9f8 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800d9d4:	f7ff fd20 	bl	800d418 <HAL_GetTick>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d801      	bhi.n	800d9e8 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	e007      	b.n	800d9f8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800d9e8:	4b05      	ldr	r3, [pc, #20]	@ (800da00 <FLASH_WaitForLastOperation+0xd4>)
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9f4:	d0ee      	beq.n	800d9d4 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	58004000 	.word	0x58004000
 800da04:	2000a768 	.word	0x2000a768

0800da08 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800da14:	4b0e      	ldr	r3, [pc, #56]	@ (800da50 <FLASH_Program_DoubleWord+0x48>)
 800da16:	695b      	ldr	r3, [r3, #20]
 800da18:	4a0d      	ldr	r2, [pc, #52]	@ (800da50 <FLASH_Program_DoubleWord+0x48>)
 800da1a:	f043 0301 	orr.w	r3, r3, #1
 800da1e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800da26:	f3bf 8f6f 	isb	sy
}
 800da2a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800da2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da30:	f04f 0200 	mov.w	r2, #0
 800da34:	f04f 0300 	mov.w	r3, #0
 800da38:	000a      	movs	r2, r1
 800da3a:	2300      	movs	r3, #0
 800da3c:	68f9      	ldr	r1, [r7, #12]
 800da3e:	3104      	adds	r1, #4
 800da40:	4613      	mov	r3, r2
 800da42:	600b      	str	r3, [r1, #0]
}
 800da44:	bf00      	nop
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	58004000 	.word	0x58004000

0800da54 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800da5e:	4b24      	ldr	r3, [pc, #144]	@ (800daf0 <HAL_FLASHEx_Erase+0x9c>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d101      	bne.n	800da6a <HAL_FLASHEx_Erase+0x16>
 800da66:	2302      	movs	r3, #2
 800da68:	e03d      	b.n	800dae6 <HAL_FLASHEx_Erase+0x92>
 800da6a:	4b21      	ldr	r3, [pc, #132]	@ (800daf0 <HAL_FLASHEx_Erase+0x9c>)
 800da6c:	2201      	movs	r2, #1
 800da6e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800da70:	4b1f      	ldr	r3, [pc, #124]	@ (800daf0 <HAL_FLASHEx_Erase+0x9c>)
 800da72:	2200      	movs	r2, #0
 800da74:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800da76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800da7a:	f7ff ff57 	bl	800d92c <FLASH_WaitForLastOperation>
 800da7e:	4603      	mov	r3, r0
 800da80:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800da82:	7bfb      	ldrb	r3, [r7, #15]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d12a      	bne.n	800dade <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d124      	bne.n	800dada <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f04f 32ff 	mov.w	r2, #4294967295
 800da96:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	60bb      	str	r3, [r7, #8]
 800da9e:	e012      	b.n	800dac6 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800daa0:	68b8      	ldr	r0, [r7, #8]
 800daa2:	f000 f869 	bl	800db78 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800daa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800daaa:	f7ff ff3f 	bl	800d92c <FLASH_WaitForLastOperation>
 800daae:	4603      	mov	r3, r0
 800dab0:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d003      	beq.n	800dac0 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	68ba      	ldr	r2, [r7, #8]
 800dabc:	601a      	str	r2, [r3, #0]
          break;
 800dabe:	e00a      	b.n	800dad6 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	3301      	adds	r3, #1
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685a      	ldr	r2, [r3, #4]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	4413      	add	r3, r2
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d3e4      	bcc.n	800daa0 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800dad6:	f000 f8b1 	bl	800dc3c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800dada:	f000 f867 	bl	800dbac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dade:	4b04      	ldr	r3, [pc, #16]	@ (800daf0 <HAL_FLASHEx_Erase+0x9c>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	701a      	strb	r2, [r3, #0]

  return status;
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	2000a768 	.word	0x2000a768

0800daf4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800dafc:	4b1c      	ldr	r3, [pc, #112]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <HAL_FLASHEx_Erase_IT+0x14>
 800db04:	2302      	movs	r3, #2
 800db06:	e02e      	b.n	800db66 <HAL_FLASHEx_Erase_IT+0x72>
 800db08:	4b19      	ldr	r3, [pc, #100]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db0a:	2201      	movs	r2, #1
 800db0c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800db0e:	4b18      	ldr	r3, [pc, #96]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db10:	2200      	movs	r2, #0
 800db12:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a15      	ldr	r2, [pc, #84]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db1a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800db1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800db20:	f7ff ff04 	bl	800d92c <FLASH_WaitForLastOperation>
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800db2e:	4b10      	ldr	r3, [pc, #64]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db30:	2200      	movs	r2, #0
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e016      	b.n	800db64 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800db36:	4b0f      	ldr	r3, [pc, #60]	@ (800db74 <HAL_FLASHEx_Erase_IT+0x80>)
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	4a0e      	ldr	r2, [pc, #56]	@ (800db74 <HAL_FLASHEx_Erase_IT+0x80>)
 800db3c:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800db40:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b02      	cmp	r3, #2
 800db48:	d10c      	bne.n	800db64 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	4a08      	ldr	r2, [pc, #32]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db50:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	4a06      	ldr	r2, [pc, #24]	@ (800db70 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db58:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	4618      	mov	r0, r3
 800db60:	f000 f80a 	bl	800db78 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800db64:	7bfb      	ldrb	r3, [r7, #15]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	2000a768 	.word	0x2000a768
 800db74:	58004000 	.word	0x58004000

0800db78 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800db80:	4b09      	ldr	r3, [pc, #36]	@ (800dba8 <FLASH_PageErase+0x30>)
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	00db      	lsls	r3, r3, #3
 800db8c:	4313      	orrs	r3, r2
 800db8e:	4a06      	ldr	r2, [pc, #24]	@ (800dba8 <FLASH_PageErase+0x30>)
 800db90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db94:	f043 0302 	orr.w	r3, r3, #2
 800db98:	6153      	str	r3, [r2, #20]
}
 800db9a:	bf00      	nop
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	58004000 	.word	0x58004000

0800dbac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800dbac:	b480      	push	{r7}
 800dbae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800dbb0:	4b21      	ldr	r3, [pc, #132]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbbc:	d117      	bne.n	800dbee <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800dbbe:	4b1e      	ldr	r3, [pc, #120]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a1d      	ldr	r2, [pc, #116]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dbc8:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800dbca:	4b1b      	ldr	r3, [pc, #108]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a1a      	ldr	r2, [pc, #104]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800dbd4:	6013      	str	r3, [r2, #0]
 800dbd6:	4b18      	ldr	r3, [pc, #96]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a17      	ldr	r2, [pc, #92]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dbe0:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dbe2:	4b15      	ldr	r3, [pc, #84]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a14      	ldr	r2, [pc, #80]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dbec:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800dbee:	4b12      	ldr	r3, [pc, #72]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dbf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbfa:	d117      	bne.n	800dc2c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800dbfc:	4b0e      	ldr	r3, [pc, #56]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a0d      	ldr	r2, [pc, #52]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dc06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800dc08:	4b0b      	ldr	r3, [pc, #44]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dc12:	6013      	str	r3, [r2, #0]
 800dc14:	4b08      	ldr	r3, [pc, #32]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4a07      	ldr	r2, [pc, #28]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800dc20:	4b05      	ldr	r3, [pc, #20]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a04      	ldr	r2, [pc, #16]	@ (800dc38 <FLASH_FlushCaches+0x8c>)
 800dc26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dc2a:	6013      	str	r3, [r2, #0]
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	58004000 	.word	0x58004000

0800dc3c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800dc40:	4b06      	ldr	r3, [pc, #24]	@ (800dc5c <FLASH_AcknowledgePageErase+0x20>)
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	4a05      	ldr	r2, [pc, #20]	@ (800dc5c <FLASH_AcknowledgePageErase+0x20>)
 800dc46:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800dc4a:	f023 0302 	bic.w	r3, r3, #2
 800dc4e:	6153      	str	r3, [r2, #20]
}
 800dc50:	bf00      	nop
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	58004000 	.word	0x58004000

0800dc60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dc6e:	e14c      	b.n	800df0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	2101      	movs	r1, #1
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	fa01 f303 	lsl.w	r3, r1, r3
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f000 813e 	beq.w	800df04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	f003 0303 	and.w	r3, r3, #3
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d005      	beq.n	800dca0 <HAL_GPIO_Init+0x40>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	f003 0303 	and.w	r3, r3, #3
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d130      	bne.n	800dd02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	005b      	lsls	r3, r3, #1
 800dcaa:	2203      	movs	r2, #3
 800dcac:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb0:	43db      	mvns	r3, r3
 800dcb2:	693a      	ldr	r2, [r7, #16]
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	68da      	ldr	r2, [r3, #12]
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	fa02 f303 	lsl.w	r3, r2, r3
 800dcde:	43db      	mvns	r3, r3
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	4013      	ands	r3, r2
 800dce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	091b      	lsrs	r3, r3, #4
 800dcec:	f003 0201 	and.w	r2, r3, #1
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf6:	693a      	ldr	r2, [r7, #16]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f003 0303 	and.w	r3, r3, #3
 800dd0a:	2b03      	cmp	r3, #3
 800dd0c:	d017      	beq.n	800dd3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	005b      	lsls	r3, r3, #1
 800dd18:	2203      	movs	r2, #3
 800dd1a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd1e:	43db      	mvns	r3, r3
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	4013      	ands	r3, r2
 800dd24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	689a      	ldr	r2, [r3, #8]
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	4313      	orrs	r3, r2
 800dd36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	f003 0303 	and.w	r3, r3, #3
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d123      	bne.n	800dd92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	08da      	lsrs	r2, r3, #3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3208      	adds	r2, #8
 800dd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	220f      	movs	r2, #15
 800dd62:	fa02 f303 	lsl.w	r3, r2, r3
 800dd66:	43db      	mvns	r3, r3
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	f003 0307 	and.w	r3, r3, #7
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7e:	693a      	ldr	r2, [r7, #16]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	08da      	lsrs	r2, r3, #3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3208      	adds	r2, #8
 800dd8c:	6939      	ldr	r1, [r7, #16]
 800dd8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	fa02 f303 	lsl.w	r3, r2, r3
 800dda2:	43db      	mvns	r3, r3
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	4013      	ands	r3, r2
 800dda8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f003 0203 	and.w	r2, r3, #3
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8098 	beq.w	800df04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800ddd4:	4a54      	ldr	r2, [pc, #336]	@ (800df28 <HAL_GPIO_Init+0x2c8>)
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	089b      	lsrs	r3, r3, #2
 800ddda:	3302      	adds	r3, #2
 800dddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dde0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f003 0303 	and.w	r3, r3, #3
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	220f      	movs	r2, #15
 800ddec:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf0:	43db      	mvns	r3, r3
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800ddfe:	d019      	beq.n	800de34 <HAL_GPIO_Init+0x1d4>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a4a      	ldr	r2, [pc, #296]	@ (800df2c <HAL_GPIO_Init+0x2cc>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d013      	beq.n	800de30 <HAL_GPIO_Init+0x1d0>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a49      	ldr	r2, [pc, #292]	@ (800df30 <HAL_GPIO_Init+0x2d0>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d00d      	beq.n	800de2c <HAL_GPIO_Init+0x1cc>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a48      	ldr	r2, [pc, #288]	@ (800df34 <HAL_GPIO_Init+0x2d4>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d007      	beq.n	800de28 <HAL_GPIO_Init+0x1c8>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a47      	ldr	r2, [pc, #284]	@ (800df38 <HAL_GPIO_Init+0x2d8>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d101      	bne.n	800de24 <HAL_GPIO_Init+0x1c4>
 800de20:	2304      	movs	r3, #4
 800de22:	e008      	b.n	800de36 <HAL_GPIO_Init+0x1d6>
 800de24:	2307      	movs	r3, #7
 800de26:	e006      	b.n	800de36 <HAL_GPIO_Init+0x1d6>
 800de28:	2303      	movs	r3, #3
 800de2a:	e004      	b.n	800de36 <HAL_GPIO_Init+0x1d6>
 800de2c:	2302      	movs	r3, #2
 800de2e:	e002      	b.n	800de36 <HAL_GPIO_Init+0x1d6>
 800de30:	2301      	movs	r3, #1
 800de32:	e000      	b.n	800de36 <HAL_GPIO_Init+0x1d6>
 800de34:	2300      	movs	r3, #0
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	f002 0203 	and.w	r2, r2, #3
 800de3c:	0092      	lsls	r2, r2, #2
 800de3e:	4093      	lsls	r3, r2
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	4313      	orrs	r3, r2
 800de44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800de46:	4938      	ldr	r1, [pc, #224]	@ (800df28 <HAL_GPIO_Init+0x2c8>)
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	089b      	lsrs	r3, r3, #2
 800de4c:	3302      	adds	r3, #2
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800de54:	4b39      	ldr	r3, [pc, #228]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	43db      	mvns	r3, r3
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	4013      	ands	r3, r2
 800de62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d003      	beq.n	800de78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	4313      	orrs	r3, r2
 800de76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800de78:	4a30      	ldr	r2, [pc, #192]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800de7e:	4b2f      	ldr	r3, [pc, #188]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	43db      	mvns	r3, r3
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	4013      	ands	r3, r2
 800de8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800dea2:	4a26      	ldr	r2, [pc, #152]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800dea8:	4b24      	ldr	r3, [pc, #144]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800deaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800deae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	43db      	mvns	r3, r3
 800deb4:	693a      	ldr	r2, [r7, #16]
 800deb6:	4013      	ands	r3, r2
 800deb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	4313      	orrs	r3, r2
 800decc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800dece:	4a1b      	ldr	r2, [pc, #108]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800ded6:	4b19      	ldr	r3, [pc, #100]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800ded8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dedc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	43db      	mvns	r3, r3
 800dee2:	693a      	ldr	r2, [r7, #16]
 800dee4:	4013      	ands	r3, r2
 800dee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800def0:	2b00      	cmp	r3, #0
 800def2:	d003      	beq.n	800defc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	4313      	orrs	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800defc:	4a0f      	ldr	r2, [pc, #60]	@ (800df3c <HAL_GPIO_Init+0x2dc>)
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	3301      	adds	r3, #1
 800df08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	fa22 f303 	lsr.w	r3, r2, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	f47f aeab 	bne.w	800dc70 <HAL_GPIO_Init+0x10>
  }
}
 800df1a:	bf00      	nop
 800df1c:	bf00      	nop
 800df1e:	371c      	adds	r7, #28
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr
 800df28:	40010000 	.word	0x40010000
 800df2c:	48000400 	.word	0x48000400
 800df30:	48000800 	.word	0x48000800
 800df34:	48000c00 	.word	0x48000c00
 800df38:	48001000 	.word	0x48001000
 800df3c:	58000800 	.word	0x58000800

0800df40 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	691a      	ldr	r2, [r3, #16]
 800df50:	887b      	ldrh	r3, [r7, #2]
 800df52:	4013      	ands	r3, r2
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800df58:	2301      	movs	r3, #1
 800df5a:	73fb      	strb	r3, [r7, #15]
 800df5c:	e001      	b.n	800df62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800df5e:	2300      	movs	r3, #0
 800df60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800df62:	7bfb      	ldrb	r3, [r7, #15]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3714      	adds	r7, #20
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	460b      	mov	r3, r1
 800df7a:	807b      	strh	r3, [r7, #2]
 800df7c:	4613      	mov	r3, r2
 800df7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800df80:	787b      	ldrb	r3, [r7, #1]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800df86:	887a      	ldrh	r2, [r7, #2]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800df8c:	e002      	b.n	800df94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800df8e:	887a      	ldrh	r2, [r7, #2]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800dfb2:	887a      	ldrh	r2, [r7, #2]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4013      	ands	r3, r2
 800dfb8:	041a      	lsls	r2, r3, #16
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	43d9      	mvns	r1, r3
 800dfbe:	887b      	ldrh	r3, [r7, #2]
 800dfc0:	400b      	ands	r3, r1
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	619a      	str	r2, [r3, #24]
}
 800dfc8:	bf00      	nop
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	4603      	mov	r3, r0
 800dfdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800dfde:	4b08      	ldr	r3, [pc, #32]	@ (800e000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dfe0:	68da      	ldr	r2, [r3, #12]
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d006      	beq.n	800dff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dfea:	4a05      	ldr	r2, [pc, #20]	@ (800e000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dfec:	88fb      	ldrh	r3, [r7, #6]
 800dfee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dff0:	88fb      	ldrh	r3, [r7, #6]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7f7 fd4e 	bl	8005a94 <HAL_GPIO_EXTI_Callback>
  }
}
 800dff8:	bf00      	nop
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	58000800 	.word	0x58000800

0800e004 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800e00a:	4b0a      	ldr	r3, [pc, #40]	@ (800e034 <HAL_HSEM_IRQHandler+0x30>)
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800e010:	4b08      	ldr	r3, [pc, #32]	@ (800e034 <HAL_HSEM_IRQHandler+0x30>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	43db      	mvns	r3, r3
 800e018:	4906      	ldr	r1, [pc, #24]	@ (800e034 <HAL_HSEM_IRQHandler+0x30>)
 800e01a:	4013      	ands	r3, r2
 800e01c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800e01e:	4a05      	ldr	r2, [pc, #20]	@ (800e034 <HAL_HSEM_IRQHandler+0x30>)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f807 	bl	800e038 <HAL_HSEM_FreeCallback>
}
 800e02a:	bf00      	nop
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	58001500 	.word	0x58001500

0800e038 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800e040:	bf00      	nop
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e04e:	b08b      	sub	sp, #44	@ 0x2c
 800e050:	af06      	add	r7, sp, #24
 800e052:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e0cb      	b.n	800e1f6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d106      	bne.n	800e078 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7fc ff64 	bl	800af40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2203      	movs	r2, #3
 800e07c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f005 f943 	bl	8013310 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]
 800e08e:	e040      	b.n	800e112 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e090:	7bfb      	ldrb	r3, [r7, #15]
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	1c5a      	adds	r2, r3, #1
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	440b      	add	r3, r1
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
 800e0a8:	6879      	ldr	r1, [r7, #4]
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	00db      	lsls	r3, r3, #3
 800e0b4:	440b      	add	r3, r1
 800e0b6:	7bfa      	ldrb	r2, [r7, #15]
 800e0b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	6879      	ldr	r1, [r7, #4]
 800e0be:	1c5a      	adds	r2, r3, #1
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	440b      	add	r3, r1
 800e0ca:	3303      	adds	r3, #3
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e0d0:	7bfa      	ldrb	r2, [r7, #15]
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	440b      	add	r3, r1
 800e0de:	3338      	adds	r3, #56	@ 0x38
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e0e4:	7bfa      	ldrb	r2, [r7, #15]
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4413      	add	r3, r2
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	440b      	add	r3, r1
 800e0f2:	333c      	adds	r3, #60	@ 0x3c
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e0f8:	7bfa      	ldrb	r2, [r7, #15]
 800e0fa:	6879      	ldr	r1, [r7, #4]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4413      	add	r3, r2
 800e102:	00db      	lsls	r3, r3, #3
 800e104:	440b      	add	r3, r1
 800e106:	3340      	adds	r3, #64	@ 0x40
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	3301      	adds	r3, #1
 800e110:	73fb      	strb	r3, [r7, #15]
 800e112:	7bfa      	ldrb	r2, [r7, #15]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d3b9      	bcc.n	800e090 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e11c:	2300      	movs	r3, #0
 800e11e:	73fb      	strb	r3, [r7, #15]
 800e120:	e044      	b.n	800e1ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e122:	7bfa      	ldrb	r2, [r7, #15]
 800e124:	6879      	ldr	r1, [r7, #4]
 800e126:	4613      	mov	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4413      	add	r3, r2
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	440b      	add	r3, r1
 800e130:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800e134:	2200      	movs	r2, #0
 800e136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e138:	7bfa      	ldrb	r2, [r7, #15]
 800e13a:	6879      	ldr	r1, [r7, #4]
 800e13c:	4613      	mov	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	00db      	lsls	r3, r3, #3
 800e144:	440b      	add	r3, r1
 800e146:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e14a:	7bfa      	ldrb	r2, [r7, #15]
 800e14c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e14e:	7bfa      	ldrb	r2, [r7, #15]
 800e150:	6879      	ldr	r1, [r7, #4]
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	00db      	lsls	r3, r3, #3
 800e15a:	440b      	add	r3, r1
 800e15c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800e160:	2200      	movs	r2, #0
 800e162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e164:	7bfa      	ldrb	r2, [r7, #15]
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	440b      	add	r3, r1
 800e172:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e176:	2200      	movs	r2, #0
 800e178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e17a:	7bfa      	ldrb	r2, [r7, #15]
 800e17c:	6879      	ldr	r1, [r7, #4]
 800e17e:	4613      	mov	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	440b      	add	r3, r1
 800e188:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e190:	7bfa      	ldrb	r2, [r7, #15]
 800e192:	6879      	ldr	r1, [r7, #4]
 800e194:	4613      	mov	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	440b      	add	r3, r1
 800e19e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1a6:	7bfb      	ldrb	r3, [r7, #15]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
 800e1ac:	7bfa      	ldrb	r2, [r7, #15]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d3b5      	bcc.n	800e122 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	687e      	ldr	r6, [r7, #4]
 800e1be:	466d      	mov	r5, sp
 800e1c0:	f106 0410 	add.w	r4, r6, #16
 800e1c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	602b      	str	r3, [r5, #0]
 800e1cc:	1d33      	adds	r3, r6, #4
 800e1ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1d0:	6838      	ldr	r0, [r7, #0]
 800e1d2:	f005 f8b8 	bl	8013346 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	69db      	ldr	r3, [r3, #28]
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d102      	bne.n	800e1f4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f805 	bl	800e1fe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e1fe:	b480      	push	{r7}
 800e200:	b085      	sub	sp, #20
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e222:	b29b      	uxth	r3, r3
 800e224:	f043 0301 	orr.w	r3, r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e236:	b29b      	uxth	r3, r3
 800e238:	f043 0302 	orr.w	r3, r3, #2
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3714      	adds	r7, #20
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b084      	sub	sp, #16
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800e25a:	2300      	movs	r3, #0
 800e25c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d01d      	beq.n	800e2a0 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	791b      	ldrb	r3, [r3, #4]
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7fc fd94 	bl	800ad9c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2201      	movs	r2, #1
 800e280:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	689a      	ldr	r2, [r3, #8]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800e290:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2201      	movs	r2, #1
 800e29c:	711a      	strb	r2, [r3, #4]
 800e29e:	e001      	b.n	800e2a4 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e2b4:	4b05      	ldr	r3, [pc, #20]	@ (800e2cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a04      	ldr	r2, [pc, #16]	@ (800e2cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e2ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2be:	6013      	str	r3, [r2, #0]
}
 800e2c0:	bf00      	nop
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	58000400 	.word	0x58000400

0800e2d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e2d4:	4b04      	ldr	r3, [pc, #16]	@ (800e2e8 <HAL_PWREx_GetVoltageRange+0x18>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	58000400 	.word	0x58000400

0800e2ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e2f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e2fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2fe:	d101      	bne.n	800e304 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e300:	2301      	movs	r3, #1
 800e302:	e000      	b.n	800e306 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <LL_RCC_HSE_Enable>:
{
 800e310:	b480      	push	{r7}
 800e312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e31e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e322:	6013      	str	r3, [r2, #0]
}
 800e324:	bf00      	nop
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <LL_RCC_HSE_Disable>:
{
 800e32e:	b480      	push	{r7}
 800e330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e33c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e340:	6013      	str	r3, [r2, #0]
}
 800e342:	bf00      	nop
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <LL_RCC_HSE_IsReady>:
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e35a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e35e:	d101      	bne.n	800e364 <LL_RCC_HSE_IsReady+0x18>
 800e360:	2301      	movs	r3, #1
 800e362:	e000      	b.n	800e366 <LL_RCC_HSE_IsReady+0x1a>
 800e364:	2300      	movs	r3, #0
}
 800e366:	4618      	mov	r0, r3
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <LL_RCC_HSI_Enable>:
{
 800e370:	b480      	push	{r7}
 800e372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e37e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e382:	6013      	str	r3, [r2, #0]
}
 800e384:	bf00      	nop
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <LL_RCC_HSI_Disable>:
{
 800e38e:	b480      	push	{r7}
 800e390:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e39c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3a0:	6013      	str	r3, [r2, #0]
}
 800e3a2:	bf00      	nop
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <LL_RCC_HSI_IsReady>:
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e3b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3be:	d101      	bne.n	800e3c4 <LL_RCC_HSI_IsReady+0x18>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e000      	b.n	800e3c6 <LL_RCC_HSI_IsReady+0x1a>
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e3d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	061b      	lsls	r3, r3, #24
 800e3e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	604b      	str	r3, [r1, #4]
}
 800e3ee:	bf00      	nop
 800e3f0:	370c      	adds	r7, #12
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <LL_RCC_HSI48_Enable>:
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e3fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e402:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e40a:	f043 0301 	orr.w	r3, r3, #1
 800e40e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e412:	bf00      	nop
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <LL_RCC_HSI48_Disable>:
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e42c:	f023 0301 	bic.w	r3, r3, #1
 800e430:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e434:	bf00      	nop
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <LL_RCC_HSI48_IsReady>:
{
 800e43e:	b480      	push	{r7}
 800e440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e446:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d101      	bne.n	800e456 <LL_RCC_HSI48_IsReady+0x18>
 800e452:	2301      	movs	r3, #1
 800e454:	e000      	b.n	800e458 <LL_RCC_HSI48_IsReady+0x1a>
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <LL_RCC_LSE_Enable>:
{
 800e462:	b480      	push	{r7}
 800e464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e46e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e472:	f043 0301 	orr.w	r3, r3, #1
 800e476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e47a:	bf00      	nop
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <LL_RCC_LSE_Disable>:
{
 800e484:	b480      	push	{r7}
 800e486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e490:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e494:	f023 0301 	bic.w	r3, r3, #1
 800e498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e49c:	bf00      	nop
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <LL_RCC_LSE_EnableBypass>:
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e4aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4b6:	f043 0304 	orr.w	r3, r3, #4
 800e4ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e4be:	bf00      	nop
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <LL_RCC_LSE_DisableBypass>:
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e4cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4d8:	f023 0304 	bic.w	r3, r3, #4
 800e4dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e4e0:	bf00      	nop
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <LL_RCC_LSE_IsReady>:
{
 800e4ea:	b480      	push	{r7}
 800e4ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e4ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4f6:	f003 0302 	and.w	r3, r3, #2
 800e4fa:	2b02      	cmp	r3, #2
 800e4fc:	d101      	bne.n	800e502 <LL_RCC_LSE_IsReady+0x18>
 800e4fe:	2301      	movs	r3, #1
 800e500:	e000      	b.n	800e504 <LL_RCC_LSE_IsReady+0x1a>
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <LL_RCC_LSI1_Enable>:
{
 800e50e:	b480      	push	{r7}
 800e510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e51a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e51e:	f043 0301 	orr.w	r3, r3, #1
 800e522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e526:	bf00      	nop
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <LL_RCC_LSI1_Disable>:
{
 800e530:	b480      	push	{r7}
 800e532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e53c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e540:	f023 0301 	bic.w	r3, r3, #1
 800e544:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e548:	bf00      	nop
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr

0800e552 <LL_RCC_LSI1_IsReady>:
{
 800e552:	b480      	push	{r7}
 800e554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e55a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e55e:	f003 0302 	and.w	r3, r3, #2
 800e562:	2b02      	cmp	r3, #2
 800e564:	d101      	bne.n	800e56a <LL_RCC_LSI1_IsReady+0x18>
 800e566:	2301      	movs	r3, #1
 800e568:	e000      	b.n	800e56c <LL_RCC_LSI1_IsReady+0x1a>
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <LL_RCC_LSI2_Enable>:
{
 800e576:	b480      	push	{r7}
 800e578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e57a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e57e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e582:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e586:	f043 0304 	orr.w	r3, r3, #4
 800e58a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e58e:	bf00      	nop
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <LL_RCC_LSI2_Disable>:
{
 800e598:	b480      	push	{r7}
 800e59a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e59c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e5a8:	f023 0304 	bic.w	r3, r3, #4
 800e5ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e5b0:	bf00      	nop
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <LL_RCC_LSI2_IsReady>:
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e5be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5c6:	f003 0308 	and.w	r3, r3, #8
 800e5ca:	2b08      	cmp	r3, #8
 800e5cc:	d101      	bne.n	800e5d2 <LL_RCC_LSI2_IsReady+0x18>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e000      	b.n	800e5d4 <LL_RCC_LSI2_IsReady+0x1a>
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <LL_RCC_LSI2_SetTrimming>:
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e5e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	021b      	lsls	r3, r3, #8
 800e5f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <LL_RCC_MSI_Enable>:
{
 800e60c:	b480      	push	{r7}
 800e60e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e61a:	f043 0301 	orr.w	r3, r3, #1
 800e61e:	6013      	str	r3, [r2, #0]
}
 800e620:	bf00      	nop
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <LL_RCC_MSI_Disable>:
{
 800e62a:	b480      	push	{r7}
 800e62c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e62e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e638:	f023 0301 	bic.w	r3, r3, #1
 800e63c:	6013      	str	r3, [r2, #0]
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <LL_RCC_MSI_IsReady>:
{
 800e648:	b480      	push	{r7}
 800e64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e64c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b02      	cmp	r3, #2
 800e658:	d101      	bne.n	800e65e <LL_RCC_MSI_IsReady+0x16>
 800e65a:	2301      	movs	r3, #1
 800e65c:	e000      	b.n	800e660 <LL_RCC_MSI_IsReady+0x18>
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <LL_RCC_MSI_SetRange>:
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e67c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4313      	orrs	r3, r2
 800e684:	600b      	str	r3, [r1, #0]
}
 800e686:	bf00      	nop
 800e688:	370c      	adds	r7, #12
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <LL_RCC_MSI_GetRange>:
{
 800e692:	b480      	push	{r7}
 800e694:	b083      	sub	sp, #12
 800e696:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e6a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2bb0      	cmp	r3, #176	@ 0xb0
 800e6a8:	d901      	bls.n	800e6ae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800e6aa:	23b0      	movs	r3, #176	@ 0xb0
 800e6ac:	607b      	str	r3, [r7, #4]
  return msiRange;
 800e6ae:	687b      	ldr	r3, [r7, #4]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <LL_RCC_MSI_SetCalibTrimming>:
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e6c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	604b      	str	r3, [r1, #4]
}
 800e6da:	bf00      	nop
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <LL_RCC_SetSysClkSource>:
{
 800e6e6:	b480      	push	{r7}
 800e6e8:	b083      	sub	sp, #12
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e6ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	f023 0203 	bic.w	r2, r3, #3
 800e6f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4313      	orrs	r3, r2
 800e700:	608b      	str	r3, [r1, #8]
}
 800e702:	bf00      	nop
 800e704:	370c      	adds	r7, #12
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <LL_RCC_GetSysClkSource>:
{
 800e70e:	b480      	push	{r7}
 800e710:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f003 030c 	and.w	r3, r3, #12
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <LL_RCC_SetAHBPrescaler>:
{
 800e726:	b480      	push	{r7}
 800e728:	b083      	sub	sp, #12
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e72e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4313      	orrs	r3, r2
 800e740:	608b      	str	r3, [r1, #8]
}
 800e742:	bf00      	nop
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <LL_C2_RCC_SetAHBPrescaler>:
{
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e75a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e75e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e762:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4313      	orrs	r3, r2
 800e76a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e76e:	bf00      	nop
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <LL_RCC_SetAHB4Prescaler>:
{
 800e77a:	b480      	push	{r7}
 800e77c:	b083      	sub	sp, #12
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e786:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e78a:	f023 020f 	bic.w	r2, r3, #15
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	091b      	lsrs	r3, r3, #4
 800e792:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e796:	4313      	orrs	r3, r2
 800e798:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <LL_RCC_SetAPB1Prescaler>:
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e7b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e7ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	608b      	str	r3, [r1, #8]
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <LL_RCC_SetAPB2Prescaler>:
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e7d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e7e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	608b      	str	r3, [r1, #8]
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <LL_RCC_GetAHBPrescaler>:
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e7fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e806:	4618      	mov	r0, r3
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <LL_RCC_GetAHB4Prescaler>:
{
 800e810:	b480      	push	{r7}
 800e812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e818:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e81c:	011b      	lsls	r3, r3, #4
 800e81e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e822:	4618      	mov	r0, r3
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <LL_RCC_GetAPB1Prescaler>:
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <LL_RCC_GetAPB2Prescaler>:
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e852:	4618      	mov	r0, r3
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e85c:	b480      	push	{r7}
 800e85e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e86a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e86e:	6013      	str	r3, [r2, #0]
}
 800e870:	bf00      	nop
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e87a:	b480      	push	{r7}
 800e87c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e87e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e88c:	6013      	str	r3, [r2, #0]
}
 800e88e:	bf00      	nop
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e898:	b480      	push	{r7}
 800e89a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e89c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8aa:	d101      	bne.n	800e8b0 <LL_RCC_PLL_IsReady+0x18>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e000      	b.n	800e8b2 <LL_RCC_PLL_IsReady+0x1a>
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e8c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	0a1b      	lsrs	r3, r3, #8
 800e8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e8da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr

0800e8ee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e8f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e906:	b480      	push	{r7}
 800e908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e90a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	f003 0303 	and.w	r3, r3, #3
}
 800e914:	4618      	mov	r0, r3
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800e91e:	b480      	push	{r7}
 800e920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e930:	d101      	bne.n	800e936 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e932:	2301      	movs	r3, #1
 800e934:	e000      	b.n	800e938 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800e942:	b480      	push	{r7}
 800e944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e94a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e94e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e956:	d101      	bne.n	800e95c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e958:	2301      	movs	r3, #1
 800e95a:	e000      	b.n	800e95e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800e968:	b480      	push	{r7}
 800e96a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e96c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e970:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e97c:	d101      	bne.n	800e982 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e97e:	2301      	movs	r3, #1
 800e980:	e000      	b.n	800e984 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800e98e:	b480      	push	{r7}
 800e990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e99c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9a0:	d101      	bne.n	800e9a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e000      	b.n	800e9a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800e9b2:	b480      	push	{r7}
 800e9b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e9b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e9c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e9c4:	d101      	bne.n	800e9ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e000      	b.n	800e9cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
	...

0800e9d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e9d8:	b590      	push	{r4, r7, lr}
 800e9da:	b08d      	sub	sp, #52	@ 0x34
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e363      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f003 0320 	and.w	r3, r3, #32
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f000 808d 	beq.w	800eb12 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e9f8:	f7ff fe89 	bl	800e70e <LL_RCC_GetSysClkSource>
 800e9fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e9fe:	f7ff ff82 	bl	800e906 <LL_RCC_PLL_GetMainSource>
 800ea02:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ea04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d005      	beq.n	800ea16 <HAL_RCC_OscConfig+0x3e>
 800ea0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0c:	2b0c      	cmp	r3, #12
 800ea0e:	d147      	bne.n	800eaa0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800ea10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d144      	bne.n	800eaa0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	69db      	ldr	r3, [r3, #28]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d101      	bne.n	800ea22 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e347      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ea26:	f7ff fe34 	bl	800e692 <LL_RCC_MSI_GetRange>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	429c      	cmp	r4, r3
 800ea2e:	d914      	bls.n	800ea5a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea34:	4618      	mov	r0, r3
 800ea36:	f000 fd2f 	bl	800f498 <RCC_SetFlashLatencyFromMSIRange>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d001      	beq.n	800ea44 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800ea40:	2301      	movs	r3, #1
 800ea42:	e336      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7ff fe0e 	bl	800e66a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff fe32 	bl	800e6bc <LL_RCC_MSI_SetCalibTrimming>
 800ea58:	e013      	b.n	800ea82 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7ff fe03 	bl	800e66a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff fe27 	bl	800e6bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 fd10 	bl	800f498 <RCC_SetFlashLatencyFromMSIRange>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d001      	beq.n	800ea82 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e317      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ea82:	f000 fcc9 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 800ea86:	4603      	mov	r3, r0
 800ea88:	4aa4      	ldr	r2, [pc, #656]	@ (800ed1c <HAL_RCC_OscConfig+0x344>)
 800ea8a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ea8c:	4ba4      	ldr	r3, [pc, #656]	@ (800ed20 <HAL_RCC_OscConfig+0x348>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fe fc73 	bl	800d37c <HAL_InitTick>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d039      	beq.n	800eb10 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e308      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	69db      	ldr	r3, [r3, #28]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01e      	beq.n	800eae6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800eaa8:	f7ff fdb0 	bl	800e60c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800eaac:	f7fe fcb4 	bl	800d418 <HAL_GetTick>
 800eab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800eab2:	e008      	b.n	800eac6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eab4:	f7fe fcb0 	bl	800d418 <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d901      	bls.n	800eac6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800eac2:	2303      	movs	r3, #3
 800eac4:	e2f5      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800eac6:	f7ff fdbf 	bl	800e648 <LL_RCC_MSI_IsReady>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0f1      	beq.n	800eab4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fdc8 	bl	800e66a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff fdec 	bl	800e6bc <LL_RCC_MSI_SetCalibTrimming>
 800eae4:	e015      	b.n	800eb12 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800eae6:	f7ff fda0 	bl	800e62a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800eaea:	f7fe fc95 	bl	800d418 <HAL_GetTick>
 800eaee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800eaf0:	e008      	b.n	800eb04 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eaf2:	f7fe fc91 	bl	800d418 <HAL_GetTick>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d901      	bls.n	800eb04 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800eb00:	2303      	movs	r3, #3
 800eb02:	e2d6      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800eb04:	f7ff fda0 	bl	800e648 <LL_RCC_MSI_IsReady>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1f1      	bne.n	800eaf2 <HAL_RCC_OscConfig+0x11a>
 800eb0e:	e000      	b.n	800eb12 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800eb10:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f003 0301 	and.w	r3, r3, #1
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d047      	beq.n	800ebae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb1e:	f7ff fdf6 	bl	800e70e <LL_RCC_GetSysClkSource>
 800eb22:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800eb24:	f7ff feef 	bl	800e906 <LL_RCC_PLL_GetMainSource>
 800eb28:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800eb2a:	6a3b      	ldr	r3, [r7, #32]
 800eb2c:	2b08      	cmp	r3, #8
 800eb2e:	d005      	beq.n	800eb3c <HAL_RCC_OscConfig+0x164>
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	2b0c      	cmp	r3, #12
 800eb34:	d108      	bne.n	800eb48 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	2b03      	cmp	r3, #3
 800eb3a:	d105      	bne.n	800eb48 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d134      	bne.n	800ebae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	e2b4      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb50:	d102      	bne.n	800eb58 <HAL_RCC_OscConfig+0x180>
 800eb52:	f7ff fbdd 	bl	800e310 <LL_RCC_HSE_Enable>
 800eb56:	e001      	b.n	800eb5c <HAL_RCC_OscConfig+0x184>
 800eb58:	f7ff fbe9 	bl	800e32e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d012      	beq.n	800eb8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb64:	f7fe fc58 	bl	800d418 <HAL_GetTick>
 800eb68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800eb6a:	e008      	b.n	800eb7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb6c:	f7fe fc54 	bl	800d418 <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	2b64      	cmp	r3, #100	@ 0x64
 800eb78:	d901      	bls.n	800eb7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e299      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800eb7e:	f7ff fbe5 	bl	800e34c <LL_RCC_HSE_IsReady>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d0f1      	beq.n	800eb6c <HAL_RCC_OscConfig+0x194>
 800eb88:	e011      	b.n	800ebae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb8a:	f7fe fc45 	bl	800d418 <HAL_GetTick>
 800eb8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800eb90:	e008      	b.n	800eba4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb92:	f7fe fc41 	bl	800d418 <HAL_GetTick>
 800eb96:	4602      	mov	r2, r0
 800eb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	2b64      	cmp	r3, #100	@ 0x64
 800eb9e:	d901      	bls.n	800eba4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e286      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800eba4:	f7ff fbd2 	bl	800e34c <LL_RCC_HSE_IsReady>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1f1      	bne.n	800eb92 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f003 0302 	and.w	r3, r3, #2
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d04c      	beq.n	800ec54 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ebba:	f7ff fda8 	bl	800e70e <LL_RCC_GetSysClkSource>
 800ebbe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ebc0:	f7ff fea1 	bl	800e906 <LL_RCC_PLL_GetMainSource>
 800ebc4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	2b04      	cmp	r3, #4
 800ebca:	d005      	beq.n	800ebd8 <HAL_RCC_OscConfig+0x200>
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	2b0c      	cmp	r3, #12
 800ebd0:	d10e      	bne.n	800ebf0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d10b      	bne.n	800ebf0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d101      	bne.n	800ebe4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e266      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7ff fbf1 	bl	800e3d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ebee:	e031      	b.n	800ec54 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d019      	beq.n	800ec2c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ebf8:	f7ff fbba 	bl	800e370 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebfc:	f7fe fc0c 	bl	800d418 <HAL_GetTick>
 800ec00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ec02:	e008      	b.n	800ec16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec04:	f7fe fc08 	bl	800d418 <HAL_GetTick>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d901      	bls.n	800ec16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e24d      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ec16:	f7ff fbc9 	bl	800e3ac <LL_RCC_HSI_IsReady>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0f1      	beq.n	800ec04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff fbd3 	bl	800e3d0 <LL_RCC_HSI_SetCalibTrimming>
 800ec2a:	e013      	b.n	800ec54 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec2c:	f7ff fbaf 	bl	800e38e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec30:	f7fe fbf2 	bl	800d418 <HAL_GetTick>
 800ec34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ec36:	e008      	b.n	800ec4a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec38:	f7fe fbee 	bl	800d418 <HAL_GetTick>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d901      	bls.n	800ec4a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ec46:	2303      	movs	r3, #3
 800ec48:	e233      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ec4a:	f7ff fbaf 	bl	800e3ac <LL_RCC_HSI_IsReady>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1f1      	bne.n	800ec38 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f003 0308 	and.w	r3, r3, #8
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d106      	bne.n	800ec6e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f000 80a3 	beq.w	800edb4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	695b      	ldr	r3, [r3, #20]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d076      	beq.n	800ed64 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 0310 	and.w	r3, r3, #16
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d046      	beq.n	800ed10 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ec82:	f7ff fc66 	bl	800e552 <LL_RCC_LSI1_IsReady>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d113      	bne.n	800ecb4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ec8c:	f7ff fc3f 	bl	800e50e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ec90:	f7fe fbc2 	bl	800d418 <HAL_GetTick>
 800ec94:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ec96:	e008      	b.n	800ecaa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ec98:	f7fe fbbe 	bl	800d418 <HAL_GetTick>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d901      	bls.n	800ecaa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800eca6:	2303      	movs	r3, #3
 800eca8:	e203      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ecaa:	f7ff fc52 	bl	800e552 <LL_RCC_LSI1_IsReady>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d0f1      	beq.n	800ec98 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ecb4:	f7ff fc5f 	bl	800e576 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecb8:	f7fe fbae 	bl	800d418 <HAL_GetTick>
 800ecbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ecbe:	e008      	b.n	800ecd2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ecc0:	f7fe fbaa 	bl	800d418 <HAL_GetTick>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d901      	bls.n	800ecd2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ecce:	2303      	movs	r3, #3
 800ecd0:	e1ef      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ecd2:	f7ff fc72 	bl	800e5ba <LL_RCC_LSI2_IsReady>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d0f1      	beq.n	800ecc0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	699b      	ldr	r3, [r3, #24]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff fc7c 	bl	800e5de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ece6:	f7ff fc23 	bl	800e530 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecea:	f7fe fb95 	bl	800d418 <HAL_GetTick>
 800ecee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ecf0:	e008      	b.n	800ed04 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ecf2:	f7fe fb91 	bl	800d418 <HAL_GetTick>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	1ad3      	subs	r3, r2, r3
 800ecfc:	2b02      	cmp	r3, #2
 800ecfe:	d901      	bls.n	800ed04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ed00:	2303      	movs	r3, #3
 800ed02:	e1d6      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ed04:	f7ff fc25 	bl	800e552 <LL_RCC_LSI1_IsReady>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1f1      	bne.n	800ecf2 <HAL_RCC_OscConfig+0x31a>
 800ed0e:	e051      	b.n	800edb4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ed10:	f7ff fbfd 	bl	800e50e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed14:	f7fe fb80 	bl	800d418 <HAL_GetTick>
 800ed18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ed1a:	e00c      	b.n	800ed36 <HAL_RCC_OscConfig+0x35e>
 800ed1c:	20000014 	.word	0x20000014
 800ed20:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ed24:	f7fe fb78 	bl	800d418 <HAL_GetTick>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d901      	bls.n	800ed36 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e1bd      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ed36:	f7ff fc0c 	bl	800e552 <LL_RCC_LSI1_IsReady>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d0f1      	beq.n	800ed24 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ed40:	f7ff fc2a 	bl	800e598 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ed44:	e008      	b.n	800ed58 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ed46:	f7fe fb67 	bl	800d418 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d901      	bls.n	800ed58 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e1ac      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ed58:	f7ff fc2f 	bl	800e5ba <LL_RCC_LSI2_IsReady>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1f1      	bne.n	800ed46 <HAL_RCC_OscConfig+0x36e>
 800ed62:	e027      	b.n	800edb4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ed64:	f7ff fc18 	bl	800e598 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed68:	f7fe fb56 	bl	800d418 <HAL_GetTick>
 800ed6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ed6e:	e008      	b.n	800ed82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ed70:	f7fe fb52 	bl	800d418 <HAL_GetTick>
 800ed74:	4602      	mov	r2, r0
 800ed76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	2b03      	cmp	r3, #3
 800ed7c:	d901      	bls.n	800ed82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ed7e:	2303      	movs	r3, #3
 800ed80:	e197      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ed82:	f7ff fc1a 	bl	800e5ba <LL_RCC_LSI2_IsReady>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1f1      	bne.n	800ed70 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ed8c:	f7ff fbd0 	bl	800e530 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed90:	f7fe fb42 	bl	800d418 <HAL_GetTick>
 800ed94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ed96:	e008      	b.n	800edaa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ed98:	f7fe fb3e 	bl	800d418 <HAL_GetTick>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d901      	bls.n	800edaa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800eda6:	2303      	movs	r3, #3
 800eda8:	e183      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800edaa:	f7ff fbd2 	bl	800e552 <LL_RCC_LSI1_IsReady>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1f1      	bne.n	800ed98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f003 0304 	and.w	r3, r3, #4
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d05b      	beq.n	800ee78 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800edc0:	4ba7      	ldr	r3, [pc, #668]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d114      	bne.n	800edf6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800edcc:	f7ff fa70 	bl	800e2b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800edd0:	f7fe fb22 	bl	800d418 <HAL_GetTick>
 800edd4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800edd6:	e008      	b.n	800edea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800edd8:	f7fe fb1e 	bl	800d418 <HAL_GetTick>
 800eddc:	4602      	mov	r2, r0
 800edde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	2b02      	cmp	r3, #2
 800ede4:	d901      	bls.n	800edea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ede6:	2303      	movs	r3, #3
 800ede8:	e163      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800edea:	4b9d      	ldr	r3, [pc, #628]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d0f0      	beq.n	800edd8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d102      	bne.n	800ee04 <HAL_RCC_OscConfig+0x42c>
 800edfe:	f7ff fb30 	bl	800e462 <LL_RCC_LSE_Enable>
 800ee02:	e00c      	b.n	800ee1e <HAL_RCC_OscConfig+0x446>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	2b05      	cmp	r3, #5
 800ee0a:	d104      	bne.n	800ee16 <HAL_RCC_OscConfig+0x43e>
 800ee0c:	f7ff fb4b 	bl	800e4a6 <LL_RCC_LSE_EnableBypass>
 800ee10:	f7ff fb27 	bl	800e462 <LL_RCC_LSE_Enable>
 800ee14:	e003      	b.n	800ee1e <HAL_RCC_OscConfig+0x446>
 800ee16:	f7ff fb35 	bl	800e484 <LL_RCC_LSE_Disable>
 800ee1a:	f7ff fb55 	bl	800e4c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d014      	beq.n	800ee50 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee26:	f7fe faf7 	bl	800d418 <HAL_GetTick>
 800ee2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ee2c:	e00a      	b.n	800ee44 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee2e:	f7fe faf3 	bl	800d418 <HAL_GetTick>
 800ee32:	4602      	mov	r2, r0
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d901      	bls.n	800ee44 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ee40:	2303      	movs	r3, #3
 800ee42:	e136      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ee44:	f7ff fb51 	bl	800e4ea <LL_RCC_LSE_IsReady>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d0ef      	beq.n	800ee2e <HAL_RCC_OscConfig+0x456>
 800ee4e:	e013      	b.n	800ee78 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee50:	f7fe fae2 	bl	800d418 <HAL_GetTick>
 800ee54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ee56:	e00a      	b.n	800ee6e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee58:	f7fe fade 	bl	800d418 <HAL_GetTick>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d901      	bls.n	800ee6e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	e121      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ee6e:	f7ff fb3c 	bl	800e4ea <LL_RCC_LSE_IsReady>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1ef      	bne.n	800ee58 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d02c      	beq.n	800eede <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d014      	beq.n	800eeb6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ee8c:	f7ff fab5 	bl	800e3fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee90:	f7fe fac2 	bl	800d418 <HAL_GetTick>
 800ee94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ee96:	e008      	b.n	800eeaa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ee98:	f7fe fabe 	bl	800d418 <HAL_GetTick>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	2b02      	cmp	r3, #2
 800eea4:	d901      	bls.n	800eeaa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800eea6:	2303      	movs	r3, #3
 800eea8:	e103      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800eeaa:	f7ff fac8 	bl	800e43e <LL_RCC_HSI48_IsReady>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0f1      	beq.n	800ee98 <HAL_RCC_OscConfig+0x4c0>
 800eeb4:	e013      	b.n	800eede <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eeb6:	f7ff fab1 	bl	800e41c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eeba:	f7fe faad 	bl	800d418 <HAL_GetTick>
 800eebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800eec0:	e008      	b.n	800eed4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eec2:	f7fe faa9 	bl	800d418 <HAL_GetTick>
 800eec6:	4602      	mov	r2, r0
 800eec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d901      	bls.n	800eed4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e0ee      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800eed4:	f7ff fab3 	bl	800e43e <LL_RCC_HSI48_IsReady>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1f1      	bne.n	800eec2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f000 80e4 	beq.w	800f0b0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eee8:	f7ff fc11 	bl	800e70e <LL_RCC_GetSysClkSource>
 800eeec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800eeee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	f040 80b4 	bne.w	800f068 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f003 0203 	and.w	r2, r3, #3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d123      	bne.n	800ef56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d11c      	bne.n	800ef56 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	0a1b      	lsrs	r3, r3, #8
 800ef20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d114      	bne.n	800ef56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d10d      	bne.n	800ef56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d106      	bne.n	800ef56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d05d      	beq.n	800f012 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b0c      	cmp	r3, #12
 800ef5a:	d058      	beq.n	800f00e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ef5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e0a1      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ef6e:	f7ff fc84 	bl	800e87a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ef72:	f7fe fa51 	bl	800d418 <HAL_GetTick>
 800ef76:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef78:	e008      	b.n	800ef8c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef7a:	f7fe fa4d 	bl	800d418 <HAL_GetTick>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d901      	bls.n	800ef8c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e092      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1ef      	bne.n	800ef7a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef9e:	68da      	ldr	r2, [r3, #12]
 800efa0:	4b30      	ldr	r3, [pc, #192]	@ (800f064 <HAL_RCC_OscConfig+0x68c>)
 800efa2:	4013      	ands	r3, r2
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800efac:	4311      	orrs	r1, r2
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800efb2:	0212      	lsls	r2, r2, #8
 800efb4:	4311      	orrs	r1, r2
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800efba:	4311      	orrs	r1, r2
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800efc0:	4311      	orrs	r1, r2
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800efc6:	430a      	orrs	r2, r1
 800efc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800efcc:	4313      	orrs	r3, r2
 800efce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800efd0:	f7ff fc44 	bl	800e85c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800efd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800efde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800efe4:	f7fe fa18 	bl	800d418 <HAL_GetTick>
 800efe8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efea:	e008      	b.n	800effe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efec:	f7fe fa14 	bl	800d418 <HAL_GetTick>
 800eff0:	4602      	mov	r2, r0
 800eff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d901      	bls.n	800effe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800effa:	2303      	movs	r3, #3
 800effc:	e059      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800effe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d0ef      	beq.n	800efec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f00c:	e050      	b.n	800f0b0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	e04f      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d147      	bne.n	800f0b0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f020:	f7ff fc1c 	bl	800e85c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f02e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f032:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f034:	f7fe f9f0 	bl	800d418 <HAL_GetTick>
 800f038:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f03a:	e008      	b.n	800f04e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f03c:	f7fe f9ec 	bl	800d418 <HAL_GetTick>
 800f040:	4602      	mov	r2, r0
 800f042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f044:	1ad3      	subs	r3, r2, r3
 800f046:	2b02      	cmp	r3, #2
 800f048:	d901      	bls.n	800f04e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800f04a:	2303      	movs	r3, #3
 800f04c:	e031      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d0ef      	beq.n	800f03c <HAL_RCC_OscConfig+0x664>
 800f05c:	e028      	b.n	800f0b0 <HAL_RCC_OscConfig+0x6d8>
 800f05e:	bf00      	nop
 800f060:	58000400 	.word	0x58000400
 800f064:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2b0c      	cmp	r3, #12
 800f06c:	d01e      	beq.n	800f0ac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f06e:	f7ff fc04 	bl	800e87a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f072:	f7fe f9d1 	bl	800d418 <HAL_GetTick>
 800f076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f078:	e008      	b.n	800f08c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f07a:	f7fe f9cd 	bl	800d418 <HAL_GetTick>
 800f07e:	4602      	mov	r2, r0
 800f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	2b02      	cmp	r3, #2
 800f086:	d901      	bls.n	800f08c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800f088:	2303      	movs	r3, #3
 800f08a:	e012      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1ef      	bne.n	800f07a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f09a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f09e:	68da      	ldr	r2, [r3, #12]
 800f0a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0a4:	4b05      	ldr	r3, [pc, #20]	@ (800f0bc <HAL_RCC_OscConfig+0x6e4>)
 800f0a6:	4013      	ands	r3, r2
 800f0a8:	60cb      	str	r3, [r1, #12]
 800f0aa:	e001      	b.n	800f0b0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e000      	b.n	800f0b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3734      	adds	r7, #52	@ 0x34
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd90      	pop	{r4, r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	eefefffc 	.word	0xeefefffc

0800f0c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d101      	bne.n	800f0d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e12d      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f0d4:	4b98      	ldr	r3, [pc, #608]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f003 0307 	and.w	r3, r3, #7
 800f0dc:	683a      	ldr	r2, [r7, #0]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d91b      	bls.n	800f11a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0e2:	4b95      	ldr	r3, [pc, #596]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f023 0207 	bic.w	r2, r3, #7
 800f0ea:	4993      	ldr	r1, [pc, #588]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0f2:	f7fe f991 	bl	800d418 <HAL_GetTick>
 800f0f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0f8:	e008      	b.n	800f10c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f0fa:	f7fe f98d 	bl	800d418 <HAL_GetTick>
 800f0fe:	4602      	mov	r2, r0
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	2b02      	cmp	r3, #2
 800f106:	d901      	bls.n	800f10c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800f108:	2303      	movs	r3, #3
 800f10a:	e111      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f10c:	4b8a      	ldr	r3, [pc, #552]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f003 0307 	and.w	r3, r3, #7
 800f114:	683a      	ldr	r2, [r7, #0]
 800f116:	429a      	cmp	r2, r3
 800f118:	d1ef      	bne.n	800f0fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f003 0302 	and.w	r3, r3, #2
 800f122:	2b00      	cmp	r3, #0
 800f124:	d016      	beq.n	800f154 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7ff fafb 	bl	800e726 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f130:	f7fe f972 	bl	800d418 <HAL_GetTick>
 800f134:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f136:	e008      	b.n	800f14a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f138:	f7fe f96e 	bl	800d418 <HAL_GetTick>
 800f13c:	4602      	mov	r2, r0
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	2b02      	cmp	r3, #2
 800f144:	d901      	bls.n	800f14a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f146:	2303      	movs	r3, #3
 800f148:	e0f2      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f14a:	f7ff fbe8 	bl	800e91e <LL_RCC_IsActiveFlag_HPRE>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d0f1      	beq.n	800f138 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0320 	and.w	r3, r3, #32
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d016      	beq.n	800f18e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	695b      	ldr	r3, [r3, #20]
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff faf2 	bl	800e74e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f16a:	f7fe f955 	bl	800d418 <HAL_GetTick>
 800f16e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f170:	e008      	b.n	800f184 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f172:	f7fe f951 	bl	800d418 <HAL_GetTick>
 800f176:	4602      	mov	r2, r0
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d901      	bls.n	800f184 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800f180:	2303      	movs	r3, #3
 800f182:	e0d5      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f184:	f7ff fbdd 	bl	800e942 <LL_RCC_IsActiveFlag_C2HPRE>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d0f1      	beq.n	800f172 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f196:	2b00      	cmp	r3, #0
 800f198:	d016      	beq.n	800f1c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff faeb 	bl	800e77a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f1a4:	f7fe f938 	bl	800d418 <HAL_GetTick>
 800f1a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f1aa:	e008      	b.n	800f1be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f1ac:	f7fe f934 	bl	800d418 <HAL_GetTick>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d901      	bls.n	800f1be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	e0b8      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f1be:	f7ff fbd3 	bl	800e968 <LL_RCC_IsActiveFlag_SHDHPRE>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d0f1      	beq.n	800f1ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d016      	beq.n	800f202 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fae5 	bl	800e7a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f1de:	f7fe f91b 	bl	800d418 <HAL_GetTick>
 800f1e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f1e4:	e008      	b.n	800f1f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f1e6:	f7fe f917 	bl	800d418 <HAL_GetTick>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d901      	bls.n	800f1f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	e09b      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f1f8:	f7ff fbc9 	bl	800e98e <LL_RCC_IsActiveFlag_PPRE1>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0f1      	beq.n	800f1e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f003 0308 	and.w	r3, r3, #8
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d017      	beq.n	800f23e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	4618      	mov	r0, r3
 800f216:	f7ff fadb 	bl	800e7d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f21a:	f7fe f8fd 	bl	800d418 <HAL_GetTick>
 800f21e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f220:	e008      	b.n	800f234 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f222:	f7fe f8f9 	bl	800d418 <HAL_GetTick>
 800f226:	4602      	mov	r2, r0
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	2b02      	cmp	r3, #2
 800f22e:	d901      	bls.n	800f234 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f230:	2303      	movs	r3, #3
 800f232:	e07d      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f234:	f7ff fbbd 	bl	800e9b2 <LL_RCC_IsActiveFlag_PPRE2>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0f1      	beq.n	800f222 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	2b00      	cmp	r3, #0
 800f248:	d043      	beq.n	800f2d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d106      	bne.n	800f260 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f252:	f7ff f87b 	bl	800e34c <LL_RCC_HSE_IsReady>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d11e      	bne.n	800f29a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e067      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	2b03      	cmp	r3, #3
 800f266:	d106      	bne.n	800f276 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f268:	f7ff fb16 	bl	800e898 <LL_RCC_PLL_IsReady>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d113      	bne.n	800f29a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f272:	2301      	movs	r3, #1
 800f274:	e05c      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f27e:	f7ff f9e3 	bl	800e648 <LL_RCC_MSI_IsReady>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d108      	bne.n	800f29a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f288:	2301      	movs	r3, #1
 800f28a:	e051      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f28c:	f7ff f88e 	bl	800e3ac <LL_RCC_HSI_IsReady>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d101      	bne.n	800f29a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	e04a      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff fa21 	bl	800e6e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2a4:	f7fe f8b8 	bl	800d418 <HAL_GetTick>
 800f2a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2aa:	e00a      	b.n	800f2c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2ac:	f7fe f8b4 	bl	800d418 <HAL_GetTick>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d901      	bls.n	800f2c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	e036      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2c2:	f7ff fa24 	bl	800e70e <LL_RCC_GetSysClkSource>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d1ec      	bne.n	800f2ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f2d2:	4b19      	ldr	r3, [pc, #100]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f003 0307 	and.w	r3, r3, #7
 800f2da:	683a      	ldr	r2, [r7, #0]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d21b      	bcs.n	800f318 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f2e0:	4b15      	ldr	r3, [pc, #84]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f023 0207 	bic.w	r2, r3, #7
 800f2e8:	4913      	ldr	r1, [pc, #76]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2f0:	f7fe f892 	bl	800d418 <HAL_GetTick>
 800f2f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f2f6:	e008      	b.n	800f30a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f2f8:	f7fe f88e 	bl	800d418 <HAL_GetTick>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	2b02      	cmp	r3, #2
 800f304:	d901      	bls.n	800f30a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f306:	2303      	movs	r3, #3
 800f308:	e012      	b.n	800f330 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f30a:	4b0b      	ldr	r3, [pc, #44]	@ (800f338 <HAL_RCC_ClockConfig+0x278>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f003 0307 	and.w	r3, r3, #7
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	429a      	cmp	r2, r3
 800f316:	d1ef      	bne.n	800f2f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f318:	f000 f87e 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 800f31c:	4603      	mov	r3, r0
 800f31e:	4a07      	ldr	r2, [pc, #28]	@ (800f33c <HAL_RCC_ClockConfig+0x27c>)
 800f320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f322:	f7fe f885 	bl	800d430 <HAL_GetTickPrio>
 800f326:	4603      	mov	r3, r0
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fe f827 	bl	800d37c <HAL_InitTick>
 800f32e:	4603      	mov	r3, r0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	58004000 	.word	0x58004000
 800f33c:	20000014 	.word	0x20000014

0800f340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f340:	b590      	push	{r4, r7, lr}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f346:	f7ff f9e2 	bl	800e70e <LL_RCC_GetSysClkSource>
 800f34a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f352:	f7ff f99e 	bl	800e692 <LL_RCC_MSI_GetRange>
 800f356:	4603      	mov	r3, r0
 800f358:	091b      	lsrs	r3, r3, #4
 800f35a:	f003 030f 	and.w	r3, r3, #15
 800f35e:	4a2b      	ldr	r2, [pc, #172]	@ (800f40c <HAL_RCC_GetSysClockFreq+0xcc>)
 800f360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f364:	60fb      	str	r3, [r7, #12]
 800f366:	e04b      	b.n	800f400 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	d102      	bne.n	800f374 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f36e:	4b28      	ldr	r3, [pc, #160]	@ (800f410 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f370:	60fb      	str	r3, [r7, #12]
 800f372:	e045      	b.n	800f400 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b08      	cmp	r3, #8
 800f378:	d10a      	bne.n	800f390 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f37a:	f7fe ffb7 	bl	800e2ec <LL_RCC_HSE_IsEnabledDiv2>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b01      	cmp	r3, #1
 800f382:	d102      	bne.n	800f38a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f384:	4b22      	ldr	r3, [pc, #136]	@ (800f410 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f386:	60fb      	str	r3, [r7, #12]
 800f388:	e03a      	b.n	800f400 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f38a:	4b22      	ldr	r3, [pc, #136]	@ (800f414 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	e037      	b.n	800f400 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f390:	f7ff fab9 	bl	800e906 <LL_RCC_PLL_GetMainSource>
 800f394:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b02      	cmp	r3, #2
 800f39a:	d003      	beq.n	800f3a4 <HAL_RCC_GetSysClockFreq+0x64>
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	2b03      	cmp	r3, #3
 800f3a0:	d003      	beq.n	800f3aa <HAL_RCC_GetSysClockFreq+0x6a>
 800f3a2:	e00d      	b.n	800f3c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f410 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f3a6:	60bb      	str	r3, [r7, #8]
        break;
 800f3a8:	e015      	b.n	800f3d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f3aa:	f7fe ff9f 	bl	800e2ec <LL_RCC_HSE_IsEnabledDiv2>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d102      	bne.n	800f3ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f3b4:	4b16      	ldr	r3, [pc, #88]	@ (800f410 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f3b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f3b8:	e00d      	b.n	800f3d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f3ba:	4b16      	ldr	r3, [pc, #88]	@ (800f414 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f3bc:	60bb      	str	r3, [r7, #8]
        break;
 800f3be:	e00a      	b.n	800f3d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f3c0:	f7ff f967 	bl	800e692 <LL_RCC_MSI_GetRange>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	091b      	lsrs	r3, r3, #4
 800f3c8:	f003 030f 	and.w	r3, r3, #15
 800f3cc:	4a0f      	ldr	r2, [pc, #60]	@ (800f40c <HAL_RCC_GetSysClockFreq+0xcc>)
 800f3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d2:	60bb      	str	r3, [r7, #8]
        break;
 800f3d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f3d6:	f7ff fa71 	bl	800e8bc <LL_RCC_PLL_GetN>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	fb03 f402 	mul.w	r4, r3, r2
 800f3e2:	f7ff fa84 	bl	800e8ee <LL_RCC_PLL_GetDivider>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	091b      	lsrs	r3, r3, #4
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	fbb4 f4f3 	udiv	r4, r4, r3
 800f3f0:	f7ff fa71 	bl	800e8d6 <LL_RCC_PLL_GetR>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	0f5b      	lsrs	r3, r3, #29
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	fbb4 f3f3 	udiv	r3, r4, r3
 800f3fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f400:	68fb      	ldr	r3, [r7, #12]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	bd90      	pop	{r4, r7, pc}
 800f40a:	bf00      	nop
 800f40c:	08018fbc 	.word	0x08018fbc
 800f410:	00f42400 	.word	0x00f42400
 800f414:	01e84800 	.word	0x01e84800

0800f418 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f418:	b598      	push	{r3, r4, r7, lr}
 800f41a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f41c:	f7ff ff90 	bl	800f340 <HAL_RCC_GetSysClockFreq>
 800f420:	4604      	mov	r4, r0
 800f422:	f7ff f9e9 	bl	800e7f8 <LL_RCC_GetAHBPrescaler>
 800f426:	4603      	mov	r3, r0
 800f428:	091b      	lsrs	r3, r3, #4
 800f42a:	f003 030f 	and.w	r3, r3, #15
 800f42e:	4a03      	ldr	r2, [pc, #12]	@ (800f43c <HAL_RCC_GetHCLKFreq+0x24>)
 800f430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f434:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f438:	4618      	mov	r0, r3
 800f43a:	bd98      	pop	{r3, r4, r7, pc}
 800f43c:	08018f5c 	.word	0x08018f5c

0800f440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f440:	b598      	push	{r3, r4, r7, lr}
 800f442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f444:	f7ff ffe8 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 800f448:	4604      	mov	r4, r0
 800f44a:	f7ff f9ef 	bl	800e82c <LL_RCC_GetAPB1Prescaler>
 800f44e:	4603      	mov	r3, r0
 800f450:	0a1b      	lsrs	r3, r3, #8
 800f452:	f003 0307 	and.w	r3, r3, #7
 800f456:	4a04      	ldr	r2, [pc, #16]	@ (800f468 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f45c:	f003 031f 	and.w	r3, r3, #31
 800f460:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f464:	4618      	mov	r0, r3
 800f466:	bd98      	pop	{r3, r4, r7, pc}
 800f468:	08018f9c 	.word	0x08018f9c

0800f46c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f46c:	b598      	push	{r3, r4, r7, lr}
 800f46e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f470:	f7ff ffd2 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 800f474:	4604      	mov	r4, r0
 800f476:	f7ff f9e5 	bl	800e844 <LL_RCC_GetAPB2Prescaler>
 800f47a:	4603      	mov	r3, r0
 800f47c:	0adb      	lsrs	r3, r3, #11
 800f47e:	f003 0307 	and.w	r3, r3, #7
 800f482:	4a04      	ldr	r2, [pc, #16]	@ (800f494 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f488:	f003 031f 	and.w	r3, r3, #31
 800f48c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f490:	4618      	mov	r0, r3
 800f492:	bd98      	pop	{r3, r4, r7, pc}
 800f494:	08018f9c 	.word	0x08018f9c

0800f498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2bb0      	cmp	r3, #176	@ 0xb0
 800f4a4:	d903      	bls.n	800f4ae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f4a6:	4b15      	ldr	r3, [pc, #84]	@ (800f4fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	e007      	b.n	800f4be <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	091b      	lsrs	r3, r3, #4
 800f4b2:	f003 030f 	and.w	r3, r3, #15
 800f4b6:	4a11      	ldr	r2, [pc, #68]	@ (800f4fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4bc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f4be:	f7ff f9a7 	bl	800e810 <LL_RCC_GetAHB4Prescaler>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	091b      	lsrs	r3, r3, #4
 800f4c6:	f003 030f 	and.w	r3, r3, #15
 800f4ca:	4a0d      	ldr	r2, [pc, #52]	@ (800f500 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4d6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	4a0a      	ldr	r2, [pc, #40]	@ (800f504 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e0:	0c9c      	lsrs	r4, r3, #18
 800f4e2:	f7fe fef5 	bl	800e2d0 <HAL_PWREx_GetVoltageRange>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 f80c 	bl	800f508 <RCC_SetFlashLatency>
 800f4f0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd90      	pop	{r4, r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	08018fbc 	.word	0x08018fbc
 800f500:	08018f5c 	.word	0x08018f5c
 800f504:	431bde83 	.word	0x431bde83

0800f508 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f508:	b590      	push	{r4, r7, lr}
 800f50a:	b093      	sub	sp, #76	@ 0x4c
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f512:	4b37      	ldr	r3, [pc, #220]	@ (800f5f0 <RCC_SetFlashLatency+0xe8>)
 800f514:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800f518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f51a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f51e:	4a35      	ldr	r2, [pc, #212]	@ (800f5f4 <RCC_SetFlashLatency+0xec>)
 800f520:	f107 031c 	add.w	r3, r7, #28
 800f524:	ca07      	ldmia	r2, {r0, r1, r2}
 800f526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f52a:	4b33      	ldr	r3, [pc, #204]	@ (800f5f8 <RCC_SetFlashLatency+0xf0>)
 800f52c:	f107 040c 	add.w	r4, r7, #12
 800f530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f536:	2300      	movs	r3, #0
 800f538:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f540:	d11a      	bne.n	800f578 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f542:	2300      	movs	r3, #0
 800f544:	643b      	str	r3, [r7, #64]	@ 0x40
 800f546:	e013      	b.n	800f570 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	3348      	adds	r3, #72	@ 0x48
 800f54e:	443b      	add	r3, r7
 800f550:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d807      	bhi.n	800f56a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	3348      	adds	r3, #72	@ 0x48
 800f560:	443b      	add	r3, r7
 800f562:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f566:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f568:	e020      	b.n	800f5ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f56c:	3301      	adds	r3, #1
 800f56e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f572:	2b03      	cmp	r3, #3
 800f574:	d9e8      	bls.n	800f548 <RCC_SetFlashLatency+0x40>
 800f576:	e019      	b.n	800f5ac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f578:	2300      	movs	r3, #0
 800f57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f57c:	e013      	b.n	800f5a6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	3348      	adds	r3, #72	@ 0x48
 800f584:	443b      	add	r3, r7
 800f586:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d807      	bhi.n	800f5a0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	3348      	adds	r3, #72	@ 0x48
 800f596:	443b      	add	r3, r7
 800f598:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f59c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f59e:	e005      	b.n	800f5ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d9e8      	bls.n	800f57e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f5ac:	4b13      	ldr	r3, [pc, #76]	@ (800f5fc <RCC_SetFlashLatency+0xf4>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f023 0207 	bic.w	r2, r3, #7
 800f5b4:	4911      	ldr	r1, [pc, #68]	@ (800f5fc <RCC_SetFlashLatency+0xf4>)
 800f5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f5bc:	f7fd ff2c 	bl	800d418 <HAL_GetTick>
 800f5c0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f5c2:	e008      	b.n	800f5d6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f5c4:	f7fd ff28 	bl	800d418 <HAL_GetTick>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d901      	bls.n	800f5d6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	e007      	b.n	800f5e6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f5d6:	4b09      	ldr	r3, [pc, #36]	@ (800f5fc <RCC_SetFlashLatency+0xf4>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f003 0307 	and.w	r3, r3, #7
 800f5de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d1ef      	bne.n	800f5c4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	374c      	adds	r7, #76	@ 0x4c
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd90      	pop	{r4, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	08018f24 	.word	0x08018f24
 800f5f4:	08018f34 	.word	0x08018f34
 800f5f8:	08018f40 	.word	0x08018f40
 800f5fc:	58004000 	.word	0x58004000

0800f600 <LL_RCC_LSE_IsEnabled>:
{
 800f600:	b480      	push	{r7}
 800f602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f60c:	f003 0301 	and.w	r3, r3, #1
 800f610:	2b01      	cmp	r3, #1
 800f612:	d101      	bne.n	800f618 <LL_RCC_LSE_IsEnabled+0x18>
 800f614:	2301      	movs	r3, #1
 800f616:	e000      	b.n	800f61a <LL_RCC_LSE_IsEnabled+0x1a>
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <LL_RCC_LSE_IsReady>:
{
 800f624:	b480      	push	{r7}
 800f626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f630:	f003 0302 	and.w	r3, r3, #2
 800f634:	2b02      	cmp	r3, #2
 800f636:	d101      	bne.n	800f63c <LL_RCC_LSE_IsReady+0x18>
 800f638:	2301      	movs	r3, #1
 800f63a:	e000      	b.n	800f63e <LL_RCC_LSE_IsReady+0x1a>
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <LL_RCC_SetRFWKPClockSource>:
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f658:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f65c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4313      	orrs	r3, r2
 800f664:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <LL_RCC_SetSMPSClockSource>:
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f67c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f682:	f023 0203 	bic.w	r2, r3, #3
 800f686:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f690:	bf00      	nop
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <LL_RCC_SetSMPSPrescaler>:
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f6a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f6ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <LL_RCC_SetUSARTClockSource>:
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6d4:	f023 0203 	bic.w	r2, r3, #3
 800f6d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f6e4:	bf00      	nop
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <LL_RCC_SetLPUARTClockSource>:
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f6f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f700:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f704:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <LL_RCC_SetI2CClockSource>:
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f728:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	091b      	lsrs	r3, r3, #4
 800f730:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f734:	43db      	mvns	r3, r3
 800f736:	401a      	ands	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	011b      	lsls	r3, r3, #4
 800f73c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f744:	4313      	orrs	r3, r2
 800f746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f74a:	bf00      	nop
 800f74c:	370c      	adds	r7, #12
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <LL_RCC_SetLPTIMClockSource>:
{
 800f756:	b480      	push	{r7}
 800f758:	b083      	sub	sp, #12
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f75e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f762:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	0c1b      	lsrs	r3, r3, #16
 800f76a:	041b      	lsls	r3, r3, #16
 800f76c:	43db      	mvns	r3, r3
 800f76e:	401a      	ands	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	041b      	lsls	r3, r3, #16
 800f774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f778:	4313      	orrs	r3, r2
 800f77a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f77e:	bf00      	nop
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <LL_RCC_SetSAIClockSource>:
{
 800f78a:	b480      	push	{r7}
 800f78c:	b083      	sub	sp, #12
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f79a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f79e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f7aa:	bf00      	nop
 800f7ac:	370c      	adds	r7, #12
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <LL_RCC_SetRNGClockSource>:
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b083      	sub	sp, #12
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f7be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f7ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f7d6:	bf00      	nop
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <LL_RCC_SetCLK48ClockSource>:
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b083      	sub	sp, #12
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f7ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f7f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f802:	bf00      	nop
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <LL_RCC_SetUSBClockSource>:
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff ffe3 	bl	800f7e2 <LL_RCC_SetCLK48ClockSource>
}
 800f81c:	bf00      	nop
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <LL_RCC_SetADCClockSource>:
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f82c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f834:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f838:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4313      	orrs	r3, r2
 800f840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f844:	bf00      	nop
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <LL_RCC_SetRTCClockSource>:
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f860:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f864:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <LL_RCC_GetRTCClockSource>:
{
 800f87c:	b480      	push	{r7}
 800f87e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <LL_RCC_ForceBackupDomainReset>:
{
 800f896:	b480      	push	{r7}
 800f898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f89a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f8aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f8ae:	bf00      	nop
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f8bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f8cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f8d0:	bf00      	nop
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <LL_RCC_PLLSAI1_Enable>:
{
 800f8da:	b480      	push	{r7}
 800f8dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f8de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f8ec:	6013      	str	r3, [r2, #0]
}
 800f8ee:	bf00      	nop
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <LL_RCC_PLLSAI1_Disable>:
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f8fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f90a:	6013      	str	r3, [r2, #0]
}
 800f90c:	bf00      	nop
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <LL_RCC_PLLSAI1_IsReady>:
{
 800f916:	b480      	push	{r7}
 800f918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f91a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f928:	d101      	bne.n	800f92e <LL_RCC_PLLSAI1_IsReady+0x18>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b088      	sub	sp, #32
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f942:	2300      	movs	r3, #0
 800f944:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f946:	2300      	movs	r3, #0
 800f948:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f952:	2b00      	cmp	r3, #0
 800f954:	d034      	beq.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f95e:	d021      	beq.n	800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f960:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f964:	d81b      	bhi.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f96a:	d01d      	beq.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f96c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f970:	d815      	bhi.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00b      	beq.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f97a:	d110      	bne.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f97c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f98a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f98c:	e00d      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3304      	adds	r3, #4
 800f992:	4618      	mov	r0, r3
 800f994:	f000 f947 	bl	800fc26 <RCCEx_PLLSAI1_ConfigNP>
 800f998:	4603      	mov	r3, r0
 800f99a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f99c:	e005      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	77fb      	strb	r3, [r7, #31]
        break;
 800f9a2:	e002      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f9a4:	bf00      	nop
 800f9a6:	e000      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9aa:	7ffb      	ldrb	r3, [r7, #31]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d105      	bne.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff fee8 	bl	800f78a <LL_RCC_SetSAIClockSource>
 800f9ba:	e001      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9bc:	7ffb      	ldrb	r3, [r7, #31]
 800f9be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d046      	beq.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800f9cc:	f7ff ff56 	bl	800f87c <LL_RCC_GetRTCClockSource>
 800f9d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9d6:	69ba      	ldr	r2, [r7, #24]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d03c      	beq.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f9dc:	f7fe fc68 	bl	800e2b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d105      	bne.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff ff30 	bl	800f850 <LL_RCC_SetRTCClockSource>
 800f9f0:	e02e      	b.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f9fc:	f7ff ff4b 	bl	800f896 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800fa00:	f7ff ff5a 	bl	800f8b8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800fa12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800fa1c:	f7ff fdf0 	bl	800f600 <LL_RCC_LSE_IsEnabled>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d114      	bne.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fa26:	f7fd fcf7 	bl	800d418 <HAL_GetTick>
 800fa2a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800fa2c:	e00b      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa2e:	f7fd fcf3 	bl	800d418 <HAL_GetTick>
 800fa32:	4602      	mov	r2, r0
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d902      	bls.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800fa40:	2303      	movs	r3, #3
 800fa42:	77fb      	strb	r3, [r7, #31]
              break;
 800fa44:	e004      	b.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800fa46:	f7ff fded 	bl	800f624 <LL_RCC_LSE_IsReady>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d1ee      	bne.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800fa50:	7ffb      	ldrb	r3, [r7, #31]
 800fa52:	77bb      	strb	r3, [r7, #30]
 800fa54:	e001      	b.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa56:	7ffb      	ldrb	r3, [r7, #31]
 800fa58:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f003 0301 	and.w	r3, r3, #1
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d004      	beq.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff fe2a 	bl	800f6c4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f003 0302 	and.w	r3, r3, #2
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d004      	beq.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	69db      	ldr	r3, [r3, #28]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff fe35 	bl	800f6f0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f003 0310 	and.w	r3, r3, #16
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d004      	beq.n	800fa9c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7ff fe5d 	bl	800f756 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f003 0320 	and.w	r3, r3, #32
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d004      	beq.n	800fab2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faac:	4618      	mov	r0, r3
 800faae:	f7ff fe52 	bl	800f756 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f003 0304 	and.w	r3, r3, #4
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d004      	beq.n	800fac8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a1b      	ldr	r3, [r3, #32]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff fe2a 	bl	800f71c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	f003 0308 	and.w	r3, r3, #8
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d004      	beq.n	800fade <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff fe1f 	bl	800f71c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d022      	beq.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff fe8d 	bl	800f80e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fafc:	d107      	bne.n	800fb0e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800fafe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fb0c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fb16:	d10b      	bne.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 f8dd 	bl	800fcdc <RCCEx_PLLSAI1_ConfigNQ>
 800fb22:	4603      	mov	r3, r0
 800fb24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fb26:	7ffb      	ldrb	r3, [r7, #31]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800fb2c:	7ffb      	ldrb	r3, [r7, #31]
 800fb2e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d02b      	beq.n	800fb94 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb44:	d008      	beq.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fb4e:	d003      	beq.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d105      	bne.n	800fb64 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff fe2a 	bl	800f7b6 <LL_RCC_SetRNGClockSource>
 800fb62:	e00a      	b.n	800fb7a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fb6c:	60fb      	str	r3, [r7, #12]
 800fb6e:	2000      	movs	r0, #0
 800fb70:	f7ff fe21 	bl	800f7b6 <LL_RCC_SetRNGClockSource>
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7ff fe34 	bl	800f7e2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb7e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800fb82:	d107      	bne.n	800fb94 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800fb84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fb92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d022      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff fe3d 	bl	800f824 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fbb2:	d107      	bne.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800fbb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fbbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fbc2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fbcc:	d10b      	bne.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 f8dd 	bl	800fd92 <RCCEx_PLLSAI1_ConfigNR>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fbdc:	7ffb      	ldrb	r3, [r7, #31]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800fbe2:	7ffb      	ldrb	r3, [r7, #31]
 800fbe4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d004      	beq.n	800fbfc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7ff fd26 	bl	800f648 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d009      	beq.n	800fc1c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7ff fd45 	bl	800f69c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fd2c 	bl	800f674 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800fc1c:	7fbb      	ldrb	r3, [r7, #30]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3720      	adds	r7, #32
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b084      	sub	sp, #16
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fc32:	f7ff fe61 	bl	800f8f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fc36:	f7fd fbef 	bl	800d418 <HAL_GetTick>
 800fc3a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc3c:	e009      	b.n	800fc52 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc3e:	f7fd fbeb 	bl	800d418 <HAL_GetTick>
 800fc42:	4602      	mov	r2, r0
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	d902      	bls.n	800fc52 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800fc4c:	2303      	movs	r3, #3
 800fc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc50:	e004      	b.n	800fc5c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc52:	f7ff fe60 	bl	800f916 <LL_RCC_PLLSAI1_IsReady>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1f0      	bne.n	800fc3e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d137      	bne.n	800fcd2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fc62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc66:	691b      	ldr	r3, [r3, #16]
 800fc68:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	021b      	lsls	r3, r3, #8
 800fc72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc76:	4313      	orrs	r3, r2
 800fc78:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800fc7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fc90:	f7ff fe23 	bl	800f8da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc94:	f7fd fbc0 	bl	800d418 <HAL_GetTick>
 800fc98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fc9a:	e009      	b.n	800fcb0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc9c:	f7fd fbbc 	bl	800d418 <HAL_GetTick>
 800fca0:	4602      	mov	r2, r0
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	d902      	bls.n	800fcb0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800fcaa:	2303      	movs	r3, #3
 800fcac:	73fb      	strb	r3, [r7, #15]
        break;
 800fcae:	e004      	b.n	800fcba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fcb0:	f7ff fe31 	bl	800f916 <LL_RCC_PLLSAI1_IsReady>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d1f0      	bne.n	800fc9c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d108      	bne.n	800fcd2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fcc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fcc4:	691a      	ldr	r2, [r3, #16]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b084      	sub	sp, #16
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fce8:	f7ff fe06 	bl	800f8f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fcec:	f7fd fb94 	bl	800d418 <HAL_GetTick>
 800fcf0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fcf2:	e009      	b.n	800fd08 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fcf4:	f7fd fb90 	bl	800d418 <HAL_GetTick>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d902      	bls.n	800fd08 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800fd02:	2303      	movs	r3, #3
 800fd04:	73fb      	strb	r3, [r7, #15]
      break;
 800fd06:	e004      	b.n	800fd12 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd08:	f7ff fe05 	bl	800f916 <LL_RCC_PLLSAI1_IsReady>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1f0      	bne.n	800fcf4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d137      	bne.n	800fd88 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	021b      	lsls	r3, r3, #8
 800fd28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800fd30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd42:	4313      	orrs	r3, r2
 800fd44:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fd46:	f7ff fdc8 	bl	800f8da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd4a:	f7fd fb65 	bl	800d418 <HAL_GetTick>
 800fd4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fd50:	e009      	b.n	800fd66 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fd52:	f7fd fb61 	bl	800d418 <HAL_GetTick>
 800fd56:	4602      	mov	r2, r0
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d902      	bls.n	800fd66 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fd60:	2303      	movs	r3, #3
 800fd62:	73fb      	strb	r3, [r7, #15]
        break;
 800fd64:	e004      	b.n	800fd70 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fd66:	f7ff fdd6 	bl	800f916 <LL_RCC_PLLSAI1_IsReady>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d1f0      	bne.n	800fd52 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d108      	bne.n	800fd88 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fd76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd7a:	691a      	ldr	r2, [r3, #16]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd84:	4313      	orrs	r3, r2
 800fd86:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b084      	sub	sp, #16
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fd9e:	f7ff fdab 	bl	800f8f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fda2:	f7fd fb39 	bl	800d418 <HAL_GetTick>
 800fda6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fda8:	e009      	b.n	800fdbe <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fdaa:	f7fd fb35 	bl	800d418 <HAL_GetTick>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d902      	bls.n	800fdbe <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	73fb      	strb	r3, [r7, #15]
      break;
 800fdbc:	e004      	b.n	800fdc8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fdbe:	f7ff fdaa 	bl	800f916 <LL_RCC_PLLSAI1_IsReady>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1f0      	bne.n	800fdaa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d137      	bne.n	800fe3e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fdce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	021b      	lsls	r3, r3, #8
 800fdde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fde2:	4313      	orrs	r3, r2
 800fde4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800fde6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fdfc:	f7ff fd6d 	bl	800f8da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe00:	f7fd fb0a 	bl	800d418 <HAL_GetTick>
 800fe04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe06:	e009      	b.n	800fe1c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fe08:	f7fd fb06 	bl	800d418 <HAL_GetTick>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	2b02      	cmp	r3, #2
 800fe14:	d902      	bls.n	800fe1c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800fe16:	2303      	movs	r3, #3
 800fe18:	73fb      	strb	r3, [r7, #15]
        break;
 800fe1a:	e004      	b.n	800fe26 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe1c:	f7ff fd7b 	bl	800f916 <LL_RCC_PLLSAI1_IsReady>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d1f0      	bne.n	800fe08 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800fe26:	7bfb      	ldrb	r3, [r7, #15]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d108      	bne.n	800fe3e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fe2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe30:	691a      	ldr	r2, [r3, #16]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fe3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	e09f      	b.n	800ff9a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7fa ffa8 	bl	800adc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2202      	movs	r2, #2
 800fe78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fe7c:	4b49      	ldr	r3, [pc, #292]	@ (800ffa4 <HAL_RTC_Init+0x15c>)
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	f003 0310 	and.w	r3, r3, #16
 800fe84:	2b10      	cmp	r3, #16
 800fe86:	d07e      	beq.n	800ff86 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	22ca      	movs	r2, #202	@ 0xca
 800fe8e:	625a      	str	r2, [r3, #36]	@ 0x24
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2253      	movs	r2, #83	@ 0x53
 800fe96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fac6 	bl	801042a <RTC_EnterInitMode>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d00a      	beq.n	800feba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	22ff      	movs	r2, #255	@ 0xff
 800feaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2204      	movs	r2, #4
 800feb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800feb4:	2301      	movs	r3, #1
 800feb6:	73fb      	strb	r3, [r7, #15]
 800feb8:	e067      	b.n	800ff8a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	689b      	ldr	r3, [r3, #8]
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	6812      	ldr	r2, [r2, #0]
 800fec4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fecc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	6899      	ldr	r1, [r3, #8]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	431a      	orrs	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	699b      	ldr	r3, [r3, #24]
 800fee2:	431a      	orrs	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	430a      	orrs	r2, r1
 800feea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	68d2      	ldr	r2, [r2, #12]
 800fef4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	6919      	ldr	r1, [r3, #16]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	041a      	lsls	r2, r3, #16
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	430a      	orrs	r2, r1
 800ff08:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	68da      	ldr	r2, [r3, #12]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ff18:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f022 0203 	bic.w	r2, r2, #3
 800ff28:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	69da      	ldr	r2, [r3, #28]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	695b      	ldr	r3, [r3, #20]
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	430a      	orrs	r2, r1
 800ff40:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	f003 0320 	and.w	r3, r3, #32
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d113      	bne.n	800ff78 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fa44 	bl	80103de <HAL_RTC_WaitForSynchro>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00d      	beq.n	800ff78 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	22ff      	movs	r2, #255	@ 0xff
 800ff62:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2204      	movs	r2, #4
 800ff68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	e010      	b.n	800ff9a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	22ff      	movs	r2, #255	@ 0xff
 800ff7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800ff80:	2300      	movs	r3, #0
 800ff82:	73fb      	strb	r3, [r7, #15]
 800ff84:	e001      	b.n	800ff8a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800ff86:	2300      	movs	r3, #0
 800ff88:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ff8a:	7bfb      	ldrb	r3, [r7, #15]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d103      	bne.n	800ff98 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800ff98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	40002800 	.word	0x40002800

0800ffa8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ffa8:	b590      	push	{r4, r7, lr}
 800ffaa:	b087      	sub	sp, #28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d101      	bne.n	800ffc2 <HAL_RTC_SetTime+0x1a>
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	e0b2      	b.n	8010128 <HAL_RTC_SetTime+0x180>
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2202      	movs	r2, #2
 800ffce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d126      	bne.n	8010026 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d102      	bne.n	800ffec <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	4618      	mov	r0, r3
 800fff2:	f000 fa44 	bl	801047e <RTC_ByteToBcd2>
 800fff6:	4603      	mov	r3, r0
 800fff8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	785b      	ldrb	r3, [r3, #1]
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 fa3d 	bl	801047e <RTC_ByteToBcd2>
 8010004:	4603      	mov	r3, r0
 8010006:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010008:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	789b      	ldrb	r3, [r3, #2]
 801000e:	4618      	mov	r0, r3
 8010010:	f000 fa35 	bl	801047e <RTC_ByteToBcd2>
 8010014:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8010016:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	78db      	ldrb	r3, [r3, #3]
 801001e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010020:	4313      	orrs	r3, r2
 8010022:	617b      	str	r3, [r7, #20]
 8010024:	e018      	b.n	8010058 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	2200      	movs	r2, #0
 8010038:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	785b      	ldrb	r3, [r3, #1]
 8010044:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010046:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801004c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	78db      	ldrb	r3, [r3, #3]
 8010052:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010054:	4313      	orrs	r3, r2
 8010056:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	22ca      	movs	r2, #202	@ 0xca
 801005e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2253      	movs	r2, #83	@ 0x53
 8010066:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f000 f9de 	bl	801042a <RTC_EnterInitMode>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00d      	beq.n	8010090 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	22ff      	movs	r2, #255	@ 0xff
 801007a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2204      	movs	r2, #4
 8010080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2200      	movs	r2, #0
 8010088:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801008c:	2301      	movs	r3, #1
 801008e:	e04b      	b.n	8010128 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801009a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801009e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	689a      	ldr	r2, [r3, #8]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80100ae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6899      	ldr	r1, [r3, #8]
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	68da      	ldr	r2, [r3, #12]
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	691b      	ldr	r3, [r3, #16]
 80100be:	431a      	orrs	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	430a      	orrs	r2, r1
 80100c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68da      	ldr	r2, [r3, #12]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80100d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f003 0320 	and.w	r3, r3, #32
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d113      	bne.n	801010e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f000 f979 	bl	80103de <HAL_RTC_WaitForSynchro>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00d      	beq.n	801010e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	22ff      	movs	r2, #255	@ 0xff
 80100f8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	2204      	movs	r2, #4
 80100fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e00c      	b.n	8010128 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	22ff      	movs	r2, #255	@ 0xff
 8010114:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2201      	movs	r2, #1
 801011a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8010126:	2300      	movs	r3, #0
  }
}
 8010128:	4618      	mov	r0, r3
 801012a:	371c      	adds	r7, #28
 801012c:	46bd      	mov	sp, r7
 801012e:	bd90      	pop	{r4, r7, pc}

08010130 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801015e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010162:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	0c1b      	lsrs	r3, r3, #16
 8010168:	b2db      	uxtb	r3, r3
 801016a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801016e:	b2da      	uxtb	r2, r3
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	0a1b      	lsrs	r3, r3, #8
 8010178:	b2db      	uxtb	r3, r3
 801017a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801017e:	b2da      	uxtb	r2, r3
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	b2db      	uxtb	r3, r3
 8010188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801018c:	b2da      	uxtb	r2, r3
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	0c1b      	lsrs	r3, r3, #16
 8010196:	b2db      	uxtb	r3, r3
 8010198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801019c:	b2da      	uxtb	r2, r3
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d11a      	bne.n	80101de <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f000 f986 	bl	80104be <RTC_Bcd2ToByte>
 80101b2:	4603      	mov	r3, r0
 80101b4:	461a      	mov	r2, r3
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	785b      	ldrb	r3, [r3, #1]
 80101be:	4618      	mov	r0, r3
 80101c0:	f000 f97d 	bl	80104be <RTC_Bcd2ToByte>
 80101c4:	4603      	mov	r3, r0
 80101c6:	461a      	mov	r2, r3
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	789b      	ldrb	r3, [r3, #2]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f000 f974 	bl	80104be <RTC_Bcd2ToByte>
 80101d6:	4603      	mov	r3, r0
 80101d8:	461a      	mov	r2, r3
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80101e8:	b590      	push	{r4, r7, lr}
 80101ea:	b087      	sub	sp, #28
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d101      	bne.n	8010202 <HAL_RTC_SetDate+0x1a>
 80101fe:	2302      	movs	r3, #2
 8010200:	e09c      	b.n	801033c <HAL_RTC_SetDate+0x154>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2201      	movs	r2, #1
 8010206:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2202      	movs	r2, #2
 801020e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10e      	bne.n	8010236 <HAL_RTC_SetDate+0x4e>
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	785b      	ldrb	r3, [r3, #1]
 801021c:	f003 0310 	and.w	r3, r3, #16
 8010220:	2b00      	cmp	r3, #0
 8010222:	d008      	beq.n	8010236 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	785b      	ldrb	r3, [r3, #1]
 8010228:	f023 0310 	bic.w	r3, r3, #16
 801022c:	b2db      	uxtb	r3, r3
 801022e:	330a      	adds	r3, #10
 8010230:	b2da      	uxtb	r2, r3
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d11c      	bne.n	8010276 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	78db      	ldrb	r3, [r3, #3]
 8010240:	4618      	mov	r0, r3
 8010242:	f000 f91c 	bl	801047e <RTC_ByteToBcd2>
 8010246:	4603      	mov	r3, r0
 8010248:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	785b      	ldrb	r3, [r3, #1]
 801024e:	4618      	mov	r0, r3
 8010250:	f000 f915 	bl	801047e <RTC_ByteToBcd2>
 8010254:	4603      	mov	r3, r0
 8010256:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010258:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	789b      	ldrb	r3, [r3, #2]
 801025e:	4618      	mov	r0, r3
 8010260:	f000 f90d 	bl	801047e <RTC_ByteToBcd2>
 8010264:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010266:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010270:	4313      	orrs	r3, r2
 8010272:	617b      	str	r3, [r7, #20]
 8010274:	e00e      	b.n	8010294 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	78db      	ldrb	r3, [r3, #3]
 801027a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	785b      	ldrb	r3, [r3, #1]
 8010280:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010282:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8010288:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010290:	4313      	orrs	r3, r2
 8010292:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	22ca      	movs	r2, #202	@ 0xca
 801029a:	625a      	str	r2, [r3, #36]	@ 0x24
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2253      	movs	r2, #83	@ 0x53
 80102a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f000 f8c0 	bl	801042a <RTC_EnterInitMode>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00d      	beq.n	80102cc <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	22ff      	movs	r2, #255	@ 0xff
 80102b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2204      	movs	r2, #4
 80102bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80102c8:	2301      	movs	r3, #1
 80102ca:	e037      	b.n	801033c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80102d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80102da:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68da      	ldr	r2, [r3, #12]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80102ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	f003 0320 	and.w	r3, r3, #32
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d113      	bne.n	8010322 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f000 f86f 	bl	80103de <HAL_RTC_WaitForSynchro>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00d      	beq.n	8010322 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	22ff      	movs	r2, #255	@ 0xff
 801030c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2204      	movs	r2, #4
 8010312:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801031e:	2301      	movs	r3, #1
 8010320:	e00c      	b.n	801033c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	22ff      	movs	r2, #255	@ 0xff
 8010328:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2201      	movs	r2, #1
 801032e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 801033a:	2300      	movs	r3, #0
  }
}
 801033c:	4618      	mov	r0, r3
 801033e:	371c      	adds	r7, #28
 8010340:	46bd      	mov	sp, r7
 8010342:	bd90      	pop	{r4, r7, pc}

08010344 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801035a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801035e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	0c1b      	lsrs	r3, r3, #16
 8010364:	b2da      	uxtb	r2, r3
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	0a1b      	lsrs	r3, r3, #8
 801036e:	b2db      	uxtb	r3, r3
 8010370:	f003 031f 	and.w	r3, r3, #31
 8010374:	b2da      	uxtb	r2, r3
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010382:	b2da      	uxtb	r2, r3
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	0b5b      	lsrs	r3, r3, #13
 801038c:	b2db      	uxtb	r3, r3
 801038e:	f003 0307 	and.w	r3, r3, #7
 8010392:	b2da      	uxtb	r2, r3
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d11a      	bne.n	80103d4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	78db      	ldrb	r3, [r3, #3]
 80103a2:	4618      	mov	r0, r3
 80103a4:	f000 f88b 	bl	80104be <RTC_Bcd2ToByte>
 80103a8:	4603      	mov	r3, r0
 80103aa:	461a      	mov	r2, r3
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	785b      	ldrb	r3, [r3, #1]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f000 f882 	bl	80104be <RTC_Bcd2ToByte>
 80103ba:	4603      	mov	r3, r0
 80103bc:	461a      	mov	r2, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	789b      	ldrb	r3, [r3, #2]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f000 f879 	bl	80104be <RTC_Bcd2ToByte>
 80103cc:	4603      	mov	r3, r0
 80103ce:	461a      	mov	r2, r3
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b084      	sub	sp, #16
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	68da      	ldr	r2, [r3, #12]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80103f4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80103f6:	f7fd f80f 	bl	800d418 <HAL_GetTick>
 80103fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80103fc:	e009      	b.n	8010412 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80103fe:	f7fd f80b 	bl	800d418 <HAL_GetTick>
 8010402:	4602      	mov	r2, r0
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801040c:	d901      	bls.n	8010412 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801040e:	2303      	movs	r3, #3
 8010410:	e007      	b.n	8010422 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	f003 0320 	and.w	r3, r3, #32
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0ee      	beq.n	80103fe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b084      	sub	sp, #16
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801043c:	2b00      	cmp	r3, #0
 801043e:	d119      	bne.n	8010474 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f04f 32ff 	mov.w	r2, #4294967295
 8010448:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801044a:	f7fc ffe5 	bl	800d418 <HAL_GetTick>
 801044e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010450:	e009      	b.n	8010466 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010452:	f7fc ffe1 	bl	800d418 <HAL_GetTick>
 8010456:	4602      	mov	r2, r0
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010460:	d901      	bls.n	8010466 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8010462:	2303      	movs	r3, #3
 8010464:	e007      	b.n	8010476 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010470:	2b00      	cmp	r3, #0
 8010472:	d0ee      	beq.n	8010452 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801047e:	b480      	push	{r7}
 8010480:	b085      	sub	sp, #20
 8010482:	af00      	add	r7, sp, #0
 8010484:	4603      	mov	r3, r0
 8010486:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010488:	2300      	movs	r3, #0
 801048a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 801048c:	79fb      	ldrb	r3, [r7, #7]
 801048e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8010490:	e005      	b.n	801049e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3301      	adds	r3, #1
 8010496:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8010498:	7afb      	ldrb	r3, [r7, #11]
 801049a:	3b0a      	subs	r3, #10
 801049c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 801049e:	7afb      	ldrb	r3, [r7, #11]
 80104a0:	2b09      	cmp	r3, #9
 80104a2:	d8f6      	bhi.n	8010492 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	011b      	lsls	r3, r3, #4
 80104aa:	b2da      	uxtb	r2, r3
 80104ac:	7afb      	ldrb	r3, [r7, #11]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	b2db      	uxtb	r3, r3
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3714      	adds	r7, #20
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr

080104be <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80104be:	b480      	push	{r7}
 80104c0:	b085      	sub	sp, #20
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	4603      	mov	r3, r0
 80104c6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	091b      	lsrs	r3, r3, #4
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	461a      	mov	r2, r3
 80104d0:	4613      	mov	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	005b      	lsls	r3, r3, #1
 80104d8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	79fb      	ldrb	r3, [r7, #7]
 80104e0:	f003 030f 	and.w	r3, r3, #15
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	4413      	add	r3, r2
 80104e8:	b2db      	uxtb	r3, r3
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3714      	adds	r7, #20
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80104f6:	b480      	push	{r7}
 80104f8:	b087      	sub	sp, #28
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	60f8      	str	r0, [r7, #12]
 80104fe:	60b9      	str	r1, [r7, #8]
 8010500:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	3350      	adds	r3, #80	@ 0x50
 8010508:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	4413      	add	r3, r2
 8010512:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	601a      	str	r2, [r3, #0]
}
 801051a:	bf00      	nop
 801051c:	371c      	adds	r7, #28
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b084      	sub	sp, #16
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010534:	2301      	movs	r3, #1
 8010536:	e095      	b.n	8010664 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801053c:	2b00      	cmp	r3, #0
 801053e:	d108      	bne.n	8010552 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010548:	d009      	beq.n	801055e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	61da      	str	r2, [r3, #28]
 8010550:	e005      	b.n	801055e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801056a:	b2db      	uxtb	r3, r3
 801056c:	2b00      	cmp	r3, #0
 801056e:	d106      	bne.n	801057e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7fa fc4f 	bl	800ae1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2202      	movs	r2, #2
 8010582:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010594:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801059e:	d902      	bls.n	80105a6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80105a0:	2300      	movs	r3, #0
 80105a2:	60fb      	str	r3, [r7, #12]
 80105a4:	e002      	b.n	80105ac <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80105a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80105b4:	d007      	beq.n	80105c6 <HAL_SPI_Init+0xa0>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80105be:	d002      	beq.n	80105c6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80105d6:	431a      	orrs	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	691b      	ldr	r3, [r3, #16]
 80105dc:	f003 0302 	and.w	r3, r3, #2
 80105e0:	431a      	orrs	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	f003 0301 	and.w	r3, r3, #1
 80105ea:	431a      	orrs	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	699b      	ldr	r3, [r3, #24]
 80105f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80105f4:	431a      	orrs	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	69db      	ldr	r3, [r3, #28]
 80105fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80105fe:	431a      	orrs	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6a1b      	ldr	r3, [r3, #32]
 8010604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010608:	ea42 0103 	orr.w	r1, r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010610:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	430a      	orrs	r2, r1
 801061a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	699b      	ldr	r3, [r3, #24]
 8010620:	0c1b      	lsrs	r3, r3, #16
 8010622:	f003 0204 	and.w	r2, r3, #4
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801062a:	f003 0310 	and.w	r3, r3, #16
 801062e:	431a      	orrs	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010634:	f003 0308 	and.w	r3, r3, #8
 8010638:	431a      	orrs	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8010642:	ea42 0103 	orr.w	r1, r2, r3
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	430a      	orrs	r2, r1
 8010652:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b08a      	sub	sp, #40	@ 0x28
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801067a:	2301      	movs	r3, #1
 801067c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801068a:	2b01      	cmp	r3, #1
 801068c:	d101      	bne.n	8010692 <HAL_SPI_TransmitReceive+0x26>
 801068e:	2302      	movs	r3, #2
 8010690:	e1fb      	b.n	8010a8a <HAL_SPI_TransmitReceive+0x41e>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2201      	movs	r2, #1
 8010696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801069a:	f7fc febd 	bl	800d418 <HAL_GetTick>
 801069e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80106a6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80106ae:	887b      	ldrh	r3, [r7, #2]
 80106b0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80106b2:	887b      	ldrh	r3, [r7, #2]
 80106b4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80106b6:	7efb      	ldrb	r3, [r7, #27]
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d00e      	beq.n	80106da <HAL_SPI_TransmitReceive+0x6e>
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80106c2:	d106      	bne.n	80106d2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d102      	bne.n	80106d2 <HAL_SPI_TransmitReceive+0x66>
 80106cc:	7efb      	ldrb	r3, [r7, #27]
 80106ce:	2b04      	cmp	r3, #4
 80106d0:	d003      	beq.n	80106da <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80106d2:	2302      	movs	r3, #2
 80106d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80106d8:	e1cd      	b.n	8010a76 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d005      	beq.n	80106ec <HAL_SPI_TransmitReceive+0x80>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d002      	beq.n	80106ec <HAL_SPI_TransmitReceive+0x80>
 80106e6:	887b      	ldrh	r3, [r7, #2]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d103      	bne.n	80106f4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80106ec:	2301      	movs	r3, #1
 80106ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80106f2:	e1c0      	b.n	8010a76 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b04      	cmp	r3, #4
 80106fe:	d003      	beq.n	8010708 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2205      	movs	r2, #5
 8010704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2200      	movs	r2, #0
 801070c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	887a      	ldrh	r2, [r7, #2]
 8010718:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	887a      	ldrh	r2, [r7, #2]
 8010720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	887a      	ldrh	r2, [r7, #2]
 801072e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	887a      	ldrh	r2, [r7, #2]
 8010734:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2200      	movs	r2, #0
 801073a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801074a:	d802      	bhi.n	8010752 <HAL_SPI_TransmitReceive+0xe6>
 801074c:	8a3b      	ldrh	r3, [r7, #16]
 801074e:	2b01      	cmp	r3, #1
 8010750:	d908      	bls.n	8010764 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	685a      	ldr	r2, [r3, #4]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010760:	605a      	str	r2, [r3, #4]
 8010762:	e007      	b.n	8010774 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010772:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801077e:	2b40      	cmp	r3, #64	@ 0x40
 8010780:	d007      	beq.n	8010792 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801079a:	d97c      	bls.n	8010896 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <HAL_SPI_TransmitReceive+0x13e>
 80107a4:	8a7b      	ldrh	r3, [r7, #18]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d169      	bne.n	801087e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ae:	881a      	ldrh	r2, [r3, #0]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ba:	1c9a      	adds	r2, r3, #2
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	3b01      	subs	r3, #1
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80107ce:	e056      	b.n	801087e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	f003 0302 	and.w	r3, r3, #2
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d11b      	bne.n	8010816 <HAL_SPI_TransmitReceive+0x1aa>
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d016      	beq.n	8010816 <HAL_SPI_TransmitReceive+0x1aa>
 80107e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d113      	bne.n	8010816 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107f2:	881a      	ldrh	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107fe:	1c9a      	adds	r2, r3, #2
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010808:	b29b      	uxth	r3, r3
 801080a:	3b01      	subs	r3, #1
 801080c:	b29a      	uxth	r2, r3
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010812:	2300      	movs	r3, #0
 8010814:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	f003 0301 	and.w	r3, r3, #1
 8010820:	2b01      	cmp	r3, #1
 8010822:	d11c      	bne.n	801085e <HAL_SPI_TransmitReceive+0x1f2>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801082a:	b29b      	uxth	r3, r3
 801082c:	2b00      	cmp	r3, #0
 801082e:	d016      	beq.n	801085e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68da      	ldr	r2, [r3, #12]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801083a:	b292      	uxth	r2, r2
 801083c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010842:	1c9a      	adds	r2, r3, #2
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801084e:	b29b      	uxth	r3, r3
 8010850:	3b01      	subs	r3, #1
 8010852:	b29a      	uxth	r2, r3
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801085a:	2301      	movs	r3, #1
 801085c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801085e:	f7fc fddb 	bl	800d418 <HAL_GetTick>
 8010862:	4602      	mov	r2, r0
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801086a:	429a      	cmp	r2, r3
 801086c:	d807      	bhi.n	801087e <HAL_SPI_TransmitReceive+0x212>
 801086e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010874:	d003      	beq.n	801087e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8010876:	2303      	movs	r3, #3
 8010878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 801087c:	e0fb      	b.n	8010a76 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010882:	b29b      	uxth	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1a3      	bne.n	80107d0 <HAL_SPI_TransmitReceive+0x164>
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801088e:	b29b      	uxth	r3, r3
 8010890:	2b00      	cmp	r3, #0
 8010892:	d19d      	bne.n	80107d0 <HAL_SPI_TransmitReceive+0x164>
 8010894:	e0df      	b.n	8010a56 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d003      	beq.n	80108a6 <HAL_SPI_TransmitReceive+0x23a>
 801089e:	8a7b      	ldrh	r3, [r7, #18]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	f040 80cb 	bne.w	8010a3c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d912      	bls.n	80108d6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108b4:	881a      	ldrh	r2, [r3, #0]
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108c0:	1c9a      	adds	r2, r3, #2
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	3b02      	subs	r3, #2
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80108d4:	e0b2      	b.n	8010a3c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	330c      	adds	r3, #12
 80108e0:	7812      	ldrb	r2, [r2, #0]
 80108e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	3b01      	subs	r3, #1
 80108f6:	b29a      	uxth	r2, r3
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80108fc:	e09e      	b.n	8010a3c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f003 0302 	and.w	r3, r3, #2
 8010908:	2b02      	cmp	r3, #2
 801090a:	d134      	bne.n	8010976 <HAL_SPI_TransmitReceive+0x30a>
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010910:	b29b      	uxth	r3, r3
 8010912:	2b00      	cmp	r3, #0
 8010914:	d02f      	beq.n	8010976 <HAL_SPI_TransmitReceive+0x30a>
 8010916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010918:	2b01      	cmp	r3, #1
 801091a:	d12c      	bne.n	8010976 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010920:	b29b      	uxth	r3, r3
 8010922:	2b01      	cmp	r3, #1
 8010924:	d912      	bls.n	801094c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801092a:	881a      	ldrh	r2, [r3, #0]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010936:	1c9a      	adds	r2, r3, #2
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010940:	b29b      	uxth	r3, r3
 8010942:	3b02      	subs	r3, #2
 8010944:	b29a      	uxth	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801094a:	e012      	b.n	8010972 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	330c      	adds	r3, #12
 8010956:	7812      	ldrb	r2, [r2, #0]
 8010958:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801095e:	1c5a      	adds	r2, r3, #1
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010968:	b29b      	uxth	r3, r3
 801096a:	3b01      	subs	r3, #1
 801096c:	b29a      	uxth	r2, r3
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010972:	2300      	movs	r3, #0
 8010974:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	2b01      	cmp	r3, #1
 8010982:	d148      	bne.n	8010a16 <HAL_SPI_TransmitReceive+0x3aa>
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801098a:	b29b      	uxth	r3, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d042      	beq.n	8010a16 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010996:	b29b      	uxth	r3, r3
 8010998:	2b01      	cmp	r3, #1
 801099a:	d923      	bls.n	80109e4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68da      	ldr	r2, [r3, #12]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109a6:	b292      	uxth	r2, r2
 80109a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109ae:	1c9a      	adds	r2, r3, #2
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	3b02      	subs	r3, #2
 80109be:	b29a      	uxth	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d81f      	bhi.n	8010a12 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	685a      	ldr	r2, [r3, #4]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80109e0:	605a      	str	r2, [r3, #4]
 80109e2:	e016      	b.n	8010a12 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f103 020c 	add.w	r2, r3, #12
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f0:	7812      	ldrb	r2, [r2, #0]
 80109f2:	b2d2      	uxtb	r2, r2
 80109f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109fa:	1c5a      	adds	r2, r3, #1
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010a12:	2301      	movs	r3, #1
 8010a14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010a16:	f7fc fcff 	bl	800d418 <HAL_GetTick>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d803      	bhi.n	8010a2e <HAL_SPI_TransmitReceive+0x3c2>
 8010a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2c:	d102      	bne.n	8010a34 <HAL_SPI_TransmitReceive+0x3c8>
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d103      	bne.n	8010a3c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8010a34:	2303      	movs	r3, #3
 8010a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8010a3a:	e01c      	b.n	8010a76 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f47f af5b 	bne.w	80108fe <HAL_SPI_TransmitReceive+0x292>
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f47f af54 	bne.w	80108fe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010a56:	69fa      	ldr	r2, [r7, #28]
 8010a58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	f000 f938 	bl	8010cd0 <SPI_EndRxTxTransaction>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d006      	beq.n	8010a74 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8010a66:	2301      	movs	r3, #1
 8010a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2220      	movs	r2, #32
 8010a70:	661a      	str	r2, [r3, #96]	@ 0x60
 8010a72:	e000      	b.n	8010a76 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8010a74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2201      	movs	r2, #1
 8010a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8010a86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3728      	adds	r7, #40	@ 0x28
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
	...

08010a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b088      	sub	sp, #32
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	603b      	str	r3, [r7, #0]
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010aa4:	f7fc fcb8 	bl	800d418 <HAL_GetTick>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aac:	1a9b      	subs	r3, r3, r2
 8010aae:	683a      	ldr	r2, [r7, #0]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010ab4:	f7fc fcb0 	bl	800d418 <HAL_GetTick>
 8010ab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010aba:	4b39      	ldr	r3, [pc, #228]	@ (8010ba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	015b      	lsls	r3, r3, #5
 8010ac0:	0d1b      	lsrs	r3, r3, #20
 8010ac2:	69fa      	ldr	r2, [r7, #28]
 8010ac4:	fb02 f303 	mul.w	r3, r2, r3
 8010ac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010aca:	e054      	b.n	8010b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad2:	d050      	beq.n	8010b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010ad4:	f7fc fca0 	bl	800d418 <HAL_GetTick>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	1ad3      	subs	r3, r2, r3
 8010ade:	69fa      	ldr	r2, [r7, #28]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d902      	bls.n	8010aea <SPI_WaitFlagStateUntilTimeout+0x56>
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d13d      	bne.n	8010b66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010af8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010b02:	d111      	bne.n	8010b28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010b0c:	d004      	beq.n	8010b18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b16:	d107      	bne.n	8010b28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b30:	d10f      	bne.n	8010b52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010b40:	601a      	str	r2, [r3, #0]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2201      	movs	r2, #1
 8010b56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8010b62:	2303      	movs	r3, #3
 8010b64:	e017      	b.n	8010b96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d101      	bne.n	8010b70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	3b01      	subs	r3, #1
 8010b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	689a      	ldr	r2, [r3, #8]
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	4013      	ands	r3, r2
 8010b80:	68ba      	ldr	r2, [r7, #8]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	bf0c      	ite	eq
 8010b86:	2301      	moveq	r3, #1
 8010b88:	2300      	movne	r3, #0
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	79fb      	ldrb	r3, [r7, #7]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d19b      	bne.n	8010acc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3720      	adds	r7, #32
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20000014 	.word	0x20000014

08010ba4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b08a      	sub	sp, #40	@ 0x28
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010bb6:	f7fc fc2f 	bl	800d418 <HAL_GetTick>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bbe:	1a9b      	subs	r3, r3, r2
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8010bc6:	f7fc fc27 	bl	800d418 <HAL_GetTick>
 8010bca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	330c      	adds	r3, #12
 8010bd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8010ccc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	00da      	lsls	r2, r3, #3
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	0d1b      	lsrs	r3, r3, #20
 8010be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010be6:	fb02 f303 	mul.w	r3, r2, r3
 8010bea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010bec:	e060      	b.n	8010cb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010bf4:	d107      	bne.n	8010c06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d104      	bne.n	8010c06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	b2db      	uxtb	r3, r3
 8010c02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010c04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0c:	d050      	beq.n	8010cb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010c0e:	f7fc fc03 	bl	800d418 <HAL_GetTick>
 8010c12:	4602      	mov	r2, r0
 8010c14:	6a3b      	ldr	r3, [r7, #32]
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d902      	bls.n	8010c24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d13d      	bne.n	8010ca0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	685a      	ldr	r2, [r3, #4]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010c32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010c3c:	d111      	bne.n	8010c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c46:	d004      	beq.n	8010c52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c50:	d107      	bne.n	8010c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010c60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010c6a:	d10f      	bne.n	8010c8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010c7a:	601a      	str	r2, [r3, #0]
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010c8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8010c9c:	2303      	movs	r3, #3
 8010c9e:	e010      	b.n	8010cc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d101      	bne.n	8010caa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	689a      	ldr	r2, [r3, #8]
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	4013      	ands	r3, r2
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d196      	bne.n	8010bee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3728      	adds	r7, #40	@ 0x28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20000014 	.word	0x20000014

08010cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7ff ff5b 	bl	8010ba4 <SPI_WaitFifoStateUntilTimeout>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d007      	beq.n	8010d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cf8:	f043 0220 	orr.w	r2, r3, #32
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010d00:	2303      	movs	r3, #3
 8010d02:	e027      	b.n	8010d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	2180      	movs	r1, #128	@ 0x80
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	f7ff fec0 	bl	8010a94 <SPI_WaitFlagStateUntilTimeout>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d007      	beq.n	8010d2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d1e:	f043 0220 	orr.w	r2, r3, #32
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010d26:	2303      	movs	r3, #3
 8010d28:	e014      	b.n	8010d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f7ff ff34 	bl	8010ba4 <SPI_WaitFifoStateUntilTimeout>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d007      	beq.n	8010d52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d46:	f043 0220 	orr.w	r2, r3, #32
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010d4e:	2303      	movs	r3, #3
 8010d50:	e000      	b.n	8010d54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010d52:	2300      	movs	r3, #0
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e054      	b.n	8010e18 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d111      	bne.n	8010d9e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 ff68 	bl	8011c58 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d102      	bne.n	8010d96 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a23      	ldr	r2, [pc, #140]	@ (8010e20 <HAL_TIM_Base_Init+0xc4>)
 8010d94:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2202      	movs	r2, #2
 8010da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	3304      	adds	r3, #4
 8010dae:	4619      	mov	r1, r3
 8010db0:	4610      	mov	r0, r2
 8010db2:	f000 fbd3 	bl	801155c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2201      	movs	r2, #1
 8010dba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2201      	movs	r2, #1
 8010de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2201      	movs	r2, #1
 8010dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2201      	movs	r2, #1
 8010df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2201      	movs	r2, #1
 8010dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2201      	movs	r2, #1
 8010e02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2201      	movs	r2, #1
 8010e0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2201      	movs	r2, #1
 8010e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010e16:	2300      	movs	r3, #0
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	0800af09 	.word	0x0800af09

08010e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d001      	beq.n	8010e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	e036      	b.n	8010eaa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2202      	movs	r2, #2
 8010e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68da      	ldr	r2, [r3, #12]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f042 0201 	orr.w	r2, r2, #1
 8010e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a17      	ldr	r2, [pc, #92]	@ (8010eb8 <HAL_TIM_Base_Start_IT+0x94>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d004      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x44>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e66:	d115      	bne.n	8010e94 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	689a      	ldr	r2, [r3, #8]
 8010e6e:	4b13      	ldr	r3, [pc, #76]	@ (8010ebc <HAL_TIM_Base_Start_IT+0x98>)
 8010e70:	4013      	ands	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b06      	cmp	r3, #6
 8010e78:	d015      	beq.n	8010ea6 <HAL_TIM_Base_Start_IT+0x82>
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e80:	d011      	beq.n	8010ea6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f042 0201 	orr.w	r2, r2, #1
 8010e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e92:	e008      	b.n	8010ea6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f042 0201 	orr.w	r2, r2, #1
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	e000      	b.n	8010ea8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	40012c00 	.word	0x40012c00
 8010ebc:	00010007 	.word	0x00010007

08010ec0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d101      	bne.n	8010ed2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e054      	b.n	8010f7c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d111      	bne.n	8010f02 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 feb6 	bl	8011c58 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d102      	bne.n	8010efa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	4a23      	ldr	r2, [pc, #140]	@ (8010f84 <HAL_TIM_OC_Init+0xc4>)
 8010ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2202      	movs	r2, #2
 8010f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	3304      	adds	r3, #4
 8010f12:	4619      	mov	r1, r3
 8010f14:	4610      	mov	r0, r2
 8010f16:	f000 fb21 	bl	801155c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2201      	movs	r2, #1
 8010f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2201      	movs	r2, #1
 8010f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2201      	movs	r2, #1
 8010f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2201      	movs	r2, #1
 8010f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2201      	movs	r2, #1
 8010f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3708      	adds	r7, #8
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	08010f89 	.word	0x08010f89

08010f88 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8010f90:	bf00      	nop
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	f003 0302 	and.w	r3, r3, #2
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	d128      	bne.n	8011004 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	f003 0302 	and.w	r3, r3, #2
 8010fbc:	2b02      	cmp	r3, #2
 8010fbe:	d121      	bne.n	8011004 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f06f 0202 	mvn.w	r2, #2
 8010fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	699b      	ldr	r3, [r3, #24]
 8010fd6:	f003 0303 	and.w	r3, r3, #3
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d005      	beq.n	8010fea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	4798      	blx	r3
 8010fe8:	e009      	b.n	8010ffe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	691b      	ldr	r3, [r3, #16]
 801100a:	f003 0304 	and.w	r3, r3, #4
 801100e:	2b04      	cmp	r3, #4
 8011010:	d128      	bne.n	8011064 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	f003 0304 	and.w	r3, r3, #4
 801101c:	2b04      	cmp	r3, #4
 801101e:	d121      	bne.n	8011064 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f06f 0204 	mvn.w	r2, #4
 8011028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2202      	movs	r2, #2
 801102e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801103a:	2b00      	cmp	r3, #0
 801103c:	d005      	beq.n	801104a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	4798      	blx	r3
 8011048:	e009      	b.n	801105e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	f003 0308 	and.w	r3, r3, #8
 801106e:	2b08      	cmp	r3, #8
 8011070:	d128      	bne.n	80110c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	f003 0308 	and.w	r3, r3, #8
 801107c:	2b08      	cmp	r3, #8
 801107e:	d121      	bne.n	80110c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f06f 0208 	mvn.w	r2, #8
 8011088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2204      	movs	r2, #4
 801108e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	69db      	ldr	r3, [r3, #28]
 8011096:	f003 0303 	and.w	r3, r3, #3
 801109a:	2b00      	cmp	r3, #0
 801109c:	d005      	beq.n	80110aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	4798      	blx	r3
 80110a8:	e009      	b.n	80110be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	f003 0310 	and.w	r3, r3, #16
 80110ce:	2b10      	cmp	r3, #16
 80110d0:	d128      	bne.n	8011124 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	f003 0310 	and.w	r3, r3, #16
 80110dc:	2b10      	cmp	r3, #16
 80110de:	d121      	bne.n	8011124 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f06f 0210 	mvn.w	r2, #16
 80110e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2208      	movs	r2, #8
 80110ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	69db      	ldr	r3, [r3, #28]
 80110f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d005      	beq.n	801110a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	4798      	blx	r3
 8011108:	e009      	b.n	801111e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b01      	cmp	r3, #1
 8011130:	d110      	bne.n	8011154 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	f003 0301 	and.w	r3, r3, #1
 801113c:	2b01      	cmp	r3, #1
 801113e:	d109      	bne.n	8011154 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f06f 0201 	mvn.w	r2, #1
 8011148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801115e:	2b80      	cmp	r3, #128	@ 0x80
 8011160:	d110      	bne.n	8011184 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801116c:	2b80      	cmp	r3, #128	@ 0x80
 801116e:	d109      	bne.n	8011184 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	691b      	ldr	r3, [r3, #16]
 801118a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801118e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011192:	d110      	bne.n	80111b6 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801119e:	2b80      	cmp	r3, #128	@ 0x80
 80111a0:	d109      	bne.n	80111b6 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80111aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	691b      	ldr	r3, [r3, #16]
 80111bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111c0:	2b40      	cmp	r3, #64	@ 0x40
 80111c2:	d110      	bne.n	80111e6 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111ce:	2b40      	cmp	r3, #64	@ 0x40
 80111d0:	d109      	bne.n	80111e6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80111da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	691b      	ldr	r3, [r3, #16]
 80111ec:	f003 0320 	and.w	r3, r3, #32
 80111f0:	2b20      	cmp	r3, #32
 80111f2:	d110      	bne.n	8011216 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	f003 0320 	and.w	r3, r3, #32
 80111fe:	2b20      	cmp	r3, #32
 8011200:	d109      	bne.n	8011216 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f06f 0220 	mvn.w	r2, #32
 801120a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011216:	bf00      	nop
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
	...

08011220 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011236:	2b01      	cmp	r3, #1
 8011238:	d101      	bne.n	801123e <HAL_TIM_OC_ConfigChannel+0x1e>
 801123a:	2302      	movs	r3, #2
 801123c:	e066      	b.n	801130c <HAL_TIM_OC_ConfigChannel+0xec>
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2201      	movs	r2, #1
 8011242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b14      	cmp	r3, #20
 801124a:	d857      	bhi.n	80112fc <HAL_TIM_OC_ConfigChannel+0xdc>
 801124c:	a201      	add	r2, pc, #4	@ (adr r2, 8011254 <HAL_TIM_OC_ConfigChannel+0x34>)
 801124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011252:	bf00      	nop
 8011254:	080112a9 	.word	0x080112a9
 8011258:	080112fd 	.word	0x080112fd
 801125c:	080112fd 	.word	0x080112fd
 8011260:	080112fd 	.word	0x080112fd
 8011264:	080112b7 	.word	0x080112b7
 8011268:	080112fd 	.word	0x080112fd
 801126c:	080112fd 	.word	0x080112fd
 8011270:	080112fd 	.word	0x080112fd
 8011274:	080112c5 	.word	0x080112c5
 8011278:	080112fd 	.word	0x080112fd
 801127c:	080112fd 	.word	0x080112fd
 8011280:	080112fd 	.word	0x080112fd
 8011284:	080112d3 	.word	0x080112d3
 8011288:	080112fd 	.word	0x080112fd
 801128c:	080112fd 	.word	0x080112fd
 8011290:	080112fd 	.word	0x080112fd
 8011294:	080112e1 	.word	0x080112e1
 8011298:	080112fd 	.word	0x080112fd
 801129c:	080112fd 	.word	0x080112fd
 80112a0:	080112fd 	.word	0x080112fd
 80112a4:	080112ef 	.word	0x080112ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	68b9      	ldr	r1, [r7, #8]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f000 f9b8 	bl	8011624 <TIM_OC1_SetConfig>
      break;
 80112b4:	e025      	b.n	8011302 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	68b9      	ldr	r1, [r7, #8]
 80112bc:	4618      	mov	r0, r3
 80112be:	f000 fa2d 	bl	801171c <TIM_OC2_SetConfig>
      break;
 80112c2:	e01e      	b.n	8011302 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	68b9      	ldr	r1, [r7, #8]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f000 faa0 	bl	8011810 <TIM_OC3_SetConfig>
      break;
 80112d0:	e017      	b.n	8011302 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68b9      	ldr	r1, [r7, #8]
 80112d8:	4618      	mov	r0, r3
 80112da:	f000 fb11 	bl	8011900 <TIM_OC4_SetConfig>
      break;
 80112de:	e010      	b.n	8011302 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68b9      	ldr	r1, [r7, #8]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f000 fb68 	bl	80119bc <TIM_OC5_SetConfig>
      break;
 80112ec:	e009      	b.n	8011302 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	68b9      	ldr	r1, [r7, #8]
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 fbb9 	bl	8011a6c <TIM_OC6_SetConfig>
      break;
 80112fa:	e002      	b.n	8011302 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80112fc:	2301      	movs	r3, #1
 80112fe:	75fb      	strb	r3, [r7, #23]
      break;
 8011300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801130a:	7dfb      	ldrb	r3, [r7, #23]
}
 801130c:	4618      	mov	r0, r3
 801130e:	3718      	adds	r7, #24
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011328:	2b01      	cmp	r3, #1
 801132a:	d101      	bne.n	8011330 <HAL_TIM_ConfigClockSource+0x1c>
 801132c:	2302      	movs	r3, #2
 801132e:	e0b6      	b.n	801149e <HAL_TIM_ConfigClockSource+0x18a>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2201      	movs	r2, #1
 8011334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2202      	movs	r2, #2
 801133c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 801134e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8011352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801135a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	68ba      	ldr	r2, [r7, #8]
 8011362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801136c:	d03e      	beq.n	80113ec <HAL_TIM_ConfigClockSource+0xd8>
 801136e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011372:	f200 8087 	bhi.w	8011484 <HAL_TIM_ConfigClockSource+0x170>
 8011376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801137a:	f000 8086 	beq.w	801148a <HAL_TIM_ConfigClockSource+0x176>
 801137e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011382:	d87f      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 8011384:	2b70      	cmp	r3, #112	@ 0x70
 8011386:	d01a      	beq.n	80113be <HAL_TIM_ConfigClockSource+0xaa>
 8011388:	2b70      	cmp	r3, #112	@ 0x70
 801138a:	d87b      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 801138c:	2b60      	cmp	r3, #96	@ 0x60
 801138e:	d050      	beq.n	8011432 <HAL_TIM_ConfigClockSource+0x11e>
 8011390:	2b60      	cmp	r3, #96	@ 0x60
 8011392:	d877      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 8011394:	2b50      	cmp	r3, #80	@ 0x50
 8011396:	d03c      	beq.n	8011412 <HAL_TIM_ConfigClockSource+0xfe>
 8011398:	2b50      	cmp	r3, #80	@ 0x50
 801139a:	d873      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 801139c:	2b40      	cmp	r3, #64	@ 0x40
 801139e:	d058      	beq.n	8011452 <HAL_TIM_ConfigClockSource+0x13e>
 80113a0:	2b40      	cmp	r3, #64	@ 0x40
 80113a2:	d86f      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 80113a4:	2b30      	cmp	r3, #48	@ 0x30
 80113a6:	d064      	beq.n	8011472 <HAL_TIM_ConfigClockSource+0x15e>
 80113a8:	2b30      	cmp	r3, #48	@ 0x30
 80113aa:	d86b      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 80113ac:	2b20      	cmp	r3, #32
 80113ae:	d060      	beq.n	8011472 <HAL_TIM_ConfigClockSource+0x15e>
 80113b0:	2b20      	cmp	r3, #32
 80113b2:	d867      	bhi.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d05c      	beq.n	8011472 <HAL_TIM_ConfigClockSource+0x15e>
 80113b8:	2b10      	cmp	r3, #16
 80113ba:	d05a      	beq.n	8011472 <HAL_TIM_ConfigClockSource+0x15e>
 80113bc:	e062      	b.n	8011484 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80113ce:	f000 fc23 	bl	8011c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80113e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	68ba      	ldr	r2, [r7, #8]
 80113e8:	609a      	str	r2, [r3, #8]
      break;
 80113ea:	e04f      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80113fc:	f000 fc0c 	bl	8011c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	689a      	ldr	r2, [r3, #8]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801140e:	609a      	str	r2, [r3, #8]
      break;
 8011410:	e03c      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801141e:	461a      	mov	r2, r3
 8011420:	f000 fb7e 	bl	8011b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2150      	movs	r1, #80	@ 0x50
 801142a:	4618      	mov	r0, r3
 801142c:	f000 fbd7 	bl	8011bde <TIM_ITRx_SetConfig>
      break;
 8011430:	e02c      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801143e:	461a      	mov	r2, r3
 8011440:	f000 fb9d 	bl	8011b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2160      	movs	r1, #96	@ 0x60
 801144a:	4618      	mov	r0, r3
 801144c:	f000 fbc7 	bl	8011bde <TIM_ITRx_SetConfig>
      break;
 8011450:	e01c      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801145e:	461a      	mov	r2, r3
 8011460:	f000 fb5e 	bl	8011b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2140      	movs	r1, #64	@ 0x40
 801146a:	4618      	mov	r0, r3
 801146c:	f000 fbb7 	bl	8011bde <TIM_ITRx_SetConfig>
      break;
 8011470:	e00c      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4619      	mov	r1, r3
 801147c:	4610      	mov	r0, r2
 801147e:	f000 fbae 	bl	8011bde <TIM_ITRx_SetConfig>
      break;
 8011482:	e003      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8011484:	2301      	movs	r3, #1
 8011486:	73fb      	strb	r3, [r7, #15]
      break;
 8011488:	e000      	b.n	801148c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801148a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2201      	movs	r2, #1
 8011490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2200      	movs	r2, #0
 8011498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801149c:	7bfb      	ldrb	r3, [r7, #15]
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3710      	adds	r7, #16
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}

080114a6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80114a6:	b480      	push	{r7}
 80114a8:	b083      	sub	sp, #12
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80114ae:	bf00      	nop
 80114b0:	370c      	adds	r7, #12
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114ba:	b480      	push	{r7}
 80114bc:	b083      	sub	sp, #12
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80114c2:	bf00      	nop
 80114c4:	370c      	adds	r7, #12
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr

080114ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80114ce:	b480      	push	{r7}
 80114d0:	b083      	sub	sp, #12
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80114d6:	bf00      	nop
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr

080114e2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80114e2:	b480      	push	{r7}
 80114e4:	b083      	sub	sp, #12
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80114ea:	bf00      	nop
 80114ec:	370c      	adds	r7, #12
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr

080114f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80114f6:	b480      	push	{r7}
 80114f8:	b083      	sub	sp, #12
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80114fe:	bf00      	nop
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr

0801150a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011512:	bf00      	nop
 8011514:	370c      	adds	r7, #12
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011526:	bf00      	nop
 8011528:	370c      	adds	r7, #12
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr

08011532 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011532:	b480      	push	{r7}
 8011534:	b083      	sub	sp, #12
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 801153a:	bf00      	nop
 801153c:	370c      	adds	r7, #12
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011546:	b480      	push	{r7}
 8011548:	b083      	sub	sp, #12
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801154e:	bf00      	nop
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
	...

0801155c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4a2a      	ldr	r2, [pc, #168]	@ (8011618 <TIM_Base_SetConfig+0xbc>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d003      	beq.n	801157c <TIM_Base_SetConfig+0x20>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801157a:	d108      	bne.n	801158e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	4313      	orrs	r3, r2
 801158c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a21      	ldr	r2, [pc, #132]	@ (8011618 <TIM_Base_SetConfig+0xbc>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d00b      	beq.n	80115ae <TIM_Base_SetConfig+0x52>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801159c:	d007      	beq.n	80115ae <TIM_Base_SetConfig+0x52>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a1e      	ldr	r2, [pc, #120]	@ (801161c <TIM_Base_SetConfig+0xc0>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d003      	beq.n	80115ae <TIM_Base_SetConfig+0x52>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4a1d      	ldr	r2, [pc, #116]	@ (8011620 <TIM_Base_SetConfig+0xc4>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d108      	bne.n	80115c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80115b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	4313      	orrs	r3, r2
 80115be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	4313      	orrs	r3, r2
 80115cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	689a      	ldr	r2, [r3, #8]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4a0c      	ldr	r2, [pc, #48]	@ (8011618 <TIM_Base_SetConfig+0xbc>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d007      	beq.n	80115fc <TIM_Base_SetConfig+0xa0>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4a0b      	ldr	r2, [pc, #44]	@ (801161c <TIM_Base_SetConfig+0xc0>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d003      	beq.n	80115fc <TIM_Base_SetConfig+0xa0>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4a0a      	ldr	r2, [pc, #40]	@ (8011620 <TIM_Base_SetConfig+0xc4>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d103      	bne.n	8011604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	691a      	ldr	r2, [r3, #16]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2201      	movs	r2, #1
 8011608:	615a      	str	r2, [r3, #20]
}
 801160a:	bf00      	nop
 801160c:	3714      	adds	r7, #20
 801160e:	46bd      	mov	sp, r7
 8011610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011614:	4770      	bx	lr
 8011616:	bf00      	nop
 8011618:	40012c00 	.word	0x40012c00
 801161c:	40014400 	.word	0x40014400
 8011620:	40014800 	.word	0x40014800

08011624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011624:	b480      	push	{r7}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a1b      	ldr	r3, [r3, #32]
 8011632:	f023 0201 	bic.w	r2, r3, #1
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6a1b      	ldr	r3, [r3, #32]
 801163e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	699b      	ldr	r3, [r3, #24]
 801164a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f023 0303 	bic.w	r3, r3, #3
 801165e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	68fa      	ldr	r2, [r7, #12]
 8011666:	4313      	orrs	r3, r2
 8011668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	f023 0302 	bic.w	r3, r3, #2
 8011670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	697a      	ldr	r2, [r7, #20]
 8011678:	4313      	orrs	r3, r2
 801167a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4a24      	ldr	r2, [pc, #144]	@ (8011710 <TIM_OC1_SetConfig+0xec>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d007      	beq.n	8011694 <TIM_OC1_SetConfig+0x70>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a23      	ldr	r2, [pc, #140]	@ (8011714 <TIM_OC1_SetConfig+0xf0>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d003      	beq.n	8011694 <TIM_OC1_SetConfig+0x70>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4a22      	ldr	r2, [pc, #136]	@ (8011718 <TIM_OC1_SetConfig+0xf4>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d10c      	bne.n	80116ae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	f023 0308 	bic.w	r3, r3, #8
 801169a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	697a      	ldr	r2, [r7, #20]
 80116a2:	4313      	orrs	r3, r2
 80116a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	f023 0304 	bic.w	r3, r3, #4
 80116ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a17      	ldr	r2, [pc, #92]	@ (8011710 <TIM_OC1_SetConfig+0xec>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d007      	beq.n	80116c6 <TIM_OC1_SetConfig+0xa2>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a17      	ldr	r2, [pc, #92]	@ (8011718 <TIM_OC1_SetConfig+0xf4>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d003      	beq.n	80116c6 <TIM_OC1_SetConfig+0xa2>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a14      	ldr	r2, [pc, #80]	@ (8011714 <TIM_OC1_SetConfig+0xf0>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d111      	bne.n	80116ea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80116d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	695b      	ldr	r3, [r3, #20]
 80116da:	693a      	ldr	r2, [r7, #16]
 80116dc:	4313      	orrs	r3, r2
 80116de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	699b      	ldr	r3, [r3, #24]
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	693a      	ldr	r2, [r7, #16]
 80116ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	685a      	ldr	r2, [r3, #4]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	697a      	ldr	r2, [r7, #20]
 8011702:	621a      	str	r2, [r3, #32]
}
 8011704:	bf00      	nop
 8011706:	371c      	adds	r7, #28
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr
 8011710:	40012c00 	.word	0x40012c00
 8011714:	40014800 	.word	0x40014800
 8011718:	40014400 	.word	0x40014400

0801171c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801171c:	b480      	push	{r7}
 801171e:	b087      	sub	sp, #28
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a1b      	ldr	r3, [r3, #32]
 801172a:	f023 0210 	bic.w	r2, r3, #16
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a1b      	ldr	r3, [r3, #32]
 8011736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801174a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801174e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	021b      	lsls	r3, r3, #8
 801175e:	68fa      	ldr	r2, [r7, #12]
 8011760:	4313      	orrs	r3, r2
 8011762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	f023 0320 	bic.w	r3, r3, #32
 801176a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	011b      	lsls	r3, r3, #4
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	4313      	orrs	r3, r2
 8011776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a22      	ldr	r2, [pc, #136]	@ (8011804 <TIM_OC2_SetConfig+0xe8>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d10d      	bne.n	801179c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	011b      	lsls	r3, r3, #4
 801178e:	697a      	ldr	r2, [r7, #20]
 8011790:	4313      	orrs	r3, r2
 8011792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801179a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4a19      	ldr	r2, [pc, #100]	@ (8011804 <TIM_OC2_SetConfig+0xe8>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d007      	beq.n	80117b4 <TIM_OC2_SetConfig+0x98>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a18      	ldr	r2, [pc, #96]	@ (8011808 <TIM_OC2_SetConfig+0xec>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d003      	beq.n	80117b4 <TIM_OC2_SetConfig+0x98>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	4a17      	ldr	r2, [pc, #92]	@ (801180c <TIM_OC2_SetConfig+0xf0>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d113      	bne.n	80117dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80117ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80117c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	695b      	ldr	r3, [r3, #20]
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	693a      	ldr	r2, [r7, #16]
 80117cc:	4313      	orrs	r3, r2
 80117ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	699b      	ldr	r3, [r3, #24]
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	693a      	ldr	r2, [r7, #16]
 80117d8:	4313      	orrs	r3, r2
 80117da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	693a      	ldr	r2, [r7, #16]
 80117e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	68fa      	ldr	r2, [r7, #12]
 80117e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	621a      	str	r2, [r3, #32]
}
 80117f6:	bf00      	nop
 80117f8:	371c      	adds	r7, #28
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	40012c00 	.word	0x40012c00
 8011808:	40014400 	.word	0x40014400
 801180c:	40014800 	.word	0x40014800

08011810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011810:	b480      	push	{r7}
 8011812:	b087      	sub	sp, #28
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a1b      	ldr	r3, [r3, #32]
 801181e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a1b      	ldr	r3, [r3, #32]
 801182a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	69db      	ldr	r3, [r3, #28]
 8011836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801183e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f023 0303 	bic.w	r3, r3, #3
 801184a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	4313      	orrs	r3, r2
 8011854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801185c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	021b      	lsls	r3, r3, #8
 8011864:	697a      	ldr	r2, [r7, #20]
 8011866:	4313      	orrs	r3, r2
 8011868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4a21      	ldr	r2, [pc, #132]	@ (80118f4 <TIM_OC3_SetConfig+0xe4>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d10d      	bne.n	801188e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	021b      	lsls	r3, r3, #8
 8011880:	697a      	ldr	r2, [r7, #20]
 8011882:	4313      	orrs	r3, r2
 8011884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801188c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4a18      	ldr	r2, [pc, #96]	@ (80118f4 <TIM_OC3_SetConfig+0xe4>)
 8011892:	4293      	cmp	r3, r2
 8011894:	d007      	beq.n	80118a6 <TIM_OC3_SetConfig+0x96>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	4a17      	ldr	r2, [pc, #92]	@ (80118f8 <TIM_OC3_SetConfig+0xe8>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d003      	beq.n	80118a6 <TIM_OC3_SetConfig+0x96>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4a16      	ldr	r2, [pc, #88]	@ (80118fc <TIM_OC3_SetConfig+0xec>)
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d113      	bne.n	80118ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80118ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80118b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	695b      	ldr	r3, [r3, #20]
 80118ba:	011b      	lsls	r3, r3, #4
 80118bc:	693a      	ldr	r2, [r7, #16]
 80118be:	4313      	orrs	r3, r2
 80118c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	699b      	ldr	r3, [r3, #24]
 80118c6:	011b      	lsls	r3, r3, #4
 80118c8:	693a      	ldr	r2, [r7, #16]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	693a      	ldr	r2, [r7, #16]
 80118d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	685a      	ldr	r2, [r3, #4]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	697a      	ldr	r2, [r7, #20]
 80118e6:	621a      	str	r2, [r3, #32]
}
 80118e8:	bf00      	nop
 80118ea:	371c      	adds	r7, #28
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr
 80118f4:	40012c00 	.word	0x40012c00
 80118f8:	40014400 	.word	0x40014400
 80118fc:	40014800 	.word	0x40014800

08011900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011900:	b480      	push	{r7}
 8011902:	b087      	sub	sp, #28
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a1b      	ldr	r3, [r3, #32]
 801190e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a1b      	ldr	r3, [r3, #32]
 801191a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	69db      	ldr	r3, [r3, #28]
 8011926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801192e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801193a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	021b      	lsls	r3, r3, #8
 8011942:	68fa      	ldr	r2, [r7, #12]
 8011944:	4313      	orrs	r3, r2
 8011946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801194e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	689b      	ldr	r3, [r3, #8]
 8011954:	031b      	lsls	r3, r3, #12
 8011956:	693a      	ldr	r2, [r7, #16]
 8011958:	4313      	orrs	r3, r2
 801195a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	4a14      	ldr	r2, [pc, #80]	@ (80119b0 <TIM_OC4_SetConfig+0xb0>)
 8011960:	4293      	cmp	r3, r2
 8011962:	d007      	beq.n	8011974 <TIM_OC4_SetConfig+0x74>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4a13      	ldr	r2, [pc, #76]	@ (80119b4 <TIM_OC4_SetConfig+0xb4>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d003      	beq.n	8011974 <TIM_OC4_SetConfig+0x74>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	4a12      	ldr	r2, [pc, #72]	@ (80119b8 <TIM_OC4_SetConfig+0xb8>)
 8011970:	4293      	cmp	r3, r2
 8011972:	d109      	bne.n	8011988 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801197a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	695b      	ldr	r3, [r3, #20]
 8011980:	019b      	lsls	r3, r3, #6
 8011982:	697a      	ldr	r2, [r7, #20]
 8011984:	4313      	orrs	r3, r2
 8011986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	697a      	ldr	r2, [r7, #20]
 801198c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	68fa      	ldr	r2, [r7, #12]
 8011992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	693a      	ldr	r2, [r7, #16]
 80119a0:	621a      	str	r2, [r3, #32]
}
 80119a2:	bf00      	nop
 80119a4:	371c      	adds	r7, #28
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	40012c00 	.word	0x40012c00
 80119b4:	40014400 	.word	0x40014400
 80119b8:	40014800 	.word	0x40014800

080119bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80119bc:	b480      	push	{r7}
 80119be:	b087      	sub	sp, #28
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6a1b      	ldr	r3, [r3, #32]
 80119ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a1b      	ldr	r3, [r3, #32]
 80119d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80119ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	4313      	orrs	r3, r2
 80119f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011a00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	689b      	ldr	r3, [r3, #8]
 8011a06:	041b      	lsls	r3, r3, #16
 8011a08:	693a      	ldr	r2, [r7, #16]
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4a13      	ldr	r2, [pc, #76]	@ (8011a60 <TIM_OC5_SetConfig+0xa4>)
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d007      	beq.n	8011a26 <TIM_OC5_SetConfig+0x6a>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4a12      	ldr	r2, [pc, #72]	@ (8011a64 <TIM_OC5_SetConfig+0xa8>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d003      	beq.n	8011a26 <TIM_OC5_SetConfig+0x6a>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4a11      	ldr	r2, [pc, #68]	@ (8011a68 <TIM_OC5_SetConfig+0xac>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d109      	bne.n	8011a3a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	021b      	lsls	r3, r3, #8
 8011a34:	697a      	ldr	r2, [r7, #20]
 8011a36:	4313      	orrs	r3, r2
 8011a38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	697a      	ldr	r2, [r7, #20]
 8011a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	68fa      	ldr	r2, [r7, #12]
 8011a44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	685a      	ldr	r2, [r3, #4]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	693a      	ldr	r2, [r7, #16]
 8011a52:	621a      	str	r2, [r3, #32]
}
 8011a54:	bf00      	nop
 8011a56:	371c      	adds	r7, #28
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr
 8011a60:	40012c00 	.word	0x40012c00
 8011a64:	40014400 	.word	0x40014400
 8011a68:	40014800 	.word	0x40014800

08011a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b087      	sub	sp, #28
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6a1b      	ldr	r3, [r3, #32]
 8011a7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6a1b      	ldr	r3, [r3, #32]
 8011a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	021b      	lsls	r3, r3, #8
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	051b      	lsls	r3, r3, #20
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	4313      	orrs	r3, r2
 8011abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4a14      	ldr	r2, [pc, #80]	@ (8011b14 <TIM_OC6_SetConfig+0xa8>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d007      	beq.n	8011ad8 <TIM_OC6_SetConfig+0x6c>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4a13      	ldr	r2, [pc, #76]	@ (8011b18 <TIM_OC6_SetConfig+0xac>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d003      	beq.n	8011ad8 <TIM_OC6_SetConfig+0x6c>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	4a12      	ldr	r2, [pc, #72]	@ (8011b1c <TIM_OC6_SetConfig+0xb0>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d109      	bne.n	8011aec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011ade:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	695b      	ldr	r3, [r3, #20]
 8011ae4:	029b      	lsls	r3, r3, #10
 8011ae6:	697a      	ldr	r2, [r7, #20]
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	697a      	ldr	r2, [r7, #20]
 8011af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68fa      	ldr	r2, [r7, #12]
 8011af6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	685a      	ldr	r2, [r3, #4]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	693a      	ldr	r2, [r7, #16]
 8011b04:	621a      	str	r2, [r3, #32]
}
 8011b06:	bf00      	nop
 8011b08:	371c      	adds	r7, #28
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	40012c00 	.word	0x40012c00
 8011b18:	40014400 	.word	0x40014400
 8011b1c:	40014800 	.word	0x40014800

08011b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b087      	sub	sp, #28
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	6a1b      	ldr	r3, [r3, #32]
 8011b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	6a1b      	ldr	r3, [r3, #32]
 8011b36:	f023 0201 	bic.w	r2, r3, #1
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	011b      	lsls	r3, r3, #4
 8011b50:	693a      	ldr	r2, [r7, #16]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	f023 030a 	bic.w	r3, r3, #10
 8011b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011b5e:	697a      	ldr	r2, [r7, #20]
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	4313      	orrs	r3, r2
 8011b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	693a      	ldr	r2, [r7, #16]
 8011b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	697a      	ldr	r2, [r7, #20]
 8011b70:	621a      	str	r2, [r3, #32]
}
 8011b72:	bf00      	nop
 8011b74:	371c      	adds	r7, #28
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr

08011b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b7e:	b480      	push	{r7}
 8011b80:	b087      	sub	sp, #28
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	60f8      	str	r0, [r7, #12]
 8011b86:	60b9      	str	r1, [r7, #8]
 8011b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6a1b      	ldr	r3, [r3, #32]
 8011b8e:	f023 0210 	bic.w	r2, r3, #16
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6a1b      	ldr	r3, [r3, #32]
 8011ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	031b      	lsls	r3, r3, #12
 8011bae:	697a      	ldr	r2, [r7, #20]
 8011bb0:	4313      	orrs	r3, r2
 8011bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	011b      	lsls	r3, r3, #4
 8011bc0:	693a      	ldr	r2, [r7, #16]
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	697a      	ldr	r2, [r7, #20]
 8011bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	693a      	ldr	r2, [r7, #16]
 8011bd0:	621a      	str	r2, [r3, #32]
}
 8011bd2:	bf00      	nop
 8011bd4:	371c      	adds	r7, #28
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011bde:	b480      	push	{r7}
 8011be0:	b085      	sub	sp, #20
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	689b      	ldr	r3, [r3, #8]
 8011bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8011bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	f043 0307 	orr.w	r3, r3, #7
 8011c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	609a      	str	r2, [r3, #8]
}
 8011c0c:	bf00      	nop
 8011c0e:	3714      	adds	r7, #20
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b087      	sub	sp, #28
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
 8011c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	689b      	ldr	r3, [r3, #8]
 8011c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	021a      	lsls	r2, r3, #8
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	4313      	orrs	r3, r2
 8011c40:	697a      	ldr	r2, [r7, #20]
 8011c42:	4313      	orrs	r3, r2
 8011c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	697a      	ldr	r2, [r7, #20]
 8011c4a:	609a      	str	r2, [r3, #8]
}
 8011c4c:	bf00      	nop
 8011c4e:	371c      	adds	r7, #28
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	4a1e      	ldr	r2, [pc, #120]	@ (8011cdc <TIM_ResetCallback+0x84>)
 8011c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8011ce0 <TIM_ResetCallback+0x88>)
 8011c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	4a1c      	ldr	r2, [pc, #112]	@ (8011ce4 <TIM_ResetCallback+0x8c>)
 8011c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8011ce8 <TIM_ResetCallback+0x90>)
 8011c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	4a1a      	ldr	r2, [pc, #104]	@ (8011cec <TIM_ResetCallback+0x94>)
 8011c84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4a19      	ldr	r2, [pc, #100]	@ (8011cf0 <TIM_ResetCallback+0x98>)
 8011c8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4a18      	ldr	r2, [pc, #96]	@ (8011cf4 <TIM_ResetCallback+0x9c>)
 8011c94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4a17      	ldr	r2, [pc, #92]	@ (8011cf8 <TIM_ResetCallback+0xa0>)
 8011c9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a16      	ldr	r2, [pc, #88]	@ (8011cfc <TIM_ResetCallback+0xa4>)
 8011ca4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4a15      	ldr	r2, [pc, #84]	@ (8011d00 <TIM_ResetCallback+0xa8>)
 8011cac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a14      	ldr	r2, [pc, #80]	@ (8011d04 <TIM_ResetCallback+0xac>)
 8011cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4a13      	ldr	r2, [pc, #76]	@ (8011d08 <TIM_ResetCallback+0xb0>)
 8011cbc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	4a12      	ldr	r2, [pc, #72]	@ (8011d0c <TIM_ResetCallback+0xb4>)
 8011cc4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	4a11      	ldr	r2, [pc, #68]	@ (8011d10 <TIM_ResetCallback+0xb8>)
 8011ccc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8011cd0:	bf00      	nop
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr
 8011cdc:	08005bc1 	.word	0x08005bc1
 8011ce0:	080114a7 	.word	0x080114a7
 8011ce4:	0801151f 	.word	0x0801151f
 8011ce8:	08011533 	.word	0x08011533
 8011cec:	080114cf 	.word	0x080114cf
 8011cf0:	080114e3 	.word	0x080114e3
 8011cf4:	080114bb 	.word	0x080114bb
 8011cf8:	080114f7 	.word	0x080114f7
 8011cfc:	0801150b 	.word	0x0801150b
 8011d00:	08011547 	.word	0x08011547
 8011d04:	08011ef5 	.word	0x08011ef5
 8011d08:	08011f09 	.word	0x08011f09
 8011d0c:	08011f1d 	.word	0x08011f1d
 8011d10:	08011f31 	.word	0x08011f31

08011d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d101      	bne.n	8011d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	e04a      	b.n	8011dc2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2202      	movs	r2, #2
 8011d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	689b      	ldr	r3, [r3, #8]
 8011d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a1f      	ldr	r2, [pc, #124]	@ (8011dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d108      	bne.n	8011d68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011d5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	4313      	orrs	r3, r2
 8011d66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	4313      	orrs	r3, r2
 8011d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	68fa      	ldr	r2, [r7, #12]
 8011d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	4a12      	ldr	r2, [pc, #72]	@ (8011dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d004      	beq.n	8011d96 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d94:	d10c      	bne.n	8011db0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	689b      	ldr	r3, [r3, #8]
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2201      	movs	r2, #1
 8011db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3714      	adds	r7, #20
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	40012c00 	.word	0x40012c00

08011dd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011dde:	2300      	movs	r3, #0
 8011de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d101      	bne.n	8011df0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011dec:	2302      	movs	r3, #2
 8011dee:	e078      	b.n	8011ee2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2201      	movs	r2, #1
 8011df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	4313      	orrs	r3, r2
 8011e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	4313      	orrs	r3, r2
 8011e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	4313      	orrs	r3, r2
 8011e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	691b      	ldr	r3, [r3, #16]
 8011e3a:	4313      	orrs	r3, r2
 8011e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	695b      	ldr	r3, [r3, #20]
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e56:	4313      	orrs	r3, r2
 8011e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	699b      	ldr	r3, [r3, #24]
 8011e64:	041b      	lsls	r3, r3, #16
 8011e66:	4313      	orrs	r3, r2
 8011e68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4a20      	ldr	r2, [pc, #128]	@ (8011ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d106      	bne.n	8011e82 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	69db      	ldr	r3, [r3, #28]
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4a1a      	ldr	r2, [pc, #104]	@ (8011ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d121      	bne.n	8011ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e96:	051b      	lsls	r3, r3, #20
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	6a1b      	ldr	r3, [r3, #32]
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8011ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d106      	bne.n	8011ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011ee0:	2300      	movs	r3, #0
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3714      	adds	r7, #20
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	40012c00 	.word	0x40012c00

08011ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011efc:	bf00      	nop
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011f24:	bf00      	nop
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011f38:	bf00      	nop
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <LL_RCC_GetUSARTClockSource>:
{
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8011f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	4013      	ands	r3, r2
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <LL_RCC_GetLPUARTClockSource>:
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8011f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	4013      	ands	r3, r2
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d101      	bne.n	8011f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011f92:	2301      	movs	r3, #1
 8011f94:	e042      	b.n	801201c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d106      	bne.n	8011fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7f8 fe7d 	bl	800aca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2224      	movs	r2, #36	@ 0x24
 8011fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f022 0201 	bic.w	r2, r2, #1
 8011fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fbfe 	bl	80127c8 <UART_SetConfig>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d101      	bne.n	8011fd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e022      	b.n	801201c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d002      	beq.n	8011fe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f000 fe1a 	bl	8012c18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	685a      	ldr	r2, [r3, #4]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	689a      	ldr	r2, [r3, #8]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	f042 0201 	orr.w	r2, r2, #1
 8012012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 fea1 	bl	8012d5c <UART_CheckIdleState>
 801201a:	4603      	mov	r3, r0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b08a      	sub	sp, #40	@ 0x28
 8012028:	af02      	add	r7, sp, #8
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	603b      	str	r3, [r7, #0]
 8012030:	4613      	mov	r3, r2
 8012032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801203a:	2b20      	cmp	r3, #32
 801203c:	d17b      	bne.n	8012136 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <HAL_UART_Transmit+0x26>
 8012044:	88fb      	ldrh	r3, [r7, #6]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d101      	bne.n	801204e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801204a:	2301      	movs	r3, #1
 801204c:	e074      	b.n	8012138 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2200      	movs	r2, #0
 8012052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2221      	movs	r2, #33	@ 0x21
 801205a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801205e:	f7fb f9db 	bl	800d418 <HAL_GetTick>
 8012062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	88fa      	ldrh	r2, [r7, #6]
 8012068:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	88fa      	ldrh	r2, [r7, #6]
 8012070:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801207c:	d108      	bne.n	8012090 <HAL_UART_Transmit+0x6c>
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d104      	bne.n	8012090 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012086:	2300      	movs	r3, #0
 8012088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	61bb      	str	r3, [r7, #24]
 801208e:	e003      	b.n	8012098 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012094:	2300      	movs	r3, #0
 8012096:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012098:	e030      	b.n	80120fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	2200      	movs	r2, #0
 80120a2:	2180      	movs	r1, #128	@ 0x80
 80120a4:	68f8      	ldr	r0, [r7, #12]
 80120a6:	f000 ff03 	bl	8012eb0 <UART_WaitOnFlagUntilTimeout>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d005      	beq.n	80120bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	2220      	movs	r2, #32
 80120b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80120b8:	2303      	movs	r3, #3
 80120ba:	e03d      	b.n	8012138 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10b      	bne.n	80120da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	881b      	ldrh	r3, [r3, #0]
 80120c6:	461a      	mov	r2, r3
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80120d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80120d2:	69bb      	ldr	r3, [r7, #24]
 80120d4:	3302      	adds	r3, #2
 80120d6:	61bb      	str	r3, [r7, #24]
 80120d8:	e007      	b.n	80120ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	781a      	ldrb	r2, [r3, #0]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	3301      	adds	r3, #1
 80120e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	3b01      	subs	r3, #1
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012102:	b29b      	uxth	r3, r3
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1c8      	bne.n	801209a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	9300      	str	r3, [sp, #0]
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	2200      	movs	r2, #0
 8012110:	2140      	movs	r1, #64	@ 0x40
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f000 fecc 	bl	8012eb0 <UART_WaitOnFlagUntilTimeout>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d005      	beq.n	801212a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2220      	movs	r2, #32
 8012122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8012126:	2303      	movs	r3, #3
 8012128:	e006      	b.n	8012138 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2220      	movs	r2, #32
 801212e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	e000      	b.n	8012138 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012136:	2302      	movs	r3, #2
  }
}
 8012138:	4618      	mov	r0, r3
 801213a:	3720      	adds	r7, #32
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}

08012140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b0ba      	sub	sp, #232	@ 0xe8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	69db      	ldr	r3, [r3, #28]
 801214e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012166:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801216a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801216e:	4013      	ands	r3, r2
 8012170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012178:	2b00      	cmp	r3, #0
 801217a:	d11b      	bne.n	80121b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801217c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012180:	f003 0320 	and.w	r3, r3, #32
 8012184:	2b00      	cmp	r3, #0
 8012186:	d015      	beq.n	80121b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801218c:	f003 0320 	and.w	r3, r3, #32
 8012190:	2b00      	cmp	r3, #0
 8012192:	d105      	bne.n	80121a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801219c:	2b00      	cmp	r3, #0
 801219e:	d009      	beq.n	80121b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	f000 82e3 	beq.w	8012770 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	4798      	blx	r3
      }
      return;
 80121b2:	e2dd      	b.n	8012770 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80121b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 8123 	beq.w	8012404 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80121be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80121c2:	4b8d      	ldr	r3, [pc, #564]	@ (80123f8 <HAL_UART_IRQHandler+0x2b8>)
 80121c4:	4013      	ands	r3, r2
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d106      	bne.n	80121d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80121ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80121ce:	4b8b      	ldr	r3, [pc, #556]	@ (80123fc <HAL_UART_IRQHandler+0x2bc>)
 80121d0:	4013      	ands	r3, r2
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f000 8116 	beq.w	8012404 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80121d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80121dc:	f003 0301 	and.w	r3, r3, #1
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d011      	beq.n	8012208 <HAL_UART_IRQHandler+0xc8>
 80121e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80121e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00b      	beq.n	8012208 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2201      	movs	r2, #1
 80121f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80121fe:	f043 0201 	orr.w	r2, r3, #1
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801220c:	f003 0302 	and.w	r3, r3, #2
 8012210:	2b00      	cmp	r3, #0
 8012212:	d011      	beq.n	8012238 <HAL_UART_IRQHandler+0xf8>
 8012214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012218:	f003 0301 	and.w	r3, r3, #1
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00b      	beq.n	8012238 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2202      	movs	r2, #2
 8012226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801222e:	f043 0204 	orr.w	r2, r3, #4
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801223c:	f003 0304 	and.w	r3, r3, #4
 8012240:	2b00      	cmp	r3, #0
 8012242:	d011      	beq.n	8012268 <HAL_UART_IRQHandler+0x128>
 8012244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012248:	f003 0301 	and.w	r3, r3, #1
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00b      	beq.n	8012268 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	2204      	movs	r2, #4
 8012256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801225e:	f043 0202 	orr.w	r2, r3, #2
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801226c:	f003 0308 	and.w	r3, r3, #8
 8012270:	2b00      	cmp	r3, #0
 8012272:	d017      	beq.n	80122a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012278:	f003 0320 	and.w	r3, r3, #32
 801227c:	2b00      	cmp	r3, #0
 801227e:	d105      	bne.n	801228c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012280:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012284:	4b5c      	ldr	r3, [pc, #368]	@ (80123f8 <HAL_UART_IRQHandler+0x2b8>)
 8012286:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012288:	2b00      	cmp	r3, #0
 801228a:	d00b      	beq.n	80122a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2208      	movs	r2, #8
 8012292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801229a:	f043 0208 	orr.w	r2, r3, #8
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80122a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d012      	beq.n	80122d6 <HAL_UART_IRQHandler+0x196>
 80122b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d00c      	beq.n	80122d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80122c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122cc:	f043 0220 	orr.w	r2, r3, #32
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122dc:	2b00      	cmp	r3, #0
 80122de:	f000 8249 	beq.w	8012774 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80122e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122e6:	f003 0320 	and.w	r3, r3, #32
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d013      	beq.n	8012316 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80122ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122f2:	f003 0320 	and.w	r3, r3, #32
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d105      	bne.n	8012306 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80122fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80122fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012302:	2b00      	cmp	r3, #0
 8012304:	d007      	beq.n	8012316 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801230a:	2b00      	cmp	r3, #0
 801230c:	d003      	beq.n	8012316 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801231c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801232a:	2b40      	cmp	r3, #64	@ 0x40
 801232c:	d005      	beq.n	801233a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801232e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012332:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012336:	2b00      	cmp	r3, #0
 8012338:	d054      	beq.n	80123e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f000 fe1f 	bl	8012f7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	689b      	ldr	r3, [r3, #8]
 8012346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801234a:	2b40      	cmp	r3, #64	@ 0x40
 801234c:	d146      	bne.n	80123dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	3308      	adds	r3, #8
 8012354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801235c:	e853 3f00 	ldrex	r3, [r3]
 8012360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801236c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	3308      	adds	r3, #8
 8012376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801237a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801237e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801238a:	e841 2300 	strex	r3, r2, [r1]
 801238e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1d9      	bne.n	801234e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d017      	beq.n	80123d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123aa:	4a15      	ldr	r2, [pc, #84]	@ (8012400 <HAL_UART_IRQHandler+0x2c0>)
 80123ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fb f9d9 	bl	800d76c <HAL_DMA_Abort_IT>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d019      	beq.n	80123f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80123ce:	4610      	mov	r0, r2
 80123d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123d2:	e00f      	b.n	80123f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f9e1 	bl	801279c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123da:	e00b      	b.n	80123f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 f9dd 	bl	801279c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123e2:	e007      	b.n	80123f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 f9d9 	bl	801279c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80123f2:	e1bf      	b.n	8012774 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123f4:	bf00      	nop
    return;
 80123f6:	e1bd      	b.n	8012774 <HAL_UART_IRQHandler+0x634>
 80123f8:	10000001 	.word	0x10000001
 80123fc:	04000120 	.word	0x04000120
 8012400:	0801304b 	.word	0x0801304b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012408:	2b01      	cmp	r3, #1
 801240a:	f040 8153 	bne.w	80126b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801240e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012412:	f003 0310 	and.w	r3, r3, #16
 8012416:	2b00      	cmp	r3, #0
 8012418:	f000 814c 	beq.w	80126b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801241c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012420:	f003 0310 	and.w	r3, r3, #16
 8012424:	2b00      	cmp	r3, #0
 8012426:	f000 8145 	beq.w	80126b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	2210      	movs	r2, #16
 8012430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801243c:	2b40      	cmp	r3, #64	@ 0x40
 801243e:	f040 80bb 	bne.w	80125b8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012454:	2b00      	cmp	r3, #0
 8012456:	f000 818f 	beq.w	8012778 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012460:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012464:	429a      	cmp	r2, r3
 8012466:	f080 8187 	bcs.w	8012778 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012470:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	f003 0320 	and.w	r3, r3, #32
 8012482:	2b00      	cmp	r3, #0
 8012484:	f040 8087 	bne.w	8012596 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012490:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012494:	e853 3f00 	ldrex	r3, [r3]
 8012498:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801249c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80124a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80124a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	461a      	mov	r2, r3
 80124ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80124b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80124b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80124be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80124c2:	e841 2300 	strex	r3, r2, [r1]
 80124c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80124ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1da      	bne.n	8012488 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	3308      	adds	r3, #8
 80124d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80124dc:	e853 3f00 	ldrex	r3, [r3]
 80124e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80124e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80124e4:	f023 0301 	bic.w	r3, r3, #1
 80124e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	3308      	adds	r3, #8
 80124f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80124f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80124fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80124fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012502:	e841 2300 	strex	r3, r2, [r1]
 8012506:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801250a:	2b00      	cmp	r3, #0
 801250c:	d1e1      	bne.n	80124d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	3308      	adds	r3, #8
 8012514:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012518:	e853 3f00 	ldrex	r3, [r3]
 801251c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801251e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012524:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	3308      	adds	r3, #8
 801252e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012532:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012534:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012536:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012538:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801253a:	e841 2300 	strex	r3, r2, [r1]
 801253e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012540:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1e3      	bne.n	801250e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2220      	movs	r2, #32
 801254a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801255a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801255c:	e853 3f00 	ldrex	r3, [r3]
 8012560:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012564:	f023 0310 	bic.w	r3, r3, #16
 8012568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	461a      	mov	r2, r3
 8012572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012576:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012578:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801257a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801257c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801257e:	e841 2300 	strex	r3, r2, [r1]
 8012582:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1e4      	bne.n	8012554 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012590:	4618      	mov	r0, r3
 8012592:	f7fb f88c 	bl	800d6ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2202      	movs	r2, #2
 801259a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	1ad3      	subs	r3, r2, r3
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4619      	mov	r1, r3
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 f8fd 	bl	80127b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80125b6:	e0df      	b.n	8012778 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f000 80d1 	beq.w	801277c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80125da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f000 80cc 	beq.w	801277c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ec:	e853 3f00 	ldrex	r3, [r3]
 80125f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80125f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80125f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	461a      	mov	r2, r3
 8012602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012606:	647b      	str	r3, [r7, #68]	@ 0x44
 8012608:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801260a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801260c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801260e:	e841 2300 	strex	r3, r2, [r1]
 8012612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1e4      	bne.n	80125e4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	3308      	adds	r3, #8
 8012620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012624:	e853 3f00 	ldrex	r3, [r3]
 8012628:	623b      	str	r3, [r7, #32]
   return(result);
 801262a:	6a3b      	ldr	r3, [r7, #32]
 801262c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012630:	f023 0301 	bic.w	r3, r3, #1
 8012634:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	3308      	adds	r3, #8
 801263e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012642:	633a      	str	r2, [r7, #48]	@ 0x30
 8012644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801264a:	e841 2300 	strex	r3, r2, [r1]
 801264e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1e1      	bne.n	801261a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2220      	movs	r2, #32
 801265a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	e853 3f00 	ldrex	r3, [r3]
 8012676:	60fb      	str	r3, [r7, #12]
   return(result);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f023 0310 	bic.w	r3, r3, #16
 801267e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	461a      	mov	r2, r3
 8012688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801268c:	61fb      	str	r3, [r7, #28]
 801268e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012690:	69b9      	ldr	r1, [r7, #24]
 8012692:	69fa      	ldr	r2, [r7, #28]
 8012694:	e841 2300 	strex	r3, r2, [r1]
 8012698:	617b      	str	r3, [r7, #20]
   return(result);
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1e4      	bne.n	801266a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2202      	movs	r2, #2
 80126a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80126a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80126aa:	4619      	mov	r1, r3
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f87f 	bl	80127b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80126b2:	e063      	b.n	801277c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80126b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00e      	beq.n	80126de <HAL_UART_IRQHandler+0x59e>
 80126c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80126c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d008      	beq.n	80126de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80126d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 fcf8 	bl	80130cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80126dc:	e051      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80126de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d014      	beq.n	8012714 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80126ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80126ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d105      	bne.n	8012702 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80126f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80126fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d008      	beq.n	8012714 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012706:	2b00      	cmp	r3, #0
 8012708:	d03a      	beq.n	8012780 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	4798      	blx	r3
    }
    return;
 8012712:	e035      	b.n	8012780 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801271c:	2b00      	cmp	r3, #0
 801271e:	d009      	beq.n	8012734 <HAL_UART_IRQHandler+0x5f4>
 8012720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012728:	2b00      	cmp	r3, #0
 801272a:	d003      	beq.n	8012734 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 fca2 	bl	8013076 <UART_EndTransmit_IT>
    return;
 8012732:	e026      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801273c:	2b00      	cmp	r3, #0
 801273e:	d009      	beq.n	8012754 <HAL_UART_IRQHandler+0x614>
 8012740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012748:	2b00      	cmp	r3, #0
 801274a:	d003      	beq.n	8012754 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 fcd1 	bl	80130f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012752:	e016      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801275c:	2b00      	cmp	r3, #0
 801275e:	d010      	beq.n	8012782 <HAL_UART_IRQHandler+0x642>
 8012760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012764:	2b00      	cmp	r3, #0
 8012766:	da0c      	bge.n	8012782 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 fcb9 	bl	80130e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801276e:	e008      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
      return;
 8012770:	bf00      	nop
 8012772:	e006      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
    return;
 8012774:	bf00      	nop
 8012776:	e004      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
      return;
 8012778:	bf00      	nop
 801277a:	e002      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
      return;
 801277c:	bf00      	nop
 801277e:	e000      	b.n	8012782 <HAL_UART_IRQHandler+0x642>
    return;
 8012780:	bf00      	nop
  }
}
 8012782:	37e8      	adds	r7, #232	@ 0xe8
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012790:	bf00      	nop
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr

0801279c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80127a4:	bf00      	nop
 80127a6:	370c      	adds	r7, #12
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	460b      	mov	r3, r1
 80127ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80127bc:	bf00      	nop
 80127be:	370c      	adds	r7, #12
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr

080127c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80127c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127cc:	b08c      	sub	sp, #48	@ 0x30
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80127d2:	2300      	movs	r3, #0
 80127d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	689a      	ldr	r2, [r3, #8]
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	691b      	ldr	r3, [r3, #16]
 80127e0:	431a      	orrs	r2, r3
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	695b      	ldr	r3, [r3, #20]
 80127e6:	431a      	orrs	r2, r3
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	69db      	ldr	r3, [r3, #28]
 80127ec:	4313      	orrs	r3, r2
 80127ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	4baf      	ldr	r3, [pc, #700]	@ (8012ab4 <UART_SetConfig+0x2ec>)
 80127f8:	4013      	ands	r3, r2
 80127fa:	697a      	ldr	r2, [r7, #20]
 80127fc:	6812      	ldr	r2, [r2, #0]
 80127fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012800:	430b      	orrs	r3, r1
 8012802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	68da      	ldr	r2, [r3, #12]
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	430a      	orrs	r2, r1
 8012818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4aa4      	ldr	r2, [pc, #656]	@ (8012ab8 <UART_SetConfig+0x2f0>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d004      	beq.n	8012834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	6a1b      	ldr	r3, [r3, #32]
 801282e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012830:	4313      	orrs	r3, r2
 8012832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	689b      	ldr	r3, [r3, #8]
 801283a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801283e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8012842:	697a      	ldr	r2, [r7, #20]
 8012844:	6812      	ldr	r2, [r2, #0]
 8012846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012848:	430b      	orrs	r3, r1
 801284a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012852:	f023 010f 	bic.w	r1, r3, #15
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	430a      	orrs	r2, r1
 8012860:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a95      	ldr	r2, [pc, #596]	@ (8012abc <UART_SetConfig+0x2f4>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d125      	bne.n	80128b8 <UART_SetConfig+0xf0>
 801286c:	2003      	movs	r0, #3
 801286e:	f7ff fb69 	bl	8011f44 <LL_RCC_GetUSARTClockSource>
 8012872:	4603      	mov	r3, r0
 8012874:	2b03      	cmp	r3, #3
 8012876:	d81b      	bhi.n	80128b0 <UART_SetConfig+0xe8>
 8012878:	a201      	add	r2, pc, #4	@ (adr r2, 8012880 <UART_SetConfig+0xb8>)
 801287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801287e:	bf00      	nop
 8012880:	08012891 	.word	0x08012891
 8012884:	080128a1 	.word	0x080128a1
 8012888:	08012899 	.word	0x08012899
 801288c:	080128a9 	.word	0x080128a9
 8012890:	2301      	movs	r3, #1
 8012892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8012896:	e042      	b.n	801291e <UART_SetConfig+0x156>
 8012898:	2302      	movs	r3, #2
 801289a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801289e:	e03e      	b.n	801291e <UART_SetConfig+0x156>
 80128a0:	2304      	movs	r3, #4
 80128a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80128a6:	e03a      	b.n	801291e <UART_SetConfig+0x156>
 80128a8:	2308      	movs	r3, #8
 80128aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80128ae:	e036      	b.n	801291e <UART_SetConfig+0x156>
 80128b0:	2310      	movs	r3, #16
 80128b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80128b6:	e032      	b.n	801291e <UART_SetConfig+0x156>
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a7e      	ldr	r2, [pc, #504]	@ (8012ab8 <UART_SetConfig+0x2f0>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d12a      	bne.n	8012918 <UART_SetConfig+0x150>
 80128c2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80128c6:	f7ff fb4d 	bl	8011f64 <LL_RCC_GetLPUARTClockSource>
 80128ca:	4603      	mov	r3, r0
 80128cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80128d0:	d01a      	beq.n	8012908 <UART_SetConfig+0x140>
 80128d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80128d6:	d81b      	bhi.n	8012910 <UART_SetConfig+0x148>
 80128d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80128dc:	d00c      	beq.n	80128f8 <UART_SetConfig+0x130>
 80128de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80128e2:	d815      	bhi.n	8012910 <UART_SetConfig+0x148>
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d003      	beq.n	80128f0 <UART_SetConfig+0x128>
 80128e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80128ec:	d008      	beq.n	8012900 <UART_SetConfig+0x138>
 80128ee:	e00f      	b.n	8012910 <UART_SetConfig+0x148>
 80128f0:	2300      	movs	r3, #0
 80128f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80128f6:	e012      	b.n	801291e <UART_SetConfig+0x156>
 80128f8:	2302      	movs	r3, #2
 80128fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80128fe:	e00e      	b.n	801291e <UART_SetConfig+0x156>
 8012900:	2304      	movs	r3, #4
 8012902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8012906:	e00a      	b.n	801291e <UART_SetConfig+0x156>
 8012908:	2308      	movs	r3, #8
 801290a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801290e:	e006      	b.n	801291e <UART_SetConfig+0x156>
 8012910:	2310      	movs	r3, #16
 8012912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8012916:	e002      	b.n	801291e <UART_SetConfig+0x156>
 8012918:	2310      	movs	r3, #16
 801291a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	4a65      	ldr	r2, [pc, #404]	@ (8012ab8 <UART_SetConfig+0x2f0>)
 8012924:	4293      	cmp	r3, r2
 8012926:	f040 8097 	bne.w	8012a58 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801292a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801292e:	2b08      	cmp	r3, #8
 8012930:	d823      	bhi.n	801297a <UART_SetConfig+0x1b2>
 8012932:	a201      	add	r2, pc, #4	@ (adr r2, 8012938 <UART_SetConfig+0x170>)
 8012934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012938:	0801295d 	.word	0x0801295d
 801293c:	0801297b 	.word	0x0801297b
 8012940:	08012965 	.word	0x08012965
 8012944:	0801297b 	.word	0x0801297b
 8012948:	0801296b 	.word	0x0801296b
 801294c:	0801297b 	.word	0x0801297b
 8012950:	0801297b 	.word	0x0801297b
 8012954:	0801297b 	.word	0x0801297b
 8012958:	08012973 	.word	0x08012973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801295c:	f7fc fd70 	bl	800f440 <HAL_RCC_GetPCLK1Freq>
 8012960:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8012962:	e010      	b.n	8012986 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012964:	4b56      	ldr	r3, [pc, #344]	@ (8012ac0 <UART_SetConfig+0x2f8>)
 8012966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8012968:	e00d      	b.n	8012986 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801296a:	f7fc fce9 	bl	800f340 <HAL_RCC_GetSysClockFreq>
 801296e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8012970:	e009      	b.n	8012986 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8012978:	e005      	b.n	8012986 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801297a:	2300      	movs	r3, #0
 801297c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801297e:	2301      	movs	r3, #1
 8012980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8012984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 812b 	beq.w	8012be4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012992:	4a4c      	ldr	r2, [pc, #304]	@ (8012ac4 <UART_SetConfig+0x2fc>)
 8012994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012998:	461a      	mov	r2, r3
 801299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801299c:	fbb3 f3f2 	udiv	r3, r3, r2
 80129a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	685a      	ldr	r2, [r3, #4]
 80129a6:	4613      	mov	r3, r2
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4413      	add	r3, r2
 80129ac:	69ba      	ldr	r2, [r7, #24]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d305      	bcc.n	80129be <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80129b8:	69ba      	ldr	r2, [r7, #24]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d903      	bls.n	80129c6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80129be:	2301      	movs	r3, #1
 80129c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80129c4:	e10e      	b.n	8012be4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80129c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c8:	2200      	movs	r2, #0
 80129ca:	60bb      	str	r3, [r7, #8]
 80129cc:	60fa      	str	r2, [r7, #12]
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129d2:	4a3c      	ldr	r2, [pc, #240]	@ (8012ac4 <UART_SetConfig+0x2fc>)
 80129d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80129d8:	b29b      	uxth	r3, r3
 80129da:	2200      	movs	r2, #0
 80129dc:	603b      	str	r3, [r7, #0]
 80129de:	607a      	str	r2, [r7, #4]
 80129e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80129e8:	f7ee f986 	bl	8000cf8 <__aeabi_uldivmod>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	4610      	mov	r0, r2
 80129f2:	4619      	mov	r1, r3
 80129f4:	f04f 0200 	mov.w	r2, #0
 80129f8:	f04f 0300 	mov.w	r3, #0
 80129fc:	020b      	lsls	r3, r1, #8
 80129fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012a02:	0202      	lsls	r2, r0, #8
 8012a04:	6979      	ldr	r1, [r7, #20]
 8012a06:	6849      	ldr	r1, [r1, #4]
 8012a08:	0849      	lsrs	r1, r1, #1
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	4605      	mov	r5, r0
 8012a10:	eb12 0804 	adds.w	r8, r2, r4
 8012a14:	eb43 0905 	adc.w	r9, r3, r5
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	469a      	mov	sl, r3
 8012a20:	4693      	mov	fp, r2
 8012a22:	4652      	mov	r2, sl
 8012a24:	465b      	mov	r3, fp
 8012a26:	4640      	mov	r0, r8
 8012a28:	4649      	mov	r1, r9
 8012a2a:	f7ee f965 	bl	8000cf8 <__aeabi_uldivmod>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	460b      	mov	r3, r1
 8012a32:	4613      	mov	r3, r2
 8012a34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012a36:	6a3b      	ldr	r3, [r7, #32]
 8012a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012a3c:	d308      	bcc.n	8012a50 <UART_SetConfig+0x288>
 8012a3e:	6a3b      	ldr	r3, [r7, #32]
 8012a40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012a44:	d204      	bcs.n	8012a50 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	6a3a      	ldr	r2, [r7, #32]
 8012a4c:	60da      	str	r2, [r3, #12]
 8012a4e:	e0c9      	b.n	8012be4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8012a50:	2301      	movs	r3, #1
 8012a52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8012a56:	e0c5      	b.n	8012be4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	69db      	ldr	r3, [r3, #28]
 8012a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a60:	d16d      	bne.n	8012b3e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8012a62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012a66:	3b01      	subs	r3, #1
 8012a68:	2b07      	cmp	r3, #7
 8012a6a:	d82d      	bhi.n	8012ac8 <UART_SetConfig+0x300>
 8012a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8012a74 <UART_SetConfig+0x2ac>)
 8012a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a72:	bf00      	nop
 8012a74:	08012a95 	.word	0x08012a95
 8012a78:	08012a9d 	.word	0x08012a9d
 8012a7c:	08012ac9 	.word	0x08012ac9
 8012a80:	08012aa3 	.word	0x08012aa3
 8012a84:	08012ac9 	.word	0x08012ac9
 8012a88:	08012ac9 	.word	0x08012ac9
 8012a8c:	08012ac9 	.word	0x08012ac9
 8012a90:	08012aab 	.word	0x08012aab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012a94:	f7fc fcea 	bl	800f46c <HAL_RCC_GetPCLK2Freq>
 8012a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8012a9a:	e01b      	b.n	8012ad4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012a9c:	4b08      	ldr	r3, [pc, #32]	@ (8012ac0 <UART_SetConfig+0x2f8>)
 8012a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8012aa0:	e018      	b.n	8012ad4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012aa2:	f7fc fc4d 	bl	800f340 <HAL_RCC_GetSysClockFreq>
 8012aa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8012aa8:	e014      	b.n	8012ad4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8012ab0:	e010      	b.n	8012ad4 <UART_SetConfig+0x30c>
 8012ab2:	bf00      	nop
 8012ab4:	cfff69f3 	.word	0xcfff69f3
 8012ab8:	40008000 	.word	0x40008000
 8012abc:	40013800 	.word	0x40013800
 8012ac0:	00f42400 	.word	0x00f42400
 8012ac4:	08018ffc 	.word	0x08018ffc
      default:
        pclk = 0U;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8012acc:	2301      	movs	r3, #1
 8012ace:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8012ad2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 8084 	beq.w	8012be4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8012c10 <UART_SetConfig+0x448>)
 8012ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8012aee:	005a      	lsls	r2, r3, #1
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	085b      	lsrs	r3, r3, #1
 8012af6:	441a      	add	r2, r3
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b00:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b02:	6a3b      	ldr	r3, [r7, #32]
 8012b04:	2b0f      	cmp	r3, #15
 8012b06:	d916      	bls.n	8012b36 <UART_SetConfig+0x36e>
 8012b08:	6a3b      	ldr	r3, [r7, #32]
 8012b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b0e:	d212      	bcs.n	8012b36 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012b10:	6a3b      	ldr	r3, [r7, #32]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	f023 030f 	bic.w	r3, r3, #15
 8012b18:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012b1a:	6a3b      	ldr	r3, [r7, #32]
 8012b1c:	085b      	lsrs	r3, r3, #1
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	f003 0307 	and.w	r3, r3, #7
 8012b24:	b29a      	uxth	r2, r3
 8012b26:	8bfb      	ldrh	r3, [r7, #30]
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	8bfa      	ldrh	r2, [r7, #30]
 8012b32:	60da      	str	r2, [r3, #12]
 8012b34:	e056      	b.n	8012be4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8012b36:	2301      	movs	r3, #1
 8012b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8012b3c:	e052      	b.n	8012be4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012b42:	3b01      	subs	r3, #1
 8012b44:	2b07      	cmp	r3, #7
 8012b46:	d822      	bhi.n	8012b8e <UART_SetConfig+0x3c6>
 8012b48:	a201      	add	r2, pc, #4	@ (adr r2, 8012b50 <UART_SetConfig+0x388>)
 8012b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b4e:	bf00      	nop
 8012b50:	08012b71 	.word	0x08012b71
 8012b54:	08012b79 	.word	0x08012b79
 8012b58:	08012b8f 	.word	0x08012b8f
 8012b5c:	08012b7f 	.word	0x08012b7f
 8012b60:	08012b8f 	.word	0x08012b8f
 8012b64:	08012b8f 	.word	0x08012b8f
 8012b68:	08012b8f 	.word	0x08012b8f
 8012b6c:	08012b87 	.word	0x08012b87
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b70:	f7fc fc7c 	bl	800f46c <HAL_RCC_GetPCLK2Freq>
 8012b74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8012b76:	e010      	b.n	8012b9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012b78:	4b26      	ldr	r3, [pc, #152]	@ (8012c14 <UART_SetConfig+0x44c>)
 8012b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8012b7c:	e00d      	b.n	8012b9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012b7e:	f7fc fbdf 	bl	800f340 <HAL_RCC_GetSysClockFreq>
 8012b82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8012b84:	e009      	b.n	8012b9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8012b8c:	e005      	b.n	8012b9a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8012b92:	2301      	movs	r3, #1
 8012b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8012b98:	bf00      	nop
    }

    if (pclk != 0U)
 8012b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d021      	beq.n	8012be4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8012c10 <UART_SetConfig+0x448>)
 8012ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012baa:	461a      	mov	r2, r3
 8012bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	085b      	lsrs	r3, r3, #1
 8012bb8:	441a      	add	r2, r3
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	2b0f      	cmp	r3, #15
 8012bc8:	d909      	bls.n	8012bde <UART_SetConfig+0x416>
 8012bca:	6a3b      	ldr	r3, [r7, #32]
 8012bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bd0:	d205      	bcs.n	8012bde <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	60da      	str	r2, [r3, #12]
 8012bdc:	e002      	b.n	8012be4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8012bde:	2301      	movs	r3, #1
 8012be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	2201      	movs	r2, #1
 8012be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	2201      	movs	r2, #1
 8012bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012c00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3730      	adds	r7, #48	@ 0x30
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012c0e:	bf00      	nop
 8012c10:	08018ffc 	.word	0x08018ffc
 8012c14:	00f42400 	.word	0x00f42400

08012c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c24:	f003 0301 	and.w	r3, r3, #1
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d00a      	beq.n	8012c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	430a      	orrs	r2, r1
 8012c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c46:	f003 0302 	and.w	r3, r3, #2
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00a      	beq.n	8012c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	430a      	orrs	r2, r1
 8012c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c68:	f003 0304 	and.w	r3, r3, #4
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00a      	beq.n	8012c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	430a      	orrs	r2, r1
 8012c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c8a:	f003 0308 	and.w	r3, r3, #8
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00a      	beq.n	8012ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	430a      	orrs	r2, r1
 8012ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cac:	f003 0310 	and.w	r3, r3, #16
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d00a      	beq.n	8012cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	430a      	orrs	r2, r1
 8012cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cce:	f003 0320 	and.w	r3, r3, #32
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00a      	beq.n	8012cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	430a      	orrs	r2, r1
 8012cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d01a      	beq.n	8012d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	430a      	orrs	r2, r1
 8012d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012d16:	d10a      	bne.n	8012d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	430a      	orrs	r2, r1
 8012d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d00a      	beq.n	8012d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	430a      	orrs	r2, r1
 8012d4e:	605a      	str	r2, [r3, #4]
  }
}
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr

08012d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b098      	sub	sp, #96	@ 0x60
 8012d60:	af02      	add	r7, sp, #8
 8012d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2200      	movs	r2, #0
 8012d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012d6c:	f7fa fb54 	bl	800d418 <HAL_GetTick>
 8012d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f003 0308 	and.w	r3, r3, #8
 8012d7c:	2b08      	cmp	r3, #8
 8012d7e:	d12f      	bne.n	8012de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012d84:	9300      	str	r3, [sp, #0]
 8012d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f000 f88e 	bl	8012eb0 <UART_WaitOnFlagUntilTimeout>
 8012d94:	4603      	mov	r3, r0
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d022      	beq.n	8012de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012da2:	e853 3f00 	ldrex	r3, [r3]
 8012da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	461a      	mov	r2, r3
 8012db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8012dba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012dc0:	e841 2300 	strex	r3, r2, [r1]
 8012dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1e6      	bne.n	8012d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2220      	movs	r2, #32
 8012dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012ddc:	2303      	movs	r3, #3
 8012dde:	e063      	b.n	8012ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f003 0304 	and.w	r3, r3, #4
 8012dea:	2b04      	cmp	r3, #4
 8012dec:	d149      	bne.n	8012e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012df6:	2200      	movs	r2, #0
 8012df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 f857 	bl	8012eb0 <UART_WaitOnFlagUntilTimeout>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d03c      	beq.n	8012e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e10:	e853 3f00 	ldrex	r3, [r3]
 8012e14:	623b      	str	r3, [r7, #32]
   return(result);
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	461a      	mov	r2, r3
 8012e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e2e:	e841 2300 	strex	r3, r2, [r1]
 8012e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1e6      	bne.n	8012e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	3308      	adds	r3, #8
 8012e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	e853 3f00 	ldrex	r3, [r3]
 8012e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	f023 0301 	bic.w	r3, r3, #1
 8012e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	3308      	adds	r3, #8
 8012e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012e5a:	61fa      	str	r2, [r7, #28]
 8012e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e5e:	69b9      	ldr	r1, [r7, #24]
 8012e60:	69fa      	ldr	r2, [r7, #28]
 8012e62:	e841 2300 	strex	r3, r2, [r1]
 8012e66:	617b      	str	r3, [r7, #20]
   return(result);
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d1e5      	bne.n	8012e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2220      	movs	r2, #32
 8012e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e7e:	2303      	movs	r3, #3
 8012e80:	e012      	b.n	8012ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2220      	movs	r2, #32
 8012e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2220      	movs	r2, #32
 8012e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2200      	movs	r2, #0
 8012e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012ea6:	2300      	movs	r3, #0
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3758      	adds	r7, #88	@ 0x58
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	603b      	str	r3, [r7, #0]
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ec0:	e049      	b.n	8012f56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec8:	d045      	beq.n	8012f56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012eca:	f7fa faa5 	bl	800d418 <HAL_GetTick>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	69ba      	ldr	r2, [r7, #24]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d302      	bcc.n	8012ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d101      	bne.n	8012ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012ee0:	2303      	movs	r3, #3
 8012ee2:	e048      	b.n	8012f76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f003 0304 	and.w	r3, r3, #4
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d031      	beq.n	8012f56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	69db      	ldr	r3, [r3, #28]
 8012ef8:	f003 0308 	and.w	r3, r3, #8
 8012efc:	2b08      	cmp	r3, #8
 8012efe:	d110      	bne.n	8012f22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2208      	movs	r2, #8
 8012f06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 f838 	bl	8012f7e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2208      	movs	r2, #8
 8012f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e029      	b.n	8012f76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	69db      	ldr	r3, [r3, #28]
 8012f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012f30:	d111      	bne.n	8012f56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f000 f81e 	bl	8012f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2220      	movs	r2, #32
 8012f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012f52:	2303      	movs	r3, #3
 8012f54:	e00f      	b.n	8012f76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	69da      	ldr	r2, [r3, #28]
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	4013      	ands	r3, r2
 8012f60:	68ba      	ldr	r2, [r7, #8]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	bf0c      	ite	eq
 8012f66:	2301      	moveq	r3, #1
 8012f68:	2300      	movne	r3, #0
 8012f6a:	b2db      	uxtb	r3, r3
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	79fb      	ldrb	r3, [r7, #7]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d0a6      	beq.n	8012ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f74:	2300      	movs	r3, #0
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3710      	adds	r7, #16
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012f7e:	b480      	push	{r7}
 8012f80:	b095      	sub	sp, #84	@ 0x54
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f8e:	e853 3f00 	ldrex	r3, [r3]
 8012f92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8012fa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012faa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012fac:	e841 2300 	strex	r3, r2, [r1]
 8012fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d1e6      	bne.n	8012f86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	3308      	adds	r3, #8
 8012fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fc0:	6a3b      	ldr	r3, [r7, #32]
 8012fc2:	e853 3f00 	ldrex	r3, [r3]
 8012fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012fce:	f023 0301 	bic.w	r3, r3, #1
 8012fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	3308      	adds	r3, #8
 8012fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012fe4:	e841 2300 	strex	r3, r2, [r1]
 8012fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1e3      	bne.n	8012fb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ff4:	2b01      	cmp	r3, #1
 8012ff6:	d118      	bne.n	801302a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	e853 3f00 	ldrex	r3, [r3]
 8013004:	60bb      	str	r3, [r7, #8]
   return(result);
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	f023 0310 	bic.w	r3, r3, #16
 801300c:	647b      	str	r3, [r7, #68]	@ 0x44
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	461a      	mov	r2, r3
 8013014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013016:	61bb      	str	r3, [r7, #24]
 8013018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801301a:	6979      	ldr	r1, [r7, #20]
 801301c:	69ba      	ldr	r2, [r7, #24]
 801301e:	e841 2300 	strex	r3, r2, [r1]
 8013022:	613b      	str	r3, [r7, #16]
   return(result);
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d1e6      	bne.n	8012ff8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2220      	movs	r2, #32
 801302e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801303e:	bf00      	nop
 8013040:	3754      	adds	r7, #84	@ 0x54
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801304a:	b580      	push	{r7, lr}
 801304c:	b084      	sub	sp, #16
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2200      	movs	r2, #0
 801305c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	2200      	movs	r2, #0
 8013064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013068:	68f8      	ldr	r0, [r7, #12]
 801306a:	f7ff fb97 	bl	801279c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801306e:	bf00      	nop
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}

08013076 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013076:	b580      	push	{r7, lr}
 8013078:	b088      	sub	sp, #32
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	e853 3f00 	ldrex	r3, [r3]
 801308a:	60bb      	str	r3, [r7, #8]
   return(result);
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013092:	61fb      	str	r3, [r7, #28]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	461a      	mov	r2, r3
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	61bb      	str	r3, [r7, #24]
 801309e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130a0:	6979      	ldr	r1, [r7, #20]
 80130a2:	69ba      	ldr	r2, [r7, #24]
 80130a4:	e841 2300 	strex	r3, r2, [r1]
 80130a8:	613b      	str	r3, [r7, #16]
   return(result);
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1e6      	bne.n	801307e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2220      	movs	r2, #32
 80130b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f7ff fb62 	bl	8012788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130c4:	bf00      	nop
 80130c6:	3720      	adds	r7, #32
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80130d4:	bf00      	nop
 80130d6:	370c      	adds	r7, #12
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr

080130e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80130e8:	bf00      	nop
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr

080130f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80130fc:	bf00      	nop
 80130fe:	370c      	adds	r7, #12
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013108:	b480      	push	{r7}
 801310a:	b085      	sub	sp, #20
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013116:	2b01      	cmp	r3, #1
 8013118:	d101      	bne.n	801311e <HAL_UARTEx_DisableFifoMode+0x16>
 801311a:	2302      	movs	r3, #2
 801311c:	e027      	b.n	801316e <HAL_UARTEx_DisableFifoMode+0x66>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2201      	movs	r2, #1
 8013122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2224      	movs	r2, #36	@ 0x24
 801312a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f022 0201 	bic.w	r2, r2, #1
 8013144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801314c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	68fa      	ldr	r2, [r7, #12]
 801315a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2220      	movs	r2, #32
 8013160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3714      	adds	r7, #20
 8013172:	46bd      	mov	sp, r7
 8013174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013178:	4770      	bx	lr

0801317a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801317a:	b580      	push	{r7, lr}
 801317c:	b084      	sub	sp, #16
 801317e:	af00      	add	r7, sp, #0
 8013180:	6078      	str	r0, [r7, #4]
 8013182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801318a:	2b01      	cmp	r3, #1
 801318c:	d101      	bne.n	8013192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801318e:	2302      	movs	r3, #2
 8013190:	e02d      	b.n	80131ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2201      	movs	r2, #1
 8013196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2224      	movs	r2, #36	@ 0x24
 801319e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f022 0201 	bic.w	r2, r2, #1
 80131b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	683a      	ldr	r2, [r7, #0]
 80131ca:	430a      	orrs	r2, r1
 80131cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f000 f850 	bl	8013274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2220      	movs	r2, #32
 80131e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80131ec:	2300      	movs	r3, #0
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b084      	sub	sp, #16
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
 80131fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013206:	2b01      	cmp	r3, #1
 8013208:	d101      	bne.n	801320e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801320a:	2302      	movs	r3, #2
 801320c:	e02d      	b.n	801326a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2201      	movs	r2, #1
 8013212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2224      	movs	r2, #36	@ 0x24
 801321a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	f022 0201 	bic.w	r2, r2, #1
 8013234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	689b      	ldr	r3, [r3, #8]
 801323c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	683a      	ldr	r2, [r7, #0]
 8013246:	430a      	orrs	r2, r1
 8013248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f000 f812 	bl	8013274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68fa      	ldr	r2, [r7, #12]
 8013256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2220      	movs	r2, #32
 801325c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2200      	movs	r2, #0
 8013264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013268:	2300      	movs	r3, #0
}
 801326a:	4618      	mov	r0, r3
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
	...

08013274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013274:	b480      	push	{r7}
 8013276:	b085      	sub	sp, #20
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013280:	2b00      	cmp	r3, #0
 8013282:	d108      	bne.n	8013296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2201      	movs	r2, #1
 8013288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2201      	movs	r2, #1
 8013290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013294:	e031      	b.n	80132fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013296:	2308      	movs	r3, #8
 8013298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801329a:	2308      	movs	r3, #8
 801329c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	689b      	ldr	r3, [r3, #8]
 80132a4:	0e5b      	lsrs	r3, r3, #25
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	f003 0307 	and.w	r3, r3, #7
 80132ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	0f5b      	lsrs	r3, r3, #29
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	f003 0307 	and.w	r3, r3, #7
 80132bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80132be:	7bbb      	ldrb	r3, [r7, #14]
 80132c0:	7b3a      	ldrb	r2, [r7, #12]
 80132c2:	4911      	ldr	r1, [pc, #68]	@ (8013308 <UARTEx_SetNbDataToProcess+0x94>)
 80132c4:	5c8a      	ldrb	r2, [r1, r2]
 80132c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80132ca:	7b3a      	ldrb	r2, [r7, #12]
 80132cc:	490f      	ldr	r1, [pc, #60]	@ (801330c <UARTEx_SetNbDataToProcess+0x98>)
 80132ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80132d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80132dc:	7bfb      	ldrb	r3, [r7, #15]
 80132de:	7b7a      	ldrb	r2, [r7, #13]
 80132e0:	4909      	ldr	r1, [pc, #36]	@ (8013308 <UARTEx_SetNbDataToProcess+0x94>)
 80132e2:	5c8a      	ldrb	r2, [r1, r2]
 80132e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80132e8:	7b7a      	ldrb	r2, [r7, #13]
 80132ea:	4908      	ldr	r1, [pc, #32]	@ (801330c <UARTEx_SetNbDataToProcess+0x98>)
 80132ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80132ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80132f2:	b29a      	uxth	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80132fa:	bf00      	nop
 80132fc:	3714      	adds	r7, #20
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	08019014 	.word	0x08019014
 801330c:	0801901c 	.word	0x0801901c

08013310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013310:	b480      	push	{r7}
 8013312:	b085      	sub	sp, #20
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013318:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801331c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8013324:	b29a      	uxth	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	b29b      	uxth	r3, r3
 801332a:	43db      	mvns	r3, r3
 801332c:	b29b      	uxth	r3, r3
 801332e:	4013      	ands	r3, r2
 8013330:	b29a      	uxth	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013338:	2300      	movs	r3, #0
}
 801333a:	4618      	mov	r0, r3
 801333c:	3714      	adds	r7, #20
 801333e:	46bd      	mov	sp, r7
 8013340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013344:	4770      	bx	lr

08013346 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8013346:	b084      	sub	sp, #16
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	f107 0014 	add.w	r0, r7, #20
 8013354:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2201      	movs	r2, #1
 801335c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2200      	movs	r2, #0
 8013364:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8013378:	2300      	movs	r3, #0
}
 801337a:	4618      	mov	r0, r3
 801337c:	370c      	adds	r7, #12
 801337e:	46bd      	mov	sp, r7
 8013380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013384:	b004      	add	sp, #16
 8013386:	4770      	bx	lr

08013388 <rand>:
 8013388:	4b16      	ldr	r3, [pc, #88]	@ (80133e4 <rand+0x5c>)
 801338a:	b510      	push	{r4, lr}
 801338c:	681c      	ldr	r4, [r3, #0]
 801338e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013390:	b9b3      	cbnz	r3, 80133c0 <rand+0x38>
 8013392:	2018      	movs	r0, #24
 8013394:	f002 fbbe 	bl	8015b14 <malloc>
 8013398:	4602      	mov	r2, r0
 801339a:	6320      	str	r0, [r4, #48]	@ 0x30
 801339c:	b920      	cbnz	r0, 80133a8 <rand+0x20>
 801339e:	4b12      	ldr	r3, [pc, #72]	@ (80133e8 <rand+0x60>)
 80133a0:	4812      	ldr	r0, [pc, #72]	@ (80133ec <rand+0x64>)
 80133a2:	2152      	movs	r1, #82	@ 0x52
 80133a4:	f001 fcb4 	bl	8014d10 <__assert_func>
 80133a8:	4911      	ldr	r1, [pc, #68]	@ (80133f0 <rand+0x68>)
 80133aa:	4b12      	ldr	r3, [pc, #72]	@ (80133f4 <rand+0x6c>)
 80133ac:	e9c0 1300 	strd	r1, r3, [r0]
 80133b0:	4b11      	ldr	r3, [pc, #68]	@ (80133f8 <rand+0x70>)
 80133b2:	6083      	str	r3, [r0, #8]
 80133b4:	230b      	movs	r3, #11
 80133b6:	8183      	strh	r3, [r0, #12]
 80133b8:	2100      	movs	r1, #0
 80133ba:	2001      	movs	r0, #1
 80133bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80133c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80133c2:	480e      	ldr	r0, [pc, #56]	@ (80133fc <rand+0x74>)
 80133c4:	690b      	ldr	r3, [r1, #16]
 80133c6:	694c      	ldr	r4, [r1, #20]
 80133c8:	4a0d      	ldr	r2, [pc, #52]	@ (8013400 <rand+0x78>)
 80133ca:	4358      	muls	r0, r3
 80133cc:	fb02 0004 	mla	r0, r2, r4, r0
 80133d0:	fba3 3202 	umull	r3, r2, r3, r2
 80133d4:	3301      	adds	r3, #1
 80133d6:	eb40 0002 	adc.w	r0, r0, r2
 80133da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80133de:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80133e2:	bd10      	pop	{r4, pc}
 80133e4:	20000034 	.word	0x20000034
 80133e8:	08019024 	.word	0x08019024
 80133ec:	0801903b 	.word	0x0801903b
 80133f0:	abcd330e 	.word	0xabcd330e
 80133f4:	e66d1234 	.word	0xe66d1234
 80133f8:	0005deec 	.word	0x0005deec
 80133fc:	5851f42d 	.word	0x5851f42d
 8013400:	4c957f2d 	.word	0x4c957f2d

08013404 <__cvt>:
 8013404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013408:	ec57 6b10 	vmov	r6, r7, d0
 801340c:	2f00      	cmp	r7, #0
 801340e:	460c      	mov	r4, r1
 8013410:	4619      	mov	r1, r3
 8013412:	463b      	mov	r3, r7
 8013414:	bfbb      	ittet	lt
 8013416:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801341a:	461f      	movlt	r7, r3
 801341c:	2300      	movge	r3, #0
 801341e:	232d      	movlt	r3, #45	@ 0x2d
 8013420:	700b      	strb	r3, [r1, #0]
 8013422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013424:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013428:	4691      	mov	r9, r2
 801342a:	f023 0820 	bic.w	r8, r3, #32
 801342e:	bfbc      	itt	lt
 8013430:	4632      	movlt	r2, r6
 8013432:	4616      	movlt	r6, r2
 8013434:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013438:	d005      	beq.n	8013446 <__cvt+0x42>
 801343a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801343e:	d100      	bne.n	8013442 <__cvt+0x3e>
 8013440:	3401      	adds	r4, #1
 8013442:	2102      	movs	r1, #2
 8013444:	e000      	b.n	8013448 <__cvt+0x44>
 8013446:	2103      	movs	r1, #3
 8013448:	ab03      	add	r3, sp, #12
 801344a:	9301      	str	r3, [sp, #4]
 801344c:	ab02      	add	r3, sp, #8
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	ec47 6b10 	vmov	d0, r6, r7
 8013454:	4653      	mov	r3, sl
 8013456:	4622      	mov	r2, r4
 8013458:	f001 fd0a 	bl	8014e70 <_dtoa_r>
 801345c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013460:	4605      	mov	r5, r0
 8013462:	d119      	bne.n	8013498 <__cvt+0x94>
 8013464:	f019 0f01 	tst.w	r9, #1
 8013468:	d00e      	beq.n	8013488 <__cvt+0x84>
 801346a:	eb00 0904 	add.w	r9, r0, r4
 801346e:	2200      	movs	r2, #0
 8013470:	2300      	movs	r3, #0
 8013472:	4630      	mov	r0, r6
 8013474:	4639      	mov	r1, r7
 8013476:	f7ed fb0f 	bl	8000a98 <__aeabi_dcmpeq>
 801347a:	b108      	cbz	r0, 8013480 <__cvt+0x7c>
 801347c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013480:	2230      	movs	r2, #48	@ 0x30
 8013482:	9b03      	ldr	r3, [sp, #12]
 8013484:	454b      	cmp	r3, r9
 8013486:	d31e      	bcc.n	80134c6 <__cvt+0xc2>
 8013488:	9b03      	ldr	r3, [sp, #12]
 801348a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801348c:	1b5b      	subs	r3, r3, r5
 801348e:	4628      	mov	r0, r5
 8013490:	6013      	str	r3, [r2, #0]
 8013492:	b004      	add	sp, #16
 8013494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801349c:	eb00 0904 	add.w	r9, r0, r4
 80134a0:	d1e5      	bne.n	801346e <__cvt+0x6a>
 80134a2:	7803      	ldrb	r3, [r0, #0]
 80134a4:	2b30      	cmp	r3, #48	@ 0x30
 80134a6:	d10a      	bne.n	80134be <__cvt+0xba>
 80134a8:	2200      	movs	r2, #0
 80134aa:	2300      	movs	r3, #0
 80134ac:	4630      	mov	r0, r6
 80134ae:	4639      	mov	r1, r7
 80134b0:	f7ed faf2 	bl	8000a98 <__aeabi_dcmpeq>
 80134b4:	b918      	cbnz	r0, 80134be <__cvt+0xba>
 80134b6:	f1c4 0401 	rsb	r4, r4, #1
 80134ba:	f8ca 4000 	str.w	r4, [sl]
 80134be:	f8da 3000 	ldr.w	r3, [sl]
 80134c2:	4499      	add	r9, r3
 80134c4:	e7d3      	b.n	801346e <__cvt+0x6a>
 80134c6:	1c59      	adds	r1, r3, #1
 80134c8:	9103      	str	r1, [sp, #12]
 80134ca:	701a      	strb	r2, [r3, #0]
 80134cc:	e7d9      	b.n	8013482 <__cvt+0x7e>

080134ce <__exponent>:
 80134ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134d0:	2900      	cmp	r1, #0
 80134d2:	bfba      	itte	lt
 80134d4:	4249      	neglt	r1, r1
 80134d6:	232d      	movlt	r3, #45	@ 0x2d
 80134d8:	232b      	movge	r3, #43	@ 0x2b
 80134da:	2909      	cmp	r1, #9
 80134dc:	7002      	strb	r2, [r0, #0]
 80134de:	7043      	strb	r3, [r0, #1]
 80134e0:	dd29      	ble.n	8013536 <__exponent+0x68>
 80134e2:	f10d 0307 	add.w	r3, sp, #7
 80134e6:	461d      	mov	r5, r3
 80134e8:	270a      	movs	r7, #10
 80134ea:	461a      	mov	r2, r3
 80134ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80134f0:	fb07 1416 	mls	r4, r7, r6, r1
 80134f4:	3430      	adds	r4, #48	@ 0x30
 80134f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80134fa:	460c      	mov	r4, r1
 80134fc:	2c63      	cmp	r4, #99	@ 0x63
 80134fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8013502:	4631      	mov	r1, r6
 8013504:	dcf1      	bgt.n	80134ea <__exponent+0x1c>
 8013506:	3130      	adds	r1, #48	@ 0x30
 8013508:	1e94      	subs	r4, r2, #2
 801350a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801350e:	1c41      	adds	r1, r0, #1
 8013510:	4623      	mov	r3, r4
 8013512:	42ab      	cmp	r3, r5
 8013514:	d30a      	bcc.n	801352c <__exponent+0x5e>
 8013516:	f10d 0309 	add.w	r3, sp, #9
 801351a:	1a9b      	subs	r3, r3, r2
 801351c:	42ac      	cmp	r4, r5
 801351e:	bf88      	it	hi
 8013520:	2300      	movhi	r3, #0
 8013522:	3302      	adds	r3, #2
 8013524:	4403      	add	r3, r0
 8013526:	1a18      	subs	r0, r3, r0
 8013528:	b003      	add	sp, #12
 801352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801352c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013530:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013534:	e7ed      	b.n	8013512 <__exponent+0x44>
 8013536:	2330      	movs	r3, #48	@ 0x30
 8013538:	3130      	adds	r1, #48	@ 0x30
 801353a:	7083      	strb	r3, [r0, #2]
 801353c:	70c1      	strb	r1, [r0, #3]
 801353e:	1d03      	adds	r3, r0, #4
 8013540:	e7f1      	b.n	8013526 <__exponent+0x58>
	...

08013544 <_printf_float>:
 8013544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013548:	b08d      	sub	sp, #52	@ 0x34
 801354a:	460c      	mov	r4, r1
 801354c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013550:	4616      	mov	r6, r2
 8013552:	461f      	mov	r7, r3
 8013554:	4605      	mov	r5, r0
 8013556:	f001 fb4b 	bl	8014bf0 <_localeconv_r>
 801355a:	6803      	ldr	r3, [r0, #0]
 801355c:	9304      	str	r3, [sp, #16]
 801355e:	4618      	mov	r0, r3
 8013560:	f7ec fe6e 	bl	8000240 <strlen>
 8013564:	2300      	movs	r3, #0
 8013566:	930a      	str	r3, [sp, #40]	@ 0x28
 8013568:	f8d8 3000 	ldr.w	r3, [r8]
 801356c:	9005      	str	r0, [sp, #20]
 801356e:	3307      	adds	r3, #7
 8013570:	f023 0307 	bic.w	r3, r3, #7
 8013574:	f103 0208 	add.w	r2, r3, #8
 8013578:	f894 a018 	ldrb.w	sl, [r4, #24]
 801357c:	f8d4 b000 	ldr.w	fp, [r4]
 8013580:	f8c8 2000 	str.w	r2, [r8]
 8013584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013588:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801358c:	9307      	str	r3, [sp, #28]
 801358e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013592:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801359a:	4b9c      	ldr	r3, [pc, #624]	@ (801380c <_printf_float+0x2c8>)
 801359c:	f04f 32ff 	mov.w	r2, #4294967295
 80135a0:	f7ed faac 	bl	8000afc <__aeabi_dcmpun>
 80135a4:	bb70      	cbnz	r0, 8013604 <_printf_float+0xc0>
 80135a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135aa:	4b98      	ldr	r3, [pc, #608]	@ (801380c <_printf_float+0x2c8>)
 80135ac:	f04f 32ff 	mov.w	r2, #4294967295
 80135b0:	f7ed fa86 	bl	8000ac0 <__aeabi_dcmple>
 80135b4:	bb30      	cbnz	r0, 8013604 <_printf_float+0xc0>
 80135b6:	2200      	movs	r2, #0
 80135b8:	2300      	movs	r3, #0
 80135ba:	4640      	mov	r0, r8
 80135bc:	4649      	mov	r1, r9
 80135be:	f7ed fa75 	bl	8000aac <__aeabi_dcmplt>
 80135c2:	b110      	cbz	r0, 80135ca <_printf_float+0x86>
 80135c4:	232d      	movs	r3, #45	@ 0x2d
 80135c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135ca:	4a91      	ldr	r2, [pc, #580]	@ (8013810 <_printf_float+0x2cc>)
 80135cc:	4b91      	ldr	r3, [pc, #580]	@ (8013814 <_printf_float+0x2d0>)
 80135ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80135d2:	bf94      	ite	ls
 80135d4:	4690      	movls	r8, r2
 80135d6:	4698      	movhi	r8, r3
 80135d8:	2303      	movs	r3, #3
 80135da:	6123      	str	r3, [r4, #16]
 80135dc:	f02b 0304 	bic.w	r3, fp, #4
 80135e0:	6023      	str	r3, [r4, #0]
 80135e2:	f04f 0900 	mov.w	r9, #0
 80135e6:	9700      	str	r7, [sp, #0]
 80135e8:	4633      	mov	r3, r6
 80135ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80135ec:	4621      	mov	r1, r4
 80135ee:	4628      	mov	r0, r5
 80135f0:	f000 f9d2 	bl	8013998 <_printf_common>
 80135f4:	3001      	adds	r0, #1
 80135f6:	f040 808d 	bne.w	8013714 <_printf_float+0x1d0>
 80135fa:	f04f 30ff 	mov.w	r0, #4294967295
 80135fe:	b00d      	add	sp, #52	@ 0x34
 8013600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013604:	4642      	mov	r2, r8
 8013606:	464b      	mov	r3, r9
 8013608:	4640      	mov	r0, r8
 801360a:	4649      	mov	r1, r9
 801360c:	f7ed fa76 	bl	8000afc <__aeabi_dcmpun>
 8013610:	b140      	cbz	r0, 8013624 <_printf_float+0xe0>
 8013612:	464b      	mov	r3, r9
 8013614:	2b00      	cmp	r3, #0
 8013616:	bfbc      	itt	lt
 8013618:	232d      	movlt	r3, #45	@ 0x2d
 801361a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801361e:	4a7e      	ldr	r2, [pc, #504]	@ (8013818 <_printf_float+0x2d4>)
 8013620:	4b7e      	ldr	r3, [pc, #504]	@ (801381c <_printf_float+0x2d8>)
 8013622:	e7d4      	b.n	80135ce <_printf_float+0x8a>
 8013624:	6863      	ldr	r3, [r4, #4]
 8013626:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801362a:	9206      	str	r2, [sp, #24]
 801362c:	1c5a      	adds	r2, r3, #1
 801362e:	d13b      	bne.n	80136a8 <_printf_float+0x164>
 8013630:	2306      	movs	r3, #6
 8013632:	6063      	str	r3, [r4, #4]
 8013634:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013638:	2300      	movs	r3, #0
 801363a:	6022      	str	r2, [r4, #0]
 801363c:	9303      	str	r3, [sp, #12]
 801363e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013640:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013644:	ab09      	add	r3, sp, #36	@ 0x24
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	6861      	ldr	r1, [r4, #4]
 801364a:	ec49 8b10 	vmov	d0, r8, r9
 801364e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013652:	4628      	mov	r0, r5
 8013654:	f7ff fed6 	bl	8013404 <__cvt>
 8013658:	9b06      	ldr	r3, [sp, #24]
 801365a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801365c:	2b47      	cmp	r3, #71	@ 0x47
 801365e:	4680      	mov	r8, r0
 8013660:	d129      	bne.n	80136b6 <_printf_float+0x172>
 8013662:	1cc8      	adds	r0, r1, #3
 8013664:	db02      	blt.n	801366c <_printf_float+0x128>
 8013666:	6863      	ldr	r3, [r4, #4]
 8013668:	4299      	cmp	r1, r3
 801366a:	dd41      	ble.n	80136f0 <_printf_float+0x1ac>
 801366c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013670:	fa5f fa8a 	uxtb.w	sl, sl
 8013674:	3901      	subs	r1, #1
 8013676:	4652      	mov	r2, sl
 8013678:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801367c:	9109      	str	r1, [sp, #36]	@ 0x24
 801367e:	f7ff ff26 	bl	80134ce <__exponent>
 8013682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013684:	1813      	adds	r3, r2, r0
 8013686:	2a01      	cmp	r2, #1
 8013688:	4681      	mov	r9, r0
 801368a:	6123      	str	r3, [r4, #16]
 801368c:	dc02      	bgt.n	8013694 <_printf_float+0x150>
 801368e:	6822      	ldr	r2, [r4, #0]
 8013690:	07d2      	lsls	r2, r2, #31
 8013692:	d501      	bpl.n	8013698 <_printf_float+0x154>
 8013694:	3301      	adds	r3, #1
 8013696:	6123      	str	r3, [r4, #16]
 8013698:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801369c:	2b00      	cmp	r3, #0
 801369e:	d0a2      	beq.n	80135e6 <_printf_float+0xa2>
 80136a0:	232d      	movs	r3, #45	@ 0x2d
 80136a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136a6:	e79e      	b.n	80135e6 <_printf_float+0xa2>
 80136a8:	9a06      	ldr	r2, [sp, #24]
 80136aa:	2a47      	cmp	r2, #71	@ 0x47
 80136ac:	d1c2      	bne.n	8013634 <_printf_float+0xf0>
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d1c0      	bne.n	8013634 <_printf_float+0xf0>
 80136b2:	2301      	movs	r3, #1
 80136b4:	e7bd      	b.n	8013632 <_printf_float+0xee>
 80136b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80136ba:	d9db      	bls.n	8013674 <_printf_float+0x130>
 80136bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80136c0:	d118      	bne.n	80136f4 <_printf_float+0x1b0>
 80136c2:	2900      	cmp	r1, #0
 80136c4:	6863      	ldr	r3, [r4, #4]
 80136c6:	dd0b      	ble.n	80136e0 <_printf_float+0x19c>
 80136c8:	6121      	str	r1, [r4, #16]
 80136ca:	b913      	cbnz	r3, 80136d2 <_printf_float+0x18e>
 80136cc:	6822      	ldr	r2, [r4, #0]
 80136ce:	07d0      	lsls	r0, r2, #31
 80136d0:	d502      	bpl.n	80136d8 <_printf_float+0x194>
 80136d2:	3301      	adds	r3, #1
 80136d4:	440b      	add	r3, r1
 80136d6:	6123      	str	r3, [r4, #16]
 80136d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80136da:	f04f 0900 	mov.w	r9, #0
 80136de:	e7db      	b.n	8013698 <_printf_float+0x154>
 80136e0:	b913      	cbnz	r3, 80136e8 <_printf_float+0x1a4>
 80136e2:	6822      	ldr	r2, [r4, #0]
 80136e4:	07d2      	lsls	r2, r2, #31
 80136e6:	d501      	bpl.n	80136ec <_printf_float+0x1a8>
 80136e8:	3302      	adds	r3, #2
 80136ea:	e7f4      	b.n	80136d6 <_printf_float+0x192>
 80136ec:	2301      	movs	r3, #1
 80136ee:	e7f2      	b.n	80136d6 <_printf_float+0x192>
 80136f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80136f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136f6:	4299      	cmp	r1, r3
 80136f8:	db05      	blt.n	8013706 <_printf_float+0x1c2>
 80136fa:	6823      	ldr	r3, [r4, #0]
 80136fc:	6121      	str	r1, [r4, #16]
 80136fe:	07d8      	lsls	r0, r3, #31
 8013700:	d5ea      	bpl.n	80136d8 <_printf_float+0x194>
 8013702:	1c4b      	adds	r3, r1, #1
 8013704:	e7e7      	b.n	80136d6 <_printf_float+0x192>
 8013706:	2900      	cmp	r1, #0
 8013708:	bfd4      	ite	le
 801370a:	f1c1 0202 	rsble	r2, r1, #2
 801370e:	2201      	movgt	r2, #1
 8013710:	4413      	add	r3, r2
 8013712:	e7e0      	b.n	80136d6 <_printf_float+0x192>
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	055a      	lsls	r2, r3, #21
 8013718:	d407      	bmi.n	801372a <_printf_float+0x1e6>
 801371a:	6923      	ldr	r3, [r4, #16]
 801371c:	4642      	mov	r2, r8
 801371e:	4631      	mov	r1, r6
 8013720:	4628      	mov	r0, r5
 8013722:	47b8      	blx	r7
 8013724:	3001      	adds	r0, #1
 8013726:	d12b      	bne.n	8013780 <_printf_float+0x23c>
 8013728:	e767      	b.n	80135fa <_printf_float+0xb6>
 801372a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801372e:	f240 80dd 	bls.w	80138ec <_printf_float+0x3a8>
 8013732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013736:	2200      	movs	r2, #0
 8013738:	2300      	movs	r3, #0
 801373a:	f7ed f9ad 	bl	8000a98 <__aeabi_dcmpeq>
 801373e:	2800      	cmp	r0, #0
 8013740:	d033      	beq.n	80137aa <_printf_float+0x266>
 8013742:	4a37      	ldr	r2, [pc, #220]	@ (8013820 <_printf_float+0x2dc>)
 8013744:	2301      	movs	r3, #1
 8013746:	4631      	mov	r1, r6
 8013748:	4628      	mov	r0, r5
 801374a:	47b8      	blx	r7
 801374c:	3001      	adds	r0, #1
 801374e:	f43f af54 	beq.w	80135fa <_printf_float+0xb6>
 8013752:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013756:	4543      	cmp	r3, r8
 8013758:	db02      	blt.n	8013760 <_printf_float+0x21c>
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	07d8      	lsls	r0, r3, #31
 801375e:	d50f      	bpl.n	8013780 <_printf_float+0x23c>
 8013760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013764:	4631      	mov	r1, r6
 8013766:	4628      	mov	r0, r5
 8013768:	47b8      	blx	r7
 801376a:	3001      	adds	r0, #1
 801376c:	f43f af45 	beq.w	80135fa <_printf_float+0xb6>
 8013770:	f04f 0900 	mov.w	r9, #0
 8013774:	f108 38ff 	add.w	r8, r8, #4294967295
 8013778:	f104 0a1a 	add.w	sl, r4, #26
 801377c:	45c8      	cmp	r8, r9
 801377e:	dc09      	bgt.n	8013794 <_printf_float+0x250>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	079b      	lsls	r3, r3, #30
 8013784:	f100 8103 	bmi.w	801398e <_printf_float+0x44a>
 8013788:	68e0      	ldr	r0, [r4, #12]
 801378a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801378c:	4298      	cmp	r0, r3
 801378e:	bfb8      	it	lt
 8013790:	4618      	movlt	r0, r3
 8013792:	e734      	b.n	80135fe <_printf_float+0xba>
 8013794:	2301      	movs	r3, #1
 8013796:	4652      	mov	r2, sl
 8013798:	4631      	mov	r1, r6
 801379a:	4628      	mov	r0, r5
 801379c:	47b8      	blx	r7
 801379e:	3001      	adds	r0, #1
 80137a0:	f43f af2b 	beq.w	80135fa <_printf_float+0xb6>
 80137a4:	f109 0901 	add.w	r9, r9, #1
 80137a8:	e7e8      	b.n	801377c <_printf_float+0x238>
 80137aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	dc39      	bgt.n	8013824 <_printf_float+0x2e0>
 80137b0:	4a1b      	ldr	r2, [pc, #108]	@ (8013820 <_printf_float+0x2dc>)
 80137b2:	2301      	movs	r3, #1
 80137b4:	4631      	mov	r1, r6
 80137b6:	4628      	mov	r0, r5
 80137b8:	47b8      	blx	r7
 80137ba:	3001      	adds	r0, #1
 80137bc:	f43f af1d 	beq.w	80135fa <_printf_float+0xb6>
 80137c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80137c4:	ea59 0303 	orrs.w	r3, r9, r3
 80137c8:	d102      	bne.n	80137d0 <_printf_float+0x28c>
 80137ca:	6823      	ldr	r3, [r4, #0]
 80137cc:	07d9      	lsls	r1, r3, #31
 80137ce:	d5d7      	bpl.n	8013780 <_printf_float+0x23c>
 80137d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137d4:	4631      	mov	r1, r6
 80137d6:	4628      	mov	r0, r5
 80137d8:	47b8      	blx	r7
 80137da:	3001      	adds	r0, #1
 80137dc:	f43f af0d 	beq.w	80135fa <_printf_float+0xb6>
 80137e0:	f04f 0a00 	mov.w	sl, #0
 80137e4:	f104 0b1a 	add.w	fp, r4, #26
 80137e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ea:	425b      	negs	r3, r3
 80137ec:	4553      	cmp	r3, sl
 80137ee:	dc01      	bgt.n	80137f4 <_printf_float+0x2b0>
 80137f0:	464b      	mov	r3, r9
 80137f2:	e793      	b.n	801371c <_printf_float+0x1d8>
 80137f4:	2301      	movs	r3, #1
 80137f6:	465a      	mov	r2, fp
 80137f8:	4631      	mov	r1, r6
 80137fa:	4628      	mov	r0, r5
 80137fc:	47b8      	blx	r7
 80137fe:	3001      	adds	r0, #1
 8013800:	f43f aefb 	beq.w	80135fa <_printf_float+0xb6>
 8013804:	f10a 0a01 	add.w	sl, sl, #1
 8013808:	e7ee      	b.n	80137e8 <_printf_float+0x2a4>
 801380a:	bf00      	nop
 801380c:	7fefffff 	.word	0x7fefffff
 8013810:	08019093 	.word	0x08019093
 8013814:	08019097 	.word	0x08019097
 8013818:	0801909b 	.word	0x0801909b
 801381c:	0801909f 	.word	0x0801909f
 8013820:	0801956a 	.word	0x0801956a
 8013824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013826:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801382a:	4553      	cmp	r3, sl
 801382c:	bfa8      	it	ge
 801382e:	4653      	movge	r3, sl
 8013830:	2b00      	cmp	r3, #0
 8013832:	4699      	mov	r9, r3
 8013834:	dc36      	bgt.n	80138a4 <_printf_float+0x360>
 8013836:	f04f 0b00 	mov.w	fp, #0
 801383a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801383e:	f104 021a 	add.w	r2, r4, #26
 8013842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013844:	9306      	str	r3, [sp, #24]
 8013846:	eba3 0309 	sub.w	r3, r3, r9
 801384a:	455b      	cmp	r3, fp
 801384c:	dc31      	bgt.n	80138b2 <_printf_float+0x36e>
 801384e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013850:	459a      	cmp	sl, r3
 8013852:	dc3a      	bgt.n	80138ca <_printf_float+0x386>
 8013854:	6823      	ldr	r3, [r4, #0]
 8013856:	07da      	lsls	r2, r3, #31
 8013858:	d437      	bmi.n	80138ca <_printf_float+0x386>
 801385a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801385c:	ebaa 0903 	sub.w	r9, sl, r3
 8013860:	9b06      	ldr	r3, [sp, #24]
 8013862:	ebaa 0303 	sub.w	r3, sl, r3
 8013866:	4599      	cmp	r9, r3
 8013868:	bfa8      	it	ge
 801386a:	4699      	movge	r9, r3
 801386c:	f1b9 0f00 	cmp.w	r9, #0
 8013870:	dc33      	bgt.n	80138da <_printf_float+0x396>
 8013872:	f04f 0800 	mov.w	r8, #0
 8013876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801387a:	f104 0b1a 	add.w	fp, r4, #26
 801387e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013880:	ebaa 0303 	sub.w	r3, sl, r3
 8013884:	eba3 0309 	sub.w	r3, r3, r9
 8013888:	4543      	cmp	r3, r8
 801388a:	f77f af79 	ble.w	8013780 <_printf_float+0x23c>
 801388e:	2301      	movs	r3, #1
 8013890:	465a      	mov	r2, fp
 8013892:	4631      	mov	r1, r6
 8013894:	4628      	mov	r0, r5
 8013896:	47b8      	blx	r7
 8013898:	3001      	adds	r0, #1
 801389a:	f43f aeae 	beq.w	80135fa <_printf_float+0xb6>
 801389e:	f108 0801 	add.w	r8, r8, #1
 80138a2:	e7ec      	b.n	801387e <_printf_float+0x33a>
 80138a4:	4642      	mov	r2, r8
 80138a6:	4631      	mov	r1, r6
 80138a8:	4628      	mov	r0, r5
 80138aa:	47b8      	blx	r7
 80138ac:	3001      	adds	r0, #1
 80138ae:	d1c2      	bne.n	8013836 <_printf_float+0x2f2>
 80138b0:	e6a3      	b.n	80135fa <_printf_float+0xb6>
 80138b2:	2301      	movs	r3, #1
 80138b4:	4631      	mov	r1, r6
 80138b6:	4628      	mov	r0, r5
 80138b8:	9206      	str	r2, [sp, #24]
 80138ba:	47b8      	blx	r7
 80138bc:	3001      	adds	r0, #1
 80138be:	f43f ae9c 	beq.w	80135fa <_printf_float+0xb6>
 80138c2:	9a06      	ldr	r2, [sp, #24]
 80138c4:	f10b 0b01 	add.w	fp, fp, #1
 80138c8:	e7bb      	b.n	8013842 <_printf_float+0x2fe>
 80138ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138ce:	4631      	mov	r1, r6
 80138d0:	4628      	mov	r0, r5
 80138d2:	47b8      	blx	r7
 80138d4:	3001      	adds	r0, #1
 80138d6:	d1c0      	bne.n	801385a <_printf_float+0x316>
 80138d8:	e68f      	b.n	80135fa <_printf_float+0xb6>
 80138da:	9a06      	ldr	r2, [sp, #24]
 80138dc:	464b      	mov	r3, r9
 80138de:	4442      	add	r2, r8
 80138e0:	4631      	mov	r1, r6
 80138e2:	4628      	mov	r0, r5
 80138e4:	47b8      	blx	r7
 80138e6:	3001      	adds	r0, #1
 80138e8:	d1c3      	bne.n	8013872 <_printf_float+0x32e>
 80138ea:	e686      	b.n	80135fa <_printf_float+0xb6>
 80138ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80138f0:	f1ba 0f01 	cmp.w	sl, #1
 80138f4:	dc01      	bgt.n	80138fa <_printf_float+0x3b6>
 80138f6:	07db      	lsls	r3, r3, #31
 80138f8:	d536      	bpl.n	8013968 <_printf_float+0x424>
 80138fa:	2301      	movs	r3, #1
 80138fc:	4642      	mov	r2, r8
 80138fe:	4631      	mov	r1, r6
 8013900:	4628      	mov	r0, r5
 8013902:	47b8      	blx	r7
 8013904:	3001      	adds	r0, #1
 8013906:	f43f ae78 	beq.w	80135fa <_printf_float+0xb6>
 801390a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801390e:	4631      	mov	r1, r6
 8013910:	4628      	mov	r0, r5
 8013912:	47b8      	blx	r7
 8013914:	3001      	adds	r0, #1
 8013916:	f43f ae70 	beq.w	80135fa <_printf_float+0xb6>
 801391a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801391e:	2200      	movs	r2, #0
 8013920:	2300      	movs	r3, #0
 8013922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013926:	f7ed f8b7 	bl	8000a98 <__aeabi_dcmpeq>
 801392a:	b9c0      	cbnz	r0, 801395e <_printf_float+0x41a>
 801392c:	4653      	mov	r3, sl
 801392e:	f108 0201 	add.w	r2, r8, #1
 8013932:	4631      	mov	r1, r6
 8013934:	4628      	mov	r0, r5
 8013936:	47b8      	blx	r7
 8013938:	3001      	adds	r0, #1
 801393a:	d10c      	bne.n	8013956 <_printf_float+0x412>
 801393c:	e65d      	b.n	80135fa <_printf_float+0xb6>
 801393e:	2301      	movs	r3, #1
 8013940:	465a      	mov	r2, fp
 8013942:	4631      	mov	r1, r6
 8013944:	4628      	mov	r0, r5
 8013946:	47b8      	blx	r7
 8013948:	3001      	adds	r0, #1
 801394a:	f43f ae56 	beq.w	80135fa <_printf_float+0xb6>
 801394e:	f108 0801 	add.w	r8, r8, #1
 8013952:	45d0      	cmp	r8, sl
 8013954:	dbf3      	blt.n	801393e <_printf_float+0x3fa>
 8013956:	464b      	mov	r3, r9
 8013958:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801395c:	e6df      	b.n	801371e <_printf_float+0x1da>
 801395e:	f04f 0800 	mov.w	r8, #0
 8013962:	f104 0b1a 	add.w	fp, r4, #26
 8013966:	e7f4      	b.n	8013952 <_printf_float+0x40e>
 8013968:	2301      	movs	r3, #1
 801396a:	4642      	mov	r2, r8
 801396c:	e7e1      	b.n	8013932 <_printf_float+0x3ee>
 801396e:	2301      	movs	r3, #1
 8013970:	464a      	mov	r2, r9
 8013972:	4631      	mov	r1, r6
 8013974:	4628      	mov	r0, r5
 8013976:	47b8      	blx	r7
 8013978:	3001      	adds	r0, #1
 801397a:	f43f ae3e 	beq.w	80135fa <_printf_float+0xb6>
 801397e:	f108 0801 	add.w	r8, r8, #1
 8013982:	68e3      	ldr	r3, [r4, #12]
 8013984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013986:	1a5b      	subs	r3, r3, r1
 8013988:	4543      	cmp	r3, r8
 801398a:	dcf0      	bgt.n	801396e <_printf_float+0x42a>
 801398c:	e6fc      	b.n	8013788 <_printf_float+0x244>
 801398e:	f04f 0800 	mov.w	r8, #0
 8013992:	f104 0919 	add.w	r9, r4, #25
 8013996:	e7f4      	b.n	8013982 <_printf_float+0x43e>

08013998 <_printf_common>:
 8013998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801399c:	4616      	mov	r6, r2
 801399e:	4698      	mov	r8, r3
 80139a0:	688a      	ldr	r2, [r1, #8]
 80139a2:	690b      	ldr	r3, [r1, #16]
 80139a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80139a8:	4293      	cmp	r3, r2
 80139aa:	bfb8      	it	lt
 80139ac:	4613      	movlt	r3, r2
 80139ae:	6033      	str	r3, [r6, #0]
 80139b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80139b4:	4607      	mov	r7, r0
 80139b6:	460c      	mov	r4, r1
 80139b8:	b10a      	cbz	r2, 80139be <_printf_common+0x26>
 80139ba:	3301      	adds	r3, #1
 80139bc:	6033      	str	r3, [r6, #0]
 80139be:	6823      	ldr	r3, [r4, #0]
 80139c0:	0699      	lsls	r1, r3, #26
 80139c2:	bf42      	ittt	mi
 80139c4:	6833      	ldrmi	r3, [r6, #0]
 80139c6:	3302      	addmi	r3, #2
 80139c8:	6033      	strmi	r3, [r6, #0]
 80139ca:	6825      	ldr	r5, [r4, #0]
 80139cc:	f015 0506 	ands.w	r5, r5, #6
 80139d0:	d106      	bne.n	80139e0 <_printf_common+0x48>
 80139d2:	f104 0a19 	add.w	sl, r4, #25
 80139d6:	68e3      	ldr	r3, [r4, #12]
 80139d8:	6832      	ldr	r2, [r6, #0]
 80139da:	1a9b      	subs	r3, r3, r2
 80139dc:	42ab      	cmp	r3, r5
 80139de:	dc26      	bgt.n	8013a2e <_printf_common+0x96>
 80139e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80139e4:	6822      	ldr	r2, [r4, #0]
 80139e6:	3b00      	subs	r3, #0
 80139e8:	bf18      	it	ne
 80139ea:	2301      	movne	r3, #1
 80139ec:	0692      	lsls	r2, r2, #26
 80139ee:	d42b      	bmi.n	8013a48 <_printf_common+0xb0>
 80139f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80139f4:	4641      	mov	r1, r8
 80139f6:	4638      	mov	r0, r7
 80139f8:	47c8      	blx	r9
 80139fa:	3001      	adds	r0, #1
 80139fc:	d01e      	beq.n	8013a3c <_printf_common+0xa4>
 80139fe:	6823      	ldr	r3, [r4, #0]
 8013a00:	6922      	ldr	r2, [r4, #16]
 8013a02:	f003 0306 	and.w	r3, r3, #6
 8013a06:	2b04      	cmp	r3, #4
 8013a08:	bf02      	ittt	eq
 8013a0a:	68e5      	ldreq	r5, [r4, #12]
 8013a0c:	6833      	ldreq	r3, [r6, #0]
 8013a0e:	1aed      	subeq	r5, r5, r3
 8013a10:	68a3      	ldr	r3, [r4, #8]
 8013a12:	bf0c      	ite	eq
 8013a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a18:	2500      	movne	r5, #0
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	bfc4      	itt	gt
 8013a1e:	1a9b      	subgt	r3, r3, r2
 8013a20:	18ed      	addgt	r5, r5, r3
 8013a22:	2600      	movs	r6, #0
 8013a24:	341a      	adds	r4, #26
 8013a26:	42b5      	cmp	r5, r6
 8013a28:	d11a      	bne.n	8013a60 <_printf_common+0xc8>
 8013a2a:	2000      	movs	r0, #0
 8013a2c:	e008      	b.n	8013a40 <_printf_common+0xa8>
 8013a2e:	2301      	movs	r3, #1
 8013a30:	4652      	mov	r2, sl
 8013a32:	4641      	mov	r1, r8
 8013a34:	4638      	mov	r0, r7
 8013a36:	47c8      	blx	r9
 8013a38:	3001      	adds	r0, #1
 8013a3a:	d103      	bne.n	8013a44 <_printf_common+0xac>
 8013a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a44:	3501      	adds	r5, #1
 8013a46:	e7c6      	b.n	80139d6 <_printf_common+0x3e>
 8013a48:	18e1      	adds	r1, r4, r3
 8013a4a:	1c5a      	adds	r2, r3, #1
 8013a4c:	2030      	movs	r0, #48	@ 0x30
 8013a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a52:	4422      	add	r2, r4
 8013a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a5c:	3302      	adds	r3, #2
 8013a5e:	e7c7      	b.n	80139f0 <_printf_common+0x58>
 8013a60:	2301      	movs	r3, #1
 8013a62:	4622      	mov	r2, r4
 8013a64:	4641      	mov	r1, r8
 8013a66:	4638      	mov	r0, r7
 8013a68:	47c8      	blx	r9
 8013a6a:	3001      	adds	r0, #1
 8013a6c:	d0e6      	beq.n	8013a3c <_printf_common+0xa4>
 8013a6e:	3601      	adds	r6, #1
 8013a70:	e7d9      	b.n	8013a26 <_printf_common+0x8e>
	...

08013a74 <_printf_i>:
 8013a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a78:	7e0f      	ldrb	r7, [r1, #24]
 8013a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a7c:	2f78      	cmp	r7, #120	@ 0x78
 8013a7e:	4691      	mov	r9, r2
 8013a80:	4680      	mov	r8, r0
 8013a82:	460c      	mov	r4, r1
 8013a84:	469a      	mov	sl, r3
 8013a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013a8a:	d807      	bhi.n	8013a9c <_printf_i+0x28>
 8013a8c:	2f62      	cmp	r7, #98	@ 0x62
 8013a8e:	d80a      	bhi.n	8013aa6 <_printf_i+0x32>
 8013a90:	2f00      	cmp	r7, #0
 8013a92:	f000 80d2 	beq.w	8013c3a <_printf_i+0x1c6>
 8013a96:	2f58      	cmp	r7, #88	@ 0x58
 8013a98:	f000 80b9 	beq.w	8013c0e <_printf_i+0x19a>
 8013a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013aa4:	e03a      	b.n	8013b1c <_printf_i+0xa8>
 8013aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013aaa:	2b15      	cmp	r3, #21
 8013aac:	d8f6      	bhi.n	8013a9c <_printf_i+0x28>
 8013aae:	a101      	add	r1, pc, #4	@ (adr r1, 8013ab4 <_printf_i+0x40>)
 8013ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ab4:	08013b0d 	.word	0x08013b0d
 8013ab8:	08013b21 	.word	0x08013b21
 8013abc:	08013a9d 	.word	0x08013a9d
 8013ac0:	08013a9d 	.word	0x08013a9d
 8013ac4:	08013a9d 	.word	0x08013a9d
 8013ac8:	08013a9d 	.word	0x08013a9d
 8013acc:	08013b21 	.word	0x08013b21
 8013ad0:	08013a9d 	.word	0x08013a9d
 8013ad4:	08013a9d 	.word	0x08013a9d
 8013ad8:	08013a9d 	.word	0x08013a9d
 8013adc:	08013a9d 	.word	0x08013a9d
 8013ae0:	08013c21 	.word	0x08013c21
 8013ae4:	08013b4b 	.word	0x08013b4b
 8013ae8:	08013bdb 	.word	0x08013bdb
 8013aec:	08013a9d 	.word	0x08013a9d
 8013af0:	08013a9d 	.word	0x08013a9d
 8013af4:	08013c43 	.word	0x08013c43
 8013af8:	08013a9d 	.word	0x08013a9d
 8013afc:	08013b4b 	.word	0x08013b4b
 8013b00:	08013a9d 	.word	0x08013a9d
 8013b04:	08013a9d 	.word	0x08013a9d
 8013b08:	08013be3 	.word	0x08013be3
 8013b0c:	6833      	ldr	r3, [r6, #0]
 8013b0e:	1d1a      	adds	r2, r3, #4
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	6032      	str	r2, [r6, #0]
 8013b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	e09d      	b.n	8013c5c <_printf_i+0x1e8>
 8013b20:	6833      	ldr	r3, [r6, #0]
 8013b22:	6820      	ldr	r0, [r4, #0]
 8013b24:	1d19      	adds	r1, r3, #4
 8013b26:	6031      	str	r1, [r6, #0]
 8013b28:	0606      	lsls	r6, r0, #24
 8013b2a:	d501      	bpl.n	8013b30 <_printf_i+0xbc>
 8013b2c:	681d      	ldr	r5, [r3, #0]
 8013b2e:	e003      	b.n	8013b38 <_printf_i+0xc4>
 8013b30:	0645      	lsls	r5, r0, #25
 8013b32:	d5fb      	bpl.n	8013b2c <_printf_i+0xb8>
 8013b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013b38:	2d00      	cmp	r5, #0
 8013b3a:	da03      	bge.n	8013b44 <_printf_i+0xd0>
 8013b3c:	232d      	movs	r3, #45	@ 0x2d
 8013b3e:	426d      	negs	r5, r5
 8013b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b44:	4859      	ldr	r0, [pc, #356]	@ (8013cac <_printf_i+0x238>)
 8013b46:	230a      	movs	r3, #10
 8013b48:	e011      	b.n	8013b6e <_printf_i+0xfa>
 8013b4a:	6821      	ldr	r1, [r4, #0]
 8013b4c:	6833      	ldr	r3, [r6, #0]
 8013b4e:	0608      	lsls	r0, r1, #24
 8013b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b54:	d402      	bmi.n	8013b5c <_printf_i+0xe8>
 8013b56:	0649      	lsls	r1, r1, #25
 8013b58:	bf48      	it	mi
 8013b5a:	b2ad      	uxthmi	r5, r5
 8013b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b5e:	4853      	ldr	r0, [pc, #332]	@ (8013cac <_printf_i+0x238>)
 8013b60:	6033      	str	r3, [r6, #0]
 8013b62:	bf14      	ite	ne
 8013b64:	230a      	movne	r3, #10
 8013b66:	2308      	moveq	r3, #8
 8013b68:	2100      	movs	r1, #0
 8013b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b6e:	6866      	ldr	r6, [r4, #4]
 8013b70:	60a6      	str	r6, [r4, #8]
 8013b72:	2e00      	cmp	r6, #0
 8013b74:	bfa2      	ittt	ge
 8013b76:	6821      	ldrge	r1, [r4, #0]
 8013b78:	f021 0104 	bicge.w	r1, r1, #4
 8013b7c:	6021      	strge	r1, [r4, #0]
 8013b7e:	b90d      	cbnz	r5, 8013b84 <_printf_i+0x110>
 8013b80:	2e00      	cmp	r6, #0
 8013b82:	d04b      	beq.n	8013c1c <_printf_i+0x1a8>
 8013b84:	4616      	mov	r6, r2
 8013b86:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b8a:	fb03 5711 	mls	r7, r3, r1, r5
 8013b8e:	5dc7      	ldrb	r7, [r0, r7]
 8013b90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b94:	462f      	mov	r7, r5
 8013b96:	42bb      	cmp	r3, r7
 8013b98:	460d      	mov	r5, r1
 8013b9a:	d9f4      	bls.n	8013b86 <_printf_i+0x112>
 8013b9c:	2b08      	cmp	r3, #8
 8013b9e:	d10b      	bne.n	8013bb8 <_printf_i+0x144>
 8013ba0:	6823      	ldr	r3, [r4, #0]
 8013ba2:	07df      	lsls	r7, r3, #31
 8013ba4:	d508      	bpl.n	8013bb8 <_printf_i+0x144>
 8013ba6:	6923      	ldr	r3, [r4, #16]
 8013ba8:	6861      	ldr	r1, [r4, #4]
 8013baa:	4299      	cmp	r1, r3
 8013bac:	bfde      	ittt	le
 8013bae:	2330      	movle	r3, #48	@ 0x30
 8013bb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013bb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013bb8:	1b92      	subs	r2, r2, r6
 8013bba:	6122      	str	r2, [r4, #16]
 8013bbc:	f8cd a000 	str.w	sl, [sp]
 8013bc0:	464b      	mov	r3, r9
 8013bc2:	aa03      	add	r2, sp, #12
 8013bc4:	4621      	mov	r1, r4
 8013bc6:	4640      	mov	r0, r8
 8013bc8:	f7ff fee6 	bl	8013998 <_printf_common>
 8013bcc:	3001      	adds	r0, #1
 8013bce:	d14a      	bne.n	8013c66 <_printf_i+0x1f2>
 8013bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd4:	b004      	add	sp, #16
 8013bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bda:	6823      	ldr	r3, [r4, #0]
 8013bdc:	f043 0320 	orr.w	r3, r3, #32
 8013be0:	6023      	str	r3, [r4, #0]
 8013be2:	4833      	ldr	r0, [pc, #204]	@ (8013cb0 <_printf_i+0x23c>)
 8013be4:	2778      	movs	r7, #120	@ 0x78
 8013be6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	6831      	ldr	r1, [r6, #0]
 8013bee:	061f      	lsls	r7, r3, #24
 8013bf0:	f851 5b04 	ldr.w	r5, [r1], #4
 8013bf4:	d402      	bmi.n	8013bfc <_printf_i+0x188>
 8013bf6:	065f      	lsls	r7, r3, #25
 8013bf8:	bf48      	it	mi
 8013bfa:	b2ad      	uxthmi	r5, r5
 8013bfc:	6031      	str	r1, [r6, #0]
 8013bfe:	07d9      	lsls	r1, r3, #31
 8013c00:	bf44      	itt	mi
 8013c02:	f043 0320 	orrmi.w	r3, r3, #32
 8013c06:	6023      	strmi	r3, [r4, #0]
 8013c08:	b11d      	cbz	r5, 8013c12 <_printf_i+0x19e>
 8013c0a:	2310      	movs	r3, #16
 8013c0c:	e7ac      	b.n	8013b68 <_printf_i+0xf4>
 8013c0e:	4827      	ldr	r0, [pc, #156]	@ (8013cac <_printf_i+0x238>)
 8013c10:	e7e9      	b.n	8013be6 <_printf_i+0x172>
 8013c12:	6823      	ldr	r3, [r4, #0]
 8013c14:	f023 0320 	bic.w	r3, r3, #32
 8013c18:	6023      	str	r3, [r4, #0]
 8013c1a:	e7f6      	b.n	8013c0a <_printf_i+0x196>
 8013c1c:	4616      	mov	r6, r2
 8013c1e:	e7bd      	b.n	8013b9c <_printf_i+0x128>
 8013c20:	6833      	ldr	r3, [r6, #0]
 8013c22:	6825      	ldr	r5, [r4, #0]
 8013c24:	6961      	ldr	r1, [r4, #20]
 8013c26:	1d18      	adds	r0, r3, #4
 8013c28:	6030      	str	r0, [r6, #0]
 8013c2a:	062e      	lsls	r6, r5, #24
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	d501      	bpl.n	8013c34 <_printf_i+0x1c0>
 8013c30:	6019      	str	r1, [r3, #0]
 8013c32:	e002      	b.n	8013c3a <_printf_i+0x1c6>
 8013c34:	0668      	lsls	r0, r5, #25
 8013c36:	d5fb      	bpl.n	8013c30 <_printf_i+0x1bc>
 8013c38:	8019      	strh	r1, [r3, #0]
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	6123      	str	r3, [r4, #16]
 8013c3e:	4616      	mov	r6, r2
 8013c40:	e7bc      	b.n	8013bbc <_printf_i+0x148>
 8013c42:	6833      	ldr	r3, [r6, #0]
 8013c44:	1d1a      	adds	r2, r3, #4
 8013c46:	6032      	str	r2, [r6, #0]
 8013c48:	681e      	ldr	r6, [r3, #0]
 8013c4a:	6862      	ldr	r2, [r4, #4]
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f7ec faa6 	bl	80001a0 <memchr>
 8013c54:	b108      	cbz	r0, 8013c5a <_printf_i+0x1e6>
 8013c56:	1b80      	subs	r0, r0, r6
 8013c58:	6060      	str	r0, [r4, #4]
 8013c5a:	6863      	ldr	r3, [r4, #4]
 8013c5c:	6123      	str	r3, [r4, #16]
 8013c5e:	2300      	movs	r3, #0
 8013c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c64:	e7aa      	b.n	8013bbc <_printf_i+0x148>
 8013c66:	6923      	ldr	r3, [r4, #16]
 8013c68:	4632      	mov	r2, r6
 8013c6a:	4649      	mov	r1, r9
 8013c6c:	4640      	mov	r0, r8
 8013c6e:	47d0      	blx	sl
 8013c70:	3001      	adds	r0, #1
 8013c72:	d0ad      	beq.n	8013bd0 <_printf_i+0x15c>
 8013c74:	6823      	ldr	r3, [r4, #0]
 8013c76:	079b      	lsls	r3, r3, #30
 8013c78:	d413      	bmi.n	8013ca2 <_printf_i+0x22e>
 8013c7a:	68e0      	ldr	r0, [r4, #12]
 8013c7c:	9b03      	ldr	r3, [sp, #12]
 8013c7e:	4298      	cmp	r0, r3
 8013c80:	bfb8      	it	lt
 8013c82:	4618      	movlt	r0, r3
 8013c84:	e7a6      	b.n	8013bd4 <_printf_i+0x160>
 8013c86:	2301      	movs	r3, #1
 8013c88:	4632      	mov	r2, r6
 8013c8a:	4649      	mov	r1, r9
 8013c8c:	4640      	mov	r0, r8
 8013c8e:	47d0      	blx	sl
 8013c90:	3001      	adds	r0, #1
 8013c92:	d09d      	beq.n	8013bd0 <_printf_i+0x15c>
 8013c94:	3501      	adds	r5, #1
 8013c96:	68e3      	ldr	r3, [r4, #12]
 8013c98:	9903      	ldr	r1, [sp, #12]
 8013c9a:	1a5b      	subs	r3, r3, r1
 8013c9c:	42ab      	cmp	r3, r5
 8013c9e:	dcf2      	bgt.n	8013c86 <_printf_i+0x212>
 8013ca0:	e7eb      	b.n	8013c7a <_printf_i+0x206>
 8013ca2:	2500      	movs	r5, #0
 8013ca4:	f104 0619 	add.w	r6, r4, #25
 8013ca8:	e7f5      	b.n	8013c96 <_printf_i+0x222>
 8013caa:	bf00      	nop
 8013cac:	080190a3 	.word	0x080190a3
 8013cb0:	080190b4 	.word	0x080190b4

08013cb4 <std>:
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	b510      	push	{r4, lr}
 8013cb8:	4604      	mov	r4, r0
 8013cba:	e9c0 3300 	strd	r3, r3, [r0]
 8013cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013cc2:	6083      	str	r3, [r0, #8]
 8013cc4:	8181      	strh	r1, [r0, #12]
 8013cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8013cc8:	81c2      	strh	r2, [r0, #14]
 8013cca:	6183      	str	r3, [r0, #24]
 8013ccc:	4619      	mov	r1, r3
 8013cce:	2208      	movs	r2, #8
 8013cd0:	305c      	adds	r0, #92	@ 0x5c
 8013cd2:	f000 f916 	bl	8013f02 <memset>
 8013cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8013d0c <std+0x58>)
 8013cd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cda:	4b0d      	ldr	r3, [pc, #52]	@ (8013d10 <std+0x5c>)
 8013cdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cde:	4b0d      	ldr	r3, [pc, #52]	@ (8013d14 <std+0x60>)
 8013ce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8013d18 <std+0x64>)
 8013ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8013ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8013d1c <std+0x68>)
 8013ce8:	6224      	str	r4, [r4, #32]
 8013cea:	429c      	cmp	r4, r3
 8013cec:	d006      	beq.n	8013cfc <std+0x48>
 8013cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013cf2:	4294      	cmp	r4, r2
 8013cf4:	d002      	beq.n	8013cfc <std+0x48>
 8013cf6:	33d0      	adds	r3, #208	@ 0xd0
 8013cf8:	429c      	cmp	r4, r3
 8013cfa:	d105      	bne.n	8013d08 <std+0x54>
 8013cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d04:	f000 bfe8 	b.w	8014cd8 <__retarget_lock_init_recursive>
 8013d08:	bd10      	pop	{r4, pc}
 8013d0a:	bf00      	nop
 8013d0c:	08013e79 	.word	0x08013e79
 8013d10:	08013e9f 	.word	0x08013e9f
 8013d14:	08013ed7 	.word	0x08013ed7
 8013d18:	08013efb 	.word	0x08013efb
 8013d1c:	2000a780 	.word	0x2000a780

08013d20 <stdio_exit_handler>:
 8013d20:	4a02      	ldr	r2, [pc, #8]	@ (8013d2c <stdio_exit_handler+0xc>)
 8013d22:	4903      	ldr	r1, [pc, #12]	@ (8013d30 <stdio_exit_handler+0x10>)
 8013d24:	4803      	ldr	r0, [pc, #12]	@ (8013d34 <stdio_exit_handler+0x14>)
 8013d26:	f000 b869 	b.w	8013dfc <_fwalk_sglue>
 8013d2a:	bf00      	nop
 8013d2c:	20000020 	.word	0x20000020
 8013d30:	08016841 	.word	0x08016841
 8013d34:	20000038 	.word	0x20000038

08013d38 <cleanup_stdio>:
 8013d38:	6841      	ldr	r1, [r0, #4]
 8013d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8013d6c <cleanup_stdio+0x34>)
 8013d3c:	4299      	cmp	r1, r3
 8013d3e:	b510      	push	{r4, lr}
 8013d40:	4604      	mov	r4, r0
 8013d42:	d001      	beq.n	8013d48 <cleanup_stdio+0x10>
 8013d44:	f002 fd7c 	bl	8016840 <_fflush_r>
 8013d48:	68a1      	ldr	r1, [r4, #8]
 8013d4a:	4b09      	ldr	r3, [pc, #36]	@ (8013d70 <cleanup_stdio+0x38>)
 8013d4c:	4299      	cmp	r1, r3
 8013d4e:	d002      	beq.n	8013d56 <cleanup_stdio+0x1e>
 8013d50:	4620      	mov	r0, r4
 8013d52:	f002 fd75 	bl	8016840 <_fflush_r>
 8013d56:	68e1      	ldr	r1, [r4, #12]
 8013d58:	4b06      	ldr	r3, [pc, #24]	@ (8013d74 <cleanup_stdio+0x3c>)
 8013d5a:	4299      	cmp	r1, r3
 8013d5c:	d004      	beq.n	8013d68 <cleanup_stdio+0x30>
 8013d5e:	4620      	mov	r0, r4
 8013d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d64:	f002 bd6c 	b.w	8016840 <_fflush_r>
 8013d68:	bd10      	pop	{r4, pc}
 8013d6a:	bf00      	nop
 8013d6c:	2000a780 	.word	0x2000a780
 8013d70:	2000a7e8 	.word	0x2000a7e8
 8013d74:	2000a850 	.word	0x2000a850

08013d78 <global_stdio_init.part.0>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8013da8 <global_stdio_init.part.0+0x30>)
 8013d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8013dac <global_stdio_init.part.0+0x34>)
 8013d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8013db0 <global_stdio_init.part.0+0x38>)
 8013d80:	601a      	str	r2, [r3, #0]
 8013d82:	4620      	mov	r0, r4
 8013d84:	2200      	movs	r2, #0
 8013d86:	2104      	movs	r1, #4
 8013d88:	f7ff ff94 	bl	8013cb4 <std>
 8013d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d90:	2201      	movs	r2, #1
 8013d92:	2109      	movs	r1, #9
 8013d94:	f7ff ff8e 	bl	8013cb4 <std>
 8013d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d9c:	2202      	movs	r2, #2
 8013d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013da2:	2112      	movs	r1, #18
 8013da4:	f7ff bf86 	b.w	8013cb4 <std>
 8013da8:	2000a8b8 	.word	0x2000a8b8
 8013dac:	2000a780 	.word	0x2000a780
 8013db0:	08013d21 	.word	0x08013d21

08013db4 <__sfp_lock_acquire>:
 8013db4:	4801      	ldr	r0, [pc, #4]	@ (8013dbc <__sfp_lock_acquire+0x8>)
 8013db6:	f000 bf91 	b.w	8014cdc <__retarget_lock_acquire_recursive>
 8013dba:	bf00      	nop
 8013dbc:	2000a8e7 	.word	0x2000a8e7

08013dc0 <__sfp_lock_release>:
 8013dc0:	4801      	ldr	r0, [pc, #4]	@ (8013dc8 <__sfp_lock_release+0x8>)
 8013dc2:	f000 bf8d 	b.w	8014ce0 <__retarget_lock_release_recursive>
 8013dc6:	bf00      	nop
 8013dc8:	2000a8e7 	.word	0x2000a8e7

08013dcc <__sinit>:
 8013dcc:	b510      	push	{r4, lr}
 8013dce:	4604      	mov	r4, r0
 8013dd0:	f7ff fff0 	bl	8013db4 <__sfp_lock_acquire>
 8013dd4:	6a23      	ldr	r3, [r4, #32]
 8013dd6:	b11b      	cbz	r3, 8013de0 <__sinit+0x14>
 8013dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ddc:	f7ff bff0 	b.w	8013dc0 <__sfp_lock_release>
 8013de0:	4b04      	ldr	r3, [pc, #16]	@ (8013df4 <__sinit+0x28>)
 8013de2:	6223      	str	r3, [r4, #32]
 8013de4:	4b04      	ldr	r3, [pc, #16]	@ (8013df8 <__sinit+0x2c>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d1f5      	bne.n	8013dd8 <__sinit+0xc>
 8013dec:	f7ff ffc4 	bl	8013d78 <global_stdio_init.part.0>
 8013df0:	e7f2      	b.n	8013dd8 <__sinit+0xc>
 8013df2:	bf00      	nop
 8013df4:	08013d39 	.word	0x08013d39
 8013df8:	2000a8b8 	.word	0x2000a8b8

08013dfc <_fwalk_sglue>:
 8013dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e00:	4607      	mov	r7, r0
 8013e02:	4688      	mov	r8, r1
 8013e04:	4614      	mov	r4, r2
 8013e06:	2600      	movs	r6, #0
 8013e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8013e10:	d505      	bpl.n	8013e1e <_fwalk_sglue+0x22>
 8013e12:	6824      	ldr	r4, [r4, #0]
 8013e14:	2c00      	cmp	r4, #0
 8013e16:	d1f7      	bne.n	8013e08 <_fwalk_sglue+0xc>
 8013e18:	4630      	mov	r0, r6
 8013e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e1e:	89ab      	ldrh	r3, [r5, #12]
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d907      	bls.n	8013e34 <_fwalk_sglue+0x38>
 8013e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	d003      	beq.n	8013e34 <_fwalk_sglue+0x38>
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4638      	mov	r0, r7
 8013e30:	47c0      	blx	r8
 8013e32:	4306      	orrs	r6, r0
 8013e34:	3568      	adds	r5, #104	@ 0x68
 8013e36:	e7e9      	b.n	8013e0c <_fwalk_sglue+0x10>

08013e38 <siprintf>:
 8013e38:	b40e      	push	{r1, r2, r3}
 8013e3a:	b500      	push	{lr}
 8013e3c:	b09c      	sub	sp, #112	@ 0x70
 8013e3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8013e40:	9002      	str	r0, [sp, #8]
 8013e42:	9006      	str	r0, [sp, #24]
 8013e44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013e48:	4809      	ldr	r0, [pc, #36]	@ (8013e70 <siprintf+0x38>)
 8013e4a:	9107      	str	r1, [sp, #28]
 8013e4c:	9104      	str	r1, [sp, #16]
 8013e4e:	4909      	ldr	r1, [pc, #36]	@ (8013e74 <siprintf+0x3c>)
 8013e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e54:	9105      	str	r1, [sp, #20]
 8013e56:	6800      	ldr	r0, [r0, #0]
 8013e58:	9301      	str	r3, [sp, #4]
 8013e5a:	a902      	add	r1, sp, #8
 8013e5c:	f002 fb70 	bl	8016540 <_svfiprintf_r>
 8013e60:	9b02      	ldr	r3, [sp, #8]
 8013e62:	2200      	movs	r2, #0
 8013e64:	701a      	strb	r2, [r3, #0]
 8013e66:	b01c      	add	sp, #112	@ 0x70
 8013e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e6c:	b003      	add	sp, #12
 8013e6e:	4770      	bx	lr
 8013e70:	20000034 	.word	0x20000034
 8013e74:	ffff0208 	.word	0xffff0208

08013e78 <__sread>:
 8013e78:	b510      	push	{r4, lr}
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e80:	f000 fedc 	bl	8014c3c <_read_r>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	bfab      	itete	ge
 8013e88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8013e8c:	181b      	addge	r3, r3, r0
 8013e8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013e92:	bfac      	ite	ge
 8013e94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013e96:	81a3      	strhlt	r3, [r4, #12]
 8013e98:	bd10      	pop	{r4, pc}

08013e9a <__seofread>:
 8013e9a:	2000      	movs	r0, #0
 8013e9c:	4770      	bx	lr

08013e9e <__swrite>:
 8013e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea2:	461f      	mov	r7, r3
 8013ea4:	898b      	ldrh	r3, [r1, #12]
 8013ea6:	05db      	lsls	r3, r3, #23
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	460c      	mov	r4, r1
 8013eac:	4616      	mov	r6, r2
 8013eae:	d505      	bpl.n	8013ebc <__swrite+0x1e>
 8013eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eb4:	2302      	movs	r3, #2
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f000 feae 	bl	8014c18 <_lseek_r>
 8013ebc:	89a3      	ldrh	r3, [r4, #12]
 8013ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013ec6:	81a3      	strh	r3, [r4, #12]
 8013ec8:	4632      	mov	r2, r6
 8013eca:	463b      	mov	r3, r7
 8013ecc:	4628      	mov	r0, r5
 8013ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed2:	f000 bec5 	b.w	8014c60 <_write_r>

08013ed6 <__sseek>:
 8013ed6:	b510      	push	{r4, lr}
 8013ed8:	460c      	mov	r4, r1
 8013eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ede:	f000 fe9b 	bl	8014c18 <_lseek_r>
 8013ee2:	1c43      	adds	r3, r0, #1
 8013ee4:	89a3      	ldrh	r3, [r4, #12]
 8013ee6:	bf15      	itete	ne
 8013ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013ef2:	81a3      	strheq	r3, [r4, #12]
 8013ef4:	bf18      	it	ne
 8013ef6:	81a3      	strhne	r3, [r4, #12]
 8013ef8:	bd10      	pop	{r4, pc}

08013efa <__sclose>:
 8013efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013efe:	f000 be7b 	b.w	8014bf8 <_close_r>

08013f02 <memset>:
 8013f02:	4402      	add	r2, r0
 8013f04:	4603      	mov	r3, r0
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d100      	bne.n	8013f0c <memset+0xa>
 8013f0a:	4770      	bx	lr
 8013f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8013f10:	e7f9      	b.n	8013f06 <memset+0x4>
	...

08013f14 <localtime>:
 8013f14:	b538      	push	{r3, r4, r5, lr}
 8013f16:	4b0b      	ldr	r3, [pc, #44]	@ (8013f44 <localtime+0x30>)
 8013f18:	681d      	ldr	r5, [r3, #0]
 8013f1a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	b953      	cbnz	r3, 8013f36 <localtime+0x22>
 8013f20:	2024      	movs	r0, #36	@ 0x24
 8013f22:	f001 fdf7 	bl	8015b14 <malloc>
 8013f26:	4602      	mov	r2, r0
 8013f28:	6368      	str	r0, [r5, #52]	@ 0x34
 8013f2a:	b920      	cbnz	r0, 8013f36 <localtime+0x22>
 8013f2c:	4b06      	ldr	r3, [pc, #24]	@ (8013f48 <localtime+0x34>)
 8013f2e:	4807      	ldr	r0, [pc, #28]	@ (8013f4c <localtime+0x38>)
 8013f30:	2132      	movs	r1, #50	@ 0x32
 8013f32:	f000 feed 	bl	8014d10 <__assert_func>
 8013f36:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013f38:	4620      	mov	r0, r4
 8013f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f3e:	f000 b807 	b.w	8013f50 <localtime_r>
 8013f42:	bf00      	nop
 8013f44:	20000034 	.word	0x20000034
 8013f48:	08019024 	.word	0x08019024
 8013f4c:	080190c5 	.word	0x080190c5

08013f50 <localtime_r>:
 8013f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f54:	460c      	mov	r4, r1
 8013f56:	4680      	mov	r8, r0
 8013f58:	f002 fd02 	bl	8016960 <__gettzinfo>
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	4605      	mov	r5, r0
 8013f60:	4640      	mov	r0, r8
 8013f62:	f002 fd01 	bl	8016968 <gmtime_r>
 8013f66:	6943      	ldr	r3, [r0, #20]
 8013f68:	0799      	lsls	r1, r3, #30
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8013f70:	d106      	bne.n	8013f80 <localtime_r+0x30>
 8013f72:	2264      	movs	r2, #100	@ 0x64
 8013f74:	fb97 f3f2 	sdiv	r3, r7, r2
 8013f78:	fb02 7313 	mls	r3, r2, r3, r7
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d170      	bne.n	8014062 <localtime_r+0x112>
 8013f80:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8013f84:	fb97 f3f2 	sdiv	r3, r7, r2
 8013f88:	fb02 7313 	mls	r3, r2, r3, r7
 8013f8c:	fab3 f383 	clz	r3, r3
 8013f90:	095b      	lsrs	r3, r3, #5
 8013f92:	4e64      	ldr	r6, [pc, #400]	@ (8014124 <localtime_r+0x1d4>)
 8013f94:	2230      	movs	r2, #48	@ 0x30
 8013f96:	fb02 6603 	mla	r6, r2, r3, r6
 8013f9a:	f000 fbf5 	bl	8014788 <__tz_lock>
 8013f9e:	f000 fbff 	bl	80147a0 <_tzset_unlocked>
 8013fa2:	4b61      	ldr	r3, [pc, #388]	@ (8014128 <localtime_r+0x1d8>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d06a      	beq.n	8014080 <localtime_r+0x130>
 8013faa:	686b      	ldr	r3, [r5, #4]
 8013fac:	42bb      	cmp	r3, r7
 8013fae:	d15a      	bne.n	8014066 <localtime_r+0x116>
 8013fb0:	682f      	ldr	r7, [r5, #0]
 8013fb2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013fb6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8013fba:	2f00      	cmp	r7, #0
 8013fbc:	d15b      	bne.n	8014076 <localtime_r+0x126>
 8013fbe:	4282      	cmp	r2, r0
 8013fc0:	eb73 0101 	sbcs.w	r1, r3, r1
 8013fc4:	db5e      	blt.n	8014084 <localtime_r+0x134>
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	6223      	str	r3, [r4, #32]
 8013fca:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013fcc:	6861      	ldr	r1, [r4, #4]
 8013fce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8013fd2:	fb93 f0f2 	sdiv	r0, r3, r2
 8013fd6:	fb02 3310 	mls	r3, r2, r0, r3
 8013fda:	223c      	movs	r2, #60	@ 0x3c
 8013fdc:	fb93 f5f2 	sdiv	r5, r3, r2
 8013fe0:	fb02 3215 	mls	r2, r2, r5, r3
 8013fe4:	6823      	ldr	r3, [r4, #0]
 8013fe6:	1a9b      	subs	r3, r3, r2
 8013fe8:	68a2      	ldr	r2, [r4, #8]
 8013fea:	6023      	str	r3, [r4, #0]
 8013fec:	1b49      	subs	r1, r1, r5
 8013fee:	1a12      	subs	r2, r2, r0
 8013ff0:	2b3b      	cmp	r3, #59	@ 0x3b
 8013ff2:	6061      	str	r1, [r4, #4]
 8013ff4:	60a2      	str	r2, [r4, #8]
 8013ff6:	dd51      	ble.n	801409c <localtime_r+0x14c>
 8013ff8:	3101      	adds	r1, #1
 8013ffa:	6061      	str	r1, [r4, #4]
 8013ffc:	3b3c      	subs	r3, #60	@ 0x3c
 8013ffe:	6023      	str	r3, [r4, #0]
 8014000:	6863      	ldr	r3, [r4, #4]
 8014002:	2b3b      	cmp	r3, #59	@ 0x3b
 8014004:	dd50      	ble.n	80140a8 <localtime_r+0x158>
 8014006:	3201      	adds	r2, #1
 8014008:	60a2      	str	r2, [r4, #8]
 801400a:	3b3c      	subs	r3, #60	@ 0x3c
 801400c:	6063      	str	r3, [r4, #4]
 801400e:	68a3      	ldr	r3, [r4, #8]
 8014010:	2b17      	cmp	r3, #23
 8014012:	dd4f      	ble.n	80140b4 <localtime_r+0x164>
 8014014:	69e2      	ldr	r2, [r4, #28]
 8014016:	3201      	adds	r2, #1
 8014018:	61e2      	str	r2, [r4, #28]
 801401a:	69a2      	ldr	r2, [r4, #24]
 801401c:	3201      	adds	r2, #1
 801401e:	2a07      	cmp	r2, #7
 8014020:	bfa8      	it	ge
 8014022:	2200      	movge	r2, #0
 8014024:	61a2      	str	r2, [r4, #24]
 8014026:	68e2      	ldr	r2, [r4, #12]
 8014028:	3b18      	subs	r3, #24
 801402a:	3201      	adds	r2, #1
 801402c:	60a3      	str	r3, [r4, #8]
 801402e:	6923      	ldr	r3, [r4, #16]
 8014030:	60e2      	str	r2, [r4, #12]
 8014032:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8014036:	428a      	cmp	r2, r1
 8014038:	dd0e      	ble.n	8014058 <localtime_r+0x108>
 801403a:	2b0b      	cmp	r3, #11
 801403c:	eba2 0201 	sub.w	r2, r2, r1
 8014040:	60e2      	str	r2, [r4, #12]
 8014042:	f103 0201 	add.w	r2, r3, #1
 8014046:	bf09      	itett	eq
 8014048:	6963      	ldreq	r3, [r4, #20]
 801404a:	6122      	strne	r2, [r4, #16]
 801404c:	2200      	moveq	r2, #0
 801404e:	3301      	addeq	r3, #1
 8014050:	bf02      	ittt	eq
 8014052:	6122      	streq	r2, [r4, #16]
 8014054:	6163      	streq	r3, [r4, #20]
 8014056:	61e2      	streq	r2, [r4, #28]
 8014058:	f000 fb9c 	bl	8014794 <__tz_unlock>
 801405c:	4620      	mov	r0, r4
 801405e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014062:	2301      	movs	r3, #1
 8014064:	e795      	b.n	8013f92 <localtime_r+0x42>
 8014066:	4638      	mov	r0, r7
 8014068:	f000 fae4 	bl	8014634 <__tzcalc_limits>
 801406c:	2800      	cmp	r0, #0
 801406e:	d19f      	bne.n	8013fb0 <localtime_r+0x60>
 8014070:	f04f 33ff 	mov.w	r3, #4294967295
 8014074:	e004      	b.n	8014080 <localtime_r+0x130>
 8014076:	4282      	cmp	r2, r0
 8014078:	eb73 0101 	sbcs.w	r1, r3, r1
 801407c:	da02      	bge.n	8014084 <localtime_r+0x134>
 801407e:	2300      	movs	r3, #0
 8014080:	6223      	str	r3, [r4, #32]
 8014082:	e009      	b.n	8014098 <localtime_r+0x148>
 8014084:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8014088:	4282      	cmp	r2, r0
 801408a:	418b      	sbcs	r3, r1
 801408c:	bfb4      	ite	lt
 801408e:	2301      	movlt	r3, #1
 8014090:	2300      	movge	r3, #0
 8014092:	6223      	str	r3, [r4, #32]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d198      	bne.n	8013fca <localtime_r+0x7a>
 8014098:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801409a:	e797      	b.n	8013fcc <localtime_r+0x7c>
 801409c:	2b00      	cmp	r3, #0
 801409e:	daaf      	bge.n	8014000 <localtime_r+0xb0>
 80140a0:	3901      	subs	r1, #1
 80140a2:	6061      	str	r1, [r4, #4]
 80140a4:	333c      	adds	r3, #60	@ 0x3c
 80140a6:	e7aa      	b.n	8013ffe <localtime_r+0xae>
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	dab0      	bge.n	801400e <localtime_r+0xbe>
 80140ac:	3a01      	subs	r2, #1
 80140ae:	60a2      	str	r2, [r4, #8]
 80140b0:	333c      	adds	r3, #60	@ 0x3c
 80140b2:	e7ab      	b.n	801400c <localtime_r+0xbc>
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	dacf      	bge.n	8014058 <localtime_r+0x108>
 80140b8:	69e2      	ldr	r2, [r4, #28]
 80140ba:	3a01      	subs	r2, #1
 80140bc:	61e2      	str	r2, [r4, #28]
 80140be:	69a2      	ldr	r2, [r4, #24]
 80140c0:	3a01      	subs	r2, #1
 80140c2:	bf48      	it	mi
 80140c4:	2206      	movmi	r2, #6
 80140c6:	61a2      	str	r2, [r4, #24]
 80140c8:	68e2      	ldr	r2, [r4, #12]
 80140ca:	3318      	adds	r3, #24
 80140cc:	3a01      	subs	r2, #1
 80140ce:	60e2      	str	r2, [r4, #12]
 80140d0:	60a3      	str	r3, [r4, #8]
 80140d2:	2a00      	cmp	r2, #0
 80140d4:	d1c0      	bne.n	8014058 <localtime_r+0x108>
 80140d6:	6923      	ldr	r3, [r4, #16]
 80140d8:	3b01      	subs	r3, #1
 80140da:	d405      	bmi.n	80140e8 <localtime_r+0x198>
 80140dc:	6123      	str	r3, [r4, #16]
 80140de:	6923      	ldr	r3, [r4, #16]
 80140e0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80140e4:	60e3      	str	r3, [r4, #12]
 80140e6:	e7b7      	b.n	8014058 <localtime_r+0x108>
 80140e8:	230b      	movs	r3, #11
 80140ea:	6123      	str	r3, [r4, #16]
 80140ec:	6963      	ldr	r3, [r4, #20]
 80140ee:	1e5a      	subs	r2, r3, #1
 80140f0:	6162      	str	r2, [r4, #20]
 80140f2:	0792      	lsls	r2, r2, #30
 80140f4:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80140f8:	d105      	bne.n	8014106 <localtime_r+0x1b6>
 80140fa:	2164      	movs	r1, #100	@ 0x64
 80140fc:	fb93 f2f1 	sdiv	r2, r3, r1
 8014100:	fb01 3212 	mls	r2, r1, r2, r3
 8014104:	b962      	cbnz	r2, 8014120 <localtime_r+0x1d0>
 8014106:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801410a:	fb93 f1f2 	sdiv	r1, r3, r2
 801410e:	fb02 3311 	mls	r3, r2, r1, r3
 8014112:	fab3 f383 	clz	r3, r3
 8014116:	095b      	lsrs	r3, r3, #5
 8014118:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 801411c:	61e3      	str	r3, [r4, #28]
 801411e:	e7de      	b.n	80140de <localtime_r+0x18e>
 8014120:	2301      	movs	r3, #1
 8014122:	e7f9      	b.n	8014118 <localtime_r+0x1c8>
 8014124:	08019180 	.word	0x08019180
 8014128:	2000a8dc 	.word	0x2000a8dc

0801412c <validate_structure>:
 801412c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801412e:	6801      	ldr	r1, [r0, #0]
 8014130:	293b      	cmp	r1, #59	@ 0x3b
 8014132:	4604      	mov	r4, r0
 8014134:	d911      	bls.n	801415a <validate_structure+0x2e>
 8014136:	223c      	movs	r2, #60	@ 0x3c
 8014138:	4668      	mov	r0, sp
 801413a:	f000 fe07 	bl	8014d4c <div>
 801413e:	9a01      	ldr	r2, [sp, #4]
 8014140:	6863      	ldr	r3, [r4, #4]
 8014142:	9900      	ldr	r1, [sp, #0]
 8014144:	2a00      	cmp	r2, #0
 8014146:	440b      	add	r3, r1
 8014148:	6063      	str	r3, [r4, #4]
 801414a:	bfbb      	ittet	lt
 801414c:	323c      	addlt	r2, #60	@ 0x3c
 801414e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014152:	6022      	strge	r2, [r4, #0]
 8014154:	6022      	strlt	r2, [r4, #0]
 8014156:	bfb8      	it	lt
 8014158:	6063      	strlt	r3, [r4, #4]
 801415a:	6861      	ldr	r1, [r4, #4]
 801415c:	293b      	cmp	r1, #59	@ 0x3b
 801415e:	d911      	bls.n	8014184 <validate_structure+0x58>
 8014160:	223c      	movs	r2, #60	@ 0x3c
 8014162:	4668      	mov	r0, sp
 8014164:	f000 fdf2 	bl	8014d4c <div>
 8014168:	9a01      	ldr	r2, [sp, #4]
 801416a:	68a3      	ldr	r3, [r4, #8]
 801416c:	9900      	ldr	r1, [sp, #0]
 801416e:	2a00      	cmp	r2, #0
 8014170:	440b      	add	r3, r1
 8014172:	60a3      	str	r3, [r4, #8]
 8014174:	bfbb      	ittet	lt
 8014176:	323c      	addlt	r2, #60	@ 0x3c
 8014178:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801417c:	6062      	strge	r2, [r4, #4]
 801417e:	6062      	strlt	r2, [r4, #4]
 8014180:	bfb8      	it	lt
 8014182:	60a3      	strlt	r3, [r4, #8]
 8014184:	68a1      	ldr	r1, [r4, #8]
 8014186:	2917      	cmp	r1, #23
 8014188:	d911      	bls.n	80141ae <validate_structure+0x82>
 801418a:	2218      	movs	r2, #24
 801418c:	4668      	mov	r0, sp
 801418e:	f000 fddd 	bl	8014d4c <div>
 8014192:	9a01      	ldr	r2, [sp, #4]
 8014194:	68e3      	ldr	r3, [r4, #12]
 8014196:	9900      	ldr	r1, [sp, #0]
 8014198:	2a00      	cmp	r2, #0
 801419a:	440b      	add	r3, r1
 801419c:	60e3      	str	r3, [r4, #12]
 801419e:	bfbb      	ittet	lt
 80141a0:	3218      	addlt	r2, #24
 80141a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80141a6:	60a2      	strge	r2, [r4, #8]
 80141a8:	60a2      	strlt	r2, [r4, #8]
 80141aa:	bfb8      	it	lt
 80141ac:	60e3      	strlt	r3, [r4, #12]
 80141ae:	6921      	ldr	r1, [r4, #16]
 80141b0:	290b      	cmp	r1, #11
 80141b2:	d911      	bls.n	80141d8 <validate_structure+0xac>
 80141b4:	220c      	movs	r2, #12
 80141b6:	4668      	mov	r0, sp
 80141b8:	f000 fdc8 	bl	8014d4c <div>
 80141bc:	9a01      	ldr	r2, [sp, #4]
 80141be:	6963      	ldr	r3, [r4, #20]
 80141c0:	9900      	ldr	r1, [sp, #0]
 80141c2:	2a00      	cmp	r2, #0
 80141c4:	440b      	add	r3, r1
 80141c6:	6163      	str	r3, [r4, #20]
 80141c8:	bfbb      	ittet	lt
 80141ca:	320c      	addlt	r2, #12
 80141cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80141d0:	6122      	strge	r2, [r4, #16]
 80141d2:	6122      	strlt	r2, [r4, #16]
 80141d4:	bfb8      	it	lt
 80141d6:	6163      	strlt	r3, [r4, #20]
 80141d8:	6963      	ldr	r3, [r4, #20]
 80141da:	079a      	lsls	r2, r3, #30
 80141dc:	d11c      	bne.n	8014218 <validate_structure+0xec>
 80141de:	2164      	movs	r1, #100	@ 0x64
 80141e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80141e4:	fb01 3212 	mls	r2, r1, r2, r3
 80141e8:	b9c2      	cbnz	r2, 801421c <validate_structure+0xf0>
 80141ea:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80141ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80141f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80141f6:	fb02 3311 	mls	r3, r2, r1, r3
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	bf14      	ite	ne
 80141fe:	231c      	movne	r3, #28
 8014200:	231d      	moveq	r3, #29
 8014202:	68e2      	ldr	r2, [r4, #12]
 8014204:	2a00      	cmp	r2, #0
 8014206:	dc0b      	bgt.n	8014220 <validate_structure+0xf4>
 8014208:	4d31      	ldr	r5, [pc, #196]	@ (80142d0 <validate_structure+0x1a4>)
 801420a:	200b      	movs	r0, #11
 801420c:	2164      	movs	r1, #100	@ 0x64
 801420e:	68e6      	ldr	r6, [r4, #12]
 8014210:	2e00      	cmp	r6, #0
 8014212:	dd30      	ble.n	8014276 <validate_structure+0x14a>
 8014214:	b003      	add	sp, #12
 8014216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014218:	231c      	movs	r3, #28
 801421a:	e7f2      	b.n	8014202 <validate_structure+0xd6>
 801421c:	231d      	movs	r3, #29
 801421e:	e7f0      	b.n	8014202 <validate_structure+0xd6>
 8014220:	4d2b      	ldr	r5, [pc, #172]	@ (80142d0 <validate_structure+0x1a4>)
 8014222:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014226:	2a01      	cmp	r2, #1
 8014228:	bf14      	ite	ne
 801422a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 801422e:	4618      	moveq	r0, r3
 8014230:	4281      	cmp	r1, r0
 8014232:	ddef      	ble.n	8014214 <validate_structure+0xe8>
 8014234:	3201      	adds	r2, #1
 8014236:	1a09      	subs	r1, r1, r0
 8014238:	2a0c      	cmp	r2, #12
 801423a:	60e1      	str	r1, [r4, #12]
 801423c:	6122      	str	r2, [r4, #16]
 801423e:	d1f0      	bne.n	8014222 <validate_structure+0xf6>
 8014240:	6963      	ldr	r3, [r4, #20]
 8014242:	2100      	movs	r1, #0
 8014244:	1c5a      	adds	r2, r3, #1
 8014246:	6121      	str	r1, [r4, #16]
 8014248:	0791      	lsls	r1, r2, #30
 801424a:	6162      	str	r2, [r4, #20]
 801424c:	d13c      	bne.n	80142c8 <validate_structure+0x19c>
 801424e:	2164      	movs	r1, #100	@ 0x64
 8014250:	fb92 f0f1 	sdiv	r0, r2, r1
 8014254:	fb01 2210 	mls	r2, r1, r0, r2
 8014258:	2a00      	cmp	r2, #0
 801425a:	d137      	bne.n	80142cc <validate_structure+0x1a0>
 801425c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8014260:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014264:	fb93 f1f2 	sdiv	r1, r3, r2
 8014268:	fb02 3311 	mls	r3, r2, r1, r3
 801426c:	2b00      	cmp	r3, #0
 801426e:	bf14      	ite	ne
 8014270:	231c      	movne	r3, #28
 8014272:	231d      	moveq	r3, #29
 8014274:	e7d5      	b.n	8014222 <validate_structure+0xf6>
 8014276:	6922      	ldr	r2, [r4, #16]
 8014278:	3a01      	subs	r2, #1
 801427a:	6122      	str	r2, [r4, #16]
 801427c:	3201      	adds	r2, #1
 801427e:	d116      	bne.n	80142ae <validate_structure+0x182>
 8014280:	6963      	ldr	r3, [r4, #20]
 8014282:	1e5a      	subs	r2, r3, #1
 8014284:	0797      	lsls	r7, r2, #30
 8014286:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801428a:	d119      	bne.n	80142c0 <validate_structure+0x194>
 801428c:	fb92 f7f1 	sdiv	r7, r2, r1
 8014290:	fb01 2217 	mls	r2, r1, r7, r2
 8014294:	b9b2      	cbnz	r2, 80142c4 <validate_structure+0x198>
 8014296:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801429a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801429e:	fb93 f7f2 	sdiv	r7, r3, r2
 80142a2:	fb02 3317 	mls	r3, r2, r7, r3
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	bf14      	ite	ne
 80142aa:	231c      	movne	r3, #28
 80142ac:	231d      	moveq	r3, #29
 80142ae:	6922      	ldr	r2, [r4, #16]
 80142b0:	2a01      	cmp	r2, #1
 80142b2:	bf14      	ite	ne
 80142b4:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 80142b8:	461a      	moveq	r2, r3
 80142ba:	4432      	add	r2, r6
 80142bc:	60e2      	str	r2, [r4, #12]
 80142be:	e7a6      	b.n	801420e <validate_structure+0xe2>
 80142c0:	231c      	movs	r3, #28
 80142c2:	e7f4      	b.n	80142ae <validate_structure+0x182>
 80142c4:	231d      	movs	r3, #29
 80142c6:	e7f2      	b.n	80142ae <validate_structure+0x182>
 80142c8:	231c      	movs	r3, #28
 80142ca:	e7aa      	b.n	8014222 <validate_structure+0xf6>
 80142cc:	231d      	movs	r3, #29
 80142ce:	e7a8      	b.n	8014222 <validate_structure+0xf6>
 80142d0:	08019150 	.word	0x08019150

080142d4 <mktime>:
 80142d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d8:	b085      	sub	sp, #20
 80142da:	4607      	mov	r7, r0
 80142dc:	f002 fb40 	bl	8016960 <__gettzinfo>
 80142e0:	4681      	mov	r9, r0
 80142e2:	4638      	mov	r0, r7
 80142e4:	f7ff ff22 	bl	801412c <validate_structure>
 80142e8:	e9d7 4300 	ldrd	r4, r3, [r7]
 80142ec:	223c      	movs	r2, #60	@ 0x3c
 80142ee:	fb02 4403 	mla	r4, r2, r3, r4
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	697d      	ldr	r5, [r7, #20]
 80142f6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80142fa:	fb02 4403 	mla	r4, r2, r3, r4
 80142fe:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8014302:	4ac1      	ldr	r2, [pc, #772]	@ (8014608 <mktime+0x334>)
 8014304:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014308:	3e01      	subs	r6, #1
 801430a:	2b01      	cmp	r3, #1
 801430c:	4416      	add	r6, r2
 801430e:	dd11      	ble.n	8014334 <mktime+0x60>
 8014310:	07a9      	lsls	r1, r5, #30
 8014312:	d10f      	bne.n	8014334 <mktime+0x60>
 8014314:	2264      	movs	r2, #100	@ 0x64
 8014316:	fb95 f3f2 	sdiv	r3, r5, r2
 801431a:	fb02 5313 	mls	r3, r2, r3, r5
 801431e:	b943      	cbnz	r3, 8014332 <mktime+0x5e>
 8014320:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8014324:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014328:	fb93 f1f2 	sdiv	r1, r3, r2
 801432c:	fb02 3311 	mls	r3, r2, r1, r3
 8014330:	b903      	cbnz	r3, 8014334 <mktime+0x60>
 8014332:	3601      	adds	r6, #1
 8014334:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8014338:	3310      	adds	r3, #16
 801433a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801433e:	4293      	cmp	r3, r2
 8014340:	61fe      	str	r6, [r7, #28]
 8014342:	f200 8167 	bhi.w	8014614 <mktime+0x340>
 8014346:	2d46      	cmp	r5, #70	@ 0x46
 8014348:	f340 808e 	ble.w	8014468 <mktime+0x194>
 801434c:	2346      	movs	r3, #70	@ 0x46
 801434e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8014352:	2164      	movs	r1, #100	@ 0x64
 8014354:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8014358:	079a      	lsls	r2, r3, #30
 801435a:	d17f      	bne.n	801445c <mktime+0x188>
 801435c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014360:	fb01 3212 	mls	r2, r1, r2, r3
 8014364:	2a00      	cmp	r2, #0
 8014366:	d17c      	bne.n	8014462 <mktime+0x18e>
 8014368:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801436c:	fb92 fef0 	sdiv	lr, r2, r0
 8014370:	fb00 221e 	mls	r2, r0, lr, r2
 8014374:	2a00      	cmp	r2, #0
 8014376:	bf14      	ite	ne
 8014378:	4662      	movne	r2, ip
 801437a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801437e:	3301      	adds	r3, #1
 8014380:	429d      	cmp	r5, r3
 8014382:	4416      	add	r6, r2
 8014384:	d1e8      	bne.n	8014358 <mktime+0x84>
 8014386:	4ba1      	ldr	r3, [pc, #644]	@ (801460c <mktime+0x338>)
 8014388:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801438c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8014390:	f000 f9fa 	bl	8014788 <__tz_lock>
 8014394:	f000 fa04 	bl	80147a0 <_tzset_unlocked>
 8014398:	4b9d      	ldr	r3, [pc, #628]	@ (8014610 <mktime+0x33c>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b00      	cmp	r3, #0
 801439e:	f000 8140 	beq.w	8014622 <mktime+0x34e>
 80143a2:	f8d7 a020 	ldr.w	sl, [r7, #32]
 80143a6:	6978      	ldr	r0, [r7, #20]
 80143a8:	4653      	mov	r3, sl
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	bfa8      	it	ge
 80143ae:	2301      	movge	r3, #1
 80143b0:	9301      	str	r3, [sp, #4]
 80143b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80143b6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80143ba:	4283      	cmp	r3, r0
 80143bc:	f040 8096 	bne.w	80144ec <mktime+0x218>
 80143c0:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80143c4:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 80143c8:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 80143cc:	1a13      	subs	r3, r2, r0
 80143ce:	9303      	str	r3, [sp, #12]
 80143d0:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 80143d4:	9302      	str	r3, [sp, #8]
 80143d6:	9a02      	ldr	r2, [sp, #8]
 80143d8:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80143dc:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 80143e0:	ebb2 0e03 	subs.w	lr, r2, r3
 80143e4:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 80143e8:	4574      	cmp	r4, lr
 80143ea:	eb78 0201 	sbcs.w	r2, r8, r1
 80143ee:	f280 8085 	bge.w	80144fc <mktime+0x228>
 80143f2:	f8d9 2000 	ldr.w	r2, [r9]
 80143f6:	2a00      	cmp	r2, #0
 80143f8:	f000 808d 	beq.w	8014516 <mktime+0x242>
 80143fc:	9a03      	ldr	r2, [sp, #12]
 80143fe:	4294      	cmp	r4, r2
 8014400:	eb78 020b 	sbcs.w	r2, r8, fp
 8014404:	f2c0 810a 	blt.w	801461c <mktime+0x348>
 8014408:	4574      	cmp	r4, lr
 801440a:	eb78 0101 	sbcs.w	r1, r8, r1
 801440e:	bfb4      	ite	lt
 8014410:	f04f 0b01 	movlt.w	fp, #1
 8014414:	f04f 0b00 	movge.w	fp, #0
 8014418:	f1ba 0f00 	cmp.w	sl, #0
 801441c:	f280 8087 	bge.w	801452e <mktime+0x25a>
 8014420:	f1bb 0f01 	cmp.w	fp, #1
 8014424:	f040 80ff 	bne.w	8014626 <mktime+0x352>
 8014428:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801442c:	191c      	adds	r4, r3, r4
 801442e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014432:	f04f 0b01 	mov.w	fp, #1
 8014436:	f000 f9ad 	bl	8014794 <__tz_unlock>
 801443a:	3604      	adds	r6, #4
 801443c:	2307      	movs	r3, #7
 801443e:	fb96 f3f3 	sdiv	r3, r6, r3
 8014442:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014446:	1af6      	subs	r6, r6, r3
 8014448:	f100 80db 	bmi.w	8014602 <mktime+0x32e>
 801444c:	f8c7 b020 	str.w	fp, [r7, #32]
 8014450:	61be      	str	r6, [r7, #24]
 8014452:	4620      	mov	r0, r4
 8014454:	4641      	mov	r1, r8
 8014456:	b005      	add	sp, #20
 8014458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014460:	e78d      	b.n	801437e <mktime+0xaa>
 8014462:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8014466:	e78a      	b.n	801437e <mktime+0xaa>
 8014468:	d08d      	beq.n	8014386 <mktime+0xb2>
 801446a:	2345      	movs	r3, #69	@ 0x45
 801446c:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8014470:	2164      	movs	r1, #100	@ 0x64
 8014472:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8014476:	e012      	b.n	801449e <mktime+0x1ca>
 8014478:	bb62      	cbnz	r2, 80144d4 <mktime+0x200>
 801447a:	fb93 f2f1 	sdiv	r2, r3, r1
 801447e:	fb01 3212 	mls	r2, r1, r2, r3
 8014482:	bb52      	cbnz	r2, 80144da <mktime+0x206>
 8014484:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8014488:	fb92 fef0 	sdiv	lr, r2, r0
 801448c:	fb00 221e 	mls	r2, r0, lr, r2
 8014490:	2a00      	cmp	r2, #0
 8014492:	bf14      	ite	ne
 8014494:	4662      	movne	r2, ip
 8014496:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801449a:	1ab6      	subs	r6, r6, r2
 801449c:	3b01      	subs	r3, #1
 801449e:	429d      	cmp	r5, r3
 80144a0:	f003 0203 	and.w	r2, r3, #3
 80144a4:	dbe8      	blt.n	8014478 <mktime+0x1a4>
 80144a6:	b9da      	cbnz	r2, 80144e0 <mktime+0x20c>
 80144a8:	2264      	movs	r2, #100	@ 0x64
 80144aa:	fb95 f3f2 	sdiv	r3, r5, r2
 80144ae:	fb02 5313 	mls	r3, r2, r3, r5
 80144b2:	b9c3      	cbnz	r3, 80144e6 <mktime+0x212>
 80144b4:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80144b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80144bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80144c0:	fb02 3311 	mls	r3, r2, r1, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f240 136d 	movw	r3, #365	@ 0x16d
 80144ca:	bf08      	it	eq
 80144cc:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 80144d0:	1af6      	subs	r6, r6, r3
 80144d2:	e758      	b.n	8014386 <mktime+0xb2>
 80144d4:	f240 126d 	movw	r2, #365	@ 0x16d
 80144d8:	e7df      	b.n	801449a <mktime+0x1c6>
 80144da:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80144de:	e7dc      	b.n	801449a <mktime+0x1c6>
 80144e0:	f240 136d 	movw	r3, #365	@ 0x16d
 80144e4:	e7f4      	b.n	80144d0 <mktime+0x1fc>
 80144e6:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80144ea:	e7f1      	b.n	80144d0 <mktime+0x1fc>
 80144ec:	f000 f8a2 	bl	8014634 <__tzcalc_limits>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	f47f af65 	bne.w	80143c0 <mktime+0xec>
 80144f6:	f8dd b004 	ldr.w	fp, [sp, #4]
 80144fa:	e791      	b.n	8014420 <mktime+0x14c>
 80144fc:	9a02      	ldr	r2, [sp, #8]
 80144fe:	1a12      	subs	r2, r2, r0
 8014500:	9202      	str	r2, [sp, #8]
 8014502:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8014506:	eb6c 0c02 	sbc.w	ip, ip, r2
 801450a:	9a02      	ldr	r2, [sp, #8]
 801450c:	4294      	cmp	r4, r2
 801450e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8014512:	dbf0      	blt.n	80144f6 <mktime+0x222>
 8014514:	e76d      	b.n	80143f2 <mktime+0x11e>
 8014516:	9a03      	ldr	r2, [sp, #12]
 8014518:	4294      	cmp	r4, r2
 801451a:	eb78 020b 	sbcs.w	r2, r8, fp
 801451e:	f6ff af73 	blt.w	8014408 <mktime+0x134>
 8014522:	f1ba 0f00 	cmp.w	sl, #0
 8014526:	f6ff af7f 	blt.w	8014428 <mktime+0x154>
 801452a:	f04f 0b01 	mov.w	fp, #1
 801452e:	9a01      	ldr	r2, [sp, #4]
 8014530:	ea82 020b 	eor.w	r2, r2, fp
 8014534:	2a01      	cmp	r2, #1
 8014536:	f47f af73 	bne.w	8014420 <mktime+0x14c>
 801453a:	f1bb 0f00 	cmp.w	fp, #0
 801453e:	d035      	beq.n	80145ac <mktime+0x2d8>
 8014540:	1a1b      	subs	r3, r3, r0
 8014542:	683a      	ldr	r2, [r7, #0]
 8014544:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014548:	441a      	add	r2, r3
 801454a:	191c      	adds	r4, r3, r4
 801454c:	603a      	str	r2, [r7, #0]
 801454e:	4638      	mov	r0, r7
 8014550:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014554:	f7ff fdea 	bl	801412c <validate_structure>
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	ebb2 020a 	subs.w	r2, r2, sl
 801455e:	f43f af5f 	beq.w	8014420 <mktime+0x14c>
 8014562:	2a01      	cmp	r2, #1
 8014564:	dc24      	bgt.n	80145b0 <mktime+0x2dc>
 8014566:	1c93      	adds	r3, r2, #2
 8014568:	bfd8      	it	le
 801456a:	2201      	movle	r2, #1
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	18d3      	adds	r3, r2, r3
 8014570:	d527      	bpl.n	80145c2 <mktime+0x2ee>
 8014572:	1e6b      	subs	r3, r5, #1
 8014574:	0798      	lsls	r0, r3, #30
 8014576:	d11e      	bne.n	80145b6 <mktime+0x2e2>
 8014578:	2164      	movs	r1, #100	@ 0x64
 801457a:	fb93 f0f1 	sdiv	r0, r3, r1
 801457e:	fb01 3310 	mls	r3, r1, r0, r3
 8014582:	b9db      	cbnz	r3, 80145bc <mktime+0x2e8>
 8014584:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014588:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 801458c:	fb95 f1f3 	sdiv	r1, r5, r3
 8014590:	fb03 5511 	mls	r5, r3, r1, r5
 8014594:	2d00      	cmp	r5, #0
 8014596:	f240 136d 	movw	r3, #365	@ 0x16d
 801459a:	bf18      	it	ne
 801459c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 80145a0:	61fb      	str	r3, [r7, #28]
 80145a2:	4416      	add	r6, r2
 80145a4:	e73c      	b.n	8014420 <mktime+0x14c>
 80145a6:	f04f 0b00 	mov.w	fp, #0
 80145aa:	e7c0      	b.n	801452e <mktime+0x25a>
 80145ac:	1ac3      	subs	r3, r0, r3
 80145ae:	e7c8      	b.n	8014542 <mktime+0x26e>
 80145b0:	f04f 32ff 	mov.w	r2, #4294967295
 80145b4:	e7da      	b.n	801456c <mktime+0x298>
 80145b6:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80145ba:	e7f1      	b.n	80145a0 <mktime+0x2cc>
 80145bc:	f240 136d 	movw	r3, #365	@ 0x16d
 80145c0:	e7ee      	b.n	80145a0 <mktime+0x2cc>
 80145c2:	07a9      	lsls	r1, r5, #30
 80145c4:	d117      	bne.n	80145f6 <mktime+0x322>
 80145c6:	2064      	movs	r0, #100	@ 0x64
 80145c8:	fb95 f1f0 	sdiv	r1, r5, r0
 80145cc:	fb00 5111 	mls	r1, r0, r1, r5
 80145d0:	b9a1      	cbnz	r1, 80145fc <mktime+0x328>
 80145d2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80145d6:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80145da:	fb95 f0f1 	sdiv	r0, r5, r1
 80145de:	fb01 5510 	mls	r5, r1, r0, r5
 80145e2:	2d00      	cmp	r5, #0
 80145e4:	f240 116d 	movw	r1, #365	@ 0x16d
 80145e8:	bf08      	it	eq
 80145ea:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 80145ee:	428b      	cmp	r3, r1
 80145f0:	bfa8      	it	ge
 80145f2:	1a5b      	subge	r3, r3, r1
 80145f4:	e7d4      	b.n	80145a0 <mktime+0x2cc>
 80145f6:	f240 116d 	movw	r1, #365	@ 0x16d
 80145fa:	e7f8      	b.n	80145ee <mktime+0x31a>
 80145fc:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8014600:	e7f5      	b.n	80145ee <mktime+0x31a>
 8014602:	3607      	adds	r6, #7
 8014604:	e722      	b.n	801444c <mktime+0x178>
 8014606:	bf00      	nop
 8014608:	08019120 	.word	0x08019120
 801460c:	00015180 	.word	0x00015180
 8014610:	2000a8dc 	.word	0x2000a8dc
 8014614:	f04f 34ff 	mov.w	r4, #4294967295
 8014618:	46a0      	mov	r8, r4
 801461a:	e71a      	b.n	8014452 <mktime+0x17e>
 801461c:	f1ba 0f00 	cmp.w	sl, #0
 8014620:	dac1      	bge.n	80145a6 <mktime+0x2d2>
 8014622:	f04f 0b00 	mov.w	fp, #0
 8014626:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801462a:	191c      	adds	r4, r3, r4
 801462c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014630:	e701      	b.n	8014436 <mktime+0x162>
 8014632:	bf00      	nop

08014634 <__tzcalc_limits>:
 8014634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014638:	4604      	mov	r4, r0
 801463a:	f002 f991 	bl	8016960 <__gettzinfo>
 801463e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8014642:	429c      	cmp	r4, r3
 8014644:	f340 8099 	ble.w	801477a <__tzcalc_limits+0x146>
 8014648:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 801464c:	19e5      	adds	r5, r4, r7
 801464e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8014652:	f240 126d 	movw	r2, #365	@ 0x16d
 8014656:	10ad      	asrs	r5, r5, #2
 8014658:	fb02 5503 	mla	r5, r2, r3, r5
 801465c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8014660:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8014664:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8014668:	4f45      	ldr	r7, [pc, #276]	@ (8014780 <__tzcalc_limits+0x14c>)
 801466a:	fb93 f3f2 	sdiv	r3, r3, r2
 801466e:	441d      	add	r5, r3
 8014670:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014674:	eb04 030c 	add.w	r3, r4, ip
 8014678:	6044      	str	r4, [r0, #4]
 801467a:	fbb3 f3f2 	udiv	r3, r3, r2
 801467e:	4601      	mov	r1, r0
 8014680:	441d      	add	r5, r3
 8014682:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8014686:	7a0b      	ldrb	r3, [r1, #8]
 8014688:	694a      	ldr	r2, [r1, #20]
 801468a:	2b4a      	cmp	r3, #74	@ 0x4a
 801468c:	d133      	bne.n	80146f6 <__tzcalc_limits+0xc2>
 801468e:	07a6      	lsls	r6, r4, #30
 8014690:	eb05 0302 	add.w	r3, r5, r2
 8014694:	d106      	bne.n	80146a4 <__tzcalc_limits+0x70>
 8014696:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801469a:	fb94 f6fe 	sdiv	r6, r4, lr
 801469e:	fb0e 4616 	mls	r6, lr, r6, r4
 80146a2:	b936      	cbnz	r6, 80146b2 <__tzcalc_limits+0x7e>
 80146a4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80146a8:	fb94 f6fe 	sdiv	r6, r4, lr
 80146ac:	fb0e 4616 	mls	r6, lr, r6, r4
 80146b0:	b9fe      	cbnz	r6, 80146f2 <__tzcalc_limits+0xbe>
 80146b2:	2a3b      	cmp	r2, #59	@ 0x3b
 80146b4:	bfd4      	ite	le
 80146b6:	2200      	movle	r2, #0
 80146b8:	2201      	movgt	r2, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	3b01      	subs	r3, #1
 80146be:	698a      	ldr	r2, [r1, #24]
 80146c0:	17d6      	asrs	r6, r2, #31
 80146c2:	fbc3 2607 	smlal	r2, r6, r3, r7
 80146c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80146c8:	18d2      	adds	r2, r2, r3
 80146ca:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 80146ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80146d2:	3128      	adds	r1, #40	@ 0x28
 80146d4:	458c      	cmp	ip, r1
 80146d6:	d1d6      	bne.n	8014686 <__tzcalc_limits+0x52>
 80146d8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80146dc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80146e0:	428c      	cmp	r4, r1
 80146e2:	4193      	sbcs	r3, r2
 80146e4:	bfb4      	ite	lt
 80146e6:	2301      	movlt	r3, #1
 80146e8:	2300      	movge	r3, #0
 80146ea:	6003      	str	r3, [r0, #0]
 80146ec:	2001      	movs	r0, #1
 80146ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146f2:	2200      	movs	r2, #0
 80146f4:	e7e1      	b.n	80146ba <__tzcalc_limits+0x86>
 80146f6:	2b44      	cmp	r3, #68	@ 0x44
 80146f8:	d101      	bne.n	80146fe <__tzcalc_limits+0xca>
 80146fa:	18ab      	adds	r3, r5, r2
 80146fc:	e7df      	b.n	80146be <__tzcalc_limits+0x8a>
 80146fe:	07a3      	lsls	r3, r4, #30
 8014700:	d105      	bne.n	801470e <__tzcalc_limits+0xda>
 8014702:	2664      	movs	r6, #100	@ 0x64
 8014704:	fb94 f3f6 	sdiv	r3, r4, r6
 8014708:	fb06 4313 	mls	r3, r6, r3, r4
 801470c:	bb7b      	cbnz	r3, 801476e <__tzcalc_limits+0x13a>
 801470e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014712:	fb94 f6f3 	sdiv	r6, r4, r3
 8014716:	fb03 4616 	mls	r6, r3, r6, r4
 801471a:	fab6 f686 	clz	r6, r6
 801471e:	0976      	lsrs	r6, r6, #5
 8014720:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8014784 <__tzcalc_limits+0x150>
 8014724:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8014728:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 801472c:	462b      	mov	r3, r5
 801472e:	f04f 0800 	mov.w	r8, #0
 8014732:	fb0a e606 	mla	r6, sl, r6, lr
 8014736:	f108 0801 	add.w	r8, r8, #1
 801473a:	45c1      	cmp	r9, r8
 801473c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8014740:	dc17      	bgt.n	8014772 <__tzcalc_limits+0x13e>
 8014742:	f103 0804 	add.w	r8, r3, #4
 8014746:	2607      	movs	r6, #7
 8014748:	fb98 f6f6 	sdiv	r6, r8, r6
 801474c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8014750:	eba8 0606 	sub.w	r6, r8, r6
 8014754:	1b92      	subs	r2, r2, r6
 8014756:	690e      	ldr	r6, [r1, #16]
 8014758:	f106 36ff 	add.w	r6, r6, #4294967295
 801475c:	bf48      	it	mi
 801475e:	3207      	addmi	r2, #7
 8014760:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8014764:	4432      	add	r2, r6
 8014766:	4572      	cmp	r2, lr
 8014768:	da05      	bge.n	8014776 <__tzcalc_limits+0x142>
 801476a:	4413      	add	r3, r2
 801476c:	e7a7      	b.n	80146be <__tzcalc_limits+0x8a>
 801476e:	2601      	movs	r6, #1
 8014770:	e7d6      	b.n	8014720 <__tzcalc_limits+0xec>
 8014772:	4473      	add	r3, lr
 8014774:	e7df      	b.n	8014736 <__tzcalc_limits+0x102>
 8014776:	3a07      	subs	r2, #7
 8014778:	e7f5      	b.n	8014766 <__tzcalc_limits+0x132>
 801477a:	2000      	movs	r0, #0
 801477c:	e7b7      	b.n	80146ee <__tzcalc_limits+0xba>
 801477e:	bf00      	nop
 8014780:	00015180 	.word	0x00015180
 8014784:	0801917c 	.word	0x0801917c

08014788 <__tz_lock>:
 8014788:	4801      	ldr	r0, [pc, #4]	@ (8014790 <__tz_lock+0x8>)
 801478a:	f000 baa6 	b.w	8014cda <__retarget_lock_acquire>
 801478e:	bf00      	nop
 8014790:	2000a8e4 	.word	0x2000a8e4

08014794 <__tz_unlock>:
 8014794:	4801      	ldr	r0, [pc, #4]	@ (801479c <__tz_unlock+0x8>)
 8014796:	f000 baa2 	b.w	8014cde <__retarget_lock_release>
 801479a:	bf00      	nop
 801479c:	2000a8e4 	.word	0x2000a8e4

080147a0 <_tzset_unlocked>:
 80147a0:	4b01      	ldr	r3, [pc, #4]	@ (80147a8 <_tzset_unlocked+0x8>)
 80147a2:	6818      	ldr	r0, [r3, #0]
 80147a4:	f000 b802 	b.w	80147ac <_tzset_unlocked_r>
 80147a8:	20000034 	.word	0x20000034

080147ac <_tzset_unlocked_r>:
 80147ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b0:	b08d      	sub	sp, #52	@ 0x34
 80147b2:	4607      	mov	r7, r0
 80147b4:	f002 f8d4 	bl	8016960 <__gettzinfo>
 80147b8:	49bc      	ldr	r1, [pc, #752]	@ (8014aac <_tzset_unlocked_r+0x300>)
 80147ba:	4dbd      	ldr	r5, [pc, #756]	@ (8014ab0 <_tzset_unlocked_r+0x304>)
 80147bc:	4604      	mov	r4, r0
 80147be:	4638      	mov	r0, r7
 80147c0:	f001 f9a0 	bl	8015b04 <_getenv_r>
 80147c4:	4606      	mov	r6, r0
 80147c6:	bb10      	cbnz	r0, 801480e <_tzset_unlocked_r+0x62>
 80147c8:	4bba      	ldr	r3, [pc, #744]	@ (8014ab4 <_tzset_unlocked_r+0x308>)
 80147ca:	4abb      	ldr	r2, [pc, #748]	@ (8014ab8 <_tzset_unlocked_r+0x30c>)
 80147cc:	6018      	str	r0, [r3, #0]
 80147ce:	4bbb      	ldr	r3, [pc, #748]	@ (8014abc <_tzset_unlocked_r+0x310>)
 80147d0:	62a0      	str	r0, [r4, #40]	@ 0x28
 80147d2:	6018      	str	r0, [r3, #0]
 80147d4:	4bba      	ldr	r3, [pc, #744]	@ (8014ac0 <_tzset_unlocked_r+0x314>)
 80147d6:	6520      	str	r0, [r4, #80]	@ 0x50
 80147d8:	e9c3 2200 	strd	r2, r2, [r3]
 80147dc:	214a      	movs	r1, #74	@ 0x4a
 80147de:	2200      	movs	r2, #0
 80147e0:	2300      	movs	r3, #0
 80147e2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80147e6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80147ea:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80147ee:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80147f2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80147f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80147fa:	6828      	ldr	r0, [r5, #0]
 80147fc:	7221      	strb	r1, [r4, #8]
 80147fe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8014802:	f001 f98f 	bl	8015b24 <free>
 8014806:	602e      	str	r6, [r5, #0]
 8014808:	b00d      	add	sp, #52	@ 0x34
 801480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801480e:	6829      	ldr	r1, [r5, #0]
 8014810:	2900      	cmp	r1, #0
 8014812:	f040 808e 	bne.w	8014932 <_tzset_unlocked_r+0x186>
 8014816:	6828      	ldr	r0, [r5, #0]
 8014818:	f001 f984 	bl	8015b24 <free>
 801481c:	4630      	mov	r0, r6
 801481e:	f7eb fd0f 	bl	8000240 <strlen>
 8014822:	1c41      	adds	r1, r0, #1
 8014824:	4638      	mov	r0, r7
 8014826:	f001 f9a7 	bl	8015b78 <_malloc_r>
 801482a:	6028      	str	r0, [r5, #0]
 801482c:	2800      	cmp	r0, #0
 801482e:	f040 8086 	bne.w	801493e <_tzset_unlocked_r+0x192>
 8014832:	4aa2      	ldr	r2, [pc, #648]	@ (8014abc <_tzset_unlocked_r+0x310>)
 8014834:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8014ac0 <_tzset_unlocked_r+0x314>
 8014838:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8014ab4 <_tzset_unlocked_r+0x308>
 801483c:	2300      	movs	r3, #0
 801483e:	6013      	str	r3, [r2, #0]
 8014840:	4aa0      	ldr	r2, [pc, #640]	@ (8014ac4 <_tzset_unlocked_r+0x318>)
 8014842:	f8ca 3000 	str.w	r3, [sl]
 8014846:	2000      	movs	r0, #0
 8014848:	2100      	movs	r1, #0
 801484a:	e9c8 2200 	strd	r2, r2, [r8]
 801484e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8014852:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8014856:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801485a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801485e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8014862:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8014866:	224a      	movs	r2, #74	@ 0x4a
 8014868:	7222      	strb	r2, [r4, #8]
 801486a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801486c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8014870:	6523      	str	r3, [r4, #80]	@ 0x50
 8014872:	7833      	ldrb	r3, [r6, #0]
 8014874:	2b3a      	cmp	r3, #58	@ 0x3a
 8014876:	bf08      	it	eq
 8014878:	3601      	addeq	r6, #1
 801487a:	7833      	ldrb	r3, [r6, #0]
 801487c:	2b3c      	cmp	r3, #60	@ 0x3c
 801487e:	d162      	bne.n	8014946 <_tzset_unlocked_r+0x19a>
 8014880:	1c75      	adds	r5, r6, #1
 8014882:	4a91      	ldr	r2, [pc, #580]	@ (8014ac8 <_tzset_unlocked_r+0x31c>)
 8014884:	4991      	ldr	r1, [pc, #580]	@ (8014acc <_tzset_unlocked_r+0x320>)
 8014886:	ab0a      	add	r3, sp, #40	@ 0x28
 8014888:	4628      	mov	r0, r5
 801488a:	f002 f813 	bl	80168b4 <siscanf>
 801488e:	2800      	cmp	r0, #0
 8014890:	ddba      	ble.n	8014808 <_tzset_unlocked_r+0x5c>
 8014892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014894:	1eda      	subs	r2, r3, #3
 8014896:	2a07      	cmp	r2, #7
 8014898:	d8b6      	bhi.n	8014808 <_tzset_unlocked_r+0x5c>
 801489a:	5ceb      	ldrb	r3, [r5, r3]
 801489c:	2b3e      	cmp	r3, #62	@ 0x3e
 801489e:	d1b3      	bne.n	8014808 <_tzset_unlocked_r+0x5c>
 80148a0:	3602      	adds	r6, #2
 80148a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148a4:	18f5      	adds	r5, r6, r3
 80148a6:	5cf3      	ldrb	r3, [r6, r3]
 80148a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80148aa:	d15a      	bne.n	8014962 <_tzset_unlocked_r+0x1b6>
 80148ac:	3501      	adds	r5, #1
 80148ae:	f04f 39ff 	mov.w	r9, #4294967295
 80148b2:	2300      	movs	r3, #0
 80148b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80148b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80148bc:	af08      	add	r7, sp, #32
 80148be:	ab0a      	add	r3, sp, #40	@ 0x28
 80148c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80148c4:	9303      	str	r3, [sp, #12]
 80148c6:	f10d 031e 	add.w	r3, sp, #30
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	4980      	ldr	r1, [pc, #512]	@ (8014ad0 <_tzset_unlocked_r+0x324>)
 80148ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80148d0:	aa07      	add	r2, sp, #28
 80148d2:	4628      	mov	r0, r5
 80148d4:	f001 ffee 	bl	80168b4 <siscanf>
 80148d8:	2800      	cmp	r0, #0
 80148da:	dd95      	ble.n	8014808 <_tzset_unlocked_r+0x5c>
 80148dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80148e0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80148e4:	223c      	movs	r2, #60	@ 0x3c
 80148e6:	fb02 6603 	mla	r6, r2, r3, r6
 80148ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80148ee:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80148f2:	fb02 6603 	mla	r6, r2, r3, r6
 80148f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148f8:	fb09 f606 	mul.w	r6, r9, r6
 80148fc:	eb05 0903 	add.w	r9, r5, r3
 8014900:	5ceb      	ldrb	r3, [r5, r3]
 8014902:	2b3c      	cmp	r3, #60	@ 0x3c
 8014904:	f040 80ee 	bne.w	8014ae4 <_tzset_unlocked_r+0x338>
 8014908:	f109 0501 	add.w	r5, r9, #1
 801490c:	4a71      	ldr	r2, [pc, #452]	@ (8014ad4 <_tzset_unlocked_r+0x328>)
 801490e:	496f      	ldr	r1, [pc, #444]	@ (8014acc <_tzset_unlocked_r+0x320>)
 8014910:	ab0a      	add	r3, sp, #40	@ 0x28
 8014912:	4628      	mov	r0, r5
 8014914:	f001 ffce 	bl	80168b4 <siscanf>
 8014918:	2800      	cmp	r0, #0
 801491a:	dc28      	bgt.n	801496e <_tzset_unlocked_r+0x1c2>
 801491c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8014920:	2b3e      	cmp	r3, #62	@ 0x3e
 8014922:	d124      	bne.n	801496e <_tzset_unlocked_r+0x1c2>
 8014924:	4b68      	ldr	r3, [pc, #416]	@ (8014ac8 <_tzset_unlocked_r+0x31c>)
 8014926:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014928:	e9c8 3300 	strd	r3, r3, [r8]
 801492c:	f8ca 6000 	str.w	r6, [sl]
 8014930:	e76a      	b.n	8014808 <_tzset_unlocked_r+0x5c>
 8014932:	f7eb fc25 	bl	8000180 <strcmp>
 8014936:	2800      	cmp	r0, #0
 8014938:	f47f af6d 	bne.w	8014816 <_tzset_unlocked_r+0x6a>
 801493c:	e764      	b.n	8014808 <_tzset_unlocked_r+0x5c>
 801493e:	4631      	mov	r1, r6
 8014940:	f000 f9cf 	bl	8014ce2 <strcpy>
 8014944:	e775      	b.n	8014832 <_tzset_unlocked_r+0x86>
 8014946:	4a60      	ldr	r2, [pc, #384]	@ (8014ac8 <_tzset_unlocked_r+0x31c>)
 8014948:	4963      	ldr	r1, [pc, #396]	@ (8014ad8 <_tzset_unlocked_r+0x32c>)
 801494a:	ab0a      	add	r3, sp, #40	@ 0x28
 801494c:	4630      	mov	r0, r6
 801494e:	f001 ffb1 	bl	80168b4 <siscanf>
 8014952:	2800      	cmp	r0, #0
 8014954:	f77f af58 	ble.w	8014808 <_tzset_unlocked_r+0x5c>
 8014958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801495a:	3b03      	subs	r3, #3
 801495c:	2b07      	cmp	r3, #7
 801495e:	d9a0      	bls.n	80148a2 <_tzset_unlocked_r+0xf6>
 8014960:	e752      	b.n	8014808 <_tzset_unlocked_r+0x5c>
 8014962:	2b2b      	cmp	r3, #43	@ 0x2b
 8014964:	bf08      	it	eq
 8014966:	3501      	addeq	r5, #1
 8014968:	f04f 0901 	mov.w	r9, #1
 801496c:	e7a1      	b.n	80148b2 <_tzset_unlocked_r+0x106>
 801496e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014970:	1eda      	subs	r2, r3, #3
 8014972:	2a07      	cmp	r2, #7
 8014974:	f63f af48 	bhi.w	8014808 <_tzset_unlocked_r+0x5c>
 8014978:	5ceb      	ldrb	r3, [r5, r3]
 801497a:	2b3e      	cmp	r3, #62	@ 0x3e
 801497c:	f47f af44 	bne.w	8014808 <_tzset_unlocked_r+0x5c>
 8014980:	f109 0902 	add.w	r9, r9, #2
 8014984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014986:	eb09 0503 	add.w	r5, r9, r3
 801498a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801498e:	2b2d      	cmp	r3, #45	@ 0x2d
 8014990:	f040 80b7 	bne.w	8014b02 <_tzset_unlocked_r+0x356>
 8014994:	3501      	adds	r5, #1
 8014996:	f04f 39ff 	mov.w	r9, #4294967295
 801499a:	2300      	movs	r3, #0
 801499c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80149a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80149a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80149a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80149aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80149ac:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80149b0:	9301      	str	r3, [sp, #4]
 80149b2:	f10d 031e 	add.w	r3, sp, #30
 80149b6:	9300      	str	r3, [sp, #0]
 80149b8:	4945      	ldr	r1, [pc, #276]	@ (8014ad0 <_tzset_unlocked_r+0x324>)
 80149ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80149bc:	aa07      	add	r2, sp, #28
 80149be:	4628      	mov	r0, r5
 80149c0:	f001 ff78 	bl	80168b4 <siscanf>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	f300 80a2 	bgt.w	8014b0e <_tzset_unlocked_r+0x362>
 80149ca:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80149ce:	9304      	str	r3, [sp, #16]
 80149d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149d2:	4627      	mov	r7, r4
 80149d4:	441d      	add	r5, r3
 80149d6:	f04f 0b00 	mov.w	fp, #0
 80149da:	782b      	ldrb	r3, [r5, #0]
 80149dc:	2b2c      	cmp	r3, #44	@ 0x2c
 80149de:	bf08      	it	eq
 80149e0:	3501      	addeq	r5, #1
 80149e2:	f895 9000 	ldrb.w	r9, [r5]
 80149e6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80149ea:	f040 80a3 	bne.w	8014b34 <_tzset_unlocked_r+0x388>
 80149ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80149f0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80149f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80149f8:	aa09      	add	r2, sp, #36	@ 0x24
 80149fa:	9200      	str	r2, [sp, #0]
 80149fc:	4937      	ldr	r1, [pc, #220]	@ (8014adc <_tzset_unlocked_r+0x330>)
 80149fe:	9303      	str	r3, [sp, #12]
 8014a00:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8014a04:	4628      	mov	r0, r5
 8014a06:	f001 ff55 	bl	80168b4 <siscanf>
 8014a0a:	2803      	cmp	r0, #3
 8014a0c:	f47f aefc 	bne.w	8014808 <_tzset_unlocked_r+0x5c>
 8014a10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8014a14:	1e4b      	subs	r3, r1, #1
 8014a16:	2b0b      	cmp	r3, #11
 8014a18:	f63f aef6 	bhi.w	8014808 <_tzset_unlocked_r+0x5c>
 8014a1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8014a20:	1e53      	subs	r3, r2, #1
 8014a22:	2b04      	cmp	r3, #4
 8014a24:	f63f aef0 	bhi.w	8014808 <_tzset_unlocked_r+0x5c>
 8014a28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8014a2c:	2b06      	cmp	r3, #6
 8014a2e:	f63f aeeb 	bhi.w	8014808 <_tzset_unlocked_r+0x5c>
 8014a32:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8014a36:	f887 9008 	strb.w	r9, [r7, #8]
 8014a3a:	617b      	str	r3, [r7, #20]
 8014a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014a3e:	eb05 0903 	add.w	r9, r5, r3
 8014a42:	2500      	movs	r5, #0
 8014a44:	f04f 0302 	mov.w	r3, #2
 8014a48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a4c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8014a50:	f8ad 5020 	strh.w	r5, [sp, #32]
 8014a54:	950a      	str	r5, [sp, #40]	@ 0x28
 8014a56:	f899 3000 	ldrb.w	r3, [r9]
 8014a5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a5c:	f040 8096 	bne.w	8014b8c <_tzset_unlocked_r+0x3e0>
 8014a60:	ab0a      	add	r3, sp, #40	@ 0x28
 8014a62:	aa08      	add	r2, sp, #32
 8014a64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014a68:	f10d 021e 	add.w	r2, sp, #30
 8014a6c:	9200      	str	r2, [sp, #0]
 8014a6e:	491c      	ldr	r1, [pc, #112]	@ (8014ae0 <_tzset_unlocked_r+0x334>)
 8014a70:	9303      	str	r3, [sp, #12]
 8014a72:	aa07      	add	r2, sp, #28
 8014a74:	4648      	mov	r0, r9
 8014a76:	f001 ff1d 	bl	80168b4 <siscanf>
 8014a7a:	42a8      	cmp	r0, r5
 8014a7c:	f300 8086 	bgt.w	8014b8c <_tzset_unlocked_r+0x3e0>
 8014a80:	214a      	movs	r1, #74	@ 0x4a
 8014a82:	2200      	movs	r2, #0
 8014a84:	2300      	movs	r3, #0
 8014a86:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8014a8a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014a8e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014a92:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8014a96:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8014a9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8014a9e:	7221      	strb	r1, [r4, #8]
 8014aa0:	62a5      	str	r5, [r4, #40]	@ 0x28
 8014aa2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8014aa6:	6525      	str	r5, [r4, #80]	@ 0x50
 8014aa8:	e6ae      	b.n	8014808 <_tzset_unlocked_r+0x5c>
 8014aaa:	bf00      	nop
 8014aac:	080191e0 	.word	0x080191e0
 8014ab0:	2000a8bc 	.word	0x2000a8bc
 8014ab4:	2000a8d8 	.word	0x2000a8d8
 8014ab8:	080191e3 	.word	0x080191e3
 8014abc:	2000a8dc 	.word	0x2000a8dc
 8014ac0:	2000002c 	.word	0x2000002c
 8014ac4:	08019269 	.word	0x08019269
 8014ac8:	2000a8cc 	.word	0x2000a8cc
 8014acc:	080191e7 	.word	0x080191e7
 8014ad0:	0801921c 	.word	0x0801921c
 8014ad4:	2000a8c0 	.word	0x2000a8c0
 8014ad8:	080191fa 	.word	0x080191fa
 8014adc:	08019208 	.word	0x08019208
 8014ae0:	0801921b 	.word	0x0801921b
 8014ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8014be0 <_tzset_unlocked_r+0x434>)
 8014ae6:	493f      	ldr	r1, [pc, #252]	@ (8014be4 <_tzset_unlocked_r+0x438>)
 8014ae8:	ab0a      	add	r3, sp, #40	@ 0x28
 8014aea:	4648      	mov	r0, r9
 8014aec:	f001 fee2 	bl	80168b4 <siscanf>
 8014af0:	2800      	cmp	r0, #0
 8014af2:	f77f af17 	ble.w	8014924 <_tzset_unlocked_r+0x178>
 8014af6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014af8:	3b03      	subs	r3, #3
 8014afa:	2b07      	cmp	r3, #7
 8014afc:	f67f af42 	bls.w	8014984 <_tzset_unlocked_r+0x1d8>
 8014b00:	e682      	b.n	8014808 <_tzset_unlocked_r+0x5c>
 8014b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b04:	bf08      	it	eq
 8014b06:	3501      	addeq	r5, #1
 8014b08:	f04f 0901 	mov.w	r9, #1
 8014b0c:	e745      	b.n	801499a <_tzset_unlocked_r+0x1ee>
 8014b0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014b12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014b16:	213c      	movs	r1, #60	@ 0x3c
 8014b18:	fb01 3302 	mla	r3, r1, r2, r3
 8014b1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014b20:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8014b24:	fb01 3302 	mla	r3, r1, r2, r3
 8014b28:	fb09 f303 	mul.w	r3, r9, r3
 8014b2c:	e74f      	b.n	80149ce <_tzset_unlocked_r+0x222>
 8014b2e:	f04f 0b01 	mov.w	fp, #1
 8014b32:	e752      	b.n	80149da <_tzset_unlocked_r+0x22e>
 8014b34:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8014b38:	bf06      	itte	eq
 8014b3a:	3501      	addeq	r5, #1
 8014b3c:	464b      	moveq	r3, r9
 8014b3e:	2344      	movne	r3, #68	@ 0x44
 8014b40:	220a      	movs	r2, #10
 8014b42:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b44:	4628      	mov	r0, r5
 8014b46:	9305      	str	r3, [sp, #20]
 8014b48:	f001 fc94 	bl	8016474 <strtoul>
 8014b4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8014b50:	9b05      	ldr	r3, [sp, #20]
 8014b52:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8014b56:	45a9      	cmp	r9, r5
 8014b58:	d114      	bne.n	8014b84 <_tzset_unlocked_r+0x3d8>
 8014b5a:	234d      	movs	r3, #77	@ 0x4d
 8014b5c:	f1bb 0f00 	cmp.w	fp, #0
 8014b60:	d107      	bne.n	8014b72 <_tzset_unlocked_r+0x3c6>
 8014b62:	7223      	strb	r3, [r4, #8]
 8014b64:	2103      	movs	r1, #3
 8014b66:	2302      	movs	r3, #2
 8014b68:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8014b6c:	f8c4 b014 	str.w	fp, [r4, #20]
 8014b70:	e767      	b.n	8014a42 <_tzset_unlocked_r+0x296>
 8014b72:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8014b76:	220b      	movs	r2, #11
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8014b7e:	2300      	movs	r3, #0
 8014b80:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014b82:	e75e      	b.n	8014a42 <_tzset_unlocked_r+0x296>
 8014b84:	b280      	uxth	r0, r0
 8014b86:	723b      	strb	r3, [r7, #8]
 8014b88:	6178      	str	r0, [r7, #20]
 8014b8a:	e75a      	b.n	8014a42 <_tzset_unlocked_r+0x296>
 8014b8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014b90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014b94:	213c      	movs	r1, #60	@ 0x3c
 8014b96:	fb01 3302 	mla	r3, r1, r2, r3
 8014b9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014b9e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8014ba2:	fb01 3302 	mla	r3, r1, r2, r3
 8014ba6:	61bb      	str	r3, [r7, #24]
 8014ba8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014baa:	3728      	adds	r7, #40	@ 0x28
 8014bac:	444d      	add	r5, r9
 8014bae:	f1bb 0f00 	cmp.w	fp, #0
 8014bb2:	d0bc      	beq.n	8014b2e <_tzset_unlocked_r+0x382>
 8014bb4:	9b04      	ldr	r3, [sp, #16]
 8014bb6:	6523      	str	r3, [r4, #80]	@ 0x50
 8014bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8014be8 <_tzset_unlocked_r+0x43c>)
 8014bba:	f8c8 3000 	str.w	r3, [r8]
 8014bbe:	6860      	ldr	r0, [r4, #4]
 8014bc0:	4b07      	ldr	r3, [pc, #28]	@ (8014be0 <_tzset_unlocked_r+0x434>)
 8014bc2:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014bc4:	f8c8 3004 	str.w	r3, [r8, #4]
 8014bc8:	f7ff fd34 	bl	8014634 <__tzcalc_limits>
 8014bcc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014bce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014bd0:	f8ca 2000 	str.w	r2, [sl]
 8014bd4:	1a9b      	subs	r3, r3, r2
 8014bd6:	4a05      	ldr	r2, [pc, #20]	@ (8014bec <_tzset_unlocked_r+0x440>)
 8014bd8:	bf18      	it	ne
 8014bda:	2301      	movne	r3, #1
 8014bdc:	6013      	str	r3, [r2, #0]
 8014bde:	e613      	b.n	8014808 <_tzset_unlocked_r+0x5c>
 8014be0:	2000a8c0 	.word	0x2000a8c0
 8014be4:	080191fa 	.word	0x080191fa
 8014be8:	2000a8cc 	.word	0x2000a8cc
 8014bec:	2000a8dc 	.word	0x2000a8dc

08014bf0 <_localeconv_r>:
 8014bf0:	4800      	ldr	r0, [pc, #0]	@ (8014bf4 <_localeconv_r+0x4>)
 8014bf2:	4770      	bx	lr
 8014bf4:	200001d0 	.word	0x200001d0

08014bf8 <_close_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4d06      	ldr	r5, [pc, #24]	@ (8014c14 <_close_r+0x1c>)
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	4604      	mov	r4, r0
 8014c00:	4608      	mov	r0, r1
 8014c02:	602b      	str	r3, [r5, #0]
 8014c04:	f7f6 fb70 	bl	800b2e8 <_close>
 8014c08:	1c43      	adds	r3, r0, #1
 8014c0a:	d102      	bne.n	8014c12 <_close_r+0x1a>
 8014c0c:	682b      	ldr	r3, [r5, #0]
 8014c0e:	b103      	cbz	r3, 8014c12 <_close_r+0x1a>
 8014c10:	6023      	str	r3, [r4, #0]
 8014c12:	bd38      	pop	{r3, r4, r5, pc}
 8014c14:	2000a8e0 	.word	0x2000a8e0

08014c18 <_lseek_r>:
 8014c18:	b538      	push	{r3, r4, r5, lr}
 8014c1a:	4d07      	ldr	r5, [pc, #28]	@ (8014c38 <_lseek_r+0x20>)
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	4608      	mov	r0, r1
 8014c20:	4611      	mov	r1, r2
 8014c22:	2200      	movs	r2, #0
 8014c24:	602a      	str	r2, [r5, #0]
 8014c26:	461a      	mov	r2, r3
 8014c28:	f7f6 fb85 	bl	800b336 <_lseek>
 8014c2c:	1c43      	adds	r3, r0, #1
 8014c2e:	d102      	bne.n	8014c36 <_lseek_r+0x1e>
 8014c30:	682b      	ldr	r3, [r5, #0]
 8014c32:	b103      	cbz	r3, 8014c36 <_lseek_r+0x1e>
 8014c34:	6023      	str	r3, [r4, #0]
 8014c36:	bd38      	pop	{r3, r4, r5, pc}
 8014c38:	2000a8e0 	.word	0x2000a8e0

08014c3c <_read_r>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	4d07      	ldr	r5, [pc, #28]	@ (8014c5c <_read_r+0x20>)
 8014c40:	4604      	mov	r4, r0
 8014c42:	4608      	mov	r0, r1
 8014c44:	4611      	mov	r1, r2
 8014c46:	2200      	movs	r2, #0
 8014c48:	602a      	str	r2, [r5, #0]
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	f7f6 fb13 	bl	800b276 <_read>
 8014c50:	1c43      	adds	r3, r0, #1
 8014c52:	d102      	bne.n	8014c5a <_read_r+0x1e>
 8014c54:	682b      	ldr	r3, [r5, #0]
 8014c56:	b103      	cbz	r3, 8014c5a <_read_r+0x1e>
 8014c58:	6023      	str	r3, [r4, #0]
 8014c5a:	bd38      	pop	{r3, r4, r5, pc}
 8014c5c:	2000a8e0 	.word	0x2000a8e0

08014c60 <_write_r>:
 8014c60:	b538      	push	{r3, r4, r5, lr}
 8014c62:	4d07      	ldr	r5, [pc, #28]	@ (8014c80 <_write_r+0x20>)
 8014c64:	4604      	mov	r4, r0
 8014c66:	4608      	mov	r0, r1
 8014c68:	4611      	mov	r1, r2
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	602a      	str	r2, [r5, #0]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	f7f6 fb1e 	bl	800b2b0 <_write>
 8014c74:	1c43      	adds	r3, r0, #1
 8014c76:	d102      	bne.n	8014c7e <_write_r+0x1e>
 8014c78:	682b      	ldr	r3, [r5, #0]
 8014c7a:	b103      	cbz	r3, 8014c7e <_write_r+0x1e>
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	bd38      	pop	{r3, r4, r5, pc}
 8014c80:	2000a8e0 	.word	0x2000a8e0

08014c84 <__errno>:
 8014c84:	4b01      	ldr	r3, [pc, #4]	@ (8014c8c <__errno+0x8>)
 8014c86:	6818      	ldr	r0, [r3, #0]
 8014c88:	4770      	bx	lr
 8014c8a:	bf00      	nop
 8014c8c:	20000034 	.word	0x20000034

08014c90 <__libc_init_array>:
 8014c90:	b570      	push	{r4, r5, r6, lr}
 8014c92:	4d0d      	ldr	r5, [pc, #52]	@ (8014cc8 <__libc_init_array+0x38>)
 8014c94:	4c0d      	ldr	r4, [pc, #52]	@ (8014ccc <__libc_init_array+0x3c>)
 8014c96:	1b64      	subs	r4, r4, r5
 8014c98:	10a4      	asrs	r4, r4, #2
 8014c9a:	2600      	movs	r6, #0
 8014c9c:	42a6      	cmp	r6, r4
 8014c9e:	d109      	bne.n	8014cb4 <__libc_init_array+0x24>
 8014ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8014cd0 <__libc_init_array+0x40>)
 8014ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8014cd4 <__libc_init_array+0x44>)
 8014ca4:	f002 fe3c 	bl	8017920 <_init>
 8014ca8:	1b64      	subs	r4, r4, r5
 8014caa:	10a4      	asrs	r4, r4, #2
 8014cac:	2600      	movs	r6, #0
 8014cae:	42a6      	cmp	r6, r4
 8014cb0:	d105      	bne.n	8014cbe <__libc_init_array+0x2e>
 8014cb2:	bd70      	pop	{r4, r5, r6, pc}
 8014cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cb8:	4798      	blx	r3
 8014cba:	3601      	adds	r6, #1
 8014cbc:	e7ee      	b.n	8014c9c <__libc_init_array+0xc>
 8014cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cc2:	4798      	blx	r3
 8014cc4:	3601      	adds	r6, #1
 8014cc6:	e7f2      	b.n	8014cae <__libc_init_array+0x1e>
 8014cc8:	08019578 	.word	0x08019578
 8014ccc:	08019578 	.word	0x08019578
 8014cd0:	08019578 	.word	0x08019578
 8014cd4:	0801957c 	.word	0x0801957c

08014cd8 <__retarget_lock_init_recursive>:
 8014cd8:	4770      	bx	lr

08014cda <__retarget_lock_acquire>:
 8014cda:	4770      	bx	lr

08014cdc <__retarget_lock_acquire_recursive>:
 8014cdc:	4770      	bx	lr

08014cde <__retarget_lock_release>:
 8014cde:	4770      	bx	lr

08014ce0 <__retarget_lock_release_recursive>:
 8014ce0:	4770      	bx	lr

08014ce2 <strcpy>:
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ce8:	f803 2b01 	strb.w	r2, [r3], #1
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	d1f9      	bne.n	8014ce4 <strcpy+0x2>
 8014cf0:	4770      	bx	lr

08014cf2 <memcpy>:
 8014cf2:	440a      	add	r2, r1
 8014cf4:	4291      	cmp	r1, r2
 8014cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8014cfa:	d100      	bne.n	8014cfe <memcpy+0xc>
 8014cfc:	4770      	bx	lr
 8014cfe:	b510      	push	{r4, lr}
 8014d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d08:	4291      	cmp	r1, r2
 8014d0a:	d1f9      	bne.n	8014d00 <memcpy+0xe>
 8014d0c:	bd10      	pop	{r4, pc}
	...

08014d10 <__assert_func>:
 8014d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d12:	4614      	mov	r4, r2
 8014d14:	461a      	mov	r2, r3
 8014d16:	4b09      	ldr	r3, [pc, #36]	@ (8014d3c <__assert_func+0x2c>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4605      	mov	r5, r0
 8014d1c:	68d8      	ldr	r0, [r3, #12]
 8014d1e:	b954      	cbnz	r4, 8014d36 <__assert_func+0x26>
 8014d20:	4b07      	ldr	r3, [pc, #28]	@ (8014d40 <__assert_func+0x30>)
 8014d22:	461c      	mov	r4, r3
 8014d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d28:	9100      	str	r1, [sp, #0]
 8014d2a:	462b      	mov	r3, r5
 8014d2c:	4905      	ldr	r1, [pc, #20]	@ (8014d44 <__assert_func+0x34>)
 8014d2e:	f001 fdaf 	bl	8016890 <fiprintf>
 8014d32:	f001 fecf 	bl	8016ad4 <abort>
 8014d36:	4b04      	ldr	r3, [pc, #16]	@ (8014d48 <__assert_func+0x38>)
 8014d38:	e7f4      	b.n	8014d24 <__assert_func+0x14>
 8014d3a:	bf00      	nop
 8014d3c:	20000034 	.word	0x20000034
 8014d40:	08019269 	.word	0x08019269
 8014d44:	0801923b 	.word	0x0801923b
 8014d48:	0801922e 	.word	0x0801922e

08014d4c <div>:
 8014d4c:	b510      	push	{r4, lr}
 8014d4e:	fb91 f4f2 	sdiv	r4, r1, r2
 8014d52:	fb02 1114 	mls	r1, r2, r4, r1
 8014d56:	6004      	str	r4, [r0, #0]
 8014d58:	6041      	str	r1, [r0, #4]
 8014d5a:	bd10      	pop	{r4, pc}

08014d5c <quorem>:
 8014d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d60:	6903      	ldr	r3, [r0, #16]
 8014d62:	690c      	ldr	r4, [r1, #16]
 8014d64:	42a3      	cmp	r3, r4
 8014d66:	4607      	mov	r7, r0
 8014d68:	db7e      	blt.n	8014e68 <quorem+0x10c>
 8014d6a:	3c01      	subs	r4, #1
 8014d6c:	f101 0814 	add.w	r8, r1, #20
 8014d70:	00a3      	lsls	r3, r4, #2
 8014d72:	f100 0514 	add.w	r5, r0, #20
 8014d76:	9300      	str	r3, [sp, #0]
 8014d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d7c:	9301      	str	r3, [sp, #4]
 8014d7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d86:	3301      	adds	r3, #1
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d92:	d32e      	bcc.n	8014df2 <quorem+0x96>
 8014d94:	f04f 0a00 	mov.w	sl, #0
 8014d98:	46c4      	mov	ip, r8
 8014d9a:	46ae      	mov	lr, r5
 8014d9c:	46d3      	mov	fp, sl
 8014d9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014da2:	b298      	uxth	r0, r3
 8014da4:	fb06 a000 	mla	r0, r6, r0, sl
 8014da8:	0c02      	lsrs	r2, r0, #16
 8014daa:	0c1b      	lsrs	r3, r3, #16
 8014dac:	fb06 2303 	mla	r3, r6, r3, r2
 8014db0:	f8de 2000 	ldr.w	r2, [lr]
 8014db4:	b280      	uxth	r0, r0
 8014db6:	b292      	uxth	r2, r2
 8014db8:	1a12      	subs	r2, r2, r0
 8014dba:	445a      	add	r2, fp
 8014dbc:	f8de 0000 	ldr.w	r0, [lr]
 8014dc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014dca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014dce:	b292      	uxth	r2, r2
 8014dd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014dd4:	45e1      	cmp	r9, ip
 8014dd6:	f84e 2b04 	str.w	r2, [lr], #4
 8014dda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014dde:	d2de      	bcs.n	8014d9e <quorem+0x42>
 8014de0:	9b00      	ldr	r3, [sp, #0]
 8014de2:	58eb      	ldr	r3, [r5, r3]
 8014de4:	b92b      	cbnz	r3, 8014df2 <quorem+0x96>
 8014de6:	9b01      	ldr	r3, [sp, #4]
 8014de8:	3b04      	subs	r3, #4
 8014dea:	429d      	cmp	r5, r3
 8014dec:	461a      	mov	r2, r3
 8014dee:	d32f      	bcc.n	8014e50 <quorem+0xf4>
 8014df0:	613c      	str	r4, [r7, #16]
 8014df2:	4638      	mov	r0, r7
 8014df4:	f001 f9c6 	bl	8016184 <__mcmp>
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	db25      	blt.n	8014e48 <quorem+0xec>
 8014dfc:	4629      	mov	r1, r5
 8014dfe:	2000      	movs	r0, #0
 8014e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8014e04:	f8d1 c000 	ldr.w	ip, [r1]
 8014e08:	fa1f fe82 	uxth.w	lr, r2
 8014e0c:	fa1f f38c 	uxth.w	r3, ip
 8014e10:	eba3 030e 	sub.w	r3, r3, lr
 8014e14:	4403      	add	r3, r0
 8014e16:	0c12      	lsrs	r2, r2, #16
 8014e18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014e1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e26:	45c1      	cmp	r9, r8
 8014e28:	f841 3b04 	str.w	r3, [r1], #4
 8014e2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e30:	d2e6      	bcs.n	8014e00 <quorem+0xa4>
 8014e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e3a:	b922      	cbnz	r2, 8014e46 <quorem+0xea>
 8014e3c:	3b04      	subs	r3, #4
 8014e3e:	429d      	cmp	r5, r3
 8014e40:	461a      	mov	r2, r3
 8014e42:	d30b      	bcc.n	8014e5c <quorem+0x100>
 8014e44:	613c      	str	r4, [r7, #16]
 8014e46:	3601      	adds	r6, #1
 8014e48:	4630      	mov	r0, r6
 8014e4a:	b003      	add	sp, #12
 8014e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e50:	6812      	ldr	r2, [r2, #0]
 8014e52:	3b04      	subs	r3, #4
 8014e54:	2a00      	cmp	r2, #0
 8014e56:	d1cb      	bne.n	8014df0 <quorem+0x94>
 8014e58:	3c01      	subs	r4, #1
 8014e5a:	e7c6      	b.n	8014dea <quorem+0x8e>
 8014e5c:	6812      	ldr	r2, [r2, #0]
 8014e5e:	3b04      	subs	r3, #4
 8014e60:	2a00      	cmp	r2, #0
 8014e62:	d1ef      	bne.n	8014e44 <quorem+0xe8>
 8014e64:	3c01      	subs	r4, #1
 8014e66:	e7ea      	b.n	8014e3e <quorem+0xe2>
 8014e68:	2000      	movs	r0, #0
 8014e6a:	e7ee      	b.n	8014e4a <quorem+0xee>
 8014e6c:	0000      	movs	r0, r0
	...

08014e70 <_dtoa_r>:
 8014e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e74:	69c7      	ldr	r7, [r0, #28]
 8014e76:	b099      	sub	sp, #100	@ 0x64
 8014e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e7c:	ec55 4b10 	vmov	r4, r5, d0
 8014e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8014e84:	4683      	mov	fp, r0
 8014e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8014e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014e8a:	b97f      	cbnz	r7, 8014eac <_dtoa_r+0x3c>
 8014e8c:	2010      	movs	r0, #16
 8014e8e:	f000 fe41 	bl	8015b14 <malloc>
 8014e92:	4602      	mov	r2, r0
 8014e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8014e98:	b920      	cbnz	r0, 8014ea4 <_dtoa_r+0x34>
 8014e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8015138 <_dtoa_r+0x2c8>)
 8014e9c:	21ef      	movs	r1, #239	@ 0xef
 8014e9e:	48a7      	ldr	r0, [pc, #668]	@ (801513c <_dtoa_r+0x2cc>)
 8014ea0:	f7ff ff36 	bl	8014d10 <__assert_func>
 8014ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014ea8:	6007      	str	r7, [r0, #0]
 8014eaa:	60c7      	str	r7, [r0, #12]
 8014eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014eb0:	6819      	ldr	r1, [r3, #0]
 8014eb2:	b159      	cbz	r1, 8014ecc <_dtoa_r+0x5c>
 8014eb4:	685a      	ldr	r2, [r3, #4]
 8014eb6:	604a      	str	r2, [r1, #4]
 8014eb8:	2301      	movs	r3, #1
 8014eba:	4093      	lsls	r3, r2
 8014ebc:	608b      	str	r3, [r1, #8]
 8014ebe:	4658      	mov	r0, fp
 8014ec0:	f000 ff26 	bl	8015d10 <_Bfree>
 8014ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	601a      	str	r2, [r3, #0]
 8014ecc:	1e2b      	subs	r3, r5, #0
 8014ece:	bfb9      	ittee	lt
 8014ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014ed4:	9303      	strlt	r3, [sp, #12]
 8014ed6:	2300      	movge	r3, #0
 8014ed8:	6033      	strge	r3, [r6, #0]
 8014eda:	9f03      	ldr	r7, [sp, #12]
 8014edc:	4b98      	ldr	r3, [pc, #608]	@ (8015140 <_dtoa_r+0x2d0>)
 8014ede:	bfbc      	itt	lt
 8014ee0:	2201      	movlt	r2, #1
 8014ee2:	6032      	strlt	r2, [r6, #0]
 8014ee4:	43bb      	bics	r3, r7
 8014ee6:	d112      	bne.n	8014f0e <_dtoa_r+0x9e>
 8014ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014eee:	6013      	str	r3, [r2, #0]
 8014ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014ef4:	4323      	orrs	r3, r4
 8014ef6:	f000 854d 	beq.w	8015994 <_dtoa_r+0xb24>
 8014efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015154 <_dtoa_r+0x2e4>
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f000 854f 	beq.w	80159a4 <_dtoa_r+0xb34>
 8014f06:	f10a 0303 	add.w	r3, sl, #3
 8014f0a:	f000 bd49 	b.w	80159a0 <_dtoa_r+0xb30>
 8014f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014f12:	2200      	movs	r2, #0
 8014f14:	ec51 0b17 	vmov	r0, r1, d7
 8014f18:	2300      	movs	r3, #0
 8014f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014f1e:	f7eb fdbb 	bl	8000a98 <__aeabi_dcmpeq>
 8014f22:	4680      	mov	r8, r0
 8014f24:	b158      	cbz	r0, 8014f3e <_dtoa_r+0xce>
 8014f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014f28:	2301      	movs	r3, #1
 8014f2a:	6013      	str	r3, [r2, #0]
 8014f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014f2e:	b113      	cbz	r3, 8014f36 <_dtoa_r+0xc6>
 8014f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014f32:	4b84      	ldr	r3, [pc, #528]	@ (8015144 <_dtoa_r+0x2d4>)
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015158 <_dtoa_r+0x2e8>
 8014f3a:	f000 bd33 	b.w	80159a4 <_dtoa_r+0xb34>
 8014f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014f42:	aa16      	add	r2, sp, #88	@ 0x58
 8014f44:	a917      	add	r1, sp, #92	@ 0x5c
 8014f46:	4658      	mov	r0, fp
 8014f48:	f001 f9cc 	bl	80162e4 <__d2b>
 8014f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014f50:	4681      	mov	r9, r0
 8014f52:	2e00      	cmp	r6, #0
 8014f54:	d077      	beq.n	8015046 <_dtoa_r+0x1d6>
 8014f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014f70:	4619      	mov	r1, r3
 8014f72:	2200      	movs	r2, #0
 8014f74:	4b74      	ldr	r3, [pc, #464]	@ (8015148 <_dtoa_r+0x2d8>)
 8014f76:	f7eb f96f 	bl	8000258 <__aeabi_dsub>
 8014f7a:	a369      	add	r3, pc, #420	@ (adr r3, 8015120 <_dtoa_r+0x2b0>)
 8014f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f80:	f7eb fb22 	bl	80005c8 <__aeabi_dmul>
 8014f84:	a368      	add	r3, pc, #416	@ (adr r3, 8015128 <_dtoa_r+0x2b8>)
 8014f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8a:	f7eb f967 	bl	800025c <__adddf3>
 8014f8e:	4604      	mov	r4, r0
 8014f90:	4630      	mov	r0, r6
 8014f92:	460d      	mov	r5, r1
 8014f94:	f7eb faae 	bl	80004f4 <__aeabi_i2d>
 8014f98:	a365      	add	r3, pc, #404	@ (adr r3, 8015130 <_dtoa_r+0x2c0>)
 8014f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9e:	f7eb fb13 	bl	80005c8 <__aeabi_dmul>
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	4629      	mov	r1, r5
 8014faa:	f7eb f957 	bl	800025c <__adddf3>
 8014fae:	4604      	mov	r4, r0
 8014fb0:	460d      	mov	r5, r1
 8014fb2:	f7eb fdb9 	bl	8000b28 <__aeabi_d2iz>
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	4607      	mov	r7, r0
 8014fba:	2300      	movs	r3, #0
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	4629      	mov	r1, r5
 8014fc0:	f7eb fd74 	bl	8000aac <__aeabi_dcmplt>
 8014fc4:	b140      	cbz	r0, 8014fd8 <_dtoa_r+0x168>
 8014fc6:	4638      	mov	r0, r7
 8014fc8:	f7eb fa94 	bl	80004f4 <__aeabi_i2d>
 8014fcc:	4622      	mov	r2, r4
 8014fce:	462b      	mov	r3, r5
 8014fd0:	f7eb fd62 	bl	8000a98 <__aeabi_dcmpeq>
 8014fd4:	b900      	cbnz	r0, 8014fd8 <_dtoa_r+0x168>
 8014fd6:	3f01      	subs	r7, #1
 8014fd8:	2f16      	cmp	r7, #22
 8014fda:	d851      	bhi.n	8015080 <_dtoa_r+0x210>
 8014fdc:	4b5b      	ldr	r3, [pc, #364]	@ (801514c <_dtoa_r+0x2dc>)
 8014fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014fea:	f7eb fd5f 	bl	8000aac <__aeabi_dcmplt>
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	d048      	beq.n	8015084 <_dtoa_r+0x214>
 8014ff2:	3f01      	subs	r7, #1
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8014ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014ffa:	1b9b      	subs	r3, r3, r6
 8014ffc:	1e5a      	subs	r2, r3, #1
 8014ffe:	bf44      	itt	mi
 8015000:	f1c3 0801 	rsbmi	r8, r3, #1
 8015004:	2300      	movmi	r3, #0
 8015006:	9208      	str	r2, [sp, #32]
 8015008:	bf54      	ite	pl
 801500a:	f04f 0800 	movpl.w	r8, #0
 801500e:	9308      	strmi	r3, [sp, #32]
 8015010:	2f00      	cmp	r7, #0
 8015012:	db39      	blt.n	8015088 <_dtoa_r+0x218>
 8015014:	9b08      	ldr	r3, [sp, #32]
 8015016:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015018:	443b      	add	r3, r7
 801501a:	9308      	str	r3, [sp, #32]
 801501c:	2300      	movs	r3, #0
 801501e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015022:	2b09      	cmp	r3, #9
 8015024:	d864      	bhi.n	80150f0 <_dtoa_r+0x280>
 8015026:	2b05      	cmp	r3, #5
 8015028:	bfc4      	itt	gt
 801502a:	3b04      	subgt	r3, #4
 801502c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801502e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015030:	f1a3 0302 	sub.w	r3, r3, #2
 8015034:	bfcc      	ite	gt
 8015036:	2400      	movgt	r4, #0
 8015038:	2401      	movle	r4, #1
 801503a:	2b03      	cmp	r3, #3
 801503c:	d863      	bhi.n	8015106 <_dtoa_r+0x296>
 801503e:	e8df f003 	tbb	[pc, r3]
 8015042:	372a      	.short	0x372a
 8015044:	5535      	.short	0x5535
 8015046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801504a:	441e      	add	r6, r3
 801504c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015050:	2b20      	cmp	r3, #32
 8015052:	bfc1      	itttt	gt
 8015054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015058:	409f      	lslgt	r7, r3
 801505a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801505e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015062:	bfd6      	itet	le
 8015064:	f1c3 0320 	rsble	r3, r3, #32
 8015068:	ea47 0003 	orrgt.w	r0, r7, r3
 801506c:	fa04 f003 	lslle.w	r0, r4, r3
 8015070:	f7eb fa30 	bl	80004d4 <__aeabi_ui2d>
 8015074:	2201      	movs	r2, #1
 8015076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801507a:	3e01      	subs	r6, #1
 801507c:	9214      	str	r2, [sp, #80]	@ 0x50
 801507e:	e777      	b.n	8014f70 <_dtoa_r+0x100>
 8015080:	2301      	movs	r3, #1
 8015082:	e7b8      	b.n	8014ff6 <_dtoa_r+0x186>
 8015084:	9012      	str	r0, [sp, #72]	@ 0x48
 8015086:	e7b7      	b.n	8014ff8 <_dtoa_r+0x188>
 8015088:	427b      	negs	r3, r7
 801508a:	930a      	str	r3, [sp, #40]	@ 0x28
 801508c:	2300      	movs	r3, #0
 801508e:	eba8 0807 	sub.w	r8, r8, r7
 8015092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015094:	e7c4      	b.n	8015020 <_dtoa_r+0x1b0>
 8015096:	2300      	movs	r3, #0
 8015098:	930b      	str	r3, [sp, #44]	@ 0x2c
 801509a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801509c:	2b00      	cmp	r3, #0
 801509e:	dc35      	bgt.n	801510c <_dtoa_r+0x29c>
 80150a0:	2301      	movs	r3, #1
 80150a2:	9300      	str	r3, [sp, #0]
 80150a4:	9307      	str	r3, [sp, #28]
 80150a6:	461a      	mov	r2, r3
 80150a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80150aa:	e00b      	b.n	80150c4 <_dtoa_r+0x254>
 80150ac:	2301      	movs	r3, #1
 80150ae:	e7f3      	b.n	8015098 <_dtoa_r+0x228>
 80150b0:	2300      	movs	r3, #0
 80150b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80150b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150b6:	18fb      	adds	r3, r7, r3
 80150b8:	9300      	str	r3, [sp, #0]
 80150ba:	3301      	adds	r3, #1
 80150bc:	2b01      	cmp	r3, #1
 80150be:	9307      	str	r3, [sp, #28]
 80150c0:	bfb8      	it	lt
 80150c2:	2301      	movlt	r3, #1
 80150c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80150c8:	2100      	movs	r1, #0
 80150ca:	2204      	movs	r2, #4
 80150cc:	f102 0514 	add.w	r5, r2, #20
 80150d0:	429d      	cmp	r5, r3
 80150d2:	d91f      	bls.n	8015114 <_dtoa_r+0x2a4>
 80150d4:	6041      	str	r1, [r0, #4]
 80150d6:	4658      	mov	r0, fp
 80150d8:	f000 fdda 	bl	8015c90 <_Balloc>
 80150dc:	4682      	mov	sl, r0
 80150de:	2800      	cmp	r0, #0
 80150e0:	d13c      	bne.n	801515c <_dtoa_r+0x2ec>
 80150e2:	4b1b      	ldr	r3, [pc, #108]	@ (8015150 <_dtoa_r+0x2e0>)
 80150e4:	4602      	mov	r2, r0
 80150e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80150ea:	e6d8      	b.n	8014e9e <_dtoa_r+0x2e>
 80150ec:	2301      	movs	r3, #1
 80150ee:	e7e0      	b.n	80150b2 <_dtoa_r+0x242>
 80150f0:	2401      	movs	r4, #1
 80150f2:	2300      	movs	r3, #0
 80150f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80150f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80150f8:	f04f 33ff 	mov.w	r3, #4294967295
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	9307      	str	r3, [sp, #28]
 8015100:	2200      	movs	r2, #0
 8015102:	2312      	movs	r3, #18
 8015104:	e7d0      	b.n	80150a8 <_dtoa_r+0x238>
 8015106:	2301      	movs	r3, #1
 8015108:	930b      	str	r3, [sp, #44]	@ 0x2c
 801510a:	e7f5      	b.n	80150f8 <_dtoa_r+0x288>
 801510c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	9307      	str	r3, [sp, #28]
 8015112:	e7d7      	b.n	80150c4 <_dtoa_r+0x254>
 8015114:	3101      	adds	r1, #1
 8015116:	0052      	lsls	r2, r2, #1
 8015118:	e7d8      	b.n	80150cc <_dtoa_r+0x25c>
 801511a:	bf00      	nop
 801511c:	f3af 8000 	nop.w
 8015120:	636f4361 	.word	0x636f4361
 8015124:	3fd287a7 	.word	0x3fd287a7
 8015128:	8b60c8b3 	.word	0x8b60c8b3
 801512c:	3fc68a28 	.word	0x3fc68a28
 8015130:	509f79fb 	.word	0x509f79fb
 8015134:	3fd34413 	.word	0x3fd34413
 8015138:	08019024 	.word	0x08019024
 801513c:	08019277 	.word	0x08019277
 8015140:	7ff00000 	.word	0x7ff00000
 8015144:	0801956b 	.word	0x0801956b
 8015148:	3ff80000 	.word	0x3ff80000
 801514c:	08019370 	.word	0x08019370
 8015150:	080192cf 	.word	0x080192cf
 8015154:	08019273 	.word	0x08019273
 8015158:	0801956a 	.word	0x0801956a
 801515c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015160:	6018      	str	r0, [r3, #0]
 8015162:	9b07      	ldr	r3, [sp, #28]
 8015164:	2b0e      	cmp	r3, #14
 8015166:	f200 80a4 	bhi.w	80152b2 <_dtoa_r+0x442>
 801516a:	2c00      	cmp	r4, #0
 801516c:	f000 80a1 	beq.w	80152b2 <_dtoa_r+0x442>
 8015170:	2f00      	cmp	r7, #0
 8015172:	dd33      	ble.n	80151dc <_dtoa_r+0x36c>
 8015174:	4bad      	ldr	r3, [pc, #692]	@ (801542c <_dtoa_r+0x5bc>)
 8015176:	f007 020f 	and.w	r2, r7, #15
 801517a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801517e:	ed93 7b00 	vldr	d7, [r3]
 8015182:	05f8      	lsls	r0, r7, #23
 8015184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015188:	ea4f 1427 	mov.w	r4, r7, asr #4
 801518c:	d516      	bpl.n	80151bc <_dtoa_r+0x34c>
 801518e:	4ba8      	ldr	r3, [pc, #672]	@ (8015430 <_dtoa_r+0x5c0>)
 8015190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015198:	f7eb fb40 	bl	800081c <__aeabi_ddiv>
 801519c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151a0:	f004 040f 	and.w	r4, r4, #15
 80151a4:	2603      	movs	r6, #3
 80151a6:	4da2      	ldr	r5, [pc, #648]	@ (8015430 <_dtoa_r+0x5c0>)
 80151a8:	b954      	cbnz	r4, 80151c0 <_dtoa_r+0x350>
 80151aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151b2:	f7eb fb33 	bl	800081c <__aeabi_ddiv>
 80151b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151ba:	e028      	b.n	801520e <_dtoa_r+0x39e>
 80151bc:	2602      	movs	r6, #2
 80151be:	e7f2      	b.n	80151a6 <_dtoa_r+0x336>
 80151c0:	07e1      	lsls	r1, r4, #31
 80151c2:	d508      	bpl.n	80151d6 <_dtoa_r+0x366>
 80151c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151cc:	f7eb f9fc 	bl	80005c8 <__aeabi_dmul>
 80151d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151d4:	3601      	adds	r6, #1
 80151d6:	1064      	asrs	r4, r4, #1
 80151d8:	3508      	adds	r5, #8
 80151da:	e7e5      	b.n	80151a8 <_dtoa_r+0x338>
 80151dc:	f000 80d2 	beq.w	8015384 <_dtoa_r+0x514>
 80151e0:	427c      	negs	r4, r7
 80151e2:	4b92      	ldr	r3, [pc, #584]	@ (801542c <_dtoa_r+0x5bc>)
 80151e4:	4d92      	ldr	r5, [pc, #584]	@ (8015430 <_dtoa_r+0x5c0>)
 80151e6:	f004 020f 	and.w	r2, r4, #15
 80151ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80151f6:	f7eb f9e7 	bl	80005c8 <__aeabi_dmul>
 80151fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151fe:	1124      	asrs	r4, r4, #4
 8015200:	2300      	movs	r3, #0
 8015202:	2602      	movs	r6, #2
 8015204:	2c00      	cmp	r4, #0
 8015206:	f040 80b2 	bne.w	801536e <_dtoa_r+0x4fe>
 801520a:	2b00      	cmp	r3, #0
 801520c:	d1d3      	bne.n	80151b6 <_dtoa_r+0x346>
 801520e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015214:	2b00      	cmp	r3, #0
 8015216:	f000 80b7 	beq.w	8015388 <_dtoa_r+0x518>
 801521a:	4b86      	ldr	r3, [pc, #536]	@ (8015434 <_dtoa_r+0x5c4>)
 801521c:	2200      	movs	r2, #0
 801521e:	4620      	mov	r0, r4
 8015220:	4629      	mov	r1, r5
 8015222:	f7eb fc43 	bl	8000aac <__aeabi_dcmplt>
 8015226:	2800      	cmp	r0, #0
 8015228:	f000 80ae 	beq.w	8015388 <_dtoa_r+0x518>
 801522c:	9b07      	ldr	r3, [sp, #28]
 801522e:	2b00      	cmp	r3, #0
 8015230:	f000 80aa 	beq.w	8015388 <_dtoa_r+0x518>
 8015234:	9b00      	ldr	r3, [sp, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	dd37      	ble.n	80152aa <_dtoa_r+0x43a>
 801523a:	1e7b      	subs	r3, r7, #1
 801523c:	9304      	str	r3, [sp, #16]
 801523e:	4620      	mov	r0, r4
 8015240:	4b7d      	ldr	r3, [pc, #500]	@ (8015438 <_dtoa_r+0x5c8>)
 8015242:	2200      	movs	r2, #0
 8015244:	4629      	mov	r1, r5
 8015246:	f7eb f9bf 	bl	80005c8 <__aeabi_dmul>
 801524a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801524e:	9c00      	ldr	r4, [sp, #0]
 8015250:	3601      	adds	r6, #1
 8015252:	4630      	mov	r0, r6
 8015254:	f7eb f94e 	bl	80004f4 <__aeabi_i2d>
 8015258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801525c:	f7eb f9b4 	bl	80005c8 <__aeabi_dmul>
 8015260:	4b76      	ldr	r3, [pc, #472]	@ (801543c <_dtoa_r+0x5cc>)
 8015262:	2200      	movs	r2, #0
 8015264:	f7ea fffa 	bl	800025c <__adddf3>
 8015268:	4605      	mov	r5, r0
 801526a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801526e:	2c00      	cmp	r4, #0
 8015270:	f040 808d 	bne.w	801538e <_dtoa_r+0x51e>
 8015274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015278:	4b71      	ldr	r3, [pc, #452]	@ (8015440 <_dtoa_r+0x5d0>)
 801527a:	2200      	movs	r2, #0
 801527c:	f7ea ffec 	bl	8000258 <__aeabi_dsub>
 8015280:	4602      	mov	r2, r0
 8015282:	460b      	mov	r3, r1
 8015284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015288:	462a      	mov	r2, r5
 801528a:	4633      	mov	r3, r6
 801528c:	f7eb fc2c 	bl	8000ae8 <__aeabi_dcmpgt>
 8015290:	2800      	cmp	r0, #0
 8015292:	f040 828b 	bne.w	80157ac <_dtoa_r+0x93c>
 8015296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801529a:	462a      	mov	r2, r5
 801529c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80152a0:	f7eb fc04 	bl	8000aac <__aeabi_dcmplt>
 80152a4:	2800      	cmp	r0, #0
 80152a6:	f040 8128 	bne.w	80154fa <_dtoa_r+0x68a>
 80152aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80152ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80152b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f2c0 815a 	blt.w	801556e <_dtoa_r+0x6fe>
 80152ba:	2f0e      	cmp	r7, #14
 80152bc:	f300 8157 	bgt.w	801556e <_dtoa_r+0x6fe>
 80152c0:	4b5a      	ldr	r3, [pc, #360]	@ (801542c <_dtoa_r+0x5bc>)
 80152c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152c6:	ed93 7b00 	vldr	d7, [r3]
 80152ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	ed8d 7b00 	vstr	d7, [sp]
 80152d2:	da03      	bge.n	80152dc <_dtoa_r+0x46c>
 80152d4:	9b07      	ldr	r3, [sp, #28]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	f340 8101 	ble.w	80154de <_dtoa_r+0x66e>
 80152dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80152e0:	4656      	mov	r6, sl
 80152e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152e6:	4620      	mov	r0, r4
 80152e8:	4629      	mov	r1, r5
 80152ea:	f7eb fa97 	bl	800081c <__aeabi_ddiv>
 80152ee:	f7eb fc1b 	bl	8000b28 <__aeabi_d2iz>
 80152f2:	4680      	mov	r8, r0
 80152f4:	f7eb f8fe 	bl	80004f4 <__aeabi_i2d>
 80152f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152fc:	f7eb f964 	bl	80005c8 <__aeabi_dmul>
 8015300:	4602      	mov	r2, r0
 8015302:	460b      	mov	r3, r1
 8015304:	4620      	mov	r0, r4
 8015306:	4629      	mov	r1, r5
 8015308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801530c:	f7ea ffa4 	bl	8000258 <__aeabi_dsub>
 8015310:	f806 4b01 	strb.w	r4, [r6], #1
 8015314:	9d07      	ldr	r5, [sp, #28]
 8015316:	eba6 040a 	sub.w	r4, r6, sl
 801531a:	42a5      	cmp	r5, r4
 801531c:	4602      	mov	r2, r0
 801531e:	460b      	mov	r3, r1
 8015320:	f040 8117 	bne.w	8015552 <_dtoa_r+0x6e2>
 8015324:	f7ea ff9a 	bl	800025c <__adddf3>
 8015328:	e9dd 2300 	ldrd	r2, r3, [sp]
 801532c:	4604      	mov	r4, r0
 801532e:	460d      	mov	r5, r1
 8015330:	f7eb fbda 	bl	8000ae8 <__aeabi_dcmpgt>
 8015334:	2800      	cmp	r0, #0
 8015336:	f040 80f9 	bne.w	801552c <_dtoa_r+0x6bc>
 801533a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801533e:	4620      	mov	r0, r4
 8015340:	4629      	mov	r1, r5
 8015342:	f7eb fba9 	bl	8000a98 <__aeabi_dcmpeq>
 8015346:	b118      	cbz	r0, 8015350 <_dtoa_r+0x4e0>
 8015348:	f018 0f01 	tst.w	r8, #1
 801534c:	f040 80ee 	bne.w	801552c <_dtoa_r+0x6bc>
 8015350:	4649      	mov	r1, r9
 8015352:	4658      	mov	r0, fp
 8015354:	f000 fcdc 	bl	8015d10 <_Bfree>
 8015358:	2300      	movs	r3, #0
 801535a:	7033      	strb	r3, [r6, #0]
 801535c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801535e:	3701      	adds	r7, #1
 8015360:	601f      	str	r7, [r3, #0]
 8015362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015364:	2b00      	cmp	r3, #0
 8015366:	f000 831d 	beq.w	80159a4 <_dtoa_r+0xb34>
 801536a:	601e      	str	r6, [r3, #0]
 801536c:	e31a      	b.n	80159a4 <_dtoa_r+0xb34>
 801536e:	07e2      	lsls	r2, r4, #31
 8015370:	d505      	bpl.n	801537e <_dtoa_r+0x50e>
 8015372:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015376:	f7eb f927 	bl	80005c8 <__aeabi_dmul>
 801537a:	3601      	adds	r6, #1
 801537c:	2301      	movs	r3, #1
 801537e:	1064      	asrs	r4, r4, #1
 8015380:	3508      	adds	r5, #8
 8015382:	e73f      	b.n	8015204 <_dtoa_r+0x394>
 8015384:	2602      	movs	r6, #2
 8015386:	e742      	b.n	801520e <_dtoa_r+0x39e>
 8015388:	9c07      	ldr	r4, [sp, #28]
 801538a:	9704      	str	r7, [sp, #16]
 801538c:	e761      	b.n	8015252 <_dtoa_r+0x3e2>
 801538e:	4b27      	ldr	r3, [pc, #156]	@ (801542c <_dtoa_r+0x5bc>)
 8015390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801539a:	4454      	add	r4, sl
 801539c:	2900      	cmp	r1, #0
 801539e:	d053      	beq.n	8015448 <_dtoa_r+0x5d8>
 80153a0:	4928      	ldr	r1, [pc, #160]	@ (8015444 <_dtoa_r+0x5d4>)
 80153a2:	2000      	movs	r0, #0
 80153a4:	f7eb fa3a 	bl	800081c <__aeabi_ddiv>
 80153a8:	4633      	mov	r3, r6
 80153aa:	462a      	mov	r2, r5
 80153ac:	f7ea ff54 	bl	8000258 <__aeabi_dsub>
 80153b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80153b4:	4656      	mov	r6, sl
 80153b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153ba:	f7eb fbb5 	bl	8000b28 <__aeabi_d2iz>
 80153be:	4605      	mov	r5, r0
 80153c0:	f7eb f898 	bl	80004f4 <__aeabi_i2d>
 80153c4:	4602      	mov	r2, r0
 80153c6:	460b      	mov	r3, r1
 80153c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153cc:	f7ea ff44 	bl	8000258 <__aeabi_dsub>
 80153d0:	3530      	adds	r5, #48	@ 0x30
 80153d2:	4602      	mov	r2, r0
 80153d4:	460b      	mov	r3, r1
 80153d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80153da:	f806 5b01 	strb.w	r5, [r6], #1
 80153de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80153e2:	f7eb fb63 	bl	8000aac <__aeabi_dcmplt>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	d171      	bne.n	80154ce <_dtoa_r+0x65e>
 80153ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153ee:	4911      	ldr	r1, [pc, #68]	@ (8015434 <_dtoa_r+0x5c4>)
 80153f0:	2000      	movs	r0, #0
 80153f2:	f7ea ff31 	bl	8000258 <__aeabi_dsub>
 80153f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80153fa:	f7eb fb57 	bl	8000aac <__aeabi_dcmplt>
 80153fe:	2800      	cmp	r0, #0
 8015400:	f040 8095 	bne.w	801552e <_dtoa_r+0x6be>
 8015404:	42a6      	cmp	r6, r4
 8015406:	f43f af50 	beq.w	80152aa <_dtoa_r+0x43a>
 801540a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801540e:	4b0a      	ldr	r3, [pc, #40]	@ (8015438 <_dtoa_r+0x5c8>)
 8015410:	2200      	movs	r2, #0
 8015412:	f7eb f8d9 	bl	80005c8 <__aeabi_dmul>
 8015416:	4b08      	ldr	r3, [pc, #32]	@ (8015438 <_dtoa_r+0x5c8>)
 8015418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801541c:	2200      	movs	r2, #0
 801541e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015422:	f7eb f8d1 	bl	80005c8 <__aeabi_dmul>
 8015426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801542a:	e7c4      	b.n	80153b6 <_dtoa_r+0x546>
 801542c:	08019370 	.word	0x08019370
 8015430:	08019348 	.word	0x08019348
 8015434:	3ff00000 	.word	0x3ff00000
 8015438:	40240000 	.word	0x40240000
 801543c:	401c0000 	.word	0x401c0000
 8015440:	40140000 	.word	0x40140000
 8015444:	3fe00000 	.word	0x3fe00000
 8015448:	4631      	mov	r1, r6
 801544a:	4628      	mov	r0, r5
 801544c:	f7eb f8bc 	bl	80005c8 <__aeabi_dmul>
 8015450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015454:	9415      	str	r4, [sp, #84]	@ 0x54
 8015456:	4656      	mov	r6, sl
 8015458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801545c:	f7eb fb64 	bl	8000b28 <__aeabi_d2iz>
 8015460:	4605      	mov	r5, r0
 8015462:	f7eb f847 	bl	80004f4 <__aeabi_i2d>
 8015466:	4602      	mov	r2, r0
 8015468:	460b      	mov	r3, r1
 801546a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801546e:	f7ea fef3 	bl	8000258 <__aeabi_dsub>
 8015472:	3530      	adds	r5, #48	@ 0x30
 8015474:	f806 5b01 	strb.w	r5, [r6], #1
 8015478:	4602      	mov	r2, r0
 801547a:	460b      	mov	r3, r1
 801547c:	42a6      	cmp	r6, r4
 801547e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015482:	f04f 0200 	mov.w	r2, #0
 8015486:	d124      	bne.n	80154d2 <_dtoa_r+0x662>
 8015488:	4bac      	ldr	r3, [pc, #688]	@ (801573c <_dtoa_r+0x8cc>)
 801548a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801548e:	f7ea fee5 	bl	800025c <__adddf3>
 8015492:	4602      	mov	r2, r0
 8015494:	460b      	mov	r3, r1
 8015496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801549a:	f7eb fb25 	bl	8000ae8 <__aeabi_dcmpgt>
 801549e:	2800      	cmp	r0, #0
 80154a0:	d145      	bne.n	801552e <_dtoa_r+0x6be>
 80154a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80154a6:	49a5      	ldr	r1, [pc, #660]	@ (801573c <_dtoa_r+0x8cc>)
 80154a8:	2000      	movs	r0, #0
 80154aa:	f7ea fed5 	bl	8000258 <__aeabi_dsub>
 80154ae:	4602      	mov	r2, r0
 80154b0:	460b      	mov	r3, r1
 80154b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154b6:	f7eb faf9 	bl	8000aac <__aeabi_dcmplt>
 80154ba:	2800      	cmp	r0, #0
 80154bc:	f43f aef5 	beq.w	80152aa <_dtoa_r+0x43a>
 80154c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80154c2:	1e73      	subs	r3, r6, #1
 80154c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80154c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80154ca:	2b30      	cmp	r3, #48	@ 0x30
 80154cc:	d0f8      	beq.n	80154c0 <_dtoa_r+0x650>
 80154ce:	9f04      	ldr	r7, [sp, #16]
 80154d0:	e73e      	b.n	8015350 <_dtoa_r+0x4e0>
 80154d2:	4b9b      	ldr	r3, [pc, #620]	@ (8015740 <_dtoa_r+0x8d0>)
 80154d4:	f7eb f878 	bl	80005c8 <__aeabi_dmul>
 80154d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154dc:	e7bc      	b.n	8015458 <_dtoa_r+0x5e8>
 80154de:	d10c      	bne.n	80154fa <_dtoa_r+0x68a>
 80154e0:	4b98      	ldr	r3, [pc, #608]	@ (8015744 <_dtoa_r+0x8d4>)
 80154e2:	2200      	movs	r2, #0
 80154e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154e8:	f7eb f86e 	bl	80005c8 <__aeabi_dmul>
 80154ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154f0:	f7eb faf0 	bl	8000ad4 <__aeabi_dcmpge>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	f000 8157 	beq.w	80157a8 <_dtoa_r+0x938>
 80154fa:	2400      	movs	r4, #0
 80154fc:	4625      	mov	r5, r4
 80154fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015500:	43db      	mvns	r3, r3
 8015502:	9304      	str	r3, [sp, #16]
 8015504:	4656      	mov	r6, sl
 8015506:	2700      	movs	r7, #0
 8015508:	4621      	mov	r1, r4
 801550a:	4658      	mov	r0, fp
 801550c:	f000 fc00 	bl	8015d10 <_Bfree>
 8015510:	2d00      	cmp	r5, #0
 8015512:	d0dc      	beq.n	80154ce <_dtoa_r+0x65e>
 8015514:	b12f      	cbz	r7, 8015522 <_dtoa_r+0x6b2>
 8015516:	42af      	cmp	r7, r5
 8015518:	d003      	beq.n	8015522 <_dtoa_r+0x6b2>
 801551a:	4639      	mov	r1, r7
 801551c:	4658      	mov	r0, fp
 801551e:	f000 fbf7 	bl	8015d10 <_Bfree>
 8015522:	4629      	mov	r1, r5
 8015524:	4658      	mov	r0, fp
 8015526:	f000 fbf3 	bl	8015d10 <_Bfree>
 801552a:	e7d0      	b.n	80154ce <_dtoa_r+0x65e>
 801552c:	9704      	str	r7, [sp, #16]
 801552e:	4633      	mov	r3, r6
 8015530:	461e      	mov	r6, r3
 8015532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015536:	2a39      	cmp	r2, #57	@ 0x39
 8015538:	d107      	bne.n	801554a <_dtoa_r+0x6da>
 801553a:	459a      	cmp	sl, r3
 801553c:	d1f8      	bne.n	8015530 <_dtoa_r+0x6c0>
 801553e:	9a04      	ldr	r2, [sp, #16]
 8015540:	3201      	adds	r2, #1
 8015542:	9204      	str	r2, [sp, #16]
 8015544:	2230      	movs	r2, #48	@ 0x30
 8015546:	f88a 2000 	strb.w	r2, [sl]
 801554a:	781a      	ldrb	r2, [r3, #0]
 801554c:	3201      	adds	r2, #1
 801554e:	701a      	strb	r2, [r3, #0]
 8015550:	e7bd      	b.n	80154ce <_dtoa_r+0x65e>
 8015552:	4b7b      	ldr	r3, [pc, #492]	@ (8015740 <_dtoa_r+0x8d0>)
 8015554:	2200      	movs	r2, #0
 8015556:	f7eb f837 	bl	80005c8 <__aeabi_dmul>
 801555a:	2200      	movs	r2, #0
 801555c:	2300      	movs	r3, #0
 801555e:	4604      	mov	r4, r0
 8015560:	460d      	mov	r5, r1
 8015562:	f7eb fa99 	bl	8000a98 <__aeabi_dcmpeq>
 8015566:	2800      	cmp	r0, #0
 8015568:	f43f aebb 	beq.w	80152e2 <_dtoa_r+0x472>
 801556c:	e6f0      	b.n	8015350 <_dtoa_r+0x4e0>
 801556e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015570:	2a00      	cmp	r2, #0
 8015572:	f000 80db 	beq.w	801572c <_dtoa_r+0x8bc>
 8015576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015578:	2a01      	cmp	r2, #1
 801557a:	f300 80bf 	bgt.w	80156fc <_dtoa_r+0x88c>
 801557e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015580:	2a00      	cmp	r2, #0
 8015582:	f000 80b7 	beq.w	80156f4 <_dtoa_r+0x884>
 8015586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801558a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801558c:	4646      	mov	r6, r8
 801558e:	9a08      	ldr	r2, [sp, #32]
 8015590:	2101      	movs	r1, #1
 8015592:	441a      	add	r2, r3
 8015594:	4658      	mov	r0, fp
 8015596:	4498      	add	r8, r3
 8015598:	9208      	str	r2, [sp, #32]
 801559a:	f000 fc6d 	bl	8015e78 <__i2b>
 801559e:	4605      	mov	r5, r0
 80155a0:	b15e      	cbz	r6, 80155ba <_dtoa_r+0x74a>
 80155a2:	9b08      	ldr	r3, [sp, #32]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	dd08      	ble.n	80155ba <_dtoa_r+0x74a>
 80155a8:	42b3      	cmp	r3, r6
 80155aa:	9a08      	ldr	r2, [sp, #32]
 80155ac:	bfa8      	it	ge
 80155ae:	4633      	movge	r3, r6
 80155b0:	eba8 0803 	sub.w	r8, r8, r3
 80155b4:	1af6      	subs	r6, r6, r3
 80155b6:	1ad3      	subs	r3, r2, r3
 80155b8:	9308      	str	r3, [sp, #32]
 80155ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155bc:	b1f3      	cbz	r3, 80155fc <_dtoa_r+0x78c>
 80155be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	f000 80b7 	beq.w	8015734 <_dtoa_r+0x8c4>
 80155c6:	b18c      	cbz	r4, 80155ec <_dtoa_r+0x77c>
 80155c8:	4629      	mov	r1, r5
 80155ca:	4622      	mov	r2, r4
 80155cc:	4658      	mov	r0, fp
 80155ce:	f000 fd13 	bl	8015ff8 <__pow5mult>
 80155d2:	464a      	mov	r2, r9
 80155d4:	4601      	mov	r1, r0
 80155d6:	4605      	mov	r5, r0
 80155d8:	4658      	mov	r0, fp
 80155da:	f000 fc63 	bl	8015ea4 <__multiply>
 80155de:	4649      	mov	r1, r9
 80155e0:	9004      	str	r0, [sp, #16]
 80155e2:	4658      	mov	r0, fp
 80155e4:	f000 fb94 	bl	8015d10 <_Bfree>
 80155e8:	9b04      	ldr	r3, [sp, #16]
 80155ea:	4699      	mov	r9, r3
 80155ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155ee:	1b1a      	subs	r2, r3, r4
 80155f0:	d004      	beq.n	80155fc <_dtoa_r+0x78c>
 80155f2:	4649      	mov	r1, r9
 80155f4:	4658      	mov	r0, fp
 80155f6:	f000 fcff 	bl	8015ff8 <__pow5mult>
 80155fa:	4681      	mov	r9, r0
 80155fc:	2101      	movs	r1, #1
 80155fe:	4658      	mov	r0, fp
 8015600:	f000 fc3a 	bl	8015e78 <__i2b>
 8015604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015606:	4604      	mov	r4, r0
 8015608:	2b00      	cmp	r3, #0
 801560a:	f000 81cf 	beq.w	80159ac <_dtoa_r+0xb3c>
 801560e:	461a      	mov	r2, r3
 8015610:	4601      	mov	r1, r0
 8015612:	4658      	mov	r0, fp
 8015614:	f000 fcf0 	bl	8015ff8 <__pow5mult>
 8015618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801561a:	2b01      	cmp	r3, #1
 801561c:	4604      	mov	r4, r0
 801561e:	f300 8095 	bgt.w	801574c <_dtoa_r+0x8dc>
 8015622:	9b02      	ldr	r3, [sp, #8]
 8015624:	2b00      	cmp	r3, #0
 8015626:	f040 8087 	bne.w	8015738 <_dtoa_r+0x8c8>
 801562a:	9b03      	ldr	r3, [sp, #12]
 801562c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015630:	2b00      	cmp	r3, #0
 8015632:	f040 8089 	bne.w	8015748 <_dtoa_r+0x8d8>
 8015636:	9b03      	ldr	r3, [sp, #12]
 8015638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801563c:	0d1b      	lsrs	r3, r3, #20
 801563e:	051b      	lsls	r3, r3, #20
 8015640:	b12b      	cbz	r3, 801564e <_dtoa_r+0x7de>
 8015642:	9b08      	ldr	r3, [sp, #32]
 8015644:	3301      	adds	r3, #1
 8015646:	9308      	str	r3, [sp, #32]
 8015648:	f108 0801 	add.w	r8, r8, #1
 801564c:	2301      	movs	r3, #1
 801564e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015652:	2b00      	cmp	r3, #0
 8015654:	f000 81b0 	beq.w	80159b8 <_dtoa_r+0xb48>
 8015658:	6923      	ldr	r3, [r4, #16]
 801565a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801565e:	6918      	ldr	r0, [r3, #16]
 8015660:	f000 fbbe 	bl	8015de0 <__hi0bits>
 8015664:	f1c0 0020 	rsb	r0, r0, #32
 8015668:	9b08      	ldr	r3, [sp, #32]
 801566a:	4418      	add	r0, r3
 801566c:	f010 001f 	ands.w	r0, r0, #31
 8015670:	d077      	beq.n	8015762 <_dtoa_r+0x8f2>
 8015672:	f1c0 0320 	rsb	r3, r0, #32
 8015676:	2b04      	cmp	r3, #4
 8015678:	dd6b      	ble.n	8015752 <_dtoa_r+0x8e2>
 801567a:	9b08      	ldr	r3, [sp, #32]
 801567c:	f1c0 001c 	rsb	r0, r0, #28
 8015680:	4403      	add	r3, r0
 8015682:	4480      	add	r8, r0
 8015684:	4406      	add	r6, r0
 8015686:	9308      	str	r3, [sp, #32]
 8015688:	f1b8 0f00 	cmp.w	r8, #0
 801568c:	dd05      	ble.n	801569a <_dtoa_r+0x82a>
 801568e:	4649      	mov	r1, r9
 8015690:	4642      	mov	r2, r8
 8015692:	4658      	mov	r0, fp
 8015694:	f000 fd0a 	bl	80160ac <__lshift>
 8015698:	4681      	mov	r9, r0
 801569a:	9b08      	ldr	r3, [sp, #32]
 801569c:	2b00      	cmp	r3, #0
 801569e:	dd05      	ble.n	80156ac <_dtoa_r+0x83c>
 80156a0:	4621      	mov	r1, r4
 80156a2:	461a      	mov	r2, r3
 80156a4:	4658      	mov	r0, fp
 80156a6:	f000 fd01 	bl	80160ac <__lshift>
 80156aa:	4604      	mov	r4, r0
 80156ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d059      	beq.n	8015766 <_dtoa_r+0x8f6>
 80156b2:	4621      	mov	r1, r4
 80156b4:	4648      	mov	r0, r9
 80156b6:	f000 fd65 	bl	8016184 <__mcmp>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	da53      	bge.n	8015766 <_dtoa_r+0x8f6>
 80156be:	1e7b      	subs	r3, r7, #1
 80156c0:	9304      	str	r3, [sp, #16]
 80156c2:	4649      	mov	r1, r9
 80156c4:	2300      	movs	r3, #0
 80156c6:	220a      	movs	r2, #10
 80156c8:	4658      	mov	r0, fp
 80156ca:	f000 fb43 	bl	8015d54 <__multadd>
 80156ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80156d0:	4681      	mov	r9, r0
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f000 8172 	beq.w	80159bc <_dtoa_r+0xb4c>
 80156d8:	2300      	movs	r3, #0
 80156da:	4629      	mov	r1, r5
 80156dc:	220a      	movs	r2, #10
 80156de:	4658      	mov	r0, fp
 80156e0:	f000 fb38 	bl	8015d54 <__multadd>
 80156e4:	9b00      	ldr	r3, [sp, #0]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	4605      	mov	r5, r0
 80156ea:	dc67      	bgt.n	80157bc <_dtoa_r+0x94c>
 80156ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156ee:	2b02      	cmp	r3, #2
 80156f0:	dc41      	bgt.n	8015776 <_dtoa_r+0x906>
 80156f2:	e063      	b.n	80157bc <_dtoa_r+0x94c>
 80156f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80156f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80156fa:	e746      	b.n	801558a <_dtoa_r+0x71a>
 80156fc:	9b07      	ldr	r3, [sp, #28]
 80156fe:	1e5c      	subs	r4, r3, #1
 8015700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015702:	42a3      	cmp	r3, r4
 8015704:	bfbf      	itttt	lt
 8015706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801570a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801570c:	1ae3      	sublt	r3, r4, r3
 801570e:	bfb4      	ite	lt
 8015710:	18d2      	addlt	r2, r2, r3
 8015712:	1b1c      	subge	r4, r3, r4
 8015714:	9b07      	ldr	r3, [sp, #28]
 8015716:	bfbc      	itt	lt
 8015718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801571a:	2400      	movlt	r4, #0
 801571c:	2b00      	cmp	r3, #0
 801571e:	bfb5      	itete	lt
 8015720:	eba8 0603 	sublt.w	r6, r8, r3
 8015724:	9b07      	ldrge	r3, [sp, #28]
 8015726:	2300      	movlt	r3, #0
 8015728:	4646      	movge	r6, r8
 801572a:	e730      	b.n	801558e <_dtoa_r+0x71e>
 801572c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801572e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015730:	4646      	mov	r6, r8
 8015732:	e735      	b.n	80155a0 <_dtoa_r+0x730>
 8015734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015736:	e75c      	b.n	80155f2 <_dtoa_r+0x782>
 8015738:	2300      	movs	r3, #0
 801573a:	e788      	b.n	801564e <_dtoa_r+0x7de>
 801573c:	3fe00000 	.word	0x3fe00000
 8015740:	40240000 	.word	0x40240000
 8015744:	40140000 	.word	0x40140000
 8015748:	9b02      	ldr	r3, [sp, #8]
 801574a:	e780      	b.n	801564e <_dtoa_r+0x7de>
 801574c:	2300      	movs	r3, #0
 801574e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015750:	e782      	b.n	8015658 <_dtoa_r+0x7e8>
 8015752:	d099      	beq.n	8015688 <_dtoa_r+0x818>
 8015754:	9a08      	ldr	r2, [sp, #32]
 8015756:	331c      	adds	r3, #28
 8015758:	441a      	add	r2, r3
 801575a:	4498      	add	r8, r3
 801575c:	441e      	add	r6, r3
 801575e:	9208      	str	r2, [sp, #32]
 8015760:	e792      	b.n	8015688 <_dtoa_r+0x818>
 8015762:	4603      	mov	r3, r0
 8015764:	e7f6      	b.n	8015754 <_dtoa_r+0x8e4>
 8015766:	9b07      	ldr	r3, [sp, #28]
 8015768:	9704      	str	r7, [sp, #16]
 801576a:	2b00      	cmp	r3, #0
 801576c:	dc20      	bgt.n	80157b0 <_dtoa_r+0x940>
 801576e:	9300      	str	r3, [sp, #0]
 8015770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015772:	2b02      	cmp	r3, #2
 8015774:	dd1e      	ble.n	80157b4 <_dtoa_r+0x944>
 8015776:	9b00      	ldr	r3, [sp, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	f47f aec0 	bne.w	80154fe <_dtoa_r+0x68e>
 801577e:	4621      	mov	r1, r4
 8015780:	2205      	movs	r2, #5
 8015782:	4658      	mov	r0, fp
 8015784:	f000 fae6 	bl	8015d54 <__multadd>
 8015788:	4601      	mov	r1, r0
 801578a:	4604      	mov	r4, r0
 801578c:	4648      	mov	r0, r9
 801578e:	f000 fcf9 	bl	8016184 <__mcmp>
 8015792:	2800      	cmp	r0, #0
 8015794:	f77f aeb3 	ble.w	80154fe <_dtoa_r+0x68e>
 8015798:	4656      	mov	r6, sl
 801579a:	2331      	movs	r3, #49	@ 0x31
 801579c:	f806 3b01 	strb.w	r3, [r6], #1
 80157a0:	9b04      	ldr	r3, [sp, #16]
 80157a2:	3301      	adds	r3, #1
 80157a4:	9304      	str	r3, [sp, #16]
 80157a6:	e6ae      	b.n	8015506 <_dtoa_r+0x696>
 80157a8:	9c07      	ldr	r4, [sp, #28]
 80157aa:	9704      	str	r7, [sp, #16]
 80157ac:	4625      	mov	r5, r4
 80157ae:	e7f3      	b.n	8015798 <_dtoa_r+0x928>
 80157b0:	9b07      	ldr	r3, [sp, #28]
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f000 8104 	beq.w	80159c4 <_dtoa_r+0xb54>
 80157bc:	2e00      	cmp	r6, #0
 80157be:	dd05      	ble.n	80157cc <_dtoa_r+0x95c>
 80157c0:	4629      	mov	r1, r5
 80157c2:	4632      	mov	r2, r6
 80157c4:	4658      	mov	r0, fp
 80157c6:	f000 fc71 	bl	80160ac <__lshift>
 80157ca:	4605      	mov	r5, r0
 80157cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d05a      	beq.n	8015888 <_dtoa_r+0xa18>
 80157d2:	6869      	ldr	r1, [r5, #4]
 80157d4:	4658      	mov	r0, fp
 80157d6:	f000 fa5b 	bl	8015c90 <_Balloc>
 80157da:	4606      	mov	r6, r0
 80157dc:	b928      	cbnz	r0, 80157ea <_dtoa_r+0x97a>
 80157de:	4b84      	ldr	r3, [pc, #528]	@ (80159f0 <_dtoa_r+0xb80>)
 80157e0:	4602      	mov	r2, r0
 80157e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80157e6:	f7ff bb5a 	b.w	8014e9e <_dtoa_r+0x2e>
 80157ea:	692a      	ldr	r2, [r5, #16]
 80157ec:	3202      	adds	r2, #2
 80157ee:	0092      	lsls	r2, r2, #2
 80157f0:	f105 010c 	add.w	r1, r5, #12
 80157f4:	300c      	adds	r0, #12
 80157f6:	f7ff fa7c 	bl	8014cf2 <memcpy>
 80157fa:	2201      	movs	r2, #1
 80157fc:	4631      	mov	r1, r6
 80157fe:	4658      	mov	r0, fp
 8015800:	f000 fc54 	bl	80160ac <__lshift>
 8015804:	f10a 0301 	add.w	r3, sl, #1
 8015808:	9307      	str	r3, [sp, #28]
 801580a:	9b00      	ldr	r3, [sp, #0]
 801580c:	4453      	add	r3, sl
 801580e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015810:	9b02      	ldr	r3, [sp, #8]
 8015812:	f003 0301 	and.w	r3, r3, #1
 8015816:	462f      	mov	r7, r5
 8015818:	930a      	str	r3, [sp, #40]	@ 0x28
 801581a:	4605      	mov	r5, r0
 801581c:	9b07      	ldr	r3, [sp, #28]
 801581e:	4621      	mov	r1, r4
 8015820:	3b01      	subs	r3, #1
 8015822:	4648      	mov	r0, r9
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	f7ff fa99 	bl	8014d5c <quorem>
 801582a:	4639      	mov	r1, r7
 801582c:	9002      	str	r0, [sp, #8]
 801582e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015832:	4648      	mov	r0, r9
 8015834:	f000 fca6 	bl	8016184 <__mcmp>
 8015838:	462a      	mov	r2, r5
 801583a:	9008      	str	r0, [sp, #32]
 801583c:	4621      	mov	r1, r4
 801583e:	4658      	mov	r0, fp
 8015840:	f000 fcbc 	bl	80161bc <__mdiff>
 8015844:	68c2      	ldr	r2, [r0, #12]
 8015846:	4606      	mov	r6, r0
 8015848:	bb02      	cbnz	r2, 801588c <_dtoa_r+0xa1c>
 801584a:	4601      	mov	r1, r0
 801584c:	4648      	mov	r0, r9
 801584e:	f000 fc99 	bl	8016184 <__mcmp>
 8015852:	4602      	mov	r2, r0
 8015854:	4631      	mov	r1, r6
 8015856:	4658      	mov	r0, fp
 8015858:	920e      	str	r2, [sp, #56]	@ 0x38
 801585a:	f000 fa59 	bl	8015d10 <_Bfree>
 801585e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015862:	9e07      	ldr	r6, [sp, #28]
 8015864:	ea43 0102 	orr.w	r1, r3, r2
 8015868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801586a:	4319      	orrs	r1, r3
 801586c:	d110      	bne.n	8015890 <_dtoa_r+0xa20>
 801586e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015872:	d029      	beq.n	80158c8 <_dtoa_r+0xa58>
 8015874:	9b08      	ldr	r3, [sp, #32]
 8015876:	2b00      	cmp	r3, #0
 8015878:	dd02      	ble.n	8015880 <_dtoa_r+0xa10>
 801587a:	9b02      	ldr	r3, [sp, #8]
 801587c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015880:	9b00      	ldr	r3, [sp, #0]
 8015882:	f883 8000 	strb.w	r8, [r3]
 8015886:	e63f      	b.n	8015508 <_dtoa_r+0x698>
 8015888:	4628      	mov	r0, r5
 801588a:	e7bb      	b.n	8015804 <_dtoa_r+0x994>
 801588c:	2201      	movs	r2, #1
 801588e:	e7e1      	b.n	8015854 <_dtoa_r+0x9e4>
 8015890:	9b08      	ldr	r3, [sp, #32]
 8015892:	2b00      	cmp	r3, #0
 8015894:	db04      	blt.n	80158a0 <_dtoa_r+0xa30>
 8015896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015898:	430b      	orrs	r3, r1
 801589a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801589c:	430b      	orrs	r3, r1
 801589e:	d120      	bne.n	80158e2 <_dtoa_r+0xa72>
 80158a0:	2a00      	cmp	r2, #0
 80158a2:	dded      	ble.n	8015880 <_dtoa_r+0xa10>
 80158a4:	4649      	mov	r1, r9
 80158a6:	2201      	movs	r2, #1
 80158a8:	4658      	mov	r0, fp
 80158aa:	f000 fbff 	bl	80160ac <__lshift>
 80158ae:	4621      	mov	r1, r4
 80158b0:	4681      	mov	r9, r0
 80158b2:	f000 fc67 	bl	8016184 <__mcmp>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	dc03      	bgt.n	80158c2 <_dtoa_r+0xa52>
 80158ba:	d1e1      	bne.n	8015880 <_dtoa_r+0xa10>
 80158bc:	f018 0f01 	tst.w	r8, #1
 80158c0:	d0de      	beq.n	8015880 <_dtoa_r+0xa10>
 80158c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80158c6:	d1d8      	bne.n	801587a <_dtoa_r+0xa0a>
 80158c8:	9a00      	ldr	r2, [sp, #0]
 80158ca:	2339      	movs	r3, #57	@ 0x39
 80158cc:	7013      	strb	r3, [r2, #0]
 80158ce:	4633      	mov	r3, r6
 80158d0:	461e      	mov	r6, r3
 80158d2:	3b01      	subs	r3, #1
 80158d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80158d8:	2a39      	cmp	r2, #57	@ 0x39
 80158da:	d052      	beq.n	8015982 <_dtoa_r+0xb12>
 80158dc:	3201      	adds	r2, #1
 80158de:	701a      	strb	r2, [r3, #0]
 80158e0:	e612      	b.n	8015508 <_dtoa_r+0x698>
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	dd07      	ble.n	80158f6 <_dtoa_r+0xa86>
 80158e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80158ea:	d0ed      	beq.n	80158c8 <_dtoa_r+0xa58>
 80158ec:	9a00      	ldr	r2, [sp, #0]
 80158ee:	f108 0301 	add.w	r3, r8, #1
 80158f2:	7013      	strb	r3, [r2, #0]
 80158f4:	e608      	b.n	8015508 <_dtoa_r+0x698>
 80158f6:	9b07      	ldr	r3, [sp, #28]
 80158f8:	9a07      	ldr	r2, [sp, #28]
 80158fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80158fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015900:	4293      	cmp	r3, r2
 8015902:	d028      	beq.n	8015956 <_dtoa_r+0xae6>
 8015904:	4649      	mov	r1, r9
 8015906:	2300      	movs	r3, #0
 8015908:	220a      	movs	r2, #10
 801590a:	4658      	mov	r0, fp
 801590c:	f000 fa22 	bl	8015d54 <__multadd>
 8015910:	42af      	cmp	r7, r5
 8015912:	4681      	mov	r9, r0
 8015914:	f04f 0300 	mov.w	r3, #0
 8015918:	f04f 020a 	mov.w	r2, #10
 801591c:	4639      	mov	r1, r7
 801591e:	4658      	mov	r0, fp
 8015920:	d107      	bne.n	8015932 <_dtoa_r+0xac2>
 8015922:	f000 fa17 	bl	8015d54 <__multadd>
 8015926:	4607      	mov	r7, r0
 8015928:	4605      	mov	r5, r0
 801592a:	9b07      	ldr	r3, [sp, #28]
 801592c:	3301      	adds	r3, #1
 801592e:	9307      	str	r3, [sp, #28]
 8015930:	e774      	b.n	801581c <_dtoa_r+0x9ac>
 8015932:	f000 fa0f 	bl	8015d54 <__multadd>
 8015936:	4629      	mov	r1, r5
 8015938:	4607      	mov	r7, r0
 801593a:	2300      	movs	r3, #0
 801593c:	220a      	movs	r2, #10
 801593e:	4658      	mov	r0, fp
 8015940:	f000 fa08 	bl	8015d54 <__multadd>
 8015944:	4605      	mov	r5, r0
 8015946:	e7f0      	b.n	801592a <_dtoa_r+0xaba>
 8015948:	9b00      	ldr	r3, [sp, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	bfcc      	ite	gt
 801594e:	461e      	movgt	r6, r3
 8015950:	2601      	movle	r6, #1
 8015952:	4456      	add	r6, sl
 8015954:	2700      	movs	r7, #0
 8015956:	4649      	mov	r1, r9
 8015958:	2201      	movs	r2, #1
 801595a:	4658      	mov	r0, fp
 801595c:	f000 fba6 	bl	80160ac <__lshift>
 8015960:	4621      	mov	r1, r4
 8015962:	4681      	mov	r9, r0
 8015964:	f000 fc0e 	bl	8016184 <__mcmp>
 8015968:	2800      	cmp	r0, #0
 801596a:	dcb0      	bgt.n	80158ce <_dtoa_r+0xa5e>
 801596c:	d102      	bne.n	8015974 <_dtoa_r+0xb04>
 801596e:	f018 0f01 	tst.w	r8, #1
 8015972:	d1ac      	bne.n	80158ce <_dtoa_r+0xa5e>
 8015974:	4633      	mov	r3, r6
 8015976:	461e      	mov	r6, r3
 8015978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801597c:	2a30      	cmp	r2, #48	@ 0x30
 801597e:	d0fa      	beq.n	8015976 <_dtoa_r+0xb06>
 8015980:	e5c2      	b.n	8015508 <_dtoa_r+0x698>
 8015982:	459a      	cmp	sl, r3
 8015984:	d1a4      	bne.n	80158d0 <_dtoa_r+0xa60>
 8015986:	9b04      	ldr	r3, [sp, #16]
 8015988:	3301      	adds	r3, #1
 801598a:	9304      	str	r3, [sp, #16]
 801598c:	2331      	movs	r3, #49	@ 0x31
 801598e:	f88a 3000 	strb.w	r3, [sl]
 8015992:	e5b9      	b.n	8015508 <_dtoa_r+0x698>
 8015994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80159f4 <_dtoa_r+0xb84>
 801599a:	b11b      	cbz	r3, 80159a4 <_dtoa_r+0xb34>
 801599c:	f10a 0308 	add.w	r3, sl, #8
 80159a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80159a2:	6013      	str	r3, [r2, #0]
 80159a4:	4650      	mov	r0, sl
 80159a6:	b019      	add	sp, #100	@ 0x64
 80159a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ae:	2b01      	cmp	r3, #1
 80159b0:	f77f ae37 	ble.w	8015622 <_dtoa_r+0x7b2>
 80159b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80159b8:	2001      	movs	r0, #1
 80159ba:	e655      	b.n	8015668 <_dtoa_r+0x7f8>
 80159bc:	9b00      	ldr	r3, [sp, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	f77f aed6 	ble.w	8015770 <_dtoa_r+0x900>
 80159c4:	4656      	mov	r6, sl
 80159c6:	4621      	mov	r1, r4
 80159c8:	4648      	mov	r0, r9
 80159ca:	f7ff f9c7 	bl	8014d5c <quorem>
 80159ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80159d2:	f806 8b01 	strb.w	r8, [r6], #1
 80159d6:	9b00      	ldr	r3, [sp, #0]
 80159d8:	eba6 020a 	sub.w	r2, r6, sl
 80159dc:	4293      	cmp	r3, r2
 80159de:	ddb3      	ble.n	8015948 <_dtoa_r+0xad8>
 80159e0:	4649      	mov	r1, r9
 80159e2:	2300      	movs	r3, #0
 80159e4:	220a      	movs	r2, #10
 80159e6:	4658      	mov	r0, fp
 80159e8:	f000 f9b4 	bl	8015d54 <__multadd>
 80159ec:	4681      	mov	r9, r0
 80159ee:	e7ea      	b.n	80159c6 <_dtoa_r+0xb56>
 80159f0:	080192cf 	.word	0x080192cf
 80159f4:	0801926a 	.word	0x0801926a

080159f8 <_free_r>:
 80159f8:	b538      	push	{r3, r4, r5, lr}
 80159fa:	4605      	mov	r5, r0
 80159fc:	2900      	cmp	r1, #0
 80159fe:	d041      	beq.n	8015a84 <_free_r+0x8c>
 8015a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a04:	1f0c      	subs	r4, r1, #4
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	bfb8      	it	lt
 8015a0a:	18e4      	addlt	r4, r4, r3
 8015a0c:	f000 f934 	bl	8015c78 <__malloc_lock>
 8015a10:	4a1d      	ldr	r2, [pc, #116]	@ (8015a88 <_free_r+0x90>)
 8015a12:	6813      	ldr	r3, [r2, #0]
 8015a14:	b933      	cbnz	r3, 8015a24 <_free_r+0x2c>
 8015a16:	6063      	str	r3, [r4, #4]
 8015a18:	6014      	str	r4, [r2, #0]
 8015a1a:	4628      	mov	r0, r5
 8015a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a20:	f000 b930 	b.w	8015c84 <__malloc_unlock>
 8015a24:	42a3      	cmp	r3, r4
 8015a26:	d908      	bls.n	8015a3a <_free_r+0x42>
 8015a28:	6820      	ldr	r0, [r4, #0]
 8015a2a:	1821      	adds	r1, r4, r0
 8015a2c:	428b      	cmp	r3, r1
 8015a2e:	bf01      	itttt	eq
 8015a30:	6819      	ldreq	r1, [r3, #0]
 8015a32:	685b      	ldreq	r3, [r3, #4]
 8015a34:	1809      	addeq	r1, r1, r0
 8015a36:	6021      	streq	r1, [r4, #0]
 8015a38:	e7ed      	b.n	8015a16 <_free_r+0x1e>
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	b10b      	cbz	r3, 8015a44 <_free_r+0x4c>
 8015a40:	42a3      	cmp	r3, r4
 8015a42:	d9fa      	bls.n	8015a3a <_free_r+0x42>
 8015a44:	6811      	ldr	r1, [r2, #0]
 8015a46:	1850      	adds	r0, r2, r1
 8015a48:	42a0      	cmp	r0, r4
 8015a4a:	d10b      	bne.n	8015a64 <_free_r+0x6c>
 8015a4c:	6820      	ldr	r0, [r4, #0]
 8015a4e:	4401      	add	r1, r0
 8015a50:	1850      	adds	r0, r2, r1
 8015a52:	4283      	cmp	r3, r0
 8015a54:	6011      	str	r1, [r2, #0]
 8015a56:	d1e0      	bne.n	8015a1a <_free_r+0x22>
 8015a58:	6818      	ldr	r0, [r3, #0]
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	6053      	str	r3, [r2, #4]
 8015a5e:	4408      	add	r0, r1
 8015a60:	6010      	str	r0, [r2, #0]
 8015a62:	e7da      	b.n	8015a1a <_free_r+0x22>
 8015a64:	d902      	bls.n	8015a6c <_free_r+0x74>
 8015a66:	230c      	movs	r3, #12
 8015a68:	602b      	str	r3, [r5, #0]
 8015a6a:	e7d6      	b.n	8015a1a <_free_r+0x22>
 8015a6c:	6820      	ldr	r0, [r4, #0]
 8015a6e:	1821      	adds	r1, r4, r0
 8015a70:	428b      	cmp	r3, r1
 8015a72:	bf04      	itt	eq
 8015a74:	6819      	ldreq	r1, [r3, #0]
 8015a76:	685b      	ldreq	r3, [r3, #4]
 8015a78:	6063      	str	r3, [r4, #4]
 8015a7a:	bf04      	itt	eq
 8015a7c:	1809      	addeq	r1, r1, r0
 8015a7e:	6021      	streq	r1, [r4, #0]
 8015a80:	6054      	str	r4, [r2, #4]
 8015a82:	e7ca      	b.n	8015a1a <_free_r+0x22>
 8015a84:	bd38      	pop	{r3, r4, r5, pc}
 8015a86:	bf00      	nop
 8015a88:	2000a8ec 	.word	0x2000a8ec

08015a8c <_findenv_r>:
 8015a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a90:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015b00 <_findenv_r+0x74>
 8015a94:	4606      	mov	r6, r0
 8015a96:	4689      	mov	r9, r1
 8015a98:	4617      	mov	r7, r2
 8015a9a:	f001 f837 	bl	8016b0c <__env_lock>
 8015a9e:	f8da 4000 	ldr.w	r4, [sl]
 8015aa2:	b134      	cbz	r4, 8015ab2 <_findenv_r+0x26>
 8015aa4:	464b      	mov	r3, r9
 8015aa6:	4698      	mov	r8, r3
 8015aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aac:	b13a      	cbz	r2, 8015abe <_findenv_r+0x32>
 8015aae:	2a3d      	cmp	r2, #61	@ 0x3d
 8015ab0:	d1f9      	bne.n	8015aa6 <_findenv_r+0x1a>
 8015ab2:	4630      	mov	r0, r6
 8015ab4:	f001 f830 	bl	8016b18 <__env_unlock>
 8015ab8:	2000      	movs	r0, #0
 8015aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015abe:	eba8 0809 	sub.w	r8, r8, r9
 8015ac2:	46a3      	mov	fp, r4
 8015ac4:	f854 0b04 	ldr.w	r0, [r4], #4
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d0f2      	beq.n	8015ab2 <_findenv_r+0x26>
 8015acc:	4642      	mov	r2, r8
 8015ace:	4649      	mov	r1, r9
 8015ad0:	f000 ff34 	bl	801693c <strncmp>
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d1f4      	bne.n	8015ac2 <_findenv_r+0x36>
 8015ad8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015adc:	eb03 0508 	add.w	r5, r3, r8
 8015ae0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015ae4:	2b3d      	cmp	r3, #61	@ 0x3d
 8015ae6:	d1ec      	bne.n	8015ac2 <_findenv_r+0x36>
 8015ae8:	f8da 3000 	ldr.w	r3, [sl]
 8015aec:	ebab 0303 	sub.w	r3, fp, r3
 8015af0:	109b      	asrs	r3, r3, #2
 8015af2:	4630      	mov	r0, r6
 8015af4:	603b      	str	r3, [r7, #0]
 8015af6:	f001 f80f 	bl	8016b18 <__env_unlock>
 8015afa:	1c68      	adds	r0, r5, #1
 8015afc:	e7dd      	b.n	8015aba <_findenv_r+0x2e>
 8015afe:	bf00      	nop
 8015b00:	20000010 	.word	0x20000010

08015b04 <_getenv_r>:
 8015b04:	b507      	push	{r0, r1, r2, lr}
 8015b06:	aa01      	add	r2, sp, #4
 8015b08:	f7ff ffc0 	bl	8015a8c <_findenv_r>
 8015b0c:	b003      	add	sp, #12
 8015b0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015b14 <malloc>:
 8015b14:	4b02      	ldr	r3, [pc, #8]	@ (8015b20 <malloc+0xc>)
 8015b16:	4601      	mov	r1, r0
 8015b18:	6818      	ldr	r0, [r3, #0]
 8015b1a:	f000 b82d 	b.w	8015b78 <_malloc_r>
 8015b1e:	bf00      	nop
 8015b20:	20000034 	.word	0x20000034

08015b24 <free>:
 8015b24:	4b02      	ldr	r3, [pc, #8]	@ (8015b30 <free+0xc>)
 8015b26:	4601      	mov	r1, r0
 8015b28:	6818      	ldr	r0, [r3, #0]
 8015b2a:	f7ff bf65 	b.w	80159f8 <_free_r>
 8015b2e:	bf00      	nop
 8015b30:	20000034 	.word	0x20000034

08015b34 <sbrk_aligned>:
 8015b34:	b570      	push	{r4, r5, r6, lr}
 8015b36:	4e0f      	ldr	r6, [pc, #60]	@ (8015b74 <sbrk_aligned+0x40>)
 8015b38:	460c      	mov	r4, r1
 8015b3a:	6831      	ldr	r1, [r6, #0]
 8015b3c:	4605      	mov	r5, r0
 8015b3e:	b911      	cbnz	r1, 8015b46 <sbrk_aligned+0x12>
 8015b40:	f000 ffb8 	bl	8016ab4 <_sbrk_r>
 8015b44:	6030      	str	r0, [r6, #0]
 8015b46:	4621      	mov	r1, r4
 8015b48:	4628      	mov	r0, r5
 8015b4a:	f000 ffb3 	bl	8016ab4 <_sbrk_r>
 8015b4e:	1c43      	adds	r3, r0, #1
 8015b50:	d103      	bne.n	8015b5a <sbrk_aligned+0x26>
 8015b52:	f04f 34ff 	mov.w	r4, #4294967295
 8015b56:	4620      	mov	r0, r4
 8015b58:	bd70      	pop	{r4, r5, r6, pc}
 8015b5a:	1cc4      	adds	r4, r0, #3
 8015b5c:	f024 0403 	bic.w	r4, r4, #3
 8015b60:	42a0      	cmp	r0, r4
 8015b62:	d0f8      	beq.n	8015b56 <sbrk_aligned+0x22>
 8015b64:	1a21      	subs	r1, r4, r0
 8015b66:	4628      	mov	r0, r5
 8015b68:	f000 ffa4 	bl	8016ab4 <_sbrk_r>
 8015b6c:	3001      	adds	r0, #1
 8015b6e:	d1f2      	bne.n	8015b56 <sbrk_aligned+0x22>
 8015b70:	e7ef      	b.n	8015b52 <sbrk_aligned+0x1e>
 8015b72:	bf00      	nop
 8015b74:	2000a8e8 	.word	0x2000a8e8

08015b78 <_malloc_r>:
 8015b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b7c:	1ccd      	adds	r5, r1, #3
 8015b7e:	f025 0503 	bic.w	r5, r5, #3
 8015b82:	3508      	adds	r5, #8
 8015b84:	2d0c      	cmp	r5, #12
 8015b86:	bf38      	it	cc
 8015b88:	250c      	movcc	r5, #12
 8015b8a:	2d00      	cmp	r5, #0
 8015b8c:	4606      	mov	r6, r0
 8015b8e:	db01      	blt.n	8015b94 <_malloc_r+0x1c>
 8015b90:	42a9      	cmp	r1, r5
 8015b92:	d904      	bls.n	8015b9e <_malloc_r+0x26>
 8015b94:	230c      	movs	r3, #12
 8015b96:	6033      	str	r3, [r6, #0]
 8015b98:	2000      	movs	r0, #0
 8015b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015c74 <_malloc_r+0xfc>
 8015ba2:	f000 f869 	bl	8015c78 <__malloc_lock>
 8015ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8015baa:	461c      	mov	r4, r3
 8015bac:	bb44      	cbnz	r4, 8015c00 <_malloc_r+0x88>
 8015bae:	4629      	mov	r1, r5
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f7ff ffbf 	bl	8015b34 <sbrk_aligned>
 8015bb6:	1c43      	adds	r3, r0, #1
 8015bb8:	4604      	mov	r4, r0
 8015bba:	d158      	bne.n	8015c6e <_malloc_r+0xf6>
 8015bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8015bc0:	4627      	mov	r7, r4
 8015bc2:	2f00      	cmp	r7, #0
 8015bc4:	d143      	bne.n	8015c4e <_malloc_r+0xd6>
 8015bc6:	2c00      	cmp	r4, #0
 8015bc8:	d04b      	beq.n	8015c62 <_malloc_r+0xea>
 8015bca:	6823      	ldr	r3, [r4, #0]
 8015bcc:	4639      	mov	r1, r7
 8015bce:	4630      	mov	r0, r6
 8015bd0:	eb04 0903 	add.w	r9, r4, r3
 8015bd4:	f000 ff6e 	bl	8016ab4 <_sbrk_r>
 8015bd8:	4581      	cmp	r9, r0
 8015bda:	d142      	bne.n	8015c62 <_malloc_r+0xea>
 8015bdc:	6821      	ldr	r1, [r4, #0]
 8015bde:	1a6d      	subs	r5, r5, r1
 8015be0:	4629      	mov	r1, r5
 8015be2:	4630      	mov	r0, r6
 8015be4:	f7ff ffa6 	bl	8015b34 <sbrk_aligned>
 8015be8:	3001      	adds	r0, #1
 8015bea:	d03a      	beq.n	8015c62 <_malloc_r+0xea>
 8015bec:	6823      	ldr	r3, [r4, #0]
 8015bee:	442b      	add	r3, r5
 8015bf0:	6023      	str	r3, [r4, #0]
 8015bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8015bf6:	685a      	ldr	r2, [r3, #4]
 8015bf8:	bb62      	cbnz	r2, 8015c54 <_malloc_r+0xdc>
 8015bfa:	f8c8 7000 	str.w	r7, [r8]
 8015bfe:	e00f      	b.n	8015c20 <_malloc_r+0xa8>
 8015c00:	6822      	ldr	r2, [r4, #0]
 8015c02:	1b52      	subs	r2, r2, r5
 8015c04:	d420      	bmi.n	8015c48 <_malloc_r+0xd0>
 8015c06:	2a0b      	cmp	r2, #11
 8015c08:	d917      	bls.n	8015c3a <_malloc_r+0xc2>
 8015c0a:	1961      	adds	r1, r4, r5
 8015c0c:	42a3      	cmp	r3, r4
 8015c0e:	6025      	str	r5, [r4, #0]
 8015c10:	bf18      	it	ne
 8015c12:	6059      	strne	r1, [r3, #4]
 8015c14:	6863      	ldr	r3, [r4, #4]
 8015c16:	bf08      	it	eq
 8015c18:	f8c8 1000 	streq.w	r1, [r8]
 8015c1c:	5162      	str	r2, [r4, r5]
 8015c1e:	604b      	str	r3, [r1, #4]
 8015c20:	4630      	mov	r0, r6
 8015c22:	f000 f82f 	bl	8015c84 <__malloc_unlock>
 8015c26:	f104 000b 	add.w	r0, r4, #11
 8015c2a:	1d23      	adds	r3, r4, #4
 8015c2c:	f020 0007 	bic.w	r0, r0, #7
 8015c30:	1ac2      	subs	r2, r0, r3
 8015c32:	bf1c      	itt	ne
 8015c34:	1a1b      	subne	r3, r3, r0
 8015c36:	50a3      	strne	r3, [r4, r2]
 8015c38:	e7af      	b.n	8015b9a <_malloc_r+0x22>
 8015c3a:	6862      	ldr	r2, [r4, #4]
 8015c3c:	42a3      	cmp	r3, r4
 8015c3e:	bf0c      	ite	eq
 8015c40:	f8c8 2000 	streq.w	r2, [r8]
 8015c44:	605a      	strne	r2, [r3, #4]
 8015c46:	e7eb      	b.n	8015c20 <_malloc_r+0xa8>
 8015c48:	4623      	mov	r3, r4
 8015c4a:	6864      	ldr	r4, [r4, #4]
 8015c4c:	e7ae      	b.n	8015bac <_malloc_r+0x34>
 8015c4e:	463c      	mov	r4, r7
 8015c50:	687f      	ldr	r7, [r7, #4]
 8015c52:	e7b6      	b.n	8015bc2 <_malloc_r+0x4a>
 8015c54:	461a      	mov	r2, r3
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	42a3      	cmp	r3, r4
 8015c5a:	d1fb      	bne.n	8015c54 <_malloc_r+0xdc>
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	6053      	str	r3, [r2, #4]
 8015c60:	e7de      	b.n	8015c20 <_malloc_r+0xa8>
 8015c62:	230c      	movs	r3, #12
 8015c64:	6033      	str	r3, [r6, #0]
 8015c66:	4630      	mov	r0, r6
 8015c68:	f000 f80c 	bl	8015c84 <__malloc_unlock>
 8015c6c:	e794      	b.n	8015b98 <_malloc_r+0x20>
 8015c6e:	6005      	str	r5, [r0, #0]
 8015c70:	e7d6      	b.n	8015c20 <_malloc_r+0xa8>
 8015c72:	bf00      	nop
 8015c74:	2000a8ec 	.word	0x2000a8ec

08015c78 <__malloc_lock>:
 8015c78:	4801      	ldr	r0, [pc, #4]	@ (8015c80 <__malloc_lock+0x8>)
 8015c7a:	f7ff b82f 	b.w	8014cdc <__retarget_lock_acquire_recursive>
 8015c7e:	bf00      	nop
 8015c80:	2000a8e6 	.word	0x2000a8e6

08015c84 <__malloc_unlock>:
 8015c84:	4801      	ldr	r0, [pc, #4]	@ (8015c8c <__malloc_unlock+0x8>)
 8015c86:	f7ff b82b 	b.w	8014ce0 <__retarget_lock_release_recursive>
 8015c8a:	bf00      	nop
 8015c8c:	2000a8e6 	.word	0x2000a8e6

08015c90 <_Balloc>:
 8015c90:	b570      	push	{r4, r5, r6, lr}
 8015c92:	69c6      	ldr	r6, [r0, #28]
 8015c94:	4604      	mov	r4, r0
 8015c96:	460d      	mov	r5, r1
 8015c98:	b976      	cbnz	r6, 8015cb8 <_Balloc+0x28>
 8015c9a:	2010      	movs	r0, #16
 8015c9c:	f7ff ff3a 	bl	8015b14 <malloc>
 8015ca0:	4602      	mov	r2, r0
 8015ca2:	61e0      	str	r0, [r4, #28]
 8015ca4:	b920      	cbnz	r0, 8015cb0 <_Balloc+0x20>
 8015ca6:	4b18      	ldr	r3, [pc, #96]	@ (8015d08 <_Balloc+0x78>)
 8015ca8:	4818      	ldr	r0, [pc, #96]	@ (8015d0c <_Balloc+0x7c>)
 8015caa:	216b      	movs	r1, #107	@ 0x6b
 8015cac:	f7ff f830 	bl	8014d10 <__assert_func>
 8015cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015cb4:	6006      	str	r6, [r0, #0]
 8015cb6:	60c6      	str	r6, [r0, #12]
 8015cb8:	69e6      	ldr	r6, [r4, #28]
 8015cba:	68f3      	ldr	r3, [r6, #12]
 8015cbc:	b183      	cbz	r3, 8015ce0 <_Balloc+0x50>
 8015cbe:	69e3      	ldr	r3, [r4, #28]
 8015cc0:	68db      	ldr	r3, [r3, #12]
 8015cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015cc6:	b9b8      	cbnz	r0, 8015cf8 <_Balloc+0x68>
 8015cc8:	2101      	movs	r1, #1
 8015cca:	fa01 f605 	lsl.w	r6, r1, r5
 8015cce:	1d72      	adds	r2, r6, #5
 8015cd0:	0092      	lsls	r2, r2, #2
 8015cd2:	4620      	mov	r0, r4
 8015cd4:	f000 ff05 	bl	8016ae2 <_calloc_r>
 8015cd8:	b160      	cbz	r0, 8015cf4 <_Balloc+0x64>
 8015cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015cde:	e00e      	b.n	8015cfe <_Balloc+0x6e>
 8015ce0:	2221      	movs	r2, #33	@ 0x21
 8015ce2:	2104      	movs	r1, #4
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	f000 fefc 	bl	8016ae2 <_calloc_r>
 8015cea:	69e3      	ldr	r3, [r4, #28]
 8015cec:	60f0      	str	r0, [r6, #12]
 8015cee:	68db      	ldr	r3, [r3, #12]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d1e4      	bne.n	8015cbe <_Balloc+0x2e>
 8015cf4:	2000      	movs	r0, #0
 8015cf6:	bd70      	pop	{r4, r5, r6, pc}
 8015cf8:	6802      	ldr	r2, [r0, #0]
 8015cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015cfe:	2300      	movs	r3, #0
 8015d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d04:	e7f7      	b.n	8015cf6 <_Balloc+0x66>
 8015d06:	bf00      	nop
 8015d08:	08019024 	.word	0x08019024
 8015d0c:	080192e0 	.word	0x080192e0

08015d10 <_Bfree>:
 8015d10:	b570      	push	{r4, r5, r6, lr}
 8015d12:	69c6      	ldr	r6, [r0, #28]
 8015d14:	4605      	mov	r5, r0
 8015d16:	460c      	mov	r4, r1
 8015d18:	b976      	cbnz	r6, 8015d38 <_Bfree+0x28>
 8015d1a:	2010      	movs	r0, #16
 8015d1c:	f7ff fefa 	bl	8015b14 <malloc>
 8015d20:	4602      	mov	r2, r0
 8015d22:	61e8      	str	r0, [r5, #28]
 8015d24:	b920      	cbnz	r0, 8015d30 <_Bfree+0x20>
 8015d26:	4b09      	ldr	r3, [pc, #36]	@ (8015d4c <_Bfree+0x3c>)
 8015d28:	4809      	ldr	r0, [pc, #36]	@ (8015d50 <_Bfree+0x40>)
 8015d2a:	218f      	movs	r1, #143	@ 0x8f
 8015d2c:	f7fe fff0 	bl	8014d10 <__assert_func>
 8015d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d34:	6006      	str	r6, [r0, #0]
 8015d36:	60c6      	str	r6, [r0, #12]
 8015d38:	b13c      	cbz	r4, 8015d4a <_Bfree+0x3a>
 8015d3a:	69eb      	ldr	r3, [r5, #28]
 8015d3c:	6862      	ldr	r2, [r4, #4]
 8015d3e:	68db      	ldr	r3, [r3, #12]
 8015d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015d44:	6021      	str	r1, [r4, #0]
 8015d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}
 8015d4c:	08019024 	.word	0x08019024
 8015d50:	080192e0 	.word	0x080192e0

08015d54 <__multadd>:
 8015d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d58:	690d      	ldr	r5, [r1, #16]
 8015d5a:	4607      	mov	r7, r0
 8015d5c:	460c      	mov	r4, r1
 8015d5e:	461e      	mov	r6, r3
 8015d60:	f101 0c14 	add.w	ip, r1, #20
 8015d64:	2000      	movs	r0, #0
 8015d66:	f8dc 3000 	ldr.w	r3, [ip]
 8015d6a:	b299      	uxth	r1, r3
 8015d6c:	fb02 6101 	mla	r1, r2, r1, r6
 8015d70:	0c1e      	lsrs	r6, r3, #16
 8015d72:	0c0b      	lsrs	r3, r1, #16
 8015d74:	fb02 3306 	mla	r3, r2, r6, r3
 8015d78:	b289      	uxth	r1, r1
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015d80:	4285      	cmp	r5, r0
 8015d82:	f84c 1b04 	str.w	r1, [ip], #4
 8015d86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015d8a:	dcec      	bgt.n	8015d66 <__multadd+0x12>
 8015d8c:	b30e      	cbz	r6, 8015dd2 <__multadd+0x7e>
 8015d8e:	68a3      	ldr	r3, [r4, #8]
 8015d90:	42ab      	cmp	r3, r5
 8015d92:	dc19      	bgt.n	8015dc8 <__multadd+0x74>
 8015d94:	6861      	ldr	r1, [r4, #4]
 8015d96:	4638      	mov	r0, r7
 8015d98:	3101      	adds	r1, #1
 8015d9a:	f7ff ff79 	bl	8015c90 <_Balloc>
 8015d9e:	4680      	mov	r8, r0
 8015da0:	b928      	cbnz	r0, 8015dae <__multadd+0x5a>
 8015da2:	4602      	mov	r2, r0
 8015da4:	4b0c      	ldr	r3, [pc, #48]	@ (8015dd8 <__multadd+0x84>)
 8015da6:	480d      	ldr	r0, [pc, #52]	@ (8015ddc <__multadd+0x88>)
 8015da8:	21ba      	movs	r1, #186	@ 0xba
 8015daa:	f7fe ffb1 	bl	8014d10 <__assert_func>
 8015dae:	6922      	ldr	r2, [r4, #16]
 8015db0:	3202      	adds	r2, #2
 8015db2:	f104 010c 	add.w	r1, r4, #12
 8015db6:	0092      	lsls	r2, r2, #2
 8015db8:	300c      	adds	r0, #12
 8015dba:	f7fe ff9a 	bl	8014cf2 <memcpy>
 8015dbe:	4621      	mov	r1, r4
 8015dc0:	4638      	mov	r0, r7
 8015dc2:	f7ff ffa5 	bl	8015d10 <_Bfree>
 8015dc6:	4644      	mov	r4, r8
 8015dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015dcc:	3501      	adds	r5, #1
 8015dce:	615e      	str	r6, [r3, #20]
 8015dd0:	6125      	str	r5, [r4, #16]
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd8:	080192cf 	.word	0x080192cf
 8015ddc:	080192e0 	.word	0x080192e0

08015de0 <__hi0bits>:
 8015de0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015de4:	4603      	mov	r3, r0
 8015de6:	bf36      	itet	cc
 8015de8:	0403      	lslcc	r3, r0, #16
 8015dea:	2000      	movcs	r0, #0
 8015dec:	2010      	movcc	r0, #16
 8015dee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015df2:	bf3c      	itt	cc
 8015df4:	021b      	lslcc	r3, r3, #8
 8015df6:	3008      	addcc	r0, #8
 8015df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015dfc:	bf3c      	itt	cc
 8015dfe:	011b      	lslcc	r3, r3, #4
 8015e00:	3004      	addcc	r0, #4
 8015e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015e06:	bf3c      	itt	cc
 8015e08:	009b      	lslcc	r3, r3, #2
 8015e0a:	3002      	addcc	r0, #2
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	db05      	blt.n	8015e1c <__hi0bits+0x3c>
 8015e10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015e14:	f100 0001 	add.w	r0, r0, #1
 8015e18:	bf08      	it	eq
 8015e1a:	2020      	moveq	r0, #32
 8015e1c:	4770      	bx	lr

08015e1e <__lo0bits>:
 8015e1e:	6803      	ldr	r3, [r0, #0]
 8015e20:	4602      	mov	r2, r0
 8015e22:	f013 0007 	ands.w	r0, r3, #7
 8015e26:	d00b      	beq.n	8015e40 <__lo0bits+0x22>
 8015e28:	07d9      	lsls	r1, r3, #31
 8015e2a:	d421      	bmi.n	8015e70 <__lo0bits+0x52>
 8015e2c:	0798      	lsls	r0, r3, #30
 8015e2e:	bf49      	itett	mi
 8015e30:	085b      	lsrmi	r3, r3, #1
 8015e32:	089b      	lsrpl	r3, r3, #2
 8015e34:	2001      	movmi	r0, #1
 8015e36:	6013      	strmi	r3, [r2, #0]
 8015e38:	bf5c      	itt	pl
 8015e3a:	6013      	strpl	r3, [r2, #0]
 8015e3c:	2002      	movpl	r0, #2
 8015e3e:	4770      	bx	lr
 8015e40:	b299      	uxth	r1, r3
 8015e42:	b909      	cbnz	r1, 8015e48 <__lo0bits+0x2a>
 8015e44:	0c1b      	lsrs	r3, r3, #16
 8015e46:	2010      	movs	r0, #16
 8015e48:	b2d9      	uxtb	r1, r3
 8015e4a:	b909      	cbnz	r1, 8015e50 <__lo0bits+0x32>
 8015e4c:	3008      	adds	r0, #8
 8015e4e:	0a1b      	lsrs	r3, r3, #8
 8015e50:	0719      	lsls	r1, r3, #28
 8015e52:	bf04      	itt	eq
 8015e54:	091b      	lsreq	r3, r3, #4
 8015e56:	3004      	addeq	r0, #4
 8015e58:	0799      	lsls	r1, r3, #30
 8015e5a:	bf04      	itt	eq
 8015e5c:	089b      	lsreq	r3, r3, #2
 8015e5e:	3002      	addeq	r0, #2
 8015e60:	07d9      	lsls	r1, r3, #31
 8015e62:	d403      	bmi.n	8015e6c <__lo0bits+0x4e>
 8015e64:	085b      	lsrs	r3, r3, #1
 8015e66:	f100 0001 	add.w	r0, r0, #1
 8015e6a:	d003      	beq.n	8015e74 <__lo0bits+0x56>
 8015e6c:	6013      	str	r3, [r2, #0]
 8015e6e:	4770      	bx	lr
 8015e70:	2000      	movs	r0, #0
 8015e72:	4770      	bx	lr
 8015e74:	2020      	movs	r0, #32
 8015e76:	4770      	bx	lr

08015e78 <__i2b>:
 8015e78:	b510      	push	{r4, lr}
 8015e7a:	460c      	mov	r4, r1
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	f7ff ff07 	bl	8015c90 <_Balloc>
 8015e82:	4602      	mov	r2, r0
 8015e84:	b928      	cbnz	r0, 8015e92 <__i2b+0x1a>
 8015e86:	4b05      	ldr	r3, [pc, #20]	@ (8015e9c <__i2b+0x24>)
 8015e88:	4805      	ldr	r0, [pc, #20]	@ (8015ea0 <__i2b+0x28>)
 8015e8a:	f240 1145 	movw	r1, #325	@ 0x145
 8015e8e:	f7fe ff3f 	bl	8014d10 <__assert_func>
 8015e92:	2301      	movs	r3, #1
 8015e94:	6144      	str	r4, [r0, #20]
 8015e96:	6103      	str	r3, [r0, #16]
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	080192cf 	.word	0x080192cf
 8015ea0:	080192e0 	.word	0x080192e0

08015ea4 <__multiply>:
 8015ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea8:	4614      	mov	r4, r2
 8015eaa:	690a      	ldr	r2, [r1, #16]
 8015eac:	6923      	ldr	r3, [r4, #16]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	bfa8      	it	ge
 8015eb2:	4623      	movge	r3, r4
 8015eb4:	460f      	mov	r7, r1
 8015eb6:	bfa4      	itt	ge
 8015eb8:	460c      	movge	r4, r1
 8015eba:	461f      	movge	r7, r3
 8015ebc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015ec0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015ec4:	68a3      	ldr	r3, [r4, #8]
 8015ec6:	6861      	ldr	r1, [r4, #4]
 8015ec8:	eb0a 0609 	add.w	r6, sl, r9
 8015ecc:	42b3      	cmp	r3, r6
 8015ece:	b085      	sub	sp, #20
 8015ed0:	bfb8      	it	lt
 8015ed2:	3101      	addlt	r1, #1
 8015ed4:	f7ff fedc 	bl	8015c90 <_Balloc>
 8015ed8:	b930      	cbnz	r0, 8015ee8 <__multiply+0x44>
 8015eda:	4602      	mov	r2, r0
 8015edc:	4b44      	ldr	r3, [pc, #272]	@ (8015ff0 <__multiply+0x14c>)
 8015ede:	4845      	ldr	r0, [pc, #276]	@ (8015ff4 <__multiply+0x150>)
 8015ee0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015ee4:	f7fe ff14 	bl	8014d10 <__assert_func>
 8015ee8:	f100 0514 	add.w	r5, r0, #20
 8015eec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015ef0:	462b      	mov	r3, r5
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	4543      	cmp	r3, r8
 8015ef6:	d321      	bcc.n	8015f3c <__multiply+0x98>
 8015ef8:	f107 0114 	add.w	r1, r7, #20
 8015efc:	f104 0214 	add.w	r2, r4, #20
 8015f00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015f04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015f08:	9302      	str	r3, [sp, #8]
 8015f0a:	1b13      	subs	r3, r2, r4
 8015f0c:	3b15      	subs	r3, #21
 8015f0e:	f023 0303 	bic.w	r3, r3, #3
 8015f12:	3304      	adds	r3, #4
 8015f14:	f104 0715 	add.w	r7, r4, #21
 8015f18:	42ba      	cmp	r2, r7
 8015f1a:	bf38      	it	cc
 8015f1c:	2304      	movcc	r3, #4
 8015f1e:	9301      	str	r3, [sp, #4]
 8015f20:	9b02      	ldr	r3, [sp, #8]
 8015f22:	9103      	str	r1, [sp, #12]
 8015f24:	428b      	cmp	r3, r1
 8015f26:	d80c      	bhi.n	8015f42 <__multiply+0x9e>
 8015f28:	2e00      	cmp	r6, #0
 8015f2a:	dd03      	ble.n	8015f34 <__multiply+0x90>
 8015f2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d05b      	beq.n	8015fec <__multiply+0x148>
 8015f34:	6106      	str	r6, [r0, #16]
 8015f36:	b005      	add	sp, #20
 8015f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3c:	f843 2b04 	str.w	r2, [r3], #4
 8015f40:	e7d8      	b.n	8015ef4 <__multiply+0x50>
 8015f42:	f8b1 a000 	ldrh.w	sl, [r1]
 8015f46:	f1ba 0f00 	cmp.w	sl, #0
 8015f4a:	d024      	beq.n	8015f96 <__multiply+0xf2>
 8015f4c:	f104 0e14 	add.w	lr, r4, #20
 8015f50:	46a9      	mov	r9, r5
 8015f52:	f04f 0c00 	mov.w	ip, #0
 8015f56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015f5a:	f8d9 3000 	ldr.w	r3, [r9]
 8015f5e:	fa1f fb87 	uxth.w	fp, r7
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	fb0a 330b 	mla	r3, sl, fp, r3
 8015f68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015f6c:	f8d9 7000 	ldr.w	r7, [r9]
 8015f70:	4463      	add	r3, ip
 8015f72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015f76:	fb0a c70b 	mla	r7, sl, fp, ip
 8015f7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015f84:	4572      	cmp	r2, lr
 8015f86:	f849 3b04 	str.w	r3, [r9], #4
 8015f8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015f8e:	d8e2      	bhi.n	8015f56 <__multiply+0xb2>
 8015f90:	9b01      	ldr	r3, [sp, #4]
 8015f92:	f845 c003 	str.w	ip, [r5, r3]
 8015f96:	9b03      	ldr	r3, [sp, #12]
 8015f98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015f9c:	3104      	adds	r1, #4
 8015f9e:	f1b9 0f00 	cmp.w	r9, #0
 8015fa2:	d021      	beq.n	8015fe8 <__multiply+0x144>
 8015fa4:	682b      	ldr	r3, [r5, #0]
 8015fa6:	f104 0c14 	add.w	ip, r4, #20
 8015faa:	46ae      	mov	lr, r5
 8015fac:	f04f 0a00 	mov.w	sl, #0
 8015fb0:	f8bc b000 	ldrh.w	fp, [ip]
 8015fb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015fb8:	fb09 770b 	mla	r7, r9, fp, r7
 8015fbc:	4457      	add	r7, sl
 8015fbe:	b29b      	uxth	r3, r3
 8015fc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015fc4:	f84e 3b04 	str.w	r3, [lr], #4
 8015fc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015fcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015fd0:	f8be 3000 	ldrh.w	r3, [lr]
 8015fd4:	fb09 330a 	mla	r3, r9, sl, r3
 8015fd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015fdc:	4562      	cmp	r2, ip
 8015fde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015fe2:	d8e5      	bhi.n	8015fb0 <__multiply+0x10c>
 8015fe4:	9f01      	ldr	r7, [sp, #4]
 8015fe6:	51eb      	str	r3, [r5, r7]
 8015fe8:	3504      	adds	r5, #4
 8015fea:	e799      	b.n	8015f20 <__multiply+0x7c>
 8015fec:	3e01      	subs	r6, #1
 8015fee:	e79b      	b.n	8015f28 <__multiply+0x84>
 8015ff0:	080192cf 	.word	0x080192cf
 8015ff4:	080192e0 	.word	0x080192e0

08015ff8 <__pow5mult>:
 8015ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ffc:	4615      	mov	r5, r2
 8015ffe:	f012 0203 	ands.w	r2, r2, #3
 8016002:	4607      	mov	r7, r0
 8016004:	460e      	mov	r6, r1
 8016006:	d007      	beq.n	8016018 <__pow5mult+0x20>
 8016008:	4c25      	ldr	r4, [pc, #148]	@ (80160a0 <__pow5mult+0xa8>)
 801600a:	3a01      	subs	r2, #1
 801600c:	2300      	movs	r3, #0
 801600e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016012:	f7ff fe9f 	bl	8015d54 <__multadd>
 8016016:	4606      	mov	r6, r0
 8016018:	10ad      	asrs	r5, r5, #2
 801601a:	d03d      	beq.n	8016098 <__pow5mult+0xa0>
 801601c:	69fc      	ldr	r4, [r7, #28]
 801601e:	b97c      	cbnz	r4, 8016040 <__pow5mult+0x48>
 8016020:	2010      	movs	r0, #16
 8016022:	f7ff fd77 	bl	8015b14 <malloc>
 8016026:	4602      	mov	r2, r0
 8016028:	61f8      	str	r0, [r7, #28]
 801602a:	b928      	cbnz	r0, 8016038 <__pow5mult+0x40>
 801602c:	4b1d      	ldr	r3, [pc, #116]	@ (80160a4 <__pow5mult+0xac>)
 801602e:	481e      	ldr	r0, [pc, #120]	@ (80160a8 <__pow5mult+0xb0>)
 8016030:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016034:	f7fe fe6c 	bl	8014d10 <__assert_func>
 8016038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801603c:	6004      	str	r4, [r0, #0]
 801603e:	60c4      	str	r4, [r0, #12]
 8016040:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016048:	b94c      	cbnz	r4, 801605e <__pow5mult+0x66>
 801604a:	f240 2171 	movw	r1, #625	@ 0x271
 801604e:	4638      	mov	r0, r7
 8016050:	f7ff ff12 	bl	8015e78 <__i2b>
 8016054:	2300      	movs	r3, #0
 8016056:	f8c8 0008 	str.w	r0, [r8, #8]
 801605a:	4604      	mov	r4, r0
 801605c:	6003      	str	r3, [r0, #0]
 801605e:	f04f 0900 	mov.w	r9, #0
 8016062:	07eb      	lsls	r3, r5, #31
 8016064:	d50a      	bpl.n	801607c <__pow5mult+0x84>
 8016066:	4631      	mov	r1, r6
 8016068:	4622      	mov	r2, r4
 801606a:	4638      	mov	r0, r7
 801606c:	f7ff ff1a 	bl	8015ea4 <__multiply>
 8016070:	4631      	mov	r1, r6
 8016072:	4680      	mov	r8, r0
 8016074:	4638      	mov	r0, r7
 8016076:	f7ff fe4b 	bl	8015d10 <_Bfree>
 801607a:	4646      	mov	r6, r8
 801607c:	106d      	asrs	r5, r5, #1
 801607e:	d00b      	beq.n	8016098 <__pow5mult+0xa0>
 8016080:	6820      	ldr	r0, [r4, #0]
 8016082:	b938      	cbnz	r0, 8016094 <__pow5mult+0x9c>
 8016084:	4622      	mov	r2, r4
 8016086:	4621      	mov	r1, r4
 8016088:	4638      	mov	r0, r7
 801608a:	f7ff ff0b 	bl	8015ea4 <__multiply>
 801608e:	6020      	str	r0, [r4, #0]
 8016090:	f8c0 9000 	str.w	r9, [r0]
 8016094:	4604      	mov	r4, r0
 8016096:	e7e4      	b.n	8016062 <__pow5mult+0x6a>
 8016098:	4630      	mov	r0, r6
 801609a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801609e:	bf00      	nop
 80160a0:	0801933c 	.word	0x0801933c
 80160a4:	08019024 	.word	0x08019024
 80160a8:	080192e0 	.word	0x080192e0

080160ac <__lshift>:
 80160ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160b0:	460c      	mov	r4, r1
 80160b2:	6849      	ldr	r1, [r1, #4]
 80160b4:	6923      	ldr	r3, [r4, #16]
 80160b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80160ba:	68a3      	ldr	r3, [r4, #8]
 80160bc:	4607      	mov	r7, r0
 80160be:	4691      	mov	r9, r2
 80160c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80160c4:	f108 0601 	add.w	r6, r8, #1
 80160c8:	42b3      	cmp	r3, r6
 80160ca:	db0b      	blt.n	80160e4 <__lshift+0x38>
 80160cc:	4638      	mov	r0, r7
 80160ce:	f7ff fddf 	bl	8015c90 <_Balloc>
 80160d2:	4605      	mov	r5, r0
 80160d4:	b948      	cbnz	r0, 80160ea <__lshift+0x3e>
 80160d6:	4602      	mov	r2, r0
 80160d8:	4b28      	ldr	r3, [pc, #160]	@ (801617c <__lshift+0xd0>)
 80160da:	4829      	ldr	r0, [pc, #164]	@ (8016180 <__lshift+0xd4>)
 80160dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80160e0:	f7fe fe16 	bl	8014d10 <__assert_func>
 80160e4:	3101      	adds	r1, #1
 80160e6:	005b      	lsls	r3, r3, #1
 80160e8:	e7ee      	b.n	80160c8 <__lshift+0x1c>
 80160ea:	2300      	movs	r3, #0
 80160ec:	f100 0114 	add.w	r1, r0, #20
 80160f0:	f100 0210 	add.w	r2, r0, #16
 80160f4:	4618      	mov	r0, r3
 80160f6:	4553      	cmp	r3, sl
 80160f8:	db33      	blt.n	8016162 <__lshift+0xb6>
 80160fa:	6920      	ldr	r0, [r4, #16]
 80160fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016100:	f104 0314 	add.w	r3, r4, #20
 8016104:	f019 091f 	ands.w	r9, r9, #31
 8016108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801610c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016110:	d02b      	beq.n	801616a <__lshift+0xbe>
 8016112:	f1c9 0e20 	rsb	lr, r9, #32
 8016116:	468a      	mov	sl, r1
 8016118:	2200      	movs	r2, #0
 801611a:	6818      	ldr	r0, [r3, #0]
 801611c:	fa00 f009 	lsl.w	r0, r0, r9
 8016120:	4310      	orrs	r0, r2
 8016122:	f84a 0b04 	str.w	r0, [sl], #4
 8016126:	f853 2b04 	ldr.w	r2, [r3], #4
 801612a:	459c      	cmp	ip, r3
 801612c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016130:	d8f3      	bhi.n	801611a <__lshift+0x6e>
 8016132:	ebac 0304 	sub.w	r3, ip, r4
 8016136:	3b15      	subs	r3, #21
 8016138:	f023 0303 	bic.w	r3, r3, #3
 801613c:	3304      	adds	r3, #4
 801613e:	f104 0015 	add.w	r0, r4, #21
 8016142:	4584      	cmp	ip, r0
 8016144:	bf38      	it	cc
 8016146:	2304      	movcc	r3, #4
 8016148:	50ca      	str	r2, [r1, r3]
 801614a:	b10a      	cbz	r2, 8016150 <__lshift+0xa4>
 801614c:	f108 0602 	add.w	r6, r8, #2
 8016150:	3e01      	subs	r6, #1
 8016152:	4638      	mov	r0, r7
 8016154:	612e      	str	r6, [r5, #16]
 8016156:	4621      	mov	r1, r4
 8016158:	f7ff fdda 	bl	8015d10 <_Bfree>
 801615c:	4628      	mov	r0, r5
 801615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016162:	f842 0f04 	str.w	r0, [r2, #4]!
 8016166:	3301      	adds	r3, #1
 8016168:	e7c5      	b.n	80160f6 <__lshift+0x4a>
 801616a:	3904      	subs	r1, #4
 801616c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016170:	f841 2f04 	str.w	r2, [r1, #4]!
 8016174:	459c      	cmp	ip, r3
 8016176:	d8f9      	bhi.n	801616c <__lshift+0xc0>
 8016178:	e7ea      	b.n	8016150 <__lshift+0xa4>
 801617a:	bf00      	nop
 801617c:	080192cf 	.word	0x080192cf
 8016180:	080192e0 	.word	0x080192e0

08016184 <__mcmp>:
 8016184:	690a      	ldr	r2, [r1, #16]
 8016186:	4603      	mov	r3, r0
 8016188:	6900      	ldr	r0, [r0, #16]
 801618a:	1a80      	subs	r0, r0, r2
 801618c:	b530      	push	{r4, r5, lr}
 801618e:	d10e      	bne.n	80161ae <__mcmp+0x2a>
 8016190:	3314      	adds	r3, #20
 8016192:	3114      	adds	r1, #20
 8016194:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016198:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801619c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80161a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80161a4:	4295      	cmp	r5, r2
 80161a6:	d003      	beq.n	80161b0 <__mcmp+0x2c>
 80161a8:	d205      	bcs.n	80161b6 <__mcmp+0x32>
 80161aa:	f04f 30ff 	mov.w	r0, #4294967295
 80161ae:	bd30      	pop	{r4, r5, pc}
 80161b0:	42a3      	cmp	r3, r4
 80161b2:	d3f3      	bcc.n	801619c <__mcmp+0x18>
 80161b4:	e7fb      	b.n	80161ae <__mcmp+0x2a>
 80161b6:	2001      	movs	r0, #1
 80161b8:	e7f9      	b.n	80161ae <__mcmp+0x2a>
	...

080161bc <__mdiff>:
 80161bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c0:	4689      	mov	r9, r1
 80161c2:	4606      	mov	r6, r0
 80161c4:	4611      	mov	r1, r2
 80161c6:	4648      	mov	r0, r9
 80161c8:	4614      	mov	r4, r2
 80161ca:	f7ff ffdb 	bl	8016184 <__mcmp>
 80161ce:	1e05      	subs	r5, r0, #0
 80161d0:	d112      	bne.n	80161f8 <__mdiff+0x3c>
 80161d2:	4629      	mov	r1, r5
 80161d4:	4630      	mov	r0, r6
 80161d6:	f7ff fd5b 	bl	8015c90 <_Balloc>
 80161da:	4602      	mov	r2, r0
 80161dc:	b928      	cbnz	r0, 80161ea <__mdiff+0x2e>
 80161de:	4b3f      	ldr	r3, [pc, #252]	@ (80162dc <__mdiff+0x120>)
 80161e0:	f240 2137 	movw	r1, #567	@ 0x237
 80161e4:	483e      	ldr	r0, [pc, #248]	@ (80162e0 <__mdiff+0x124>)
 80161e6:	f7fe fd93 	bl	8014d10 <__assert_func>
 80161ea:	2301      	movs	r3, #1
 80161ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80161f0:	4610      	mov	r0, r2
 80161f2:	b003      	add	sp, #12
 80161f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f8:	bfbc      	itt	lt
 80161fa:	464b      	movlt	r3, r9
 80161fc:	46a1      	movlt	r9, r4
 80161fe:	4630      	mov	r0, r6
 8016200:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016204:	bfba      	itte	lt
 8016206:	461c      	movlt	r4, r3
 8016208:	2501      	movlt	r5, #1
 801620a:	2500      	movge	r5, #0
 801620c:	f7ff fd40 	bl	8015c90 <_Balloc>
 8016210:	4602      	mov	r2, r0
 8016212:	b918      	cbnz	r0, 801621c <__mdiff+0x60>
 8016214:	4b31      	ldr	r3, [pc, #196]	@ (80162dc <__mdiff+0x120>)
 8016216:	f240 2145 	movw	r1, #581	@ 0x245
 801621a:	e7e3      	b.n	80161e4 <__mdiff+0x28>
 801621c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016220:	6926      	ldr	r6, [r4, #16]
 8016222:	60c5      	str	r5, [r0, #12]
 8016224:	f109 0310 	add.w	r3, r9, #16
 8016228:	f109 0514 	add.w	r5, r9, #20
 801622c:	f104 0e14 	add.w	lr, r4, #20
 8016230:	f100 0b14 	add.w	fp, r0, #20
 8016234:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016238:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801623c:	9301      	str	r3, [sp, #4]
 801623e:	46d9      	mov	r9, fp
 8016240:	f04f 0c00 	mov.w	ip, #0
 8016244:	9b01      	ldr	r3, [sp, #4]
 8016246:	f85e 0b04 	ldr.w	r0, [lr], #4
 801624a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801624e:	9301      	str	r3, [sp, #4]
 8016250:	fa1f f38a 	uxth.w	r3, sl
 8016254:	4619      	mov	r1, r3
 8016256:	b283      	uxth	r3, r0
 8016258:	1acb      	subs	r3, r1, r3
 801625a:	0c00      	lsrs	r0, r0, #16
 801625c:	4463      	add	r3, ip
 801625e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016262:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016266:	b29b      	uxth	r3, r3
 8016268:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801626c:	4576      	cmp	r6, lr
 801626e:	f849 3b04 	str.w	r3, [r9], #4
 8016272:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016276:	d8e5      	bhi.n	8016244 <__mdiff+0x88>
 8016278:	1b33      	subs	r3, r6, r4
 801627a:	3b15      	subs	r3, #21
 801627c:	f023 0303 	bic.w	r3, r3, #3
 8016280:	3415      	adds	r4, #21
 8016282:	3304      	adds	r3, #4
 8016284:	42a6      	cmp	r6, r4
 8016286:	bf38      	it	cc
 8016288:	2304      	movcc	r3, #4
 801628a:	441d      	add	r5, r3
 801628c:	445b      	add	r3, fp
 801628e:	461e      	mov	r6, r3
 8016290:	462c      	mov	r4, r5
 8016292:	4544      	cmp	r4, r8
 8016294:	d30e      	bcc.n	80162b4 <__mdiff+0xf8>
 8016296:	f108 0103 	add.w	r1, r8, #3
 801629a:	1b49      	subs	r1, r1, r5
 801629c:	f021 0103 	bic.w	r1, r1, #3
 80162a0:	3d03      	subs	r5, #3
 80162a2:	45a8      	cmp	r8, r5
 80162a4:	bf38      	it	cc
 80162a6:	2100      	movcc	r1, #0
 80162a8:	440b      	add	r3, r1
 80162aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80162ae:	b191      	cbz	r1, 80162d6 <__mdiff+0x11a>
 80162b0:	6117      	str	r7, [r2, #16]
 80162b2:	e79d      	b.n	80161f0 <__mdiff+0x34>
 80162b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80162b8:	46e6      	mov	lr, ip
 80162ba:	0c08      	lsrs	r0, r1, #16
 80162bc:	fa1c fc81 	uxtah	ip, ip, r1
 80162c0:	4471      	add	r1, lr
 80162c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80162c6:	b289      	uxth	r1, r1
 80162c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80162cc:	f846 1b04 	str.w	r1, [r6], #4
 80162d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80162d4:	e7dd      	b.n	8016292 <__mdiff+0xd6>
 80162d6:	3f01      	subs	r7, #1
 80162d8:	e7e7      	b.n	80162aa <__mdiff+0xee>
 80162da:	bf00      	nop
 80162dc:	080192cf 	.word	0x080192cf
 80162e0:	080192e0 	.word	0x080192e0

080162e4 <__d2b>:
 80162e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162e8:	460f      	mov	r7, r1
 80162ea:	2101      	movs	r1, #1
 80162ec:	ec59 8b10 	vmov	r8, r9, d0
 80162f0:	4616      	mov	r6, r2
 80162f2:	f7ff fccd 	bl	8015c90 <_Balloc>
 80162f6:	4604      	mov	r4, r0
 80162f8:	b930      	cbnz	r0, 8016308 <__d2b+0x24>
 80162fa:	4602      	mov	r2, r0
 80162fc:	4b23      	ldr	r3, [pc, #140]	@ (801638c <__d2b+0xa8>)
 80162fe:	4824      	ldr	r0, [pc, #144]	@ (8016390 <__d2b+0xac>)
 8016300:	f240 310f 	movw	r1, #783	@ 0x30f
 8016304:	f7fe fd04 	bl	8014d10 <__assert_func>
 8016308:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801630c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016310:	b10d      	cbz	r5, 8016316 <__d2b+0x32>
 8016312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016316:	9301      	str	r3, [sp, #4]
 8016318:	f1b8 0300 	subs.w	r3, r8, #0
 801631c:	d023      	beq.n	8016366 <__d2b+0x82>
 801631e:	4668      	mov	r0, sp
 8016320:	9300      	str	r3, [sp, #0]
 8016322:	f7ff fd7c 	bl	8015e1e <__lo0bits>
 8016326:	e9dd 1200 	ldrd	r1, r2, [sp]
 801632a:	b1d0      	cbz	r0, 8016362 <__d2b+0x7e>
 801632c:	f1c0 0320 	rsb	r3, r0, #32
 8016330:	fa02 f303 	lsl.w	r3, r2, r3
 8016334:	430b      	orrs	r3, r1
 8016336:	40c2      	lsrs	r2, r0
 8016338:	6163      	str	r3, [r4, #20]
 801633a:	9201      	str	r2, [sp, #4]
 801633c:	9b01      	ldr	r3, [sp, #4]
 801633e:	61a3      	str	r3, [r4, #24]
 8016340:	2b00      	cmp	r3, #0
 8016342:	bf0c      	ite	eq
 8016344:	2201      	moveq	r2, #1
 8016346:	2202      	movne	r2, #2
 8016348:	6122      	str	r2, [r4, #16]
 801634a:	b1a5      	cbz	r5, 8016376 <__d2b+0x92>
 801634c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016350:	4405      	add	r5, r0
 8016352:	603d      	str	r5, [r7, #0]
 8016354:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016358:	6030      	str	r0, [r6, #0]
 801635a:	4620      	mov	r0, r4
 801635c:	b003      	add	sp, #12
 801635e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016362:	6161      	str	r1, [r4, #20]
 8016364:	e7ea      	b.n	801633c <__d2b+0x58>
 8016366:	a801      	add	r0, sp, #4
 8016368:	f7ff fd59 	bl	8015e1e <__lo0bits>
 801636c:	9b01      	ldr	r3, [sp, #4]
 801636e:	6163      	str	r3, [r4, #20]
 8016370:	3020      	adds	r0, #32
 8016372:	2201      	movs	r2, #1
 8016374:	e7e8      	b.n	8016348 <__d2b+0x64>
 8016376:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801637a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801637e:	6038      	str	r0, [r7, #0]
 8016380:	6918      	ldr	r0, [r3, #16]
 8016382:	f7ff fd2d 	bl	8015de0 <__hi0bits>
 8016386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801638a:	e7e5      	b.n	8016358 <__d2b+0x74>
 801638c:	080192cf 	.word	0x080192cf
 8016390:	080192e0 	.word	0x080192e0

08016394 <_strtoul_l.constprop.0>:
 8016394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016398:	4e34      	ldr	r6, [pc, #208]	@ (801646c <_strtoul_l.constprop.0+0xd8>)
 801639a:	4686      	mov	lr, r0
 801639c:	460d      	mov	r5, r1
 801639e:	4628      	mov	r0, r5
 80163a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163a4:	5d37      	ldrb	r7, [r6, r4]
 80163a6:	f017 0708 	ands.w	r7, r7, #8
 80163aa:	d1f8      	bne.n	801639e <_strtoul_l.constprop.0+0xa>
 80163ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80163ae:	d12f      	bne.n	8016410 <_strtoul_l.constprop.0+0x7c>
 80163b0:	782c      	ldrb	r4, [r5, #0]
 80163b2:	2701      	movs	r7, #1
 80163b4:	1c85      	adds	r5, r0, #2
 80163b6:	f033 0010 	bics.w	r0, r3, #16
 80163ba:	d109      	bne.n	80163d0 <_strtoul_l.constprop.0+0x3c>
 80163bc:	2c30      	cmp	r4, #48	@ 0x30
 80163be:	d12c      	bne.n	801641a <_strtoul_l.constprop.0+0x86>
 80163c0:	7828      	ldrb	r0, [r5, #0]
 80163c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80163c6:	2858      	cmp	r0, #88	@ 0x58
 80163c8:	d127      	bne.n	801641a <_strtoul_l.constprop.0+0x86>
 80163ca:	786c      	ldrb	r4, [r5, #1]
 80163cc:	2310      	movs	r3, #16
 80163ce:	3502      	adds	r5, #2
 80163d0:	f04f 38ff 	mov.w	r8, #4294967295
 80163d4:	2600      	movs	r6, #0
 80163d6:	fbb8 f8f3 	udiv	r8, r8, r3
 80163da:	fb03 f908 	mul.w	r9, r3, r8
 80163de:	ea6f 0909 	mvn.w	r9, r9
 80163e2:	4630      	mov	r0, r6
 80163e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80163e8:	f1bc 0f09 	cmp.w	ip, #9
 80163ec:	d81c      	bhi.n	8016428 <_strtoul_l.constprop.0+0x94>
 80163ee:	4664      	mov	r4, ip
 80163f0:	42a3      	cmp	r3, r4
 80163f2:	dd2a      	ble.n	801644a <_strtoul_l.constprop.0+0xb6>
 80163f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80163f8:	d007      	beq.n	801640a <_strtoul_l.constprop.0+0x76>
 80163fa:	4580      	cmp	r8, r0
 80163fc:	d322      	bcc.n	8016444 <_strtoul_l.constprop.0+0xb0>
 80163fe:	d101      	bne.n	8016404 <_strtoul_l.constprop.0+0x70>
 8016400:	45a1      	cmp	r9, r4
 8016402:	db1f      	blt.n	8016444 <_strtoul_l.constprop.0+0xb0>
 8016404:	fb00 4003 	mla	r0, r0, r3, r4
 8016408:	2601      	movs	r6, #1
 801640a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801640e:	e7e9      	b.n	80163e4 <_strtoul_l.constprop.0+0x50>
 8016410:	2c2b      	cmp	r4, #43	@ 0x2b
 8016412:	bf04      	itt	eq
 8016414:	782c      	ldrbeq	r4, [r5, #0]
 8016416:	1c85      	addeq	r5, r0, #2
 8016418:	e7cd      	b.n	80163b6 <_strtoul_l.constprop.0+0x22>
 801641a:	2b00      	cmp	r3, #0
 801641c:	d1d8      	bne.n	80163d0 <_strtoul_l.constprop.0+0x3c>
 801641e:	2c30      	cmp	r4, #48	@ 0x30
 8016420:	bf0c      	ite	eq
 8016422:	2308      	moveq	r3, #8
 8016424:	230a      	movne	r3, #10
 8016426:	e7d3      	b.n	80163d0 <_strtoul_l.constprop.0+0x3c>
 8016428:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801642c:	f1bc 0f19 	cmp.w	ip, #25
 8016430:	d801      	bhi.n	8016436 <_strtoul_l.constprop.0+0xa2>
 8016432:	3c37      	subs	r4, #55	@ 0x37
 8016434:	e7dc      	b.n	80163f0 <_strtoul_l.constprop.0+0x5c>
 8016436:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801643a:	f1bc 0f19 	cmp.w	ip, #25
 801643e:	d804      	bhi.n	801644a <_strtoul_l.constprop.0+0xb6>
 8016440:	3c57      	subs	r4, #87	@ 0x57
 8016442:	e7d5      	b.n	80163f0 <_strtoul_l.constprop.0+0x5c>
 8016444:	f04f 36ff 	mov.w	r6, #4294967295
 8016448:	e7df      	b.n	801640a <_strtoul_l.constprop.0+0x76>
 801644a:	1c73      	adds	r3, r6, #1
 801644c:	d106      	bne.n	801645c <_strtoul_l.constprop.0+0xc8>
 801644e:	2322      	movs	r3, #34	@ 0x22
 8016450:	f8ce 3000 	str.w	r3, [lr]
 8016454:	4630      	mov	r0, r6
 8016456:	b932      	cbnz	r2, 8016466 <_strtoul_l.constprop.0+0xd2>
 8016458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801645c:	b107      	cbz	r7, 8016460 <_strtoul_l.constprop.0+0xcc>
 801645e:	4240      	negs	r0, r0
 8016460:	2a00      	cmp	r2, #0
 8016462:	d0f9      	beq.n	8016458 <_strtoul_l.constprop.0+0xc4>
 8016464:	b106      	cbz	r6, 8016468 <_strtoul_l.constprop.0+0xd4>
 8016466:	1e69      	subs	r1, r5, #1
 8016468:	6011      	str	r1, [r2, #0]
 801646a:	e7f5      	b.n	8016458 <_strtoul_l.constprop.0+0xc4>
 801646c:	08019439 	.word	0x08019439

08016470 <_strtoul_r>:
 8016470:	f7ff bf90 	b.w	8016394 <_strtoul_l.constprop.0>

08016474 <strtoul>:
 8016474:	4613      	mov	r3, r2
 8016476:	460a      	mov	r2, r1
 8016478:	4601      	mov	r1, r0
 801647a:	4802      	ldr	r0, [pc, #8]	@ (8016484 <strtoul+0x10>)
 801647c:	6800      	ldr	r0, [r0, #0]
 801647e:	f7ff bf89 	b.w	8016394 <_strtoul_l.constprop.0>
 8016482:	bf00      	nop
 8016484:	20000034 	.word	0x20000034

08016488 <__ssputs_r>:
 8016488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801648c:	688e      	ldr	r6, [r1, #8]
 801648e:	461f      	mov	r7, r3
 8016490:	42be      	cmp	r6, r7
 8016492:	680b      	ldr	r3, [r1, #0]
 8016494:	4682      	mov	sl, r0
 8016496:	460c      	mov	r4, r1
 8016498:	4690      	mov	r8, r2
 801649a:	d82d      	bhi.n	80164f8 <__ssputs_r+0x70>
 801649c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80164a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80164a4:	d026      	beq.n	80164f4 <__ssputs_r+0x6c>
 80164a6:	6965      	ldr	r5, [r4, #20]
 80164a8:	6909      	ldr	r1, [r1, #16]
 80164aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164ae:	eba3 0901 	sub.w	r9, r3, r1
 80164b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80164b6:	1c7b      	adds	r3, r7, #1
 80164b8:	444b      	add	r3, r9
 80164ba:	106d      	asrs	r5, r5, #1
 80164bc:	429d      	cmp	r5, r3
 80164be:	bf38      	it	cc
 80164c0:	461d      	movcc	r5, r3
 80164c2:	0553      	lsls	r3, r2, #21
 80164c4:	d527      	bpl.n	8016516 <__ssputs_r+0x8e>
 80164c6:	4629      	mov	r1, r5
 80164c8:	f7ff fb56 	bl	8015b78 <_malloc_r>
 80164cc:	4606      	mov	r6, r0
 80164ce:	b360      	cbz	r0, 801652a <__ssputs_r+0xa2>
 80164d0:	6921      	ldr	r1, [r4, #16]
 80164d2:	464a      	mov	r2, r9
 80164d4:	f7fe fc0d 	bl	8014cf2 <memcpy>
 80164d8:	89a3      	ldrh	r3, [r4, #12]
 80164da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80164de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80164e2:	81a3      	strh	r3, [r4, #12]
 80164e4:	6126      	str	r6, [r4, #16]
 80164e6:	6165      	str	r5, [r4, #20]
 80164e8:	444e      	add	r6, r9
 80164ea:	eba5 0509 	sub.w	r5, r5, r9
 80164ee:	6026      	str	r6, [r4, #0]
 80164f0:	60a5      	str	r5, [r4, #8]
 80164f2:	463e      	mov	r6, r7
 80164f4:	42be      	cmp	r6, r7
 80164f6:	d900      	bls.n	80164fa <__ssputs_r+0x72>
 80164f8:	463e      	mov	r6, r7
 80164fa:	6820      	ldr	r0, [r4, #0]
 80164fc:	4632      	mov	r2, r6
 80164fe:	4641      	mov	r1, r8
 8016500:	f000 fa02 	bl	8016908 <memmove>
 8016504:	68a3      	ldr	r3, [r4, #8]
 8016506:	1b9b      	subs	r3, r3, r6
 8016508:	60a3      	str	r3, [r4, #8]
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	4433      	add	r3, r6
 801650e:	6023      	str	r3, [r4, #0]
 8016510:	2000      	movs	r0, #0
 8016512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016516:	462a      	mov	r2, r5
 8016518:	f000 fb16 	bl	8016b48 <_realloc_r>
 801651c:	4606      	mov	r6, r0
 801651e:	2800      	cmp	r0, #0
 8016520:	d1e0      	bne.n	80164e4 <__ssputs_r+0x5c>
 8016522:	6921      	ldr	r1, [r4, #16]
 8016524:	4650      	mov	r0, sl
 8016526:	f7ff fa67 	bl	80159f8 <_free_r>
 801652a:	230c      	movs	r3, #12
 801652c:	f8ca 3000 	str.w	r3, [sl]
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016536:	81a3      	strh	r3, [r4, #12]
 8016538:	f04f 30ff 	mov.w	r0, #4294967295
 801653c:	e7e9      	b.n	8016512 <__ssputs_r+0x8a>
	...

08016540 <_svfiprintf_r>:
 8016540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016544:	4698      	mov	r8, r3
 8016546:	898b      	ldrh	r3, [r1, #12]
 8016548:	061b      	lsls	r3, r3, #24
 801654a:	b09d      	sub	sp, #116	@ 0x74
 801654c:	4607      	mov	r7, r0
 801654e:	460d      	mov	r5, r1
 8016550:	4614      	mov	r4, r2
 8016552:	d510      	bpl.n	8016576 <_svfiprintf_r+0x36>
 8016554:	690b      	ldr	r3, [r1, #16]
 8016556:	b973      	cbnz	r3, 8016576 <_svfiprintf_r+0x36>
 8016558:	2140      	movs	r1, #64	@ 0x40
 801655a:	f7ff fb0d 	bl	8015b78 <_malloc_r>
 801655e:	6028      	str	r0, [r5, #0]
 8016560:	6128      	str	r0, [r5, #16]
 8016562:	b930      	cbnz	r0, 8016572 <_svfiprintf_r+0x32>
 8016564:	230c      	movs	r3, #12
 8016566:	603b      	str	r3, [r7, #0]
 8016568:	f04f 30ff 	mov.w	r0, #4294967295
 801656c:	b01d      	add	sp, #116	@ 0x74
 801656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016572:	2340      	movs	r3, #64	@ 0x40
 8016574:	616b      	str	r3, [r5, #20]
 8016576:	2300      	movs	r3, #0
 8016578:	9309      	str	r3, [sp, #36]	@ 0x24
 801657a:	2320      	movs	r3, #32
 801657c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016580:	f8cd 800c 	str.w	r8, [sp, #12]
 8016584:	2330      	movs	r3, #48	@ 0x30
 8016586:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016724 <_svfiprintf_r+0x1e4>
 801658a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801658e:	f04f 0901 	mov.w	r9, #1
 8016592:	4623      	mov	r3, r4
 8016594:	469a      	mov	sl, r3
 8016596:	f813 2b01 	ldrb.w	r2, [r3], #1
 801659a:	b10a      	cbz	r2, 80165a0 <_svfiprintf_r+0x60>
 801659c:	2a25      	cmp	r2, #37	@ 0x25
 801659e:	d1f9      	bne.n	8016594 <_svfiprintf_r+0x54>
 80165a0:	ebba 0b04 	subs.w	fp, sl, r4
 80165a4:	d00b      	beq.n	80165be <_svfiprintf_r+0x7e>
 80165a6:	465b      	mov	r3, fp
 80165a8:	4622      	mov	r2, r4
 80165aa:	4629      	mov	r1, r5
 80165ac:	4638      	mov	r0, r7
 80165ae:	f7ff ff6b 	bl	8016488 <__ssputs_r>
 80165b2:	3001      	adds	r0, #1
 80165b4:	f000 80a7 	beq.w	8016706 <_svfiprintf_r+0x1c6>
 80165b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165ba:	445a      	add	r2, fp
 80165bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80165be:	f89a 3000 	ldrb.w	r3, [sl]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	f000 809f 	beq.w	8016706 <_svfiprintf_r+0x1c6>
 80165c8:	2300      	movs	r3, #0
 80165ca:	f04f 32ff 	mov.w	r2, #4294967295
 80165ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165d2:	f10a 0a01 	add.w	sl, sl, #1
 80165d6:	9304      	str	r3, [sp, #16]
 80165d8:	9307      	str	r3, [sp, #28]
 80165da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80165de:	931a      	str	r3, [sp, #104]	@ 0x68
 80165e0:	4654      	mov	r4, sl
 80165e2:	2205      	movs	r2, #5
 80165e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165e8:	484e      	ldr	r0, [pc, #312]	@ (8016724 <_svfiprintf_r+0x1e4>)
 80165ea:	f7e9 fdd9 	bl	80001a0 <memchr>
 80165ee:	9a04      	ldr	r2, [sp, #16]
 80165f0:	b9d8      	cbnz	r0, 801662a <_svfiprintf_r+0xea>
 80165f2:	06d0      	lsls	r0, r2, #27
 80165f4:	bf44      	itt	mi
 80165f6:	2320      	movmi	r3, #32
 80165f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165fc:	0711      	lsls	r1, r2, #28
 80165fe:	bf44      	itt	mi
 8016600:	232b      	movmi	r3, #43	@ 0x2b
 8016602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016606:	f89a 3000 	ldrb.w	r3, [sl]
 801660a:	2b2a      	cmp	r3, #42	@ 0x2a
 801660c:	d015      	beq.n	801663a <_svfiprintf_r+0xfa>
 801660e:	9a07      	ldr	r2, [sp, #28]
 8016610:	4654      	mov	r4, sl
 8016612:	2000      	movs	r0, #0
 8016614:	f04f 0c0a 	mov.w	ip, #10
 8016618:	4621      	mov	r1, r4
 801661a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801661e:	3b30      	subs	r3, #48	@ 0x30
 8016620:	2b09      	cmp	r3, #9
 8016622:	d94b      	bls.n	80166bc <_svfiprintf_r+0x17c>
 8016624:	b1b0      	cbz	r0, 8016654 <_svfiprintf_r+0x114>
 8016626:	9207      	str	r2, [sp, #28]
 8016628:	e014      	b.n	8016654 <_svfiprintf_r+0x114>
 801662a:	eba0 0308 	sub.w	r3, r0, r8
 801662e:	fa09 f303 	lsl.w	r3, r9, r3
 8016632:	4313      	orrs	r3, r2
 8016634:	9304      	str	r3, [sp, #16]
 8016636:	46a2      	mov	sl, r4
 8016638:	e7d2      	b.n	80165e0 <_svfiprintf_r+0xa0>
 801663a:	9b03      	ldr	r3, [sp, #12]
 801663c:	1d19      	adds	r1, r3, #4
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	9103      	str	r1, [sp, #12]
 8016642:	2b00      	cmp	r3, #0
 8016644:	bfbb      	ittet	lt
 8016646:	425b      	neglt	r3, r3
 8016648:	f042 0202 	orrlt.w	r2, r2, #2
 801664c:	9307      	strge	r3, [sp, #28]
 801664e:	9307      	strlt	r3, [sp, #28]
 8016650:	bfb8      	it	lt
 8016652:	9204      	strlt	r2, [sp, #16]
 8016654:	7823      	ldrb	r3, [r4, #0]
 8016656:	2b2e      	cmp	r3, #46	@ 0x2e
 8016658:	d10a      	bne.n	8016670 <_svfiprintf_r+0x130>
 801665a:	7863      	ldrb	r3, [r4, #1]
 801665c:	2b2a      	cmp	r3, #42	@ 0x2a
 801665e:	d132      	bne.n	80166c6 <_svfiprintf_r+0x186>
 8016660:	9b03      	ldr	r3, [sp, #12]
 8016662:	1d1a      	adds	r2, r3, #4
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	9203      	str	r2, [sp, #12]
 8016668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801666c:	3402      	adds	r4, #2
 801666e:	9305      	str	r3, [sp, #20]
 8016670:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016734 <_svfiprintf_r+0x1f4>
 8016674:	7821      	ldrb	r1, [r4, #0]
 8016676:	2203      	movs	r2, #3
 8016678:	4650      	mov	r0, sl
 801667a:	f7e9 fd91 	bl	80001a0 <memchr>
 801667e:	b138      	cbz	r0, 8016690 <_svfiprintf_r+0x150>
 8016680:	9b04      	ldr	r3, [sp, #16]
 8016682:	eba0 000a 	sub.w	r0, r0, sl
 8016686:	2240      	movs	r2, #64	@ 0x40
 8016688:	4082      	lsls	r2, r0
 801668a:	4313      	orrs	r3, r2
 801668c:	3401      	adds	r4, #1
 801668e:	9304      	str	r3, [sp, #16]
 8016690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016694:	4824      	ldr	r0, [pc, #144]	@ (8016728 <_svfiprintf_r+0x1e8>)
 8016696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801669a:	2206      	movs	r2, #6
 801669c:	f7e9 fd80 	bl	80001a0 <memchr>
 80166a0:	2800      	cmp	r0, #0
 80166a2:	d036      	beq.n	8016712 <_svfiprintf_r+0x1d2>
 80166a4:	4b21      	ldr	r3, [pc, #132]	@ (801672c <_svfiprintf_r+0x1ec>)
 80166a6:	bb1b      	cbnz	r3, 80166f0 <_svfiprintf_r+0x1b0>
 80166a8:	9b03      	ldr	r3, [sp, #12]
 80166aa:	3307      	adds	r3, #7
 80166ac:	f023 0307 	bic.w	r3, r3, #7
 80166b0:	3308      	adds	r3, #8
 80166b2:	9303      	str	r3, [sp, #12]
 80166b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166b6:	4433      	add	r3, r6
 80166b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80166ba:	e76a      	b.n	8016592 <_svfiprintf_r+0x52>
 80166bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80166c0:	460c      	mov	r4, r1
 80166c2:	2001      	movs	r0, #1
 80166c4:	e7a8      	b.n	8016618 <_svfiprintf_r+0xd8>
 80166c6:	2300      	movs	r3, #0
 80166c8:	3401      	adds	r4, #1
 80166ca:	9305      	str	r3, [sp, #20]
 80166cc:	4619      	mov	r1, r3
 80166ce:	f04f 0c0a 	mov.w	ip, #10
 80166d2:	4620      	mov	r0, r4
 80166d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166d8:	3a30      	subs	r2, #48	@ 0x30
 80166da:	2a09      	cmp	r2, #9
 80166dc:	d903      	bls.n	80166e6 <_svfiprintf_r+0x1a6>
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d0c6      	beq.n	8016670 <_svfiprintf_r+0x130>
 80166e2:	9105      	str	r1, [sp, #20]
 80166e4:	e7c4      	b.n	8016670 <_svfiprintf_r+0x130>
 80166e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80166ea:	4604      	mov	r4, r0
 80166ec:	2301      	movs	r3, #1
 80166ee:	e7f0      	b.n	80166d2 <_svfiprintf_r+0x192>
 80166f0:	ab03      	add	r3, sp, #12
 80166f2:	9300      	str	r3, [sp, #0]
 80166f4:	462a      	mov	r2, r5
 80166f6:	4b0e      	ldr	r3, [pc, #56]	@ (8016730 <_svfiprintf_r+0x1f0>)
 80166f8:	a904      	add	r1, sp, #16
 80166fa:	4638      	mov	r0, r7
 80166fc:	f7fc ff22 	bl	8013544 <_printf_float>
 8016700:	1c42      	adds	r2, r0, #1
 8016702:	4606      	mov	r6, r0
 8016704:	d1d6      	bne.n	80166b4 <_svfiprintf_r+0x174>
 8016706:	89ab      	ldrh	r3, [r5, #12]
 8016708:	065b      	lsls	r3, r3, #25
 801670a:	f53f af2d 	bmi.w	8016568 <_svfiprintf_r+0x28>
 801670e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016710:	e72c      	b.n	801656c <_svfiprintf_r+0x2c>
 8016712:	ab03      	add	r3, sp, #12
 8016714:	9300      	str	r3, [sp, #0]
 8016716:	462a      	mov	r2, r5
 8016718:	4b05      	ldr	r3, [pc, #20]	@ (8016730 <_svfiprintf_r+0x1f0>)
 801671a:	a904      	add	r1, sp, #16
 801671c:	4638      	mov	r0, r7
 801671e:	f7fd f9a9 	bl	8013a74 <_printf_i>
 8016722:	e7ed      	b.n	8016700 <_svfiprintf_r+0x1c0>
 8016724:	08019539 	.word	0x08019539
 8016728:	08019543 	.word	0x08019543
 801672c:	08013545 	.word	0x08013545
 8016730:	08016489 	.word	0x08016489
 8016734:	0801953f 	.word	0x0801953f

08016738 <__sflush_r>:
 8016738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016740:	0716      	lsls	r6, r2, #28
 8016742:	4605      	mov	r5, r0
 8016744:	460c      	mov	r4, r1
 8016746:	d454      	bmi.n	80167f2 <__sflush_r+0xba>
 8016748:	684b      	ldr	r3, [r1, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	dc02      	bgt.n	8016754 <__sflush_r+0x1c>
 801674e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016750:	2b00      	cmp	r3, #0
 8016752:	dd48      	ble.n	80167e6 <__sflush_r+0xae>
 8016754:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016756:	2e00      	cmp	r6, #0
 8016758:	d045      	beq.n	80167e6 <__sflush_r+0xae>
 801675a:	2300      	movs	r3, #0
 801675c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016760:	682f      	ldr	r7, [r5, #0]
 8016762:	6a21      	ldr	r1, [r4, #32]
 8016764:	602b      	str	r3, [r5, #0]
 8016766:	d030      	beq.n	80167ca <__sflush_r+0x92>
 8016768:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801676a:	89a3      	ldrh	r3, [r4, #12]
 801676c:	0759      	lsls	r1, r3, #29
 801676e:	d505      	bpl.n	801677c <__sflush_r+0x44>
 8016770:	6863      	ldr	r3, [r4, #4]
 8016772:	1ad2      	subs	r2, r2, r3
 8016774:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016776:	b10b      	cbz	r3, 801677c <__sflush_r+0x44>
 8016778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801677a:	1ad2      	subs	r2, r2, r3
 801677c:	2300      	movs	r3, #0
 801677e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016780:	6a21      	ldr	r1, [r4, #32]
 8016782:	4628      	mov	r0, r5
 8016784:	47b0      	blx	r6
 8016786:	1c43      	adds	r3, r0, #1
 8016788:	89a3      	ldrh	r3, [r4, #12]
 801678a:	d106      	bne.n	801679a <__sflush_r+0x62>
 801678c:	6829      	ldr	r1, [r5, #0]
 801678e:	291d      	cmp	r1, #29
 8016790:	d82b      	bhi.n	80167ea <__sflush_r+0xb2>
 8016792:	4a2a      	ldr	r2, [pc, #168]	@ (801683c <__sflush_r+0x104>)
 8016794:	410a      	asrs	r2, r1
 8016796:	07d6      	lsls	r6, r2, #31
 8016798:	d427      	bmi.n	80167ea <__sflush_r+0xb2>
 801679a:	2200      	movs	r2, #0
 801679c:	6062      	str	r2, [r4, #4]
 801679e:	04d9      	lsls	r1, r3, #19
 80167a0:	6922      	ldr	r2, [r4, #16]
 80167a2:	6022      	str	r2, [r4, #0]
 80167a4:	d504      	bpl.n	80167b0 <__sflush_r+0x78>
 80167a6:	1c42      	adds	r2, r0, #1
 80167a8:	d101      	bne.n	80167ae <__sflush_r+0x76>
 80167aa:	682b      	ldr	r3, [r5, #0]
 80167ac:	b903      	cbnz	r3, 80167b0 <__sflush_r+0x78>
 80167ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80167b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80167b2:	602f      	str	r7, [r5, #0]
 80167b4:	b1b9      	cbz	r1, 80167e6 <__sflush_r+0xae>
 80167b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167ba:	4299      	cmp	r1, r3
 80167bc:	d002      	beq.n	80167c4 <__sflush_r+0x8c>
 80167be:	4628      	mov	r0, r5
 80167c0:	f7ff f91a 	bl	80159f8 <_free_r>
 80167c4:	2300      	movs	r3, #0
 80167c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80167c8:	e00d      	b.n	80167e6 <__sflush_r+0xae>
 80167ca:	2301      	movs	r3, #1
 80167cc:	4628      	mov	r0, r5
 80167ce:	47b0      	blx	r6
 80167d0:	4602      	mov	r2, r0
 80167d2:	1c50      	adds	r0, r2, #1
 80167d4:	d1c9      	bne.n	801676a <__sflush_r+0x32>
 80167d6:	682b      	ldr	r3, [r5, #0]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d0c6      	beq.n	801676a <__sflush_r+0x32>
 80167dc:	2b1d      	cmp	r3, #29
 80167de:	d001      	beq.n	80167e4 <__sflush_r+0xac>
 80167e0:	2b16      	cmp	r3, #22
 80167e2:	d11e      	bne.n	8016822 <__sflush_r+0xea>
 80167e4:	602f      	str	r7, [r5, #0]
 80167e6:	2000      	movs	r0, #0
 80167e8:	e022      	b.n	8016830 <__sflush_r+0xf8>
 80167ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167ee:	b21b      	sxth	r3, r3
 80167f0:	e01b      	b.n	801682a <__sflush_r+0xf2>
 80167f2:	690f      	ldr	r7, [r1, #16]
 80167f4:	2f00      	cmp	r7, #0
 80167f6:	d0f6      	beq.n	80167e6 <__sflush_r+0xae>
 80167f8:	0793      	lsls	r3, r2, #30
 80167fa:	680e      	ldr	r6, [r1, #0]
 80167fc:	bf08      	it	eq
 80167fe:	694b      	ldreq	r3, [r1, #20]
 8016800:	600f      	str	r7, [r1, #0]
 8016802:	bf18      	it	ne
 8016804:	2300      	movne	r3, #0
 8016806:	eba6 0807 	sub.w	r8, r6, r7
 801680a:	608b      	str	r3, [r1, #8]
 801680c:	f1b8 0f00 	cmp.w	r8, #0
 8016810:	dde9      	ble.n	80167e6 <__sflush_r+0xae>
 8016812:	6a21      	ldr	r1, [r4, #32]
 8016814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016816:	4643      	mov	r3, r8
 8016818:	463a      	mov	r2, r7
 801681a:	4628      	mov	r0, r5
 801681c:	47b0      	blx	r6
 801681e:	2800      	cmp	r0, #0
 8016820:	dc08      	bgt.n	8016834 <__sflush_r+0xfc>
 8016822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801682a:	81a3      	strh	r3, [r4, #12]
 801682c:	f04f 30ff 	mov.w	r0, #4294967295
 8016830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016834:	4407      	add	r7, r0
 8016836:	eba8 0800 	sub.w	r8, r8, r0
 801683a:	e7e7      	b.n	801680c <__sflush_r+0xd4>
 801683c:	dfbffffe 	.word	0xdfbffffe

08016840 <_fflush_r>:
 8016840:	b538      	push	{r3, r4, r5, lr}
 8016842:	690b      	ldr	r3, [r1, #16]
 8016844:	4605      	mov	r5, r0
 8016846:	460c      	mov	r4, r1
 8016848:	b913      	cbnz	r3, 8016850 <_fflush_r+0x10>
 801684a:	2500      	movs	r5, #0
 801684c:	4628      	mov	r0, r5
 801684e:	bd38      	pop	{r3, r4, r5, pc}
 8016850:	b118      	cbz	r0, 801685a <_fflush_r+0x1a>
 8016852:	6a03      	ldr	r3, [r0, #32]
 8016854:	b90b      	cbnz	r3, 801685a <_fflush_r+0x1a>
 8016856:	f7fd fab9 	bl	8013dcc <__sinit>
 801685a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d0f3      	beq.n	801684a <_fflush_r+0xa>
 8016862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016864:	07d0      	lsls	r0, r2, #31
 8016866:	d404      	bmi.n	8016872 <_fflush_r+0x32>
 8016868:	0599      	lsls	r1, r3, #22
 801686a:	d402      	bmi.n	8016872 <_fflush_r+0x32>
 801686c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801686e:	f7fe fa35 	bl	8014cdc <__retarget_lock_acquire_recursive>
 8016872:	4628      	mov	r0, r5
 8016874:	4621      	mov	r1, r4
 8016876:	f7ff ff5f 	bl	8016738 <__sflush_r>
 801687a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801687c:	07da      	lsls	r2, r3, #31
 801687e:	4605      	mov	r5, r0
 8016880:	d4e4      	bmi.n	801684c <_fflush_r+0xc>
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	059b      	lsls	r3, r3, #22
 8016886:	d4e1      	bmi.n	801684c <_fflush_r+0xc>
 8016888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801688a:	f7fe fa29 	bl	8014ce0 <__retarget_lock_release_recursive>
 801688e:	e7dd      	b.n	801684c <_fflush_r+0xc>

08016890 <fiprintf>:
 8016890:	b40e      	push	{r1, r2, r3}
 8016892:	b503      	push	{r0, r1, lr}
 8016894:	4601      	mov	r1, r0
 8016896:	ab03      	add	r3, sp, #12
 8016898:	4805      	ldr	r0, [pc, #20]	@ (80168b0 <fiprintf+0x20>)
 801689a:	f853 2b04 	ldr.w	r2, [r3], #4
 801689e:	6800      	ldr	r0, [r0, #0]
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	f000 fb83 	bl	8016fac <_vfiprintf_r>
 80168a6:	b002      	add	sp, #8
 80168a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80168ac:	b003      	add	sp, #12
 80168ae:	4770      	bx	lr
 80168b0:	20000034 	.word	0x20000034

080168b4 <siscanf>:
 80168b4:	b40e      	push	{r1, r2, r3}
 80168b6:	b530      	push	{r4, r5, lr}
 80168b8:	b09c      	sub	sp, #112	@ 0x70
 80168ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 80168bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80168c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80168c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80168c8:	9002      	str	r0, [sp, #8]
 80168ca:	9006      	str	r0, [sp, #24]
 80168cc:	f7e9 fcb8 	bl	8000240 <strlen>
 80168d0:	4b0b      	ldr	r3, [pc, #44]	@ (8016900 <siscanf+0x4c>)
 80168d2:	9003      	str	r0, [sp, #12]
 80168d4:	9007      	str	r0, [sp, #28]
 80168d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168d8:	480a      	ldr	r0, [pc, #40]	@ (8016904 <siscanf+0x50>)
 80168da:	9401      	str	r4, [sp, #4]
 80168dc:	2300      	movs	r3, #0
 80168de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80168e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80168e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80168e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80168ea:	462a      	mov	r2, r5
 80168ec:	4623      	mov	r3, r4
 80168ee:	a902      	add	r1, sp, #8
 80168f0:	6800      	ldr	r0, [r0, #0]
 80168f2:	f000 f9bd 	bl	8016c70 <__ssvfiscanf_r>
 80168f6:	b01c      	add	sp, #112	@ 0x70
 80168f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80168fc:	b003      	add	sp, #12
 80168fe:	4770      	bx	lr
 8016900:	08013e9b 	.word	0x08013e9b
 8016904:	20000034 	.word	0x20000034

08016908 <memmove>:
 8016908:	4288      	cmp	r0, r1
 801690a:	b510      	push	{r4, lr}
 801690c:	eb01 0402 	add.w	r4, r1, r2
 8016910:	d902      	bls.n	8016918 <memmove+0x10>
 8016912:	4284      	cmp	r4, r0
 8016914:	4623      	mov	r3, r4
 8016916:	d807      	bhi.n	8016928 <memmove+0x20>
 8016918:	1e43      	subs	r3, r0, #1
 801691a:	42a1      	cmp	r1, r4
 801691c:	d008      	beq.n	8016930 <memmove+0x28>
 801691e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016926:	e7f8      	b.n	801691a <memmove+0x12>
 8016928:	4402      	add	r2, r0
 801692a:	4601      	mov	r1, r0
 801692c:	428a      	cmp	r2, r1
 801692e:	d100      	bne.n	8016932 <memmove+0x2a>
 8016930:	bd10      	pop	{r4, pc}
 8016932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801693a:	e7f7      	b.n	801692c <memmove+0x24>

0801693c <strncmp>:
 801693c:	b510      	push	{r4, lr}
 801693e:	b16a      	cbz	r2, 801695c <strncmp+0x20>
 8016940:	3901      	subs	r1, #1
 8016942:	1884      	adds	r4, r0, r2
 8016944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016948:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801694c:	429a      	cmp	r2, r3
 801694e:	d103      	bne.n	8016958 <strncmp+0x1c>
 8016950:	42a0      	cmp	r0, r4
 8016952:	d001      	beq.n	8016958 <strncmp+0x1c>
 8016954:	2a00      	cmp	r2, #0
 8016956:	d1f5      	bne.n	8016944 <strncmp+0x8>
 8016958:	1ad0      	subs	r0, r2, r3
 801695a:	bd10      	pop	{r4, pc}
 801695c:	4610      	mov	r0, r2
 801695e:	e7fc      	b.n	801695a <strncmp+0x1e>

08016960 <__gettzinfo>:
 8016960:	4800      	ldr	r0, [pc, #0]	@ (8016964 <__gettzinfo+0x4>)
 8016962:	4770      	bx	lr
 8016964:	20000088 	.word	0x20000088

08016968 <gmtime_r>:
 8016968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801696c:	4a4d      	ldr	r2, [pc, #308]	@ (8016aa4 <gmtime_r+0x13c>)
 801696e:	460c      	mov	r4, r1
 8016970:	2300      	movs	r3, #0
 8016972:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016976:	f7ea f96f 	bl	8000c58 <__aeabi_ldivmod>
 801697a:	2a00      	cmp	r2, #0
 801697c:	bfbc      	itt	lt
 801697e:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8016982:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8016986:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801698a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801698e:	fbb2 f3f1 	udiv	r3, r2, r1
 8016992:	fb01 2213 	mls	r2, r1, r3, r2
 8016996:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 801699a:	bfac      	ite	ge
 801699c:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80169a0:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80169a4:	60a3      	str	r3, [r4, #8]
 80169a6:	fbb2 f3f1 	udiv	r3, r2, r1
 80169aa:	fb01 2213 	mls	r2, r1, r3, r2
 80169ae:	6063      	str	r3, [r4, #4]
 80169b0:	6022      	str	r2, [r4, #0]
 80169b2:	1cc3      	adds	r3, r0, #3
 80169b4:	2207      	movs	r2, #7
 80169b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80169ba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80169be:	1a9b      	subs	r3, r3, r2
 80169c0:	bf48      	it	mi
 80169c2:	3307      	addmi	r3, #7
 80169c4:	2800      	cmp	r0, #0
 80169c6:	61a3      	str	r3, [r4, #24]
 80169c8:	bfb8      	it	lt
 80169ca:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 80169ce:	4936      	ldr	r1, [pc, #216]	@ (8016aa8 <gmtime_r+0x140>)
 80169d0:	bfae      	itee	ge
 80169d2:	fb90 f1f1 	sdivge	r1, r0, r1
 80169d6:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 80169da:	fb93 f1f1 	sdivlt	r1, r3, r1
 80169de:	4b33      	ldr	r3, [pc, #204]	@ (8016aac <gmtime_r+0x144>)
 80169e0:	fb03 0001 	mla	r0, r3, r1, r0
 80169e4:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80169e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80169ec:	4403      	add	r3, r0
 80169ee:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80169f2:	fbb0 f2fc 	udiv	r2, r0, ip
 80169f6:	1a9b      	subs	r3, r3, r2
 80169f8:	f240 176d 	movw	r7, #365	@ 0x16d
 80169fc:	4a2c      	ldr	r2, [pc, #176]	@ (8016ab0 <gmtime_r+0x148>)
 80169fe:	fbb0 f2f2 	udiv	r2, r0, r2
 8016a02:	2664      	movs	r6, #100	@ 0x64
 8016a04:	1a9b      	subs	r3, r3, r2
 8016a06:	fbb3 f2f7 	udiv	r2, r3, r7
 8016a0a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016a0e:	fbb2 f5f6 	udiv	r5, r2, r6
 8016a12:	1aeb      	subs	r3, r5, r3
 8016a14:	4403      	add	r3, r0
 8016a16:	fb07 3312 	mls	r3, r7, r2, r3
 8016a1a:	2099      	movs	r0, #153	@ 0x99
 8016a1c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8016a20:	3702      	adds	r7, #2
 8016a22:	f103 0e01 	add.w	lr, r3, #1
 8016a26:	fbb7 fcf0 	udiv	ip, r7, r0
 8016a2a:	fb00 f00c 	mul.w	r0, r0, ip
 8016a2e:	3002      	adds	r0, #2
 8016a30:	f04f 0805 	mov.w	r8, #5
 8016a34:	fbb0 f0f8 	udiv	r0, r0, r8
 8016a38:	ebae 0000 	sub.w	r0, lr, r0
 8016a3c:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8016a40:	4577      	cmp	r7, lr
 8016a42:	bf8c      	ite	hi
 8016a44:	f06f 0709 	mvnhi.w	r7, #9
 8016a48:	2702      	movls	r7, #2
 8016a4a:	4467      	add	r7, ip
 8016a4c:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8016a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a54:	2f01      	cmp	r7, #1
 8016a56:	bf98      	it	ls
 8016a58:	3101      	addls	r1, #1
 8016a5a:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8016a5e:	d30c      	bcc.n	8016a7a <gmtime_r+0x112>
 8016a60:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8016a64:	61e3      	str	r3, [r4, #28]
 8016a66:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	60e0      	str	r0, [r4, #12]
 8016a6e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8016a72:	6223      	str	r3, [r4, #32]
 8016a74:	4620      	mov	r0, r4
 8016a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a7a:	f012 0f03 	tst.w	r2, #3
 8016a7e:	d102      	bne.n	8016a86 <gmtime_r+0x11e>
 8016a80:	fb06 2515 	mls	r5, r6, r5, r2
 8016a84:	b95d      	cbnz	r5, 8016a9e <gmtime_r+0x136>
 8016a86:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8016a8a:	fbb2 f6f5 	udiv	r6, r2, r5
 8016a8e:	fb05 2216 	mls	r2, r5, r6, r2
 8016a92:	fab2 f282 	clz	r2, r2
 8016a96:	0952      	lsrs	r2, r2, #5
 8016a98:	333b      	adds	r3, #59	@ 0x3b
 8016a9a:	4413      	add	r3, r2
 8016a9c:	e7e2      	b.n	8016a64 <gmtime_r+0xfc>
 8016a9e:	2201      	movs	r2, #1
 8016aa0:	e7fa      	b.n	8016a98 <gmtime_r+0x130>
 8016aa2:	bf00      	nop
 8016aa4:	00015180 	.word	0x00015180
 8016aa8:	00023ab1 	.word	0x00023ab1
 8016aac:	fffdc54f 	.word	0xfffdc54f
 8016ab0:	00023ab0 	.word	0x00023ab0

08016ab4 <_sbrk_r>:
 8016ab4:	b538      	push	{r3, r4, r5, lr}
 8016ab6:	4d06      	ldr	r5, [pc, #24]	@ (8016ad0 <_sbrk_r+0x1c>)
 8016ab8:	2300      	movs	r3, #0
 8016aba:	4604      	mov	r4, r0
 8016abc:	4608      	mov	r0, r1
 8016abe:	602b      	str	r3, [r5, #0]
 8016ac0:	f7f4 fc46 	bl	800b350 <_sbrk>
 8016ac4:	1c43      	adds	r3, r0, #1
 8016ac6:	d102      	bne.n	8016ace <_sbrk_r+0x1a>
 8016ac8:	682b      	ldr	r3, [r5, #0]
 8016aca:	b103      	cbz	r3, 8016ace <_sbrk_r+0x1a>
 8016acc:	6023      	str	r3, [r4, #0]
 8016ace:	bd38      	pop	{r3, r4, r5, pc}
 8016ad0:	2000a8e0 	.word	0x2000a8e0

08016ad4 <abort>:
 8016ad4:	b508      	push	{r3, lr}
 8016ad6:	2006      	movs	r0, #6
 8016ad8:	f000 fdfe 	bl	80176d8 <raise>
 8016adc:	2001      	movs	r0, #1
 8016ade:	f7f4 fbbf 	bl	800b260 <_exit>

08016ae2 <_calloc_r>:
 8016ae2:	b570      	push	{r4, r5, r6, lr}
 8016ae4:	fba1 5402 	umull	r5, r4, r1, r2
 8016ae8:	b93c      	cbnz	r4, 8016afa <_calloc_r+0x18>
 8016aea:	4629      	mov	r1, r5
 8016aec:	f7ff f844 	bl	8015b78 <_malloc_r>
 8016af0:	4606      	mov	r6, r0
 8016af2:	b928      	cbnz	r0, 8016b00 <_calloc_r+0x1e>
 8016af4:	2600      	movs	r6, #0
 8016af6:	4630      	mov	r0, r6
 8016af8:	bd70      	pop	{r4, r5, r6, pc}
 8016afa:	220c      	movs	r2, #12
 8016afc:	6002      	str	r2, [r0, #0]
 8016afe:	e7f9      	b.n	8016af4 <_calloc_r+0x12>
 8016b00:	462a      	mov	r2, r5
 8016b02:	4621      	mov	r1, r4
 8016b04:	f7fd f9fd 	bl	8013f02 <memset>
 8016b08:	e7f5      	b.n	8016af6 <_calloc_r+0x14>
	...

08016b0c <__env_lock>:
 8016b0c:	4801      	ldr	r0, [pc, #4]	@ (8016b14 <__env_lock+0x8>)
 8016b0e:	f7fe b8e5 	b.w	8014cdc <__retarget_lock_acquire_recursive>
 8016b12:	bf00      	nop
 8016b14:	2000a8e5 	.word	0x2000a8e5

08016b18 <__env_unlock>:
 8016b18:	4801      	ldr	r0, [pc, #4]	@ (8016b20 <__env_unlock+0x8>)
 8016b1a:	f7fe b8e1 	b.w	8014ce0 <__retarget_lock_release_recursive>
 8016b1e:	bf00      	nop
 8016b20:	2000a8e5 	.word	0x2000a8e5

08016b24 <__ascii_mbtowc>:
 8016b24:	b082      	sub	sp, #8
 8016b26:	b901      	cbnz	r1, 8016b2a <__ascii_mbtowc+0x6>
 8016b28:	a901      	add	r1, sp, #4
 8016b2a:	b142      	cbz	r2, 8016b3e <__ascii_mbtowc+0x1a>
 8016b2c:	b14b      	cbz	r3, 8016b42 <__ascii_mbtowc+0x1e>
 8016b2e:	7813      	ldrb	r3, [r2, #0]
 8016b30:	600b      	str	r3, [r1, #0]
 8016b32:	7812      	ldrb	r2, [r2, #0]
 8016b34:	1e10      	subs	r0, r2, #0
 8016b36:	bf18      	it	ne
 8016b38:	2001      	movne	r0, #1
 8016b3a:	b002      	add	sp, #8
 8016b3c:	4770      	bx	lr
 8016b3e:	4610      	mov	r0, r2
 8016b40:	e7fb      	b.n	8016b3a <__ascii_mbtowc+0x16>
 8016b42:	f06f 0001 	mvn.w	r0, #1
 8016b46:	e7f8      	b.n	8016b3a <__ascii_mbtowc+0x16>

08016b48 <_realloc_r>:
 8016b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b4c:	4680      	mov	r8, r0
 8016b4e:	4615      	mov	r5, r2
 8016b50:	460c      	mov	r4, r1
 8016b52:	b921      	cbnz	r1, 8016b5e <_realloc_r+0x16>
 8016b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b58:	4611      	mov	r1, r2
 8016b5a:	f7ff b80d 	b.w	8015b78 <_malloc_r>
 8016b5e:	b92a      	cbnz	r2, 8016b6c <_realloc_r+0x24>
 8016b60:	f7fe ff4a 	bl	80159f8 <_free_r>
 8016b64:	2400      	movs	r4, #0
 8016b66:	4620      	mov	r0, r4
 8016b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b6c:	f000 fdd0 	bl	8017710 <_malloc_usable_size_r>
 8016b70:	4285      	cmp	r5, r0
 8016b72:	4606      	mov	r6, r0
 8016b74:	d802      	bhi.n	8016b7c <_realloc_r+0x34>
 8016b76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016b7a:	d8f4      	bhi.n	8016b66 <_realloc_r+0x1e>
 8016b7c:	4629      	mov	r1, r5
 8016b7e:	4640      	mov	r0, r8
 8016b80:	f7fe fffa 	bl	8015b78 <_malloc_r>
 8016b84:	4607      	mov	r7, r0
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d0ec      	beq.n	8016b64 <_realloc_r+0x1c>
 8016b8a:	42b5      	cmp	r5, r6
 8016b8c:	462a      	mov	r2, r5
 8016b8e:	4621      	mov	r1, r4
 8016b90:	bf28      	it	cs
 8016b92:	4632      	movcs	r2, r6
 8016b94:	f7fe f8ad 	bl	8014cf2 <memcpy>
 8016b98:	4621      	mov	r1, r4
 8016b9a:	4640      	mov	r0, r8
 8016b9c:	f7fe ff2c 	bl	80159f8 <_free_r>
 8016ba0:	463c      	mov	r4, r7
 8016ba2:	e7e0      	b.n	8016b66 <_realloc_r+0x1e>

08016ba4 <__ascii_wctomb>:
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	4608      	mov	r0, r1
 8016ba8:	b141      	cbz	r1, 8016bbc <__ascii_wctomb+0x18>
 8016baa:	2aff      	cmp	r2, #255	@ 0xff
 8016bac:	d904      	bls.n	8016bb8 <__ascii_wctomb+0x14>
 8016bae:	228a      	movs	r2, #138	@ 0x8a
 8016bb0:	601a      	str	r2, [r3, #0]
 8016bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8016bb6:	4770      	bx	lr
 8016bb8:	700a      	strb	r2, [r1, #0]
 8016bba:	2001      	movs	r0, #1
 8016bbc:	4770      	bx	lr

08016bbe <_sungetc_r>:
 8016bbe:	b538      	push	{r3, r4, r5, lr}
 8016bc0:	1c4b      	adds	r3, r1, #1
 8016bc2:	4614      	mov	r4, r2
 8016bc4:	d103      	bne.n	8016bce <_sungetc_r+0x10>
 8016bc6:	f04f 35ff 	mov.w	r5, #4294967295
 8016bca:	4628      	mov	r0, r5
 8016bcc:	bd38      	pop	{r3, r4, r5, pc}
 8016bce:	8993      	ldrh	r3, [r2, #12]
 8016bd0:	f023 0320 	bic.w	r3, r3, #32
 8016bd4:	8193      	strh	r3, [r2, #12]
 8016bd6:	6853      	ldr	r3, [r2, #4]
 8016bd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8016bda:	b2cd      	uxtb	r5, r1
 8016bdc:	b18a      	cbz	r2, 8016c02 <_sungetc_r+0x44>
 8016bde:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8016be0:	429a      	cmp	r2, r3
 8016be2:	dd08      	ble.n	8016bf6 <_sungetc_r+0x38>
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	1e5a      	subs	r2, r3, #1
 8016be8:	6022      	str	r2, [r4, #0]
 8016bea:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016bee:	6863      	ldr	r3, [r4, #4]
 8016bf0:	3301      	adds	r3, #1
 8016bf2:	6063      	str	r3, [r4, #4]
 8016bf4:	e7e9      	b.n	8016bca <_sungetc_r+0xc>
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	f000 fc77 	bl	80174ea <__submore>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	d0f1      	beq.n	8016be4 <_sungetc_r+0x26>
 8016c00:	e7e1      	b.n	8016bc6 <_sungetc_r+0x8>
 8016c02:	6921      	ldr	r1, [r4, #16]
 8016c04:	6822      	ldr	r2, [r4, #0]
 8016c06:	b141      	cbz	r1, 8016c1a <_sungetc_r+0x5c>
 8016c08:	4291      	cmp	r1, r2
 8016c0a:	d206      	bcs.n	8016c1a <_sungetc_r+0x5c>
 8016c0c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8016c10:	42a9      	cmp	r1, r5
 8016c12:	d102      	bne.n	8016c1a <_sungetc_r+0x5c>
 8016c14:	3a01      	subs	r2, #1
 8016c16:	6022      	str	r2, [r4, #0]
 8016c18:	e7ea      	b.n	8016bf0 <_sungetc_r+0x32>
 8016c1a:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8016c1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c22:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c24:	2303      	movs	r3, #3
 8016c26:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016c28:	4623      	mov	r3, r4
 8016c2a:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016c2e:	6023      	str	r3, [r4, #0]
 8016c30:	2301      	movs	r3, #1
 8016c32:	e7de      	b.n	8016bf2 <_sungetc_r+0x34>

08016c34 <__ssrefill_r>:
 8016c34:	b510      	push	{r4, lr}
 8016c36:	460c      	mov	r4, r1
 8016c38:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016c3a:	b169      	cbz	r1, 8016c58 <__ssrefill_r+0x24>
 8016c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c40:	4299      	cmp	r1, r3
 8016c42:	d001      	beq.n	8016c48 <__ssrefill_r+0x14>
 8016c44:	f7fe fed8 	bl	80159f8 <_free_r>
 8016c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016c4a:	6063      	str	r3, [r4, #4]
 8016c4c:	2000      	movs	r0, #0
 8016c4e:	6360      	str	r0, [r4, #52]	@ 0x34
 8016c50:	b113      	cbz	r3, 8016c58 <__ssrefill_r+0x24>
 8016c52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016c54:	6023      	str	r3, [r4, #0]
 8016c56:	bd10      	pop	{r4, pc}
 8016c58:	6923      	ldr	r3, [r4, #16]
 8016c5a:	6023      	str	r3, [r4, #0]
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	6063      	str	r3, [r4, #4]
 8016c60:	89a3      	ldrh	r3, [r4, #12]
 8016c62:	f043 0320 	orr.w	r3, r3, #32
 8016c66:	81a3      	strh	r3, [r4, #12]
 8016c68:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6c:	e7f3      	b.n	8016c56 <__ssrefill_r+0x22>
	...

08016c70 <__ssvfiscanf_r>:
 8016c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c74:	460c      	mov	r4, r1
 8016c76:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8016c7a:	2100      	movs	r1, #0
 8016c7c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016c80:	49a5      	ldr	r1, [pc, #660]	@ (8016f18 <__ssvfiscanf_r+0x2a8>)
 8016c82:	91a0      	str	r1, [sp, #640]	@ 0x280
 8016c84:	f10d 0804 	add.w	r8, sp, #4
 8016c88:	49a4      	ldr	r1, [pc, #656]	@ (8016f1c <__ssvfiscanf_r+0x2ac>)
 8016c8a:	4fa5      	ldr	r7, [pc, #660]	@ (8016f20 <__ssvfiscanf_r+0x2b0>)
 8016c8c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016c90:	4606      	mov	r6, r0
 8016c92:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	7813      	ldrb	r3, [r2, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	f000 8158 	beq.w	8016f4e <__ssvfiscanf_r+0x2de>
 8016c9e:	5cf9      	ldrb	r1, [r7, r3]
 8016ca0:	f011 0108 	ands.w	r1, r1, #8
 8016ca4:	f102 0501 	add.w	r5, r2, #1
 8016ca8:	d019      	beq.n	8016cde <__ssvfiscanf_r+0x6e>
 8016caa:	6863      	ldr	r3, [r4, #4]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	dd0f      	ble.n	8016cd0 <__ssvfiscanf_r+0x60>
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	781a      	ldrb	r2, [r3, #0]
 8016cb4:	5cba      	ldrb	r2, [r7, r2]
 8016cb6:	0712      	lsls	r2, r2, #28
 8016cb8:	d401      	bmi.n	8016cbe <__ssvfiscanf_r+0x4e>
 8016cba:	462a      	mov	r2, r5
 8016cbc:	e7eb      	b.n	8016c96 <__ssvfiscanf_r+0x26>
 8016cbe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016cc0:	3201      	adds	r2, #1
 8016cc2:	9245      	str	r2, [sp, #276]	@ 0x114
 8016cc4:	6862      	ldr	r2, [r4, #4]
 8016cc6:	3301      	adds	r3, #1
 8016cc8:	3a01      	subs	r2, #1
 8016cca:	6062      	str	r2, [r4, #4]
 8016ccc:	6023      	str	r3, [r4, #0]
 8016cce:	e7ec      	b.n	8016caa <__ssvfiscanf_r+0x3a>
 8016cd0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016cd2:	4621      	mov	r1, r4
 8016cd4:	4630      	mov	r0, r6
 8016cd6:	4798      	blx	r3
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	d0e9      	beq.n	8016cb0 <__ssvfiscanf_r+0x40>
 8016cdc:	e7ed      	b.n	8016cba <__ssvfiscanf_r+0x4a>
 8016cde:	2b25      	cmp	r3, #37	@ 0x25
 8016ce0:	d012      	beq.n	8016d08 <__ssvfiscanf_r+0x98>
 8016ce2:	4699      	mov	r9, r3
 8016ce4:	6863      	ldr	r3, [r4, #4]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	f340 8093 	ble.w	8016e12 <__ssvfiscanf_r+0x1a2>
 8016cec:	6822      	ldr	r2, [r4, #0]
 8016cee:	7813      	ldrb	r3, [r2, #0]
 8016cf0:	454b      	cmp	r3, r9
 8016cf2:	f040 812c 	bne.w	8016f4e <__ssvfiscanf_r+0x2de>
 8016cf6:	6863      	ldr	r3, [r4, #4]
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	6063      	str	r3, [r4, #4]
 8016cfc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8016cfe:	3201      	adds	r2, #1
 8016d00:	3301      	adds	r3, #1
 8016d02:	6022      	str	r2, [r4, #0]
 8016d04:	9345      	str	r3, [sp, #276]	@ 0x114
 8016d06:	e7d8      	b.n	8016cba <__ssvfiscanf_r+0x4a>
 8016d08:	9141      	str	r1, [sp, #260]	@ 0x104
 8016d0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016d0c:	7853      	ldrb	r3, [r2, #1]
 8016d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d10:	bf02      	ittt	eq
 8016d12:	2310      	moveq	r3, #16
 8016d14:	1c95      	addeq	r5, r2, #2
 8016d16:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016d18:	220a      	movs	r2, #10
 8016d1a:	46a9      	mov	r9, r5
 8016d1c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8016d20:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016d24:	2b09      	cmp	r3, #9
 8016d26:	d91e      	bls.n	8016d66 <__ssvfiscanf_r+0xf6>
 8016d28:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8016f24 <__ssvfiscanf_r+0x2b4>
 8016d2c:	2203      	movs	r2, #3
 8016d2e:	4650      	mov	r0, sl
 8016d30:	f7e9 fa36 	bl	80001a0 <memchr>
 8016d34:	b138      	cbz	r0, 8016d46 <__ssvfiscanf_r+0xd6>
 8016d36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016d38:	eba0 000a 	sub.w	r0, r0, sl
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	4083      	lsls	r3, r0
 8016d40:	4313      	orrs	r3, r2
 8016d42:	9341      	str	r3, [sp, #260]	@ 0x104
 8016d44:	464d      	mov	r5, r9
 8016d46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d4a:	2b78      	cmp	r3, #120	@ 0x78
 8016d4c:	d806      	bhi.n	8016d5c <__ssvfiscanf_r+0xec>
 8016d4e:	2b57      	cmp	r3, #87	@ 0x57
 8016d50:	d810      	bhi.n	8016d74 <__ssvfiscanf_r+0x104>
 8016d52:	2b25      	cmp	r3, #37	@ 0x25
 8016d54:	d0c5      	beq.n	8016ce2 <__ssvfiscanf_r+0x72>
 8016d56:	d857      	bhi.n	8016e08 <__ssvfiscanf_r+0x198>
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d065      	beq.n	8016e28 <__ssvfiscanf_r+0x1b8>
 8016d5c:	2303      	movs	r3, #3
 8016d5e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016d60:	230a      	movs	r3, #10
 8016d62:	9342      	str	r3, [sp, #264]	@ 0x108
 8016d64:	e078      	b.n	8016e58 <__ssvfiscanf_r+0x1e8>
 8016d66:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016d68:	fb02 1103 	mla	r1, r2, r3, r1
 8016d6c:	3930      	subs	r1, #48	@ 0x30
 8016d6e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016d70:	464d      	mov	r5, r9
 8016d72:	e7d2      	b.n	8016d1a <__ssvfiscanf_r+0xaa>
 8016d74:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016d78:	2a20      	cmp	r2, #32
 8016d7a:	d8ef      	bhi.n	8016d5c <__ssvfiscanf_r+0xec>
 8016d7c:	a101      	add	r1, pc, #4	@ (adr r1, 8016d84 <__ssvfiscanf_r+0x114>)
 8016d7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016d82:	bf00      	nop
 8016d84:	08016e37 	.word	0x08016e37
 8016d88:	08016d5d 	.word	0x08016d5d
 8016d8c:	08016d5d 	.word	0x08016d5d
 8016d90:	08016e91 	.word	0x08016e91
 8016d94:	08016d5d 	.word	0x08016d5d
 8016d98:	08016d5d 	.word	0x08016d5d
 8016d9c:	08016d5d 	.word	0x08016d5d
 8016da0:	08016d5d 	.word	0x08016d5d
 8016da4:	08016d5d 	.word	0x08016d5d
 8016da8:	08016d5d 	.word	0x08016d5d
 8016dac:	08016d5d 	.word	0x08016d5d
 8016db0:	08016ea7 	.word	0x08016ea7
 8016db4:	08016e8d 	.word	0x08016e8d
 8016db8:	08016e0f 	.word	0x08016e0f
 8016dbc:	08016e0f 	.word	0x08016e0f
 8016dc0:	08016e0f 	.word	0x08016e0f
 8016dc4:	08016d5d 	.word	0x08016d5d
 8016dc8:	08016e49 	.word	0x08016e49
 8016dcc:	08016d5d 	.word	0x08016d5d
 8016dd0:	08016d5d 	.word	0x08016d5d
 8016dd4:	08016d5d 	.word	0x08016d5d
 8016dd8:	08016d5d 	.word	0x08016d5d
 8016ddc:	08016eb7 	.word	0x08016eb7
 8016de0:	08016e51 	.word	0x08016e51
 8016de4:	08016e2f 	.word	0x08016e2f
 8016de8:	08016d5d 	.word	0x08016d5d
 8016dec:	08016d5d 	.word	0x08016d5d
 8016df0:	08016eb3 	.word	0x08016eb3
 8016df4:	08016d5d 	.word	0x08016d5d
 8016df8:	08016e8d 	.word	0x08016e8d
 8016dfc:	08016d5d 	.word	0x08016d5d
 8016e00:	08016d5d 	.word	0x08016d5d
 8016e04:	08016e37 	.word	0x08016e37
 8016e08:	3b45      	subs	r3, #69	@ 0x45
 8016e0a:	2b02      	cmp	r3, #2
 8016e0c:	d8a6      	bhi.n	8016d5c <__ssvfiscanf_r+0xec>
 8016e0e:	2305      	movs	r3, #5
 8016e10:	e021      	b.n	8016e56 <__ssvfiscanf_r+0x1e6>
 8016e12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016e14:	4621      	mov	r1, r4
 8016e16:	4630      	mov	r0, r6
 8016e18:	4798      	blx	r3
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	f43f af66 	beq.w	8016cec <__ssvfiscanf_r+0x7c>
 8016e20:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016e22:	2800      	cmp	r0, #0
 8016e24:	f040 808b 	bne.w	8016f3e <__ssvfiscanf_r+0x2ce>
 8016e28:	f04f 30ff 	mov.w	r0, #4294967295
 8016e2c:	e08b      	b.n	8016f46 <__ssvfiscanf_r+0x2d6>
 8016e2e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016e30:	f042 0220 	orr.w	r2, r2, #32
 8016e34:	9241      	str	r2, [sp, #260]	@ 0x104
 8016e36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016e3c:	9241      	str	r2, [sp, #260]	@ 0x104
 8016e3e:	2210      	movs	r2, #16
 8016e40:	2b6e      	cmp	r3, #110	@ 0x6e
 8016e42:	9242      	str	r2, [sp, #264]	@ 0x108
 8016e44:	d902      	bls.n	8016e4c <__ssvfiscanf_r+0x1dc>
 8016e46:	e005      	b.n	8016e54 <__ssvfiscanf_r+0x1e4>
 8016e48:	2300      	movs	r3, #0
 8016e4a:	9342      	str	r3, [sp, #264]	@ 0x108
 8016e4c:	2303      	movs	r3, #3
 8016e4e:	e002      	b.n	8016e56 <__ssvfiscanf_r+0x1e6>
 8016e50:	2308      	movs	r3, #8
 8016e52:	9342      	str	r3, [sp, #264]	@ 0x108
 8016e54:	2304      	movs	r3, #4
 8016e56:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016e58:	6863      	ldr	r3, [r4, #4]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	dd39      	ble.n	8016ed2 <__ssvfiscanf_r+0x262>
 8016e5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016e60:	0659      	lsls	r1, r3, #25
 8016e62:	d404      	bmi.n	8016e6e <__ssvfiscanf_r+0x1fe>
 8016e64:	6823      	ldr	r3, [r4, #0]
 8016e66:	781a      	ldrb	r2, [r3, #0]
 8016e68:	5cba      	ldrb	r2, [r7, r2]
 8016e6a:	0712      	lsls	r2, r2, #28
 8016e6c:	d438      	bmi.n	8016ee0 <__ssvfiscanf_r+0x270>
 8016e6e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8016e70:	2b02      	cmp	r3, #2
 8016e72:	dc47      	bgt.n	8016f04 <__ssvfiscanf_r+0x294>
 8016e74:	466b      	mov	r3, sp
 8016e76:	4622      	mov	r2, r4
 8016e78:	a941      	add	r1, sp, #260	@ 0x104
 8016e7a:	4630      	mov	r0, r6
 8016e7c:	f000 f9ae 	bl	80171dc <_scanf_chars>
 8016e80:	2801      	cmp	r0, #1
 8016e82:	d064      	beq.n	8016f4e <__ssvfiscanf_r+0x2de>
 8016e84:	2802      	cmp	r0, #2
 8016e86:	f47f af18 	bne.w	8016cba <__ssvfiscanf_r+0x4a>
 8016e8a:	e7c9      	b.n	8016e20 <__ssvfiscanf_r+0x1b0>
 8016e8c:	220a      	movs	r2, #10
 8016e8e:	e7d7      	b.n	8016e40 <__ssvfiscanf_r+0x1d0>
 8016e90:	4629      	mov	r1, r5
 8016e92:	4640      	mov	r0, r8
 8016e94:	f000 faf0 	bl	8017478 <__sccl>
 8016e98:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e9e:	9341      	str	r3, [sp, #260]	@ 0x104
 8016ea0:	4605      	mov	r5, r0
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	e7d7      	b.n	8016e56 <__ssvfiscanf_r+0x1e6>
 8016ea6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016eac:	9341      	str	r3, [sp, #260]	@ 0x104
 8016eae:	2300      	movs	r3, #0
 8016eb0:	e7d1      	b.n	8016e56 <__ssvfiscanf_r+0x1e6>
 8016eb2:	2302      	movs	r3, #2
 8016eb4:	e7cf      	b.n	8016e56 <__ssvfiscanf_r+0x1e6>
 8016eb6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016eb8:	06c3      	lsls	r3, r0, #27
 8016eba:	f53f aefe 	bmi.w	8016cba <__ssvfiscanf_r+0x4a>
 8016ebe:	9b00      	ldr	r3, [sp, #0]
 8016ec0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016ec2:	1d19      	adds	r1, r3, #4
 8016ec4:	9100      	str	r1, [sp, #0]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	07c0      	lsls	r0, r0, #31
 8016eca:	bf4c      	ite	mi
 8016ecc:	801a      	strhmi	r2, [r3, #0]
 8016ece:	601a      	strpl	r2, [r3, #0]
 8016ed0:	e6f3      	b.n	8016cba <__ssvfiscanf_r+0x4a>
 8016ed2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016ed4:	4621      	mov	r1, r4
 8016ed6:	4630      	mov	r0, r6
 8016ed8:	4798      	blx	r3
 8016eda:	2800      	cmp	r0, #0
 8016edc:	d0bf      	beq.n	8016e5e <__ssvfiscanf_r+0x1ee>
 8016ede:	e79f      	b.n	8016e20 <__ssvfiscanf_r+0x1b0>
 8016ee0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016ee2:	3201      	adds	r2, #1
 8016ee4:	9245      	str	r2, [sp, #276]	@ 0x114
 8016ee6:	6862      	ldr	r2, [r4, #4]
 8016ee8:	3a01      	subs	r2, #1
 8016eea:	2a00      	cmp	r2, #0
 8016eec:	6062      	str	r2, [r4, #4]
 8016eee:	dd02      	ble.n	8016ef6 <__ssvfiscanf_r+0x286>
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	6023      	str	r3, [r4, #0]
 8016ef4:	e7b6      	b.n	8016e64 <__ssvfiscanf_r+0x1f4>
 8016ef6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016ef8:	4621      	mov	r1, r4
 8016efa:	4630      	mov	r0, r6
 8016efc:	4798      	blx	r3
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d0b0      	beq.n	8016e64 <__ssvfiscanf_r+0x1f4>
 8016f02:	e78d      	b.n	8016e20 <__ssvfiscanf_r+0x1b0>
 8016f04:	2b04      	cmp	r3, #4
 8016f06:	dc0f      	bgt.n	8016f28 <__ssvfiscanf_r+0x2b8>
 8016f08:	466b      	mov	r3, sp
 8016f0a:	4622      	mov	r2, r4
 8016f0c:	a941      	add	r1, sp, #260	@ 0x104
 8016f0e:	4630      	mov	r0, r6
 8016f10:	f000 f9be 	bl	8017290 <_scanf_i>
 8016f14:	e7b4      	b.n	8016e80 <__ssvfiscanf_r+0x210>
 8016f16:	bf00      	nop
 8016f18:	08016bbf 	.word	0x08016bbf
 8016f1c:	08016c35 	.word	0x08016c35
 8016f20:	08019439 	.word	0x08019439
 8016f24:	0801953f 	.word	0x0801953f
 8016f28:	4b0a      	ldr	r3, [pc, #40]	@ (8016f54 <__ssvfiscanf_r+0x2e4>)
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	f43f aec5 	beq.w	8016cba <__ssvfiscanf_r+0x4a>
 8016f30:	466b      	mov	r3, sp
 8016f32:	4622      	mov	r2, r4
 8016f34:	a941      	add	r1, sp, #260	@ 0x104
 8016f36:	4630      	mov	r0, r6
 8016f38:	f3af 8000 	nop.w
 8016f3c:	e7a0      	b.n	8016e80 <__ssvfiscanf_r+0x210>
 8016f3e:	89a3      	ldrh	r3, [r4, #12]
 8016f40:	065b      	lsls	r3, r3, #25
 8016f42:	f53f af71 	bmi.w	8016e28 <__ssvfiscanf_r+0x1b8>
 8016f46:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8016f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f4e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016f50:	e7f9      	b.n	8016f46 <__ssvfiscanf_r+0x2d6>
 8016f52:	bf00      	nop
 8016f54:	00000000 	.word	0x00000000

08016f58 <__sfputc_r>:
 8016f58:	6893      	ldr	r3, [r2, #8]
 8016f5a:	3b01      	subs	r3, #1
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	b410      	push	{r4}
 8016f60:	6093      	str	r3, [r2, #8]
 8016f62:	da08      	bge.n	8016f76 <__sfputc_r+0x1e>
 8016f64:	6994      	ldr	r4, [r2, #24]
 8016f66:	42a3      	cmp	r3, r4
 8016f68:	db01      	blt.n	8016f6e <__sfputc_r+0x16>
 8016f6a:	290a      	cmp	r1, #10
 8016f6c:	d103      	bne.n	8016f76 <__sfputc_r+0x1e>
 8016f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f72:	f000 baf4 	b.w	801755e <__swbuf_r>
 8016f76:	6813      	ldr	r3, [r2, #0]
 8016f78:	1c58      	adds	r0, r3, #1
 8016f7a:	6010      	str	r0, [r2, #0]
 8016f7c:	7019      	strb	r1, [r3, #0]
 8016f7e:	4608      	mov	r0, r1
 8016f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f84:	4770      	bx	lr

08016f86 <__sfputs_r>:
 8016f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f88:	4606      	mov	r6, r0
 8016f8a:	460f      	mov	r7, r1
 8016f8c:	4614      	mov	r4, r2
 8016f8e:	18d5      	adds	r5, r2, r3
 8016f90:	42ac      	cmp	r4, r5
 8016f92:	d101      	bne.n	8016f98 <__sfputs_r+0x12>
 8016f94:	2000      	movs	r0, #0
 8016f96:	e007      	b.n	8016fa8 <__sfputs_r+0x22>
 8016f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f9c:	463a      	mov	r2, r7
 8016f9e:	4630      	mov	r0, r6
 8016fa0:	f7ff ffda 	bl	8016f58 <__sfputc_r>
 8016fa4:	1c43      	adds	r3, r0, #1
 8016fa6:	d1f3      	bne.n	8016f90 <__sfputs_r+0xa>
 8016fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016fac <_vfiprintf_r>:
 8016fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fb0:	460d      	mov	r5, r1
 8016fb2:	b09d      	sub	sp, #116	@ 0x74
 8016fb4:	4614      	mov	r4, r2
 8016fb6:	4698      	mov	r8, r3
 8016fb8:	4606      	mov	r6, r0
 8016fba:	b118      	cbz	r0, 8016fc4 <_vfiprintf_r+0x18>
 8016fbc:	6a03      	ldr	r3, [r0, #32]
 8016fbe:	b90b      	cbnz	r3, 8016fc4 <_vfiprintf_r+0x18>
 8016fc0:	f7fc ff04 	bl	8013dcc <__sinit>
 8016fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fc6:	07d9      	lsls	r1, r3, #31
 8016fc8:	d405      	bmi.n	8016fd6 <_vfiprintf_r+0x2a>
 8016fca:	89ab      	ldrh	r3, [r5, #12]
 8016fcc:	059a      	lsls	r2, r3, #22
 8016fce:	d402      	bmi.n	8016fd6 <_vfiprintf_r+0x2a>
 8016fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016fd2:	f7fd fe83 	bl	8014cdc <__retarget_lock_acquire_recursive>
 8016fd6:	89ab      	ldrh	r3, [r5, #12]
 8016fd8:	071b      	lsls	r3, r3, #28
 8016fda:	d501      	bpl.n	8016fe0 <_vfiprintf_r+0x34>
 8016fdc:	692b      	ldr	r3, [r5, #16]
 8016fde:	b99b      	cbnz	r3, 8017008 <_vfiprintf_r+0x5c>
 8016fe0:	4629      	mov	r1, r5
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f000 fafa 	bl	80175dc <__swsetup_r>
 8016fe8:	b170      	cbz	r0, 8017008 <_vfiprintf_r+0x5c>
 8016fea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fec:	07dc      	lsls	r4, r3, #31
 8016fee:	d504      	bpl.n	8016ffa <_vfiprintf_r+0x4e>
 8016ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ff4:	b01d      	add	sp, #116	@ 0x74
 8016ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ffa:	89ab      	ldrh	r3, [r5, #12]
 8016ffc:	0598      	lsls	r0, r3, #22
 8016ffe:	d4f7      	bmi.n	8016ff0 <_vfiprintf_r+0x44>
 8017000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017002:	f7fd fe6d 	bl	8014ce0 <__retarget_lock_release_recursive>
 8017006:	e7f3      	b.n	8016ff0 <_vfiprintf_r+0x44>
 8017008:	2300      	movs	r3, #0
 801700a:	9309      	str	r3, [sp, #36]	@ 0x24
 801700c:	2320      	movs	r3, #32
 801700e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017012:	f8cd 800c 	str.w	r8, [sp, #12]
 8017016:	2330      	movs	r3, #48	@ 0x30
 8017018:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80171c8 <_vfiprintf_r+0x21c>
 801701c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017020:	f04f 0901 	mov.w	r9, #1
 8017024:	4623      	mov	r3, r4
 8017026:	469a      	mov	sl, r3
 8017028:	f813 2b01 	ldrb.w	r2, [r3], #1
 801702c:	b10a      	cbz	r2, 8017032 <_vfiprintf_r+0x86>
 801702e:	2a25      	cmp	r2, #37	@ 0x25
 8017030:	d1f9      	bne.n	8017026 <_vfiprintf_r+0x7a>
 8017032:	ebba 0b04 	subs.w	fp, sl, r4
 8017036:	d00b      	beq.n	8017050 <_vfiprintf_r+0xa4>
 8017038:	465b      	mov	r3, fp
 801703a:	4622      	mov	r2, r4
 801703c:	4629      	mov	r1, r5
 801703e:	4630      	mov	r0, r6
 8017040:	f7ff ffa1 	bl	8016f86 <__sfputs_r>
 8017044:	3001      	adds	r0, #1
 8017046:	f000 80a7 	beq.w	8017198 <_vfiprintf_r+0x1ec>
 801704a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801704c:	445a      	add	r2, fp
 801704e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017050:	f89a 3000 	ldrb.w	r3, [sl]
 8017054:	2b00      	cmp	r3, #0
 8017056:	f000 809f 	beq.w	8017198 <_vfiprintf_r+0x1ec>
 801705a:	2300      	movs	r3, #0
 801705c:	f04f 32ff 	mov.w	r2, #4294967295
 8017060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017064:	f10a 0a01 	add.w	sl, sl, #1
 8017068:	9304      	str	r3, [sp, #16]
 801706a:	9307      	str	r3, [sp, #28]
 801706c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017070:	931a      	str	r3, [sp, #104]	@ 0x68
 8017072:	4654      	mov	r4, sl
 8017074:	2205      	movs	r2, #5
 8017076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801707a:	4853      	ldr	r0, [pc, #332]	@ (80171c8 <_vfiprintf_r+0x21c>)
 801707c:	f7e9 f890 	bl	80001a0 <memchr>
 8017080:	9a04      	ldr	r2, [sp, #16]
 8017082:	b9d8      	cbnz	r0, 80170bc <_vfiprintf_r+0x110>
 8017084:	06d1      	lsls	r1, r2, #27
 8017086:	bf44      	itt	mi
 8017088:	2320      	movmi	r3, #32
 801708a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801708e:	0713      	lsls	r3, r2, #28
 8017090:	bf44      	itt	mi
 8017092:	232b      	movmi	r3, #43	@ 0x2b
 8017094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017098:	f89a 3000 	ldrb.w	r3, [sl]
 801709c:	2b2a      	cmp	r3, #42	@ 0x2a
 801709e:	d015      	beq.n	80170cc <_vfiprintf_r+0x120>
 80170a0:	9a07      	ldr	r2, [sp, #28]
 80170a2:	4654      	mov	r4, sl
 80170a4:	2000      	movs	r0, #0
 80170a6:	f04f 0c0a 	mov.w	ip, #10
 80170aa:	4621      	mov	r1, r4
 80170ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170b0:	3b30      	subs	r3, #48	@ 0x30
 80170b2:	2b09      	cmp	r3, #9
 80170b4:	d94b      	bls.n	801714e <_vfiprintf_r+0x1a2>
 80170b6:	b1b0      	cbz	r0, 80170e6 <_vfiprintf_r+0x13a>
 80170b8:	9207      	str	r2, [sp, #28]
 80170ba:	e014      	b.n	80170e6 <_vfiprintf_r+0x13a>
 80170bc:	eba0 0308 	sub.w	r3, r0, r8
 80170c0:	fa09 f303 	lsl.w	r3, r9, r3
 80170c4:	4313      	orrs	r3, r2
 80170c6:	9304      	str	r3, [sp, #16]
 80170c8:	46a2      	mov	sl, r4
 80170ca:	e7d2      	b.n	8017072 <_vfiprintf_r+0xc6>
 80170cc:	9b03      	ldr	r3, [sp, #12]
 80170ce:	1d19      	adds	r1, r3, #4
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	9103      	str	r1, [sp, #12]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	bfbb      	ittet	lt
 80170d8:	425b      	neglt	r3, r3
 80170da:	f042 0202 	orrlt.w	r2, r2, #2
 80170de:	9307      	strge	r3, [sp, #28]
 80170e0:	9307      	strlt	r3, [sp, #28]
 80170e2:	bfb8      	it	lt
 80170e4:	9204      	strlt	r2, [sp, #16]
 80170e6:	7823      	ldrb	r3, [r4, #0]
 80170e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80170ea:	d10a      	bne.n	8017102 <_vfiprintf_r+0x156>
 80170ec:	7863      	ldrb	r3, [r4, #1]
 80170ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80170f0:	d132      	bne.n	8017158 <_vfiprintf_r+0x1ac>
 80170f2:	9b03      	ldr	r3, [sp, #12]
 80170f4:	1d1a      	adds	r2, r3, #4
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	9203      	str	r2, [sp, #12]
 80170fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80170fe:	3402      	adds	r4, #2
 8017100:	9305      	str	r3, [sp, #20]
 8017102:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80171d8 <_vfiprintf_r+0x22c>
 8017106:	7821      	ldrb	r1, [r4, #0]
 8017108:	2203      	movs	r2, #3
 801710a:	4650      	mov	r0, sl
 801710c:	f7e9 f848 	bl	80001a0 <memchr>
 8017110:	b138      	cbz	r0, 8017122 <_vfiprintf_r+0x176>
 8017112:	9b04      	ldr	r3, [sp, #16]
 8017114:	eba0 000a 	sub.w	r0, r0, sl
 8017118:	2240      	movs	r2, #64	@ 0x40
 801711a:	4082      	lsls	r2, r0
 801711c:	4313      	orrs	r3, r2
 801711e:	3401      	adds	r4, #1
 8017120:	9304      	str	r3, [sp, #16]
 8017122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017126:	4829      	ldr	r0, [pc, #164]	@ (80171cc <_vfiprintf_r+0x220>)
 8017128:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801712c:	2206      	movs	r2, #6
 801712e:	f7e9 f837 	bl	80001a0 <memchr>
 8017132:	2800      	cmp	r0, #0
 8017134:	d03f      	beq.n	80171b6 <_vfiprintf_r+0x20a>
 8017136:	4b26      	ldr	r3, [pc, #152]	@ (80171d0 <_vfiprintf_r+0x224>)
 8017138:	bb1b      	cbnz	r3, 8017182 <_vfiprintf_r+0x1d6>
 801713a:	9b03      	ldr	r3, [sp, #12]
 801713c:	3307      	adds	r3, #7
 801713e:	f023 0307 	bic.w	r3, r3, #7
 8017142:	3308      	adds	r3, #8
 8017144:	9303      	str	r3, [sp, #12]
 8017146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017148:	443b      	add	r3, r7
 801714a:	9309      	str	r3, [sp, #36]	@ 0x24
 801714c:	e76a      	b.n	8017024 <_vfiprintf_r+0x78>
 801714e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017152:	460c      	mov	r4, r1
 8017154:	2001      	movs	r0, #1
 8017156:	e7a8      	b.n	80170aa <_vfiprintf_r+0xfe>
 8017158:	2300      	movs	r3, #0
 801715a:	3401      	adds	r4, #1
 801715c:	9305      	str	r3, [sp, #20]
 801715e:	4619      	mov	r1, r3
 8017160:	f04f 0c0a 	mov.w	ip, #10
 8017164:	4620      	mov	r0, r4
 8017166:	f810 2b01 	ldrb.w	r2, [r0], #1
 801716a:	3a30      	subs	r2, #48	@ 0x30
 801716c:	2a09      	cmp	r2, #9
 801716e:	d903      	bls.n	8017178 <_vfiprintf_r+0x1cc>
 8017170:	2b00      	cmp	r3, #0
 8017172:	d0c6      	beq.n	8017102 <_vfiprintf_r+0x156>
 8017174:	9105      	str	r1, [sp, #20]
 8017176:	e7c4      	b.n	8017102 <_vfiprintf_r+0x156>
 8017178:	fb0c 2101 	mla	r1, ip, r1, r2
 801717c:	4604      	mov	r4, r0
 801717e:	2301      	movs	r3, #1
 8017180:	e7f0      	b.n	8017164 <_vfiprintf_r+0x1b8>
 8017182:	ab03      	add	r3, sp, #12
 8017184:	9300      	str	r3, [sp, #0]
 8017186:	462a      	mov	r2, r5
 8017188:	4b12      	ldr	r3, [pc, #72]	@ (80171d4 <_vfiprintf_r+0x228>)
 801718a:	a904      	add	r1, sp, #16
 801718c:	4630      	mov	r0, r6
 801718e:	f7fc f9d9 	bl	8013544 <_printf_float>
 8017192:	4607      	mov	r7, r0
 8017194:	1c78      	adds	r0, r7, #1
 8017196:	d1d6      	bne.n	8017146 <_vfiprintf_r+0x19a>
 8017198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801719a:	07d9      	lsls	r1, r3, #31
 801719c:	d405      	bmi.n	80171aa <_vfiprintf_r+0x1fe>
 801719e:	89ab      	ldrh	r3, [r5, #12]
 80171a0:	059a      	lsls	r2, r3, #22
 80171a2:	d402      	bmi.n	80171aa <_vfiprintf_r+0x1fe>
 80171a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171a6:	f7fd fd9b 	bl	8014ce0 <__retarget_lock_release_recursive>
 80171aa:	89ab      	ldrh	r3, [r5, #12]
 80171ac:	065b      	lsls	r3, r3, #25
 80171ae:	f53f af1f 	bmi.w	8016ff0 <_vfiprintf_r+0x44>
 80171b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171b4:	e71e      	b.n	8016ff4 <_vfiprintf_r+0x48>
 80171b6:	ab03      	add	r3, sp, #12
 80171b8:	9300      	str	r3, [sp, #0]
 80171ba:	462a      	mov	r2, r5
 80171bc:	4b05      	ldr	r3, [pc, #20]	@ (80171d4 <_vfiprintf_r+0x228>)
 80171be:	a904      	add	r1, sp, #16
 80171c0:	4630      	mov	r0, r6
 80171c2:	f7fc fc57 	bl	8013a74 <_printf_i>
 80171c6:	e7e4      	b.n	8017192 <_vfiprintf_r+0x1e6>
 80171c8:	08019539 	.word	0x08019539
 80171cc:	08019543 	.word	0x08019543
 80171d0:	08013545 	.word	0x08013545
 80171d4:	08016f87 	.word	0x08016f87
 80171d8:	0801953f 	.word	0x0801953f

080171dc <_scanf_chars>:
 80171dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171e0:	4615      	mov	r5, r2
 80171e2:	688a      	ldr	r2, [r1, #8]
 80171e4:	4680      	mov	r8, r0
 80171e6:	460c      	mov	r4, r1
 80171e8:	b932      	cbnz	r2, 80171f8 <_scanf_chars+0x1c>
 80171ea:	698a      	ldr	r2, [r1, #24]
 80171ec:	2a00      	cmp	r2, #0
 80171ee:	bf14      	ite	ne
 80171f0:	f04f 32ff 	movne.w	r2, #4294967295
 80171f4:	2201      	moveq	r2, #1
 80171f6:	608a      	str	r2, [r1, #8]
 80171f8:	6822      	ldr	r2, [r4, #0]
 80171fa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801728c <_scanf_chars+0xb0>
 80171fe:	06d1      	lsls	r1, r2, #27
 8017200:	bf5f      	itttt	pl
 8017202:	681a      	ldrpl	r2, [r3, #0]
 8017204:	1d11      	addpl	r1, r2, #4
 8017206:	6019      	strpl	r1, [r3, #0]
 8017208:	6816      	ldrpl	r6, [r2, #0]
 801720a:	2700      	movs	r7, #0
 801720c:	69a0      	ldr	r0, [r4, #24]
 801720e:	b188      	cbz	r0, 8017234 <_scanf_chars+0x58>
 8017210:	2801      	cmp	r0, #1
 8017212:	d107      	bne.n	8017224 <_scanf_chars+0x48>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	781a      	ldrb	r2, [r3, #0]
 8017218:	6963      	ldr	r3, [r4, #20]
 801721a:	5c9b      	ldrb	r3, [r3, r2]
 801721c:	b953      	cbnz	r3, 8017234 <_scanf_chars+0x58>
 801721e:	2f00      	cmp	r7, #0
 8017220:	d031      	beq.n	8017286 <_scanf_chars+0xaa>
 8017222:	e022      	b.n	801726a <_scanf_chars+0x8e>
 8017224:	2802      	cmp	r0, #2
 8017226:	d120      	bne.n	801726a <_scanf_chars+0x8e>
 8017228:	682b      	ldr	r3, [r5, #0]
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017230:	071b      	lsls	r3, r3, #28
 8017232:	d41a      	bmi.n	801726a <_scanf_chars+0x8e>
 8017234:	6823      	ldr	r3, [r4, #0]
 8017236:	06da      	lsls	r2, r3, #27
 8017238:	bf5e      	ittt	pl
 801723a:	682b      	ldrpl	r3, [r5, #0]
 801723c:	781b      	ldrbpl	r3, [r3, #0]
 801723e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017242:	682a      	ldr	r2, [r5, #0]
 8017244:	686b      	ldr	r3, [r5, #4]
 8017246:	3201      	adds	r2, #1
 8017248:	602a      	str	r2, [r5, #0]
 801724a:	68a2      	ldr	r2, [r4, #8]
 801724c:	3b01      	subs	r3, #1
 801724e:	3a01      	subs	r2, #1
 8017250:	606b      	str	r3, [r5, #4]
 8017252:	3701      	adds	r7, #1
 8017254:	60a2      	str	r2, [r4, #8]
 8017256:	b142      	cbz	r2, 801726a <_scanf_chars+0x8e>
 8017258:	2b00      	cmp	r3, #0
 801725a:	dcd7      	bgt.n	801720c <_scanf_chars+0x30>
 801725c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017260:	4629      	mov	r1, r5
 8017262:	4640      	mov	r0, r8
 8017264:	4798      	blx	r3
 8017266:	2800      	cmp	r0, #0
 8017268:	d0d0      	beq.n	801720c <_scanf_chars+0x30>
 801726a:	6823      	ldr	r3, [r4, #0]
 801726c:	f013 0310 	ands.w	r3, r3, #16
 8017270:	d105      	bne.n	801727e <_scanf_chars+0xa2>
 8017272:	68e2      	ldr	r2, [r4, #12]
 8017274:	3201      	adds	r2, #1
 8017276:	60e2      	str	r2, [r4, #12]
 8017278:	69a2      	ldr	r2, [r4, #24]
 801727a:	b102      	cbz	r2, 801727e <_scanf_chars+0xa2>
 801727c:	7033      	strb	r3, [r6, #0]
 801727e:	6923      	ldr	r3, [r4, #16]
 8017280:	443b      	add	r3, r7
 8017282:	6123      	str	r3, [r4, #16]
 8017284:	2000      	movs	r0, #0
 8017286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801728a:	bf00      	nop
 801728c:	08019439 	.word	0x08019439

08017290 <_scanf_i>:
 8017290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017294:	4698      	mov	r8, r3
 8017296:	4b74      	ldr	r3, [pc, #464]	@ (8017468 <_scanf_i+0x1d8>)
 8017298:	460c      	mov	r4, r1
 801729a:	4682      	mov	sl, r0
 801729c:	4616      	mov	r6, r2
 801729e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80172a2:	b087      	sub	sp, #28
 80172a4:	ab03      	add	r3, sp, #12
 80172a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80172aa:	4b70      	ldr	r3, [pc, #448]	@ (801746c <_scanf_i+0x1dc>)
 80172ac:	69a1      	ldr	r1, [r4, #24]
 80172ae:	4a70      	ldr	r2, [pc, #448]	@ (8017470 <_scanf_i+0x1e0>)
 80172b0:	2903      	cmp	r1, #3
 80172b2:	bf08      	it	eq
 80172b4:	461a      	moveq	r2, r3
 80172b6:	68a3      	ldr	r3, [r4, #8]
 80172b8:	9201      	str	r2, [sp, #4]
 80172ba:	1e5a      	subs	r2, r3, #1
 80172bc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80172c0:	bf88      	it	hi
 80172c2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80172c6:	4627      	mov	r7, r4
 80172c8:	bf82      	ittt	hi
 80172ca:	eb03 0905 	addhi.w	r9, r3, r5
 80172ce:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80172d2:	60a3      	strhi	r3, [r4, #8]
 80172d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80172d8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80172dc:	bf98      	it	ls
 80172de:	f04f 0900 	movls.w	r9, #0
 80172e2:	6023      	str	r3, [r4, #0]
 80172e4:	463d      	mov	r5, r7
 80172e6:	f04f 0b00 	mov.w	fp, #0
 80172ea:	6831      	ldr	r1, [r6, #0]
 80172ec:	ab03      	add	r3, sp, #12
 80172ee:	7809      	ldrb	r1, [r1, #0]
 80172f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80172f4:	2202      	movs	r2, #2
 80172f6:	f7e8 ff53 	bl	80001a0 <memchr>
 80172fa:	b328      	cbz	r0, 8017348 <_scanf_i+0xb8>
 80172fc:	f1bb 0f01 	cmp.w	fp, #1
 8017300:	d159      	bne.n	80173b6 <_scanf_i+0x126>
 8017302:	6862      	ldr	r2, [r4, #4]
 8017304:	b92a      	cbnz	r2, 8017312 <_scanf_i+0x82>
 8017306:	6822      	ldr	r2, [r4, #0]
 8017308:	2108      	movs	r1, #8
 801730a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801730e:	6061      	str	r1, [r4, #4]
 8017310:	6022      	str	r2, [r4, #0]
 8017312:	6822      	ldr	r2, [r4, #0]
 8017314:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017318:	6022      	str	r2, [r4, #0]
 801731a:	68a2      	ldr	r2, [r4, #8]
 801731c:	1e51      	subs	r1, r2, #1
 801731e:	60a1      	str	r1, [r4, #8]
 8017320:	b192      	cbz	r2, 8017348 <_scanf_i+0xb8>
 8017322:	6832      	ldr	r2, [r6, #0]
 8017324:	1c51      	adds	r1, r2, #1
 8017326:	6031      	str	r1, [r6, #0]
 8017328:	7812      	ldrb	r2, [r2, #0]
 801732a:	f805 2b01 	strb.w	r2, [r5], #1
 801732e:	6872      	ldr	r2, [r6, #4]
 8017330:	3a01      	subs	r2, #1
 8017332:	2a00      	cmp	r2, #0
 8017334:	6072      	str	r2, [r6, #4]
 8017336:	dc07      	bgt.n	8017348 <_scanf_i+0xb8>
 8017338:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801733c:	4631      	mov	r1, r6
 801733e:	4650      	mov	r0, sl
 8017340:	4790      	blx	r2
 8017342:	2800      	cmp	r0, #0
 8017344:	f040 8085 	bne.w	8017452 <_scanf_i+0x1c2>
 8017348:	f10b 0b01 	add.w	fp, fp, #1
 801734c:	f1bb 0f03 	cmp.w	fp, #3
 8017350:	d1cb      	bne.n	80172ea <_scanf_i+0x5a>
 8017352:	6863      	ldr	r3, [r4, #4]
 8017354:	b90b      	cbnz	r3, 801735a <_scanf_i+0xca>
 8017356:	230a      	movs	r3, #10
 8017358:	6063      	str	r3, [r4, #4]
 801735a:	6863      	ldr	r3, [r4, #4]
 801735c:	4945      	ldr	r1, [pc, #276]	@ (8017474 <_scanf_i+0x1e4>)
 801735e:	6960      	ldr	r0, [r4, #20]
 8017360:	1ac9      	subs	r1, r1, r3
 8017362:	f000 f889 	bl	8017478 <__sccl>
 8017366:	f04f 0b00 	mov.w	fp, #0
 801736a:	68a3      	ldr	r3, [r4, #8]
 801736c:	6822      	ldr	r2, [r4, #0]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d03d      	beq.n	80173ee <_scanf_i+0x15e>
 8017372:	6831      	ldr	r1, [r6, #0]
 8017374:	6960      	ldr	r0, [r4, #20]
 8017376:	f891 c000 	ldrb.w	ip, [r1]
 801737a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801737e:	2800      	cmp	r0, #0
 8017380:	d035      	beq.n	80173ee <_scanf_i+0x15e>
 8017382:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017386:	d124      	bne.n	80173d2 <_scanf_i+0x142>
 8017388:	0510      	lsls	r0, r2, #20
 801738a:	d522      	bpl.n	80173d2 <_scanf_i+0x142>
 801738c:	f10b 0b01 	add.w	fp, fp, #1
 8017390:	f1b9 0f00 	cmp.w	r9, #0
 8017394:	d003      	beq.n	801739e <_scanf_i+0x10e>
 8017396:	3301      	adds	r3, #1
 8017398:	f109 39ff 	add.w	r9, r9, #4294967295
 801739c:	60a3      	str	r3, [r4, #8]
 801739e:	6873      	ldr	r3, [r6, #4]
 80173a0:	3b01      	subs	r3, #1
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	6073      	str	r3, [r6, #4]
 80173a6:	dd1b      	ble.n	80173e0 <_scanf_i+0x150>
 80173a8:	6833      	ldr	r3, [r6, #0]
 80173aa:	3301      	adds	r3, #1
 80173ac:	6033      	str	r3, [r6, #0]
 80173ae:	68a3      	ldr	r3, [r4, #8]
 80173b0:	3b01      	subs	r3, #1
 80173b2:	60a3      	str	r3, [r4, #8]
 80173b4:	e7d9      	b.n	801736a <_scanf_i+0xda>
 80173b6:	f1bb 0f02 	cmp.w	fp, #2
 80173ba:	d1ae      	bne.n	801731a <_scanf_i+0x8a>
 80173bc:	6822      	ldr	r2, [r4, #0]
 80173be:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80173c2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80173c6:	d1bf      	bne.n	8017348 <_scanf_i+0xb8>
 80173c8:	2110      	movs	r1, #16
 80173ca:	6061      	str	r1, [r4, #4]
 80173cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80173d0:	e7a2      	b.n	8017318 <_scanf_i+0x88>
 80173d2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80173d6:	6022      	str	r2, [r4, #0]
 80173d8:	780b      	ldrb	r3, [r1, #0]
 80173da:	f805 3b01 	strb.w	r3, [r5], #1
 80173de:	e7de      	b.n	801739e <_scanf_i+0x10e>
 80173e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80173e4:	4631      	mov	r1, r6
 80173e6:	4650      	mov	r0, sl
 80173e8:	4798      	blx	r3
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d0df      	beq.n	80173ae <_scanf_i+0x11e>
 80173ee:	6823      	ldr	r3, [r4, #0]
 80173f0:	05d9      	lsls	r1, r3, #23
 80173f2:	d50d      	bpl.n	8017410 <_scanf_i+0x180>
 80173f4:	42bd      	cmp	r5, r7
 80173f6:	d909      	bls.n	801740c <_scanf_i+0x17c>
 80173f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80173fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017400:	4632      	mov	r2, r6
 8017402:	4650      	mov	r0, sl
 8017404:	4798      	blx	r3
 8017406:	f105 39ff 	add.w	r9, r5, #4294967295
 801740a:	464d      	mov	r5, r9
 801740c:	42bd      	cmp	r5, r7
 801740e:	d028      	beq.n	8017462 <_scanf_i+0x1d2>
 8017410:	6822      	ldr	r2, [r4, #0]
 8017412:	f012 0210 	ands.w	r2, r2, #16
 8017416:	d113      	bne.n	8017440 <_scanf_i+0x1b0>
 8017418:	702a      	strb	r2, [r5, #0]
 801741a:	6863      	ldr	r3, [r4, #4]
 801741c:	9e01      	ldr	r6, [sp, #4]
 801741e:	4639      	mov	r1, r7
 8017420:	4650      	mov	r0, sl
 8017422:	47b0      	blx	r6
 8017424:	f8d8 3000 	ldr.w	r3, [r8]
 8017428:	6821      	ldr	r1, [r4, #0]
 801742a:	1d1a      	adds	r2, r3, #4
 801742c:	f8c8 2000 	str.w	r2, [r8]
 8017430:	f011 0f20 	tst.w	r1, #32
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	d00f      	beq.n	8017458 <_scanf_i+0x1c8>
 8017438:	6018      	str	r0, [r3, #0]
 801743a:	68e3      	ldr	r3, [r4, #12]
 801743c:	3301      	adds	r3, #1
 801743e:	60e3      	str	r3, [r4, #12]
 8017440:	6923      	ldr	r3, [r4, #16]
 8017442:	1bed      	subs	r5, r5, r7
 8017444:	445d      	add	r5, fp
 8017446:	442b      	add	r3, r5
 8017448:	6123      	str	r3, [r4, #16]
 801744a:	2000      	movs	r0, #0
 801744c:	b007      	add	sp, #28
 801744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017452:	f04f 0b00 	mov.w	fp, #0
 8017456:	e7ca      	b.n	80173ee <_scanf_i+0x15e>
 8017458:	07ca      	lsls	r2, r1, #31
 801745a:	bf4c      	ite	mi
 801745c:	8018      	strhmi	r0, [r3, #0]
 801745e:	6018      	strpl	r0, [r3, #0]
 8017460:	e7eb      	b.n	801743a <_scanf_i+0x1aa>
 8017462:	2001      	movs	r0, #1
 8017464:	e7f2      	b.n	801744c <_scanf_i+0x1bc>
 8017466:	bf00      	nop
 8017468:	08018f50 	.word	0x08018f50
 801746c:	08017815 	.word	0x08017815
 8017470:	08016471 	.word	0x08016471
 8017474:	08019564 	.word	0x08019564

08017478 <__sccl>:
 8017478:	b570      	push	{r4, r5, r6, lr}
 801747a:	780b      	ldrb	r3, [r1, #0]
 801747c:	4604      	mov	r4, r0
 801747e:	2b5e      	cmp	r3, #94	@ 0x5e
 8017480:	bf0b      	itete	eq
 8017482:	784b      	ldrbeq	r3, [r1, #1]
 8017484:	1c4a      	addne	r2, r1, #1
 8017486:	1c8a      	addeq	r2, r1, #2
 8017488:	2100      	movne	r1, #0
 801748a:	bf08      	it	eq
 801748c:	2101      	moveq	r1, #1
 801748e:	3801      	subs	r0, #1
 8017490:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017494:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017498:	42a8      	cmp	r0, r5
 801749a:	d1fb      	bne.n	8017494 <__sccl+0x1c>
 801749c:	b90b      	cbnz	r3, 80174a2 <__sccl+0x2a>
 801749e:	1e50      	subs	r0, r2, #1
 80174a0:	bd70      	pop	{r4, r5, r6, pc}
 80174a2:	f081 0101 	eor.w	r1, r1, #1
 80174a6:	54e1      	strb	r1, [r4, r3]
 80174a8:	4610      	mov	r0, r2
 80174aa:	4602      	mov	r2, r0
 80174ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80174b0:	2d2d      	cmp	r5, #45	@ 0x2d
 80174b2:	d005      	beq.n	80174c0 <__sccl+0x48>
 80174b4:	2d5d      	cmp	r5, #93	@ 0x5d
 80174b6:	d016      	beq.n	80174e6 <__sccl+0x6e>
 80174b8:	2d00      	cmp	r5, #0
 80174ba:	d0f1      	beq.n	80174a0 <__sccl+0x28>
 80174bc:	462b      	mov	r3, r5
 80174be:	e7f2      	b.n	80174a6 <__sccl+0x2e>
 80174c0:	7846      	ldrb	r6, [r0, #1]
 80174c2:	2e5d      	cmp	r6, #93	@ 0x5d
 80174c4:	d0fa      	beq.n	80174bc <__sccl+0x44>
 80174c6:	42b3      	cmp	r3, r6
 80174c8:	dcf8      	bgt.n	80174bc <__sccl+0x44>
 80174ca:	3002      	adds	r0, #2
 80174cc:	461a      	mov	r2, r3
 80174ce:	3201      	adds	r2, #1
 80174d0:	4296      	cmp	r6, r2
 80174d2:	54a1      	strb	r1, [r4, r2]
 80174d4:	dcfb      	bgt.n	80174ce <__sccl+0x56>
 80174d6:	1af2      	subs	r2, r6, r3
 80174d8:	3a01      	subs	r2, #1
 80174da:	1c5d      	adds	r5, r3, #1
 80174dc:	42b3      	cmp	r3, r6
 80174de:	bfa8      	it	ge
 80174e0:	2200      	movge	r2, #0
 80174e2:	18ab      	adds	r3, r5, r2
 80174e4:	e7e1      	b.n	80174aa <__sccl+0x32>
 80174e6:	4610      	mov	r0, r2
 80174e8:	e7da      	b.n	80174a0 <__sccl+0x28>

080174ea <__submore>:
 80174ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ee:	460c      	mov	r4, r1
 80174f0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80174f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174f6:	4299      	cmp	r1, r3
 80174f8:	d11d      	bne.n	8017536 <__submore+0x4c>
 80174fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80174fe:	f7fe fb3b 	bl	8015b78 <_malloc_r>
 8017502:	b918      	cbnz	r0, 801750c <__submore+0x22>
 8017504:	f04f 30ff 	mov.w	r0, #4294967295
 8017508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801750c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017510:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017512:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017516:	6360      	str	r0, [r4, #52]	@ 0x34
 8017518:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801751c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017520:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017524:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017528:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801752c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8017530:	6020      	str	r0, [r4, #0]
 8017532:	2000      	movs	r0, #0
 8017534:	e7e8      	b.n	8017508 <__submore+0x1e>
 8017536:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8017538:	0077      	lsls	r7, r6, #1
 801753a:	463a      	mov	r2, r7
 801753c:	f7ff fb04 	bl	8016b48 <_realloc_r>
 8017540:	4605      	mov	r5, r0
 8017542:	2800      	cmp	r0, #0
 8017544:	d0de      	beq.n	8017504 <__submore+0x1a>
 8017546:	eb00 0806 	add.w	r8, r0, r6
 801754a:	4601      	mov	r1, r0
 801754c:	4632      	mov	r2, r6
 801754e:	4640      	mov	r0, r8
 8017550:	f7fd fbcf 	bl	8014cf2 <memcpy>
 8017554:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8017558:	f8c4 8000 	str.w	r8, [r4]
 801755c:	e7e9      	b.n	8017532 <__submore+0x48>

0801755e <__swbuf_r>:
 801755e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017560:	460e      	mov	r6, r1
 8017562:	4614      	mov	r4, r2
 8017564:	4605      	mov	r5, r0
 8017566:	b118      	cbz	r0, 8017570 <__swbuf_r+0x12>
 8017568:	6a03      	ldr	r3, [r0, #32]
 801756a:	b90b      	cbnz	r3, 8017570 <__swbuf_r+0x12>
 801756c:	f7fc fc2e 	bl	8013dcc <__sinit>
 8017570:	69a3      	ldr	r3, [r4, #24]
 8017572:	60a3      	str	r3, [r4, #8]
 8017574:	89a3      	ldrh	r3, [r4, #12]
 8017576:	071a      	lsls	r2, r3, #28
 8017578:	d501      	bpl.n	801757e <__swbuf_r+0x20>
 801757a:	6923      	ldr	r3, [r4, #16]
 801757c:	b943      	cbnz	r3, 8017590 <__swbuf_r+0x32>
 801757e:	4621      	mov	r1, r4
 8017580:	4628      	mov	r0, r5
 8017582:	f000 f82b 	bl	80175dc <__swsetup_r>
 8017586:	b118      	cbz	r0, 8017590 <__swbuf_r+0x32>
 8017588:	f04f 37ff 	mov.w	r7, #4294967295
 801758c:	4638      	mov	r0, r7
 801758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017590:	6823      	ldr	r3, [r4, #0]
 8017592:	6922      	ldr	r2, [r4, #16]
 8017594:	1a98      	subs	r0, r3, r2
 8017596:	6963      	ldr	r3, [r4, #20]
 8017598:	b2f6      	uxtb	r6, r6
 801759a:	4283      	cmp	r3, r0
 801759c:	4637      	mov	r7, r6
 801759e:	dc05      	bgt.n	80175ac <__swbuf_r+0x4e>
 80175a0:	4621      	mov	r1, r4
 80175a2:	4628      	mov	r0, r5
 80175a4:	f7ff f94c 	bl	8016840 <_fflush_r>
 80175a8:	2800      	cmp	r0, #0
 80175aa:	d1ed      	bne.n	8017588 <__swbuf_r+0x2a>
 80175ac:	68a3      	ldr	r3, [r4, #8]
 80175ae:	3b01      	subs	r3, #1
 80175b0:	60a3      	str	r3, [r4, #8]
 80175b2:	6823      	ldr	r3, [r4, #0]
 80175b4:	1c5a      	adds	r2, r3, #1
 80175b6:	6022      	str	r2, [r4, #0]
 80175b8:	701e      	strb	r6, [r3, #0]
 80175ba:	6962      	ldr	r2, [r4, #20]
 80175bc:	1c43      	adds	r3, r0, #1
 80175be:	429a      	cmp	r2, r3
 80175c0:	d004      	beq.n	80175cc <__swbuf_r+0x6e>
 80175c2:	89a3      	ldrh	r3, [r4, #12]
 80175c4:	07db      	lsls	r3, r3, #31
 80175c6:	d5e1      	bpl.n	801758c <__swbuf_r+0x2e>
 80175c8:	2e0a      	cmp	r6, #10
 80175ca:	d1df      	bne.n	801758c <__swbuf_r+0x2e>
 80175cc:	4621      	mov	r1, r4
 80175ce:	4628      	mov	r0, r5
 80175d0:	f7ff f936 	bl	8016840 <_fflush_r>
 80175d4:	2800      	cmp	r0, #0
 80175d6:	d0d9      	beq.n	801758c <__swbuf_r+0x2e>
 80175d8:	e7d6      	b.n	8017588 <__swbuf_r+0x2a>
	...

080175dc <__swsetup_r>:
 80175dc:	b538      	push	{r3, r4, r5, lr}
 80175de:	4b29      	ldr	r3, [pc, #164]	@ (8017684 <__swsetup_r+0xa8>)
 80175e0:	4605      	mov	r5, r0
 80175e2:	6818      	ldr	r0, [r3, #0]
 80175e4:	460c      	mov	r4, r1
 80175e6:	b118      	cbz	r0, 80175f0 <__swsetup_r+0x14>
 80175e8:	6a03      	ldr	r3, [r0, #32]
 80175ea:	b90b      	cbnz	r3, 80175f0 <__swsetup_r+0x14>
 80175ec:	f7fc fbee 	bl	8013dcc <__sinit>
 80175f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175f4:	0719      	lsls	r1, r3, #28
 80175f6:	d422      	bmi.n	801763e <__swsetup_r+0x62>
 80175f8:	06da      	lsls	r2, r3, #27
 80175fa:	d407      	bmi.n	801760c <__swsetup_r+0x30>
 80175fc:	2209      	movs	r2, #9
 80175fe:	602a      	str	r2, [r5, #0]
 8017600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017604:	81a3      	strh	r3, [r4, #12]
 8017606:	f04f 30ff 	mov.w	r0, #4294967295
 801760a:	e033      	b.n	8017674 <__swsetup_r+0x98>
 801760c:	0758      	lsls	r0, r3, #29
 801760e:	d512      	bpl.n	8017636 <__swsetup_r+0x5a>
 8017610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017612:	b141      	cbz	r1, 8017626 <__swsetup_r+0x4a>
 8017614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017618:	4299      	cmp	r1, r3
 801761a:	d002      	beq.n	8017622 <__swsetup_r+0x46>
 801761c:	4628      	mov	r0, r5
 801761e:	f7fe f9eb 	bl	80159f8 <_free_r>
 8017622:	2300      	movs	r3, #0
 8017624:	6363      	str	r3, [r4, #52]	@ 0x34
 8017626:	89a3      	ldrh	r3, [r4, #12]
 8017628:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801762c:	81a3      	strh	r3, [r4, #12]
 801762e:	2300      	movs	r3, #0
 8017630:	6063      	str	r3, [r4, #4]
 8017632:	6923      	ldr	r3, [r4, #16]
 8017634:	6023      	str	r3, [r4, #0]
 8017636:	89a3      	ldrh	r3, [r4, #12]
 8017638:	f043 0308 	orr.w	r3, r3, #8
 801763c:	81a3      	strh	r3, [r4, #12]
 801763e:	6923      	ldr	r3, [r4, #16]
 8017640:	b94b      	cbnz	r3, 8017656 <__swsetup_r+0x7a>
 8017642:	89a3      	ldrh	r3, [r4, #12]
 8017644:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801764c:	d003      	beq.n	8017656 <__swsetup_r+0x7a>
 801764e:	4621      	mov	r1, r4
 8017650:	4628      	mov	r0, r5
 8017652:	f000 f907 	bl	8017864 <__smakebuf_r>
 8017656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801765a:	f013 0201 	ands.w	r2, r3, #1
 801765e:	d00a      	beq.n	8017676 <__swsetup_r+0x9a>
 8017660:	2200      	movs	r2, #0
 8017662:	60a2      	str	r2, [r4, #8]
 8017664:	6962      	ldr	r2, [r4, #20]
 8017666:	4252      	negs	r2, r2
 8017668:	61a2      	str	r2, [r4, #24]
 801766a:	6922      	ldr	r2, [r4, #16]
 801766c:	b942      	cbnz	r2, 8017680 <__swsetup_r+0xa4>
 801766e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017672:	d1c5      	bne.n	8017600 <__swsetup_r+0x24>
 8017674:	bd38      	pop	{r3, r4, r5, pc}
 8017676:	0799      	lsls	r1, r3, #30
 8017678:	bf58      	it	pl
 801767a:	6962      	ldrpl	r2, [r4, #20]
 801767c:	60a2      	str	r2, [r4, #8]
 801767e:	e7f4      	b.n	801766a <__swsetup_r+0x8e>
 8017680:	2000      	movs	r0, #0
 8017682:	e7f7      	b.n	8017674 <__swsetup_r+0x98>
 8017684:	20000034 	.word	0x20000034

08017688 <_raise_r>:
 8017688:	291f      	cmp	r1, #31
 801768a:	b538      	push	{r3, r4, r5, lr}
 801768c:	4605      	mov	r5, r0
 801768e:	460c      	mov	r4, r1
 8017690:	d904      	bls.n	801769c <_raise_r+0x14>
 8017692:	2316      	movs	r3, #22
 8017694:	6003      	str	r3, [r0, #0]
 8017696:	f04f 30ff 	mov.w	r0, #4294967295
 801769a:	bd38      	pop	{r3, r4, r5, pc}
 801769c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801769e:	b112      	cbz	r2, 80176a6 <_raise_r+0x1e>
 80176a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80176a4:	b94b      	cbnz	r3, 80176ba <_raise_r+0x32>
 80176a6:	4628      	mov	r0, r5
 80176a8:	f000 f830 	bl	801770c <_getpid_r>
 80176ac:	4622      	mov	r2, r4
 80176ae:	4601      	mov	r1, r0
 80176b0:	4628      	mov	r0, r5
 80176b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80176b6:	f000 b817 	b.w	80176e8 <_kill_r>
 80176ba:	2b01      	cmp	r3, #1
 80176bc:	d00a      	beq.n	80176d4 <_raise_r+0x4c>
 80176be:	1c59      	adds	r1, r3, #1
 80176c0:	d103      	bne.n	80176ca <_raise_r+0x42>
 80176c2:	2316      	movs	r3, #22
 80176c4:	6003      	str	r3, [r0, #0]
 80176c6:	2001      	movs	r0, #1
 80176c8:	e7e7      	b.n	801769a <_raise_r+0x12>
 80176ca:	2100      	movs	r1, #0
 80176cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80176d0:	4620      	mov	r0, r4
 80176d2:	4798      	blx	r3
 80176d4:	2000      	movs	r0, #0
 80176d6:	e7e0      	b.n	801769a <_raise_r+0x12>

080176d8 <raise>:
 80176d8:	4b02      	ldr	r3, [pc, #8]	@ (80176e4 <raise+0xc>)
 80176da:	4601      	mov	r1, r0
 80176dc:	6818      	ldr	r0, [r3, #0]
 80176de:	f7ff bfd3 	b.w	8017688 <_raise_r>
 80176e2:	bf00      	nop
 80176e4:	20000034 	.word	0x20000034

080176e8 <_kill_r>:
 80176e8:	b538      	push	{r3, r4, r5, lr}
 80176ea:	4d07      	ldr	r5, [pc, #28]	@ (8017708 <_kill_r+0x20>)
 80176ec:	2300      	movs	r3, #0
 80176ee:	4604      	mov	r4, r0
 80176f0:	4608      	mov	r0, r1
 80176f2:	4611      	mov	r1, r2
 80176f4:	602b      	str	r3, [r5, #0]
 80176f6:	f7f3 fda3 	bl	800b240 <_kill>
 80176fa:	1c43      	adds	r3, r0, #1
 80176fc:	d102      	bne.n	8017704 <_kill_r+0x1c>
 80176fe:	682b      	ldr	r3, [r5, #0]
 8017700:	b103      	cbz	r3, 8017704 <_kill_r+0x1c>
 8017702:	6023      	str	r3, [r4, #0]
 8017704:	bd38      	pop	{r3, r4, r5, pc}
 8017706:	bf00      	nop
 8017708:	2000a8e0 	.word	0x2000a8e0

0801770c <_getpid_r>:
 801770c:	f7f3 bd90 	b.w	800b230 <_getpid>

08017710 <_malloc_usable_size_r>:
 8017710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017714:	1f18      	subs	r0, r3, #4
 8017716:	2b00      	cmp	r3, #0
 8017718:	bfbc      	itt	lt
 801771a:	580b      	ldrlt	r3, [r1, r0]
 801771c:	18c0      	addlt	r0, r0, r3
 801771e:	4770      	bx	lr

08017720 <_strtol_l.constprop.0>:
 8017720:	2b24      	cmp	r3, #36	@ 0x24
 8017722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017726:	4686      	mov	lr, r0
 8017728:	4690      	mov	r8, r2
 801772a:	d801      	bhi.n	8017730 <_strtol_l.constprop.0+0x10>
 801772c:	2b01      	cmp	r3, #1
 801772e:	d106      	bne.n	801773e <_strtol_l.constprop.0+0x1e>
 8017730:	f7fd faa8 	bl	8014c84 <__errno>
 8017734:	2316      	movs	r3, #22
 8017736:	6003      	str	r3, [r0, #0]
 8017738:	2000      	movs	r0, #0
 801773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801773e:	4834      	ldr	r0, [pc, #208]	@ (8017810 <_strtol_l.constprop.0+0xf0>)
 8017740:	460d      	mov	r5, r1
 8017742:	462a      	mov	r2, r5
 8017744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017748:	5d06      	ldrb	r6, [r0, r4]
 801774a:	f016 0608 	ands.w	r6, r6, #8
 801774e:	d1f8      	bne.n	8017742 <_strtol_l.constprop.0+0x22>
 8017750:	2c2d      	cmp	r4, #45	@ 0x2d
 8017752:	d12d      	bne.n	80177b0 <_strtol_l.constprop.0+0x90>
 8017754:	782c      	ldrb	r4, [r5, #0]
 8017756:	2601      	movs	r6, #1
 8017758:	1c95      	adds	r5, r2, #2
 801775a:	f033 0210 	bics.w	r2, r3, #16
 801775e:	d109      	bne.n	8017774 <_strtol_l.constprop.0+0x54>
 8017760:	2c30      	cmp	r4, #48	@ 0x30
 8017762:	d12a      	bne.n	80177ba <_strtol_l.constprop.0+0x9a>
 8017764:	782a      	ldrb	r2, [r5, #0]
 8017766:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801776a:	2a58      	cmp	r2, #88	@ 0x58
 801776c:	d125      	bne.n	80177ba <_strtol_l.constprop.0+0x9a>
 801776e:	786c      	ldrb	r4, [r5, #1]
 8017770:	2310      	movs	r3, #16
 8017772:	3502      	adds	r5, #2
 8017774:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017778:	f10c 3cff 	add.w	ip, ip, #4294967295
 801777c:	2200      	movs	r2, #0
 801777e:	fbbc f9f3 	udiv	r9, ip, r3
 8017782:	4610      	mov	r0, r2
 8017784:	fb03 ca19 	mls	sl, r3, r9, ip
 8017788:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801778c:	2f09      	cmp	r7, #9
 801778e:	d81b      	bhi.n	80177c8 <_strtol_l.constprop.0+0xa8>
 8017790:	463c      	mov	r4, r7
 8017792:	42a3      	cmp	r3, r4
 8017794:	dd27      	ble.n	80177e6 <_strtol_l.constprop.0+0xc6>
 8017796:	1c57      	adds	r7, r2, #1
 8017798:	d007      	beq.n	80177aa <_strtol_l.constprop.0+0x8a>
 801779a:	4581      	cmp	r9, r0
 801779c:	d320      	bcc.n	80177e0 <_strtol_l.constprop.0+0xc0>
 801779e:	d101      	bne.n	80177a4 <_strtol_l.constprop.0+0x84>
 80177a0:	45a2      	cmp	sl, r4
 80177a2:	db1d      	blt.n	80177e0 <_strtol_l.constprop.0+0xc0>
 80177a4:	fb00 4003 	mla	r0, r0, r3, r4
 80177a8:	2201      	movs	r2, #1
 80177aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177ae:	e7eb      	b.n	8017788 <_strtol_l.constprop.0+0x68>
 80177b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80177b2:	bf04      	itt	eq
 80177b4:	782c      	ldrbeq	r4, [r5, #0]
 80177b6:	1c95      	addeq	r5, r2, #2
 80177b8:	e7cf      	b.n	801775a <_strtol_l.constprop.0+0x3a>
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d1da      	bne.n	8017774 <_strtol_l.constprop.0+0x54>
 80177be:	2c30      	cmp	r4, #48	@ 0x30
 80177c0:	bf0c      	ite	eq
 80177c2:	2308      	moveq	r3, #8
 80177c4:	230a      	movne	r3, #10
 80177c6:	e7d5      	b.n	8017774 <_strtol_l.constprop.0+0x54>
 80177c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80177cc:	2f19      	cmp	r7, #25
 80177ce:	d801      	bhi.n	80177d4 <_strtol_l.constprop.0+0xb4>
 80177d0:	3c37      	subs	r4, #55	@ 0x37
 80177d2:	e7de      	b.n	8017792 <_strtol_l.constprop.0+0x72>
 80177d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80177d8:	2f19      	cmp	r7, #25
 80177da:	d804      	bhi.n	80177e6 <_strtol_l.constprop.0+0xc6>
 80177dc:	3c57      	subs	r4, #87	@ 0x57
 80177de:	e7d8      	b.n	8017792 <_strtol_l.constprop.0+0x72>
 80177e0:	f04f 32ff 	mov.w	r2, #4294967295
 80177e4:	e7e1      	b.n	80177aa <_strtol_l.constprop.0+0x8a>
 80177e6:	1c53      	adds	r3, r2, #1
 80177e8:	d108      	bne.n	80177fc <_strtol_l.constprop.0+0xdc>
 80177ea:	2322      	movs	r3, #34	@ 0x22
 80177ec:	f8ce 3000 	str.w	r3, [lr]
 80177f0:	4660      	mov	r0, ip
 80177f2:	f1b8 0f00 	cmp.w	r8, #0
 80177f6:	d0a0      	beq.n	801773a <_strtol_l.constprop.0+0x1a>
 80177f8:	1e69      	subs	r1, r5, #1
 80177fa:	e006      	b.n	801780a <_strtol_l.constprop.0+0xea>
 80177fc:	b106      	cbz	r6, 8017800 <_strtol_l.constprop.0+0xe0>
 80177fe:	4240      	negs	r0, r0
 8017800:	f1b8 0f00 	cmp.w	r8, #0
 8017804:	d099      	beq.n	801773a <_strtol_l.constprop.0+0x1a>
 8017806:	2a00      	cmp	r2, #0
 8017808:	d1f6      	bne.n	80177f8 <_strtol_l.constprop.0+0xd8>
 801780a:	f8c8 1000 	str.w	r1, [r8]
 801780e:	e794      	b.n	801773a <_strtol_l.constprop.0+0x1a>
 8017810:	08019439 	.word	0x08019439

08017814 <_strtol_r>:
 8017814:	f7ff bf84 	b.w	8017720 <_strtol_l.constprop.0>

08017818 <__swhatbuf_r>:
 8017818:	b570      	push	{r4, r5, r6, lr}
 801781a:	460c      	mov	r4, r1
 801781c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017820:	2900      	cmp	r1, #0
 8017822:	b096      	sub	sp, #88	@ 0x58
 8017824:	4615      	mov	r5, r2
 8017826:	461e      	mov	r6, r3
 8017828:	da0d      	bge.n	8017846 <__swhatbuf_r+0x2e>
 801782a:	89a3      	ldrh	r3, [r4, #12]
 801782c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017830:	f04f 0100 	mov.w	r1, #0
 8017834:	bf14      	ite	ne
 8017836:	2340      	movne	r3, #64	@ 0x40
 8017838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801783c:	2000      	movs	r0, #0
 801783e:	6031      	str	r1, [r6, #0]
 8017840:	602b      	str	r3, [r5, #0]
 8017842:	b016      	add	sp, #88	@ 0x58
 8017844:	bd70      	pop	{r4, r5, r6, pc}
 8017846:	466a      	mov	r2, sp
 8017848:	f000 f848 	bl	80178dc <_fstat_r>
 801784c:	2800      	cmp	r0, #0
 801784e:	dbec      	blt.n	801782a <__swhatbuf_r+0x12>
 8017850:	9901      	ldr	r1, [sp, #4]
 8017852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801785a:	4259      	negs	r1, r3
 801785c:	4159      	adcs	r1, r3
 801785e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017862:	e7eb      	b.n	801783c <__swhatbuf_r+0x24>

08017864 <__smakebuf_r>:
 8017864:	898b      	ldrh	r3, [r1, #12]
 8017866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017868:	079d      	lsls	r5, r3, #30
 801786a:	4606      	mov	r6, r0
 801786c:	460c      	mov	r4, r1
 801786e:	d507      	bpl.n	8017880 <__smakebuf_r+0x1c>
 8017870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017874:	6023      	str	r3, [r4, #0]
 8017876:	6123      	str	r3, [r4, #16]
 8017878:	2301      	movs	r3, #1
 801787a:	6163      	str	r3, [r4, #20]
 801787c:	b003      	add	sp, #12
 801787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017880:	ab01      	add	r3, sp, #4
 8017882:	466a      	mov	r2, sp
 8017884:	f7ff ffc8 	bl	8017818 <__swhatbuf_r>
 8017888:	9f00      	ldr	r7, [sp, #0]
 801788a:	4605      	mov	r5, r0
 801788c:	4639      	mov	r1, r7
 801788e:	4630      	mov	r0, r6
 8017890:	f7fe f972 	bl	8015b78 <_malloc_r>
 8017894:	b948      	cbnz	r0, 80178aa <__smakebuf_r+0x46>
 8017896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801789a:	059a      	lsls	r2, r3, #22
 801789c:	d4ee      	bmi.n	801787c <__smakebuf_r+0x18>
 801789e:	f023 0303 	bic.w	r3, r3, #3
 80178a2:	f043 0302 	orr.w	r3, r3, #2
 80178a6:	81a3      	strh	r3, [r4, #12]
 80178a8:	e7e2      	b.n	8017870 <__smakebuf_r+0xc>
 80178aa:	89a3      	ldrh	r3, [r4, #12]
 80178ac:	6020      	str	r0, [r4, #0]
 80178ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178b2:	81a3      	strh	r3, [r4, #12]
 80178b4:	9b01      	ldr	r3, [sp, #4]
 80178b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80178ba:	b15b      	cbz	r3, 80178d4 <__smakebuf_r+0x70>
 80178bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178c0:	4630      	mov	r0, r6
 80178c2:	f000 f81d 	bl	8017900 <_isatty_r>
 80178c6:	b128      	cbz	r0, 80178d4 <__smakebuf_r+0x70>
 80178c8:	89a3      	ldrh	r3, [r4, #12]
 80178ca:	f023 0303 	bic.w	r3, r3, #3
 80178ce:	f043 0301 	orr.w	r3, r3, #1
 80178d2:	81a3      	strh	r3, [r4, #12]
 80178d4:	89a3      	ldrh	r3, [r4, #12]
 80178d6:	431d      	orrs	r5, r3
 80178d8:	81a5      	strh	r5, [r4, #12]
 80178da:	e7cf      	b.n	801787c <__smakebuf_r+0x18>

080178dc <_fstat_r>:
 80178dc:	b538      	push	{r3, r4, r5, lr}
 80178de:	4d07      	ldr	r5, [pc, #28]	@ (80178fc <_fstat_r+0x20>)
 80178e0:	2300      	movs	r3, #0
 80178e2:	4604      	mov	r4, r0
 80178e4:	4608      	mov	r0, r1
 80178e6:	4611      	mov	r1, r2
 80178e8:	602b      	str	r3, [r5, #0]
 80178ea:	f7f3 fd09 	bl	800b300 <_fstat>
 80178ee:	1c43      	adds	r3, r0, #1
 80178f0:	d102      	bne.n	80178f8 <_fstat_r+0x1c>
 80178f2:	682b      	ldr	r3, [r5, #0]
 80178f4:	b103      	cbz	r3, 80178f8 <_fstat_r+0x1c>
 80178f6:	6023      	str	r3, [r4, #0]
 80178f8:	bd38      	pop	{r3, r4, r5, pc}
 80178fa:	bf00      	nop
 80178fc:	2000a8e0 	.word	0x2000a8e0

08017900 <_isatty_r>:
 8017900:	b538      	push	{r3, r4, r5, lr}
 8017902:	4d06      	ldr	r5, [pc, #24]	@ (801791c <_isatty_r+0x1c>)
 8017904:	2300      	movs	r3, #0
 8017906:	4604      	mov	r4, r0
 8017908:	4608      	mov	r0, r1
 801790a:	602b      	str	r3, [r5, #0]
 801790c:	f7f3 fd08 	bl	800b320 <_isatty>
 8017910:	1c43      	adds	r3, r0, #1
 8017912:	d102      	bne.n	801791a <_isatty_r+0x1a>
 8017914:	682b      	ldr	r3, [r5, #0]
 8017916:	b103      	cbz	r3, 801791a <_isatty_r+0x1a>
 8017918:	6023      	str	r3, [r4, #0]
 801791a:	bd38      	pop	{r3, r4, r5, pc}
 801791c:	2000a8e0 	.word	0x2000a8e0

08017920 <_init>:
 8017920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017922:	bf00      	nop
 8017924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017926:	bc08      	pop	{r3}
 8017928:	469e      	mov	lr, r3
 801792a:	4770      	bx	lr

0801792c <_fini>:
 801792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801792e:	bf00      	nop
 8017930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017932:	bc08      	pop	{r3}
 8017934:	469e      	mov	lr, r3
 8017936:	4770      	bx	lr

08017938 <__FLASH_Program_Fast_veneer>:
 8017938:	f85f f000 	ldr.w	pc, [pc]	@ 801793c <__FLASH_Program_Fast_veneer+0x4>
 801793c:	2000024d 	.word	0x2000024d

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000002                                ....

20000010 <environ>:
20000010:	2000a6b8                                ... 

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <__sglue>:
20000020:	00000000 00000003 2000a780              ........... 

2000002c <_tzname>:
2000002c:	080191e3 080191e3                       ........

20000034 <_impure_ptr>:
20000034:	20000038                                8.. 

20000038 <_impure_data>:
20000038:	00000000 2000a780 2000a7e8 2000a850     ....... ... P.. 
	...

20000088 <tzinfo>:
20000088:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000b8:	0000004a 00000000 00000000 00000000     J...............
	...

200000e0 <__global_locale>:
200000e0:	00000043 00000000 00000000 00000000     C...............
	...
20000100:	00000043 00000000 00000000 00000000     C...............
	...
20000120:	00000043 00000000 00000000 00000000     C...............
	...
20000140:	00000043 00000000 00000000 00000000     C...............
	...
20000160:	00000043 00000000 00000000 00000000     C...............
	...
20000180:	00000043 00000000 00000000 00000000     C...............
	...
200001a0:	00000043 00000000 00000000 00000000     C...............
	...
200001c0:	08016ba5 08016b25 00000000 08019438     .k..%k......8...
200001d0:	08019552 08019269 08019269 08019269     R...i...i...i...
200001e0:	08019269 08019269 08019269 08019269     i...i...i...i...
200001f0:	08019269 08019269 ffffffff ffffffff     i...i...........
20000200:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000228:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2000024c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000024c:	b480      	push	{r7}
2000024e:	b089      	sub	sp, #36	@ 0x24
20000250:	af00      	add	r7, sp, #0
20000252:	6078      	str	r0, [r7, #4]
20000254:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000256:	2380      	movs	r3, #128	@ 0x80
20000258:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000025e:	683b      	ldr	r3, [r7, #0]
20000260:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000262:	4b18      	ldr	r3, [pc, #96]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000264:	695b      	ldr	r3, [r3, #20]
20000266:	4a17      	ldr	r2, [pc, #92]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000026c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000026e:	f3ef 8310 	mrs	r3, PRIMASK
20000272:	60fb      	str	r3, [r7, #12]
  return(result);
20000274:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000278:	b672      	cpsid	i
}
2000027a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
2000027c:	697b      	ldr	r3, [r7, #20]
2000027e:	681a      	ldr	r2, [r3, #0]
20000280:	69bb      	ldr	r3, [r7, #24]
20000282:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000284:	69bb      	ldr	r3, [r7, #24]
20000286:	3304      	adds	r3, #4
20000288:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000028a:	697b      	ldr	r3, [r7, #20]
2000028c:	3304      	adds	r3, #4
2000028e:	617b      	str	r3, [r7, #20]
    row_index--;
20000290:	7ffb      	ldrb	r3, [r7, #31]
20000292:	3b01      	subs	r3, #1
20000294:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
20000296:	7ffb      	ldrb	r3, [r7, #31]
20000298:	2b00      	cmp	r3, #0
2000029a:	d1ef      	bne.n	2000027c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
2000029c:	bf00      	nop
2000029e:	4b09      	ldr	r3, [pc, #36]	@ (200002c4 <FLASH_Program_Fast+0x78>)
200002a0:	691b      	ldr	r3, [r3, #16]
200002a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200002a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200002aa:	d0f8      	beq.n	2000029e <FLASH_Program_Fast+0x52>
200002ac:	693b      	ldr	r3, [r7, #16]
200002ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b0:	68bb      	ldr	r3, [r7, #8]
200002b2:	f383 8810 	msr	PRIMASK, r3
}
200002b6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002b8:	bf00      	nop
200002ba:	3724      	adds	r7, #36	@ 0x24
200002bc:	46bd      	mov	sp, r7
200002be:	f85d 7b04 	ldr.w	r7, [sp], #4
200002c2:	4770      	bx	lr
200002c4:	58004000 	.word	0x58004000
