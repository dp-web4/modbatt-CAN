
Pack Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d68  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001900  08013ea8  08013ea8  00014ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080157a8  080157a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080157b0  080157b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080157b4  080157b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000008  080157b8  00017008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a52c  20000244  080159f4  00017244  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a770  080159f4  00017770  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00017244  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ceeb  00000000  00000000  00017274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004978  00000000  00000000  0004415f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028a0  00000000  00000000  00048ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fb4  00000000  00000000  0004b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027570  00000000  00000000  0004d32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028db6  00000000  00000000  0007489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f6dc3  00000000  00000000  0009d652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00194415  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c7e4  00000000  00000000  00194458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001a0c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000244 	.word	0x20000244
 800015c:	00000000 	.word	0x00000000
 8000160:	08013e90 	.word	0x08013e90

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000248 	.word	0x20000248
 800017c:	08013e90 	.word	0x08013e90

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ff6:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <DRV_CANFDSPI_Reset+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <DRV_CANFDSPI_Reset+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);

	if(index==CAN2){
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d11a      	bne.n	800103e <DRV_CANFDSPI_Reset+0x56>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001008:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <DRV_CANFDSPI_Reset+0x9c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <DRV_CANFDSPI_Reset+0xa0>)
 800100e:	8811      	ldrh	r1, [r2, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f009 fa64 	bl	800a4e0 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	2264      	movs	r2, #100	@ 0x64
 800101c:	9200      	str	r2, [sp, #0]
 800101e:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <DRV_CANFDSPI_Reset+0xa4>)
 8001020:	4917      	ldr	r1, [pc, #92]	@ (8001080 <DRV_CANFDSPI_Reset+0x98>)
 8001022:	481b      	ldr	r0, [pc, #108]	@ (8001090 <DRV_CANFDSPI_Reset+0xa8>)
 8001024:	f00b fdda 	bl	800cbdc <HAL_SPI_TransmitReceive>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800102c:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <DRV_CANFDSPI_Reset+0x9c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <DRV_CANFDSPI_Reset+0xa0>)
 8001032:	8811      	ldrh	r1, [r2, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f009 fa52 	bl	800a4e0 <HAL_GPIO_WritePin>
 800103c:	e019      	b.n	8001072 <DRV_CANFDSPI_Reset+0x8a>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <DRV_CANFDSPI_Reset+0xac>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a15      	ldr	r2, [pc, #84]	@ (8001098 <DRV_CANFDSPI_Reset+0xb0>)
 8001044:	8811      	ldrh	r1, [r2, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f009 fa49 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	2264      	movs	r2, #100	@ 0x64
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <DRV_CANFDSPI_Reset+0xa4>)
 8001056:	490a      	ldr	r1, [pc, #40]	@ (8001080 <DRV_CANFDSPI_Reset+0x98>)
 8001058:	480d      	ldr	r0, [pc, #52]	@ (8001090 <DRV_CANFDSPI_Reset+0xa8>)
 800105a:	f00b fdbf 	bl	800cbdc <HAL_SPI_TransmitReceive>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <DRV_CANFDSPI_Reset+0xac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <DRV_CANFDSPI_Reset+0xb0>)
 8001068:	8811      	ldrh	r1, [r2, #0]
 800106a:	2201      	movs	r2, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fa37 	bl	800a4e0 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000260 	.word	0x20000260
 8001084:	20000b30 	.word	0x20000b30
 8001088:	20000b2e 	.word	0x20000b2e
 800108c:	200002c0 	.word	0x200002c0
 8001090:	20000478 	.word	0x20000478
 8001094:	20000b10 	.word	0x20000b10
 8001098:	20000b0e 	.word	0x20000b0e

0800109c <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	603a      	str	r2, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	460b      	mov	r3, r1
 80010aa:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010ac:	2303      	movs	r3, #3
 80010ae:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3330      	adds	r3, #48	@ 0x30
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010c4:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80010c6:	88bb      	ldrh	r3, [r7, #4]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010cc:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	709a      	strb	r2, [r3, #2]

  if(index==CAN2){
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d11a      	bne.n	8001110 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <DRV_CANFDSPI_ReadByte+0xc0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a20      	ldr	r2, [pc, #128]	@ (8001160 <DRV_CANFDSPI_ReadByte+0xc4>)
 80010e0:	8811      	ldrh	r1, [r2, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 f9fb 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010ea:	89bb      	ldrh	r3, [r7, #12]
 80010ec:	2264      	movs	r2, #100	@ 0x64
 80010ee:	9200      	str	r2, [sp, #0]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <DRV_CANFDSPI_ReadByte+0xc8>)
 80010f2:	4919      	ldr	r1, [pc, #100]	@ (8001158 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010f4:	481c      	ldr	r0, [pc, #112]	@ (8001168 <DRV_CANFDSPI_ReadByte+0xcc>)
 80010f6:	f00b fd71 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <DRV_CANFDSPI_ReadByte+0xc0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <DRV_CANFDSPI_ReadByte+0xc4>)
 8001104:	8811      	ldrh	r1, [r2, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f009 f9e9 	bl	800a4e0 <HAL_GPIO_WritePin>
 800110e:	e019      	b.n	8001144 <DRV_CANFDSPI_ReadByte+0xa8>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <DRV_CANFDSPI_ReadByte+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a16      	ldr	r2, [pc, #88]	@ (8001170 <DRV_CANFDSPI_ReadByte+0xd4>)
 8001116:	8811      	ldrh	r1, [r2, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f009 f9e0 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001120:	89bb      	ldrh	r3, [r7, #12]
 8001122:	2264      	movs	r2, #100	@ 0x64
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <DRV_CANFDSPI_ReadByte+0xc8>)
 8001128:	490b      	ldr	r1, [pc, #44]	@ (8001158 <DRV_CANFDSPI_ReadByte+0xbc>)
 800112a:	480f      	ldr	r0, [pc, #60]	@ (8001168 <DRV_CANFDSPI_ReadByte+0xcc>)
 800112c:	f00b fd56 	bl	800cbdc <HAL_SPI_TransmitReceive>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <DRV_CANFDSPI_ReadByte+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <DRV_CANFDSPI_ReadByte+0xd4>)
 800113a:	8811      	ldrh	r1, [r2, #0]
 800113c:	2201      	movs	r2, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f009 f9ce 	bl	800a4e0 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <DRV_CANFDSPI_ReadByte+0xc8>)
 8001146:	789a      	ldrb	r2, [r3, #2]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000260 	.word	0x20000260
 800115c:	20000b30 	.word	0x20000b30
 8001160:	20000b2e 	.word	0x20000b2e
 8001164:	200002c0 	.word	0x200002c0
 8001168:	20000478 	.word	0x20000478
 800116c:	20000b10 	.word	0x20000b10
 8001170:	20000b0e 	.word	0x20000b0e

08001174 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	460b      	mov	r3, r1
 8001180:	80bb      	strh	r3, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 8001186:	2303      	movs	r3, #3
 8001188:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3320      	adds	r3, #32
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <DRV_CANFDSPI_WriteByte+0xb8>)
 800119e:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <DRV_CANFDSPI_WriteByte+0xb8>)
 80011a6:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 80011a8:	4a20      	ldr	r2, [pc, #128]	@ (800122c <DRV_CANFDSPI_WriteByte+0xb8>)
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	7093      	strb	r3, [r2, #2]

  if(index==CAN2){
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d11a      	bne.n	80011ea <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <DRV_CANFDSPI_WriteByte+0xc0>)
 80011ba:	8811      	ldrh	r1, [r2, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 f98e 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011c4:	89bb      	ldrh	r3, [r7, #12]
 80011c6:	2264      	movs	r2, #100	@ 0x64
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <DRV_CANFDSPI_WriteByte+0xc4>)
 80011cc:	4917      	ldr	r1, [pc, #92]	@ (800122c <DRV_CANFDSPI_WriteByte+0xb8>)
 80011ce:	481b      	ldr	r0, [pc, #108]	@ (800123c <DRV_CANFDSPI_WriteByte+0xc8>)
 80011d0:	f00b fd04 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <DRV_CANFDSPI_WriteByte+0xc0>)
 80011de:	8811      	ldrh	r1, [r2, #0]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f009 f97c 	bl	800a4e0 <HAL_GPIO_WritePin>
 80011e8:	e019      	b.n	800121e <DRV_CANFDSPI_WriteByte+0xaa>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <DRV_CANFDSPI_WriteByte+0xcc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <DRV_CANFDSPI_WriteByte+0xd0>)
 80011f0:	8811      	ldrh	r1, [r2, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f009 f973 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011fa:	89bb      	ldrh	r3, [r7, #12]
 80011fc:	2264      	movs	r2, #100	@ 0x64
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <DRV_CANFDSPI_WriteByte+0xc4>)
 8001202:	490a      	ldr	r1, [pc, #40]	@ (800122c <DRV_CANFDSPI_WriteByte+0xb8>)
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <DRV_CANFDSPI_WriteByte+0xc8>)
 8001206:	f00b fce9 	bl	800cbdc <HAL_SPI_TransmitReceive>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <DRV_CANFDSPI_WriteByte+0xcc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a0c      	ldr	r2, [pc, #48]	@ (8001244 <DRV_CANFDSPI_WriteByte+0xd0>)
 8001214:	8811      	ldrh	r1, [r2, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f009 f961 	bl	800a4e0 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000260 	.word	0x20000260
 8001230:	20000b30 	.word	0x20000b30
 8001234:	20000b2e 	.word	0x20000b2e
 8001238:	200002c0 	.word	0x200002c0
 800123c:	20000478 	.word	0x20000478
 8001240:	20000b10 	.word	0x20000b10
 8001244:	20000b0e 	.word	0x20000b0e

08001248 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	603a      	str	r2, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	460b      	mov	r3, r1
 8001256:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001258:	2306      	movs	r3, #6
 800125a:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	b2db      	uxtb	r3, r3
 800126a:	3330      	adds	r3, #48	@ 0x30
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001270:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001278:	705a      	strb	r2, [r3, #1]

  if(index==CAN2){
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d11a      	bne.n	80012b6 <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001280:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <DRV_CANFDSPI_ReadWord+0xf4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a2e      	ldr	r2, [pc, #184]	@ (8001340 <DRV_CANFDSPI_ReadWord+0xf8>)
 8001286:	8811      	ldrh	r1, [r2, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f009 f928 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	2264      	movs	r2, #100	@ 0x64
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <DRV_CANFDSPI_ReadWord+0xfc>)
 8001298:	4927      	ldr	r1, [pc, #156]	@ (8001338 <DRV_CANFDSPI_ReadWord+0xf0>)
 800129a:	482b      	ldr	r0, [pc, #172]	@ (8001348 <DRV_CANFDSPI_ReadWord+0x100>)
 800129c:	f00b fc9e 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <DRV_CANFDSPI_ReadWord+0xf4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a25      	ldr	r2, [pc, #148]	@ (8001340 <DRV_CANFDSPI_ReadWord+0xf8>)
 80012aa:	8811      	ldrh	r1, [r2, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f009 f916 	bl	800a4e0 <HAL_GPIO_WritePin>
 80012b4:	e019      	b.n	80012ea <DRV_CANFDSPI_ReadWord+0xa2>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <DRV_CANFDSPI_ReadWord+0x104>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a25      	ldr	r2, [pc, #148]	@ (8001350 <DRV_CANFDSPI_ReadWord+0x108>)
 80012bc:	8811      	ldrh	r1, [r2, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f009 f90d 	bl	800a4e0 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	2264      	movs	r2, #100	@ 0x64
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001344 <DRV_CANFDSPI_ReadWord+0xfc>)
 80012ce:	491a      	ldr	r1, [pc, #104]	@ (8001338 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012d0:	481d      	ldr	r0, [pc, #116]	@ (8001348 <DRV_CANFDSPI_ReadWord+0x100>)
 80012d2:	f00b fc83 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <DRV_CANFDSPI_ReadWord+0x104>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <DRV_CANFDSPI_ReadWord+0x108>)
 80012e0:	8811      	ldrh	r1, [r2, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f009 f8fb 	bl	800a4e0 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <DRV_CANFDSPI_ReadWord+0xae>
      return spiTransferError;
 80012f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012f4:	e01c      	b.n	8001330 <DRV_CANFDSPI_ReadWord+0xe8>
  }

  // Update data
  *rxd = 0;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 80012fc:	2302      	movs	r3, #2
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e011      	b.n	8001326 <DRV_CANFDSPI_ReadWord+0xde>
      x = (uint32_t) spiReceiveBuffer[i];
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4a0f      	ldr	r2, [pc, #60]	@ (8001344 <DRV_CANFDSPI_ReadWord+0xfc>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	3b02      	subs	r3, #2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	441a      	add	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3301      	adds	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d9ea      	bls.n	8001302 <DRV_CANFDSPI_ReadWord+0xba>
  }

  return spiTransferError;
 800132c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000260 	.word	0x20000260
 800133c:	20000b30 	.word	0x20000b30
 8001340:	20000b2e 	.word	0x20000b2e
 8001344:	200002c0 	.word	0x200002c0
 8001348:	20000478 	.word	0x20000478
 800134c:	20000b10 	.word	0x20000b10
 8001350:	20000b0e 	.word	0x20000b0e

08001354 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	603a      	str	r2, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	460b      	mov	r3, r1
 8001362:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 8001364:	2306      	movs	r3, #6
 8001366:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	b29b      	uxth	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3320      	adds	r3, #32
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <DRV_CANFDSPI_WriteWord+0xd4>)
 800137c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001384:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e00b      	b.n	80013a4 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	40da      	lsrs	r2, r3
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3302      	adds	r3, #2
 8001398:	b2d1      	uxtb	r1, r2
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <DRV_CANFDSPI_WriteWord+0xd4>)
 800139c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3301      	adds	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d9f0      	bls.n	800138c <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN2){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d11a      	bne.n	80013e6 <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <DRV_CANFDSPI_WriteWord+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001430 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013b6:	8811      	ldrh	r1, [r2, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f009 f890 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	2264      	movs	r2, #100	@ 0x64
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <DRV_CANFDSPI_WriteWord+0xe0>)
 80013c8:	4917      	ldr	r1, [pc, #92]	@ (8001428 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013ca:	481b      	ldr	r0, [pc, #108]	@ (8001438 <DRV_CANFDSPI_WriteWord+0xe4>)
 80013cc:	f00b fc06 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <DRV_CANFDSPI_WriteWord+0xd8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a15      	ldr	r2, [pc, #84]	@ (8001430 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013da:	8811      	ldrh	r1, [r2, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f009 f87e 	bl	800a4e0 <HAL_GPIO_WritePin>
 80013e4:	e019      	b.n	800141a <DRV_CANFDSPI_WriteWord+0xc6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <DRV_CANFDSPI_WriteWord+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a15      	ldr	r2, [pc, #84]	@ (8001440 <DRV_CANFDSPI_WriteWord+0xec>)
 80013ec:	8811      	ldrh	r1, [r2, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f009 f875 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013f6:	89bb      	ldrh	r3, [r7, #12]
 80013f8:	2264      	movs	r2, #100	@ 0x64
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <DRV_CANFDSPI_WriteWord+0xe0>)
 80013fe:	490a      	ldr	r1, [pc, #40]	@ (8001428 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <DRV_CANFDSPI_WriteWord+0xe4>)
 8001402:	f00b fbeb 	bl	800cbdc <HAL_SPI_TransmitReceive>
 8001406:	4603      	mov	r3, r0
 8001408:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <DRV_CANFDSPI_WriteWord+0xe8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <DRV_CANFDSPI_WriteWord+0xec>)
 8001410:	8811      	ldrh	r1, [r2, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f009 f863 	bl	800a4e0 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 800141a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000260 	.word	0x20000260
 800142c:	20000b30 	.word	0x20000b30
 8001430:	20000b2e 	.word	0x20000b2e
 8001434:	200002c0 	.word	0x200002c0
 8001438:	20000478 	.word	0x20000478
 800143c:	20000b10 	.word	0x20000b10
 8001440:	20000b0e 	.word	0x20000b0e

08001444 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	b2db      	uxtb	r3, r3
 8001466:	3330      	adds	r3, #48	@ 0x30
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800146c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 8001474:	705a      	strb	r2, [r3, #1]

    if(index==CAN2){
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d11a      	bne.n	80014b2 <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2f      	ldr	r2, [pc, #188]	@ (8001540 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 8001482:	8811      	ldrh	r1, [r2, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f009 f82a 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	2264      	movs	r2, #100	@ 0x64
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	4a2c      	ldr	r2, [pc, #176]	@ (8001544 <DRV_CANFDSPI_ReadHalfWord+0x100>)
 8001494:	4928      	ldr	r1, [pc, #160]	@ (8001538 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 8001496:	482c      	ldr	r0, [pc, #176]	@ (8001548 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 8001498:	f00b fba0 	bl	800cbdc <HAL_SPI_TransmitReceive>
 800149c:	4603      	mov	r3, r0
 800149e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 80014a6:	8811      	ldrh	r1, [r2, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f009 f818 	bl	800a4e0 <HAL_GPIO_WritePin>
 80014b0:	e019      	b.n	80014e6 <DRV_CANFDSPI_ReadHalfWord+0xa2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a26      	ldr	r2, [pc, #152]	@ (8001550 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014b8:	8811      	ldrh	r1, [r2, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f009 f80f 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014c2:	89bb      	ldrh	r3, [r7, #12]
 80014c4:	2264      	movs	r2, #100	@ 0x64
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <DRV_CANFDSPI_ReadHalfWord+0x100>)
 80014ca:	491b      	ldr	r1, [pc, #108]	@ (8001538 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 80014cc:	481e      	ldr	r0, [pc, #120]	@ (8001548 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014ce:	f00b fb85 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014dc:	8811      	ldrh	r1, [r2, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f008 fffd 	bl	800a4e0 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <DRV_CANFDSPI_ReadHalfWord+0xae>
        return spiTransferError;
 80014ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014f0:	e01e      	b.n	8001530 <DRV_CANFDSPI_ReadHalfWord+0xec>
    }

    // Update data
    *rxd = 0;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80014f8:	2302      	movs	r3, #2
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e013      	b.n	8001526 <DRV_CANFDSPI_ReadHalfWord+0xe2>
        x = (uint32_t) spiReceiveBuffer[i];
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <DRV_CANFDSPI_ReadHalfWord+0x100>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	881a      	ldrh	r2, [r3, #0]
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3b02      	subs	r3, #2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b29a      	uxth	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d9e8      	bls.n	80014fe <DRV_CANFDSPI_ReadHalfWord+0xba>
    }

    return spiTransferError;
 800152c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000260 	.word	0x20000260
 800153c:	20000b30 	.word	0x20000b30
 8001540:	20000b2e 	.word	0x20000b2e
 8001544:	200002c0 	.word	0x200002c0
 8001548:	20000478 	.word	0x20000478
 800154c:	20000b10 	.word	0x20000b10
 8001550:	20000b0e 	.word	0x20000b0e

08001554 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	460b      	mov	r3, r1
 8001560:	80bb      	strh	r3, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 8001566:	2304      	movs	r3, #4
 8001568:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3320      	adds	r3, #32
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800157e:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 8001586:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e00b      	b.n	80015a6 <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	411a      	asrs	r2, r3
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	3302      	adds	r3, #2
 800159a:	b2d1      	uxtb	r1, r2
 800159c:	4a22      	ldr	r2, [pc, #136]	@ (8001628 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800159e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	3301      	adds	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d9f0      	bls.n	800158e <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN2){
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d11a      	bne.n	80015e8 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015b8:	8811      	ldrh	r1, [r2, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 ff8f 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015c2:	89bb      	ldrh	r3, [r7, #12]
 80015c4:	2264      	movs	r2, #100	@ 0x64
 80015c6:	9200      	str	r2, [sp, #0]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 80015ca:	4917      	ldr	r1, [pc, #92]	@ (8001628 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015cc:	481a      	ldr	r0, [pc, #104]	@ (8001638 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 80015ce:	f00b fb05 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015dc:	8811      	ldrh	r1, [r2, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f008 ff7d 	bl	800a4e0 <HAL_GPIO_WritePin>
 80015e6:	e019      	b.n	800161c <DRV_CANFDSPI_WriteHalfWord+0xc8>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 80015ee:	8811      	ldrh	r1, [r2, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 ff74 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015f8:	89bb      	ldrh	r3, [r7, #12]
 80015fa:	2264      	movs	r2, #100	@ 0x64
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 8001600:	4909      	ldr	r1, [pc, #36]	@ (8001628 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 8001604:	f00b faea 	bl	800cbdc <HAL_SPI_TransmitReceive>
 8001608:	4603      	mov	r3, r0
 800160a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f008 ff62 	bl	800a4e0 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 800161c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000260 	.word	0x20000260
 800162c:	20000b30 	.word	0x20000b30
 8001630:	20000b2e 	.word	0x20000b2e
 8001634:	200002c0 	.word	0x200002c0
 8001638:	20000478 	.word	0x20000478
 800163c:	20000b10 	.word	0x20000b10
 8001640:	20000b0e 	.word	0x20000b0e

08001644 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	460b      	mov	r3, r1
 8001654:	81bb      	strh	r3, [r7, #12]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	3302      	adds	r3, #2
 800165e:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001660:	8a7b      	ldrh	r3, [r7, #18]
 8001662:	2b60      	cmp	r3, #96	@ 0x60
 8001664:	d902      	bls.n	800166c <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e068      	b.n	800173e <DRV_CANFDSPI_ReadByteArray+0xfa>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800166c:	89bb      	ldrh	r3, [r7, #12]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	b29b      	uxth	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3330      	adds	r3, #48	@ 0x30
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001680:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001682:	89bb      	ldrh	r3, [r7, #12]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001688:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800168a:	2302      	movs	r3, #2
 800168c:	82fb      	strh	r3, [r7, #22]
 800168e:	e006      	b.n	800169e <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8001690:	8afb      	ldrh	r3, [r7, #22]
 8001692:	4a2d      	ldr	r2, [pc, #180]	@ (8001748 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001694:	2100      	movs	r1, #0
 8001696:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	3301      	adds	r3, #1
 800169c:	82fb      	strh	r3, [r7, #22]
 800169e:	8afa      	ldrh	r2, [r7, #22]
 80016a0:	8a7b      	ldrh	r3, [r7, #18]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d3f4      	bcc.n	8001690 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN2){
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d11a      	bne.n	80016e2 <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016b2:	8811      	ldrh	r1, [r2, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f008 ff12 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016bc:	8a7b      	ldrh	r3, [r7, #18]
 80016be:	2264      	movs	r2, #100	@ 0x64
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	4a24      	ldr	r2, [pc, #144]	@ (8001754 <DRV_CANFDSPI_ReadByteArray+0x110>)
 80016c4:	4920      	ldr	r1, [pc, #128]	@ (8001748 <DRV_CANFDSPI_ReadByteArray+0x104>)
 80016c6:	4824      	ldr	r0, [pc, #144]	@ (8001758 <DRV_CANFDSPI_ReadByteArray+0x114>)
 80016c8:	f00b fa88 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80016cc:	4603      	mov	r3, r0
 80016ce:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80016d0:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016d6:	8811      	ldrh	r1, [r2, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f008 ff00 	bl	800a4e0 <HAL_GPIO_WritePin>
 80016e0:	e019      	b.n	8001716 <DRV_CANFDSPI_ReadByteArray+0xd2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <DRV_CANFDSPI_ReadByteArray+0x118>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 80016e8:	8811      	ldrh	r1, [r2, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 fef7 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016f2:	8a7b      	ldrh	r3, [r7, #18]
 80016f4:	2264      	movs	r2, #100	@ 0x64
 80016f6:	9200      	str	r2, [sp, #0]
 80016f8:	4a16      	ldr	r2, [pc, #88]	@ (8001754 <DRV_CANFDSPI_ReadByteArray+0x110>)
 80016fa:	4913      	ldr	r1, [pc, #76]	@ (8001748 <DRV_CANFDSPI_ReadByteArray+0x104>)
 80016fc:	4816      	ldr	r0, [pc, #88]	@ (8001758 <DRV_CANFDSPI_ReadByteArray+0x114>)
 80016fe:	f00b fa6d 	bl	800cbdc <HAL_SPI_TransmitReceive>
 8001702:	4603      	mov	r3, r0
 8001704:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <DRV_CANFDSPI_ReadByteArray+0x118>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a15      	ldr	r2, [pc, #84]	@ (8001760 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 800170c:	8811      	ldrh	r1, [r2, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f008 fee5 	bl	800a4e0 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 8001716:	2300      	movs	r3, #0
 8001718:	82fb      	strh	r3, [r7, #22]
 800171a:	e00a      	b.n	8001732 <DRV_CANFDSPI_ReadByteArray+0xee>
        rxd[i] = spiReceiveBuffer[i + 2];
 800171c:	8afb      	ldrh	r3, [r7, #22]
 800171e:	1c9a      	adds	r2, r3, #2
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	440b      	add	r3, r1
 8001726:	490b      	ldr	r1, [pc, #44]	@ (8001754 <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001728:	5c8a      	ldrb	r2, [r1, r2]
 800172a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 800172c:	8afb      	ldrh	r3, [r7, #22]
 800172e:	3301      	adds	r3, #1
 8001730:	82fb      	strh	r3, [r7, #22]
 8001732:	8afa      	ldrh	r2, [r7, #22]
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3f0      	bcc.n	800171c <DRV_CANFDSPI_ReadByteArray+0xd8>
    }

    return spiTransferError;
 800173a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000260 	.word	0x20000260
 800174c:	20000b30 	.word	0x20000b30
 8001750:	20000b2e 	.word	0x20000b2e
 8001754:	200002c0 	.word	0x200002c0
 8001758:	20000478 	.word	0x20000478
 800175c:	20000b10 	.word	0x20000b10
 8001760:	20000b0e 	.word	0x20000b0e

08001764 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af02      	add	r7, sp, #8
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	460b      	mov	r3, r1
 8001774:	81bb      	strh	r3, [r7, #12]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	3302      	adds	r3, #2
 800177e:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001780:	8a7b      	ldrh	r3, [r7, #18]
 8001782:	2b60      	cmp	r3, #96	@ 0x60
 8001784:	d902      	bls.n	800178c <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e05a      	b.n	8001842 <DRV_CANFDSPI_WriteByteArray+0xde>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3320      	adds	r3, #32
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017a0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80017a2:	89bb      	ldrh	r3, [r7, #12]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b29      	ldr	r3, [pc, #164]	@ (800184c <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017a8:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	82fb      	strh	r3, [r7, #22]
 80017ae:	e00a      	b.n	80017c6 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80017b0:	8afb      	ldrh	r3, [r7, #22]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	441a      	add	r2, r3
 80017b6:	8afb      	ldrh	r3, [r7, #22]
 80017b8:	3302      	adds	r3, #2
 80017ba:	7811      	ldrb	r1, [r2, #0]
 80017bc:	4a23      	ldr	r2, [pc, #140]	@ (800184c <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017be:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	3301      	adds	r3, #1
 80017c4:	82fb      	strh	r3, [r7, #22]
 80017c6:	8afa      	ldrh	r2, [r7, #22]
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3f0      	bcc.n	80017b0 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN2){
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d11a      	bne.n	800180a <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <DRV_CANFDSPI_WriteByteArray+0xec>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <DRV_CANFDSPI_WriteByteArray+0xf0>)
 80017da:	8811      	ldrh	r1, [r2, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f008 fe7e 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017e4:	8a7b      	ldrh	r3, [r7, #18]
 80017e6:	2264      	movs	r2, #100	@ 0x64
 80017e8:	9200      	str	r2, [sp, #0]
 80017ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 80017ec:	4917      	ldr	r1, [pc, #92]	@ (800184c <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017ee:	481b      	ldr	r0, [pc, #108]	@ (800185c <DRV_CANFDSPI_WriteByteArray+0xf8>)
 80017f0:	f00b f9f4 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80017f4:	4603      	mov	r3, r0
 80017f6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <DRV_CANFDSPI_WriteByteArray+0xec>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a15      	ldr	r2, [pc, #84]	@ (8001854 <DRV_CANFDSPI_WriteByteArray+0xf0>)
 80017fe:	8811      	ldrh	r1, [r2, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f008 fe6c 	bl	800a4e0 <HAL_GPIO_WritePin>
 8001808:	e019      	b.n	800183e <DRV_CANFDSPI_WriteByteArray+0xda>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <DRV_CANFDSPI_WriteByteArray+0x100>)
 8001810:	8811      	ldrh	r1, [r2, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f008 fe63 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800181a:	8a7b      	ldrh	r3, [r7, #18]
 800181c:	2264      	movs	r2, #100	@ 0x64
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 8001822:	490a      	ldr	r1, [pc, #40]	@ (800184c <DRV_CANFDSPI_WriteByteArray+0xe8>)
 8001824:	480d      	ldr	r0, [pc, #52]	@ (800185c <DRV_CANFDSPI_WriteByteArray+0xf8>)
 8001826:	f00b f9d9 	bl	800cbdc <HAL_SPI_TransmitReceive>
 800182a:	4603      	mov	r3, r0
 800182c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a0c      	ldr	r2, [pc, #48]	@ (8001864 <DRV_CANFDSPI_WriteByteArray+0x100>)
 8001834:	8811      	ldrh	r1, [r2, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f008 fe51 	bl	800a4e0 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 800183e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000260 	.word	0x20000260
 8001850:	20000b30 	.word	0x20000b30
 8001854:	20000b2e 	.word	0x20000b2e
 8001858:	200002c0 	.word	0x200002c0
 800185c:	20000478 	.word	0x20000478
 8001860:	20000b10 	.word	0x20000b10
 8001864:	20000b0e 	.word	0x20000b0e

08001868 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af02      	add	r7, sp, #8
 800186e:	60ba      	str	r2, [r7, #8]
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	460b      	mov	r3, r1
 8001878:	81bb      	strh	r3, [r7, #12]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	b29b      	uxth	r3, r3
 8001884:	3302      	adds	r3, #2
 8001886:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001888:	8afb      	ldrh	r3, [r7, #22]
 800188a:	2b60      	cmp	r3, #96	@ 0x60
 800188c:	d902      	bls.n	8001894 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e084      	b.n	800199e <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001894:	89bb      	ldrh	r3, [r7, #12]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	3330      	adds	r3, #48	@ 0x30
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b40      	ldr	r3, [pc, #256]	@ (80019a8 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018a8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 80018aa:	89bb      	ldrh	r3, [r7, #12]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b0:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018b2:	2302      	movs	r3, #2
 80018b4:	83fb      	strh	r3, [r7, #30]
 80018b6:	e006      	b.n	80018c6 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 80018b8:	8bfb      	ldrh	r3, [r7, #30]
 80018ba:	4a3b      	ldr	r2, [pc, #236]	@ (80019a8 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018bc:	2100      	movs	r1, #0
 80018be:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018c0:	8bfb      	ldrh	r3, [r7, #30]
 80018c2:	3301      	adds	r3, #1
 80018c4:	83fb      	strh	r3, [r7, #30]
 80018c6:	8bfa      	ldrh	r2, [r7, #30]
 80018c8:	8afb      	ldrh	r3, [r7, #22]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3f4      	bcc.n	80018b8 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN2){
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d11a      	bne.n	800190a <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <DRV_CANFDSPI_ReadWordArray+0x144>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a35      	ldr	r2, [pc, #212]	@ (80019b0 <DRV_CANFDSPI_ReadWordArray+0x148>)
 80018da:	8811      	ldrh	r1, [r2, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f008 fdfe 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018e4:	8afb      	ldrh	r3, [r7, #22]
 80018e6:	2264      	movs	r2, #100	@ 0x64
 80018e8:	9200      	str	r2, [sp, #0]
 80018ea:	4a32      	ldr	r2, [pc, #200]	@ (80019b4 <DRV_CANFDSPI_ReadWordArray+0x14c>)
 80018ec:	492e      	ldr	r1, [pc, #184]	@ (80019a8 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018ee:	4832      	ldr	r0, [pc, #200]	@ (80019b8 <DRV_CANFDSPI_ReadWordArray+0x150>)
 80018f0:	f00b f974 	bl	800cbdc <HAL_SPI_TransmitReceive>
 80018f4:	4603      	mov	r3, r0
 80018f6:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <DRV_CANFDSPI_ReadWordArray+0x144>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2c      	ldr	r2, [pc, #176]	@ (80019b0 <DRV_CANFDSPI_ReadWordArray+0x148>)
 80018fe:	8811      	ldrh	r1, [r2, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f008 fdec 	bl	800a4e0 <HAL_GPIO_WritePin>
 8001908:	e019      	b.n	800193e <DRV_CANFDSPI_ReadWordArray+0xd6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800190a:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <DRV_CANFDSPI_ReadWordArray+0x154>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2c      	ldr	r2, [pc, #176]	@ (80019c0 <DRV_CANFDSPI_ReadWordArray+0x158>)
 8001910:	8811      	ldrh	r1, [r2, #0]
 8001912:	2200      	movs	r2, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f008 fde3 	bl	800a4e0 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800191a:	8afb      	ldrh	r3, [r7, #22]
 800191c:	2264      	movs	r2, #100	@ 0x64
 800191e:	9200      	str	r2, [sp, #0]
 8001920:	4a24      	ldr	r2, [pc, #144]	@ (80019b4 <DRV_CANFDSPI_ReadWordArray+0x14c>)
 8001922:	4921      	ldr	r1, [pc, #132]	@ (80019a8 <DRV_CANFDSPI_ReadWordArray+0x140>)
 8001924:	4824      	ldr	r0, [pc, #144]	@ (80019b8 <DRV_CANFDSPI_ReadWordArray+0x150>)
 8001926:	f00b f959 	bl	800cbdc <HAL_SPI_TransmitReceive>
 800192a:	4603      	mov	r3, r0
 800192c:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <DRV_CANFDSPI_ReadWordArray+0x158>)
 8001934:	8811      	ldrh	r1, [r2, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f008 fdd1 	bl	800a4e0 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 800193e:	7e7b      	ldrb	r3, [r7, #25]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <DRV_CANFDSPI_ReadWordArray+0xe2>
        return spiTransferError;
 8001944:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001948:	e029      	b.n	800199e <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Convert Byte array to Word array
    n = 2;
 800194a:	2302      	movs	r3, #2
 800194c:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 800194e:	2300      	movs	r3, #0
 8001950:	83fb      	strh	r3, [r7, #30]
 8001952:	e01e      	b.n	8001992 <DRV_CANFDSPI_ReadWordArray+0x12a>
        w.word = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001958:	2300      	movs	r3, #0
 800195a:	83bb      	strh	r3, [r7, #28]
 800195c:	e00d      	b.n	800197a <DRV_CANFDSPI_ReadWordArray+0x112>
            w.byte[j] = spiReceiveBuffer[n];
 800195e:	8b7a      	ldrh	r2, [r7, #26]
 8001960:	8bbb      	ldrh	r3, [r7, #28]
 8001962:	4914      	ldr	r1, [pc, #80]	@ (80019b4 <DRV_CANFDSPI_ReadWordArray+0x14c>)
 8001964:	5c8a      	ldrb	r2, [r1, r2]
 8001966:	3320      	adds	r3, #32
 8001968:	443b      	add	r3, r7
 800196a:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 800196e:	8bbb      	ldrh	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	83bb      	strh	r3, [r7, #28]
 8001974:	8b7b      	ldrh	r3, [r7, #26]
 8001976:	3301      	adds	r3, #1
 8001978:	837b      	strh	r3, [r7, #26]
 800197a:	8bbb      	ldrh	r3, [r7, #28]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d9ee      	bls.n	800195e <DRV_CANFDSPI_ReadWordArray+0xf6>
        }
        rxd[i] = w.word;
 8001980:	8bfb      	ldrh	r3, [r7, #30]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 800198c:	8bfb      	ldrh	r3, [r7, #30]
 800198e:	3301      	adds	r3, #1
 8001990:	83fb      	strh	r3, [r7, #30]
 8001992:	8bfa      	ldrh	r2, [r7, #30]
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3dc      	bcc.n	8001954 <DRV_CANFDSPI_ReadWordArray+0xec>
    }

    return spiTransferError;
 800199a:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000260 	.word	0x20000260
 80019ac:	20000b30 	.word	0x20000b30
 80019b0:	20000b2e 	.word	0x20000b2e
 80019b4:	200002c0 	.word	0x200002c0
 80019b8:	20000478 	.word	0x20000478
 80019bc:	20000b10 	.word	0x20000b10
 80019c0:	20000b0e 	.word	0x20000b0e

080019c4 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80019d4:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <DRV_CANFDSPI_Configure+0x118>)
 80019d6:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	7a3b      	ldrb	r3, [r7, #8]
 80019e4:	f362 0304 	bfi	r3, r2, #0, #5
 80019e8:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	7a3b      	ldrb	r3, [r7, #8]
 80019f6:	f362 1345 	bfi	r3, r2, #5, #1
 80019fa:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	7a3b      	ldrb	r3, [r7, #8]
 8001a08:	f362 1386 	bfi	r3, r2, #6, #1
 8001a0c:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	7a7b      	ldrb	r3, [r7, #9]
 8001a1a:	f362 0300 	bfi	r3, r2, #0, #1
 8001a1e:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	7a7b      	ldrb	r3, [r7, #9]
 8001a2c:	f362 0342 	bfi	r3, r2, #1, #2
 8001a30:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	7a7b      	ldrb	r3, [r7, #9]
 8001a3e:	f362 1304 	bfi	r3, r2, #4, #1
 8001a42:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	785b      	ldrb	r3, [r3, #1]
 8001a48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	f362 0300 	bfi	r3, r2, #0, #1
 8001a54:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	785b      	ldrb	r3, [r3, #1]
 8001a5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	7abb      	ldrb	r3, [r7, #10]
 8001a62:	f362 0341 	bfi	r3, r2, #1, #1
 8001a66:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	785b      	ldrb	r3, [r3, #1]
 8001a6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	7abb      	ldrb	r3, [r7, #10]
 8001a74:	f362 0382 	bfi	r3, r2, #2, #1
 8001a78:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	7abb      	ldrb	r3, [r7, #10]
 8001a86:	f362 03c3 	bfi	r3, r2, #3, #1
 8001a8a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	7abb      	ldrb	r3, [r7, #10]
 8001a98:	f362 1304 	bfi	r3, r2, #4, #1
 8001a9c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	f362 1307 	bfi	r3, r2, #4, #4
 8001aae:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fc4c 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	e001      	b.n	8001ad2 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	04980760 	.word	0x04980760

08001ae0 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001aea:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
 8001aee:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001af2:	b2d9      	uxtb	r1, r3
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	7813      	ldrb	r3, [r2, #0]
 8001af8:	f361 0304 	bfi	r3, r1, #0, #5
 8001afc:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001afe:	7b3b      	ldrb	r3, [r7, #12]
 8001b00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	7813      	ldrb	r3, [r2, #0]
 8001b0a:	f361 1345 	bfi	r3, r1, #5, #1
 8001b0e:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b16:	b2d9      	uxtb	r1, r3
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	7813      	ldrb	r3, [r2, #0]
 8001b1c:	f361 1386 	bfi	r3, r1, #6, #1
 8001b20:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001b22:	7b7b      	ldrb	r3, [r7, #13]
 8001b24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b28:	b2d9      	uxtb	r1, r3
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	7813      	ldrb	r3, [r2, #0]
 8001b2e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b32:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001b34:	7b7b      	ldrb	r3, [r7, #13]
 8001b36:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001b3a:	b2d9      	uxtb	r1, r3
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	7853      	ldrb	r3, [r2, #1]
 8001b40:	f361 0301 	bfi	r3, r1, #0, #2
 8001b44:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b4c:	b2d9      	uxtb	r1, r3
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	7853      	ldrb	r3, [r2, #1]
 8001b52:	f361 0382 	bfi	r3, r1, #2, #1
 8001b56:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b5e:	b2d9      	uxtb	r1, r3
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	7853      	ldrb	r3, [r2, #1]
 8001b64:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b68:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b70:	b2d9      	uxtb	r1, r3
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	7853      	ldrb	r3, [r2, #1]
 8001b76:	f361 1304 	bfi	r3, r1, #4, #1
 8001b7a:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b82:	b2d9      	uxtb	r1, r3
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	7853      	ldrb	r3, [r2, #1]
 8001b88:	f361 1345 	bfi	r3, r1, #5, #1
 8001b8c:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b94:	b2d9      	uxtb	r1, r3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	7853      	ldrb	r3, [r2, #1]
 8001b9a:	f361 1386 	bfi	r3, r1, #6, #1
 8001b9e:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ba6:	b2d9      	uxtb	r1, r3
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	7853      	ldrb	r3, [r2, #1]
 8001bac:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bb0:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bb8:	b2d9      	uxtb	r1, r3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	7893      	ldrb	r3, [r2, #2]
 8001bbe:	f361 0303 	bfi	r3, r1, #0, #4
 8001bc2:	7093      	strb	r3, [r2, #2]

    return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	04980760 	.word	0x04980760

08001bd8 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	460a      	mov	r2, r1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001bf0:	f107 020e 	add.w	r2, r7, #14
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fa4f 	bl	800109c <DRV_CANFDSPI_ReadByte>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e01a      	b.n	8001c46 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	f023 0307 	bic.w	r3, r3, #7
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001c1a:	7bba      	ldrb	r2, [r7, #14]
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001c24:	7bba      	ldrb	r2, [r7, #14]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2103      	movs	r1, #3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff faa2 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001c3c:	f06f 0301 	mvn.w	r3, #1
 8001c40:	e001      	b.n	8001c46 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	603a      	str	r2, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001c6a:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001c6c:	7a3b      	ldrb	r3, [r7, #8]
 8001c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c72:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f362 0304 	bfi	r3, r2, #0, #5
 8001c84:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f362 1347 	bfi	r3, r2, #5, #3
 8001c96:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	7abb      	ldrb	r3, [r7, #10]
 8001ca4:	f362 1346 	bfi	r3, r2, #5, #2
 8001ca8:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	7abb      	ldrb	r3, [r7, #10]
 8001cb6:	f362 0304 	bfi	r3, r2, #0, #5
 8001cba:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	7a3b      	ldrb	r3, [r7, #8]
 8001cc8:	f362 1386 	bfi	r3, r2, #6, #1
 8001ccc:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	0052      	lsls	r2, r2, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3350      	adds	r3, #80	@ 0x50
 8001cde:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	89b9      	ldrh	r1, [r7, #12]
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fb34 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	00600400 	.word	0x00600400

08001d00 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001d0a:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001d0c:	7b3b      	ldrb	r3, [r7, #12]
 8001d0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	7813      	ldrb	r3, [r2, #0]
 8001d18:	f361 0300 	bfi	r3, r1, #0, #1
 8001d1c:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d24:	b2d9      	uxtb	r1, r3
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	7813      	ldrb	r3, [r2, #0]
 8001d2a:	f361 0345 	bfi	r3, r1, #1, #5
 8001d2e:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001d30:	7bbb      	ldrb	r3, [r7, #14]
 8001d32:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001d36:	b2d9      	uxtb	r1, r3
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	7813      	ldrb	r3, [r2, #0]
 8001d3c:	f361 1387 	bfi	r3, r1, #6, #2
 8001d40:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	7853      	ldrb	r3, [r2, #1]
 8001d4e:	f361 0304 	bfi	r3, r1, #0, #5
 8001d52:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001d5a:	b2d9      	uxtb	r1, r3
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	7853      	ldrb	r3, [r2, #1]
 8001d60:	f361 1347 	bfi	r3, r1, #5, #3
 8001d64:	7053      	strb	r3, [r2, #1]

    return 0;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	00600400 	.word	0x00600400

08001d78 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0a0      	sub	sp, #128	@ 0x80
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4603      	mov	r3, r0
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	460b      	mov	r3, r1
 8001d88:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	0052      	lsls	r2, r2, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3350      	adds	r3, #80	@ 0x50
 8001da0:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001da4:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001da8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8001dac:	7bf8      	ldrb	r0, [r7, #15]
 8001dae:	2303      	movs	r3, #3
 8001db0:	f7ff fd5a 	bl	8001868 <DRV_CANFDSPI_ReadWordArray>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8001dba:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e0c5      	b.n	8001f54 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8001dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dca:	667b      	str	r3, [r7, #100]	@ 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8001dcc:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001dd0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8001dda:	f06f 0301 	mvn.w	r3, #1
 8001dde:	e0b9      	b.n	8001f54 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fc3a 	bl	8003664 <DRV_CANFDSPI_DlcToDataBytes>
 8001df0:	6778      	str	r0, [r7, #116]	@ 0x74
    if (dataBytesInObject < txdNumBytes) {
 8001df2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d202      	bcs.n	8001e02 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8001dfc:	f06f 0302 	mvn.w	r3, #2
 8001e00:	e0a8      	b.n	8001f54 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8001e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e04:	663b      	str	r3, [r7, #96]	@ 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8001e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8001e0a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
#endif
    a += cRAMADDR_START;
 8001e18:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001e1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e20:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	789b      	ldrb	r3, [r3, #2]
 8001e34:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	791b      	ldrb	r3, [r3, #4]
 8001e40:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	795b      	ldrb	r3, [r3, #5]
 8001e46:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	799b      	ldrb	r3, [r3, #6]
 8001e4c:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	79db      	ldrb	r3, [r3, #7]
 8001e52:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001e5a:	e010      	b.n	8001e7e <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8001e5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	441a      	add	r2, r3
 8001e64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e68:	3308      	adds	r3, #8
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	3380      	adds	r3, #128	@ 0x80
 8001e6e:	443b      	add	r3, r7
 8001e70:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8001e74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001e7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d8e8      	bhi.n	8001e5c <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    uint8_t j = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if (txdNumBytes % 4) {
 8001e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02b      	beq.n	8001efa <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8001ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f1c3 0304 	rsb	r3, r3, #4
 8001eb2:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        i = txdNumBytes + 8;
 8001eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        for (j = 0; j < n; j++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001ec8:	e010      	b.n	8001eec <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8001eca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ece:	f103 0208 	add.w	r2, r3, #8
 8001ed2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3380      	adds	r3, #128	@ 0x80
 8001eda:	443b      	add	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8001ee2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001eec:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8e7      	bhi.n	8001eca <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8001efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001f04:	4413      	add	r3, r2
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3308      	adds	r3, #8
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f107 0210 	add.w	r2, r7, #16
 8001f10:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8001f14:	7bf8      	ldrb	r0, [r7, #15]
 8001f16:	f7ff fc25 	bl	8001764 <DRV_CANFDSPI_WriteByteArray>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8001f20:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8001f28:	f06f 0303 	mvn.w	r3, #3
 8001f2c:	e012      	b.n	8001f54 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8001f2e:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8001f32:	7bb9      	ldrb	r1, [r7, #14]
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f83a 	bl	8001fb0 <DRV_CANFDSPI_TransmitChannelUpdate>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8001f42:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 8001f4a:	f06f 0304 	mvn.w	r3, #4
 8001f4e:	e001      	b.n	8001f54 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8001f50:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3780      	adds	r7, #128	@ 0x80
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	460a      	mov	r2, r1
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	0052      	lsls	r2, r2, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3350      	adds	r3, #80	@ 0x50
 8001f88:	81bb      	strh	r3, [r7, #12]
    a += 1;
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8001f90:	2302      	movs	r3, #2
 8001f92:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	89b9      	ldrh	r1, [r7, #12]
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f8ea 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8001fa4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	71bb      	strb	r3, [r7, #6]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	0052      	lsls	r2, r2, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3351      	adds	r3, #81	@ 0x51
 8001fd6:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8001fdc:	7a7b      	ldrb	r3, [r7, #9]
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8001fea:	7a7b      	ldrb	r3, [r7, #9]
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8001ff2:	7a7a      	ldrb	r2, [r7, #9]
 8001ff4:	89b9      	ldrh	r1, [r7, #12]
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f8bb 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e001      	b.n	8002014 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 8002010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	603a      	str	r2, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
 8002028:	460b      	mov	r3, r1
 800202a:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	333e      	adds	r3, #62	@ 0x3e
 800203e:	b29b      	uxth	r3, r3
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	89b9      	ldrh	r1, [r7, #12]
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f982 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002054:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	603a      	str	r2, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	460b      	mov	r3, r1
 800206e:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	b29b      	uxth	r3, r3
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	b29b      	uxth	r3, r3
 8002086:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800208a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	89b9      	ldrh	r1, [r7, #12]
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f95e 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4604      	mov	r4, r0
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4623      	mov	r3, r4
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	4603      	mov	r3, r0
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	460b      	mov	r3, r1
 80020c0:	717b      	strb	r3, [r7, #5]
 80020c2:	4613      	mov	r3, r2
 80020c4:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80020ca:	793b      	ldrb	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80020d0:	7a3b      	ldrb	r3, [r7, #8]
 80020d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d6:	723b      	strb	r3, [r7, #8]
 80020d8:	e003      	b.n	80020e2 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80020da:	7a3b      	ldrb	r3, [r7, #8]
 80020dc:	f36f 13c7 	bfc	r3, #7, #1
 80020e0:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80020e2:	797b      	ldrb	r3, [r7, #5]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	7a3b      	ldrb	r3, [r7, #8]
 80020ec:	f362 0304 	bfi	r3, r2, #0, #5
 80020f0:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80020fa:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80020fc:	7a3a      	ldrb	r2, [r7, #8]
 80020fe:	89b9      	ldrh	r1, [r7, #12]
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f836 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800210c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}

08002118 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	603a      	str	r2, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	460b      	mov	r3, r1
 8002126:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002130:	79bb      	ldrb	r3, [r7, #6]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 8002136:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800213a:	e033      	b.n	80021a4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 800213e:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002140:	7a3b      	ldrb	r3, [r7, #8]
 8002142:	f36f 13c7 	bfc	r3, #7, #1
 8002146:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002150:	b2da      	uxtb	r2, r3
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	f362 0304 	bfi	r3, r2, #0, #5
 8002158:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f362 1347 	bfi	r3, r2, #5, #3
 800216a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	7a3b      	ldrb	r3, [r7, #8]
 8002178:	f362 1345 	bfi	r3, r2, #5, #1
 800217c:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	b29b      	uxth	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	0052      	lsls	r2, r2, #1
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	b29b      	uxth	r3, r3
 800218c:	3350      	adds	r3, #80	@ 0x50
 800218e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	89b9      	ldrh	r1, [r7, #12]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f8dc 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80021a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	00600400 	.word	0x00600400

080021b0 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 80021ba:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80021c2:	b2d9      	uxtb	r1, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	7813      	ldrb	r3, [r2, #0]
 80021c8:	f361 0345 	bfi	r3, r1, #1, #5
 80021cc:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80021d4:	b2d9      	uxtb	r1, r3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	8813      	ldrh	r3, [r2, #0]
 80021da:	f361 1388 	bfi	r3, r1, #6, #3
 80021de:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80021e0:	7b3b      	ldrb	r3, [r7, #12]
 80021e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021e6:	b2d9      	uxtb	r1, r3
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	7813      	ldrb	r3, [r2, #0]
 80021ec:	f361 0300 	bfi	r3, r1, #0, #1
 80021f0:	7013      	strb	r3, [r2, #0]

    return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	00600400 	.word	0x00600400

08002204 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0a0      	sub	sp, #128	@ 0x80
 8002208:	af00      	add	r7, sp, #0
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	460b      	mov	r3, r1
 8002214:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t i = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	0052      	lsls	r2, r2, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	b29b      	uxth	r3, r3
 8002236:	3350      	adds	r3, #80	@ 0x50
 8002238:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 800223c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002240:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 8002244:	7bf8      	ldrb	r0, [r7, #15]
 8002246:	2303      	movs	r3, #3
 8002248:	f7ff fb0e 	bl	8001868 <DRV_CANFDSPI_ReadWordArray>
 800224c:	4603      	mov	r3, r0
 800224e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002252:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e0cd      	b.n	80023fc <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002262:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8002264:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002268:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 8002272:	f06f 0301 	mvn.w	r3, #1
 8002276:	e0c1      	b.n	80023fc <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800227a:	667b      	str	r3, [r7, #100]	@ 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 800227c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800227e:	663b      	str	r3, [r7, #96]	@ 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002280:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	b29b      	uxth	r3, r3
 800228a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
#endif
    a += cRAMADDR_START;
 800228e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002296:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 800229a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800229e:	3308      	adds	r3, #8
 80022a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80022a4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 80022b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022b6:	3304      	adds	r3, #4
 80022b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80022bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80022ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3304      	adds	r3, #4
 80022d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80022da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022de:	2b4c      	cmp	r3, #76	@ 0x4c
 80022e0:	d902      	bls.n	80022e8 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80022e2:	234c      	movs	r3, #76	@ 0x4c
 80022e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80022e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	f107 0214 	add.w	r2, r7, #20
 80022f2:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80022f6:	7bf8      	ldrb	r0, [r7, #15]
 80022f8:	f7ff f9a4 	bl	8001644 <DRV_CANFDSPI_ReadByteArray>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002302:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 800230a:	f06f 0302 	mvn.w	r3, #2
 800230e:	e075      	b.n	80023fc <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 8002310:	7d3b      	ldrb	r3, [r7, #20]
 8002312:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 8002314:	7d7b      	ldrb	r3, [r7, #21]
 8002316:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8002318:	7dbb      	ldrb	r3, [r7, #22]
 800231a:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 8002326:	7e3b      	ldrb	r3, [r7, #24]
 8002328:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 800232a:	7e7b      	ldrb	r3, [r7, #25]
 800232c:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 800232e:	7ebb      	ldrb	r3, [r7, #26]
 8002330:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 8002332:	7efb      	ldrb	r3, [r7, #27]
 8002334:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 800233c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d027      	beq.n	800239a <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 800234a:	7f3b      	ldrb	r3, [r7, #28]
 800234c:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 800234e:	7f7b      	ldrb	r3, [r7, #29]
 8002350:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8002352:	7fbb      	ldrb	r3, [r7, #30]
 8002354:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002360:	2300      	movs	r3, #0
 8002362:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002366:	e011      	b.n	800238c <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002368:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800236c:	f103 020c 	add.w	r2, r3, #12
 8002370:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	440b      	add	r3, r1
 8002378:	3280      	adds	r2, #128	@ 0x80
 800237a:	443a      	add	r2, r7
 800237c:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002380:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8002382:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002386:	3301      	adds	r3, #1
 8002388:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800238c:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002390:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002394:	429a      	cmp	r2, r3
 8002396:	d3e7      	bcc.n	8002368 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8002398:	e01e      	b.n	80023d8 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80023a6:	e011      	b.n	80023cc <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 80023a8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80023ac:	f103 0208 	add.w	r2, r3, #8
 80023b0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	440b      	add	r3, r1
 80023b8:	3280      	adds	r2, #128	@ 0x80
 80023ba:	443a      	add	r2, r7
 80023bc:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80023c0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80023c2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80023c6:	3301      	adds	r3, #1
 80023c8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80023cc:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80023d0:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3e7      	bcc.n	80023a8 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80023d8:	7bba      	ldrb	r2, [r7, #14]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f810 	bl	8002404 <DRV_CANFDSPI_ReceiveChannelUpdate>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80023ea:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80023f2:	f06f 0303 	mvn.w	r3, #3
 80023f6:	e001      	b.n	80023fc <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80023f8:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3780      	adds	r7, #128	@ 0x80
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	0052      	lsls	r2, r2, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	b29b      	uxth	r3, r3
 800242e:	3351      	adds	r3, #81	@ 0x51
 8002430:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 8002432:	7a7b      	ldrb	r3, [r7, #9]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800243a:	7a7a      	ldrb	r2, [r7, #9]
 800243c:	89f9      	ldrh	r1, [r7, #14]
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fe97 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 8002446:	4603      	mov	r3, r0
 8002448:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800244a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	460a      	mov	r2, r1
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	4613      	mov	r3, r2
 8002464:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 800246e:	231e      	movs	r3, #30
 8002470:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 8002476:	f107 0208 	add.w	r2, r7, #8
 800247a:	89b9      	ldrh	r1, [r7, #12]
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ffe0 	bl	8001444 <DRV_CANFDSPI_ReadHalfWord>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	e01b      	b.n	80024ce <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8002496:	893b      	ldrh	r3, [r7, #8]
 8002498:	b21a      	sxth	r2, r3
 800249a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800249e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 80024ac:	893a      	ldrh	r2, [r7, #8]
 80024ae:	89b9      	ldrh	r1, [r7, #12]
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f84e 	bl	8001554 <DRV_CANFDSPI_WriteHalfWord>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80024c4:	f06f 0301 	mvn.w	r3, #1
 80024c8:	e001      	b.n	80024ce <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	603a      	str	r2, [r7, #0]
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	460b      	mov	r3, r1
 80024e4:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	0052      	lsls	r2, r2, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3354      	adds	r3, #84	@ 0x54
 8002502:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002504:	f107 0208 	add.w	r2, r7, #8
 8002508:	89b9      	ldrh	r1, [r7, #12]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fdc5 	bl	800109c <DRV_CANFDSPI_ReadByte>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e007      	b.n	8002534 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8002524:	7a3b      	ldrb	r3, [r7, #8]
 8002526:	f003 0317 	and.w	r3, r3, #23
 800252a:	b2da      	uxtb	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	603a      	str	r2, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
 8002548:	460b      	mov	r3, r1
 800254a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 800255a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800255e:	e022      	b.n	80025a6 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	0052      	lsls	r2, r2, #1
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	b29b      	uxth	r3, r3
 8002572:	3354      	adds	r3, #84	@ 0x54
 8002574:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002576:	f107 0208 	add.w	r2, r7, #8
 800257a:	89b9      	ldrh	r1, [r7, #12]
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fd8c 	bl	800109c <DRV_CANFDSPI_ReadByte>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
 8002594:	e007      	b.n	80025a6 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 8002596:	7a3b      	ldrb	r3, [r7, #8]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	b2da      	uxtb	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	460b      	mov	r3, r1
 80025ba:	71bb      	strb	r3, [r7, #6]
 80025bc:	4613      	mov	r3, r2
 80025be:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80025ce:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80025d2:	e036      	b.n	8002642 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	0052      	lsls	r2, r2, #1
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3350      	adds	r3, #80	@ 0x50
 80025e4:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80025ea:	f107 0208 	add.w	r2, r7, #8
 80025ee:	89b9      	ldrh	r1, [r7, #12]
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fd52 	bl	800109c <DRV_CANFDSPI_ReadByte>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	e01b      	b.n	8002642 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 800260a:	7a3b      	ldrb	r3, [r7, #8]
 800260c:	b25a      	sxtb	r2, r3
 800260e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	b25b      	sxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002620:	7a3a      	ldrb	r2, [r7, #8]
 8002622:	89b9      	ldrh	r1, [r7, #12]
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fda4 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 800262c:	4603      	mov	r3, r0
 800262e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8002638:	f06f 0301 	mvn.w	r3, #1
 800263c:	e001      	b.n	8002642 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002662:	2334      	movs	r3, #52	@ 0x34
 8002664:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 800266a:	f107 0210 	add.w	r2, r7, #16
 800266e:	8ab9      	ldrh	r1, [r7, #20]
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fde8 	bl	8001248 <DRV_CANFDSPI_ReadWord>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800267c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	e00d      	b.n	80026a6 <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 800268a:	7c7a      	ldrb	r2, [r7, #17]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002690:	7c3a      	ldrb	r2, [r7, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 8002696:	7cbb      	ldrb	r3, [r7, #18]
 8002698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800269c:	b2da      	uxtb	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80026a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80026c0:	f107 020e 	add.w	r2, r7, #14
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fce6 	bl	800109c <DRV_CANFDSPI_ReadByte>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
 80026e0:	e015      	b.n	800270e <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80026e2:	7bbb      	ldrb	r3, [r7, #14]
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80026ec:	7bba      	ldrb	r2, [r7, #14]
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fd3d 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 80026fa:	4603      	mov	r3, r0
 80026fc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8002706:	f06f 0301 	mvn.w	r3, #1
 800270a:	e000      	b.n	800270e <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b090      	sub	sp, #64	@ 0x40
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	460a      	mov	r2, r1
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	4613      	mov	r3, r2
 8002724:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 800272c:	2300      	movs	r3, #0
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002730:	e008      	b.n	8002744 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8002732:	f107 0208 	add.w	r2, r7, #8
 8002736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002738:	4413      	add	r3, r2
 800273a:	79ba      	ldrb	r2, [r7, #6]
 800273c:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 800273e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002740:	3301      	adds	r3, #1
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002746:	2b2f      	cmp	r3, #47	@ 0x2f
 8002748:	d9f3      	bls.n	8002732 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 800274a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800274e:	873b      	strh	r3, [r7, #56]	@ 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002750:	2300      	movs	r3, #0
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002754:	e016      	b.n	8002784 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002756:	f107 0208 	add.w	r2, r7, #8
 800275a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800275c:	79f8      	ldrb	r0, [r7, #7]
 800275e:	2330      	movs	r3, #48	@ 0x30
 8002760:	f7ff f800 	bl	8001764 <DRV_CANFDSPI_WriteByteArray>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (spiTransferError) {
 800276a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	e00a      	b.n	800278e <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002778:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800277a:	3330      	adds	r3, #48	@ 0x30
 800277c:	873b      	strh	r3, [r7, #56]	@ 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 800277e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002780:	3301      	adds	r3, #1
 8002782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002786:	2b29      	cmp	r3, #41	@ 0x29
 8002788:	d9e5      	bls.n	8002756 <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 800278a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800278e:	4618      	mov	r0, r3
 8002790:	3740      	adds	r7, #64	@ 0x40
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002796:	b590      	push	{r4, r7, lr}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	4604      	mov	r4, r0
 800279e:	4608      	mov	r0, r1
 80027a0:	4611      	mov	r1, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	4623      	mov	r3, r4
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	4603      	mov	r3, r0
 80027aa:	71bb      	strb	r3, [r7, #6]
 80027ac:	460b      	mov	r3, r1
 80027ae:	717b      	strb	r3, [r7, #5]
 80027b0:	4613      	mov	r3, r2
 80027b2:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80027b8:	793b      	ldrb	r3, [r7, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d036      	beq.n	800282c <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80027be:	2b02      	cmp	r3, #2
 80027c0:	dc4c      	bgt.n	800285c <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d018      	beq.n	80027fc <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80027ca:	e047      	b.n	800285c <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80027cc:	79ba      	ldrb	r2, [r7, #6]
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f84c 	bl	8002870 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80027dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e8:	e03d      	b.n	8002866 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80027ea:	797a      	ldrb	r2, [r7, #5]
 80027ec:	79b9      	ldrb	r1, [r7, #6]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f8c3 	bl	800297c <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
            break;
 80027fa:	e032      	b.n	8002862 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 80027fc:	79ba      	ldrb	r2, [r7, #6]
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f000 faf2 	bl	8002dec <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 800280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	e025      	b.n	8002866 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 800281a:	797a      	ldrb	r2, [r7, #5]
 800281c:	79b9      	ldrb	r1, [r7, #6]
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fb6f 	bl	8002f04 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002826:	4603      	mov	r3, r0
 8002828:	73fb      	strb	r3, [r7, #15]
            break;
 800282a:	e01a      	b.n	8002862 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 800282c:	79ba      	ldrb	r2, [r7, #6]
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fd10 	bl	8003258 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002838:	4603      	mov	r3, r0
 800283a:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 800283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	e00d      	b.n	8002866 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 800284a:	797a      	ldrb	r2, [r7, #5]
 800284c:	79b9      	ldrb	r1, [r7, #6]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fd8d 	bl	8003370 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002856:	4603      	mov	r3, r0
 8002858:	73fb      	strb	r3, [r7, #15]
            break;
 800285a:	e002      	b.n	8002862 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 800285c:	23ff      	movs	r3, #255	@ 0xff
 800285e:	73fb      	strb	r3, [r7, #15]
            break;
 8002860:	bf00      	nop
    }

    return spiTransferError;
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
	...

08002870 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	460a      	mov	r2, r1
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	4613      	mov	r3, r2
 800287e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002884:	4b3c      	ldr	r3, [pc, #240]	@ (8002978 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002886:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002888:	79bb      	ldrb	r3, [r7, #6]
 800288a:	2b11      	cmp	r3, #17
 800288c:	d862      	bhi.n	8002954 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 800288e:	a201      	add	r2, pc, #4	@ (adr r2, 8002894 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002894:	080028dd 	.word	0x080028dd
 8002898:	080028dd 	.word	0x080028dd
 800289c:	080028dd 	.word	0x080028dd
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028dd 	.word	0x080028dd
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080028dd 	.word	0x080028dd
 80028b0:	080028dd 	.word	0x080028dd
 80028b4:	080028fb 	.word	0x080028fb
 80028b8:	080028fb 	.word	0x080028fb
 80028bc:	080028fb 	.word	0x080028fb
 80028c0:	080028fb 	.word	0x080028fb
 80028c4:	080028fb 	.word	0x080028fb
 80028c8:	080028fb 	.word	0x080028fb
 80028cc:	080028fb 	.word	0x080028fb
 80028d0:	08002919 	.word	0x08002919
 80028d4:	08002919 	.word	0x08002919
 80028d8:	08002937 	.word	0x08002937
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80028e0:	233e      	movs	r3, #62	@ 0x3e
 80028e2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80028e4:	7a7b      	ldrb	r3, [r7, #9]
 80028e6:	220f      	movs	r2, #15
 80028e8:	f362 0306 	bfi	r3, r2, #0, #7
 80028ec:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80028ee:	7a3b      	ldrb	r3, [r7, #8]
 80028f0:	220f      	movs	r2, #15
 80028f2:	f362 0306 	bfi	r3, r2, #0, #7
 80028f6:	723b      	strb	r3, [r7, #8]
            break;
 80028f8:	e02f      	b.n	800295a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 80028fe:	237e      	movs	r3, #126	@ 0x7e
 8002900:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002902:	7a7b      	ldrb	r3, [r7, #9]
 8002904:	221f      	movs	r2, #31
 8002906:	f362 0306 	bfi	r3, r2, #0, #7
 800290a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 800290c:	7a3b      	ldrb	r3, [r7, #8]
 800290e:	221f      	movs	r2, #31
 8002910:	f362 0306 	bfi	r3, r2, #0, #7
 8002914:	723b      	strb	r3, [r7, #8]
            break;
 8002916:	e020      	b.n	800295a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800291c:	231e      	movs	r3, #30
 800291e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002920:	7a7b      	ldrb	r3, [r7, #9]
 8002922:	2207      	movs	r2, #7
 8002924:	f362 0306 	bfi	r3, r2, #0, #7
 8002928:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800292a:	7a3b      	ldrb	r3, [r7, #8]
 800292c:	2207      	movs	r2, #7
 800292e:	f362 0306 	bfi	r3, r2, #0, #7
 8002932:	723b      	strb	r3, [r7, #8]
            break;
 8002934:	e011      	b.n	800295a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 800293a:	23fe      	movs	r3, #254	@ 0xfe
 800293c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 800293e:	7a7b      	ldrb	r3, [r7, #9]
 8002940:	223f      	movs	r2, #63	@ 0x3f
 8002942:	f362 0306 	bfi	r3, r2, #0, #7
 8002946:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002948:	7a3b      	ldrb	r3, [r7, #8]
 800294a:	223f      	movs	r2, #63	@ 0x3f
 800294c:	f362 0306 	bfi	r3, r2, #0, #7
 8002950:	723b      	strb	r3, [r7, #8]
            break;
 8002952:	e002      	b.n	800295a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	e009      	b.n	800296e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2104      	movs	r1, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fcf7 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8002966:	4603      	mov	r3, r0
 8002968:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	003e0f0f 	.word	0x003e0f0f

0800297c <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	460b      	mov	r3, r1
 8002988:	71bb      	strb	r3, [r7, #6]
 800298a:	4613      	mov	r3, r2
 800298c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002992:	4be2      	ldr	r3, [pc, #904]	@ (8002d1c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002994:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800299a:	7abb      	ldrb	r3, [r7, #10]
 800299c:	2202      	movs	r2, #2
 800299e:	f362 0301 	bfi	r3, r2, #0, #2
 80029a2:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80029a8:	79bb      	ldrb	r3, [r7, #6]
 80029aa:	2b11      	cmp	r3, #17
 80029ac:	f200 81f6 	bhi.w	8002d9c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 80029b0:	a201      	add	r2, pc, #4	@ (adr r2, 80029b8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	08002a01 	.word	0x08002a01
 80029bc:	08002a3f 	.word	0x08002a3f
 80029c0:	08002a7d 	.word	0x08002a7d
 80029c4:	08002abb 	.word	0x08002abb
 80029c8:	08002af9 	.word	0x08002af9
 80029cc:	08002b37 	.word	0x08002b37
 80029d0:	08002b71 	.word	0x08002b71
 80029d4:	08002ba5 	.word	0x08002ba5
 80029d8:	08002bd7 	.word	0x08002bd7
 80029dc:	08002c1d 	.word	0x08002c1d
 80029e0:	08002c63 	.word	0x08002c63
 80029e4:	08002ca1 	.word	0x08002ca1
 80029e8:	08002cdf 	.word	0x08002cdf
 80029ec:	08002d21 	.word	0x08002d21
 80029f0:	08002d5f 	.word	0x08002d5f
 80029f4:	08002abb 	.word	0x08002abb
 80029f8:	08002b71 	.word	0x08002b71
 80029fc:	08002bd7 	.word	0x08002bd7
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002a04:	7bbb      	ldrb	r3, [r7, #14]
 8002a06:	221e      	movs	r2, #30
 8002a08:	f362 0304 	bfi	r3, r2, #0, #5
 8002a0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002a0e:	7b7b      	ldrb	r3, [r7, #13]
 8002a10:	2207      	movs	r2, #7
 8002a12:	f362 0303 	bfi	r3, r2, #0, #4
 8002a16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002a18:	7b3b      	ldrb	r3, [r7, #12]
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002a20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002a22:	7a7b      	ldrb	r3, [r7, #9]
 8002a24:	221f      	movs	r2, #31
 8002a26:	f362 0306 	bfi	r3, r2, #0, #7
 8002a2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	7a3b      	ldrb	r3, [r7, #8]
 8002a36:	f362 0305 	bfi	r3, r2, #0, #6
 8002a3a:	723b      	strb	r3, [r7, #8]
            break;
 8002a3c:	e1b1      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	220e      	movs	r2, #14
 8002a46:	f362 0304 	bfi	r3, r2, #0, #5
 8002a4a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002a4c:	7b7b      	ldrb	r3, [r7, #13]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	f362 0303 	bfi	r3, r2, #0, #4
 8002a54:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002a56:	7b3b      	ldrb	r3, [r7, #12]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	f362 0303 	bfi	r3, r2, #0, #4
 8002a5e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002a60:	7a7b      	ldrb	r3, [r7, #9]
 8002a62:	220f      	movs	r2, #15
 8002a64:	f362 0306 	bfi	r3, r2, #0, #7
 8002a68:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	7a3b      	ldrb	r3, [r7, #8]
 8002a74:	f362 0305 	bfi	r3, r2, #0, #6
 8002a78:	723b      	strb	r3, [r7, #8]
            break;
 8002a7a:	e192      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002a80:	7bbb      	ldrb	r3, [r7, #14]
 8002a82:	2208      	movs	r2, #8
 8002a84:	f362 0304 	bfi	r3, r2, #0, #5
 8002a88:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002a8a:	7b7b      	ldrb	r3, [r7, #13]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f362 0303 	bfi	r3, r2, #0, #4
 8002a92:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002a94:	7b3b      	ldrb	r3, [r7, #12]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f362 0303 	bfi	r3, r2, #0, #4
 8002a9c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002a9e:	7a7b      	ldrb	r3, [r7, #9]
 8002aa0:	2209      	movs	r2, #9
 8002aa2:	f362 0306 	bfi	r3, r2, #0, #7
 8002aa6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	7a3b      	ldrb	r3, [r7, #8]
 8002ab2:	f362 0305 	bfi	r3, r2, #0, #6
 8002ab6:	723b      	strb	r3, [r7, #8]
            break;
 8002ab8:	e173      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002abe:	7bbb      	ldrb	r3, [r7, #14]
 8002ac0:	2206      	movs	r2, #6
 8002ac2:	f362 0304 	bfi	r3, r2, #0, #5
 8002ac6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f362 0303 	bfi	r3, r2, #0, #4
 8002ad0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002ad2:	7b3b      	ldrb	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f362 0303 	bfi	r3, r2, #0, #4
 8002ada:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002adc:	7a7b      	ldrb	r3, [r7, #9]
 8002ade:	2207      	movs	r2, #7
 8002ae0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ae4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	7a3b      	ldrb	r3, [r7, #8]
 8002af0:	f362 0305 	bfi	r3, r2, #0, #6
 8002af4:	723b      	strb	r3, [r7, #8]
            break;
 8002af6:	e154      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	2204      	movs	r2, #4
 8002b00:	f362 0304 	bfi	r3, r2, #0, #5
 8002b04:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f362 0303 	bfi	r3, r2, #0, #4
 8002b0e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002b10:	7b3b      	ldrb	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f362 0303 	bfi	r3, r2, #0, #4
 8002b18:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002b1a:	7a7b      	ldrb	r3, [r7, #9]
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	f362 0306 	bfi	r3, r2, #0, #7
 8002b22:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	7a3b      	ldrb	r3, [r7, #8]
 8002b2e:	f362 0305 	bfi	r3, r2, #0, #6
 8002b32:	723b      	strb	r3, [r7, #8]
            break;
 8002b34:	e135      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002b3a:	7bbb      	ldrb	r3, [r7, #14]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f362 0304 	bfi	r3, r2, #0, #5
 8002b42:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b44:	7b7b      	ldrb	r3, [r7, #13]
 8002b46:	f36f 0303 	bfc	r3, #0, #4
 8002b4a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b4c:	7b3b      	ldrb	r3, [r7, #12]
 8002b4e:	f36f 0303 	bfc	r3, #0, #4
 8002b52:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002b54:	7a7b      	ldrb	r3, [r7, #9]
 8002b56:	2204      	movs	r2, #4
 8002b58:	f362 0306 	bfi	r3, r2, #0, #7
 8002b5c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	7a3b      	ldrb	r3, [r7, #8]
 8002b68:	f362 0305 	bfi	r3, r2, #0, #6
 8002b6c:	723b      	strb	r3, [r7, #8]
            break;
 8002b6e:	e118      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002b74:	7bbb      	ldrb	r3, [r7, #14]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f362 0304 	bfi	r3, r2, #0, #5
 8002b7c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b7e:	7b7b      	ldrb	r3, [r7, #13]
 8002b80:	f36f 0303 	bfc	r3, #0, #4
 8002b84:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b86:	7b3b      	ldrb	r3, [r7, #12]
 8002b88:	f36f 0303 	bfc	r3, #0, #4
 8002b8c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002b8e:	7a7b      	ldrb	r3, [r7, #9]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f362 0306 	bfi	r3, r2, #0, #7
 8002b96:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002b98:	7a3b      	ldrb	r3, [r7, #8]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f362 0305 	bfi	r3, r2, #0, #6
 8002ba0:	723b      	strb	r3, [r7, #8]
            break;
 8002ba2:	e0fe      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002ba8:	7bbb      	ldrb	r3, [r7, #14]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f362 0304 	bfi	r3, r2, #0, #5
 8002bb0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002bb2:	7b7b      	ldrb	r3, [r7, #13]
 8002bb4:	f36f 0303 	bfc	r3, #0, #4
 8002bb8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002bba:	7b3b      	ldrb	r3, [r7, #12]
 8002bbc:	f36f 0303 	bfc	r3, #0, #4
 8002bc0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002bc2:	7a7b      	ldrb	r3, [r7, #9]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bca:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002bcc:	7a3b      	ldrb	r3, [r7, #8]
 8002bce:	f36f 0305 	bfc	r3, #0, #6
 8002bd2:	723b      	strb	r3, [r7, #8]
            break;
 8002bd4:	e0e5      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002bda:	7bbb      	ldrb	r3, [r7, #14]
 8002bdc:	221e      	movs	r2, #30
 8002bde:	f362 0304 	bfi	r3, r2, #0, #5
 8002be2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002be4:	7b7b      	ldrb	r3, [r7, #13]
 8002be6:	2207      	movs	r2, #7
 8002be8:	f362 0303 	bfi	r3, r2, #0, #4
 8002bec:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002bee:	7b3b      	ldrb	r3, [r7, #12]
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	f362 0303 	bfi	r3, r2, #0, #4
 8002bf6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002bf8:	7a7b      	ldrb	r3, [r7, #9]
 8002bfa:	221f      	movs	r2, #31
 8002bfc:	f362 0306 	bfi	r3, r2, #0, #7
 8002c00:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	7a3b      	ldrb	r3, [r7, #8]
 8002c0c:	f362 0305 	bfi	r3, r2, #0, #6
 8002c10:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c12:	7abb      	ldrb	r3, [r7, #10]
 8002c14:	f36f 0301 	bfc	r3, #0, #2
 8002c18:	72bb      	strb	r3, [r7, #10]
            break;
 8002c1a:	e0c2      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	2211      	movs	r2, #17
 8002c24:	f362 0304 	bfi	r3, r2, #0, #5
 8002c28:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002c2a:	7b7b      	ldrb	r3, [r7, #13]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	f362 0303 	bfi	r3, r2, #0, #4
 8002c32:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002c34:	7b3b      	ldrb	r3, [r7, #12]
 8002c36:	2204      	movs	r2, #4
 8002c38:	f362 0303 	bfi	r3, r2, #0, #4
 8002c3c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002c3e:	7a7b      	ldrb	r3, [r7, #9]
 8002c40:	2212      	movs	r2, #18
 8002c42:	f362 0306 	bfi	r3, r2, #0, #7
 8002c46:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	7a3b      	ldrb	r3, [r7, #8]
 8002c52:	f362 0305 	bfi	r3, r2, #0, #6
 8002c56:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c58:	7abb      	ldrb	r3, [r7, #10]
 8002c5a:	f36f 0301 	bfc	r3, #0, #2
 8002c5e:	72bb      	strb	r3, [r7, #10]
            break;
 8002c60:	e09f      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	221e      	movs	r2, #30
 8002c6a:	f362 0304 	bfi	r3, r2, #0, #5
 8002c6e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002c70:	7b7b      	ldrb	r3, [r7, #13]
 8002c72:	2207      	movs	r2, #7
 8002c74:	f362 0303 	bfi	r3, r2, #0, #4
 8002c78:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002c7a:	7b3b      	ldrb	r3, [r7, #12]
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	f362 0303 	bfi	r3, r2, #0, #4
 8002c82:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c84:	7a7b      	ldrb	r3, [r7, #9]
 8002c86:	221f      	movs	r2, #31
 8002c88:	f362 0306 	bfi	r3, r2, #0, #7
 8002c8c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	7a3b      	ldrb	r3, [r7, #8]
 8002c98:	f362 0305 	bfi	r3, r2, #0, #6
 8002c9c:	723b      	strb	r3, [r7, #8]
            break;
 8002c9e:	e080      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	2212      	movs	r2, #18
 8002ca8:	f362 0304 	bfi	r3, r2, #0, #5
 8002cac:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002cae:	7b7b      	ldrb	r3, [r7, #13]
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	f362 0303 	bfi	r3, r2, #0, #4
 8002cb6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002cb8:	7b3b      	ldrb	r3, [r7, #12]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002cc2:	7a7b      	ldrb	r3, [r7, #9]
 8002cc4:	2213      	movs	r2, #19
 8002cc6:	f362 0306 	bfi	r3, r2, #0, #7
 8002cca:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	7a3b      	ldrb	r3, [r7, #8]
 8002cd6:	f362 0305 	bfi	r3, r2, #0, #6
 8002cda:	723b      	strb	r3, [r7, #8]
            break;
 8002cdc:	e061      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002ce2:	7bbb      	ldrb	r3, [r7, #14]
 8002ce4:	220e      	movs	r2, #14
 8002ce6:	f362 0304 	bfi	r3, r2, #0, #5
 8002cea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cec:	7b7b      	ldrb	r3, [r7, #13]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	f362 0303 	bfi	r3, r2, #0, #4
 8002cf4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002cf6:	7b3b      	ldrb	r3, [r7, #12]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d00:	7a7b      	ldrb	r3, [r7, #9]
 8002d02:	220f      	movs	r2, #15
 8002d04:	f362 0306 	bfi	r3, r2, #0, #7
 8002d08:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	7a3b      	ldrb	r3, [r7, #8]
 8002d14:	f362 0305 	bfi	r3, r2, #0, #6
 8002d18:	723b      	strb	r3, [r7, #8]
            break;
 8002d1a:	e042      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002d1c:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d24:	7bbb      	ldrb	r3, [r7, #14]
 8002d26:	2208      	movs	r2, #8
 8002d28:	f362 0304 	bfi	r3, r2, #0, #5
 8002d2c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d2e:	7b7b      	ldrb	r3, [r7, #13]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f362 0303 	bfi	r3, r2, #0, #4
 8002d36:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d38:	7b3b      	ldrb	r3, [r7, #12]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f362 0303 	bfi	r3, r2, #0, #4
 8002d40:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d42:	7a7b      	ldrb	r3, [r7, #9]
 8002d44:	2209      	movs	r2, #9
 8002d46:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	7a3b      	ldrb	r3, [r7, #8]
 8002d56:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5a:	723b      	strb	r3, [r7, #8]
            break;
 8002d5c:	e021      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d62:	7bbb      	ldrb	r3, [r7, #14]
 8002d64:	2206      	movs	r2, #6
 8002d66:	f362 0304 	bfi	r3, r2, #0, #5
 8002d6a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d6c:	7b7b      	ldrb	r3, [r7, #13]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f362 0303 	bfi	r3, r2, #0, #4
 8002d74:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d76:	7b3b      	ldrb	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f362 0303 	bfi	r3, r2, #0, #4
 8002d7e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d80:	7a7b      	ldrb	r3, [r7, #9]
 8002d82:	2207      	movs	r2, #7
 8002d84:	f362 0306 	bfi	r3, r2, #0, #7
 8002d88:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	7a3b      	ldrb	r3, [r7, #8]
 8002d94:	f362 0305 	bfi	r3, r2, #0, #6
 8002d98:	723b      	strb	r3, [r7, #8]
            break;
 8002d9a:	e002      	b.n	8002da2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	e01f      	b.n	8002de2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2108      	movs	r1, #8
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fad3 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8002dba:	f06f 0301 	mvn.w	r3, #1
 8002dbe:	e010      	b.n	8002de2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	210c      	movs	r1, #12
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fac4 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8002dd8:	f06f 0302 	mvn.w	r3, #2
 8002ddc:	e001      	b.n	8002de2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop

08002dec <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	460a      	mov	r2, r1
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002e00:	4b3f      	ldr	r3, [pc, #252]	@ (8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8002e02:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002e04:	79bb      	ldrb	r3, [r7, #6]
 8002e06:	2b11      	cmp	r3, #17
 8002e08:	d862      	bhi.n	8002ed0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8002e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e59 	.word	0x08002e59
 8002e14:	08002e59 	.word	0x08002e59
 8002e18:	08002ed1 	.word	0x08002ed1
 8002e1c:	08002e59 	.word	0x08002e59
 8002e20:	08002e59 	.word	0x08002e59
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e59 	.word	0x08002e59
 8002e2c:	08002e59 	.word	0x08002e59
 8002e30:	08002e77 	.word	0x08002e77
 8002e34:	08002e77 	.word	0x08002e77
 8002e38:	08002e77 	.word	0x08002e77
 8002e3c:	08002e77 	.word	0x08002e77
 8002e40:	08002e77 	.word	0x08002e77
 8002e44:	08002e77 	.word	0x08002e77
 8002e48:	08002e77 	.word	0x08002e77
 8002e4c:	08002e95 	.word	0x08002e95
 8002e50:	08002e95 	.word	0x08002e95
 8002e54:	08002eb3 	.word	0x08002eb3
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002e5c:	231e      	movs	r3, #30
 8002e5e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002e60:	7a7b      	ldrb	r3, [r7, #9]
 8002e62:	2207      	movs	r2, #7
 8002e64:	f362 0306 	bfi	r3, r2, #0, #7
 8002e68:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002e6a:	7a3b      	ldrb	r3, [r7, #8]
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	f362 0306 	bfi	r3, r2, #0, #7
 8002e72:	723b      	strb	r3, [r7, #8]
            break;
 8002e74:	e02f      	b.n	8002ed6 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002e7a:	233e      	movs	r3, #62	@ 0x3e
 8002e7c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002e7e:	7a7b      	ldrb	r3, [r7, #9]
 8002e80:	220f      	movs	r2, #15
 8002e82:	f362 0306 	bfi	r3, r2, #0, #7
 8002e86:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002e88:	7a3b      	ldrb	r3, [r7, #8]
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e90:	723b      	strb	r3, [r7, #8]
            break;
 8002e92:	e020      	b.n	8002ed6 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002e98:	230e      	movs	r3, #14
 8002e9a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002e9c:	7a7b      	ldrb	r3, [r7, #9]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ea4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002ea6:	7a3b      	ldrb	r3, [r7, #8]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002eae:	723b      	strb	r3, [r7, #8]
            break;
 8002eb0:	e011      	b.n	8002ed6 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002eb6:	237e      	movs	r3, #126	@ 0x7e
 8002eb8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002eba:	7a7b      	ldrb	r3, [r7, #9]
 8002ebc:	221f      	movs	r2, #31
 8002ebe:	f362 0306 	bfi	r3, r2, #0, #7
 8002ec2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002ec4:	7a3b      	ldrb	r3, [r7, #8]
 8002ec6:	221f      	movs	r2, #31
 8002ec8:	f362 0306 	bfi	r3, r2, #0, #7
 8002ecc:	723b      	strb	r3, [r7, #8]
            break;
 8002ece:	e002      	b.n	8002ed6 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	e010      	b.n	8002ef8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	2104      	movs	r1, #4
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fa39 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8002eee:	f06f 0301 	mvn.w	r3, #1
 8002ef2:	e001      	b.n	8002ef8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	003e0f0f 	.word	0x003e0f0f

08002f04 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	71bb      	strb	r3, [r7, #6]
 8002f12:	4613      	mov	r3, r2
 8002f14:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002f1a:	4bce      	ldr	r3, [pc, #824]	@ (8003254 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8002f1c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002f22:	7abb      	ldrb	r3, [r7, #10]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f362 0301 	bfi	r3, r2, #0, #2
 8002f2a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002f30:	79bb      	ldrb	r3, [r7, #6]
 8002f32:	2b11      	cmp	r3, #17
 8002f34:	f200 8166 	bhi.w	8003204 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f89 	.word	0x08002f89
 8002f44:	08002fc7 	.word	0x08002fc7
 8002f48:	08003205 	.word	0x08003205
 8002f4c:	08003005 	.word	0x08003005
 8002f50:	0800303f 	.word	0x0800303f
 8002f54:	08003079 	.word	0x08003079
 8002f58:	08003079 	.word	0x08003079
 8002f5c:	08003079 	.word	0x08003079
 8002f60:	0800307f 	.word	0x0800307f
 8002f64:	080030c5 	.word	0x080030c5
 8002f68:	0800310b 	.word	0x0800310b
 8002f6c:	08003149 	.word	0x08003149
 8002f70:	08003187 	.word	0x08003187
 8002f74:	080031c5 	.word	0x080031c5
 8002f78:	080031cb 	.word	0x080031cb
 8002f7c:	08003005 	.word	0x08003005
 8002f80:	08003079 	.word	0x08003079
 8002f84:	0800307f 	.word	0x0800307f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f8c:	7bbb      	ldrb	r3, [r7, #14]
 8002f8e:	220e      	movs	r2, #14
 8002f90:	f362 0304 	bfi	r3, r2, #0, #5
 8002f94:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f96:	7b7b      	ldrb	r3, [r7, #13]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f362 0303 	bfi	r3, r2, #0, #4
 8002f9e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fa0:	7b3b      	ldrb	r3, [r7, #12]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002faa:	7a7b      	ldrb	r3, [r7, #9]
 8002fac:	220f      	movs	r2, #15
 8002fae:	f362 0306 	bfi	r3, r2, #0, #7
 8002fb2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7a3b      	ldrb	r3, [r7, #8]
 8002fbe:	f362 0305 	bfi	r3, r2, #0, #6
 8002fc2:	723b      	strb	r3, [r7, #8]
            break;
 8002fc4:	e121      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002fca:	7bbb      	ldrb	r3, [r7, #14]
 8002fcc:	2206      	movs	r2, #6
 8002fce:	f362 0304 	bfi	r3, r2, #0, #5
 8002fd2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002fd4:	7b7b      	ldrb	r3, [r7, #13]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f362 0303 	bfi	r3, r2, #0, #4
 8002fdc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002fde:	7b3b      	ldrb	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002fe8:	7a7b      	ldrb	r3, [r7, #9]
 8002fea:	2207      	movs	r2, #7
 8002fec:	f362 0306 	bfi	r3, r2, #0, #7
 8002ff0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	7a3b      	ldrb	r3, [r7, #8]
 8002ffc:	f362 0305 	bfi	r3, r2, #0, #6
 8003000:	723b      	strb	r3, [r7, #8]
            break;
 8003002:	e102      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	2202      	movs	r2, #2
 800300c:	f362 0304 	bfi	r3, r2, #0, #5
 8003010:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003012:	7b7b      	ldrb	r3, [r7, #13]
 8003014:	f36f 0303 	bfc	r3, #0, #4
 8003018:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800301a:	7b3b      	ldrb	r3, [r7, #12]
 800301c:	f36f 0303 	bfc	r3, #0, #4
 8003020:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003022:	7a7b      	ldrb	r3, [r7, #9]
 8003024:	2203      	movs	r2, #3
 8003026:	f362 0306 	bfi	r3, r2, #0, #7
 800302a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003032:	b2da      	uxtb	r2, r3
 8003034:	7a3b      	ldrb	r3, [r7, #8]
 8003036:	f362 0305 	bfi	r3, r2, #0, #6
 800303a:	723b      	strb	r3, [r7, #8]
            break;
 800303c:	e0e5      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8003042:	7bbb      	ldrb	r3, [r7, #14]
 8003044:	2201      	movs	r2, #1
 8003046:	f362 0304 	bfi	r3, r2, #0, #5
 800304a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800304c:	7b7b      	ldrb	r3, [r7, #13]
 800304e:	f36f 0303 	bfc	r3, #0, #4
 8003052:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003054:	7b3b      	ldrb	r3, [r7, #12]
 8003056:	f36f 0303 	bfc	r3, #0, #4
 800305a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 800305c:	7a7b      	ldrb	r3, [r7, #9]
 800305e:	2202      	movs	r2, #2
 8003060:	f362 0306 	bfi	r3, r2, #0, #7
 8003064:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800306c:	b2da      	uxtb	r2, r3
 800306e:	7a3b      	ldrb	r3, [r7, #8]
 8003070:	f362 0305 	bfi	r3, r2, #0, #6
 8003074:	723b      	strb	r3, [r7, #8]
            break;
 8003076:	e0c8      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	e0e5      	b.n	800324a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	221e      	movs	r2, #30
 8003086:	f362 0304 	bfi	r3, r2, #0, #5
 800308a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800308c:	7b7b      	ldrb	r3, [r7, #13]
 800308e:	2207      	movs	r2, #7
 8003090:	f362 0303 	bfi	r3, r2, #0, #4
 8003094:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003096:	7b3b      	ldrb	r3, [r7, #12]
 8003098:	2207      	movs	r2, #7
 800309a:	f362 0303 	bfi	r3, r2, #0, #4
 800309e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80030a0:	7a7b      	ldrb	r3, [r7, #9]
 80030a2:	221f      	movs	r2, #31
 80030a4:	f362 0306 	bfi	r3, r2, #0, #7
 80030a8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	7a3b      	ldrb	r3, [r7, #8]
 80030b4:	f362 0305 	bfi	r3, r2, #0, #6
 80030b8:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80030ba:	7abb      	ldrb	r3, [r7, #10]
 80030bc:	f36f 0301 	bfc	r3, #0, #2
 80030c0:	72bb      	strb	r3, [r7, #10]
            break;
 80030c2:	e0a2      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80030c8:	7bbb      	ldrb	r3, [r7, #14]
 80030ca:	2211      	movs	r2, #17
 80030cc:	f362 0304 	bfi	r3, r2, #0, #5
 80030d0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80030d2:	7b7b      	ldrb	r3, [r7, #13]
 80030d4:	2204      	movs	r2, #4
 80030d6:	f362 0303 	bfi	r3, r2, #0, #4
 80030da:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80030dc:	7b3b      	ldrb	r3, [r7, #12]
 80030de:	2204      	movs	r2, #4
 80030e0:	f362 0303 	bfi	r3, r2, #0, #4
 80030e4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80030e6:	7a7b      	ldrb	r3, [r7, #9]
 80030e8:	2212      	movs	r2, #18
 80030ea:	f362 0306 	bfi	r3, r2, #0, #7
 80030ee:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	7a3b      	ldrb	r3, [r7, #8]
 80030fa:	f362 0305 	bfi	r3, r2, #0, #6
 80030fe:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003100:	7abb      	ldrb	r3, [r7, #10]
 8003102:	f36f 0301 	bfc	r3, #0, #2
 8003106:	72bb      	strb	r3, [r7, #10]
            break;
 8003108:	e07f      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800310e:	7bbb      	ldrb	r3, [r7, #14]
 8003110:	220e      	movs	r2, #14
 8003112:	f362 0304 	bfi	r3, r2, #0, #5
 8003116:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003118:	7b7b      	ldrb	r3, [r7, #13]
 800311a:	2203      	movs	r2, #3
 800311c:	f362 0303 	bfi	r3, r2, #0, #4
 8003120:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003122:	7b3b      	ldrb	r3, [r7, #12]
 8003124:	2203      	movs	r2, #3
 8003126:	f362 0303 	bfi	r3, r2, #0, #4
 800312a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800312c:	7a7b      	ldrb	r3, [r7, #9]
 800312e:	220f      	movs	r2, #15
 8003130:	f362 0306 	bfi	r3, r2, #0, #7
 8003134:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800313c:	b2da      	uxtb	r2, r3
 800313e:	7a3b      	ldrb	r3, [r7, #8]
 8003140:	f362 0305 	bfi	r3, r2, #0, #6
 8003144:	723b      	strb	r3, [r7, #8]
            break;
 8003146:	e060      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 800314c:	7bbb      	ldrb	r3, [r7, #14]
 800314e:	2208      	movs	r2, #8
 8003150:	f362 0304 	bfi	r3, r2, #0, #5
 8003154:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003156:	7b7b      	ldrb	r3, [r7, #13]
 8003158:	2202      	movs	r2, #2
 800315a:	f362 0303 	bfi	r3, r2, #0, #4
 800315e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003160:	7b3b      	ldrb	r3, [r7, #12]
 8003162:	2202      	movs	r2, #2
 8003164:	f362 0303 	bfi	r3, r2, #0, #4
 8003168:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800316a:	7a7b      	ldrb	r3, [r7, #9]
 800316c:	2209      	movs	r2, #9
 800316e:	f362 0306 	bfi	r3, r2, #0, #7
 8003172:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800317a:	b2da      	uxtb	r2, r3
 800317c:	7a3b      	ldrb	r3, [r7, #8]
 800317e:	f362 0305 	bfi	r3, r2, #0, #6
 8003182:	723b      	strb	r3, [r7, #8]
            break;
 8003184:	e041      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800318a:	7bbb      	ldrb	r3, [r7, #14]
 800318c:	2206      	movs	r2, #6
 800318e:	f362 0304 	bfi	r3, r2, #0, #5
 8003192:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003194:	7b7b      	ldrb	r3, [r7, #13]
 8003196:	2201      	movs	r2, #1
 8003198:	f362 0303 	bfi	r3, r2, #0, #4
 800319c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800319e:	7b3b      	ldrb	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f362 0303 	bfi	r3, r2, #0, #4
 80031a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80031a8:	7a7b      	ldrb	r3, [r7, #9]
 80031aa:	2207      	movs	r2, #7
 80031ac:	f362 0306 	bfi	r3, r2, #0, #7
 80031b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	7a3b      	ldrb	r3, [r7, #8]
 80031bc:	f362 0305 	bfi	r3, r2, #0, #6
 80031c0:	723b      	strb	r3, [r7, #8]
            break;
 80031c2:	e022      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	e03f      	b.n	800324a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80031ce:	7bbb      	ldrb	r3, [r7, #14]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f362 0304 	bfi	r3, r2, #0, #5
 80031d6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80031d8:	7b7b      	ldrb	r3, [r7, #13]
 80031da:	f36f 0303 	bfc	r3, #0, #4
 80031de:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80031e0:	7b3b      	ldrb	r3, [r7, #12]
 80031e2:	f36f 0303 	bfc	r3, #0, #4
 80031e6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80031e8:	7a7b      	ldrb	r3, [r7, #9]
 80031ea:	2203      	movs	r2, #3
 80031ec:	f362 0306 	bfi	r3, r2, #0, #7
 80031f0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	7a3b      	ldrb	r3, [r7, #8]
 80031fc:	f362 0305 	bfi	r3, r2, #0, #6
 8003200:	723b      	strb	r3, [r7, #8]
            break;
 8003202:	e002      	b.n	800320a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	e01f      	b.n	800324a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2108      	movs	r1, #8
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe f89f 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800321a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8003222:	f06f 0301 	mvn.w	r3, #1
 8003226:	e010      	b.n	800324a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	210c      	movs	r1, #12
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f890 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003238:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003240:	f06f 0302 	mvn.w	r3, #2
 8003244:	e001      	b.n	800324a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8003246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	000e0303 	.word	0x000e0303

08003258 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	460a      	mov	r2, r1
 8003262:	71fb      	strb	r3, [r7, #7]
 8003264:	4613      	mov	r3, r2
 8003266:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800326c:	4b3f      	ldr	r3, [pc, #252]	@ (800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 800326e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	2b11      	cmp	r3, #17
 8003274:	d862      	bhi.n	800333c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032c5 	.word	0x080032c5
 8003280:	080032c5 	.word	0x080032c5
 8003284:	0800333d 	.word	0x0800333d
 8003288:	080032c5 	.word	0x080032c5
 800328c:	080032c5 	.word	0x080032c5
 8003290:	080032c5 	.word	0x080032c5
 8003294:	080032c5 	.word	0x080032c5
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032e3 	.word	0x080032e3
 80032a0:	080032e3 	.word	0x080032e3
 80032a4:	080032e3 	.word	0x080032e3
 80032a8:	080032e3 	.word	0x080032e3
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e3 	.word	0x080032e3
 80032b4:	080032e3 	.word	0x080032e3
 80032b8:	08003301 	.word	0x08003301
 80032bc:	08003301 	.word	0x08003301
 80032c0:	0800331f 	.word	0x0800331f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80032c8:	230e      	movs	r3, #14
 80032ca:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80032cc:	7a7b      	ldrb	r3, [r7, #9]
 80032ce:	2203      	movs	r2, #3
 80032d0:	f362 0306 	bfi	r3, r2, #0, #7
 80032d4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80032d6:	7a3b      	ldrb	r3, [r7, #8]
 80032d8:	2203      	movs	r2, #3
 80032da:	f362 0306 	bfi	r3, r2, #0, #7
 80032de:	723b      	strb	r3, [r7, #8]
            break;
 80032e0:	e02f      	b.n	8003342 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80032e6:	231e      	movs	r3, #30
 80032e8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80032ea:	7a7b      	ldrb	r3, [r7, #9]
 80032ec:	2207      	movs	r2, #7
 80032ee:	f362 0306 	bfi	r3, r2, #0, #7
 80032f2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80032f4:	7a3b      	ldrb	r3, [r7, #8]
 80032f6:	2207      	movs	r2, #7
 80032f8:	f362 0306 	bfi	r3, r2, #0, #7
 80032fc:	723b      	strb	r3, [r7, #8]
            break;
 80032fe:	e020      	b.n	8003342 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8003304:	2307      	movs	r3, #7
 8003306:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003308:	7a7b      	ldrb	r3, [r7, #9]
 800330a:	2202      	movs	r2, #2
 800330c:	f362 0306 	bfi	r3, r2, #0, #7
 8003310:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8003312:	7a3b      	ldrb	r3, [r7, #8]
 8003314:	2202      	movs	r2, #2
 8003316:	f362 0306 	bfi	r3, r2, #0, #7
 800331a:	723b      	strb	r3, [r7, #8]
            break;
 800331c:	e011      	b.n	8003342 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003322:	233e      	movs	r3, #62	@ 0x3e
 8003324:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003326:	7a7b      	ldrb	r3, [r7, #9]
 8003328:	220f      	movs	r2, #15
 800332a:	f362 0306 	bfi	r3, r2, #0, #7
 800332e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003330:	7a3b      	ldrb	r3, [r7, #8]
 8003332:	220f      	movs	r2, #15
 8003334:	f362 0306 	bfi	r3, r2, #0, #7
 8003338:	723b      	strb	r3, [r7, #8]
            break;
 800333a:	e002      	b.n	8003342 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	e010      	b.n	8003364 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	2104      	movs	r1, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe f803 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 800335a:	f06f 0301 	mvn.w	r3, #1
 800335e:	e001      	b.n	8003364 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	003e0f0f 	.word	0x003e0f0f

08003370 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
 800337a:	460b      	mov	r3, r1
 800337c:	71bb      	strb	r3, [r7, #6]
 800337e:	4613      	mov	r3, r2
 8003380:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003386:	4b92      	ldr	r3, [pc, #584]	@ (80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003388:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800338e:	7abb      	ldrb	r3, [r7, #10]
 8003390:	2202      	movs	r2, #2
 8003392:	f362 0301 	bfi	r3, r2, #0, #2
 8003396:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 800339c:	79bb      	ldrb	r3, [r7, #6]
 800339e:	2b11      	cmp	r3, #17
 80033a0:	f200 80ef 	bhi.w	8003582 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033f5 	.word	0x080033f5
 80033b0:	08003433 	.word	0x08003433
 80033b4:	08003583 	.word	0x08003583
 80033b8:	0800346d 	.word	0x0800346d
 80033bc:	0800346d 	.word	0x0800346d
 80033c0:	0800346d 	.word	0x0800346d
 80033c4:	0800346d 	.word	0x0800346d
 80033c8:	0800346d 	.word	0x0800346d
 80033cc:	08003473 	.word	0x08003473
 80033d0:	080034b9 	.word	0x080034b9
 80033d4:	080034ff 	.word	0x080034ff
 80033d8:	0800353d 	.word	0x0800353d
 80033dc:	08003543 	.word	0x08003543
 80033e0:	0800357d 	.word	0x0800357d
 80033e4:	0800357d 	.word	0x0800357d
 80033e8:	0800346d 	.word	0x0800346d
 80033ec:	0800346d 	.word	0x0800346d
 80033f0:	08003473 	.word	0x08003473
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80033f8:	7bbb      	ldrb	r3, [r7, #14]
 80033fa:	2206      	movs	r2, #6
 80033fc:	f362 0304 	bfi	r3, r2, #0, #5
 8003400:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	2201      	movs	r2, #1
 8003406:	f362 0303 	bfi	r3, r2, #0, #4
 800340a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800340c:	7b3b      	ldrb	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f362 0303 	bfi	r3, r2, #0, #4
 8003414:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003416:	7a7b      	ldrb	r3, [r7, #9]
 8003418:	2207      	movs	r2, #7
 800341a:	f362 0306 	bfi	r3, r2, #0, #7
 800341e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003426:	b2da      	uxtb	r2, r3
 8003428:	7a3b      	ldrb	r3, [r7, #8]
 800342a:	f362 0305 	bfi	r3, r2, #0, #6
 800342e:	723b      	strb	r3, [r7, #8]
            break;
 8003430:	e0aa      	b.n	8003588 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003436:	7bbb      	ldrb	r3, [r7, #14]
 8003438:	2202      	movs	r2, #2
 800343a:	f362 0304 	bfi	r3, r2, #0, #5
 800343e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003440:	7b7b      	ldrb	r3, [r7, #13]
 8003442:	f36f 0303 	bfc	r3, #0, #4
 8003446:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	f36f 0303 	bfc	r3, #0, #4
 800344e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003450:	7a7b      	ldrb	r3, [r7, #9]
 8003452:	2203      	movs	r2, #3
 8003454:	f362 0306 	bfi	r3, r2, #0, #7
 8003458:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003460:	b2da      	uxtb	r2, r3
 8003462:	7a3b      	ldrb	r3, [r7, #8]
 8003464:	f362 0305 	bfi	r3, r2, #0, #6
 8003468:	723b      	strb	r3, [r7, #8]
            break;
 800346a:	e08d      	b.n	8003588 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	e0aa      	b.n	80035c8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	220e      	movs	r2, #14
 800347a:	f362 0304 	bfi	r3, r2, #0, #5
 800347e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003480:	7b7b      	ldrb	r3, [r7, #13]
 8003482:	2203      	movs	r2, #3
 8003484:	f362 0303 	bfi	r3, r2, #0, #4
 8003488:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800348a:	7b3b      	ldrb	r3, [r7, #12]
 800348c:	2203      	movs	r2, #3
 800348e:	f362 0303 	bfi	r3, r2, #0, #4
 8003492:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003494:	7a7b      	ldrb	r3, [r7, #9]
 8003496:	220f      	movs	r2, #15
 8003498:	f362 0306 	bfi	r3, r2, #0, #7
 800349c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	7a3b      	ldrb	r3, [r7, #8]
 80034a8:	f362 0305 	bfi	r3, r2, #0, #6
 80034ac:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034ae:	7abb      	ldrb	r3, [r7, #10]
 80034b0:	f36f 0301 	bfc	r3, #0, #2
 80034b4:	72bb      	strb	r3, [r7, #10]
            break;
 80034b6:	e067      	b.n	8003588 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2207      	movs	r2, #7
 80034c0:	f362 0304 	bfi	r3, r2, #0, #5
 80034c4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80034c6:	7b7b      	ldrb	r3, [r7, #13]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f362 0303 	bfi	r3, r2, #0, #4
 80034ce:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80034d0:	7b3b      	ldrb	r3, [r7, #12]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f362 0303 	bfi	r3, r2, #0, #4
 80034d8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80034da:	7a7b      	ldrb	r3, [r7, #9]
 80034dc:	2208      	movs	r2, #8
 80034de:	f362 0306 	bfi	r3, r2, #0, #7
 80034e2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	7a3b      	ldrb	r3, [r7, #8]
 80034ee:	f362 0305 	bfi	r3, r2, #0, #6
 80034f2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034f4:	7abb      	ldrb	r3, [r7, #10]
 80034f6:	f36f 0301 	bfc	r3, #0, #2
 80034fa:	72bb      	strb	r3, [r7, #10]
            break;
 80034fc:	e044      	b.n	8003588 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	2206      	movs	r2, #6
 8003506:	f362 0304 	bfi	r3, r2, #0, #5
 800350a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800350c:	7b7b      	ldrb	r3, [r7, #13]
 800350e:	2201      	movs	r2, #1
 8003510:	f362 0303 	bfi	r3, r2, #0, #4
 8003514:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003516:	7b3b      	ldrb	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f362 0303 	bfi	r3, r2, #0, #4
 800351e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003520:	7a7b      	ldrb	r3, [r7, #9]
 8003522:	2207      	movs	r2, #7
 8003524:	f362 0306 	bfi	r3, r2, #0, #7
 8003528:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003530:	b2da      	uxtb	r2, r3
 8003532:	7a3b      	ldrb	r3, [r7, #8]
 8003534:	f362 0305 	bfi	r3, r2, #0, #6
 8003538:	723b      	strb	r3, [r7, #8]
            break;
 800353a:	e025      	b.n	8003588 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	e042      	b.n	80035c8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003546:	7bbb      	ldrb	r3, [r7, #14]
 8003548:	2202      	movs	r2, #2
 800354a:	f362 0304 	bfi	r3, r2, #0, #5
 800354e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003550:	7b7b      	ldrb	r3, [r7, #13]
 8003552:	f36f 0303 	bfc	r3, #0, #4
 8003556:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003558:	7b3b      	ldrb	r3, [r7, #12]
 800355a:	f36f 0303 	bfc	r3, #0, #4
 800355e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003560:	7a7b      	ldrb	r3, [r7, #9]
 8003562:	2203      	movs	r2, #3
 8003564:	f362 0306 	bfi	r3, r2, #0, #7
 8003568:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003570:	b2da      	uxtb	r2, r3
 8003572:	7a3b      	ldrb	r3, [r7, #8]
 8003574:	f362 0305 	bfi	r3, r2, #0, #6
 8003578:	723b      	strb	r3, [r7, #8]
            break;
 800357a:	e005      	b.n	8003588 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	e022      	b.n	80035c8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e01f      	b.n	80035c8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	2108      	movs	r1, #8
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fee0 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 8003594:	4603      	mov	r3, r0
 8003596:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80035a0:	f06f 0301 	mvn.w	r3, #1
 80035a4:	e010      	b.n	80035c8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	210c      	movs	r1, #12
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fed1 	bl	8001354 <DRV_CANFDSPI_WriteWord>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80035be:	f06f 0302 	mvn.w	r3, #2
 80035c2:	e001      	b.n	80035c8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80035c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	000e0303 	.word	0x000e0303

080035d4 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
 80035de:	460b      	mov	r3, r1
 80035e0:	71bb      	strb	r3, [r7, #6]
 80035e2:	4613      	mov	r3, r2
 80035e4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80035ee:	f640 6307 	movw	r3, #3591	@ 0xe07
 80035f2:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80035f8:	f107 0308 	add.w	r3, r7, #8
 80035fc:	1cda      	adds	r2, r3, #3
 80035fe:	89b9      	ldrh	r1, [r7, #12]
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fd4a 	bl	800109c <DRV_CANFDSPI_ReadByte>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800360c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	e020      	b.n	800365c <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 800361a:	79bb      	ldrb	r3, [r7, #6]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	7afb      	ldrb	r3, [r7, #11]
 8003624:	f362 0300 	bfi	r3, r2, #0, #1
 8003628:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 800362a:	797b      	ldrb	r3, [r7, #5]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	f362 0341 	bfi	r3, r2, #1, #1
 8003638:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 800363a:	7afa      	ldrb	r2, [r7, #11]
 800363c:	89b9      	ldrh	r1, [r7, #12]
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fd97 	bl	8001174 <DRV_CANFDSPI_WriteByte>
 8003646:	4603      	mov	r3, r0
 8003648:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003652:	f06f 0301 	mvn.w	r3, #1
 8003656:	e001      	b.n	800365c <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d802      	bhi.n	800367e <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e02a      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	3b09      	subs	r3, #9
 8003682:	2b06      	cmp	r3, #6
 8003684:	d825      	bhi.n	80036d2 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 8003686:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	080036a9 	.word	0x080036a9
 8003690:	080036af 	.word	0x080036af
 8003694:	080036b5 	.word	0x080036b5
 8003698:	080036bb 	.word	0x080036bb
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036c7 	.word	0x080036c7
 80036a4:	080036cd 	.word	0x080036cd
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80036a8:	230c      	movs	r3, #12
 80036aa:	60fb      	str	r3, [r7, #12]
                break;
 80036ac:	e012      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 80036ae:	2310      	movs	r3, #16
 80036b0:	60fb      	str	r3, [r7, #12]
                break;
 80036b2:	e00f      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80036b4:	2314      	movs	r3, #20
 80036b6:	60fb      	str	r3, [r7, #12]
                break;
 80036b8:	e00c      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80036ba:	2318      	movs	r3, #24
 80036bc:	60fb      	str	r3, [r7, #12]
                break;
 80036be:	e009      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80036c0:	2320      	movs	r3, #32
 80036c2:	60fb      	str	r3, [r7, #12]
                break;
 80036c4:	e006      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80036c6:	2330      	movs	r3, #48	@ 0x30
 80036c8:	60fb      	str	r3, [r7, #12]
                break;
 80036ca:	e003      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80036cc:	2340      	movs	r3, #64	@ 0x40
 80036ce:	60fb      	str	r3, [r7, #12]
                break;
 80036d0:	e000      	b.n	80036d4 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80036d2:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80036d4:	68fb      	ldr	r3, [r7, #12]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop

080036e4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f023 0218 	bic.w	r2, r3, #24
 80036f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800371e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4313      	orrs	r3, r2
 8003726:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003734:	68fb      	ldr	r3, [r7, #12]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 800374c:	f000 f834 	bl	80037b8 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a12      	ldr	r2, [pc, #72]	@ (800379c <serialOut+0x58>)
 8003754:	4912      	ldr	r1, [pc, #72]	@ (80037a0 <serialOut+0x5c>)
 8003756:	4813      	ldr	r0, [pc, #76]	@ (80037a4 <serialOut+0x60>)
 8003758:	f00c fe26 	bl	80103a8 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 800375c:	4811      	ldr	r0, [pc, #68]	@ (80037a4 <serialOut+0x60>)
 800375e:	f7fc fd6f 	bl	8000240 <strlen>
 8003762:	4603      	mov	r3, r0
 8003764:	b29a      	uxth	r2, r3
 8003766:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800376a:	490e      	ldr	r1, [pc, #56]	@ (80037a4 <serialOut+0x60>)
 800376c:	480e      	ldr	r0, [pc, #56]	@ (80037a8 <serialOut+0x64>)
 800376e:	f00a ff11 	bl	800e594 <HAL_UART_Transmit>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <serialOut+0x68>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <serialOut+0x4e>
 8003784:	490a      	ldr	r1, [pc, #40]	@ (80037b0 <serialOut+0x6c>)
 8003786:	480b      	ldr	r0, [pc, #44]	@ (80037b4 <serialOut+0x70>)
 8003788:	f00c fe0e 	bl	80103a8 <siprintf>
 800378c:	4809      	ldr	r0, [pc, #36]	@ (80037b4 <serialOut+0x70>)
 800378e:	f7ff ffd9 	bl	8003744 <serialOut>
  }
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200008f4 	.word	0x200008f4
 80037a0:	08013ea8 	.word	0x08013ea8
 80037a4:	20000900 	.word	0x20000900
 80037a8:	200003b4 	.word	0x200003b4
 80037ac:	20000008 	.word	0x20000008
 80037b0:	08013eb0 	.word	0x08013eb0
 80037b4:	200009fc 	.word	0x200009fc

080037b8 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	2201      	movs	r2, #1
 80037d8:	4619      	mov	r1, r3
 80037da:	480e      	ldr	r0, [pc, #56]	@ (8003814 <getTimeBCD+0x5c>)
 80037dc:	f008 ff60 	bl	800c6a0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	2201      	movs	r2, #1
 80037e4:	4619      	mov	r1, r3
 80037e6:	480b      	ldr	r0, [pc, #44]	@ (8003814 <getTimeBCD+0x5c>)
 80037e8:	f009 f864 	bl	800c8b4 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80037ec:	7abb      	ldrb	r3, [r7, #10]
 80037ee:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80037f0:	7a7b      	ldrb	r3, [r7, #9]
 80037f2:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80037f4:	7a3b      	ldrb	r3, [r7, #8]
 80037f6:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80037f8:	7f7a      	ldrb	r2, [r7, #29]
 80037fa:	7fb9      	ldrb	r1, [r7, #30]
 80037fc:	7ffb      	ldrb	r3, [r7, #31]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	460b      	mov	r3, r1
 8003802:	4905      	ldr	r1, [pc, #20]	@ (8003818 <getTimeBCD+0x60>)
 8003804:	4805      	ldr	r0, [pc, #20]	@ (800381c <getTimeBCD+0x64>)
 8003806:	f00c fdcf 	bl	80103a8 <siprintf>
}
 800380a:	bf00      	nop
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000454 	.word	0x20000454
 8003818:	08013ed4 	.word	0x08013ed4
 800381c:	200008f4 	.word	0x200008f4

08003820 <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b092      	sub	sp, #72	@ 0x48
 8003824:	af00      	add	r7, sp, #0
 8003826:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 800382a:	463b      	mov	r3, r7
 800382c:	4618      	mov	r0, r3
 800382e:	f00c fe29 	bl	8010484 <localtime>
 8003832:	4603      	mov	r3, r0
 8003834:	f107 040c 	add.w	r4, r7, #12
 8003838:	461d      	mov	r5, r3
 800383a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800383c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800383e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800385e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003862:	2200      	movs	r2, #0
 8003864:	4619      	mov	r1, r3
 8003866:	4826      	ldr	r0, [pc, #152]	@ (8003900 <writeRTC+0xe0>)
 8003868:	f008 fe56 	bl	800c518 <HAL_RTC_SetTime>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 8003872:	4b24      	ldr	r3, [pc, #144]	@ (8003904 <writeRTC+0xe4>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <writeRTC+0x6c>
 800387e:	4922      	ldr	r1, [pc, #136]	@ (8003908 <writeRTC+0xe8>)
 8003880:	4822      	ldr	r0, [pc, #136]	@ (800390c <writeRTC+0xec>)
 8003882:	f00c fd91 	bl	80103a8 <siprintf>
 8003886:	4821      	ldr	r0, [pc, #132]	@ (800390c <writeRTC+0xec>)
 8003888:	f7ff ff5c 	bl	8003744 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <writeRTC+0x76>
 8003892:	2307      	movs	r3, #7
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3b64      	subs	r3, #100	@ 0x64
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80038be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038c2:	2200      	movs	r2, #0
 80038c4:	4619      	mov	r1, r3
 80038c6:	480e      	ldr	r0, [pc, #56]	@ (8003900 <writeRTC+0xe0>)
 80038c8:	f008 ff46 	bl	800c758 <HAL_RTC_SetDate>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <writeRTC+0xe4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <writeRTC+0xcc>
 80038de:	490c      	ldr	r1, [pc, #48]	@ (8003910 <writeRTC+0xf0>)
 80038e0:	480a      	ldr	r0, [pc, #40]	@ (800390c <writeRTC+0xec>)
 80038e2:	f00c fd61 	bl	80103a8 <siprintf>
 80038e6:	4809      	ldr	r0, [pc, #36]	@ (800390c <writeRTC+0xec>)
 80038e8:	f7ff ff2c 	bl	8003744 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80038ec:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80038f0:	2100      	movs	r1, #0
 80038f2:	4803      	ldr	r0, [pc, #12]	@ (8003900 <writeRTC+0xe0>)
 80038f4:	f009 f8b7 	bl	800ca66 <HAL_RTCEx_BKUPWrite>

}
 80038f8:	bf00      	nop
 80038fa:	3748      	adds	r7, #72	@ 0x48
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003900:	20000454 	.word	0x20000454
 8003904:	20000008 	.word	0x20000008
 8003908:	08013ee4 	.word	0x08013ee4
 800390c:	200009fc 	.word	0x200009fc
 8003910:	08013f0c 	.word	0x08013f0c

08003914 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b094      	sub	sp, #80	@ 0x50
 8003918:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  struct tm tim = {0};
 8003926:	463b      	mov	r3, r7
 8003928:	2224      	movs	r2, #36	@ 0x24
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f00c fda0 	bl	8010472 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8003932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003936:	2200      	movs	r2, #0
 8003938:	4619      	mov	r1, r3
 800393a:	4822      	ldr	r0, [pc, #136]	@ (80039c4 <readRTC+0xb0>)
 800393c:	f008 feb0 	bl	800c6a0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8003940:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003944:	2200      	movs	r2, #0
 8003946:	4619      	mov	r1, r3
 8003948:	481e      	ldr	r0, [pc, #120]	@ (80039c4 <readRTC+0xb0>)
 800394a:	f008 ffb3 	bl	800c8b4 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 800394e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003952:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t mm  = rtcTime.Minutes;
 8003956:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800395a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t ss  = rtcTime.Seconds;
 800395e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003962:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t d   = rtcDate.Date;
 8003966:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800396a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t m   = rtcDate.Month;
 800396e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  uint16_t y  = rtcDate.Year;
 8003976:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800397a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 800397e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003982:	3364      	adds	r3, #100	@ 0x64
 8003984:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  tim.tm_year = yr;
 8003986:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003988:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 800398a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800398e:	3b01      	subs	r3, #1
 8003990:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 8003992:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003996:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 8003998:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800399c:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 800399e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80039a2:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 80039a4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80039a8:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80039aa:	463b      	mov	r3, r7
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00c ff49 	bl	8010844 <mktime>
 80039b2:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

  return currentTime;
 80039b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	3750      	adds	r7, #80	@ 0x50
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000454 	.word	0x20000454

080039c8 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d018      	beq.n	8003a0a <switchLedOn+0x42>
 80039d8:	2b02      	cmp	r3, #2
 80039da:	dc1f      	bgt.n	8003a1c <switchLedOn+0x54>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <switchLedOn+0x1e>
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d009      	beq.n	80039f8 <switchLedOn+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80039e4:	e01a      	b.n	8003a1c <switchLedOn+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80039e6:	4b10      	ldr	r3, [pc, #64]	@ (8003a28 <switchLedOn+0x60>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a10      	ldr	r2, [pc, #64]	@ (8003a2c <switchLedOn+0x64>)
 80039ec:	8811      	ldrh	r1, [r2, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f006 fd75 	bl	800a4e0 <HAL_GPIO_WritePin>
            break;
 80039f6:	e012      	b.n	8003a1e <switchLedOn+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80039f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <switchLedOn+0x68>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a34 <switchLedOn+0x6c>)
 80039fe:	8811      	ldrh	r1, [r2, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f006 fd6c 	bl	800a4e0 <HAL_GPIO_WritePin>
            break;
 8003a08:	e009      	b.n	8003a1e <switchLedOn+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <switchLedOn+0x70>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003a3c <switchLedOn+0x74>)
 8003a10:	8811      	ldrh	r1, [r2, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f006 fd63 	bl	800a4e0 <HAL_GPIO_WritePin>
            break;
 8003a1a:	e000      	b.n	8003a1e <switchLedOn+0x56>
        default: break;
 8003a1c:	bf00      	nop
    }
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000b88 	.word	0x20000b88
 8003a2c:	20000b84 	.word	0x20000b84
 8003a30:	20000b80 	.word	0x20000b80
 8003a34:	20000b7e 	.word	0x20000b7e
 8003a38:	20000b90 	.word	0x20000b90
 8003a3c:	20000b8c 	.word	0x20000b8c

08003a40 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d018      	beq.n	8003a82 <switchLedOff+0x42>
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	dc1f      	bgt.n	8003a94 <switchLedOff+0x54>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <switchLedOff+0x1e>
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d009      	beq.n	8003a70 <switchLedOff+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8003a5c:	e01a      	b.n	8003a94 <switchLedOff+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <switchLedOff+0x60>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a10      	ldr	r2, [pc, #64]	@ (8003aa4 <switchLedOff+0x64>)
 8003a64:	8811      	ldrh	r1, [r2, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f006 fd39 	bl	800a4e0 <HAL_GPIO_WritePin>
            break;
 8003a6e:	e012      	b.n	8003a96 <switchLedOff+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 8003a70:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <switchLedOff+0x68>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <switchLedOff+0x6c>)
 8003a76:	8811      	ldrh	r1, [r2, #0]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f006 fd30 	bl	800a4e0 <HAL_GPIO_WritePin>
            break;
 8003a80:	e009      	b.n	8003a96 <switchLedOff+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 8003a82:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <switchLedOff+0x70>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab4 <switchLedOff+0x74>)
 8003a88:	8811      	ldrh	r1, [r2, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f006 fd27 	bl	800a4e0 <HAL_GPIO_WritePin>
            break;
 8003a92:	e000      	b.n	8003a96 <switchLedOff+0x56>
        default: break;
 8003a94:	bf00      	nop
    }
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000b88 	.word	0x20000b88
 8003aa4:	20000b84 	.word	0x20000b84
 8003aa8:	20000b80 	.word	0x20000b80
 8003aac:	20000b7e 	.word	0x20000b7e
 8003ab0:	20000b90 	.word	0x20000b90
 8003ab4:	20000b8c 	.word	0x20000b8c

08003ab8 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN1_INT_Pin){
 8003ac2:	4b36      	ldr	r3, [pc, #216]	@ (8003b9c <HAL_GPIO_EXTI_Callback+0xe4>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d063      	beq.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8003acc:	4b34      	ldr	r3, [pc, #208]	@ (8003ba0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d103      	bne.n	8003ade <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8003ad6:	4b33      	ldr	r3, [pc, #204]	@ (8003ba4 <HAL_GPIO_EXTI_Callback+0xec>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON2_Pin){

  }else if(GPIO_Pin == BUTTON3_Pin){

  }
}
 8003adc:	e05a      	b.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8003ade:	4b32      	ldr	r3, [pc, #200]	@ (8003ba8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d11c      	bne.n	8003b22 <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8003ae8:	4b30      	ldr	r3, [pc, #192]	@ (8003bac <HAL_GPIO_EXTI_Callback+0xf4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003aee:	8812      	ldrh	r2, [r2, #0]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f006 fcdc 	bl	800a4b0 <HAL_GPIO_ReadPin>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003b08:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8003b0a:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_EXTI_Callback+0x62>
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7ff ff58 	bl	80039c8 <switchLedOn>
}
 8003b18:	e03c      	b.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
     else switchLedOff(VCU_RX_LED);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7ff ff90 	bl	8003a40 <switchLedOff>
}
 8003b20:	e038      	b.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8003b22:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d033      	beq.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8003b2c:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <HAL_GPIO_EXTI_Callback+0x100>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d103      	bne.n	8003b3e <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8003b36:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <HAL_GPIO_EXTI_Callback+0x104>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
}
 8003b3c:	e02a      	b.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8003b3e:	4b20      	ldr	r3, [pc, #128]	@ (8003bc0 <HAL_GPIO_EXTI_Callback+0x108>)
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d11c      	bne.n	8003b82 <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8003b48:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc0 <HAL_GPIO_EXTI_Callback+0x108>)
 8003b4e:	8812      	ldrh	r2, [r2, #0]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f006 fcac 	bl	800a4b0 <HAL_GPIO_ReadPin>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b68:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8003b6a:	4b17      	ldr	r3, [pc, #92]	@ (8003bc8 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_EXTI_Callback+0xc2>
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7ff ff28 	bl	80039c8 <switchLedOn>
}
 8003b78:	e00c      	b.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
    else switchLedOff(MCU_RX_LED);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f7ff ff60 	bl	8003a40 <switchLedOff>
}
 8003b80:	e008      	b.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_GPIO_EXTI_Callback+0x114>)
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8003b8c:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_GPIO_EXTI_Callback+0x118>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	429a      	cmp	r2, r3
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000af6 	.word	0x20000af6
 8003ba0:	20000afe 	.word	0x20000afe
 8003ba4:	20000bb7 	.word	0x20000bb7
 8003ba8:	20000b06 	.word	0x20000b06
 8003bac:	20000b08 	.word	0x20000b08
 8003bb0:	20000bb6 	.word	0x20000bb6
 8003bb4:	20000b14 	.word	0x20000b14
 8003bb8:	20000b1e 	.word	0x20000b1e
 8003bbc:	20000bb5 	.word	0x20000bb5
 8003bc0:	20000b26 	.word	0x20000b26
 8003bc4:	20000b28 	.word	0x20000b28
 8003bc8:	20000bb4 	.word	0x20000bb4
 8003bcc:	20000b64 	.word	0x20000b64
 8003bd0:	20000b6e 	.word	0x20000b6e

08003bd4 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d129      	bne.n	8003c3c <HAL_TIM_PeriodElapsedCallback+0x68>
    // last contact timer overflow
    etTimerOverflows++;
 8003be8:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a16      	ldr	r2, [pc, #88]	@ (8003c48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bf0:	6013      	str	r3, [r2, #0]
    decSec++;
 8003bf2:	4b16      	ldr	r3, [pc, #88]	@ (8003c4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003bfc:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8003bfe:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b0a      	cmp	r3, #10
 8003c04:	d10a      	bne.n	8003c1c <HAL_TIM_PeriodElapsedCallback+0x48>
      decSec = 0;
 8003c06:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin);
 8003c0c:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a10      	ldr	r2, [pc, #64]	@ (8003c54 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f006 fc7a 	bl	800a510 <HAL_GPIO_TogglePin>
    }
    if((decSec % 5) == 0) sendState = 1;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003c22:	fba3 1302 	umull	r1, r3, r3, r2
 8003c26:	0899      	lsrs	r1, r3, #2
 8003c28:	460b      	mov	r3, r1
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_TIM_PeriodElapsedCallback+0x68>
 8003c36:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000540 	.word	0x20000540
 8003c48:	20000bb8 	.word	0x20000bb8
 8003c4c:	20000bbc 	.word	0x20000bbc
 8003c50:	20000b90 	.word	0x20000b90
 8003c54:	20000b8c 	.word	0x20000b8c
 8003c58:	cccccccd 	.word	0xcccccccd
 8003c5c:	20000bbd 	.word	0x20000bbd

08003c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c64:	f006 f860 	bl	8009d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c68:	f000 f824 	bl	8003cb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003c6c:	f000 f88e 	bl	8003d8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c70:	f000 fad0 	bl	8004214 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003c74:	f000 f97c 	bl	8003f70 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003c78:	f000 f9b8 	bl	8003fec <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003c7c:	f000 f8f0 	bl	8003e60 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8003c80:	f000 faa0 	bl	80041c4 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8003c84:	f000 f938 	bl	8003ef8 <MX_PKA_Init>
  MX_RTC_Init();
 8003c88:	f000 f94a 	bl	8003f20 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8003c8c:	f000 f89c 	bl	8003dc8 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8003c90:	f000 f9ea 	bl	8004068 <MX_TIM1_Init>


  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  DRV_CANFDSPI_Reset(CAN2);
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fd f9a7 	bl	8000fe8 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN1);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7fd f9a4 	bl	8000fe8 <DRV_CANFDSPI_Reset>
  PCU_Initialize();
 8003ca0:	f000 fdbe 	bl	8004820 <PCU_Initialize>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <main+0x50>)
 8003ca6:	f009 fb75 	bl	800d394 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8003caa:	f000 fef5 	bl	8004a98 <PCU_Tasks>
 8003cae:	e7fc      	b.n	8003caa <main+0x4a>
 8003cb0:	20000540 	.word	0x20000540

08003cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b09a      	sub	sp, #104	@ 0x68
 8003cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cba:	f107 0320 	add.w	r3, r7, #32
 8003cbe:	2248      	movs	r2, #72	@ 0x48
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f00c fbd5 	bl	8010472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	60da      	str	r2, [r3, #12]
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	615a      	str	r2, [r3, #20]
 8003cd8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003cda:	f006 fda1 	bl	800a820 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003cde:	2010      	movs	r0, #16
 8003ce0:	f7ff fd00 	bl	80036e4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce4:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <SystemClock_Config+0xd4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cec:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <SystemClock_Config+0xd4>)
 8003cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b24      	ldr	r3, [pc, #144]	@ (8003d88 <SystemClock_Config+0xd4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003d00:	2307      	movs	r3, #7
 8003d02:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d14:	2340      	movs	r3, #64	@ 0x40
 8003d16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003d20:	2310      	movs	r3, #16
 8003d22:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003d24:	2308      	movs	r3, #8
 8003d26:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003d2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003d32:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d38:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d3a:	f107 0320 	add.w	r3, r7, #32
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f007 f902 	bl	800af48 <HAL_RCC_OscConfig>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003d4a:	f000 fd59 	bl	8004800 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003d4e:	236f      	movs	r3, #111	@ 0x6f
 8003d50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d52:	2303      	movs	r3, #3
 8003d54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	2103      	movs	r1, #3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f007 fc5e 	bl	800b630 <HAL_RCC_ClockConfig>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003d7a:	f000 fd41 	bl	8004800 <Error_Handler>
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3768      	adds	r7, #104	@ 0x68
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	58000400 	.word	0x58000400

08003d8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b094      	sub	sp, #80	@ 0x50
 8003d90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d92:	463b      	mov	r3, r7
 8003d94:	2250      	movs	r2, #80	@ 0x50
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f00c fb6a 	bl	8010472 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8003d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003da2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003da4:	2302      	movs	r3, #2
 8003da6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003da8:	2310      	movs	r3, #16
 8003daa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dac:	463b      	mov	r3, r7
 8003dae:	4618      	mov	r0, r3
 8003db0:	f008 f87b 	bl	800beaa <HAL_RCCEx_PeriphCLKConfig>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8003dba:	f000 fd21 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003dbe:	bf00      	nop
 8003dc0:	3750      	adds	r7, #80	@ 0x50
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003dcc:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003dce:	4a23      	ldr	r2, [pc, #140]	@ (8003e5c <MX_LPUART1_UART_Init+0x94>)
 8003dd0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003dd8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003de6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003dec:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003dee:	220c      	movs	r2, #12
 8003df0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003df2:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003df8:	4b17      	ldr	r3, [pc, #92]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e04:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003e0a:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003e10:	4811      	ldr	r0, [pc, #68]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e12:	f00a fb6f 	bl	800e4f4 <HAL_UART_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003e1c:	f000 fcf0 	bl	8004800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e20:	2100      	movs	r1, #0
 8003e22:	480d      	ldr	r0, [pc, #52]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e24:	f00b fc61 	bl	800f6ea <HAL_UARTEx_SetTxFifoThreshold>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003e2e:	f000 fce7 	bl	8004800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e32:	2100      	movs	r1, #0
 8003e34:	4808      	ldr	r0, [pc, #32]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e36:	f00b fc96 	bl	800f766 <HAL_UARTEx_SetRxFifoThreshold>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e40:	f000 fcde 	bl	8004800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003e44:	4804      	ldr	r0, [pc, #16]	@ (8003e58 <MX_LPUART1_UART_Init+0x90>)
 8003e46:	f00b fc17 	bl	800f678 <HAL_UARTEx_DisableFifoMode>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003e50:	f000 fcd6 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000320 	.word	0x20000320
 8003e5c:	40008000 	.word	0x40008000

08003e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e64:	4b22      	ldr	r3, [pc, #136]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e66:	4a23      	ldr	r2, [pc, #140]	@ (8003ef4 <MX_USART1_UART_Init+0x94>)
 8003e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e72:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e86:	220c      	movs	r2, #12
 8003e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e90:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e96:	4b16      	ldr	r3, [pc, #88]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ea2:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ea8:	4811      	ldr	r0, [pc, #68]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003eaa:	f00a fb23 	bl	800e4f4 <HAL_UART_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003eb4:	f000 fca4 	bl	8004800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eb8:	2100      	movs	r1, #0
 8003eba:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003ebc:	f00b fc15 	bl	800f6ea <HAL_UARTEx_SetTxFifoThreshold>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003ec6:	f000 fc9b 	bl	8004800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4808      	ldr	r0, [pc, #32]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003ece:	f00b fc4a 	bl	800f766 <HAL_UARTEx_SetRxFifoThreshold>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003ed8:	f000 fc92 	bl	8004800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003edc:	4804      	ldr	r0, [pc, #16]	@ (8003ef0 <MX_USART1_UART_Init+0x90>)
 8003ede:	f00b fbcb 	bl	800f678 <HAL_UARTEx_DisableFifoMode>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ee8:	f000 fc8a 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200003b4 	.word	0x200003b4
 8003ef4:	40013800 	.word	0x40013800

08003ef8 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8003efc:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <MX_PKA_Init+0x20>)
 8003efe:	4a07      	ldr	r2, [pc, #28]	@ (8003f1c <MX_PKA_Init+0x24>)
 8003f00:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8003f02:	4805      	ldr	r0, [pc, #20]	@ (8003f18 <MX_PKA_Init+0x20>)
 8003f04:	f006 fc5d 	bl	800a7c2 <HAL_PKA_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8003f0e:	f000 fc77 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000448 	.word	0x20000448
 8003f1c:	58002000 	.word	0x58002000

08003f20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f24:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f26:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <MX_RTC_Init+0x4c>)
 8003f28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f32:	227f      	movs	r2, #127	@ 0x7f
 8003f34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003f36:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f38:	22ff      	movs	r2, #255	@ 0xff
 8003f3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f42:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f54:	4804      	ldr	r0, [pc, #16]	@ (8003f68 <MX_RTC_Init+0x48>)
 8003f56:	f008 fa2f 	bl	800c3b8 <HAL_RTC_Init>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003f60:	f000 fc4e 	bl	8004800 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000454 	.word	0x20000454
 8003f6c:	40002800 	.word	0x40002800

08003f70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f76:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe8 <MX_SPI1_Init+0x78>)
 8003f78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f82:	4b18      	ldr	r3, [pc, #96]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f88:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f96:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f9c:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003fbc:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fbe:	2207      	movs	r2, #7
 8003fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003fc2:	4b08      	ldr	r3, [pc, #32]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fce:	4805      	ldr	r0, [pc, #20]	@ (8003fe4 <MX_SPI1_Init+0x74>)
 8003fd0:	f008 fd61 	bl	800ca96 <HAL_SPI_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003fda:	f000 fc11 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000478 	.word	0x20000478
 8003fe8:	40013000 	.word	0x40013000

08003fec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <MX_SPI2_Init+0x74>)
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8004064 <MX_SPI2_Init+0x78>)
 8003ff4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <MX_SPI2_Init+0x74>)
 8003ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ffc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ffe:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004006:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800400a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800400c:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <MX_SPI2_Init+0x74>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004012:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <MX_SPI2_Init+0x74>)
 800401a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800401e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004020:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004022:	2200      	movs	r2, #0
 8004024:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004028:	2200      	movs	r2, #0
 800402a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800402c:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <MX_SPI2_Init+0x74>)
 800402e:	2200      	movs	r2, #0
 8004030:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004034:	2200      	movs	r2, #0
 8004036:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <MX_SPI2_Init+0x74>)
 800403a:	2207      	movs	r2, #7
 800403c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004044:	4b06      	ldr	r3, [pc, #24]	@ (8004060 <MX_SPI2_Init+0x74>)
 8004046:	2208      	movs	r2, #8
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800404a:	4805      	ldr	r0, [pc, #20]	@ (8004060 <MX_SPI2_Init+0x74>)
 800404c:	f008 fd23 	bl	800ca96 <HAL_SPI_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004056:	f000 fbd3 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200004dc 	.word	0x200004dc
 8004064:	40003800 	.word	0x40003800

08004068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b09c      	sub	sp, #112	@ 0x70
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800406e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800407c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004088:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
 8004098:	615a      	str	r2, [r3, #20]
 800409a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	2234      	movs	r2, #52	@ 0x34
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f00c f9e5 	bl	8010472 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040a8:	4b44      	ldr	r3, [pc, #272]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040aa:	4a45      	ldr	r2, [pc, #276]	@ (80041c0 <MX_TIM1_Init+0x158>)
 80040ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80040ae:	4b43      	ldr	r3, [pc, #268]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040b0:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80040b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b6:	4b41      	ldr	r3, [pc, #260]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80040bc:	4b3f      	ldr	r3, [pc, #252]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040be:	2263      	movs	r2, #99	@ 0x63
 80040c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c2:	4b3e      	ldr	r3, [pc, #248]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040c8:	4b3c      	ldr	r3, [pc, #240]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ce:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040d4:	4839      	ldr	r0, [pc, #228]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040d6:	f009 f8f9 	bl	800d2cc <HAL_TIM_Base_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80040e0:	f000 fb8e 	bl	8004800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040ee:	4619      	mov	r1, r3
 80040f0:	4832      	ldr	r0, [pc, #200]	@ (80041bc <MX_TIM1_Init+0x154>)
 80040f2:	f009 fbc7 	bl	800d884 <HAL_TIM_ConfigClockSource>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80040fc:	f000 fb80 	bl	8004800 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004100:	482e      	ldr	r0, [pc, #184]	@ (80041bc <MX_TIM1_Init+0x154>)
 8004102:	f009 f995 	bl	800d430 <HAL_TIM_OC_Init>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800410c:	f000 fb78 	bl	8004800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800411c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004120:	4619      	mov	r1, r3
 8004122:	4826      	ldr	r0, [pc, #152]	@ (80041bc <MX_TIM1_Init+0x154>)
 8004124:	f00a f8ae 	bl	800e284 <HAL_TIMEx_MasterConfigSynchronization>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800412e:	f000 fb67 	bl	8004800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004132:	2300      	movs	r3, #0
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800413a:	2300      	movs	r3, #0
 800413c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800413e:	2300      	movs	r3, #0
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004142:	2300      	movs	r3, #0
 8004144:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800414e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004152:	2200      	movs	r2, #0
 8004154:	4619      	mov	r1, r3
 8004156:	4819      	ldr	r0, [pc, #100]	@ (80041bc <MX_TIM1_Init+0x154>)
 8004158:	f009 fb1a 	bl	800d790 <HAL_TIM_OC_ConfigChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004162:	f000 fb4d 	bl	8004800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800417a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800417e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004184:	2300      	movs	r3, #0
 8004186:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800418c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004196:	2300      	movs	r3, #0
 8004198:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4806      	ldr	r0, [pc, #24]	@ (80041bc <MX_TIM1_Init+0x154>)
 80041a4:	f00a f8ce 	bl	800e344 <HAL_TIMEx_ConfigBreakDeadTime>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80041ae:	f000 fb27 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80041b2:	bf00      	nop
 80041b4:	3770      	adds	r7, #112	@ 0x70
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000540 	.word	0x20000540
 80041c0:	40012c00 	.word	0x40012c00

080041c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80041c8:	4b10      	ldr	r3, [pc, #64]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041ca:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <MX_USB_PCD_Init+0x4c>)
 80041cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80041ce:	4b0f      	ldr	r3, [pc, #60]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041d0:	2208      	movs	r2, #8
 80041d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80041d4:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041d6:	2202      	movs	r2, #2
 80041d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041da:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041dc:	2202      	movs	r2, #2
 80041de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80041e0:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80041f8:	4804      	ldr	r0, [pc, #16]	@ (800420c <MX_USB_PCD_Init+0x48>)
 80041fa:	f006 f9df 	bl	800a5bc <HAL_PCD_Init>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004204:	f000 fafc 	bl	8004800 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200005fc 	.word	0x200005fc
 8004210:	40006800 	.word	0x40006800

08004214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 8004228:	4b9d      	ldr	r3, [pc, #628]	@ (80044a0 <MX_GPIO_Init+0x28c>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 81c2 	bne.w	80045b6 <MX_GPIO_Init+0x3a2>



CAN1_INT0_Pin         = GPIO_PIN_8;
 8004232:	4b9c      	ldr	r3, [pc, #624]	@ (80044a4 <MX_GPIO_Init+0x290>)
 8004234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004238:	801a      	strh	r2, [r3, #0]
CAN1_INT0_GPIO_Port   = GPIOB;
 800423a:	4b9b      	ldr	r3, [pc, #620]	@ (80044a8 <MX_GPIO_Init+0x294>)
 800423c:	4a9b      	ldr	r2, [pc, #620]	@ (80044ac <MX_GPIO_Init+0x298>)
 800423e:	601a      	str	r2, [r3, #0]
CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8004240:	4b9b      	ldr	r3, [pc, #620]	@ (80044b0 <MX_GPIO_Init+0x29c>)
 8004242:	2217      	movs	r2, #23
 8004244:	801a      	strh	r2, [r3, #0]
CAN1_INT1_Pin         = GPIO_PIN_9;
 8004246:	4b9b      	ldr	r3, [pc, #620]	@ (80044b4 <MX_GPIO_Init+0x2a0>)
 8004248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800424c:	801a      	strh	r2, [r3, #0]
CAN1_INT1_GPIO_Port   = GPIOB;
 800424e:	4b9a      	ldr	r3, [pc, #616]	@ (80044b8 <MX_GPIO_Init+0x2a4>)
 8004250:	4a96      	ldr	r2, [pc, #600]	@ (80044ac <MX_GPIO_Init+0x298>)
 8004252:	601a      	str	r2, [r3, #0]
CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 8004254:	4b99      	ldr	r3, [pc, #612]	@ (80044bc <MX_GPIO_Init+0x2a8>)
 8004256:	2217      	movs	r2, #23
 8004258:	801a      	strh	r2, [r3, #0]
SPI2_CS1_Pin          = GPIO_PIN_0;
 800425a:	4b99      	ldr	r3, [pc, #612]	@ (80044c0 <MX_GPIO_Init+0x2ac>)
 800425c:	2201      	movs	r2, #1
 800425e:	801a      	strh	r2, [r3, #0]
SPI2_CS1_GPIO_Port    = GPIOC;
 8004260:	4b98      	ldr	r3, [pc, #608]	@ (80044c4 <MX_GPIO_Init+0x2b0>)
 8004262:	4a99      	ldr	r2, [pc, #612]	@ (80044c8 <MX_GPIO_Init+0x2b4>)
 8004264:	601a      	str	r2, [r3, #0]
SPI2_CS2_Pin          = GPIO_PIN_3;
 8004266:	4b99      	ldr	r3, [pc, #612]	@ (80044cc <MX_GPIO_Init+0x2b8>)
 8004268:	2208      	movs	r2, #8
 800426a:	801a      	strh	r2, [r3, #0]
SPI2_CS2_GPIO_Port    = GPIOC;
 800426c:	4b98      	ldr	r3, [pc, #608]	@ (80044d0 <MX_GPIO_Init+0x2bc>)
 800426e:	4a96      	ldr	r2, [pc, #600]	@ (80044c8 <MX_GPIO_Init+0x2b4>)
 8004270:	601a      	str	r2, [r3, #0]
CAN1_CS_Pin           = GPIO_PIN_5;
 8004272:	4b98      	ldr	r3, [pc, #608]	@ (80044d4 <MX_GPIO_Init+0x2c0>)
 8004274:	2220      	movs	r2, #32
 8004276:	801a      	strh	r2, [r3, #0]
CAN1_CS_GPIO_Port     = GPIOA;
 8004278:	4b97      	ldr	r3, [pc, #604]	@ (80044d8 <MX_GPIO_Init+0x2c4>)
 800427a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800427e:	601a      	str	r2, [r3, #0]
BUTTON1_Pin           = GPIO_PIN_4;
 8004280:	4b96      	ldr	r3, [pc, #600]	@ (80044dc <MX_GPIO_Init+0x2c8>)
 8004282:	2210      	movs	r2, #16
 8004284:	801a      	strh	r2, [r3, #0]
BUTTON1_GPIO_Port     = GPIOC;
 8004286:	4b96      	ldr	r3, [pc, #600]	@ (80044e0 <MX_GPIO_Init+0x2cc>)
 8004288:	4a8f      	ldr	r2, [pc, #572]	@ (80044c8 <MX_GPIO_Init+0x2b4>)
 800428a:	601a      	str	r2, [r3, #0]
BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 800428c:	4b95      	ldr	r3, [pc, #596]	@ (80044e4 <MX_GPIO_Init+0x2d0>)
 800428e:	220a      	movs	r2, #10
 8004290:	801a      	strh	r2, [r3, #0]
CAN2_CS_Pin           = GPIO_PIN_5;
 8004292:	4b95      	ldr	r3, [pc, #596]	@ (80044e8 <MX_GPIO_Init+0x2d4>)
 8004294:	2220      	movs	r2, #32
 8004296:	801a      	strh	r2, [r3, #0]
CAN2_CS_GPIO_Port     = GPIOC;
 8004298:	4b94      	ldr	r3, [pc, #592]	@ (80044ec <MX_GPIO_Init+0x2d8>)
 800429a:	4a8b      	ldr	r2, [pc, #556]	@ (80044c8 <MX_GPIO_Init+0x2b4>)
 800429c:	601a      	str	r2, [r3, #0]
LED_GREEN_Pin         = GPIO_PIN_0;
 800429e:	4b94      	ldr	r3, [pc, #592]	@ (80044f0 <MX_GPIO_Init+0x2dc>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	801a      	strh	r2, [r3, #0]
LED_GREEN_GPIO_Port   = GPIOB;
 80042a4:	4b93      	ldr	r3, [pc, #588]	@ (80044f4 <MX_GPIO_Init+0x2e0>)
 80042a6:	4a81      	ldr	r2, [pc, #516]	@ (80044ac <MX_GPIO_Init+0x298>)
 80042a8:	601a      	str	r2, [r3, #0]
LED_RED_Pin           = GPIO_PIN_1;
 80042aa:	4b93      	ldr	r3, [pc, #588]	@ (80044f8 <MX_GPIO_Init+0x2e4>)
 80042ac:	2202      	movs	r2, #2
 80042ae:	801a      	strh	r2, [r3, #0]
LED_RED_GPIO_Port     = GPIOB;
 80042b0:	4b92      	ldr	r3, [pc, #584]	@ (80044fc <MX_GPIO_Init+0x2e8>)
 80042b2:	4a7e      	ldr	r2, [pc, #504]	@ (80044ac <MX_GPIO_Init+0x298>)
 80042b4:	601a      	str	r2, [r3, #0]
CAN2_INT_Pin          = GPIO_PIN_12;
 80042b6:	4b92      	ldr	r3, [pc, #584]	@ (8004500 <MX_GPIO_Init+0x2ec>)
 80042b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042bc:	801a      	strh	r2, [r3, #0]
CAN2_INT_GPIO_Port    = GPIOB;
 80042be:	4b91      	ldr	r3, [pc, #580]	@ (8004504 <MX_GPIO_Init+0x2f0>)
 80042c0:	4a7a      	ldr	r2, [pc, #488]	@ (80044ac <MX_GPIO_Init+0x298>)
 80042c2:	601a      	str	r2, [r3, #0]
CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 80042c4:	4b90      	ldr	r3, [pc, #576]	@ (8004508 <MX_GPIO_Init+0x2f4>)
 80042c6:	2228      	movs	r2, #40	@ 0x28
 80042c8:	801a      	strh	r2, [r3, #0]
CAN2_INT0_Pin         = GPIO_PIN_13;
 80042ca:	4b90      	ldr	r3, [pc, #576]	@ (800450c <MX_GPIO_Init+0x2f8>)
 80042cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042d0:	801a      	strh	r2, [r3, #0]
CAN2_INT0_GPIO_Port   = GPIOB;
 80042d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004510 <MX_GPIO_Init+0x2fc>)
 80042d4:	4a75      	ldr	r2, [pc, #468]	@ (80044ac <MX_GPIO_Init+0x298>)
 80042d6:	601a      	str	r2, [r3, #0]
CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 80042d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004514 <MX_GPIO_Init+0x300>)
 80042da:	2228      	movs	r2, #40	@ 0x28
 80042dc:	801a      	strh	r2, [r3, #0]
CAN2_INT1_Pin         = GPIO_PIN_14;
 80042de:	4b8e      	ldr	r3, [pc, #568]	@ (8004518 <MX_GPIO_Init+0x304>)
 80042e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042e4:	801a      	strh	r2, [r3, #0]
CAN2_INT1_GPIO_Port   = GPIOB;
 80042e6:	4b8d      	ldr	r3, [pc, #564]	@ (800451c <MX_GPIO_Init+0x308>)
 80042e8:	4a70      	ldr	r2, [pc, #448]	@ (80044ac <MX_GPIO_Init+0x298>)
 80042ea:	601a      	str	r2, [r3, #0]
CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 80042ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004520 <MX_GPIO_Init+0x30c>)
 80042ee:	2228      	movs	r2, #40	@ 0x28
 80042f0:	801a      	strh	r2, [r3, #0]
CAN1_INT_Pin          = GPIO_PIN_10;
 80042f2:	4b8c      	ldr	r3, [pc, #560]	@ (8004524 <MX_GPIO_Init+0x310>)
 80042f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f8:	801a      	strh	r2, [r3, #0]
CAN1_INT_GPIO_Port    = GPIOA;
 80042fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004528 <MX_GPIO_Init+0x314>)
 80042fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004300:	601a      	str	r2, [r3, #0]
CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8004302:	4b8a      	ldr	r3, [pc, #552]	@ (800452c <MX_GPIO_Init+0x318>)
 8004304:	2228      	movs	r2, #40	@ 0x28
 8004306:	801a      	strh	r2, [r3, #0]
BUTTON2_Pin           = GPIO_PIN_0;
 8004308:	4b89      	ldr	r3, [pc, #548]	@ (8004530 <MX_GPIO_Init+0x31c>)
 800430a:	2201      	movs	r2, #1
 800430c:	801a      	strh	r2, [r3, #0]
BUTTON2_GPIO_Port     = GPIOD;
 800430e:	4b89      	ldr	r3, [pc, #548]	@ (8004534 <MX_GPIO_Init+0x320>)
 8004310:	4a89      	ldr	r2, [pc, #548]	@ (8004538 <MX_GPIO_Init+0x324>)
 8004312:	601a      	str	r2, [r3, #0]
BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8004314:	4b89      	ldr	r3, [pc, #548]	@ (800453c <MX_GPIO_Init+0x328>)
 8004316:	2206      	movs	r2, #6
 8004318:	801a      	strh	r2, [r3, #0]
BUTTON3_Pin           = GPIO_PIN_1;
 800431a:	4b89      	ldr	r3, [pc, #548]	@ (8004540 <MX_GPIO_Init+0x32c>)
 800431c:	2202      	movs	r2, #2
 800431e:	801a      	strh	r2, [r3, #0]
BUTTON3_GPIO_Port     = GPIOD;
 8004320:	4b88      	ldr	r3, [pc, #544]	@ (8004544 <MX_GPIO_Init+0x330>)
 8004322:	4a85      	ldr	r2, [pc, #532]	@ (8004538 <MX_GPIO_Init+0x324>)
 8004324:	601a      	str	r2, [r3, #0]
BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 8004326:	4b88      	ldr	r3, [pc, #544]	@ (8004548 <MX_GPIO_Init+0x334>)
 8004328:	2207      	movs	r2, #7
 800432a:	801a      	strh	r2, [r3, #0]
LED_BLUE_Pin          = GPIO_PIN_5;
 800432c:	4b87      	ldr	r3, [pc, #540]	@ (800454c <MX_GPIO_Init+0x338>)
 800432e:	2220      	movs	r2, #32
 8004330:	801a      	strh	r2, [r3, #0]
LED_BLUE_GPIO_Port    = GPIOB;
 8004332:	4b87      	ldr	r3, [pc, #540]	@ (8004550 <MX_GPIO_Init+0x33c>)
 8004334:	4a5d      	ldr	r2, [pc, #372]	@ (80044ac <MX_GPIO_Init+0x298>)
 8004336:	601a      	str	r2, [r3, #0]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004338:	2004      	movs	r0, #4
 800433a:	f7ff f9e9 	bl	8003710 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800433e:	2002      	movs	r0, #2
 8004340:	f7ff f9e6 	bl	8003710 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004344:	2001      	movs	r0, #1
 8004346:	f7ff f9e3 	bl	8003710 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800434a:	2008      	movs	r0, #8
 800434c:	f7ff f9e0 	bl	8003710 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8004350:	4b5b      	ldr	r3, [pc, #364]	@ (80044c0 <MX_GPIO_Init+0x2ac>)
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	4b5d      	ldr	r3, [pc, #372]	@ (80044cc <MX_GPIO_Init+0x2b8>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	b29a      	uxth	r2, r3
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <MX_GPIO_Init+0x2d4>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	4313      	orrs	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2200      	movs	r2, #0
 8004366:	4619      	mov	r1, r3
 8004368:	4857      	ldr	r0, [pc, #348]	@ (80044c8 <MX_GPIO_Init+0x2b4>)
 800436a:	f006 f8b9 	bl	800a4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 800436e:	4b5a      	ldr	r3, [pc, #360]	@ (80044d8 <MX_GPIO_Init+0x2c4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a58      	ldr	r2, [pc, #352]	@ (80044d4 <MX_GPIO_Init+0x2c0>)
 8004374:	8811      	ldrh	r1, [r2, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f006 f8b1 	bl	800a4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800437e:	4b5c      	ldr	r3, [pc, #368]	@ (80044f0 <MX_GPIO_Init+0x2dc>)
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	4b5d      	ldr	r3, [pc, #372]	@ (80044f8 <MX_GPIO_Init+0x2e4>)
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	b29a      	uxth	r2, r3
 800438a:	4b70      	ldr	r3, [pc, #448]	@ (800454c <MX_GPIO_Init+0x338>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2200      	movs	r2, #0
 8004394:	4619      	mov	r1, r3
 8004396:	4845      	ldr	r0, [pc, #276]	@ (80044ac <MX_GPIO_Init+0x298>)
 8004398:	f006 f8a2 	bl	800a4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin
                           CAN2_INT1_Pin */
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                          |CAN2_INT1_Pin;
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <MX_GPIO_Init+0x290>)
 800439e:	881a      	ldrh	r2, [r3, #0]
 80043a0:	4b44      	ldr	r3, [pc, #272]	@ (80044b4 <MX_GPIO_Init+0x2a0>)
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	4b55      	ldr	r3, [pc, #340]	@ (8004500 <MX_GPIO_Init+0x2ec>)
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	4b56      	ldr	r3, [pc, #344]	@ (800450c <MX_GPIO_Init+0x2f8>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	4b57      	ldr	r3, [pc, #348]	@ (8004518 <MX_GPIO_Init+0x304>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	b29b      	uxth	r3, r3
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 80043c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043c2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80043c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043c8:	2301      	movs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4836      	ldr	r0, [pc, #216]	@ (80044ac <MX_GPIO_Init+0x298>)
 80043d2:	f005 fefd 	bl	800a1d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 80043d6:	4b3a      	ldr	r3, [pc, #232]	@ (80044c0 <MX_GPIO_Init+0x2ac>)
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	4b3c      	ldr	r3, [pc, #240]	@ (80044cc <MX_GPIO_Init+0x2b8>)
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <MX_GPIO_Init+0x2d4>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ec:	2301      	movs	r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	4832      	ldr	r0, [pc, #200]	@ (80044c8 <MX_GPIO_Init+0x2b4>)
 80043fe:	f005 fee7 	bl	800a1d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8004402:	4b34      	ldr	r3, [pc, #208]	@ (80044d4 <MX_GPIO_Init+0x2c0>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004408:	2301      	movs	r3, #1
 800440a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8004414:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <MX_GPIO_Init+0x2c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1d3a      	adds	r2, r7, #4
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f005 fed7 	bl	800a1d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8004422:	4b2e      	ldr	r3, [pc, #184]	@ (80044dc <MX_GPIO_Init+0x2c8>)
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004428:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800442c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800442e:	2301      	movs	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8004432:	4b2b      	ldr	r3, [pc, #172]	@ (80044e0 <MX_GPIO_Init+0x2cc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1d3a      	adds	r2, r7, #4
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f005 fec8 	bl	800a1d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8004440:	4b2b      	ldr	r3, [pc, #172]	@ (80044f0 <MX_GPIO_Init+0x2dc>)
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	4b2c      	ldr	r3, [pc, #176]	@ (80044f8 <MX_GPIO_Init+0x2e4>)
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <MX_GPIO_Init+0x338>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004456:	2301      	movs	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4811      	ldr	r0, [pc, #68]	@ (80044ac <MX_GPIO_Init+0x298>)
 8004468:	f005 feb2 	bl	800a1d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin;
 800446c:	4b2d      	ldr	r3, [pc, #180]	@ (8004524 <MX_GPIO_Init+0x310>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004472:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 800447c:	4b2a      	ldr	r3, [pc, #168]	@ (8004528 <MX_GPIO_Init+0x314>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	1d3a      	adds	r2, r7, #4
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f005 fea3 	bl	800a1d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 800448a:	4b29      	ldr	r3, [pc, #164]	@ (8004530 <MX_GPIO_Init+0x31c>)
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	4b2c      	ldr	r3, [pc, #176]	@ (8004540 <MX_GPIO_Init+0x32c>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004498:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800449c:	e05a      	b.n	8004554 <MX_GPIO_Init+0x340>
 800449e:	bf00      	nop
 80044a0:	200008f0 	.word	0x200008f0
 80044a4:	20000afe 	.word	0x20000afe
 80044a8:	20000b00 	.word	0x20000b00
 80044ac:	48000400 	.word	0x48000400
 80044b0:	20000b04 	.word	0x20000b04
 80044b4:	20000b06 	.word	0x20000b06
 80044b8:	20000b08 	.word	0x20000b08
 80044bc:	20000b0c 	.word	0x20000b0c
 80044c0:	20000b54 	.word	0x20000b54
 80044c4:	20000b58 	.word	0x20000b58
 80044c8:	48000800 	.word	0x48000800
 80044cc:	20000b5c 	.word	0x20000b5c
 80044d0:	20000b60 	.word	0x20000b60
 80044d4:	20000b0e 	.word	0x20000b0e
 80044d8:	20000b10 	.word	0x20000b10
 80044dc:	20000b64 	.word	0x20000b64
 80044e0:	20000b68 	.word	0x20000b68
 80044e4:	20000b6c 	.word	0x20000b6c
 80044e8:	20000b2e 	.word	0x20000b2e
 80044ec:	20000b30 	.word	0x20000b30
 80044f0:	20000b7e 	.word	0x20000b7e
 80044f4:	20000b80 	.word	0x20000b80
 80044f8:	20000b84 	.word	0x20000b84
 80044fc:	20000b88 	.word	0x20000b88
 8004500:	20000b14 	.word	0x20000b14
 8004504:	20000b18 	.word	0x20000b18
 8004508:	20000b1c 	.word	0x20000b1c
 800450c:	20000b1e 	.word	0x20000b1e
 8004510:	20000b20 	.word	0x20000b20
 8004514:	20000b24 	.word	0x20000b24
 8004518:	20000b26 	.word	0x20000b26
 800451c:	20000b28 	.word	0x20000b28
 8004520:	20000b2c 	.word	0x20000b2c
 8004524:	20000af6 	.word	0x20000af6
 8004528:	20000af8 	.word	0x20000af8
 800452c:	20000afc 	.word	0x20000afc
 8004530:	20000b6e 	.word	0x20000b6e
 8004534:	20000b70 	.word	0x20000b70
 8004538:	48000c00 	.word	0x48000c00
 800453c:	20000b74 	.word	0x20000b74
 8004540:	20000b76 	.word	0x20000b76
 8004544:	20000b78 	.word	0x20000b78
 8004548:	20000b7c 	.word	0x20000b7c
 800454c:	20000b8c 	.word	0x20000b8c
 8004550:	20000b90 	.word	0x20000b90
 8004554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004556:	2301      	movs	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800455a:	1d3b      	adds	r3, r7, #4
 800455c:	4619      	mov	r1, r3
 800455e:	486e      	ldr	r0, [pc, #440]	@ (8004718 <MX_GPIO_Init+0x504>)
 8004560:	f005 fe36 	bl	800a1d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	2006      	movs	r0, #6
 800456a:	f005 fd3e 	bl	8009fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800456e:	2006      	movs	r0, #6
 8004570:	f005 fd55 	bl	800a01e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004574:	2200      	movs	r2, #0
 8004576:	2100      	movs	r1, #0
 8004578:	2007      	movs	r0, #7
 800457a:	f005 fd36 	bl	8009fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800457e:	2007      	movs	r0, #7
 8004580:	f005 fd4d 	bl	800a01e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004584:	2200      	movs	r2, #0
 8004586:	2100      	movs	r1, #0
 8004588:	200a      	movs	r0, #10
 800458a:	f005 fd2e 	bl	8009fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800458e:	200a      	movs	r0, #10
 8004590:	f005 fd45 	bl	800a01e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	2017      	movs	r0, #23
 800459a:	f005 fd26 	bl	8009fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800459e:	2017      	movs	r0, #23
 80045a0:	f005 fd3d 	bl	800a01e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045a4:	2200      	movs	r2, #0
 80045a6:	2100      	movs	r1, #0
 80045a8:	2028      	movs	r0, #40	@ 0x28
 80045aa:	f005 fd1e 	bl	8009fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045ae:	2028      	movs	r0, #40	@ 0x28
 80045b0:	f005 fd35 	bl	800a01e <HAL_NVIC_EnableIRQ>


  }
  /* USER CODE END MX_GPIO_Init_2 */

}
 80045b4:	e0ac      	b.n	8004710 <MX_GPIO_Init+0x4fc>
    CAN1_INT_Pin          = GPIO_PIN_15;
 80045b6:	4b59      	ldr	r3, [pc, #356]	@ (800471c <MX_GPIO_Init+0x508>)
 80045b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80045bc:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 80045be:	4b58      	ldr	r3, [pc, #352]	@ (8004720 <MX_GPIO_Init+0x50c>)
 80045c0:	4a58      	ldr	r2, [pc, #352]	@ (8004724 <MX_GPIO_Init+0x510>)
 80045c2:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 80045c4:	4b58      	ldr	r3, [pc, #352]	@ (8004728 <MX_GPIO_Init+0x514>)
 80045c6:	2228      	movs	r2, #40	@ 0x28
 80045c8:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 80045ca:	4b58      	ldr	r3, [pc, #352]	@ (800472c <MX_GPIO_Init+0x518>)
 80045cc:	2240      	movs	r2, #64	@ 0x40
 80045ce:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 80045d0:	4b57      	ldr	r3, [pc, #348]	@ (8004730 <MX_GPIO_Init+0x51c>)
 80045d2:	4a58      	ldr	r2, [pc, #352]	@ (8004734 <MX_GPIO_Init+0x520>)
 80045d4:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80045d6:	4b58      	ldr	r3, [pc, #352]	@ (8004738 <MX_GPIO_Init+0x524>)
 80045d8:	2217      	movs	r2, #23
 80045da:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 80045dc:	4b57      	ldr	r3, [pc, #348]	@ (800473c <MX_GPIO_Init+0x528>)
 80045de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045e2:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 80045e4:	4b56      	ldr	r3, [pc, #344]	@ (8004740 <MX_GPIO_Init+0x52c>)
 80045e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80045ea:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80045ec:	4b55      	ldr	r3, [pc, #340]	@ (8004744 <MX_GPIO_Init+0x530>)
 80045ee:	2217      	movs	r2, #23
 80045f0:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 80045f2:	4b55      	ldr	r3, [pc, #340]	@ (8004748 <MX_GPIO_Init+0x534>)
 80045f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80045f8:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 80045fa:	4b54      	ldr	r3, [pc, #336]	@ (800474c <MX_GPIO_Init+0x538>)
 80045fc:	4a49      	ldr	r2, [pc, #292]	@ (8004724 <MX_GPIO_Init+0x510>)
 80045fe:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 8004600:	4b53      	ldr	r3, [pc, #332]	@ (8004750 <MX_GPIO_Init+0x53c>)
 8004602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004606:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8004608:	4b52      	ldr	r3, [pc, #328]	@ (8004754 <MX_GPIO_Init+0x540>)
 800460a:	4a4a      	ldr	r2, [pc, #296]	@ (8004734 <MX_GPIO_Init+0x520>)
 800460c:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800460e:	4b52      	ldr	r3, [pc, #328]	@ (8004758 <MX_GPIO_Init+0x544>)
 8004610:	2228      	movs	r2, #40	@ 0x28
 8004612:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 8004614:	4b51      	ldr	r3, [pc, #324]	@ (800475c <MX_GPIO_Init+0x548>)
 8004616:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800461a:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 800461c:	4b50      	ldr	r3, [pc, #320]	@ (8004760 <MX_GPIO_Init+0x54c>)
 800461e:	4a45      	ldr	r2, [pc, #276]	@ (8004734 <MX_GPIO_Init+0x520>)
 8004620:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8004622:	4b50      	ldr	r3, [pc, #320]	@ (8004764 <MX_GPIO_Init+0x550>)
 8004624:	2228      	movs	r2, #40	@ 0x28
 8004626:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 8004628:	4b4f      	ldr	r3, [pc, #316]	@ (8004768 <MX_GPIO_Init+0x554>)
 800462a:	2201      	movs	r2, #1
 800462c:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 800462e:	4b4f      	ldr	r3, [pc, #316]	@ (800476c <MX_GPIO_Init+0x558>)
 8004630:	4a39      	ldr	r2, [pc, #228]	@ (8004718 <MX_GPIO_Init+0x504>)
 8004632:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 8004634:	4b4e      	ldr	r3, [pc, #312]	@ (8004770 <MX_GPIO_Init+0x55c>)
 8004636:	2206      	movs	r2, #6
 8004638:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 800463a:	4b4e      	ldr	r3, [pc, #312]	@ (8004774 <MX_GPIO_Init+0x560>)
 800463c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004640:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 8004642:	4b4d      	ldr	r3, [pc, #308]	@ (8004778 <MX_GPIO_Init+0x564>)
 8004644:	4a3b      	ldr	r2, [pc, #236]	@ (8004734 <MX_GPIO_Init+0x520>)
 8004646:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 8004648:	4b4c      	ldr	r3, [pc, #304]	@ (800477c <MX_GPIO_Init+0x568>)
 800464a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800464e:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 8004650:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <MX_GPIO_Init+0x56c>)
 8004652:	4a34      	ldr	r2, [pc, #208]	@ (8004724 <MX_GPIO_Init+0x510>)
 8004654:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 8004656:	4b4b      	ldr	r3, [pc, #300]	@ (8004784 <MX_GPIO_Init+0x570>)
 8004658:	2217      	movs	r2, #23
 800465a:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 800465c:	4b4a      	ldr	r3, [pc, #296]	@ (8004788 <MX_GPIO_Init+0x574>)
 800465e:	2210      	movs	r2, #16
 8004660:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <MX_GPIO_Init+0x578>)
 8004664:	4a2f      	ldr	r2, [pc, #188]	@ (8004724 <MX_GPIO_Init+0x510>)
 8004666:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 8004668:	4b49      	ldr	r3, [pc, #292]	@ (8004790 <MX_GPIO_Init+0x57c>)
 800466a:	220a      	movs	r2, #10
 800466c:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 800466e:	4b49      	ldr	r3, [pc, #292]	@ (8004794 <MX_GPIO_Init+0x580>)
 8004670:	2220      	movs	r2, #32
 8004672:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 8004674:	4b48      	ldr	r3, [pc, #288]	@ (8004798 <MX_GPIO_Init+0x584>)
 8004676:	4a2b      	ldr	r2, [pc, #172]	@ (8004724 <MX_GPIO_Init+0x510>)
 8004678:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <MX_GPIO_Init+0x588>)
 800467c:	2217      	movs	r2, #23
 800467e:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 8004680:	4b47      	ldr	r3, [pc, #284]	@ (80047a0 <MX_GPIO_Init+0x58c>)
 8004682:	2202      	movs	r2, #2
 8004684:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8004686:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <MX_GPIO_Init+0x590>)
 8004688:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <MX_GPIO_Init+0x504>)
 800468a:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 800468c:	4b46      	ldr	r3, [pc, #280]	@ (80047a8 <MX_GPIO_Init+0x594>)
 800468e:	2201      	movs	r2, #1
 8004690:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 8004692:	4b46      	ldr	r3, [pc, #280]	@ (80047ac <MX_GPIO_Init+0x598>)
 8004694:	4a27      	ldr	r2, [pc, #156]	@ (8004734 <MX_GPIO_Init+0x520>)
 8004696:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8004698:	4b45      	ldr	r3, [pc, #276]	@ (80047b0 <MX_GPIO_Init+0x59c>)
 800469a:	2208      	movs	r2, #8
 800469c:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 800469e:	4b45      	ldr	r3, [pc, #276]	@ (80047b4 <MX_GPIO_Init+0x5a0>)
 80046a0:	4a24      	ldr	r2, [pc, #144]	@ (8004734 <MX_GPIO_Init+0x520>)
 80046a2:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;
 80046a4:	4b44      	ldr	r3, [pc, #272]	@ (80047b8 <MX_GPIO_Init+0x5a4>)
 80046a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046aa:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 80046ac:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <MX_GPIO_Init+0x5a8>)
 80046ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <MX_GPIO_Init+0x510>)
 80046b0:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 80046b2:	4b43      	ldr	r3, [pc, #268]	@ (80047c0 <MX_GPIO_Init+0x5ac>)
 80046b4:	2228      	movs	r2, #40	@ 0x28
 80046b6:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;
 80046b8:	4b42      	ldr	r3, [pc, #264]	@ (80047c4 <MX_GPIO_Init+0x5b0>)
 80046ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046be:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 80046c0:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <MX_GPIO_Init+0x5b4>)
 80046c2:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <MX_GPIO_Init+0x510>)
 80046c4:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <MX_GPIO_Init+0x5b8>)
 80046c8:	2206      	movs	r2, #6
 80046ca:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;
 80046cc:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <MX_GPIO_Init+0x5bc>)
 80046ce:	2204      	movs	r2, #4
 80046d0:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 80046d2:	4b40      	ldr	r3, [pc, #256]	@ (80047d4 <MX_GPIO_Init+0x5c0>)
 80046d4:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <MX_GPIO_Init+0x510>)
 80046d6:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 80046d8:	4b3f      	ldr	r3, [pc, #252]	@ (80047d8 <MX_GPIO_Init+0x5c4>)
 80046da:	2208      	movs	r2, #8
 80046dc:	801a      	strh	r2, [r3, #0]
    LED_CAN1_Pin         = GPIO_PIN_0;
 80046de:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <MX_GPIO_Init+0x5c8>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	801a      	strh	r2, [r3, #0]
    LED_CAN1_GPIO_Port   = GPIOB;
 80046e4:	4b3e      	ldr	r3, [pc, #248]	@ (80047e0 <MX_GPIO_Init+0x5cc>)
 80046e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004724 <MX_GPIO_Init+0x510>)
 80046e8:	601a      	str	r2, [r3, #0]
    LED_CAN2_Pin         = GPIO_PIN_1;
 80046ea:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <MX_GPIO_Init+0x5d0>)
 80046ec:	2202      	movs	r2, #2
 80046ee:	801a      	strh	r2, [r3, #0]
    LED_CAN2_GPIO_Port   = GPIOB;
 80046f0:	4b3d      	ldr	r3, [pc, #244]	@ (80047e8 <MX_GPIO_Init+0x5d4>)
 80046f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004724 <MX_GPIO_Init+0x510>)
 80046f4:	601a      	str	r2, [r3, #0]
    LED_CAN3_Pin         = GPIO_PIN_4;
 80046f6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ec <MX_GPIO_Init+0x5d8>)
 80046f8:	2210      	movs	r2, #16
 80046fa:	801a      	strh	r2, [r3, #0]
    LED_CAN3_GPIO_Port   = GPIOE;
 80046fc:	4b3c      	ldr	r3, [pc, #240]	@ (80047f0 <MX_GPIO_Init+0x5dc>)
 80046fe:	4a3d      	ldr	r2, [pc, #244]	@ (80047f4 <MX_GPIO_Init+0x5e0>)
 8004700:	601a      	str	r2, [r3, #0]
    LED_HBEAT_Pin        = GPIO_PIN_12;
 8004702:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <MX_GPIO_Init+0x5e4>)
 8004704:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004708:	801a      	strh	r2, [r3, #0]
    LED_HBEAT_GPIO_Port  = GPIOB;
 800470a:	4b3c      	ldr	r3, [pc, #240]	@ (80047fc <MX_GPIO_Init+0x5e8>)
 800470c:	4a05      	ldr	r2, [pc, #20]	@ (8004724 <MX_GPIO_Init+0x510>)
 800470e:	601a      	str	r2, [r3, #0]
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	48000c00 	.word	0x48000c00
 800471c:	20000af6 	.word	0x20000af6
 8004720:	20000af8 	.word	0x20000af8
 8004724:	48000400 	.word	0x48000400
 8004728:	20000afc 	.word	0x20000afc
 800472c:	20000afe 	.word	0x20000afe
 8004730:	20000b00 	.word	0x20000b00
 8004734:	48000800 	.word	0x48000800
 8004738:	20000b04 	.word	0x20000b04
 800473c:	20000b06 	.word	0x20000b06
 8004740:	20000b08 	.word	0x20000b08
 8004744:	20000b0c 	.word	0x20000b0c
 8004748:	20000b0e 	.word	0x20000b0e
 800474c:	20000b10 	.word	0x20000b10
 8004750:	20000b14 	.word	0x20000b14
 8004754:	20000b18 	.word	0x20000b18
 8004758:	20000b1c 	.word	0x20000b1c
 800475c:	20000b1e 	.word	0x20000b1e
 8004760:	20000b20 	.word	0x20000b20
 8004764:	20000b24 	.word	0x20000b24
 8004768:	20000b26 	.word	0x20000b26
 800476c:	20000b28 	.word	0x20000b28
 8004770:	20000b2c 	.word	0x20000b2c
 8004774:	20000b2e 	.word	0x20000b2e
 8004778:	20000b30 	.word	0x20000b30
 800477c:	20000b34 	.word	0x20000b34
 8004780:	20000b38 	.word	0x20000b38
 8004784:	20000b3c 	.word	0x20000b3c
 8004788:	20000b3e 	.word	0x20000b3e
 800478c:	20000b40 	.word	0x20000b40
 8004790:	20000b44 	.word	0x20000b44
 8004794:	20000b46 	.word	0x20000b46
 8004798:	20000b48 	.word	0x20000b48
 800479c:	20000b4c 	.word	0x20000b4c
 80047a0:	20000b4e 	.word	0x20000b4e
 80047a4:	20000b50 	.word	0x20000b50
 80047a8:	20000b54 	.word	0x20000b54
 80047ac:	20000b58 	.word	0x20000b58
 80047b0:	20000b5c 	.word	0x20000b5c
 80047b4:	20000b60 	.word	0x20000b60
 80047b8:	20000b64 	.word	0x20000b64
 80047bc:	20000b68 	.word	0x20000b68
 80047c0:	20000b6c 	.word	0x20000b6c
 80047c4:	20000b6e 	.word	0x20000b6e
 80047c8:	20000b70 	.word	0x20000b70
 80047cc:	20000b74 	.word	0x20000b74
 80047d0:	20000b76 	.word	0x20000b76
 80047d4:	20000b78 	.word	0x20000b78
 80047d8:	20000b7c 	.word	0x20000b7c
 80047dc:	20000b94 	.word	0x20000b94
 80047e0:	20000b98 	.word	0x20000b98
 80047e4:	20000b9c 	.word	0x20000b9c
 80047e8:	20000ba0 	.word	0x20000ba0
 80047ec:	20000ba4 	.word	0x20000ba4
 80047f0:	20000ba8 	.word	0x20000ba8
 80047f4:	48001000 	.word	0x48001000
 80047f8:	20000bac 	.word	0x20000bac
 80047fc:	20000bb0 	.word	0x20000bb0

08004800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8004804:	4904      	ldr	r1, [pc, #16]	@ (8004818 <Error_Handler+0x18>)
 8004806:	4805      	ldr	r0, [pc, #20]	@ (800481c <Error_Handler+0x1c>)
 8004808:	f00b fdce 	bl	80103a8 <siprintf>
 800480c:	4803      	ldr	r0, [pc, #12]	@ (800481c <Error_Handler+0x1c>)
 800480e:	f7fe ff99 	bl	8003744 <serialOut>
  return;
 8004812:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	08013f34 	.word	0x08013f34
 800481c:	200009fc 	.word	0x200009fc

08004820 <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0

  memset(&pack,0,sizeof(pack));
 8004826:	2254      	movs	r2, #84	@ 0x54
 8004828:	2100      	movs	r1, #0
 800482a:	4887      	ldr	r0, [pc, #540]	@ (8004a48 <PCU_Initialize+0x228>)
 800482c:	f00b fe21 	bl	8010472 <memset>

  pack.id = PACK_ID;
 8004830:	4b85      	ldr	r3, [pc, #532]	@ (8004a48 <PCU_Initialize+0x228>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 8004836:	4b84      	ldr	r3, [pc, #528]	@ (8004a48 <PCU_Initialize+0x228>)
 8004838:	2200      	movs	r2, #0
 800483a:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 800483c:	4b82      	ldr	r3, [pc, #520]	@ (8004a48 <PCU_Initialize+0x228>)
 800483e:	2200      	movs	r2, #0
 8004840:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8004842:	4b81      	ldr	r3, [pc, #516]	@ (8004a48 <PCU_Initialize+0x228>)
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 8004848:	4b7f      	ldr	r3, [pc, #508]	@ (8004a48 <PCU_Initialize+0x228>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <PCU_Initialize+0x38>
    pack.vcuCanOffset = 0;
 8004850:	4b7d      	ldr	r3, [pc, #500]	@ (8004a48 <PCU_Initialize+0x228>)
 8004852:	2200      	movs	r2, #0
 8004854:	815a      	strh	r2, [r3, #10]
 8004856:	e007      	b.n	8004868 <PCU_Initialize+0x48>
  else if (pack.id == 1)
 8004858:	4b7b      	ldr	r3, [pc, #492]	@ (8004a48 <PCU_Initialize+0x228>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d103      	bne.n	8004868 <PCU_Initialize+0x48>
    pack.vcuCanOffset =0x100;
 8004860:	4b79      	ldr	r3, [pc, #484]	@ (8004a48 <PCU_Initialize+0x228>)
 8004862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004866:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 8004868:	4b77      	ldr	r3, [pc, #476]	@ (8004a48 <PCU_Initialize+0x228>)
 800486a:	2200      	movs	r2, #0
 800486c:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 800486e:	4b76      	ldr	r3, [pc, #472]	@ (8004a48 <PCU_Initialize+0x228>)
 8004870:	2200      	movs	r2, #0
 8004872:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8004874:	4b74      	ldr	r3, [pc, #464]	@ (8004a48 <PCU_Initialize+0x228>)
 8004876:	2200      	movs	r2, #0
 8004878:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800487a:	4b73      	ldr	r3, [pc, #460]	@ (8004a48 <PCU_Initialize+0x228>)
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8004880:	4b71      	ldr	r3, [pc, #452]	@ (8004a48 <PCU_Initialize+0x228>)
 8004882:	2200      	movs	r2, #0
 8004884:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 8004886:	4b70      	ldr	r3, [pc, #448]	@ (8004a48 <PCU_Initialize+0x228>)
 8004888:	2200      	movs	r2, #0
 800488a:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 800488c:	4b6e      	ldr	r3, [pc, #440]	@ (8004a48 <PCU_Initialize+0x228>)
 800488e:	2200      	movs	r2, #0
 8004890:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8004892:	4b6d      	ldr	r3, [pc, #436]	@ (8004a48 <PCU_Initialize+0x228>)
 8004894:	2200      	movs	r2, #0
 8004896:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 8004898:	4b6b      	ldr	r3, [pc, #428]	@ (8004a48 <PCU_Initialize+0x228>)
 800489a:	2200      	movs	r2, #0
 800489c:	845a      	strh	r2, [r3, #34]	@ 0x22
  pack.cellAvgTemp=0;
 800489e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a48 <PCU_Initialize+0x228>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	84da      	strh	r2, [r3, #38]	@ 0x26
  pack.cellHiVolt=0;
 80048a4:	4b68      	ldr	r3, [pc, #416]	@ (8004a48 <PCU_Initialize+0x228>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	851a      	strh	r2, [r3, #40]	@ 0x28
  pack.cellLoVolt=0;
 80048aa:	4b67      	ldr	r3, [pc, #412]	@ (8004a48 <PCU_Initialize+0x228>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  pack.cellAvgVolt=0;
 80048b0:	4b65      	ldr	r3, [pc, #404]	@ (8004a48 <PCU_Initialize+0x228>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	861a      	strh	r2, [r3, #48]	@ 0x30
  pack.status=0;
 80048b6:	4b64      	ldr	r3, [pc, #400]	@ (8004a48 <PCU_Initialize+0x228>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  pack.vcuStateChange=0;
 80048be:	4b62      	ldr	r3, [pc, #392]	@ (8004a48 <PCU_Initialize+0x228>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  pack.state=0;
 80048c6:	4b60      	ldr	r3, [pc, #384]	@ (8004a48 <PCU_Initialize+0x228>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  pack.vcuRequestedState=0;
 80048ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004a48 <PCU_Initialize+0x228>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  pack.soc=0;
 80048d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a48 <PCU_Initialize+0x228>)
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  pack.soh=0;
 80048de:	4b5a      	ldr	r3, [pc, #360]	@ (8004a48 <PCU_Initialize+0x228>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  pack.vcuLastContact.overflows=0;
 80048e6:	4b58      	ldr	r3, [pc, #352]	@ (8004a48 <PCU_Initialize+0x228>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	649a      	str	r2, [r3, #72]	@ 0x48
  pack.vcuLastContact.ticks=0;
 80048ec:	4b56      	ldr	r3, [pc, #344]	@ (8004a48 <PCU_Initialize+0x228>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
  pack.cellBalanceActive=0;
 80048f2:	4b55      	ldr	r3, [pc, #340]	@ (8004a48 <PCU_Initialize+0x228>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <PCU_Initialize+0x228>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 80048fe:	4b52      	ldr	r3, [pc, #328]	@ (8004a48 <PCU_Initialize+0x228>)
 8004900:	2200      	movs	r2, #0
 8004902:	761a      	strb	r2, [r3, #24]

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8004904:	2300      	movs	r3, #0
 8004906:	71fb      	strb	r3, [r7, #7]
 8004908:	e00f      	b.n	800492a <PCU_Initialize+0x10a>
    memset(&module[index],0,sizeof(module[index]));
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	4a4d      	ldr	r2, [pc, #308]	@ (8004a4c <PCU_Initialize+0x22c>)
 8004916:	4413      	add	r3, r2
 8004918:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f00b fda7 	bl	8010472 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	3301      	adds	r3, #1
 8004928:	71fb      	strb	r3, [r7, #7]
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	2b1f      	cmp	r3, #31
 800492e:	d9ec      	bls.n	800490a <PCU_Initialize+0xea>


  bool passed;


  serialOut("");
 8004930:	4847      	ldr	r0, [pc, #284]	@ (8004a50 <PCU_Initialize+0x230>)
 8004932:	f7fe ff07 	bl	8003744 <serialOut>
  serialOut("");
 8004936:	4846      	ldr	r0, [pc, #280]	@ (8004a50 <PCU_Initialize+0x230>)
 8004938:	f7fe ff04 	bl	8003744 <serialOut>
  serialOut("        ██    ██");
 800493c:	4845      	ldr	r0, [pc, #276]	@ (8004a54 <PCU_Initialize+0x234>)
 800493e:	f7fe ff01 	bl	8003744 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8004942:	4845      	ldr	r0, [pc, #276]	@ (8004a58 <PCU_Initialize+0x238>)
 8004944:	f7fe fefe 	bl	8003744 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2023");
 8004948:	4844      	ldr	r0, [pc, #272]	@ (8004a5c <PCU_Initialize+0x23c>)
 800494a:	f7fe fefb 	bl	8003744 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 800494e:	4844      	ldr	r0, [pc, #272]	@ (8004a60 <PCU_Initialize+0x240>)
 8004950:	f7fe fef8 	bl	8003744 <serialOut>
  serialOut("     ██    ██    ██");
 8004954:	4843      	ldr	r0, [pc, #268]	@ (8004a64 <PCU_Initialize+0x244>)
 8004956:	f7fe fef5 	bl	8003744 <serialOut>
  serialOut("     m o d b a t t");
 800495a:	4843      	ldr	r0, [pc, #268]	@ (8004a68 <PCU_Initialize+0x248>)
 800495c:	f7fe fef2 	bl	8003744 <serialOut>
  serialOut("");
 8004960:	483b      	ldr	r0, [pc, #236]	@ (8004a50 <PCU_Initialize+0x230>)
 8004962:	f7fe feef 	bl	8003744 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8004966:	2000      	movs	r0, #0
 8004968:	f003 fc0a 	bl	8008180 <CAN_TestRamAccess>
 800496c:	4603      	mov	r3, r0
 800496e:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 8004970:	79bb      	ldrb	r3, [r7, #6]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <PCU_Initialize+0x166>
 8004976:	493d      	ldr	r1, [pc, #244]	@ (8004a6c <PCU_Initialize+0x24c>)
 8004978:	483d      	ldr	r0, [pc, #244]	@ (8004a70 <PCU_Initialize+0x250>)
 800497a:	f00b fd15 	bl	80103a8 <siprintf>
 800497e:	483c      	ldr	r0, [pc, #240]	@ (8004a70 <PCU_Initialize+0x250>)
 8004980:	f7fe fee0 	bl	8003744 <serialOut>
 8004984:	e006      	b.n	8004994 <PCU_Initialize+0x174>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8004986:	493b      	ldr	r1, [pc, #236]	@ (8004a74 <PCU_Initialize+0x254>)
 8004988:	4839      	ldr	r0, [pc, #228]	@ (8004a70 <PCU_Initialize+0x250>)
 800498a:	f00b fd0d 	bl	80103a8 <siprintf>
 800498e:	4838      	ldr	r0, [pc, #224]	@ (8004a70 <PCU_Initialize+0x250>)
 8004990:	f7fe fed8 	bl	8003744 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8004994:	2000      	movs	r0, #0
 8004996:	f003 fb79 	bl	800808c <CAN_TestRegisterAccess>
 800499a:	4603      	mov	r3, r0
 800499c:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800499e:	79bb      	ldrb	r3, [r7, #6]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <PCU_Initialize+0x194>
 80049a4:	4934      	ldr	r1, [pc, #208]	@ (8004a78 <PCU_Initialize+0x258>)
 80049a6:	4832      	ldr	r0, [pc, #200]	@ (8004a70 <PCU_Initialize+0x250>)
 80049a8:	f00b fcfe 	bl	80103a8 <siprintf>
 80049ac:	4830      	ldr	r0, [pc, #192]	@ (8004a70 <PCU_Initialize+0x250>)
 80049ae:	f7fe fec9 	bl	8003744 <serialOut>
 80049b2:	e006      	b.n	80049c2 <PCU_Initialize+0x1a2>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 80049b4:	4931      	ldr	r1, [pc, #196]	@ (8004a7c <PCU_Initialize+0x25c>)
 80049b6:	482e      	ldr	r0, [pc, #184]	@ (8004a70 <PCU_Initialize+0x250>)
 80049b8:	f00b fcf6 	bl	80103a8 <siprintf>
 80049bc:	482c      	ldr	r0, [pc, #176]	@ (8004a70 <PCU_Initialize+0x250>)
 80049be:	f7fe fec1 	bl	8003744 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80049c2:	492f      	ldr	r1, [pc, #188]	@ (8004a80 <PCU_Initialize+0x260>)
 80049c4:	482a      	ldr	r0, [pc, #168]	@ (8004a70 <PCU_Initialize+0x250>)
 80049c6:	f00b fcef 	bl	80103a8 <siprintf>
 80049ca:	4829      	ldr	r0, [pc, #164]	@ (8004a70 <PCU_Initialize+0x250>)
 80049cc:	f7fe feba 	bl	8003744 <serialOut>

  passed = CAN_TestRamAccess(CAN2);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f003 fbd5 	bl	8008180 <CAN_TestRamAccess>
 80049d6:	4603      	mov	r3, r0
 80049d8:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 80049da:	79bb      	ldrb	r3, [r7, #6]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <PCU_Initialize+0x1d0>
 80049e0:	4928      	ldr	r1, [pc, #160]	@ (8004a84 <PCU_Initialize+0x264>)
 80049e2:	4823      	ldr	r0, [pc, #140]	@ (8004a70 <PCU_Initialize+0x250>)
 80049e4:	f00b fce0 	bl	80103a8 <siprintf>
 80049e8:	4821      	ldr	r0, [pc, #132]	@ (8004a70 <PCU_Initialize+0x250>)
 80049ea:	f7fe feab 	bl	8003744 <serialOut>
 80049ee:	e006      	b.n	80049fe <PCU_Initialize+0x1de>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 80049f0:	4925      	ldr	r1, [pc, #148]	@ (8004a88 <PCU_Initialize+0x268>)
 80049f2:	481f      	ldr	r0, [pc, #124]	@ (8004a70 <PCU_Initialize+0x250>)
 80049f4:	f00b fcd8 	bl	80103a8 <siprintf>
 80049f8:	481d      	ldr	r0, [pc, #116]	@ (8004a70 <PCU_Initialize+0x250>)
 80049fa:	f7fe fea3 	bl	8003744 <serialOut>
  }

  passed = CAN_TestRegisterAccess(CAN2);
 80049fe:	2001      	movs	r0, #1
 8004a00:	f003 fb44 	bl	800808c <CAN_TestRegisterAccess>
 8004a04:	4603      	mov	r3, r0
 8004a06:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8004a08:	79bb      	ldrb	r3, [r7, #6]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <PCU_Initialize+0x1fe>
 8004a0e:	491f      	ldr	r1, [pc, #124]	@ (8004a8c <PCU_Initialize+0x26c>)
 8004a10:	4817      	ldr	r0, [pc, #92]	@ (8004a70 <PCU_Initialize+0x250>)
 8004a12:	f00b fcc9 	bl	80103a8 <siprintf>
 8004a16:	4816      	ldr	r0, [pc, #88]	@ (8004a70 <PCU_Initialize+0x250>)
 8004a18:	f7fe fe94 	bl	8003744 <serialOut>
 8004a1c:	e006      	b.n	8004a2c <PCU_Initialize+0x20c>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 8004a1e:	491c      	ldr	r1, [pc, #112]	@ (8004a90 <PCU_Initialize+0x270>)
 8004a20:	4813      	ldr	r0, [pc, #76]	@ (8004a70 <PCU_Initialize+0x250>)
 8004a22:	f00b fcc1 	bl	80103a8 <siprintf>
 8004a26:	4812      	ldr	r0, [pc, #72]	@ (8004a70 <PCU_Initialize+0x250>)
 8004a28:	f7fe fe8c 	bl	8003744 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8004a2c:	4914      	ldr	r1, [pc, #80]	@ (8004a80 <PCU_Initialize+0x260>)
 8004a2e:	4810      	ldr	r0, [pc, #64]	@ (8004a70 <PCU_Initialize+0x250>)
 8004a30:	f00b fcba 	bl	80103a8 <siprintf>
 8004a34:	480e      	ldr	r0, [pc, #56]	@ (8004a70 <PCU_Initialize+0x250>)
 8004a36:	f7fe fe85 	bl	8003744 <serialOut>

  appData.state = PC_STATE_INIT;
 8004a3a:	4b16      	ldr	r3, [pc, #88]	@ (8004a94 <PCU_Initialize+0x274>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	2000a4fc 	.word	0x2000a4fc
 8004a4c:	20000c7c 	.word	0x20000c7c
 8004a50:	08013f44 	.word	0x08013f44
 8004a54:	08013f48 	.word	0x08013f48
 8004a58:	08013f64 	.word	0x08013f64
 8004a5c:	08013f8c 	.word	0x08013f8c
 8004a60:	08013fdc 	.word	0x08013fdc
 8004a64:	0801402c 	.word	0x0801402c
 8004a68:	0801404c 	.word	0x0801404c
 8004a6c:	08014060 	.word	0x08014060
 8004a70:	200009fc 	.word	0x200009fc
 8004a74:	08014090 	.word	0x08014090
 8004a78:	080140c8 	.word	0x080140c8
 8004a7c:	080140f8 	.word	0x080140f8
 8004a80:	08014130 	.word	0x08014130
 8004a84:	08014134 	.word	0x08014134
 8004a88:	08014164 	.word	0x08014164
 8004a8c:	0801419c 	.word	0x0801419c
 8004a90:	080141cc 	.word	0x080141cc
 8004a94:	20000bc0 	.word	0x20000bc0

08004a98 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t moduleId;
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 8004a9e:	4b96      	ldr	r3, [pc, #600]	@ (8004cf8 <PCU_Tasks+0x260>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d126      	bne.n	8004af4 <PCU_Tasks+0x5c>
    switchLedOn(GREEN_LED);
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f7fe ff8e 	bl	80039c8 <switchLedOn>
    switchLedOn(RED_LED);
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7fe ff8b 	bl	80039c8 <switchLedOn>
    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f000 fc0a 	bl	80052cc <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f000 fc07 	bl	80052cc <DRV_CANFDSPI_Init>
    switchLedOff(GREEN_LED);
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f7fe ffbe 	bl	8003a40 <switchLedOff>
    switchLedOff(RED_LED);
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7fe ffbb 	bl	8003a40 <switchLedOff>

    MCU_IsolateAllModules();
 8004aca:	f001 fcd9 	bl	8006480 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 8004ace:	f001 fc87 	bl	80063e0 <MCU_DeRegisterAllModules>

    pack.vcuRequestedState = packOff;
 8004ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8004cfc <PCU_Tasks+0x264>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 8004ada:	4b89      	ldr	r3, [pc, #548]	@ (8004d00 <PCU_Tasks+0x268>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a87      	ldr	r2, [pc, #540]	@ (8004cfc <PCU_Tasks+0x264>)
 8004ae0:	6493      	str	r3, [r2, #72]	@ 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 8004ae2:	4b88      	ldr	r3, [pc, #544]	@ (8004d04 <PCU_Tasks+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	4a84      	ldr	r2, [pc, #528]	@ (8004cfc <PCU_Tasks+0x264>)
 8004aea:	6453      	str	r3, [r2, #68]	@ 0x44

    appData.state = PC_STATE_RUN;
 8004aec:	4b82      	ldr	r3, [pc, #520]	@ (8004cf8 <PCU_Tasks+0x260>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8004af2:	e3e0      	b.n	80052b6 <PCU_Tasks+0x81e>
  }else if (appData.state == PC_STATE_RUN){
 8004af4:	4b80      	ldr	r3, [pc, #512]	@ (8004cf8 <PCU_Tasks+0x260>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 83dc 	bne.w	80052b6 <PCU_Tasks+0x81e>
    if(can1RxInterrupt)
 8004afe:	4b82      	ldr	r3, [pc, #520]	@ (8004d08 <PCU_Tasks+0x270>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <PCU_Tasks+0x72>
      VCU_ReceiveMessages();
 8004b06:	f003 ffa9 	bl	8008a5c <VCU_ReceiveMessages>
    if(can2RxInterrupt)
 8004b0a:	4b80      	ldr	r3, [pc, #512]	@ (8004d0c <PCU_Tasks+0x274>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <PCU_Tasks+0x7e>
      MCU_ReceiveMessages();
 8004b12:	f001 f979 	bl	8005e08 <MCU_ReceiveMessages>
    elapsedTicks = VCU_TicksSinceLastMessage();
 8004b16:	f004 f9a3 	bl	8008e60 <VCU_TicksSinceLastMessage>
 8004b1a:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8004b22:	d920      	bls.n	8004b66 <PCU_Tasks+0xce>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 8004b24:	4b75      	ldr	r3, [pc, #468]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d009      	beq.n	8004b42 <PCU_Tasks+0xaa>
 8004b2e:	4b73      	ldr	r3, [pc, #460]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d004      	beq.n	8004b42 <PCU_Tasks+0xaa>
 8004b38:	4b70      	ldr	r3, [pc, #448]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d130      	bne.n	8004ba4 <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 8004b42:	4b73      	ldr	r3, [pc, #460]	@ (8004d10 <PCU_Tasks+0x278>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <PCU_Tasks+0xc4>
 8004b4e:	4971      	ldr	r1, [pc, #452]	@ (8004d14 <PCU_Tasks+0x27c>)
 8004b50:	4871      	ldr	r0, [pc, #452]	@ (8004d18 <PCU_Tasks+0x280>)
 8004b52:	f00b fc29 	bl	80103a8 <siprintf>
 8004b56:	4870      	ldr	r0, [pc, #448]	@ (8004d18 <PCU_Tasks+0x280>)
 8004b58:	f7fe fdf4 	bl	8003744 <serialOut>
        pack.vcuRequestedState = packOff;
 8004b5c:	4b67      	ldr	r3, [pc, #412]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b64:	e01e      	b.n	8004ba4 <PCU_Tasks+0x10c>
    }else if(elapsedTicks > VCU_ET_WARNING){
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004b6c:	d91a      	bls.n	8004ba4 <PCU_Tasks+0x10c>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 8004b6e:	4b63      	ldr	r3, [pc, #396]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d004      	beq.n	8004b82 <PCU_Tasks+0xea>
 8004b78:	4b60      	ldr	r3, [pc, #384]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d110      	bne.n	8004ba4 <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8004b82:	4b63      	ldr	r3, [pc, #396]	@ (8004d10 <PCU_Tasks+0x278>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d006      	beq.n	8004b9c <PCU_Tasks+0x104>
 8004b8e:	4963      	ldr	r1, [pc, #396]	@ (8004d1c <PCU_Tasks+0x284>)
 8004b90:	4861      	ldr	r0, [pc, #388]	@ (8004d18 <PCU_Tasks+0x280>)
 8004b92:	f00b fc09 	bl	80103a8 <siprintf>
 8004b96:	4860      	ldr	r0, [pc, #384]	@ (8004d18 <PCU_Tasks+0x280>)
 8004b98:	f7fe fdd4 	bl	8003744 <serialOut>
        pack.vcuRequestedState = packStandby;
 8004b9c:	4b57      	ldr	r3, [pc, #348]	@ (8004cfc <PCU_Tasks+0x264>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    for (index =0;index < pack.moduleCount;index++){
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	e0dd      	b.n	8004d66 <PCU_Tasks+0x2ce>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <PCU_Tasks+0x288>)
 8004bae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3308      	adds	r3, #8
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f003 f975 	bl	8007eac <MCU_TicksSinceLastMessage>
 8004bc2:	60b8      	str	r0, [r7, #8]
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8004bca:	d95d      	bls.n	8004c88 <PCU_Tasks+0x1f0>
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	4a54      	ldr	r2, [pc, #336]	@ (8004d20 <PCU_Tasks+0x288>)
 8004bd0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d051      	beq.n	8004c88 <PCU_Tasks+0x1f0>
        if( module[index].faultCode.commsError == false){
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4a4e      	ldr	r2, [pc, #312]	@ (8004d20 <PCU_Tasks+0x288>)
 8004be8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8004bf6:	789b      	ldrb	r3, [r3, #2]
 8004bf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 80ae 	bne.w	8004d60 <PCU_Tasks+0x2c8>
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x",module[index].moduleId ); serialOut(tempBuffer);}
 8004c04:	4b42      	ldr	r3, [pc, #264]	@ (8004d10 <PCU_Tasks+0x278>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d110      	bne.n	8004c32 <PCU_Tasks+0x19a>
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	4a43      	ldr	r2, [pc, #268]	@ (8004d20 <PCU_Tasks+0x288>)
 8004c14:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3308      	adds	r3, #8
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	493f      	ldr	r1, [pc, #252]	@ (8004d24 <PCU_Tasks+0x28c>)
 8004c26:	483c      	ldr	r0, [pc, #240]	@ (8004d18 <PCU_Tasks+0x280>)
 8004c28:	f00b fbbe 	bl	80103a8 <siprintf>
 8004c2c:	483a      	ldr	r0, [pc, #232]	@ (8004d18 <PCU_Tasks+0x280>)
 8004c2e:	f7fe fd89 	bl	8003744 <serialOut>
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 8004c32:	4b32      	ldr	r3, [pc, #200]	@ (8004cfc <PCU_Tasks+0x264>)
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d10d      	bne.n	8004c58 <PCU_Tasks+0x1c0>
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	4a38      	ldr	r2, [pc, #224]	@ (8004d20 <PCU_Tasks+0x288>)
 8004c40:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3327      	adds	r3, #39	@ 0x27
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d102      	bne.n	8004c58 <PCU_Tasks+0x1c0>
            pack.powerStatus.powerStage = stageSelectModule;
 8004c52:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <PCU_Tasks+0x264>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	769a      	strb	r2, [r3, #26]
          module[index].nextState = moduleOff;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	4a31      	ldr	r2, [pc, #196]	@ (8004d20 <PCU_Tasks+0x288>)
 8004c5c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3328      	adds	r3, #40	@ 0x28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d20 <PCU_Tasks+0x288>)
 8004c70:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8004c7e:	7893      	ldrb	r3, [r2, #2]
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	7093      	strb	r3, [r2, #2]
        if( module[index].faultCode.commsError == false){
 8004c86:	e06b      	b.n	8004d60 <PCU_Tasks+0x2c8>
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004c8e:	d94b      	bls.n	8004d28 <PCU_Tasks+0x290>
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	4a23      	ldr	r2, [pc, #140]	@ (8004d20 <PCU_Tasks+0x288>)
 8004c94:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f083 0301 	eor.w	r3, r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d03c      	beq.n	8004d28 <PCU_Tasks+0x290>
        MCU_RequestModuleStatus(module[index].moduleId);
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <PCU_Tasks+0x288>)
 8004cb2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 f807 	bl	8006cd4 <MCU_RequestModuleStatus>
        if(module[index].hardwarePending)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <PCU_Tasks+0x288>)
 8004cca:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d040      	beq.n	8004d60 <PCU_Tasks+0x2c8>
          MCU_RequestHardware(module[index].moduleId);
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8004d20 <PCU_Tasks+0x288>)
 8004ce2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3308      	adds	r3, #8
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fc95 	bl	8006620 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 8004cf6:	e033      	b.n	8004d60 <PCU_Tasks+0x2c8>
 8004cf8:	20000bc0 	.word	0x20000bc0
 8004cfc:	2000a4fc 	.word	0x2000a4fc
 8004d00:	20000bb8 	.word	0x20000bb8
 8004d04:	20000540 	.word	0x20000540
 8004d08:	20000bb6 	.word	0x20000bb6
 8004d0c:	20000bb4 	.word	0x20000bb4
 8004d10:	20000008 	.word	0x20000008
 8004d14:	08014204 	.word	0x08014204
 8004d18:	200009fc 	.word	0x200009fc
 8004d1c:	08014228 	.word	0x08014228
 8004d20:	20000c7c 	.word	0x20000c7c
 8004d24:	0801424c 	.word	0x0801424c
        if(module[index].faultCode.commsError == true){
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4aae      	ldr	r2, [pc, #696]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004d2c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8004d3a:	789b      	ldrb	r3, [r3, #2]
 8004d3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10c      	bne.n	8004d60 <PCU_Tasks+0x2c8>
          module[index].faultCode.commsError  = false;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	4aa6      	ldr	r2, [pc, #664]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004d4a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8004d58:	7893      	ldrb	r3, [r2, #2]
 8004d5a:	f36f 0300 	bfc	r3, #0, #1
 8004d5e:	7093      	strb	r3, [r2, #2]
    for (index =0;index < pack.moduleCount;index++){
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	3301      	adds	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
 8004d66:	4ba0      	ldr	r3, [pc, #640]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004d68:	7d1b      	ldrb	r3, [r3, #20]
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	f4ff af1c 	bcc.w	8004baa <PCU_Tasks+0x112>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8004d72:	4b9d      	ldr	r3, [pc, #628]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d005      	beq.n	8004d88 <PCU_Tasks+0x2f0>
 8004d7c:	4b9a      	ldr	r3, [pc, #616]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	f040 812a 	bne.w	8004fdc <PCU_Tasks+0x544>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8004d88:	4b97      	ldr	r3, [pc, #604]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004d8a:	7e9b      	ldrb	r3, [r3, #26]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 808f 	bne.w	8004eb0 <PCU_Tasks+0x418>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8004d92:	4b96      	ldr	r3, [pc, #600]	@ (8004fec <PCU_Tasks+0x554>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f003 030a 	and.w	r3, r3, #10
 8004d9a:	2b0a      	cmp	r3, #10
 8004d9c:	d115      	bne.n	8004dca <PCU_Tasks+0x332>
 8004d9e:	4b92      	ldr	r3, [pc, #584]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004da0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004da4:	4a92      	ldr	r2, [pc, #584]	@ (8004ff0 <PCU_Tasks+0x558>)
 8004da6:	fba2 1203 	umull	r1, r2, r2, r3
 8004daa:	0b12      	lsrs	r2, r2, #12
 8004dac:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004db0:	fb01 f202 	mul.w	r2, r1, r2
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <PCU_Tasks+0x332>
 8004dbc:	498d      	ldr	r1, [pc, #564]	@ (8004ff4 <PCU_Tasks+0x55c>)
 8004dbe:	488e      	ldr	r0, [pc, #568]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004dc0:	f00b faf2 	bl	80103a8 <siprintf>
 8004dc4:	488c      	ldr	r0, [pc, #560]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004dc6:	f7fe fcbd 	bl	8003744 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8004dca:	f002 f81b 	bl	8006e04 <MCU_FindMaxVoltageModule>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d12f      	bne.n	8004e38 <PCU_Tasks+0x3a0>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8004dd8:	4b84      	ldr	r3, [pc, #528]	@ (8004fec <PCU_Tasks+0x554>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d115      	bne.n	8004e10 <PCU_Tasks+0x378>
 8004de4:	4b80      	ldr	r3, [pc, #512]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004de6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004dea:	4a81      	ldr	r2, [pc, #516]	@ (8004ff0 <PCU_Tasks+0x558>)
 8004dec:	fba2 1203 	umull	r1, r2, r2, r3
 8004df0:	0b12      	lsrs	r2, r2, #12
 8004df2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004df6:	fb01 f202 	mul.w	r2, r1, r2
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <PCU_Tasks+0x378>
 8004e02:	497e      	ldr	r1, [pc, #504]	@ (8004ffc <PCU_Tasks+0x564>)
 8004e04:	487c      	ldr	r0, [pc, #496]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004e06:	f00b facf 	bl	80103a8 <siprintf>
 8004e0a:	487b      	ldr	r0, [pc, #492]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004e0c:	f7fe fc9a 	bl	8003744 <serialOut>
          pack.errorCounts.firstModule ++;
 8004e10:	4b75      	ldr	r3, [pc, #468]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e12:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004e16:	3301      	adds	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	4b73      	ldr	r3, [pc, #460]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8004e20:	4b71      	ldr	r3, [pc, #452]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e22:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004e26:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d940      	bls.n	8004eb0 <PCU_Tasks+0x418>
 8004e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8004e36:	e03b      	b.n	8004eb0 <PCU_Tasks+0x418>
        }else if (moduleId == pack.moduleCount +1 ){
 8004e38:	79fa      	ldrb	r2, [r7, #7]
 8004e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e3c:	7d1b      	ldrb	r3, [r3, #20]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d12f      	bne.n	8004ea4 <PCU_Tasks+0x40c>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8004e44:	4b69      	ldr	r3, [pc, #420]	@ (8004fec <PCU_Tasks+0x554>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d115      	bne.n	8004e7c <PCU_Tasks+0x3e4>
 8004e50:	4b65      	ldr	r3, [pc, #404]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e52:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004e56:	4a66      	ldr	r2, [pc, #408]	@ (8004ff0 <PCU_Tasks+0x558>)
 8004e58:	fba2 1203 	umull	r1, r2, r2, r3
 8004e5c:	0b12      	lsrs	r2, r2, #12
 8004e5e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004e62:	fb01 f202 	mul.w	r2, r1, r2
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <PCU_Tasks+0x3e4>
 8004e6e:	4964      	ldr	r1, [pc, #400]	@ (8005000 <PCU_Tasks+0x568>)
 8004e70:	4861      	ldr	r0, [pc, #388]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004e72:	f00b fa99 	bl	80103a8 <siprintf>
 8004e76:	4860      	ldr	r0, [pc, #384]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004e78:	f7fe fc64 	bl	8003744 <serialOut>
          pack.errorCounts.firstModule ++;
 8004e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e7e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004e82:	3301      	adds	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	4b58      	ldr	r3, [pc, #352]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e88:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8004e8c:	4b56      	ldr	r3, [pc, #344]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e8e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004e92:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d90a      	bls.n	8004eb0 <PCU_Tasks+0x418>
 8004e9a:	4b53      	ldr	r3, [pc, #332]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8004ea2:	e005      	b.n	8004eb0 <PCU_Tasks+0x418>
          pack.powerStatus.firstModuleId = moduleId;
 8004ea4:	4a50      	ldr	r2, [pc, #320]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8004eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8004eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004eb2:	7e9b      	ldrb	r3, [r3, #26]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 8091 	bne.w	8004fdc <PCU_Tasks+0x544>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8004eba:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004ebc:	7e5b      	ldrb	r3, [r3, #25]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f002 ffc0 	bl	8007e44 <MCU_ModuleIndexFromId>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73bb      	strb	r3, [r7, #14]
        if (firstModuleIndex != pack.moduleCount){
 8004ec8:	4b47      	ldr	r3, [pc, #284]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004eca:	7d1b      	ldrb	r3, [r3, #20]
 8004ecc:	7bba      	ldrb	r2, [r7, #14]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d077      	beq.n	8004fc2 <PCU_Tasks+0x52a>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	4a43      	ldr	r2, [pc, #268]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004ed6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8004ee4:	789b      	ldrb	r3, [r3, #2]
 8004ee6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d00e      	beq.n	8004f0e <PCU_Tasks+0x476>
 8004ef0:	7bbb      	ldrb	r3, [r7, #14]
 8004ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004ef4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8004f02:	789b      	ldrb	r3, [r3, #2]
 8004f04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d113      	bne.n	8004f36 <PCU_Tasks+0x49e>
             pack.powerStatus.powerStage = stageSelectModule;
 8004f0e:	4b36      	ldr	r3, [pc, #216]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8004f14:	4b35      	ldr	r3, [pc, #212]	@ (8004fec <PCU_Tasks+0x554>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d15d      	bne.n	8004fdc <PCU_Tasks+0x544>
 8004f20:	4b31      	ldr	r3, [pc, #196]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f22:	7e5b      	ldrb	r3, [r3, #25]
 8004f24:	461a      	mov	r2, r3
 8004f26:	4937      	ldr	r1, [pc, #220]	@ (8005004 <PCU_Tasks+0x56c>)
 8004f28:	4833      	ldr	r0, [pc, #204]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004f2a:	f00b fa3d 	bl	80103a8 <siprintf>
 8004f2e:	4832      	ldr	r0, [pc, #200]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004f30:	f7fe fc08 	bl	8003744 <serialOut>
 8004f34:	e052      	b.n	8004fdc <PCU_Tasks+0x544>
          } else if (pack.vcuRequestedState == packOn){
 8004f36:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d11d      	bne.n	8004f7c <PCU_Tasks+0x4e4>
            if (module[firstModuleIndex].currentState == moduleOn){
 8004f40:	7bbb      	ldrb	r3, [r7, #14]
 8004f42:	4a28      	ldr	r2, [pc, #160]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004f44:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3327      	adds	r3, #39	@ 0x27
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <PCU_Tasks+0x4ce>
              pack.state = packOn;
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f58:	2203      	movs	r2, #3
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8004f5e:	4b22      	ldr	r3, [pc, #136]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f60:	2202      	movs	r2, #2
 8004f62:	769a      	strb	r2, [r3, #26]
 8004f64:	e03a      	b.n	8004fdc <PCU_Tasks+0x544>
                module[firstModuleIndex].nextState = moduleOn;
 8004f66:	7bbb      	ldrb	r3, [r7, #14]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004f6a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	3328      	adds	r3, #40	@ 0x28
 8004f76:	2203      	movs	r2, #3
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e02f      	b.n	8004fdc <PCU_Tasks+0x544>
          } else if (pack.vcuRequestedState == packPrecharge){
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d12a      	bne.n	8004fdc <PCU_Tasks+0x544>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004f8a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3327      	adds	r3, #39	@ 0x27
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d107      	bne.n	8004fac <PCU_Tasks+0x514>
              pack.state = packPrecharge;
 8004f9c:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8004fa4:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <PCU_Tasks+0x550>)
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	769a      	strb	r2, [r3, #26]
 8004faa:	e017      	b.n	8004fdc <PCU_Tasks+0x544>
                module[firstModuleIndex].nextState = modulePrecharge;
 8004fac:	7bbb      	ldrb	r3, [r7, #14]
 8004fae:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <PCU_Tasks+0x54c>)
 8004fb0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3328      	adds	r3, #40	@ 0x28
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	e00c      	b.n	8004fdc <PCU_Tasks+0x544>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <PCU_Tasks+0x554>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d106      	bne.n	8004fdc <PCU_Tasks+0x544>
 8004fce:	490e      	ldr	r1, [pc, #56]	@ (8005008 <PCU_Tasks+0x570>)
 8004fd0:	4809      	ldr	r0, [pc, #36]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004fd2:	f00b f9e9 	bl	80103a8 <siprintf>
 8004fd6:	4808      	ldr	r0, [pc, #32]	@ (8004ff8 <PCU_Tasks+0x560>)
 8004fd8:	f7fe fbb4 	bl	8003744 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e140      	b.n	8005264 <PCU_Tasks+0x7cc>
 8004fe2:	bf00      	nop
 8004fe4:	20000c7c 	.word	0x20000c7c
 8004fe8:	2000a4fc 	.word	0x2000a4fc
 8004fec:	20000008 	.word	0x20000008
 8004ff0:	d1b71759 	.word	0xd1b71759
 8004ff4:	08014270 	.word	0x08014270
 8004ff8:	200009fc 	.word	0x200009fc
 8004ffc:	080142a4 	.word	0x080142a4
 8005000:	080142c8 	.word	0x080142c8
 8005004:	080142ec 	.word	0x080142ec
 8005008:	0801432c 	.word	0x0801432c
      if(module[index].faultCode.overCurrent == true){
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	4aac      	ldr	r2, [pc, #688]	@ (80052c0 <PCU_Tasks+0x828>)
 8005010:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	4413      	add	r3, r2
 800501a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800501e:	789b      	ldrb	r3, [r3, #2]
 8005020:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d127      	bne.n	800507a <PCU_Tasks+0x5e2>
        if (pack.vcuRequestedState != packOff){
 800502a:	4ba6      	ldr	r3, [pc, #664]	@ (80052c4 <PCU_Tasks+0x82c>)
 800502c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <PCU_Tasks+0x5b2>
          module[index].nextState = moduleStandby;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	4aa2      	ldr	r2, [pc, #648]	@ (80052c0 <PCU_Tasks+0x828>)
 8005038:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	3328      	adds	r3, #40	@ 0x28
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e0ad      	b.n	80051a6 <PCU_Tasks+0x70e>
          module[index].nextState = moduleOff;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	4a9c      	ldr	r2, [pc, #624]	@ (80052c0 <PCU_Tasks+0x828>)
 800504e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3328      	adds	r3, #40	@ 0x28
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	4a97      	ldr	r2, [pc, #604]	@ (80052c0 <PCU_Tasks+0x828>)
 8005062:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8005070:	7893      	ldrb	r3, [r2, #2]
 8005072:	f36f 0382 	bfc	r3, #2, #1
 8005076:	7093      	strb	r3, [r2, #2]
 8005078:	e095      	b.n	80051a6 <PCU_Tasks+0x70e>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	4a90      	ldr	r2, [pc, #576]	@ (80052c0 <PCU_Tasks+0x828>)
 800507e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	4413      	add	r3, r2
 8005088:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800508c:	789b      	ldrb	r3, [r3, #2]
 800508e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	f040 8086 	bne.w	80051a6 <PCU_Tasks+0x70e>
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	4a88      	ldr	r2, [pc, #544]	@ (80052c0 <PCU_Tasks+0x828>)
 800509e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80050ac:	789b      	ldrb	r3, [r3, #2]
 80050ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d176      	bne.n	80051a6 <PCU_Tasks+0x70e>
        switch (pack.vcuRequestedState){
 80050b8:	4b82      	ldr	r3, [pc, #520]	@ (80052c4 <PCU_Tasks+0x82c>)
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d870      	bhi.n	80051a4 <PCU_Tasks+0x70c>
 80050c2:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <PCU_Tasks+0x630>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	0800517f 	.word	0x0800517f
 80050cc:	08005159 	.word	0x08005159
 80050d0:	08005129 	.word	0x08005129
 80050d4:	080050d9 	.word	0x080050d9
            if(pack.state == packOn){
 80050d8:	4b7a      	ldr	r3, [pc, #488]	@ (80052c4 <PCU_Tasks+0x82c>)
 80050da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d109      	bne.n	80050f6 <PCU_Tasks+0x65e>
              module[index].nextState = moduleOn;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	4a76      	ldr	r2, [pc, #472]	@ (80052c0 <PCU_Tasks+0x828>)
 80050e6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	3328      	adds	r3, #40	@ 0x28
 80050f2:	2203      	movs	r2, #3
 80050f4:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 80050f6:	4b73      	ldr	r3, [pc, #460]	@ (80052c4 <PCU_Tasks+0x82c>)
 80050f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	d804      	bhi.n	800510a <PCU_Tasks+0x672>
 8005100:	4b70      	ldr	r3, [pc, #448]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8005108:	e04d      	b.n	80051a6 <PCU_Tasks+0x70e>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 800510a:	4b6e      	ldr	r3, [pc, #440]	@ (80052c4 <PCU_Tasks+0x82c>)
 800510c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005110:	2bbe      	cmp	r3, #190	@ 0xbe
 8005112:	d904      	bls.n	800511e <PCU_Tasks+0x686>
 8005114:	4b6b      	ldr	r3, [pc, #428]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005116:	2203      	movs	r2, #3
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 800511c:	e043      	b.n	80051a6 <PCU_Tasks+0x70e>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 800511e:	4b69      	ldr	r3, [pc, #420]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8005126:	e03e      	b.n	80051a6 <PCU_Tasks+0x70e>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8005128:	4b66      	ldr	r3, [pc, #408]	@ (80052c4 <PCU_Tasks+0x82c>)
 800512a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800512e:	2b02      	cmp	r3, #2
 8005130:	d10d      	bne.n	800514e <PCU_Tasks+0x6b6>
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	429a      	cmp	r2, r3
 8005138:	d009      	beq.n	800514e <PCU_Tasks+0x6b6>
              module[index].nextState = moduleStandby;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	4a60      	ldr	r2, [pc, #384]	@ (80052c0 <PCU_Tasks+0x828>)
 800513e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	3328      	adds	r3, #40	@ 0x28
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 800514e:	4b5d      	ldr	r3, [pc, #372]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8005156:	e026      	b.n	80051a6 <PCU_Tasks+0x70e>
            module[index].nextState = moduleStandby;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	4a59      	ldr	r2, [pc, #356]	@ (80052c0 <PCU_Tasks+0x828>)
 800515c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	3328      	adds	r3, #40	@ 0x28
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 800516c:	4b55      	ldr	r3, [pc, #340]	@ (80052c4 <PCU_Tasks+0x82c>)
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8005174:	4b53      	ldr	r3, [pc, #332]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 800517c:	e013      	b.n	80051a6 <PCU_Tasks+0x70e>
            module[index].nextState = moduleOff;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	4a4f      	ldr	r2, [pc, #316]	@ (80052c0 <PCU_Tasks+0x828>)
 8005182:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	3328      	adds	r3, #40	@ 0x28
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 8005192:	4b4c      	ldr	r3, [pc, #304]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 800519a:	4b4a      	ldr	r3, [pc, #296]	@ (80052c4 <PCU_Tasks+0x82c>)
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 80051a2:	e000      	b.n	80051a6 <PCU_Tasks+0x70e>
            break;
 80051a4:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	4a45      	ldr	r2, [pc, #276]	@ (80052c0 <PCU_Tasks+0x828>)
 80051aa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	332a      	adds	r3, #42	@ 0x2a
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d13a      	bne.n	8005232 <PCU_Tasks+0x79a>
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	4a40      	ldr	r2, [pc, #256]	@ (80052c0 <PCU_Tasks+0x828>)
 80051c0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	3329      	adds	r3, #41	@ 0x29
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	493b      	ldr	r1, [pc, #236]	@ (80052c0 <PCU_Tasks+0x828>)
 80051d2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80051d6:	fb00 f303 	mul.w	r3, r0, r3
 80051da:	440b      	add	r3, r1
 80051dc:	3328      	adds	r3, #40	@ 0x28
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d126      	bne.n	8005232 <PCU_Tasks+0x79a>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	4a36      	ldr	r2, [pc, #216]	@ (80052c0 <PCU_Tasks+0x828>)
 80051e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	3308      	adds	r3, #8
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f002 fed0 	bl	8007f9c <MCU_TicksSinceLastStateTx>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005202:	d92c      	bls.n	800525e <PCU_Tasks+0x7c6>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4a2e      	ldr	r2, [pc, #184]	@ (80052c0 <PCU_Tasks+0x828>)
 8005208:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	3308      	adds	r3, #8
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	4929      	ldr	r1, [pc, #164]	@ (80052c0 <PCU_Tasks+0x828>)
 800521a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800521e:	fb00 f303 	mul.w	r3, r0, r3
 8005222:	440b      	add	r3, r1
 8005224:	3328      	adds	r3, #40	@ 0x28
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f002 fc20 	bl	8007a70 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8005230:	e015      	b.n	800525e <PCU_Tasks+0x7c6>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	4a22      	ldr	r2, [pc, #136]	@ (80052c0 <PCU_Tasks+0x828>)
 8005236:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3308      	adds	r3, #8
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	491e      	ldr	r1, [pc, #120]	@ (80052c0 <PCU_Tasks+0x828>)
 8005248:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800524c:	fb00 f303 	mul.w	r3, r0, r3
 8005250:	440b      	add	r3, r1
 8005252:	3328      	adds	r3, #40	@ 0x28
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f002 fc09 	bl	8007a70 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	3301      	adds	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
 8005264:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <PCU_Tasks+0x82c>)
 8005266:	7d1b      	ldrb	r3, [r3, #20]
 8005268:	7bfa      	ldrb	r2, [r7, #15]
 800526a:	429a      	cmp	r2, r3
 800526c:	f4ff aece 	bcc.w	800500c <PCU_Tasks+0x574>
    MCU_UpdateStats();
 8005270:	f000 f8de 	bl	8005430 <MCU_UpdateStats>
    if(sendState > 0){
 8005274:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <PCU_Tasks+0x830>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01c      	beq.n	80052b6 <PCU_Tasks+0x81e>
      if (pack.rtcValid == false) VCU_RequestTime();
 800527c:	4b11      	ldr	r3, [pc, #68]	@ (80052c4 <PCU_Tasks+0x82c>)
 800527e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8005282:	f083 0301 	eor.w	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <PCU_Tasks+0x7f8>
 800528c:	f004 fcbe 	bl	8009c0c <VCU_RequestTime>
      VCU_TransmitBmsState();
 8005290:	f003 fe1e 	bl	8008ed0 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8005294:	f003 ff04 	bl	80090a0 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8005298:	f003 ffe6 	bl	8009268 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 800529c:	f004 f928 	bl	80094f0 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 80052a0:	f004 fa52 	bl	8009748 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 80052a4:	f004 fb70 	bl	8009988 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 80052a8:	f004 fbdc 	bl	8009a64 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 80052ac:	f004 fc48 	bl	8009b40 <VCU_TransmitBmsData10>
      sendState=0;
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <PCU_Tasks+0x830>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000c7c 	.word	0x20000c7c
 80052c4:	2000a4fc 	.word	0x2000a4fc
 80052c8:	20000bbd 	.word	0x20000bbd

080052cc <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fb fe85 	bl	8000fe8 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd f9e4 	bl	80026ae <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	21ff      	movs	r1, #255	@ 0xff
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd fa13 	bl	8002716 <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 80052f0:	484a      	ldr	r0, [pc, #296]	@ (800541c <DRV_CANFDSPI_Init+0x150>)
 80052f2:	f7fc fbf5 	bl	8001ae0 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 80052f6:	4a49      	ldr	r2, [pc, #292]	@ (800541c <DRV_CANFDSPI_Init+0x150>)
 80052f8:	7813      	ldrb	r3, [r2, #0]
 80052fa:	f043 0320 	orr.w	r3, r3, #32
 80052fe:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8005300:	4a46      	ldr	r2, [pc, #280]	@ (800541c <DRV_CANFDSPI_Init+0x150>)
 8005302:	7853      	ldrb	r3, [r2, #1]
 8005304:	f36f 1386 	bfc	r3, #6, #1
 8005308:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4943      	ldr	r1, [pc, #268]	@ (800541c <DRV_CANFDSPI_Init+0x150>)
 800530e:	4618      	mov	r0, r3
 8005310:	f7fc fb58 	bl	80019c4 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8005314:	4842      	ldr	r0, [pc, #264]	@ (8005420 <DRV_CANFDSPI_Init+0x154>)
 8005316:	f7fc fcf3 	bl	8001d00 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 800531a:	4a41      	ldr	r2, [pc, #260]	@ (8005420 <DRV_CANFDSPI_Init+0x154>)
 800531c:	7853      	ldrb	r3, [r2, #1]
 800531e:	2107      	movs	r1, #7
 8005320:	f361 0304 	bfi	r3, r1, #0, #5
 8005324:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 8005326:	4a3e      	ldr	r2, [pc, #248]	@ (8005420 <DRV_CANFDSPI_Init+0x154>)
 8005328:	7853      	ldrb	r3, [r2, #1]
 800532a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800532e:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8005330:	4a3b      	ldr	r2, [pc, #236]	@ (8005420 <DRV_CANFDSPI_Init+0x154>)
 8005332:	7813      	ldrb	r3, [r2, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	f361 0345 	bfi	r3, r1, #1, #5
 800533a:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	4a38      	ldr	r2, [pc, #224]	@ (8005420 <DRV_CANFDSPI_Init+0x154>)
 8005340:	2102      	movs	r1, #2
 8005342:	4618      	mov	r0, r3
 8005344:	f7fc fc84 	bl	8001c50 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8005348:	4836      	ldr	r0, [pc, #216]	@ (8005424 <DRV_CANFDSPI_Init+0x158>)
 800534a:	f7fc ff31 	bl	80021b0 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 800534e:	4a35      	ldr	r2, [pc, #212]	@ (8005424 <DRV_CANFDSPI_Init+0x158>)
 8005350:	7813      	ldrb	r3, [r2, #0]
 8005352:	210f      	movs	r1, #15
 8005354:	f361 0345 	bfi	r3, r1, #1, #5
 8005358:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 800535a:	4a32      	ldr	r2, [pc, #200]	@ (8005424 <DRV_CANFDSPI_Init+0x158>)
 800535c:	8813      	ldrh	r3, [r2, #0]
 800535e:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8005362:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	4a2f      	ldr	r2, [pc, #188]	@ (8005424 <DRV_CANFDSPI_Init+0x158>)
 8005368:	2101      	movs	r1, #1
 800536a:	4618      	mov	r0, r3
 800536c:	f7fc fed4 	bl	8002118 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8005370:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <DRV_CANFDSPI_Init+0x15c>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8005376:	4a2c      	ldr	r2, [pc, #176]	@ (8005428 <DRV_CANFDSPI_Init+0x15c>)
 8005378:	8813      	ldrh	r3, [r2, #0]
 800537a:	f36f 030a 	bfc	r3, #0, #11
 800537e:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8005380:	4a29      	ldr	r2, [pc, #164]	@ (8005428 <DRV_CANFDSPI_Init+0x15c>)
 8005382:	78d3      	ldrb	r3, [r2, #3]
 8005384:	f36f 1386 	bfc	r3, #6, #1
 8005388:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 800538a:	4a27      	ldr	r2, [pc, #156]	@ (8005428 <DRV_CANFDSPI_Init+0x15c>)
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	f36f 23dc 	bfc	r3, #11, #18
 8005392:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	4a24      	ldr	r2, [pc, #144]	@ (8005428 <DRV_CANFDSPI_Init+0x15c>)
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f7fc fe3e 	bl	800201c <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 80053a0:	4b22      	ldr	r3, [pc, #136]	@ (800542c <DRV_CANFDSPI_Init+0x160>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 80053a6:	4a21      	ldr	r2, [pc, #132]	@ (800542c <DRV_CANFDSPI_Init+0x160>)
 80053a8:	8813      	ldrh	r3, [r2, #0]
 80053aa:	f36f 030a 	bfc	r3, #0, #11
 80053ae:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 80053b0:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <DRV_CANFDSPI_Init+0x160>)
 80053b2:	78d3      	ldrb	r3, [r2, #3]
 80053b4:	f36f 1386 	bfc	r3, #6, #1
 80053b8:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 80053ba:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <DRV_CANFDSPI_Init+0x160>)
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	f36f 23dc 	bfc	r3, #11, #18
 80053c2:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	4a19      	ldr	r2, [pc, #100]	@ (800542c <DRV_CANFDSPI_Init+0x160>)
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc fe48 	bl	8002060 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 80053d0:	79f8      	ldrb	r0, [r7, #7]
 80053d2:	2301      	movs	r3, #1
 80053d4:	2201      	movs	r2, #1
 80053d6:	2100      	movs	r1, #0
 80053d8:	f7fc fe66 	bl	80020a8 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 80053dc:	79f8      	ldrb	r0, [r7, #7]
 80053de:	2300      	movs	r3, #0
 80053e0:	2202      	movs	r2, #2
 80053e2:	2101      	movs	r1, #1
 80053e4:	f7fd f9d7 	bl	8002796 <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe f8f0 	bl	80035d4 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2201      	movs	r2, #1
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fd f8d7 	bl	80025ae <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	2103      	movs	r1, #3
 8005404:	4618      	mov	r0, r3
 8005406:	f7fd f826 	bl	8002456 <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f7fc fbe2 	bl	8001bd8 <DRV_CANFDSPI_OperationModeSelect>
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000bc4 	.word	0x20000bc4
 8005420:	20000bc8 	.word	0x20000bc8
 8005424:	20000c1c 	.word	0x20000c1c
 8005428:	20000c20 	.word	0x20000c20
 800542c:	20000c24 	.word	0x20000c24

08005430 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8005430:	b5b0      	push	{r4, r5, r7, lr}
 8005432:	b094      	sub	sp, #80	@ 0x50
 8005434:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint32_t voltage             = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	643b      	str	r3, [r7, #64]	@ 0x40
  float moduleCurrent          = 0;
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float moduleMaxChargeA       = 0;
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8005458:	23ff      	movs	r3, #255	@ 0xff
 800545a:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t lowestSoh           = 255;
 800545c:	23ff      	movs	r3, #255	@ 0xff
 800545e:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint32_t totalAvgCellVolt    = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t highestCellVolt     = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t lowestCellVolt      = 65535;
 8005468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800546c:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint32_t totalAvgCellTemp    = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t highestCellTemp     = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t lowestCellTemp      = 65535;
 8005476:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800547a:	853b      	strh	r3, [r7, #40]	@ 0x28
  float    maxChargeA          = 0;
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
  float    maxDischargeA       = 0;
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80054ac:	e275      	b.n	800599a <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 80054ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054b2:	4a85      	ldr	r2, [pc, #532]	@ (80056c8 <MCU_UpdateStats+0x298>)
 80054b4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80054c2:	789b      	ldrb	r3, [r3, #2]
 80054c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 8260 	bne.w	8005990 <MCU_UpdateStats+0x560>
 80054d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054d4:	4a7c      	ldr	r2, [pc, #496]	@ (80056c8 <MCU_UpdateStats+0x298>)
 80054d6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80054e4:	789b      	ldrb	r3, [r3, #2]
 80054e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f040 824f 	bne.w	8005990 <MCU_UpdateStats+0x560>
 80054f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054f6:	4a74      	ldr	r2, [pc, #464]	@ (80056c8 <MCU_UpdateStats+0x298>)
 80054f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	4413      	add	r3, r2
 8005502:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8005506:	789b      	ldrb	r3, [r3, #2]
 8005508:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	f040 823e 	bne.w	8005990 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 8005514:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005518:	4a6b      	ldr	r2, [pc, #428]	@ (80056c8 <MCU_UpdateStats+0x298>)
 800551a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3327      	adds	r3, #39	@ 0x27
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	f040 8146 	bne.w	80057ba <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 800552e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005532:	4a65      	ldr	r2, [pc, #404]	@ (80056c8 <MCU_UpdateStats+0x298>)
 8005534:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	4413      	add	r3, r2
 800553e:	330e      	adds	r3, #14
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fa ffd6 	bl	80004f4 <__aeabi_i2d>
 8005548:	a359      	add	r3, pc, #356	@ (adr r3, 80056b0 <MCU_UpdateStats+0x280>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f83b 	bl	80005c8 <__aeabi_dmul>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	a357      	add	r3, pc, #348	@ (adr r3, 80056b8 <MCU_UpdateStats+0x288>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fa fe7a 	bl	8000258 <__aeabi_dsub>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	f7fb fb24 	bl	8000bb8 <__aeabi_d2f>
 8005570:	4603      	mov	r3, r0
 8005572:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8005574:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005578:	4a53      	ldr	r2, [pc, #332]	@ (80056c8 <MCU_UpdateStats+0x298>)
 800557a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	3310      	adds	r3, #16
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fa ffb3 	bl	80004f4 <__aeabi_i2d>
 800558e:	a348      	add	r3, pc, #288	@ (adr r3, 80056b0 <MCU_UpdateStats+0x280>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fb f818 	bl	80005c8 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	a345      	add	r3, pc, #276	@ (adr r3, 80056b8 <MCU_UpdateStats+0x288>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fa fe57 	bl	8000258 <__aeabi_dsub>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	f7fb fb01 	bl	8000bb8 <__aeabi_d2f>
 80055b6:	4603      	mov	r3, r0
 80055b8:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 80055ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055be:	4a42      	ldr	r2, [pc, #264]	@ (80056c8 <MCU_UpdateStats+0x298>)
 80055c0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3314      	adds	r3, #20
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d2:	4413      	add	r3, r2
 80055d4:	643b      	str	r3, [r7, #64]	@ 0x40
        //increment module on count
        modulesOn++;
 80055d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80055da:	3301      	adds	r3, #1
 80055dc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 80055e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055e4:	4a38      	ldr	r2, [pc, #224]	@ (80056c8 <MCU_UpdateStats+0x298>)
 80055e6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	3316      	adds	r3, #22
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fa ff7d 	bl	80004f4 <__aeabi_i2d>
 80055fa:	a32d      	add	r3, pc, #180	@ (adr r3, 80056b0 <MCU_UpdateStats+0x280>)
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f7fa ffe2 	bl	80005c8 <__aeabi_dmul>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	a32a      	add	r3, pc, #168	@ (adr r3, 80056b8 <MCU_UpdateStats+0x288>)
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f7fa fe21 	bl	8000258 <__aeabi_dsub>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4610      	mov	r0, r2
 800561c:	4619      	mov	r1, r3
 800561e:	f7fb facb 	bl	8000bb8 <__aeabi_d2f>
 8005622:	4603      	mov	r3, r0
 8005624:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 8005626:	6938      	ldr	r0, [r7, #16]
 8005628:	f7fa ff76 	bl	8000518 <__aeabi_f2d>
 800562c:	a324      	add	r3, pc, #144	@ (adr r3, 80056c0 <MCU_UpdateStats+0x290>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fa fe11 	bl	8000258 <__aeabi_dsub>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4614      	mov	r4, r2
 800563c:	461d      	mov	r5, r3
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7fa ff6a 	bl	8000518 <__aeabi_f2d>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4620      	mov	r0, r4
 800564a:	4629      	mov	r1, r5
 800564c:	f7fb fa4c 	bl	8000ae8 <__aeabi_dcmpgt>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d040      	beq.n	80056d8 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 8005656:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <MCU_UpdateStats+0x298>)
 800565c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800566a:	7893      	ldrb	r3, [r2, #2]
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 8005672:	4b16      	ldr	r3, [pc, #88]	@ (80056cc <MCU_UpdateStats+0x29c>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d16d      	bne.n	800575a <MCU_UpdateStats+0x32a>
 800567e:	6938      	ldr	r0, [r7, #16]
 8005680:	f7fa ff4a 	bl	8000518 <__aeabi_f2d>
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7fa ff45 	bl	8000518 <__aeabi_f2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9cd 2300 	strd	r2, r3, [sp]
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	490d      	ldr	r1, [pc, #52]	@ (80056d0 <MCU_UpdateStats+0x2a0>)
 800569c:	480d      	ldr	r0, [pc, #52]	@ (80056d4 <MCU_UpdateStats+0x2a4>)
 800569e:	f00a fe83 	bl	80103a8 <siprintf>
 80056a2:	480c      	ldr	r0, [pc, #48]	@ (80056d4 <MCU_UpdateStats+0x2a4>)
 80056a4:	f7fe f84e 	bl	8003744 <serialOut>
 80056a8:	e057      	b.n	800575a <MCU_UpdateStats+0x32a>
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w
 80056b0:	47ae147b 	.word	0x47ae147b
 80056b4:	3f947ae1 	.word	0x3f947ae1
 80056b8:	47ae147b 	.word	0x47ae147b
 80056bc:	40847ae1 	.word	0x40847ae1
 80056c0:	33333333 	.word	0x33333333
 80056c4:	3fd33333 	.word	0x3fd33333
 80056c8:	20000c7c 	.word	0x20000c7c
 80056cc:	20000008 	.word	0x20000008
 80056d0:	08014350 	.word	0x08014350
 80056d4:	200009fc 	.word	0x200009fc
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 80056d8:	6938      	ldr	r0, [r7, #16]
 80056da:	f7fa ff1d 	bl	8000518 <__aeabi_f2d>
 80056de:	a3d7      	add	r3, pc, #860	@ (adr r3, 8005a3c <MCU_UpdateStats+0x60c>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f7fa fdba 	bl	800025c <__adddf3>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4614      	mov	r4, r2
 80056ee:	461d      	mov	r5, r3
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f7fa ff11 	bl	8000518 <__aeabi_f2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4620      	mov	r0, r4
 80056fc:	4629      	mov	r1, r5
 80056fe:	f7fb f9d5 	bl	8000aac <__aeabi_dcmplt>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d028      	beq.n	800575a <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 8005708:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800570c:	4ac4      	ldr	r2, [pc, #784]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 800570e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800571c:	7893      	ldrb	r3, [r2, #2]
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 8005724:	4bbf      	ldr	r3, [pc, #764]	@ (8005a24 <MCU_UpdateStats+0x5f4>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b03      	cmp	r3, #3
 800572e:	d114      	bne.n	800575a <MCU_UpdateStats+0x32a>
 8005730:	6938      	ldr	r0, [r7, #16]
 8005732:	f7fa fef1 	bl	8000518 <__aeabi_f2d>
 8005736:	4604      	mov	r4, r0
 8005738:	460d      	mov	r5, r1
 800573a:	68b8      	ldr	r0, [r7, #8]
 800573c:	f7fa feec 	bl	8000518 <__aeabi_f2d>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	e9cd 2300 	strd	r2, r3, [sp]
 8005748:	4622      	mov	r2, r4
 800574a:	462b      	mov	r3, r5
 800574c:	49b6      	ldr	r1, [pc, #728]	@ (8005a28 <MCU_UpdateStats+0x5f8>)
 800574e:	48b7      	ldr	r0, [pc, #732]	@ (8005a2c <MCU_UpdateStats+0x5fc>)
 8005750:	f00a fe2a 	bl	80103a8 <siprintf>
 8005754:	48b5      	ldr	r0, [pc, #724]	@ (8005a2c <MCU_UpdateStats+0x5fc>)
 8005756:	f7fd fff5 	bl	8003744 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 800575a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800575e:	4ab0      	ldr	r2, [pc, #704]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005760:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	4413      	add	r3, r2
 800576a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800576e:	789b      	ldrb	r3, [r3, #2]
 8005770:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 800577a:	4bad      	ldr	r3, [pc, #692]	@ (8005a30 <MCU_UpdateStats+0x600>)
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005780:	2b02      	cmp	r3, #2
 8005782:	d102      	bne.n	800578a <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 8005784:	4baa      	ldr	r3, [pc, #680]	@ (8005a30 <MCU_UpdateStats+0x600>)
 8005786:	2200      	movs	r2, #0
 8005788:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 800578a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800578e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005796:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 800579a:	ed97 7a08 	vldr	s14, [r7, #32]
 800579e:	edd7 7a02 	vldr	s15, [r7, #8]
 80057a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a6:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 80057aa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80057ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80057b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 80057ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80057be:	4a98      	ldr	r2, [pc, #608]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80057c0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	3312      	adds	r3, #18
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 80057d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80057da:	4a91      	ldr	r2, [pc, #580]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80057dc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	4413      	add	r3, r2
 80057e6:	3322      	adds	r3, #34	@ 0x22
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	4413      	add	r3, r2
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 80057f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80057f6:	4a8a      	ldr	r2, [pc, #552]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80057f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	4413      	add	r3, r2
 8005802:	331c      	adds	r3, #28
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	4413      	add	r3, r2
 800580c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 800580e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005812:	4a83      	ldr	r2, [pc, #524]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005814:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	332b      	adds	r3, #43	@ 0x2b
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005826:	4293      	cmp	r3, r2
 8005828:	d90a      	bls.n	8005840 <MCU_UpdateStats+0x410>
 800582a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800582e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005830:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	332b      	adds	r3, #43	@ 0x2b
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8005840:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005844:	4a76      	ldr	r2, [pc, #472]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005846:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	332c      	adds	r3, #44	@ 0x2c
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005858:	4293      	cmp	r3, r2
 800585a:	d90a      	bls.n	8005872 <MCU_UpdateStats+0x442>
 800585c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005860:	4a6f      	ldr	r2, [pc, #444]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005862:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	332c      	adds	r3, #44	@ 0x2c
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	873b      	strh	r3, [r7, #56]	@ 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 8005872:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005876:	4a6a      	ldr	r2, [pc, #424]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005878:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	3320      	adds	r3, #32
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005888:	429a      	cmp	r2, r3
 800588a:	d915      	bls.n	80058b8 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 800588c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005890:	4a63      	ldr	r2, [pc, #396]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005892:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3320      	adds	r3, #32
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	863b      	strh	r3, [r7, #48]	@ 0x30
        modLowestCellVolt = module[index].moduleId;
 80058a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80058a8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	3308      	adds	r3, #8
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 80058b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058bc:	4a58      	ldr	r2, [pc, #352]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80058be:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	331e      	adds	r3, #30
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d215      	bcs.n	80058fe <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 80058d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058d6:	4a52      	ldr	r2, [pc, #328]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80058d8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	331e      	adds	r3, #30
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	867b      	strh	r3, [r7, #50]	@ 0x32
        modHighestCellVolt = module[index].moduleId;
 80058e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058ec:	4a4c      	ldr	r2, [pc, #304]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 80058ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	3308      	adds	r3, #8
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 80058fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005902:	4a47      	ldr	r2, [pc, #284]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005904:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	4413      	add	r3, r2
 800590e:	3318      	adds	r3, #24
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005914:	429a      	cmp	r2, r3
 8005916:	d215      	bcs.n	8005944 <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8005918:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800591c:	4a40      	ldr	r2, [pc, #256]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 800591e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	3318      	adds	r3, #24
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        modHighestCellTemp = module[index].moduleId;
 800592e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005932:	4a3b      	ldr	r2, [pc, #236]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005934:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	3308      	adds	r3, #8
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 8005944:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005948:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 800594a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	331a      	adds	r3, #26
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800595a:	429a      	cmp	r2, r3
 800595c:	d915      	bls.n	800598a <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 800595e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005962:	4a2f      	ldr	r2, [pc, #188]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 8005964:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	4413      	add	r3, r2
 800596e:	331a      	adds	r3, #26
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	853b      	strh	r3, [r7, #40]	@ 0x28
        modLowestCellTemp = module[index].moduleId;
 8005974:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005978:	4a29      	ldr	r2, [pc, #164]	@ (8005a20 <MCU_UpdateStats+0x5f0>)
 800597a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	4413      	add	r3, r2
 8005984:	3308      	adds	r3, #8
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 800598a:	7efb      	ldrb	r3, [r7, #27]
 800598c:	3301      	adds	r3, #1
 800598e:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 8005990:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005994:	3301      	adds	r3, #1
 8005996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800599a:	4b25      	ldr	r3, [pc, #148]	@ (8005a30 <MCU_UpdateStats+0x600>)
 800599c:	7d1b      	ldrb	r3, [r3, #20]
 800599e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80059a2:	429a      	cmp	r2, r3
 80059a4:	f4ff ad83 	bcc.w	80054ae <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 80059a8:	4a21      	ldr	r2, [pc, #132]	@ (8005a30 <MCU_UpdateStats+0x600>)
 80059aa:	7efb      	ldrb	r3, [r7, #27]
 80059ac:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 80059ae:	4b20      	ldr	r3, [pc, #128]	@ (8005a30 <MCU_UpdateStats+0x600>)
 80059b0:	7d1a      	ldrb	r2, [r3, #20]
 80059b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a30 <MCU_UpdateStats+0x600>)
 80059b4:	7ddb      	ldrb	r3, [r3, #23]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005a30 <MCU_UpdateStats+0x600>)
 80059bc:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 80059be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8087 	beq.w	8005ad6 <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 80059c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80059cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	4b16      	ldr	r3, [pc, #88]	@ (8005a30 <MCU_UpdateStats+0x600>)
 80059d6:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80059d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80059dc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005a34 <MCU_UpdateStats+0x604>
 80059e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	dd32      	ble.n	8005a50 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 80059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <MCU_UpdateStats+0x5f4>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d129      	bne.n	8005a4a <MCU_UpdateStats+0x61a>
 80059f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80059f8:	f7fa fd8e 	bl	8000518 <__aeabi_f2d>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	a105      	add	r1, pc, #20	@ (adr r1, 8005a18 <MCU_UpdateStats+0x5e8>)
 8005a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a06:	e9cd 0100 	strd	r0, r1, [sp]
 8005a0a:	490b      	ldr	r1, [pc, #44]	@ (8005a38 <MCU_UpdateStats+0x608>)
 8005a0c:	4807      	ldr	r0, [pc, #28]	@ (8005a2c <MCU_UpdateStats+0x5fc>)
 8005a0e:	f00a fccb 	bl	80103a8 <siprintf>
 8005a12:	e017      	b.n	8005a44 <MCU_UpdateStats+0x614>
 8005a14:	f3af 8000 	nop.w
 8005a18:	00000000 	.word	0x00000000
 8005a1c:	409a3300 	.word	0x409a3300
 8005a20:	20000c7c 	.word	0x20000c7c
 8005a24:	20000008 	.word	0x20000008
 8005a28:	0801439c 	.word	0x0801439c
 8005a2c:	200009fc 	.word	0x200009fc
 8005a30:	2000a4fc 	.word	0x2000a4fc
 8005a34:	44d19800 	.word	0x44d19800
 8005a38:	080143ec 	.word	0x080143ec
 8005a3c:	33333333 	.word	0x33333333
 8005a40:	3fd33333 	.word	0x3fd33333
 8005a44:	48b0      	ldr	r0, [pc, #704]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005a46:	f7fd fe7d 	bl	8003744 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8005a4a:	4bb0      	ldr	r3, [pc, #704]	@ (8005d0c <MCU_UpdateStats+0x8dc>)
 8005a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a4e:	e01e      	b.n	8005a8e <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8005a50:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005a54:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8005d10 <MCU_UpdateStats+0x8e0>
 8005a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a60:	d515      	bpl.n	8005a8e <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8005a62:	4bac      	ldr	r3, [pc, #688]	@ (8005d14 <MCU_UpdateStats+0x8e4>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d10d      	bne.n	8005a8a <MCU_UpdateStats+0x65a>
 8005a6e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a70:	f7fa fd52 	bl	8000518 <__aeabi_f2d>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	49a7      	ldr	r1, [pc, #668]	@ (8005d18 <MCU_UpdateStats+0x8e8>)
 8005a7a:	9100      	str	r1, [sp, #0]
 8005a7c:	49a7      	ldr	r1, [pc, #668]	@ (8005d1c <MCU_UpdateStats+0x8ec>)
 8005a7e:	48a2      	ldr	r0, [pc, #648]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005a80:	f00a fc92 	bl	80103a8 <siprintf>
 8005a84:	48a0      	ldr	r0, [pc, #640]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005a86:	f7fd fe5d 	bl	8003744 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 8005a8a:	4ba5      	ldr	r3, [pc, #660]	@ (8005d20 <MCU_UpdateStats+0x8f0>)
 8005a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8005a8e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a90:	f7fa fd42 	bl	8000518 <__aeabi_f2d>
 8005a94:	a398      	add	r3, pc, #608	@ (adr r3, 8005cf8 <MCU_UpdateStats+0x8c8>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f7fa febf 	bl	800081c <__aeabi_ddiv>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8005d24 <MCU_UpdateStats+0x8f4>)
 8005aac:	f7fa fbd6 	bl	800025c <__adddf3>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7fb f87e 	bl	8000bb8 <__aeabi_d2f>
 8005abc:	4603      	mov	r3, r0
 8005abe:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8005ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac8:	ee17 3a90 	vmov	r3, s15
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b95      	ldr	r3, [pc, #596]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005ad2:	611a      	str	r2, [r3, #16]
 8005ad4:	e00e      	b.n	8005af4 <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 8005ad6:	4b94      	ldr	r3, [pc, #592]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8005adc:	4b93      	ldr	r3, [pc, #588]	@ (8005d2c <MCU_UpdateStats+0x8fc>)
 8005ade:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8005ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae8:	ee17 3a90 	vmov	r3, s15
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b8d      	ldr	r3, [pc, #564]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005af2:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8005af4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005af8:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8005d30 <MCU_UpdateStats+0x900>
 8005afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	dd19      	ble.n	8005b3a <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8005b06:	4b83      	ldr	r3, [pc, #524]	@ (8005d14 <MCU_UpdateStats+0x8e4>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d110      	bne.n	8005b34 <MCU_UpdateStats+0x704>
 8005b12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b14:	f7fa fd00 	bl	8000518 <__aeabi_f2d>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	a178      	add	r1, pc, #480	@ (adr r1, 8005d00 <MCU_UpdateStats+0x8d0>)
 8005b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b22:	e9cd 0100 	strd	r0, r1, [sp]
 8005b26:	4983      	ldr	r1, [pc, #524]	@ (8005d34 <MCU_UpdateStats+0x904>)
 8005b28:	4877      	ldr	r0, [pc, #476]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005b2a:	f00a fc3d 	bl	80103a8 <siprintf>
 8005b2e:	4876      	ldr	r0, [pc, #472]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005b30:	f7fd fe08 	bl	8003744 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8005b34:	4b75      	ldr	r3, [pc, #468]	@ (8005d0c <MCU_UpdateStats+0x8dc>)
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b38:	e01e      	b.n	8005b78 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8005b3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005b3e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005d10 <MCU_UpdateStats+0x8e0>
 8005b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4a:	d515      	bpl.n	8005b78 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8005b4c:	4b71      	ldr	r3, [pc, #452]	@ (8005d14 <MCU_UpdateStats+0x8e4>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d10d      	bne.n	8005b74 <MCU_UpdateStats+0x744>
 8005b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b5a:	f7fa fcdd 	bl	8000518 <__aeabi_f2d>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	496d      	ldr	r1, [pc, #436]	@ (8005d18 <MCU_UpdateStats+0x8e8>)
 8005b64:	9100      	str	r1, [sp, #0]
 8005b66:	4974      	ldr	r1, [pc, #464]	@ (8005d38 <MCU_UpdateStats+0x908>)
 8005b68:	4867      	ldr	r0, [pc, #412]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005b6a:	f00a fc1d 	bl	80103a8 <siprintf>
 8005b6e:	4866      	ldr	r0, [pc, #408]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005b70:	f7fd fde8 	bl	8003744 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8005b74:	4b6a      	ldr	r3, [pc, #424]	@ (8005d20 <MCU_UpdateStats+0x8f0>)
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8005b78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b7a:	f7fa fccd 	bl	8000518 <__aeabi_f2d>
 8005b7e:	a35e      	add	r3, pc, #376	@ (adr r3, 8005cf8 <MCU_UpdateStats+0x8c8>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa fe4a 	bl	800081c <__aeabi_ddiv>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	4b63      	ldr	r3, [pc, #396]	@ (8005d24 <MCU_UpdateStats+0x8f4>)
 8005b96:	f7fa fb61 	bl	800025c <__adddf3>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f7fa ffe9 	bl	8000b78 <__aeabi_d2uiz>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4a5f      	ldr	r2, [pc, #380]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005baa:	6353      	str	r3, [r2, #52]	@ 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8005bac:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bb0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8005d30 <MCU_UpdateStats+0x900>
 8005bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbc:	dd19      	ble.n	8005bf2 <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8005bbe:	4b55      	ldr	r3, [pc, #340]	@ (8005d14 <MCU_UpdateStats+0x8e4>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d110      	bne.n	8005bec <MCU_UpdateStats+0x7bc>
 8005bca:	6a38      	ldr	r0, [r7, #32]
 8005bcc:	f7fa fca4 	bl	8000518 <__aeabi_f2d>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	a14a      	add	r1, pc, #296	@ (adr r1, 8005d00 <MCU_UpdateStats+0x8d0>)
 8005bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bda:	e9cd 0100 	strd	r0, r1, [sp]
 8005bde:	4957      	ldr	r1, [pc, #348]	@ (8005d3c <MCU_UpdateStats+0x90c>)
 8005be0:	4849      	ldr	r0, [pc, #292]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005be2:	f00a fbe1 	bl	80103a8 <siprintf>
 8005be6:	4848      	ldr	r0, [pc, #288]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005be8:	f7fd fdac 	bl	8003744 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8005bec:	4b47      	ldr	r3, [pc, #284]	@ (8005d0c <MCU_UpdateStats+0x8dc>)
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	e01e      	b.n	8005c30 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8005bf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bf6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8005d10 <MCU_UpdateStats+0x8e0>
 8005bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c02:	d515      	bpl.n	8005c30 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8005c04:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <MCU_UpdateStats+0x8e4>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d10d      	bne.n	8005c2c <MCU_UpdateStats+0x7fc>
 8005c10:	6a38      	ldr	r0, [r7, #32]
 8005c12:	f7fa fc81 	bl	8000518 <__aeabi_f2d>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	493f      	ldr	r1, [pc, #252]	@ (8005d18 <MCU_UpdateStats+0x8e8>)
 8005c1c:	9100      	str	r1, [sp, #0]
 8005c1e:	4948      	ldr	r1, [pc, #288]	@ (8005d40 <MCU_UpdateStats+0x910>)
 8005c20:	4839      	ldr	r0, [pc, #228]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005c22:	f00a fbc1 	bl	80103a8 <siprintf>
 8005c26:	4838      	ldr	r0, [pc, #224]	@ (8005d08 <MCU_UpdateStats+0x8d8>)
 8005c28:	f7fd fd8c 	bl	8003744 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8005c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d20 <MCU_UpdateStats+0x8f0>)
 8005c2e:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8005c30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c32:	f7fa fc71 	bl	8000518 <__aeabi_f2d>
 8005c36:	a330      	add	r3, pc, #192	@ (adr r3, 8005cf8 <MCU_UpdateStats+0x8c8>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fdee 	bl	800081c <__aeabi_ddiv>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	4b35      	ldr	r3, [pc, #212]	@ (8005d24 <MCU_UpdateStats+0x8f4>)
 8005c4e:	f7fa fb05 	bl	800025c <__adddf3>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f7fa ff8d 	bl	8000b78 <__aeabi_d2uiz>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4a31      	ldr	r2, [pc, #196]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005c62:	6353      	str	r3, [r2, #52]	@ 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8005c64:	6a38      	ldr	r0, [r7, #32]
 8005c66:	f7fa fc57 	bl	8000518 <__aeabi_f2d>
 8005c6a:	a323      	add	r3, pc, #140	@ (adr r3, 8005cf8 <MCU_UpdateStats+0x8c8>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fdd4 	bl	800081c <__aeabi_ddiv>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	4b28      	ldr	r3, [pc, #160]	@ (8005d24 <MCU_UpdateStats+0x8f4>)
 8005c82:	f7fa faeb 	bl	800025c <__adddf3>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7fa ff73 	bl	8000b78 <__aeabi_d2uiz>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4a24      	ldr	r2, [pc, #144]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005c96:	6393      	str	r3, [r2, #56]	@ 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8005c98:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005c9a:	7ddb      	ldrb	r3, [r3, #23]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <MCU_UpdateStats+0x884>
 8005ca0:	4b21      	ldr	r3, [pc, #132]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005ca2:	7ddb      	ldrb	r3, [r3, #23]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	4b1e      	ldr	r3, [pc, #120]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005cb2:	e002      	b.n	8005cba <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8005cba:	4b1b      	ldr	r3, [pc, #108]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cbc:	7ddb      	ldrb	r3, [r3, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <MCU_UpdateStats+0x8a4>
 8005cc2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005cc4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005cc6:	d805      	bhi.n	8005cd4 <MCU_UpdateStats+0x8a4>
 8005cc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	4b16      	ldr	r3, [pc, #88]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cd2:	e003      	b.n	8005cdc <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 8005cd4:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8005cdc:	4b12      	ldr	r3, [pc, #72]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cde:	7ddb      	ldrb	r3, [r3, #23]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02f      	beq.n	8005d44 <MCU_UpdateStats+0x914>
 8005ce4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ce6:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ce8:	d82c      	bhi.n	8005d44 <MCU_UpdateStats+0x914>
 8005cea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <MCU_UpdateStats+0x8f8>)
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cf4:	e02a      	b.n	8005d4c <MCU_UpdateStats+0x91c>
 8005cf6:	bf00      	nop
 8005cf8:	9999999a 	.word	0x9999999a
 8005cfc:	3fa99999 	.word	0x3fa99999
 8005d00:	00000000 	.word	0x00000000
 8005d04:	409a3300 	.word	0x409a3300
 8005d08:	200009fc 	.word	0x200009fc
 8005d0c:	44d19800 	.word	0x44d19800
 8005d10:	c4c80000 	.word	0xc4c80000
 8005d14:	20000008 	.word	0x20000008
 8005d18:	fffff9c0 	.word	0xfffff9c0
 8005d1c:	08014430 	.word	0x08014430
 8005d20:	c4c80000 	.word	0xc4c80000
 8005d24:	40df4000 	.word	0x40df4000
 8005d28:	2000a4fc 	.word	0x2000a4fc
 8005d2c:	46fa0000 	.word	0x46fa0000
 8005d30:	44d19800 	.word	0x44d19800
 8005d34:	08014474 	.word	0x08014474
 8005d38:	080144bc 	.word	0x080144bc
 8005d3c:	08014504 	.word	0x08014504
 8005d40:	08014550 	.word	0x08014550
  else pack.soh = 0;
 8005d44:	4b2f      	ldr	r3, [pc, #188]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8005d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d4e:	7ddb      	ldrb	r3, [r3, #23]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <MCU_UpdateStats+0x938>
 8005d54:	4b2b      	ldr	r3, [pc, #172]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d56:	7ddb      	ldrb	r3, [r3, #23]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	4b28      	ldr	r3, [pc, #160]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d64:	861a      	strh	r2, [r3, #48]	@ 0x30
 8005d66:	e002      	b.n	8005d6e <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 8005d68:	4b26      	ldr	r3, [pc, #152]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	861a      	strh	r2, [r3, #48]	@ 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8005d6e:	4a25      	ldr	r2, [pc, #148]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005d72:	8513      	strh	r3, [r2, #40]	@ 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8005d74:	4a23      	ldr	r2, [pc, #140]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d76:	7e7b      	ldrb	r3, [r7, #25]
 8005d78:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
  if (lowestCellVolt < 65535){
 8005d7c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d007      	beq.n	8005d96 <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 8005d86:	4a1f      	ldr	r2, [pc, #124]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d8a:	8593      	strh	r3, [r2, #44]	@ 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d8e:	7ebb      	ldrb	r3, [r7, #26]
 8005d90:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8005d94:	e006      	b.n	8005da4 <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 8005d96:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pack.modCellLoVolt = 0;
 8005d9c:	4b19      	ldr	r3, [pc, #100]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8005da4:	4b17      	ldr	r3, [pc, #92]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005da6:	7ddb      	ldrb	r3, [r3, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <MCU_UpdateStats+0x990>
 8005dac:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005dae:	7ddb      	ldrb	r3, [r3, #23]
 8005db0:	461a      	mov	r2, r3
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005dbc:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005dbe:	e002      	b.n	8005dc6 <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8005dc0:	4b10      	ldr	r3, [pc, #64]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	84da      	strh	r2, [r3, #38]	@ 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005dc8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dca:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8005dd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8005dde:	4a09      	ldr	r2, [pc, #36]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005de0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005de2:	8453      	strh	r3, [r2, #34]	@ 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8005de4:	4a07      	ldr	r2, [pc, #28]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005de6:	7e3b      	ldrb	r3, [r7, #24]
 8005de8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8005dec:	e006      	b.n	8005dfc <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8005dee:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	845a      	strh	r2, [r3, #34]	@ 0x22
    pack.modCellLoTemp = 0;
 8005df4:	4b03      	ldr	r3, [pc, #12]	@ (8005e04 <MCU_UpdateStats+0x9d4>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8005dfc:	bf00      	nop
 8005dfe:	3748      	adds	r7, #72	@ 0x48
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bdb0      	pop	{r4, r5, r7, pc}
 8005e04:	2000a4fc 	.word	0x2000a4fc

08005e08 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8005e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0a:	b08b      	sub	sp, #44	@ 0x2c
 8005e0c:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8005e0e:	4a64      	ldr	r2, [pc, #400]	@ (8005fa0 <MCU_ReceiveMessages+0x198>)
 8005e10:	2101      	movs	r1, #1
 8005e12:	2001      	movs	r0, #1
 8005e14:	f7fc fb92 	bl	800253c <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8005e18:	e0b6      	b.n	8005f88 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8005e1a:	2340      	movs	r3, #64	@ 0x40
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4b61      	ldr	r3, [pc, #388]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e20:	4a61      	ldr	r2, [pc, #388]	@ (8005fa8 <MCU_ReceiveMessages+0x1a0>)
 8005e22:	2101      	movs	r1, #1
 8005e24:	2001      	movs	r0, #1
 8005e26:	f7fc f9ed 	bl	8002204 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8005e2a:	4b60      	ldr	r3, [pc, #384]	@ (8005fac <MCU_ReceiveMessages+0x1a4>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f003 030a 	and.w	r3, r3, #10
 8005e32:	2b0a      	cmp	r3, #10
 8005e34:	d133      	bne.n	8005e9e <MCU_ReceiveMessages+0x96>
 8005e36:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa8 <MCU_ReceiveMessages+0x1a0>)
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	469c      	mov	ip, r3
 8005e42:	4b59      	ldr	r3, [pc, #356]	@ (8005fa8 <MCU_ReceiveMessages+0x1a0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8005e4a:	469e      	mov	lr, r3
 8005e4c:	4b55      	ldr	r3, [pc, #340]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	4b54      	ldr	r3, [pc, #336]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4b52      	ldr	r3, [pc, #328]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e5a:	789b      	ldrb	r3, [r3, #2]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	4b51      	ldr	r3, [pc, #324]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e60:	78db      	ldrb	r3, [r3, #3]
 8005e62:	461c      	mov	r4, r3
 8005e64:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e66:	791b      	ldrb	r3, [r3, #4]
 8005e68:	461d      	mov	r5, r3
 8005e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	461e      	mov	r6, r3
 8005e70:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e72:	799b      	ldrb	r3, [r3, #6]
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005e78:	79db      	ldrb	r3, [r3, #7]
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	9306      	str	r3, [sp, #24]
 8005e80:	9605      	str	r6, [sp, #20]
 8005e82:	9504      	str	r5, [sp, #16]
 8005e84:	9403      	str	r4, [sp, #12]
 8005e86:	9002      	str	r0, [sp, #8]
 8005e88:	9101      	str	r1, [sp, #4]
 8005e8a:	9200      	str	r2, [sp, #0]
 8005e8c:	4673      	mov	r3, lr
 8005e8e:	4662      	mov	r2, ip
 8005e90:	4947      	ldr	r1, [pc, #284]	@ (8005fb0 <MCU_ReceiveMessages+0x1a8>)
 8005e92:	4848      	ldr	r0, [pc, #288]	@ (8005fb4 <MCU_ReceiveMessages+0x1ac>)
 8005e94:	f00a fa88 	bl	80103a8 <siprintf>
 8005e98:	4846      	ldr	r0, [pc, #280]	@ (8005fb4 <MCU_ReceiveMessages+0x1ac>)
 8005e9a:	f7fd fc53 	bl	8003744 <serialOut>

    switch (rxObj.bF.id.SID) {
 8005e9e:	4b42      	ldr	r3, [pc, #264]	@ (8005fa8 <MCU_ReceiveMessages+0x1a0>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8005eac:	2b07      	cmp	r3, #7
 8005eae:	d82b      	bhi.n	8005f08 <MCU_ReceiveMessages+0x100>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <MCU_ReceiveMessages+0xb0>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ed9 	.word	0x08005ed9
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005eeb 	.word	0x08005eeb
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	08005ef7 	.word	0x08005ef7
 8005ecc:	08005edf 	.word	0x08005edf
 8005ed0:	08005efd 	.word	0x08005efd
 8005ed4:	08005f03 	.word	0x08005f03
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8005ed8:	f000 f8ce 	bl	8006078 <MCU_RegisterModule>
        break;
 8005edc:	e04f      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8005ede:	f001 fe89 	bl	8007bf4 <MCU_ProcessCellDetail>
        break;
 8005ee2:	e04c      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8005ee4:	f000 fc34 	bl	8006750 <MCU_ProcessModuleHardware>
        break;
 8005ee8:	e049      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8005eea:	f001 f805 	bl	8006ef8 <MCU_ProcessModuleStatus1>
        break;
 8005eee:	e046      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8005ef0:	f001 fa8a 	bl	8007408 <MCU_ProcessModuleStatus2>
        break;
 8005ef4:	e043      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8005ef6:	f001 fbfb 	bl	80076f0 <MCU_ProcessModuleStatus3>
        break;
 8005efa:	e040      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8005efc:	f000 fb16 	bl	800652c <MCU_ProcessModuleTime>
        break;
 8005f00:	e03d      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8005f02:	f001 fd31 	bl	8007968 <MCU_ProcessCellCommStatus1>
        break;
 8005f06:	e03a      	b.n	8005f7e <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8005f08:	4b28      	ldr	r3, [pc, #160]	@ (8005fac <MCU_ReceiveMessages+0x1a4>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d133      	bne.n	8005f7c <MCU_ReceiveMessages+0x174>
 8005f14:	4b24      	ldr	r3, [pc, #144]	@ (8005fa8 <MCU_ReceiveMessages+0x1a0>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	469c      	mov	ip, r3
 8005f20:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <MCU_ReceiveMessages+0x1a0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	4619      	mov	r1, r3
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f38:	789b      	ldrb	r3, [r3, #2]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	4b19      	ldr	r3, [pc, #100]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f3e:	78db      	ldrb	r3, [r3, #3]
 8005f40:	461c      	mov	r4, r3
 8005f42:	4b18      	ldr	r3, [pc, #96]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f44:	791b      	ldrb	r3, [r3, #4]
 8005f46:	461d      	mov	r5, r3
 8005f48:	4b16      	ldr	r3, [pc, #88]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f4a:	795b      	ldrb	r3, [r3, #5]
 8005f4c:	461e      	mov	r6, r3
 8005f4e:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f50:	799b      	ldrb	r3, [r3, #6]
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <MCU_ReceiveMessages+0x19c>)
 8005f56:	79db      	ldrb	r3, [r3, #7]
 8005f58:	9307      	str	r3, [sp, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	9306      	str	r3, [sp, #24]
 8005f5e:	9605      	str	r6, [sp, #20]
 8005f60:	9504      	str	r5, [sp, #16]
 8005f62:	9403      	str	r4, [sp, #12]
 8005f64:	9002      	str	r0, [sp, #8]
 8005f66:	9101      	str	r1, [sp, #4]
 8005f68:	9200      	str	r2, [sp, #0]
 8005f6a:	4673      	mov	r3, lr
 8005f6c:	4662      	mov	r2, ip
 8005f6e:	4912      	ldr	r1, [pc, #72]	@ (8005fb8 <MCU_ReceiveMessages+0x1b0>)
 8005f70:	4810      	ldr	r0, [pc, #64]	@ (8005fb4 <MCU_ReceiveMessages+0x1ac>)
 8005f72:	f00a fa19 	bl	80103a8 <siprintf>
 8005f76:	480f      	ldr	r0, [pc, #60]	@ (8005fb4 <MCU_ReceiveMessages+0x1ac>)
 8005f78:	f7fd fbe4 	bl	8003744 <serialOut>
        break;
 8005f7c:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8005f7e:	4a08      	ldr	r2, [pc, #32]	@ (8005fa0 <MCU_ReceiveMessages+0x198>)
 8005f80:	2101      	movs	r1, #1
 8005f82:	2001      	movs	r0, #1
 8005f84:	f7fc fada 	bl	800253c <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <MCU_ReceiveMessages+0x198>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f af42 	bne.w	8005e1a <MCU_ReceiveMessages+0x12>
  }
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa0:	20000c28 	.word	0x20000c28
 8005fa4:	20000c38 	.word	0x20000c38
 8005fa8:	20000c2c 	.word	0x20000c2c
 8005fac:	20000008 	.word	0x20000008
 8005fb0:	08014598 	.word	0x08014598
 8005fb4:	200009fc 	.word	0x200009fc
 8005fb8:	080145fc 	.word	0x080145fc

08005fbc <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8005fc6:	2332      	movs	r3, #50	@ 0x32
 8005fc8:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	4a21      	ldr	r2, [pc, #132]	@ (8006054 <MCU_TransmitMessageQueue+0x98>)
 8005fce:	2102      	movs	r1, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fc fa80 	bl	80024d6 <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11a      	bne.n	8006012 <MCU_TransmitMessageQueue+0x56>
        Nop();
 8005fdc:	bf00      	nop
        Nop();
 8005fde:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8005fe0:	79f8      	ldrb	r0, [r7, #7]
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <MCU_TransmitMessageQueue+0x9c>)
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800605c <MCU_TransmitMessageQueue+0xa0>)
 8005fe6:	491e      	ldr	r1, [pc, #120]	@ (8006060 <MCU_TransmitMessageQueue+0xa4>)
 8005fe8:	f7fc fb2f 	bl	800264a <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8005fec:	4b1d      	ldr	r3, [pc, #116]	@ (8006064 <MCU_TransmitMessageQueue+0xa8>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d106      	bne.n	8006006 <MCU_TransmitMessageQueue+0x4a>
 8005ff8:	491b      	ldr	r1, [pc, #108]	@ (8006068 <MCU_TransmitMessageQueue+0xac>)
 8005ffa:	481c      	ldr	r0, [pc, #112]	@ (800606c <MCU_TransmitMessageQueue+0xb0>)
 8005ffc:	f00a f9d4 	bl	80103a8 <siprintf>
 8006000:	481a      	ldr	r0, [pc, #104]	@ (800606c <MCU_TransmitMessageQueue+0xb0>)
 8006002:	f7fd fb9f 	bl	8003744 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	2102      	movs	r1, #2
 800600a:	4618      	mov	r0, r3
 800600c:	f7fb ffa6 	bl	8001f5c <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8006010:	e01c      	b.n	800604c <MCU_TransmitMessageQueue+0x90>
      }
      attempts--;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	3b01      	subs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8006018:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <MCU_TransmitMessageQueue+0x98>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0d2      	beq.n	8005fca <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8006024:	4b12      	ldr	r3, [pc, #72]	@ (8006070 <MCU_TransmitMessageQueue+0xb4>)
 8006026:	791b      	ldrb	r3, [r3, #4]
 8006028:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fb18 	bl	8003664 <DRV_CANFDSPI_DlcToDataBytes>
 8006034:	4603      	mov	r3, r0
 8006036:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	79f8      	ldrb	r0, [r7, #7]
 800603c:	2201      	movs	r2, #1
 800603e:	9201      	str	r2, [sp, #4]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <MCU_TransmitMessageQueue+0xb8>)
 8006044:	4a0a      	ldr	r2, [pc, #40]	@ (8006070 <MCU_TransmitMessageQueue+0xb4>)
 8006046:	2102      	movs	r1, #2
 8006048:	f7fb fe96 	bl	8001d78 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000bcc 	.word	0x20000bcc
 8006058:	20000c7b 	.word	0x20000c7b
 800605c:	20000c7a 	.word	0x20000c7a
 8006060:	20000c79 	.word	0x20000c79
 8006064:	20000008 	.word	0x20000008
 8006068:	08014668 	.word	0x08014668
 800606c:	200009fc 	.word	0x200009fc
 8006070:	20000bd0 	.word	0x20000bd0
 8006074:	20000bdc 	.word	0x20000bdc

08006078 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b08b      	sub	sp, #44	@ 0x2c
 800607c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 8006082:	4a12      	ldr	r2, [pc, #72]	@ (80060cc <MCU_RegisterModule+0x54>)
 8006084:	f107 030c 	add.w	r3, r7, #12
 8006088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800608c:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 8006090:	4b0f      	ldr	r3, [pc, #60]	@ (80060d0 <MCU_RegisterModule+0x58>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d010      	beq.n	80060be <MCU_RegisterModule+0x46>
 800609c:	89bb      	ldrh	r3, [r7, #12]
 800609e:	4619      	mov	r1, r3
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	4618      	mov	r0, r3
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	460a      	mov	r2, r1
 80060b0:	4908      	ldr	r1, [pc, #32]	@ (80060d4 <MCU_RegisterModule+0x5c>)
 80060b2:	4809      	ldr	r0, [pc, #36]	@ (80060d8 <MCU_RegisterModule+0x60>)
 80060b4:	f00a f978 	bl	80103a8 <siprintf>
 80060b8:	4807      	ldr	r0, [pc, #28]	@ (80060d8 <MCU_RegisterModule+0x60>)
 80060ba:	f7fd fb43 	bl	8003744 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 80060be:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <MCU_RegisterModule+0x64>)
 80060c0:	7d1b      	ldrb	r3, [r3, #20]
 80060c2:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80060c4:	2300      	movs	r3, #0
 80060c6:	75bb      	strb	r3, [r7, #22]
 80060c8:	e06f      	b.n	80061aa <MCU_RegisterModule+0x132>
 80060ca:	bf00      	nop
 80060cc:	20000c38 	.word	0x20000c38
 80060d0:	20000008 	.word	0x20000008
 80060d4:	08014698 	.word	0x08014698
 80060d8:	200009fc 	.word	0x200009fc
 80060dc:	2000a4fc 	.word	0x2000a4fc
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 80060e0:	7bba      	ldrb	r2, [r7, #14]
 80060e2:	7dbb      	ldrb	r3, [r7, #22]
 80060e4:	49b4      	ldr	r1, [pc, #720]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80060e6:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80060ea:	fb00 f303 	mul.w	r3, r0, r3
 80060ee:	440b      	add	r3, r1
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d156      	bne.n	80061a4 <MCU_RegisterModule+0x12c>
 80060f6:	7bfa      	ldrb	r2, [r7, #15]
 80060f8:	7dbb      	ldrb	r3, [r7, #22]
 80060fa:	49af      	ldr	r1, [pc, #700]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80060fc:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006100:	fb00 f303 	mul.w	r3, r0, r3
 8006104:	440b      	add	r3, r1
 8006106:	3301      	adds	r3, #1
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d14a      	bne.n	80061a4 <MCU_RegisterModule+0x12c>
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	7dbb      	ldrb	r3, [r7, #22]
 8006112:	49a9      	ldr	r1, [pc, #676]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006114:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006118:	fb00 f303 	mul.w	r3, r0, r3
 800611c:	440b      	add	r3, r1
 800611e:	3304      	adds	r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d13e      	bne.n	80061a4 <MCU_RegisterModule+0x12c>
      moduleIndex = index; // module is already registered, save the index
 8006126:	7dbb      	ldrb	r3, [r7, #22]
 8006128:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	4aa2      	ldr	r2, [pc, #648]	@ (80063b8 <MCU_RegisterModule+0x340>)
 800612e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800613c:	7893      	ldrb	r3, [r2, #2]
 800613e:	f36f 0300 	bfc	r3, #0, #1
 8006142:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8006144:	4b9d      	ldr	r3, [pc, #628]	@ (80063bc <MCU_RegisterModule+0x344>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800614c:	499a      	ldr	r1, [pc, #616]	@ (80063b8 <MCU_RegisterModule+0x340>)
 800614e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006152:	fb00 f303 	mul.w	r3, r0, r3
 8006156:	440b      	add	r3, r1
 8006158:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800615c:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	4a97      	ldr	r2, [pc, #604]	@ (80063c0 <MCU_RegisterModule+0x348>)
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	4994      	ldr	r1, [pc, #592]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006166:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800616a:	fb00 f303 	mul.w	r3, r0, r3
 800616e:	440b      	add	r3, r1
 8006170:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8006174:	601a      	str	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 8006176:	4b93      	ldr	r3, [pc, #588]	@ (80063c4 <MCU_RegisterModule+0x34c>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	2b03      	cmp	r3, #3
 8006180:	d110      	bne.n	80061a4 <MCU_RegisterModule+0x12c>
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	4a8c      	ldr	r2, [pc, #560]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006186:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	3308      	adds	r3, #8
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	498c      	ldr	r1, [pc, #560]	@ (80063c8 <MCU_RegisterModule+0x350>)
 8006198:	488c      	ldr	r0, [pc, #560]	@ (80063cc <MCU_RegisterModule+0x354>)
 800619a:	f00a f905 	bl	80103a8 <siprintf>
 800619e:	488b      	ldr	r0, [pc, #556]	@ (80063cc <MCU_RegisterModule+0x354>)
 80061a0:	f7fd fad0 	bl	8003744 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 80061a4:	7dbb      	ldrb	r3, [r7, #22]
 80061a6:	3301      	adds	r3, #1
 80061a8:	75bb      	strb	r3, [r7, #22]
 80061aa:	4b89      	ldr	r3, [pc, #548]	@ (80063d0 <MCU_RegisterModule+0x358>)
 80061ac:	7d1b      	ldrb	r3, [r3, #20]
 80061ae:	7dba      	ldrb	r2, [r7, #22]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d395      	bcc.n	80060e0 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 80061b4:	4b86      	ldr	r3, [pc, #536]	@ (80063d0 <MCU_RegisterModule+0x358>)
 80061b6:	7d1b      	ldrb	r3, [r3, #20]
 80061b8:	7dfa      	ldrb	r2, [r7, #23]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d15f      	bne.n	800627e <MCU_RegisterModule+0x206>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	89b8      	ldrh	r0, [r7, #12]
 80061c2:	4a7d      	ldr	r2, [pc, #500]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80061c4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	330a      	adds	r3, #10
 80061d0:	4602      	mov	r2, r0
 80061d2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	7bf8      	ldrb	r0, [r7, #15]
 80061d8:	4a77      	ldr	r2, [pc, #476]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80061da:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	4413      	add	r3, r2
 80061e4:	3301      	adds	r3, #1
 80061e6:	4602      	mov	r2, r0
 80061e8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	7bb8      	ldrb	r0, [r7, #14]
 80061ee:	4a72      	ldr	r2, [pc, #456]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80061f0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	4602      	mov	r2, r0
 80061fc:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	496d      	ldr	r1, [pc, #436]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006204:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006208:	fb00 f303 	mul.w	r3, r0, r3
 800620c:	440b      	add	r3, r1
 800620e:	3304      	adds	r3, #4
 8006210:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8006212:	4b6a      	ldr	r3, [pc, #424]	@ (80063bc <MCU_RegisterModule+0x344>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800621a:	4967      	ldr	r1, [pc, #412]	@ (80063b8 <MCU_RegisterModule+0x340>)
 800621c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006220:	fb00 f303 	mul.w	r3, r0, r3
 8006224:	440b      	add	r3, r1
 8006226:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800622a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	4a64      	ldr	r2, [pc, #400]	@ (80063c0 <MCU_RegisterModule+0x348>)
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	4961      	ldr	r1, [pc, #388]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006234:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006238:	fb00 f303 	mul.w	r3, r0, r3
 800623c:	440b      	add	r3, r1
 800623e:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8006242:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	4a5c      	ldr	r2, [pc, #368]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006248:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	4413      	add	r3, r2
 8006252:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 800625a:	4b5d      	ldr	r3, [pc, #372]	@ (80063d0 <MCU_RegisterModule+0x358>)
 800625c:	7d1b      	ldrb	r3, [r3, #20]
 800625e:	3301      	adds	r3, #1
 8006260:	b2da      	uxtb	r2, r3
 8006262:	4b5b      	ldr	r3, [pc, #364]	@ (80063d0 <MCU_RegisterModule+0x358>)
 8006264:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	4a59      	ldr	r2, [pc, #356]	@ (80063d0 <MCU_RegisterModule+0x358>)
 800626a:	7d10      	ldrb	r0, [r2, #20]
 800626c:	4a52      	ldr	r2, [pc, #328]	@ (80063b8 <MCU_RegisterModule+0x340>)
 800626e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	3308      	adds	r3, #8
 800627a:	4602      	mov	r2, r0
 800627c:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	4a4d      	ldr	r2, [pc, #308]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006282:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	4413      	add	r3, r2
 800628c:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	4a48      	ldr	r2, [pc, #288]	@ (80063b8 <MCU_RegisterModule+0x340>)
 8006298:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	4a42      	ldr	r2, [pc, #264]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80062ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80062b2:	fb01 f303 	mul.w	r3, r1, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	3308      	adds	r3, #8
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = CONTROLLER_ID;
 80062be:	2301      	movs	r3, #1
 80062c0:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	4a3c      	ldr	r2, [pc, #240]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80062c6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	3301      	adds	r3, #1
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	4a37      	ldr	r2, [pc, #220]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80062da:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	4a33      	ldr	r2, [pc, #204]	@ (80063b8 <MCU_RegisterModule+0x340>)
 80062ec:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	4413      	add	r3, r2
 80062f6:	3304      	adds	r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 80062fc:	4b35      	ldr	r3, [pc, #212]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8006302:	4b34      	ldr	r3, [pc, #208]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8006308:	4b32      	ldr	r3, [pc, #200]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 800630a:	2200      	movs	r2, #0
 800630c:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 800630e:	4b32      	ldr	r3, [pc, #200]	@ (80063d8 <MCU_RegisterModule+0x360>)
 8006310:	461a      	mov	r2, r3
 8006312:	1d3b      	adds	r3, r7, #4
 8006314:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006318:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 800631c:	4a2d      	ldr	r2, [pc, #180]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 800631e:	8813      	ldrh	r3, [r2, #0]
 8006320:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8006324:	f361 030a 	bfi	r3, r1, #0, #11
 8006328:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	4a22      	ldr	r2, [pc, #136]	@ (80063b8 <MCU_RegisterModule+0x340>)
 800632e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	4413      	add	r3, r2
 8006338:	3308      	adds	r3, #8
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8006342:	4924      	ldr	r1, [pc, #144]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 8006344:	680b      	ldr	r3, [r1, #0]
 8006346:	f362 23dc 	bfi	r3, r2, #11, #18
 800634a:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800634c:	4a21      	ldr	r2, [pc, #132]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 800634e:	7913      	ldrb	r3, [r2, #4]
 8006350:	f36f 1386 	bfc	r3, #6, #1
 8006354:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8006356:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 8006358:	7913      	ldrb	r3, [r2, #4]
 800635a:	2108      	movs	r1, #8
 800635c:	f361 0303 	bfi	r3, r1, #0, #4
 8006360:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8006362:	4a1c      	ldr	r2, [pc, #112]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 8006364:	7913      	ldrb	r3, [r2, #4]
 8006366:	f36f 13c7 	bfc	r3, #7, #1
 800636a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800636c:	4a19      	ldr	r2, [pc, #100]	@ (80063d4 <MCU_RegisterModule+0x35c>)
 800636e:	7913      	ldrb	r3, [r2, #4]
 8006370:	f043 0310 	orr.w	r3, r3, #16
 8006374:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8006376:	4b13      	ldr	r3, [pc, #76]	@ (80063c4 <MCU_RegisterModule+0x34c>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <MCU_RegisterModule+0x330>
 8006382:	793b      	ldrb	r3, [r7, #4]
 8006384:	4618      	mov	r0, r3
 8006386:	797b      	ldrb	r3, [r7, #5]
 8006388:	461c      	mov	r4, r3
 800638a:	79bb      	ldrb	r3, [r7, #6]
 800638c:	79fa      	ldrb	r2, [r7, #7]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	9102      	str	r1, [sp, #8]
 8006392:	9201      	str	r2, [sp, #4]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4623      	mov	r3, r4
 8006398:	4602      	mov	r2, r0
 800639a:	4910      	ldr	r1, [pc, #64]	@ (80063dc <MCU_RegisterModule+0x364>)
 800639c:	480b      	ldr	r0, [pc, #44]	@ (80063cc <MCU_RegisterModule+0x354>)
 800639e:	f00a f803 	bl	80103a8 <siprintf>
 80063a2:	480a      	ldr	r0, [pc, #40]	@ (80063cc <MCU_RegisterModule+0x354>)
 80063a4:	f7fd f9ce 	bl	8003744 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80063a8:	2001      	movs	r0, #1
 80063aa:	f7ff fe07 	bl	8005fbc <MCU_TransmitMessageQueue>
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd90      	pop	{r4, r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000c7c 	.word	0x20000c7c
 80063bc:	20000540 	.word	0x20000540
 80063c0:	20000bb8 	.word	0x20000bb8
 80063c4:	20000008 	.word	0x20000008
 80063c8:	080146d8 	.word	0x080146d8
 80063cc:	200009fc 	.word	0x200009fc
 80063d0:	2000a4fc 	.word	0x2000a4fc
 80063d4:	20000bd0 	.word	0x20000bd0
 80063d8:	20000bdc 	.word	0x20000bdc
 80063dc:	0801470c 	.word	0x0801470c

080063e0 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = CONTROLLER_ID;
 80063e6:	2301      	movs	r3, #1
 80063e8:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 80063ea:	4b20      	ldr	r3, [pc, #128]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80063f0:	4b1e      	ldr	r3, [pc, #120]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80063f6:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 80063fc:	793a      	ldrb	r2, [r7, #4]
 80063fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006470 <MCU_DeRegisterAllModules+0x90>)
 8006400:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8006402:	4a1a      	ldr	r2, [pc, #104]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 8006404:	8813      	ldrh	r3, [r2, #0]
 8006406:	f240 511e 	movw	r1, #1310	@ 0x51e
 800640a:	f361 030a 	bfi	r3, r1, #0, #11
 800640e:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 8006410:	4a16      	ldr	r2, [pc, #88]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	f36f 23dc 	bfc	r3, #11, #18
 8006418:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800641a:	4a14      	ldr	r2, [pc, #80]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 800641c:	7913      	ldrb	r3, [r2, #4]
 800641e:	f36f 1386 	bfc	r3, #6, #1
 8006422:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8006424:	4a11      	ldr	r2, [pc, #68]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 8006426:	7913      	ldrb	r3, [r2, #4]
 8006428:	2101      	movs	r1, #1
 800642a:	f361 0303 	bfi	r3, r1, #0, #4
 800642e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8006430:	4a0e      	ldr	r2, [pc, #56]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 8006432:	7913      	ldrb	r3, [r2, #4]
 8006434:	f36f 13c7 	bfc	r3, #7, #1
 8006438:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800643a:	4a0c      	ldr	r2, [pc, #48]	@ (800646c <MCU_DeRegisterAllModules+0x8c>)
 800643c:	7913      	ldrb	r3, [r2, #4]
 800643e:	f043 0310 	orr.w	r3, r3, #16
 8006442:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 8006444:	4b0b      	ldr	r3, [pc, #44]	@ (8006474 <MCU_DeRegisterAllModules+0x94>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d006      	beq.n	800645e <MCU_DeRegisterAllModules+0x7e>
 8006450:	4909      	ldr	r1, [pc, #36]	@ (8006478 <MCU_DeRegisterAllModules+0x98>)
 8006452:	480a      	ldr	r0, [pc, #40]	@ (800647c <MCU_DeRegisterAllModules+0x9c>)
 8006454:	f009 ffa8 	bl	80103a8 <siprintf>
 8006458:	4808      	ldr	r0, [pc, #32]	@ (800647c <MCU_DeRegisterAllModules+0x9c>)
 800645a:	f7fd f973 	bl	8003744 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800645e:	2001      	movs	r0, #1
 8006460:	f7ff fdac 	bl	8005fbc <MCU_TransmitMessageQueue>
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000bd0 	.word	0x20000bd0
 8006470:	20000bdc 	.word	0x20000bdc
 8006474:	20000008 	.word	0x20000008
 8006478:	08014758 	.word	0x08014758
 800647c:	200009fc 	.word	0x200009fc

08006480 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8006486:	1d3b      	adds	r3, r7, #4
 8006488:	2201      	movs	r2, #1
 800648a:	2100      	movs	r1, #0
 800648c:	4618      	mov	r0, r3
 800648e:	f009 fff0 	bl	8010472 <memset>

  // configure the packet
  isolate.controllerId = CONTROLLER_ID;
 8006492:	2301      	movs	r3, #1
 8006494:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8006496:	4b20      	ldr	r3, [pc, #128]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800649c:	4b1e      	ldr	r3, [pc, #120]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80064a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	609a      	str	r2, [r3, #8]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 80064a8:	793a      	ldrb	r2, [r7, #4]
 80064aa:	4b1c      	ldr	r3, [pc, #112]	@ (800651c <MCU_IsolateAllModules+0x9c>)
 80064ac:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 80064ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064b0:	8813      	ldrh	r3, [r2, #0]
 80064b2:	f240 511f 	movw	r1, #1311	@ 0x51f
 80064b6:	f361 030a 	bfi	r3, r1, #0, #11
 80064ba:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 80064bc:	4a16      	ldr	r2, [pc, #88]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	f36f 23dc 	bfc	r3, #11, #18
 80064c4:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80064c6:	4a14      	ldr	r2, [pc, #80]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064c8:	7913      	ldrb	r3, [r2, #4]
 80064ca:	f36f 1386 	bfc	r3, #6, #1
 80064ce:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 80064d0:	4a11      	ldr	r2, [pc, #68]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064d2:	7913      	ldrb	r3, [r2, #4]
 80064d4:	2101      	movs	r1, #1
 80064d6:	f361 0303 	bfi	r3, r1, #0, #4
 80064da:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80064dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064de:	7913      	ldrb	r3, [r2, #4]
 80064e0:	f36f 13c7 	bfc	r3, #7, #1
 80064e4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80064e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006518 <MCU_IsolateAllModules+0x98>)
 80064e8:	7913      	ldrb	r3, [r2, #4]
 80064ea:	f043 0310 	orr.w	r3, r3, #16
 80064ee:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <MCU_IsolateAllModules+0xa0>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <MCU_IsolateAllModules+0x8a>
 80064fc:	4909      	ldr	r1, [pc, #36]	@ (8006524 <MCU_IsolateAllModules+0xa4>)
 80064fe:	480a      	ldr	r0, [pc, #40]	@ (8006528 <MCU_IsolateAllModules+0xa8>)
 8006500:	f009 ff52 	bl	80103a8 <siprintf>
 8006504:	4808      	ldr	r0, [pc, #32]	@ (8006528 <MCU_IsolateAllModules+0xa8>)
 8006506:	f7fd f91d 	bl	8003744 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 800650a:	2001      	movs	r0, #1
 800650c:	f7ff fd56 	bl	8005fbc <MCU_TransmitMessageQueue>
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000bd0 	.word	0x20000bd0
 800651c:	20000bdc 	.word	0x20000bdc
 8006520:	20000008 	.word	0x20000008
 8006524:	08014780 	.word	0x08014780
 8006528:	200009fc 	.word	0x200009fc

0800652c <MCU_ProcessModuleTime>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 800652c:	b5b0      	push	{r4, r5, r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 8006532:	4b34      	ldr	r3, [pc, #208]	@ (8006604 <MCU_ProcessModuleTime+0xd8>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d006      	beq.n	800654c <MCU_ProcessModuleTime+0x20>
 800653e:	4932      	ldr	r1, [pc, #200]	@ (8006608 <MCU_ProcessModuleTime+0xdc>)
 8006540:	4832      	ldr	r0, [pc, #200]	@ (800660c <MCU_ProcessModuleTime+0xe0>)
 8006542:	f009 ff31 	bl	80103a8 <siprintf>
 8006546:	4831      	ldr	r0, [pc, #196]	@ (800660c <MCU_ProcessModuleTime+0xe0>)
 8006548:	f7fd f8fc 	bl	8003744 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 800654c:	f7fd f9e2 	bl	8003914 <readRTC>
 8006550:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 8006554:	4b2e      	ldr	r3, [pc, #184]	@ (8006610 <MCU_ProcessModuleTime+0xe4>)
 8006556:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006560:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 8006562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006566:	4614      	mov	r4, r2
 8006568:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800656c:	4623      	mov	r3, r4
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	462a      	mov	r2, r5
 8006574:	f362 031e 	bfi	r3, r2, #0, #31
 8006578:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 800657a:	4b26      	ldr	r3, [pc, #152]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8006580:	4b24      	ldr	r3, [pc, #144]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 8006582:	2200      	movs	r2, #0
 8006584:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8006586:	4b23      	ldr	r3, [pc, #140]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 8006588:	2200      	movs	r2, #0
 800658a:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 800658c:	463b      	mov	r3, r7
 800658e:	2208      	movs	r2, #8
 8006590:	4619      	mov	r1, r3
 8006592:	4821      	ldr	r0, [pc, #132]	@ (8006618 <MCU_ProcessModuleTime+0xec>)
 8006594:	f00a fe65 	bl	8011262 <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8006598:	4a1e      	ldr	r2, [pc, #120]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 800659a:	8813      	ldrh	r3, [r2, #0]
 800659c:	f240 5116 	movw	r1, #1302	@ 0x516
 80065a0:	f361 030a 	bfi	r3, r1, #0, #11
 80065a4:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 80065a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	f36f 23dc 	bfc	r3, #11, #18
 80065ae:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80065b0:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 80065b2:	7913      	ldrb	r3, [r2, #4]
 80065b4:	f36f 1386 	bfc	r3, #6, #1
 80065b8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80065ba:	4a16      	ldr	r2, [pc, #88]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 80065bc:	7913      	ldrb	r3, [r2, #4]
 80065be:	2108      	movs	r1, #8
 80065c0:	f361 0303 	bfi	r3, r1, #0, #4
 80065c4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80065c6:	4a13      	ldr	r2, [pc, #76]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 80065c8:	7913      	ldrb	r3, [r2, #4]
 80065ca:	f36f 13c7 	bfc	r3, #7, #1
 80065ce:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80065d0:	4a10      	ldr	r2, [pc, #64]	@ (8006614 <MCU_ProcessModuleTime+0xe8>)
 80065d2:	7913      	ldrb	r3, [r2, #4]
 80065d4:	f043 0310 	orr.w	r3, r3, #16
 80065d8:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 80065da:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <MCU_ProcessModuleTime+0xd8>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d006      	beq.n	80065f4 <MCU_ProcessModuleTime+0xc8>
 80065e6:	490d      	ldr	r1, [pc, #52]	@ (800661c <MCU_ProcessModuleTime+0xf0>)
 80065e8:	4808      	ldr	r0, [pc, #32]	@ (800660c <MCU_ProcessModuleTime+0xe0>)
 80065ea:	f009 fedd 	bl	80103a8 <siprintf>
 80065ee:	4807      	ldr	r0, [pc, #28]	@ (800660c <MCU_ProcessModuleTime+0xe0>)
 80065f0:	f7fd f8a8 	bl	8003744 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7ff fce1 	bl	8005fbc <MCU_TransmitMessageQueue>
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bdb0      	pop	{r4, r5, r7, pc}
 8006602:	bf00      	nop
 8006604:	20000008 	.word	0x20000008
 8006608:	080147a4 	.word	0x080147a4
 800660c:	200009fc 	.word	0x200009fc
 8006610:	2000a4fc 	.word	0x2000a4fc
 8006614:	20000bd0 	.word	0x20000bd0
 8006618:	20000bdc 	.word	0x20000bdc
 800661c:	080147c0 	.word	0x080147c0

08006620 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 800662a:	4b41      	ldr	r3, [pc, #260]	@ (8006730 <MCU_RequestHardware+0x110>)
 800662c:	7d1b      	ldrb	r3, [r3, #20]
 800662e:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8006630:	2300      	movs	r3, #0
 8006632:	73bb      	strb	r3, [r7, #14]
 8006634:	e010      	b.n	8006658 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	4a3e      	ldr	r2, [pc, #248]	@ (8006734 <MCU_RequestHardware+0x114>)
 800663a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800663e:	fb01 f303 	mul.w	r3, r1, r3
 8006642:	4413      	add	r3, r2
 8006644:	3308      	adds	r3, #8
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	79fa      	ldrb	r2, [r7, #7]
 800664a:	429a      	cmp	r2, r3
 800664c:	d101      	bne.n	8006652 <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	3301      	adds	r3, #1
 8006656:	73bb      	strb	r3, [r7, #14]
 8006658:	4b35      	ldr	r3, [pc, #212]	@ (8006730 <MCU_RequestHardware+0x110>)
 800665a:	7d1b      	ldrb	r3, [r3, #20]
 800665c:	7bba      	ldrb	r2, [r7, #14]
 800665e:	429a      	cmp	r2, r3
 8006660:	d3e9      	bcc.n	8006636 <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8006662:	4b33      	ldr	r3, [pc, #204]	@ (8006730 <MCU_RequestHardware+0x110>)
 8006664:	7d1b      	ldrb	r3, [r3, #20]
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	429a      	cmp	r2, r3
 800666a:	d10d      	bne.n	8006688 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 800666c:	4b32      	ldr	r3, [pc, #200]	@ (8006738 <MCU_RequestHardware+0x118>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b03      	cmp	r3, #3
 8006676:	d156      	bne.n	8006726 <MCU_RequestHardware+0x106>
 8006678:	4930      	ldr	r1, [pc, #192]	@ (800673c <MCU_RequestHardware+0x11c>)
 800667a:	4831      	ldr	r0, [pc, #196]	@ (8006740 <MCU_RequestHardware+0x120>)
 800667c:	f009 fe94 	bl	80103a8 <siprintf>
 8006680:	482f      	ldr	r0, [pc, #188]	@ (8006740 <MCU_RequestHardware+0x120>)
 8006682:	f7fd f85f 	bl	8003744 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8006686:	e04e      	b.n	8006726 <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	4a2a      	ldr	r2, [pc, #168]	@ (8006734 <MCU_RequestHardware+0x114>)
 800668c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 80066a2:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80066a8:	4b26      	ldr	r3, [pc, #152]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80066ae:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 80066b4:	7b3a      	ldrb	r2, [r7, #12]
 80066b6:	4b24      	ldr	r3, [pc, #144]	@ (8006748 <MCU_RequestHardware+0x128>)
 80066b8:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 80066ba:	4a22      	ldr	r2, [pc, #136]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066bc:	8813      	ldrh	r3, [r2, #0]
 80066be:	f240 5111 	movw	r1, #1297	@ 0x511
 80066c2:	f361 030a 	bfi	r3, r1, #0, #11
 80066c6:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 80066c8:	79fa      	ldrb	r2, [r7, #7]
 80066ca:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80066ce:	491d      	ldr	r1, [pc, #116]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066d0:	680b      	ldr	r3, [r1, #0]
 80066d2:	f362 23dc 	bfi	r3, r2, #11, #18
 80066d6:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 80066d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066da:	7913      	ldrb	r3, [r2, #4]
 80066dc:	f36f 1386 	bfc	r3, #6, #1
 80066e0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 80066e2:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066e4:	7913      	ldrb	r3, [r2, #4]
 80066e6:	2101      	movs	r1, #1
 80066e8:	f361 0303 	bfi	r3, r1, #0, #4
 80066ec:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80066ee:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066f0:	7913      	ldrb	r3, [r2, #4]
 80066f2:	f36f 13c7 	bfc	r3, #7, #1
 80066f6:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 80066f8:	4a12      	ldr	r2, [pc, #72]	@ (8006744 <MCU_RequestHardware+0x124>)
 80066fa:	7913      	ldrb	r3, [r2, #4]
 80066fc:	f043 0310 	orr.w	r3, r3, #16
 8006700:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 8006702:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <MCU_RequestHardware+0x118>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <MCU_RequestHardware+0x100>
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	461a      	mov	r2, r3
 8006712:	490e      	ldr	r1, [pc, #56]	@ (800674c <MCU_RequestHardware+0x12c>)
 8006714:	480a      	ldr	r0, [pc, #40]	@ (8006740 <MCU_RequestHardware+0x120>)
 8006716:	f009 fe47 	bl	80103a8 <siprintf>
 800671a:	4809      	ldr	r0, [pc, #36]	@ (8006740 <MCU_RequestHardware+0x120>)
 800671c:	f7fd f812 	bl	8003744 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8006720:	2001      	movs	r0, #1
 8006722:	f7ff fc4b 	bl	8005fbc <MCU_TransmitMessageQueue>
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2000a4fc 	.word	0x2000a4fc
 8006734:	20000c7c 	.word	0x20000c7c
 8006738:	20000008 	.word	0x20000008
 800673c:	080147d8 	.word	0x080147d8
 8006740:	200009fc 	.word	0x200009fc
 8006744:	20000bd0 	.word	0x20000bd0
 8006748:	20000bdc 	.word	0x20000bdc
 800674c:	08014814 	.word	0x08014814

08006750 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 8006750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006754:	b08e      	sub	sp, #56	@ 0x38
 8006756:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 8006758:	463b      	mov	r3, r7
 800675a:	2208      	movs	r2, #8
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f009 fe87 	bl	8010472 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 8006764:	4a94      	ldr	r2, [pc, #592]	@ (80069b8 <MCU_ProcessModuleHardware+0x268>)
 8006766:	463b      	mov	r3, r7
 8006768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800676c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8006770:	4b92      	ldr	r3, [pc, #584]	@ (80069bc <MCU_ProcessModuleHardware+0x26c>)
 8006772:	7d1b      	ldrb	r3, [r3, #20]
 8006774:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8006776:	2300      	movs	r3, #0
 8006778:	75bb      	strb	r3, [r7, #22]
 800677a:	e015      	b.n	80067a8 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800677c:	4b90      	ldr	r3, [pc, #576]	@ (80069c0 <MCU_ProcessModuleHardware+0x270>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8006784:	7dbb      	ldrb	r3, [r7, #22]
 8006786:	498f      	ldr	r1, [pc, #572]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 8006788:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800678c:	fb00 f303 	mul.w	r3, r0, r3
 8006790:	440b      	add	r3, r1
 8006792:	3308      	adds	r3, #8
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800679a:	429a      	cmp	r2, r3
 800679c:	d101      	bne.n	80067a2 <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 800679e:	7dbb      	ldrb	r3, [r7, #22]
 80067a0:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80067a2:	7dbb      	ldrb	r3, [r7, #22]
 80067a4:	3301      	adds	r3, #1
 80067a6:	75bb      	strb	r3, [r7, #22]
 80067a8:	4b84      	ldr	r3, [pc, #528]	@ (80069bc <MCU_ProcessModuleHardware+0x26c>)
 80067aa:	7d1b      	ldrb	r3, [r3, #20]
 80067ac:	7dba      	ldrb	r2, [r7, #22]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d3e4      	bcc.n	800677c <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 80067b2:	4b82      	ldr	r3, [pc, #520]	@ (80069bc <MCU_ProcessModuleHardware+0x26c>)
 80067b4:	7d1b      	ldrb	r3, [r3, #20]
 80067b6:	7dfa      	ldrb	r2, [r7, #23]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d10e      	bne.n	80067da <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 80067bc:	4b82      	ldr	r3, [pc, #520]	@ (80069c8 <MCU_ProcessModuleHardware+0x278>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	f040 825d 	bne.w	8006c84 <MCU_ProcessModuleHardware+0x534>
 80067ca:	4980      	ldr	r1, [pc, #512]	@ (80069cc <MCU_ProcessModuleHardware+0x27c>)
 80067cc:	4880      	ldr	r0, [pc, #512]	@ (80069d0 <MCU_ProcessModuleHardware+0x280>)
 80067ce:	f009 fdeb 	bl	80103a8 <siprintf>
 80067d2:	487f      	ldr	r0, [pc, #508]	@ (80069d0 <MCU_ProcessModuleHardware+0x280>)
 80067d4:	f7fc ffb6 	bl	8003744 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 80067d8:	e254      	b.n	8006c84 <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	8838      	ldrh	r0, [r7, #0]
 80067de:	4a79      	ldr	r2, [pc, #484]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 80067e0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	330e      	adds	r3, #14
 80067ec:	4602      	mov	r2, r0
 80067ee:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	8878      	ldrh	r0, [r7, #2]
 80067f4:	4a73      	ldr	r2, [pc, #460]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 80067f6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	3310      	adds	r3, #16
 8006802:	4602      	mov	r2, r0
 8006804:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	88b8      	ldrh	r0, [r7, #4]
 800680a:	4a6e      	ldr	r2, [pc, #440]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 800680c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	4413      	add	r3, r2
 8006816:	3312      	adds	r3, #18
 8006818:	4602      	mov	r2, r0
 800681a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	88f8      	ldrh	r0, [r7, #6]
 8006820:	4a68      	ldr	r2, [pc, #416]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 8006822:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	330c      	adds	r3, #12
 800682e:	4602      	mov	r2, r0
 8006830:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8006832:	4b68      	ldr	r3, [pc, #416]	@ (80069d4 <MCU_ProcessModuleHardware+0x284>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800683a:	4962      	ldr	r1, [pc, #392]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 800683c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006840:	fb00 f303 	mul.w	r3, r0, r3
 8006844:	440b      	add	r3, r1
 8006846:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800684a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	4a62      	ldr	r2, [pc, #392]	@ (80069d8 <MCU_ProcessModuleHardware+0x288>)
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	495c      	ldr	r1, [pc, #368]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 8006854:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006858:	fb00 f303 	mul.w	r3, r0, r3
 800685c:	440b      	add	r3, r1
 800685e:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8006862:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	4a57      	ldr	r2, [pc, #348]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 8006868:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	4a51      	ldr	r2, [pc, #324]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 800687e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	330e      	adds	r3, #14
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7f9 fe31 	bl	80004f4 <__aeabi_i2d>
 8006892:	a345      	add	r3, pc, #276	@ (adr r3, 80069a8 <MCU_ProcessModuleHardware+0x258>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 fe96 	bl	80005c8 <__aeabi_dmul>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	a342      	add	r3, pc, #264	@ (adr r3, 80069b0 <MCU_ProcessModuleHardware+0x260>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f7f9 fcd5 	bl	8000258 <__aeabi_dsub>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4610      	mov	r0, r2
 80068b4:	4619      	mov	r1, r3
 80068b6:	f7fa f97f 	bl	8000bb8 <__aeabi_d2f>
 80068ba:	4603      	mov	r3, r0
 80068bc:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	4a40      	ldr	r2, [pc, #256]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 80068c2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	3310      	adds	r3, #16
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7f9 fe0f 	bl	80004f4 <__aeabi_i2d>
 80068d6:	a334      	add	r3, pc, #208	@ (adr r3, 80069a8 <MCU_ProcessModuleHardware+0x258>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fe74 	bl	80005c8 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	a331      	add	r3, pc, #196	@ (adr r3, 80069b0 <MCU_ProcessModuleHardware+0x260>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fcb3 	bl	8000258 <__aeabi_dsub>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	f7fa f95d 	bl	8000bb8 <__aeabi_d2f>
 80068fe:	4603      	mov	r3, r0
 8006900:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 8006902:	edd7 7a04 	vldr	s15, [r7, #16]
 8006906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800690a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690e:	d567      	bpl.n	80069e0 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8006910:	4b2d      	ldr	r3, [pc, #180]	@ (80069c8 <MCU_ProcessModuleHardware+0x278>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	2b03      	cmp	r3, #3
 800691a:	d113      	bne.n	8006944 <MCU_ProcessModuleHardware+0x1f4>
 800691c:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <MCU_ProcessModuleHardware+0x270>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8006924:	461c      	mov	r4, r3
 8006926:	6938      	ldr	r0, [r7, #16]
 8006928:	f7f9 fdf6 	bl	8000518 <__aeabi_f2d>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	e9cd 2300 	strd	r2, r3, [sp]
 8006934:	4622      	mov	r2, r4
 8006936:	4929      	ldr	r1, [pc, #164]	@ (80069dc <MCU_ProcessModuleHardware+0x28c>)
 8006938:	4825      	ldr	r0, [pc, #148]	@ (80069d0 <MCU_ProcessModuleHardware+0x280>)
 800693a:	f009 fd35 	bl	80103a8 <siprintf>
 800693e:	4824      	ldr	r0, [pc, #144]	@ (80069d0 <MCU_ProcessModuleHardware+0x280>)
 8006940:	f7fc ff00 	bl	8003744 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 8006948:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	330e      	adds	r3, #14
 8006954:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006958:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	4a19      	ldr	r2, [pc, #100]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 800695e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	3310      	adds	r3, #16
 800696a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800696e:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	4a14      	ldr	r2, [pc, #80]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 8006974:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8006982:	7893      	ldrb	r3, [r2, #2]
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	4a0d      	ldr	r2, [pc, #52]	@ (80069c4 <MCU_ProcessModuleHardware+0x274>)
 800698e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	3308      	adds	r3, #8
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f866 	bl	8007a70 <MCU_TransmitState>
 80069a4:	e04f      	b.n	8006a46 <MCU_ProcessModuleHardware+0x2f6>
 80069a6:	bf00      	nop
 80069a8:	47ae147b 	.word	0x47ae147b
 80069ac:	3f947ae1 	.word	0x3f947ae1
 80069b0:	47ae147b 	.word	0x47ae147b
 80069b4:	40847ae1 	.word	0x40847ae1
 80069b8:	20000c38 	.word	0x20000c38
 80069bc:	2000a4fc 	.word	0x2000a4fc
 80069c0:	20000c2c 	.word	0x20000c2c
 80069c4:	20000c7c 	.word	0x20000c7c
 80069c8:	20000008 	.word	0x20000008
 80069cc:	0801483c 	.word	0x0801483c
 80069d0:	200009fc 	.word	0x200009fc
 80069d4:	20000540 	.word	0x20000540
 80069d8:	20000bb8 	.word	0x20000bb8
 80069dc:	0801487c 	.word	0x0801487c
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 80069e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80069e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80069e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f0:	dd29      	ble.n	8006a46 <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 80069f2:	4bad      	ldr	r3, [pc, #692]	@ (8006ca8 <MCU_ProcessModuleHardware+0x558>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d018      	beq.n	8006a30 <MCU_ProcessModuleHardware+0x2e0>
 80069fe:	4bab      	ldr	r3, [pc, #684]	@ (8006cac <MCU_ProcessModuleHardware+0x55c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8006a06:	461c      	mov	r4, r3
 8006a08:	6938      	ldr	r0, [r7, #16]
 8006a0a:	f7f9 fd85 	bl	8000518 <__aeabi_f2d>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	49a6      	ldr	r1, [pc, #664]	@ (8006cb0 <MCU_ProcessModuleHardware+0x560>)
 8006a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a1c:	e9cd 2300 	strd	r2, r3, [sp]
 8006a20:	4622      	mov	r2, r4
 8006a22:	49a4      	ldr	r1, [pc, #656]	@ (8006cb4 <MCU_ProcessModuleHardware+0x564>)
 8006a24:	48a4      	ldr	r0, [pc, #656]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006a26:	f009 fcbf 	bl	80103a8 <siprintf>
 8006a2a:	48a3      	ldr	r0, [pc, #652]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006a2c:	f7fc fe8a 	bl	8003744 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	4aa2      	ldr	r2, [pc, #648]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006a34:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	330e      	adds	r3, #14
 8006a40:	f248 12f4 	movw	r2, #33268	@ 0x81f4
 8006a44:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 8006a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a52:	dd4a      	ble.n	8006aea <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8006a54:	4b94      	ldr	r3, [pc, #592]	@ (8006ca8 <MCU_ProcessModuleHardware+0x558>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d113      	bne.n	8006a88 <MCU_ProcessModuleHardware+0x338>
 8006a60:	4b92      	ldr	r3, [pc, #584]	@ (8006cac <MCU_ProcessModuleHardware+0x55c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8006a68:	461c      	mov	r4, r3
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7f9 fd54 	bl	8000518 <__aeabi_f2d>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	e9cd 2300 	strd	r2, r3, [sp]
 8006a78:	4622      	mov	r2, r4
 8006a7a:	4991      	ldr	r1, [pc, #580]	@ (8006cc0 <MCU_ProcessModuleHardware+0x570>)
 8006a7c:	488e      	ldr	r0, [pc, #568]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006a7e:	f009 fc93 	bl	80103a8 <siprintf>
 8006a82:	488d      	ldr	r0, [pc, #564]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006a84:	f7fc fe5e 	bl	8003744 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	4a8c      	ldr	r2, [pc, #560]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006a8c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	330e      	adds	r3, #14
 8006a98:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006a9c:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	4a86      	ldr	r2, [pc, #536]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006aa2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	4413      	add	r3, r2
 8006aac:	3310      	adds	r3, #16
 8006aae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006ab2:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	4a81      	ldr	r2, [pc, #516]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006ab8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8006ac6:	7893      	ldrb	r3, [r2, #2]
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	4a7a      	ldr	r2, [pc, #488]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006ad2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	4413      	add	r3, r2
 8006adc:	3308      	adds	r3, #8
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ffc4 	bl	8007a70 <MCU_TransmitState>
 8006ae8:	e032      	b.n	8006b50 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8006aea:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aee:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8006cc4 <MCU_ProcessModuleHardware+0x574>
 8006af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afa:	d529      	bpl.n	8006b50 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8006afc:	4b6a      	ldr	r3, [pc, #424]	@ (8006ca8 <MCU_ProcessModuleHardware+0x558>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d018      	beq.n	8006b3a <MCU_ProcessModuleHardware+0x3ea>
 8006b08:	4b68      	ldr	r3, [pc, #416]	@ (8006cac <MCU_ProcessModuleHardware+0x55c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8006b10:	461c      	mov	r4, r3
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7f9 fd00 	bl	8000518 <__aeabi_f2d>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	f04f 0000 	mov.w	r0, #0
 8006b20:	4969      	ldr	r1, [pc, #420]	@ (8006cc8 <MCU_ProcessModuleHardware+0x578>)
 8006b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b26:	e9cd 2300 	strd	r2, r3, [sp]
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4967      	ldr	r1, [pc, #412]	@ (8006ccc <MCU_ProcessModuleHardware+0x57c>)
 8006b2e:	4862      	ldr	r0, [pc, #392]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006b30:	f009 fc3a 	bl	80103a8 <siprintf>
 8006b34:	4860      	ldr	r0, [pc, #384]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006b36:	f7fc fe05 	bl	8003744 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	4a5f      	ldr	r2, [pc, #380]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006b3e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	3310      	adds	r3, #16
 8006b4a:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8006b4e:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8006b50:	4b55      	ldr	r3, [pc, #340]	@ (8006ca8 <MCU_ProcessModuleHardware+0x558>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8093 	beq.w	8006c84 <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	4a56      	ldr	r2, [pc, #344]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006b62:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	330e      	adds	r3, #14
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7f9 fcbf 	bl	80004f4 <__aeabi_i2d>
 8006b76:	a346      	add	r3, pc, #280	@ (adr r3, 8006c90 <MCU_ProcessModuleHardware+0x540>)
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f7f9 fd24 	bl	80005c8 <__aeabi_dmul>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	a343      	add	r3, pc, #268	@ (adr r3, 8006c98 <MCU_ProcessModuleHardware+0x548>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fb63 	bl	8000258 <__aeabi_dsub>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4610      	mov	r0, r2
 8006b98:	4619      	mov	r1, r3
 8006b9a:	f7fa f80d 	bl	8000bb8 <__aeabi_d2f>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	4a45      	ldr	r2, [pc, #276]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006ba6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	3310      	adds	r3, #16
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7f9 fc9d 	bl	80004f4 <__aeabi_i2d>
 8006bba:	a335      	add	r3, pc, #212	@ (adr r3, 8006c90 <MCU_ProcessModuleHardware+0x540>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fd02 	bl	80005c8 <__aeabi_dmul>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	a332      	add	r3, pc, #200	@ (adr r3, 8006c98 <MCU_ProcessModuleHardware+0x548>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fb41 	bl	8000258 <__aeabi_dsub>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7f9 ffeb 	bl	8000bb8 <__aeabi_d2f>
 8006be2:	4603      	mov	r3, r0
 8006be4:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	4a34      	ldr	r2, [pc, #208]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006bea:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3312      	adds	r3, #18
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7f9 fc7b 	bl	80004f4 <__aeabi_i2d>
 8006bfe:	a328      	add	r3, pc, #160	@ (adr r3, 8006ca0 <MCU_ProcessModuleHardware+0x550>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 fce0 	bl	80005c8 <__aeabi_dmul>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	f7f9 fb20 	bl	800025c <__adddf3>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4610      	mov	r0, r2
 8006c22:	4619      	mov	r1, r3
 8006c24:	f7f9 ffc8 	bl	8000bb8 <__aeabi_d2f>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cac <MCU_ProcessModuleHardware+0x55c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8006c34:	469a      	mov	sl, r3
 8006c36:	6938      	ldr	r0, [r7, #16]
 8006c38:	f7f9 fc6e 	bl	8000518 <__aeabi_f2d>
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7f9 fc69 	bl	8000518 <__aeabi_f2d>
 8006c46:	4680      	mov	r8, r0
 8006c48:	4689      	mov	r9, r1
 8006c4a:	68b8      	ldr	r0, [r7, #8]
 8006c4c:	f7f9 fc64 	bl	8000518 <__aeabi_f2d>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8006c54:	7df9      	ldrb	r1, [r7, #23]
 8006c56:	4819      	ldr	r0, [pc, #100]	@ (8006cbc <MCU_ProcessModuleHardware+0x56c>)
 8006c58:	f240 46c4 	movw	r6, #1220	@ 0x4c4
 8006c5c:	fb06 f101 	mul.w	r1, r6, r1
 8006c60:	4401      	add	r1, r0
 8006c62:	310c      	adds	r1, #12
 8006c64:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8006c66:	9106      	str	r1, [sp, #24]
 8006c68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c6c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006c70:	e9cd 4500 	strd	r4, r5, [sp]
 8006c74:	4652      	mov	r2, sl
 8006c76:	4916      	ldr	r1, [pc, #88]	@ (8006cd0 <MCU_ProcessModuleHardware+0x580>)
 8006c78:	480f      	ldr	r0, [pc, #60]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006c7a:	f009 fb95 	bl	80103a8 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8006c7e:	480e      	ldr	r0, [pc, #56]	@ (8006cb8 <MCU_ProcessModuleHardware+0x568>)
 8006c80:	f7fc fd60 	bl	8003744 <serialOut>
}
 8006c84:	bf00      	nop
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	bf00      	nop
 8006c90:	47ae147b 	.word	0x47ae147b
 8006c94:	3f947ae1 	.word	0x3f947ae1
 8006c98:	47ae147b 	.word	0x47ae147b
 8006c9c:	40847ae1 	.word	0x40847ae1
 8006ca0:	eb851eb8 	.word	0xeb851eb8
 8006ca4:	3f8eb851 	.word	0x3f8eb851
 8006ca8:	20000008 	.word	0x20000008
 8006cac:	20000c2c 	.word	0x20000c2c
 8006cb0:	40240000 	.word	0x40240000
 8006cb4:	080148c4 	.word	0x080148c4
 8006cb8:	200009fc 	.word	0x200009fc
 8006cbc:	20000c7c 	.word	0x20000c7c
 8006cc0:	0801490c 	.word	0x0801490c
 8006cc4:	c2280000 	.word	0xc2280000
 8006cc8:	c0450000 	.word	0xc0450000
 8006ccc:	08014954 	.word	0x08014954
 8006cd0:	080149a0 	.word	0x080149a0

08006cd4 <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <MCU_RequestModuleStatus+0x110>)
 8006ce0:	7d1b      	ldrb	r3, [r3, #20]
 8006ce2:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73bb      	strb	r3, [r7, #14]
 8006ce8:	e010      	b.n	8006d0c <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	4a3e      	ldr	r2, [pc, #248]	@ (8006de8 <MCU_RequestModuleStatus+0x114>)
 8006cee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	79fa      	ldrb	r2, [r7, #7]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d101      	bne.n	8006d06 <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	73bb      	strb	r3, [r7, #14]
 8006d0c:	4b35      	ldr	r3, [pc, #212]	@ (8006de4 <MCU_RequestModuleStatus+0x110>)
 8006d0e:	7d1b      	ldrb	r3, [r3, #20]
 8006d10:	7bba      	ldrb	r2, [r7, #14]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d3e9      	bcc.n	8006cea <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8006d16:	4b33      	ldr	r3, [pc, #204]	@ (8006de4 <MCU_RequestModuleStatus+0x110>)
 8006d18:	7d1b      	ldrb	r3, [r3, #20]
 8006d1a:	7bfa      	ldrb	r2, [r7, #15]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d10d      	bne.n	8006d3c <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8006d20:	4b32      	ldr	r3, [pc, #200]	@ (8006dec <MCU_RequestModuleStatus+0x118>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d156      	bne.n	8006dda <MCU_RequestModuleStatus+0x106>
 8006d2c:	4930      	ldr	r1, [pc, #192]	@ (8006df0 <MCU_RequestModuleStatus+0x11c>)
 8006d2e:	4831      	ldr	r0, [pc, #196]	@ (8006df4 <MCU_RequestModuleStatus+0x120>)
 8006d30:	f009 fb3a 	bl	80103a8 <siprintf>
 8006d34:	482f      	ldr	r0, [pc, #188]	@ (8006df4 <MCU_RequestModuleStatus+0x120>)
 8006d36:	f7fc fd05 	bl	8003744 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8006d3a:	e04e      	b.n	8006dda <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006de8 <MCU_RequestModuleStatus+0x114>)
 8006d40:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8006d56:	4b28      	ldr	r3, [pc, #160]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8006d5c:	4b26      	ldr	r3, [pc, #152]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8006d62:	4b25      	ldr	r3, [pc, #148]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	609a      	str	r2, [r3, #8]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 8006d68:	7b3a      	ldrb	r2, [r7, #12]
 8006d6a:	4b24      	ldr	r3, [pc, #144]	@ (8006dfc <MCU_RequestModuleStatus+0x128>)
 8006d6c:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8006d6e:	4a22      	ldr	r2, [pc, #136]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d70:	8813      	ldrh	r3, [r2, #0]
 8006d72:	f240 5112 	movw	r1, #1298	@ 0x512
 8006d76:	f361 030a 	bfi	r3, r1, #0, #11
 8006d7a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8006d7c:	79fa      	ldrb	r2, [r7, #7]
 8006d7e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8006d82:	491d      	ldr	r1, [pc, #116]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	f362 23dc 	bfi	r3, r2, #11, #18
 8006d8a:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8006d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d8e:	7913      	ldrb	r3, [r2, #4]
 8006d90:	f36f 1386 	bfc	r3, #6, #1
 8006d94:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8006d96:	4a18      	ldr	r2, [pc, #96]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006d98:	7913      	ldrb	r3, [r2, #4]
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	f361 0303 	bfi	r3, r1, #0, #4
 8006da0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8006da2:	4a15      	ldr	r2, [pc, #84]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006da4:	7913      	ldrb	r3, [r2, #4]
 8006da6:	f36f 13c7 	bfc	r3, #7, #1
 8006daa:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8006dac:	4a12      	ldr	r2, [pc, #72]	@ (8006df8 <MCU_RequestModuleStatus+0x124>)
 8006dae:	7913      	ldrb	r3, [r2, #4]
 8006db0:	f043 0310 	orr.w	r3, r3, #16
 8006db4:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <MCU_RequestModuleStatus+0x118>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <MCU_RequestModuleStatus+0x100>
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	490e      	ldr	r1, [pc, #56]	@ (8006e00 <MCU_RequestModuleStatus+0x12c>)
 8006dc8:	480a      	ldr	r0, [pc, #40]	@ (8006df4 <MCU_RequestModuleStatus+0x120>)
 8006dca:	f009 faed 	bl	80103a8 <siprintf>
 8006dce:	4809      	ldr	r0, [pc, #36]	@ (8006df4 <MCU_RequestModuleStatus+0x120>)
 8006dd0:	f7fc fcb8 	bl	8003744 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f7ff f8f1 	bl	8005fbc <MCU_TransmitMessageQueue>
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2000a4fc 	.word	0x2000a4fc
 8006de8:	20000c7c 	.word	0x20000c7c
 8006dec:	20000008 	.word	0x20000008
 8006df0:	08014a0c 	.word	0x08014a0c
 8006df4:	200009fc 	.word	0x200009fc
 8006df8:	20000bd0 	.word	0x20000bd0
 8006dfc:	20000bdc 	.word	0x20000bdc
 8006e00:	08014a4c 	.word	0x08014a4c

08006e04 <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8006e12:	4b37      	ldr	r3, [pc, #220]	@ (8006ef0 <MCU_FindMaxVoltageModule+0xec>)
 8006e14:	7d1b      	ldrb	r3, [r3, #20]
 8006e16:	3301      	adds	r3, #1
 8006e18:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	71fb      	strb	r3, [r7, #7]
 8006e1e:	e052      	b.n	8006ec6 <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	4a34      	ldr	r2, [pc, #208]	@ (8006ef4 <MCU_FindMaxVoltageModule+0xf0>)
 8006e24:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3314      	adds	r3, #20
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	88ba      	ldrh	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d243      	bcs.n	8006ec0 <MCU_FindMaxVoltageModule+0xbc>
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef4 <MCU_FindMaxVoltageModule+0xf0>)
 8006e3c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8006e4a:	789b      	ldrb	r3, [r3, #2]
 8006e4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d134      	bne.n	8006ec0 <MCU_FindMaxVoltageModule+0xbc>
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	4a26      	ldr	r2, [pc, #152]	@ (8006ef4 <MCU_FindMaxVoltageModule+0xf0>)
 8006e5a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8006e68:	789b      	ldrb	r3, [r3, #2]
 8006e6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d125      	bne.n	8006ec0 <MCU_FindMaxVoltageModule+0xbc>
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef4 <MCU_FindMaxVoltageModule+0xf0>)
 8006e78:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8006e86:	789b      	ldrb	r3, [r3, #2]
 8006e88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d116      	bne.n	8006ec0 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	4a17      	ldr	r2, [pc, #92]	@ (8006ef4 <MCU_FindMaxVoltageModule+0xf0>)
 8006e96:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	4a12      	ldr	r2, [pc, #72]	@ (8006ef4 <MCU_FindMaxVoltageModule+0xf0>)
 8006eaa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 8006eba:	79bb      	ldrb	r3, [r7, #6]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	71fb      	strb	r3, [r7, #7]
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <MCU_FindMaxVoltageModule+0xec>)
 8006ec8:	7d1b      	ldrb	r3, [r3, #20]
 8006eca:	79fa      	ldrb	r2, [r7, #7]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d3a7      	bcc.n	8006e20 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8006ed0:	88bb      	ldrh	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <MCU_FindMaxVoltageModule+0xdc>
 8006ed6:	79bb      	ldrb	r3, [r7, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <MCU_FindMaxVoltageModule+0xdc>
 8006edc:	2300      	movs	r3, #0
 8006ede:	e000      	b.n	8006ee2 <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	2000a4fc 	.word	0x2000a4fc
 8006ef4:	20000c7c 	.word	0x20000c7c

08006ef8 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	b09d      	sub	sp, #116	@ 0x74
 8006efe:	af0a      	add	r7, sp, #40	@ 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8006f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006f04:	2208      	movs	r2, #8
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f009 fab2 	bl	8010472 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 8006f0e:	4ab1      	ldr	r2, [pc, #708]	@ (80071d4 <MCU_ProcessModuleStatus1+0x2dc>)
 8006f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f18:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8006f1c:	4bae      	ldr	r3, [pc, #696]	@ (80071d8 <MCU_ProcessModuleStatus1+0x2e0>)
 8006f1e:	7d1b      	ldrb	r3, [r3, #20]
 8006f20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8006f2a:	e01a      	b.n	8006f62 <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8006f2c:	4bab      	ldr	r3, [pc, #684]	@ (80071dc <MCU_ProcessModuleStatus1+0x2e4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8006f34:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006f38:	49a9      	ldr	r1, [pc, #676]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8006f3a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8006f3e:	fb00 f303 	mul.w	r3, r0, r3
 8006f42:	440b      	add	r3, r1
 8006f44:	3308      	adds	r3, #8
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d103      	bne.n	8006f58 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 8006f50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006f54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8006f58:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8006f62:	4b9d      	ldr	r3, [pc, #628]	@ (80071d8 <MCU_ProcessModuleStatus1+0x2e0>)
 8006f64:	7d1b      	ldrb	r3, [r3, #20]
 8006f66:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d3de      	bcc.n	8006f2c <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 8006f6e:	4b9a      	ldr	r3, [pc, #616]	@ (80071d8 <MCU_ProcessModuleStatus1+0x2e0>)
 8006f70:	7d1b      	ldrb	r3, [r3, #20]
 8006f72:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d10e      	bne.n	8006f98 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 8006f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80071e4 <MCU_ProcessModuleStatus1+0x2ec>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	f040 8222 	bne.w	80073cc <MCU_ProcessModuleStatus1+0x4d4>
 8006f88:	4997      	ldr	r1, [pc, #604]	@ (80071e8 <MCU_ProcessModuleStatus1+0x2f0>)
 8006f8a:	4898      	ldr	r0, [pc, #608]	@ (80071ec <MCU_ProcessModuleStatus1+0x2f4>)
 8006f8c:	f009 fa0c 	bl	80103a8 <siprintf>
 8006f90:	4896      	ldr	r0, [pc, #600]	@ (80071ec <MCU_ProcessModuleStatus1+0x2f4>)
 8006f92:	f7fc fbd7 	bl	8003744 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 8006f96:	e219      	b.n	80073cc <MCU_ProcessModuleStatus1+0x4d4>
    module[moduleIndex].statusPending = false;
 8006f98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006f9c:	4a90      	ldr	r2, [pc, #576]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8006f9e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8006fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fb4:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 8006fb6:	4a8a      	ldr	r2, [pc, #552]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8006fb8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3316      	adds	r3, #22
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8006fc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fcc:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8006fce:	4a84      	ldr	r2, [pc, #528]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8006fd0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	3314      	adds	r3, #20
 8006fdc:	4602      	mov	r2, r0
 8006fde:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8006fe0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fe4:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 8006fe8:	4a7d      	ldr	r2, [pc, #500]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8006fea:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8006fee:	fb01 f303 	mul.w	r3, r1, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	332b      	adds	r3, #43	@ 0x2b
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8006ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006ffe:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 8007002:	4a77      	ldr	r2, [pc, #476]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8007004:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	4413      	add	r3, r2
 800700e:	332c      	adds	r3, #44	@ 0x2c
 8007010:	4602      	mov	r2, r0
 8007012:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 8007014:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007018:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800701c:	b2da      	uxtb	r2, r3
 800701e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007022:	4610      	mov	r0, r2
 8007024:	4a6e      	ldr	r2, [pc, #440]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8007026:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4413      	add	r3, r2
 8007030:	3327      	adds	r3, #39	@ 0x27
 8007032:	4602      	mov	r2, r0
 8007034:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 8007036:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800703a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800703e:	b2da      	uxtb	r2, r3
 8007040:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007044:	4610      	mov	r0, r2
 8007046:	4a66      	ldr	r2, [pc, #408]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8007048:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	4413      	add	r3, r2
 8007052:	3326      	adds	r3, #38	@ 0x26
 8007054:	4602      	mov	r2, r0
 8007056:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 8007058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800705c:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 8007060:	4a5f      	ldr	r2, [pc, #380]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8007062:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	332d      	adds	r3, #45	@ 0x2d
 800706e:	4602      	mov	r2, r0
 8007070:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8007072:	4b5f      	ldr	r3, [pc, #380]	@ (80071f0 <MCU_ProcessModuleStatus1+0x2f8>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800707a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800707c:	4958      	ldr	r1, [pc, #352]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 800707e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007082:	fb00 f303 	mul.w	r3, r0, r3
 8007086:	440b      	add	r3, r1
 8007088:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800708c:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800708e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007092:	4a58      	ldr	r2, [pc, #352]	@ (80071f4 <MCU_ProcessModuleStatus1+0x2fc>)
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	4952      	ldr	r1, [pc, #328]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8007098:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800709c:	fb00 f303 	mul.w	r3, r0, r3
 80070a0:	440b      	add	r3, r1
 80070a2:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80070a6:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 80070a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070ac:	4a4c      	ldr	r2, [pc, #304]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 80070ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	3327      	adds	r3, #39	@ 0x27
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070c0:	4947      	ldr	r1, [pc, #284]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 80070c2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80070c6:	fb00 f303 	mul.w	r3, r0, r3
 80070ca:	440b      	add	r3, r1
 80070cc:	3329      	adds	r3, #41	@ 0x29
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d10a      	bne.n	80070ea <MCU_ProcessModuleStatus1+0x1f2>
     module[moduleIndex].command.commandStatus = commandActive;
 80070d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070d8:	4a41      	ldr	r2, [pc, #260]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 80070da:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	4413      	add	r3, r2
 80070e4:	332a      	adds	r3, #42	@ 0x2a
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80070ea:	4b3e      	ldr	r3, [pc, #248]	@ (80071e4 <MCU_ProcessModuleStatus1+0x2ec>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 816a 	beq.w	80073cc <MCU_ProcessModuleStatus1+0x4d4>
      switch (module[moduleIndex].currentState){
 80070f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070fc:	4a38      	ldr	r2, [pc, #224]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 80070fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	4413      	add	r3, r2
 8007108:	3327      	adds	r3, #39	@ 0x27
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d014      	beq.n	800713a <MCU_ProcessModuleStatus1+0x242>
 8007110:	2b03      	cmp	r3, #3
 8007112:	dc19      	bgt.n	8007148 <MCU_ProcessModuleStatus1+0x250>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <MCU_ProcessModuleStatus1+0x226>
 8007118:	2b01      	cmp	r3, #1
 800711a:	d007      	beq.n	800712c <MCU_ProcessModuleStatus1+0x234>
 800711c:	e014      	b.n	8007148 <MCU_ProcessModuleStatus1+0x250>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 800711e:	f107 031c 	add.w	r3, r7, #28
 8007122:	4935      	ldr	r1, [pc, #212]	@ (80071f8 <MCU_ProcessModuleStatus1+0x300>)
 8007124:	4618      	mov	r0, r3
 8007126:	f009 f93f 	bl	80103a8 <siprintf>
 800712a:	e01f      	b.n	800716c <MCU_ProcessModuleStatus1+0x274>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 800712c:	f107 031c 	add.w	r3, r7, #28
 8007130:	4932      	ldr	r1, [pc, #200]	@ (80071fc <MCU_ProcessModuleStatus1+0x304>)
 8007132:	4618      	mov	r0, r3
 8007134:	f009 f938 	bl	80103a8 <siprintf>
 8007138:	e018      	b.n	800716c <MCU_ProcessModuleStatus1+0x274>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 800713a:	f107 031c 	add.w	r3, r7, #28
 800713e:	4930      	ldr	r1, [pc, #192]	@ (8007200 <MCU_ProcessModuleStatus1+0x308>)
 8007140:	4618      	mov	r0, r3
 8007142:	f009 f931 	bl	80103a8 <siprintf>
 8007146:	e011      	b.n	800716c <MCU_ProcessModuleStatus1+0x274>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 8007148:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800714c:	4a24      	ldr	r2, [pc, #144]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 800714e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	4413      	add	r3, r2
 8007158:	3327      	adds	r3, #39	@ 0x27
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	f107 031c 	add.w	r3, r7, #28
 8007162:	4928      	ldr	r1, [pc, #160]	@ (8007204 <MCU_ProcessModuleStatus1+0x30c>)
 8007164:	4618      	mov	r0, r3
 8007166:	f009 f91f 	bl	80103a8 <siprintf>
 800716a:	bf00      	nop
      switch (module[moduleIndex].status){
 800716c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007170:	4a1b      	ldr	r2, [pc, #108]	@ (80071e0 <MCU_ProcessModuleStatus1+0x2e8>)
 8007172:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007176:	fb01 f303 	mul.w	r3, r1, r3
 800717a:	4413      	add	r3, r2
 800717c:	3326      	adds	r3, #38	@ 0x26
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d847      	bhi.n	8007214 <MCU_ProcessModuleStatus1+0x31c>
 8007184:	a201      	add	r2, pc, #4	@ (adr r2, 800718c <MCU_ProcessModuleStatus1+0x294>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	0800719d 	.word	0x0800719d
 8007190:	080071ab 	.word	0x080071ab
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071c7 	.word	0x080071c7
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	4915      	ldr	r1, [pc, #84]	@ (80071f8 <MCU_ProcessModuleStatus1+0x300>)
 80071a2:	4618      	mov	r0, r3
 80071a4:	f009 f900 	bl	80103a8 <siprintf>
 80071a8:	e046      	b.n	8007238 <MCU_ProcessModuleStatus1+0x340>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 80071aa:	f107 030c 	add.w	r3, r7, #12
 80071ae:	4916      	ldr	r1, [pc, #88]	@ (8007208 <MCU_ProcessModuleStatus1+0x310>)
 80071b0:	4618      	mov	r0, r3
 80071b2:	f009 f8f9 	bl	80103a8 <siprintf>
 80071b6:	e03f      	b.n	8007238 <MCU_ProcessModuleStatus1+0x340>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4913      	ldr	r1, [pc, #76]	@ (800720c <MCU_ProcessModuleStatus1+0x314>)
 80071be:	4618      	mov	r0, r3
 80071c0:	f009 f8f2 	bl	80103a8 <siprintf>
 80071c4:	e038      	b.n	8007238 <MCU_ProcessModuleStatus1+0x340>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 80071c6:	f107 030c 	add.w	r3, r7, #12
 80071ca:	4911      	ldr	r1, [pc, #68]	@ (8007210 <MCU_ProcessModuleStatus1+0x318>)
 80071cc:	4618      	mov	r0, r3
 80071ce:	f009 f8eb 	bl	80103a8 <siprintf>
 80071d2:	e031      	b.n	8007238 <MCU_ProcessModuleStatus1+0x340>
 80071d4:	20000c38 	.word	0x20000c38
 80071d8:	2000a4fc 	.word	0x2000a4fc
 80071dc:	20000c2c 	.word	0x20000c2c
 80071e0:	20000c7c 	.word	0x20000c7c
 80071e4:	20000008 	.word	0x20000008
 80071e8:	08014a74 	.word	0x08014a74
 80071ec:	200009fc 	.word	0x200009fc
 80071f0:	20000540 	.word	0x20000540
 80071f4:	20000bb8 	.word	0x20000bb8
 80071f8:	08014ab4 	.word	0x08014ab4
 80071fc:	08014abc 	.word	0x08014abc
 8007200:	08014ac8 	.word	0x08014ac8
 8007204:	08014ad0 	.word	0x08014ad0
 8007208:	08014adc 	.word	0x08014adc
 800720c:	08014ae8 	.word	0x08014ae8
 8007210:	08014af4 	.word	0x08014af4
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 8007214:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007218:	4a75      	ldr	r2, [pc, #468]	@ (80073f0 <MCU_ProcessModuleStatus1+0x4f8>)
 800721a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	4413      	add	r3, r2
 8007224:	3326      	adds	r3, #38	@ 0x26
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	f107 030c 	add.w	r3, r7, #12
 800722e:	4971      	ldr	r1, [pc, #452]	@ (80073f4 <MCU_ProcessModuleStatus1+0x4fc>)
 8007230:	4618      	mov	r0, r3
 8007232:	f009 f8b9 	bl	80103a8 <siprintf>
 8007236:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 8007238:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800723c:	4a6c      	ldr	r2, [pc, #432]	@ (80073f0 <MCU_ProcessModuleStatus1+0x4f8>)
 800723e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007242:	fb01 f303 	mul.w	r3, r1, r3
 8007246:	4413      	add	r3, r2
 8007248:	3314      	adds	r3, #20
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f7f9 f951 	bl	80004f4 <__aeabi_i2d>
 8007252:	a361      	add	r3, pc, #388	@ (adr r3, 80073d8 <MCU_ProcessModuleStatus1+0x4e0>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f9b6 	bl	80005c8 <__aeabi_dmul>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4610      	mov	r0, r2
 8007262:	4619      	mov	r1, r3
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	f7f8 fff6 	bl	800025c <__adddf3>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4610      	mov	r0, r2
 8007276:	4619      	mov	r1, r3
 8007278:	f7f9 fc9e 	bl	8000bb8 <__aeabi_d2f>
 800727c:	4603      	mov	r3, r0
 800727e:	643b      	str	r3, [r7, #64]	@ 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 8007280:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007284:	4a5a      	ldr	r2, [pc, #360]	@ (80073f0 <MCU_ProcessModuleStatus1+0x4f8>)
 8007286:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	3316      	adds	r3, #22
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f7f9 f92d 	bl	80004f4 <__aeabi_i2d>
 800729a:	a351      	add	r3, pc, #324	@ (adr r3, 80073e0 <MCU_ProcessModuleStatus1+0x4e8>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f9 f992 	bl	80005c8 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4610      	mov	r0, r2
 80072aa:	4619      	mov	r1, r3
 80072ac:	a34e      	add	r3, pc, #312	@ (adr r3, 80073e8 <MCU_ProcessModuleStatus1+0x4f0>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	f7f8 ffd1 	bl	8000258 <__aeabi_dsub>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4610      	mov	r0, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	f7f9 fc7b 	bl	8000bb8 <__aeabi_d2f>
 80072c2:	4603      	mov	r3, r0
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 80072c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80072ca:	4a49      	ldr	r2, [pc, #292]	@ (80073f0 <MCU_ProcessModuleStatus1+0x4f8>)
 80072cc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	332b      	adds	r3, #43	@ 0x2b
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7f9 f90a 	bl	80004f4 <__aeabi_i2d>
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	4b44      	ldr	r3, [pc, #272]	@ (80073f8 <MCU_ProcessModuleStatus1+0x500>)
 80072e6:	f7f9 f96f 	bl	80005c8 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	f7f8 ffaf 	bl	800025c <__adddf3>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	f7f9 fc57 	bl	8000bb8 <__aeabi_d2f>
 800730a:	4603      	mov	r3, r0
 800730c:	63bb      	str	r3, [r7, #56]	@ 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 800730e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007312:	4a37      	ldr	r2, [pc, #220]	@ (80073f0 <MCU_ProcessModuleStatus1+0x4f8>)
 8007314:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	332c      	adds	r3, #44	@ 0x2c
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 f8e6 	bl	80004f4 <__aeabi_i2d>
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	4b32      	ldr	r3, [pc, #200]	@ (80073f8 <MCU_ProcessModuleStatus1+0x500>)
 800732e:	f7f9 f94b 	bl	80005c8 <__aeabi_dmul>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4610      	mov	r0, r2
 8007338:	4619      	mov	r1, r3
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	f7f8 ff8b 	bl	800025c <__adddf3>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	f7f9 fc33 	bl	8000bb8 <__aeabi_d2f>
 8007352:	4603      	mov	r3, r0
 8007354:	637b      	str	r3, [r7, #52]	@ 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8007356:	4b29      	ldr	r3, [pc, #164]	@ (80073fc <MCU_ProcessModuleStatus1+0x504>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800735e:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8007360:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007364:	4a22      	ldr	r2, [pc, #136]	@ (80073f0 <MCU_ProcessModuleStatus1+0x4f8>)
 8007366:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800736a:	fb01 f303 	mul.w	r3, r1, r3
 800736e:	4413      	add	r3, r2
 8007370:	332d      	adds	r3, #45	@ 0x2d
 8007372:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 8007374:	461e      	mov	r6, r3
 8007376:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007378:	f7f9 f8ce 	bl	8000518 <__aeabi_f2d>
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007382:	f7f9 f8c9 	bl	8000518 <__aeabi_f2d>
 8007386:	4680      	mov	r8, r0
 8007388:	4689      	mov	r9, r1
 800738a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800738c:	f7f9 f8c4 	bl	8000518 <__aeabi_f2d>
 8007390:	4682      	mov	sl, r0
 8007392:	468b      	mov	fp, r1
 8007394:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007396:	f7f9 f8bf 	bl	8000518 <__aeabi_f2d>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	f107 011c 	add.w	r1, r7, #28
 80073a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80073a6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80073aa:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80073ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80073b2:	9601      	str	r6, [sp, #4]
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	460b      	mov	r3, r1
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4910      	ldr	r1, [pc, #64]	@ (8007400 <MCU_ProcessModuleStatus1+0x508>)
 80073c0:	4810      	ldr	r0, [pc, #64]	@ (8007404 <MCU_ProcessModuleStatus1+0x50c>)
 80073c2:	f008 fff1 	bl	80103a8 <siprintf>
      serialOut(tempBuffer);
 80073c6:	480f      	ldr	r0, [pc, #60]	@ (8007404 <MCU_ProcessModuleStatus1+0x50c>)
 80073c8:	f7fc f9bc 	bl	8003744 <serialOut>
}
 80073cc:	bf00      	nop
 80073ce:	374c      	adds	r7, #76	@ 0x4c
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	bf00      	nop
 80073d8:	eb851eb8 	.word	0xeb851eb8
 80073dc:	3f8eb851 	.word	0x3f8eb851
 80073e0:	47ae147b 	.word	0x47ae147b
 80073e4:	3f947ae1 	.word	0x3f947ae1
 80073e8:	47ae147b 	.word	0x47ae147b
 80073ec:	40847ae1 	.word	0x40847ae1
 80073f0:	20000c7c 	.word	0x20000c7c
 80073f4:	08014ad0 	.word	0x08014ad0
 80073f8:	3fe00000 	.word	0x3fe00000
 80073fc:	20000c2c 	.word	0x20000c2c
 8007400:	08014afc 	.word	0x08014afc
 8007404:	200009fc 	.word	0x200009fc

08007408 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	b091      	sub	sp, #68	@ 0x44
 800740e:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 8007410:	1d3b      	adds	r3, r7, #4
 8007412:	2208      	movs	r2, #8
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f009 f82b 	bl	8010472 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 800741c:	4aaa      	ldr	r2, [pc, #680]	@ (80076c8 <MCU_ProcessModuleStatus2+0x2c0>)
 800741e:	1d3b      	adds	r3, r7, #4
 8007420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007424:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8007428:	4ba8      	ldr	r3, [pc, #672]	@ (80076cc <MCU_ProcessModuleStatus2+0x2c4>)
 800742a:	7d1b      	ldrb	r3, [r3, #20]
 800742c:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800742e:	2300      	movs	r3, #0
 8007430:	77bb      	strb	r3, [r7, #30]
 8007432:	e015      	b.n	8007460 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8007434:	4ba6      	ldr	r3, [pc, #664]	@ (80076d0 <MCU_ProcessModuleStatus2+0x2c8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800743c:	7fbb      	ldrb	r3, [r7, #30]
 800743e:	49a5      	ldr	r1, [pc, #660]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 8007440:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007444:	fb00 f303 	mul.w	r3, r0, r3
 8007448:	440b      	add	r3, r1
 800744a:	3308      	adds	r3, #8
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007452:	429a      	cmp	r2, r3
 8007454:	d101      	bne.n	800745a <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 8007456:	7fbb      	ldrb	r3, [r7, #30]
 8007458:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800745a:	7fbb      	ldrb	r3, [r7, #30]
 800745c:	3301      	adds	r3, #1
 800745e:	77bb      	strb	r3, [r7, #30]
 8007460:	4b9a      	ldr	r3, [pc, #616]	@ (80076cc <MCU_ProcessModuleStatus2+0x2c4>)
 8007462:	7d1b      	ldrb	r3, [r3, #20]
 8007464:	7fba      	ldrb	r2, [r7, #30]
 8007466:	429a      	cmp	r2, r3
 8007468:	d3e4      	bcc.n	8007434 <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 800746a:	4b98      	ldr	r3, [pc, #608]	@ (80076cc <MCU_ProcessModuleStatus2+0x2c4>)
 800746c:	7d1b      	ldrb	r3, [r3, #20]
 800746e:	7ffa      	ldrb	r2, [r7, #31]
 8007470:	429a      	cmp	r2, r3
 8007472:	d10e      	bne.n	8007492 <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 8007474:	4b98      	ldr	r3, [pc, #608]	@ (80076d8 <MCU_ProcessModuleStatus2+0x2d0>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	2b03      	cmp	r3, #3
 800747e:	f040 8114 	bne.w	80076aa <MCU_ProcessModuleStatus2+0x2a2>
 8007482:	4996      	ldr	r1, [pc, #600]	@ (80076dc <MCU_ProcessModuleStatus2+0x2d4>)
 8007484:	4896      	ldr	r0, [pc, #600]	@ (80076e0 <MCU_ProcessModuleStatus2+0x2d8>)
 8007486:	f008 ff8f 	bl	80103a8 <siprintf>
 800748a:	4895      	ldr	r0, [pc, #596]	@ (80076e0 <MCU_ProcessModuleStatus2+0x2d8>)
 800748c:	f7fc f95a 	bl	8003744 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 8007490:	e10b      	b.n	80076aa <MCU_ProcessModuleStatus2+0x2a2>
    module[moduleIndex].statusPending = false;
 8007492:	7ffb      	ldrb	r3, [r7, #31]
 8007494:	4a8f      	ldr	r2, [pc, #572]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 8007496:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800749a:	fb01 f303 	mul.w	r3, r1, r3
 800749e:	4413      	add	r3, r2
 80074a0:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 80074a8:	7ffb      	ldrb	r3, [r7, #31]
 80074aa:	8938      	ldrh	r0, [r7, #8]
 80074ac:	4a89      	ldr	r2, [pc, #548]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 80074ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	3322      	adds	r3, #34	@ 0x22
 80074ba:	4602      	mov	r2, r0
 80074bc:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 80074be:	7ffb      	ldrb	r3, [r7, #31]
 80074c0:	88f8      	ldrh	r0, [r7, #6]
 80074c2:	4a84      	ldr	r2, [pc, #528]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 80074c4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	331e      	adds	r3, #30
 80074d0:	4602      	mov	r2, r0
 80074d2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 80074d4:	7ffb      	ldrb	r3, [r7, #31]
 80074d6:	88b8      	ldrh	r0, [r7, #4]
 80074d8:	4a7e      	ldr	r2, [pc, #504]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 80074da:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	4413      	add	r3, r2
 80074e4:	3320      	adds	r3, #32
 80074e6:	4602      	mov	r2, r0
 80074e8:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 80074ea:	7ffb      	ldrb	r3, [r7, #31]
 80074ec:	8978      	ldrh	r0, [r7, #10]
 80074ee:	4a79      	ldr	r2, [pc, #484]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 80074f0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	3324      	adds	r3, #36	@ 0x24
 80074fc:	4602      	mov	r2, r0
 80074fe:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8007500:	4b78      	ldr	r3, [pc, #480]	@ (80076e4 <MCU_ProcessModuleStatus2+0x2dc>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	7ffb      	ldrb	r3, [r7, #31]
 8007506:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007508:	4972      	ldr	r1, [pc, #456]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 800750a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800750e:	fb00 f303 	mul.w	r3, r0, r3
 8007512:	440b      	add	r3, r1
 8007514:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8007518:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800751a:	7ffb      	ldrb	r3, [r7, #31]
 800751c:	4a72      	ldr	r2, [pc, #456]	@ (80076e8 <MCU_ProcessModuleStatus2+0x2e0>)
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	496c      	ldr	r1, [pc, #432]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 8007522:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007526:	fb00 f303 	mul.w	r3, r0, r3
 800752a:	440b      	add	r3, r1
 800752c:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8007530:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8007532:	4b69      	ldr	r3, [pc, #420]	@ (80076d8 <MCU_ProcessModuleStatus2+0x2d0>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80b5 	beq.w	80076aa <MCU_ProcessModuleStatus2+0x2a2>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 8007540:	7ffb      	ldrb	r3, [r7, #31]
 8007542:	4a64      	ldr	r2, [pc, #400]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 8007544:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	4413      	add	r3, r2
 800754e:	3322      	adds	r3, #34	@ 0x22
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f7f8 ffce 	bl	80004f4 <__aeabi_i2d>
 8007558:	a357      	add	r3, pc, #348	@ (adr r3, 80076b8 <MCU_ProcessModuleStatus2+0x2b0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f9 f833 	bl	80005c8 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4610      	mov	r0, r2
 8007568:	4619      	mov	r1, r3
 800756a:	f04f 0200 	mov.w	r2, #0
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	f7f8 fe73 	bl	800025c <__adddf3>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4610      	mov	r0, r2
 800757c:	4619      	mov	r1, r3
 800757e:	f7f9 fb1b 	bl	8000bb8 <__aeabi_d2f>
 8007582:	4603      	mov	r3, r0
 8007584:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 8007586:	7ffb      	ldrb	r3, [r7, #31]
 8007588:	4a52      	ldr	r2, [pc, #328]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 800758a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800758e:	fb01 f303 	mul.w	r3, r1, r3
 8007592:	4413      	add	r3, r2
 8007594:	331e      	adds	r3, #30
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f7f8 ffab 	bl	80004f4 <__aeabi_i2d>
 800759e:	a346      	add	r3, pc, #280	@ (adr r3, 80076b8 <MCU_ProcessModuleStatus2+0x2b0>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 f810 	bl	80005c8 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4610      	mov	r0, r2
 80075ae:	4619      	mov	r1, r3
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	f7f8 fe50 	bl	800025c <__adddf3>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4610      	mov	r0, r2
 80075c2:	4619      	mov	r1, r3
 80075c4:	f7f9 faf8 	bl	8000bb8 <__aeabi_d2f>
 80075c8:	4603      	mov	r3, r0
 80075ca:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 80075cc:	7ffb      	ldrb	r3, [r7, #31]
 80075ce:	4a41      	ldr	r2, [pc, #260]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 80075d0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	4413      	add	r3, r2
 80075da:	3320      	adds	r3, #32
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7f8 ff88 	bl	80004f4 <__aeabi_i2d>
 80075e4:	a334      	add	r3, pc, #208	@ (adr r3, 80076b8 <MCU_ProcessModuleStatus2+0x2b0>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 ffed 	bl	80005c8 <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	f7f8 fe2d 	bl	800025c <__adddf3>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4610      	mov	r0, r2
 8007608:	4619      	mov	r1, r3
 800760a:	f7f9 fad5 	bl	8000bb8 <__aeabi_d2f>
 800760e:	4603      	mov	r3, r0
 8007610:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 8007612:	7ffb      	ldrb	r3, [r7, #31]
 8007614:	4a2f      	ldr	r2, [pc, #188]	@ (80076d4 <MCU_ProcessModuleStatus2+0x2cc>)
 8007616:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	4413      	add	r3, r2
 8007620:	3324      	adds	r3, #36	@ 0x24
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 ff65 	bl	80004f4 <__aeabi_i2d>
 800762a:	a325      	add	r3, pc, #148	@ (adr r3, 80076c0 <MCU_ProcessModuleStatus2+0x2b8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 ffca 	bl	80005c8 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4610      	mov	r0, r2
 800763a:	4619      	mov	r1, r3
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	f7f8 fe0a 	bl	800025c <__adddf3>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4610      	mov	r0, r2
 800764e:	4619      	mov	r1, r3
 8007650:	f7f9 fab2 	bl	8000bb8 <__aeabi_d2f>
 8007654:	4603      	mov	r3, r0
 8007656:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 8007658:	4b1d      	ldr	r3, [pc, #116]	@ (80076d0 <MCU_ProcessModuleStatus2+0x2c8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 8007660:	461e      	mov	r6, r3
 8007662:	69b8      	ldr	r0, [r7, #24]
 8007664:	f7f8 ff58 	bl	8000518 <__aeabi_f2d>
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	f7f8 ff53 	bl	8000518 <__aeabi_f2d>
 8007672:	4680      	mov	r8, r0
 8007674:	4689      	mov	r9, r1
 8007676:	6938      	ldr	r0, [r7, #16]
 8007678:	f7f8 ff4e 	bl	8000518 <__aeabi_f2d>
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7f8 ff49 	bl	8000518 <__aeabi_f2d>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800768e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8007692:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007696:	e9cd 4500 	strd	r4, r5, [sp]
 800769a:	4632      	mov	r2, r6
 800769c:	4913      	ldr	r1, [pc, #76]	@ (80076ec <MCU_ProcessModuleStatus2+0x2e4>)
 800769e:	4810      	ldr	r0, [pc, #64]	@ (80076e0 <MCU_ProcessModuleStatus2+0x2d8>)
 80076a0:	f008 fe82 	bl	80103a8 <siprintf>
      serialOut(tempBuffer);
 80076a4:	480e      	ldr	r0, [pc, #56]	@ (80076e0 <MCU_ProcessModuleStatus2+0x2d8>)
 80076a6:	f7fc f84d 	bl	8003744 <serialOut>
}
 80076aa:	bf00      	nop
 80076ac:	3724      	adds	r7, #36	@ 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	f3af 8000 	nop.w
 80076b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80076bc:	3f50624d 	.word	0x3f50624d
 80076c0:	eb851eb8 	.word	0xeb851eb8
 80076c4:	3f8eb851 	.word	0x3f8eb851
 80076c8:	20000c38 	.word	0x20000c38
 80076cc:	2000a4fc 	.word	0x2000a4fc
 80076d0:	20000c2c 	.word	0x20000c2c
 80076d4:	20000c7c 	.word	0x20000c7c
 80076d8:	20000008 	.word	0x20000008
 80076dc:	08014b7c 	.word	0x08014b7c
 80076e0:	200009fc 	.word	0x200009fc
 80076e4:	20000540 	.word	0x20000540
 80076e8:	20000bb8 	.word	0x20000bb8
 80076ec:	08014bbc 	.word	0x08014bbc

080076f0 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 80076f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f4:	b08d      	sub	sp, #52	@ 0x34
 80076f6:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 80076f8:	463b      	mov	r3, r7
 80076fa:	2208      	movs	r2, #8
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f008 feb7 	bl	8010472 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 8007704:	4a8e      	ldr	r2, [pc, #568]	@ (8007940 <MCU_ProcessModuleStatus3+0x250>)
 8007706:	463b      	mov	r3, r7
 8007708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800770c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8007710:	4b8c      	ldr	r3, [pc, #560]	@ (8007944 <MCU_ProcessModuleStatus3+0x254>)
 8007712:	7d1b      	ldrb	r3, [r3, #20]
 8007714:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8007716:	2300      	movs	r3, #0
 8007718:	75bb      	strb	r3, [r7, #22]
 800771a:	e015      	b.n	8007748 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800771c:	4b8a      	ldr	r3, [pc, #552]	@ (8007948 <MCU_ProcessModuleStatus3+0x258>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8007724:	7dbb      	ldrb	r3, [r7, #22]
 8007726:	4989      	ldr	r1, [pc, #548]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 8007728:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800772c:	fb00 f303 	mul.w	r3, r0, r3
 8007730:	440b      	add	r3, r1
 8007732:	3308      	adds	r3, #8
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800773a:	429a      	cmp	r2, r3
 800773c:	d101      	bne.n	8007742 <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 800773e:	7dbb      	ldrb	r3, [r7, #22]
 8007740:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8007742:	7dbb      	ldrb	r3, [r7, #22]
 8007744:	3301      	adds	r3, #1
 8007746:	75bb      	strb	r3, [r7, #22]
 8007748:	4b7e      	ldr	r3, [pc, #504]	@ (8007944 <MCU_ProcessModuleStatus3+0x254>)
 800774a:	7d1b      	ldrb	r3, [r3, #20]
 800774c:	7dba      	ldrb	r2, [r7, #22]
 800774e:	429a      	cmp	r2, r3
 8007750:	d3e4      	bcc.n	800771c <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 8007752:	4b7c      	ldr	r3, [pc, #496]	@ (8007944 <MCU_ProcessModuleStatus3+0x254>)
 8007754:	7d1b      	ldrb	r3, [r3, #20]
 8007756:	7dfa      	ldrb	r2, [r7, #23]
 8007758:	429a      	cmp	r2, r3
 800775a:	d10e      	bne.n	800777a <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 800775c:	4b7c      	ldr	r3, [pc, #496]	@ (8007950 <MCU_ProcessModuleStatus3+0x260>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	2b03      	cmp	r3, #3
 8007766:	f040 80dc 	bne.w	8007922 <MCU_ProcessModuleStatus3+0x232>
 800776a:	497a      	ldr	r1, [pc, #488]	@ (8007954 <MCU_ProcessModuleStatus3+0x264>)
 800776c:	487a      	ldr	r0, [pc, #488]	@ (8007958 <MCU_ProcessModuleStatus3+0x268>)
 800776e:	f008 fe1b 	bl	80103a8 <siprintf>
 8007772:	4879      	ldr	r0, [pc, #484]	@ (8007958 <MCU_ProcessModuleStatus3+0x268>)
 8007774:	f7fb ffe6 	bl	8003744 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 8007778:	e0d3      	b.n	8007922 <MCU_ProcessModuleStatus3+0x232>
    module[moduleIndex].statusPending = false;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	4a73      	ldr	r2, [pc, #460]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 800777e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007782:	fb01 f303 	mul.w	r3, r1, r3
 8007786:	4413      	add	r3, r2
 8007788:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	88b8      	ldrh	r0, [r7, #4]
 8007794:	4a6d      	ldr	r2, [pc, #436]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 8007796:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	331c      	adds	r3, #28
 80077a2:	4602      	mov	r2, r0
 80077a4:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	8878      	ldrh	r0, [r7, #2]
 80077aa:	4a68      	ldr	r2, [pc, #416]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 80077ac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	3318      	adds	r3, #24
 80077b8:	4602      	mov	r2, r0
 80077ba:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	8838      	ldrh	r0, [r7, #0]
 80077c0:	4a62      	ldr	r2, [pc, #392]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 80077c2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	331a      	adds	r3, #26
 80077ce:	4602      	mov	r2, r0
 80077d0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80077d2:	4b62      	ldr	r3, [pc, #392]	@ (800795c <MCU_ProcessModuleStatus3+0x26c>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80077da:	495c      	ldr	r1, [pc, #368]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 80077dc:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80077e0:	fb00 f303 	mul.w	r3, r0, r3
 80077e4:	440b      	add	r3, r1
 80077e6:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80077ea:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	4a5c      	ldr	r2, [pc, #368]	@ (8007960 <MCU_ProcessModuleStatus3+0x270>)
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	4956      	ldr	r1, [pc, #344]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 80077f4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80077f8:	fb00 f303 	mul.w	r3, r0, r3
 80077fc:	440b      	add	r3, r1
 80077fe:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8007802:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8007804:	4b52      	ldr	r3, [pc, #328]	@ (8007950 <MCU_ProcessModuleStatus3+0x260>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8088 	beq.w	8007922 <MCU_ProcessModuleStatus3+0x232>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	4a4d      	ldr	r2, [pc, #308]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 8007816:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800781a:	fb01 f303 	mul.w	r3, r1, r3
 800781e:	4413      	add	r3, r2
 8007820:	331c      	adds	r3, #28
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7f8 fe65 	bl	80004f4 <__aeabi_i2d>
 800782a:	a341      	add	r3, pc, #260	@ (adr r3, 8007930 <MCU_ProcessModuleStatus3+0x240>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 feca 	bl	80005c8 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4610      	mov	r0, r2
 800783a:	4619      	mov	r1, r3
 800783c:	a33e      	add	r3, pc, #248	@ (adr r3, 8007938 <MCU_ProcessModuleStatus3+0x248>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f8 fd09 	bl	8000258 <__aeabi_dsub>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4610      	mov	r0, r2
 800784c:	4619      	mov	r1, r3
 800784e:	f7f9 f9b3 	bl	8000bb8 <__aeabi_d2f>
 8007852:	4603      	mov	r3, r0
 8007854:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	4a3c      	ldr	r2, [pc, #240]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 800785a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	3318      	adds	r3, #24
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f7f8 fe43 	bl	80004f4 <__aeabi_i2d>
 800786e:	a330      	add	r3, pc, #192	@ (adr r3, 8007930 <MCU_ProcessModuleStatus3+0x240>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fea8 	bl	80005c8 <__aeabi_dmul>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4610      	mov	r0, r2
 800787e:	4619      	mov	r1, r3
 8007880:	a32d      	add	r3, pc, #180	@ (adr r3, 8007938 <MCU_ProcessModuleStatus3+0x248>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fce7 	bl	8000258 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4610      	mov	r0, r2
 8007890:	4619      	mov	r1, r3
 8007892:	f7f9 f991 	bl	8000bb8 <__aeabi_d2f>
 8007896:	4603      	mov	r3, r0
 8007898:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	4a2b      	ldr	r2, [pc, #172]	@ (800794c <MCU_ProcessModuleStatus3+0x25c>)
 800789e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	331a      	adds	r3, #26
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7f8 fe21 	bl	80004f4 <__aeabi_i2d>
 80078b2:	a31f      	add	r3, pc, #124	@ (adr r3, 8007930 <MCU_ProcessModuleStatus3+0x240>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fe86 	bl	80005c8 <__aeabi_dmul>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4610      	mov	r0, r2
 80078c2:	4619      	mov	r1, r3
 80078c4:	a31c      	add	r3, pc, #112	@ (adr r3, 8007938 <MCU_ProcessModuleStatus3+0x248>)
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	f7f8 fcc5 	bl	8000258 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4610      	mov	r0, r2
 80078d4:	4619      	mov	r1, r3
 80078d6:	f7f9 f96f 	bl	8000bb8 <__aeabi_d2f>
 80078da:	4603      	mov	r3, r0
 80078dc:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 80078de:	4b1a      	ldr	r3, [pc, #104]	@ (8007948 <MCU_ProcessModuleStatus3+0x258>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 80078e6:	461e      	mov	r6, r3
 80078e8:	6938      	ldr	r0, [r7, #16]
 80078ea:	f7f8 fe15 	bl	8000518 <__aeabi_f2d>
 80078ee:	4604      	mov	r4, r0
 80078f0:	460d      	mov	r5, r1
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7f8 fe10 	bl	8000518 <__aeabi_f2d>
 80078f8:	4680      	mov	r8, r0
 80078fa:	4689      	mov	r9, r1
 80078fc:	68b8      	ldr	r0, [r7, #8]
 80078fe:	f7f8 fe0b 	bl	8000518 <__aeabi_f2d>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800790a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800790e:	e9cd 4500 	strd	r4, r5, [sp]
 8007912:	4632      	mov	r2, r6
 8007914:	4913      	ldr	r1, [pc, #76]	@ (8007964 <MCU_ProcessModuleStatus3+0x274>)
 8007916:	4810      	ldr	r0, [pc, #64]	@ (8007958 <MCU_ProcessModuleStatus3+0x268>)
 8007918:	f008 fd46 	bl	80103a8 <siprintf>
      serialOut(tempBuffer);
 800791c:	480e      	ldr	r0, [pc, #56]	@ (8007958 <MCU_ProcessModuleStatus3+0x268>)
 800791e:	f7fb ff11 	bl	8003744 <serialOut>
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800792c:	f3af 8000 	nop.w
 8007930:	47ae147b 	.word	0x47ae147b
 8007934:	3f847ae1 	.word	0x3f847ae1
 8007938:	cccccccd 	.word	0xcccccccd
 800793c:	404baccc 	.word	0x404baccc
 8007940:	20000c38 	.word	0x20000c38
 8007944:	2000a4fc 	.word	0x2000a4fc
 8007948:	20000c2c 	.word	0x20000c2c
 800794c:	20000c7c 	.word	0x20000c7c
 8007950:	20000008 	.word	0x20000008
 8007954:	08014c4c 	.word	0x08014c4c
 8007958:	200009fc 	.word	0x200009fc
 800795c:	20000540 	.word	0x20000540
 8007960:	20000bb8 	.word	0x20000bb8
 8007964:	08014c8c 	.word	0x08014c8c

08007968 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 8007968:	b580      	push	{r7, lr}
 800796a:	b094      	sub	sp, #80	@ 0x50
 800796c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800796e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007972:	2208      	movs	r2, #8
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f008 fd7b 	bl	8010472 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800797c:	4a31      	ldr	r2, [pc, #196]	@ (8007a44 <MCU_ProcessCellCommStatus1+0xdc>)
 800797e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007986:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800798a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a48 <MCU_ProcessCellCommStatus1+0xe0>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d052      	beq.n	8007a3c <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8007996:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800799a:	2bff      	cmp	r3, #255	@ 0xff
 800799c:	d10a      	bne.n	80079b4 <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800799e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 80079a6:	f107 0318 	add.w	r3, r7, #24
 80079aa:	4928      	ldr	r1, [pc, #160]	@ (8007a4c <MCU_ProcessCellCommStatus1+0xe4>)
 80079ac:	4618      	mov	r0, r3
 80079ae:	f008 fcfb 	bl	80103a8 <siprintf>
 80079b2:	e019      	b.n	80079e8 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 80079b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079b8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80079bc:	429a      	cmp	r2, r3
 80079be:	d109      	bne.n	80079d4 <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 80079c0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80079c4:	461a      	mov	r2, r3
 80079c6:	f107 0318 	add.w	r3, r7, #24
 80079ca:	4921      	ldr	r1, [pc, #132]	@ (8007a50 <MCU_ProcessCellCommStatus1+0xe8>)
 80079cc:	4618      	mov	r0, r3
 80079ce:	f008 fceb 	bl	80103a8 <siprintf>
 80079d2:	e009      	b.n	80079e8 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 80079d4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80079d8:	461a      	mov	r2, r3
 80079da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80079de:	f107 0018 	add.w	r0, r7, #24
 80079e2:	491c      	ldr	r1, [pc, #112]	@ (8007a54 <MCU_ProcessCellCommStatus1+0xec>)
 80079e4:	f008 fce0 	bl	80103a8 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 80079e8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80079ec:	2bff      	cmp	r3, #255	@ 0xff
 80079ee:	d105      	bne.n	80079fc <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 80079f0:	1d3b      	adds	r3, r7, #4
 80079f2:	4919      	ldr	r1, [pc, #100]	@ (8007a58 <MCU_ProcessCellCommStatus1+0xf0>)
 80079f4:	4618      	mov	r0, r3
 80079f6:	f008 fcd7 	bl	80103a8 <siprintf>
 80079fa:	e007      	b.n	8007a0c <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 80079fc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007a00:	461a      	mov	r2, r3
 8007a02:	1d3b      	adds	r3, r7, #4
 8007a04:	4915      	ldr	r1, [pc, #84]	@ (8007a5c <MCU_ProcessCellCommStatus1+0xf4>)
 8007a06:	4618      	mov	r0, r3
 8007a08:	f008 fcce 	bl	80103a8 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8007a0c:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <MCU_ProcessCellCommStatus1+0xf8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8007a14:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8007a16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8007a18:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8007a1a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8007a1e:	f107 0218 	add.w	r2, r7, #24
 8007a22:	9302      	str	r3, [sp, #8]
 8007a24:	1d3b      	adds	r3, r7, #4
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	9100      	str	r1, [sp, #0]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	490d      	ldr	r1, [pc, #52]	@ (8007a64 <MCU_ProcessCellCommStatus1+0xfc>)
 8007a30:	480d      	ldr	r0, [pc, #52]	@ (8007a68 <MCU_ProcessCellCommStatus1+0x100>)
 8007a32:	f008 fcb9 	bl	80103a8 <siprintf>

    serialOut(tempBuffer);
 8007a36:	480c      	ldr	r0, [pc, #48]	@ (8007a68 <MCU_ProcessCellCommStatus1+0x100>)
 8007a38:	f7fb fe84 	bl	8003744 <serialOut>
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3740      	adds	r7, #64	@ 0x40
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000c38 	.word	0x20000c38
 8007a48:	20000008 	.word	0x20000008
 8007a4c:	08014cf8 	.word	0x08014cf8
 8007a50:	08014d04 	.word	0x08014d04
 8007a54:	08014d10 	.word	0x08014d10
 8007a58:	08014d1c 	.word	0x08014d1c
 8007a5c:	08014d24 	.word	0x08014d24
 8007a60:	20000c2c 	.word	0x20000c2c
 8007a64:	08014d38 	.word	0x08014d38
 8007a68:	200009fc 	.word	0x200009fc
 8007a6c:	00000000 	.word	0x00000000

08007a70 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 8007a70:	b5b0      	push	{r4, r5, r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	4603      	mov	r3, r0
 8007a78:	460a      	mov	r2, r1
 8007a7a:	71fb      	strb	r3, [r7, #7]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // request cell detail packet for cell 0
  stateChange.moduleId = moduleId;
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 8007a84:	79bb      	ldrb	r3, [r7, #6]
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	7a7b      	ldrb	r3, [r7, #9]
 8007a8e:	f362 0303 	bfi	r3, r2, #0, #4
 8007a92:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 8007a94:	7a7b      	ldrb	r3, [r7, #9]
 8007a96:	f36f 1307 	bfc	r3, #4, #4
 8007a9a:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 8007a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8007bd0 <MCU_TransmitState+0x160>)
 8007a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa2:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 8007aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8007aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8007ab0:	4b48      	ldr	r3, [pc, #288]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4a47      	ldr	r2, [pc, #284]	@ (8007bd8 <MCU_TransmitState+0x168>)
 8007aba:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 8007abc:	4a45      	ldr	r2, [pc, #276]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007abe:	8813      	ldrh	r3, [r2, #0]
 8007ac0:	f240 5114 	movw	r1, #1300	@ 0x514
 8007ac4:	f361 030a 	bfi	r3, r1, #0, #11
 8007ac8:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 8007aca:	79fa      	ldrb	r2, [r7, #7]
 8007acc:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8007ad0:	4940      	ldr	r1, [pc, #256]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007ad2:	680b      	ldr	r3, [r1, #0]
 8007ad4:	f362 23dc 	bfi	r3, r2, #11, #18
 8007ad8:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8007ada:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007adc:	7913      	ldrb	r3, [r2, #4]
 8007ade:	f36f 1386 	bfc	r3, #6, #1
 8007ae2:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 8007ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007ae6:	7913      	ldrb	r3, [r2, #4]
 8007ae8:	2104      	movs	r1, #4
 8007aea:	f361 0303 	bfi	r3, r1, #0, #4
 8007aee:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8007af0:	4a38      	ldr	r2, [pc, #224]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007af2:	7913      	ldrb	r3, [r2, #4]
 8007af4:	f36f 13c7 	bfc	r3, #7, #1
 8007af8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8007afa:	4a36      	ldr	r2, [pc, #216]	@ (8007bd4 <MCU_TransmitState+0x164>)
 8007afc:	7913      	ldrb	r3, [r2, #4]
 8007afe:	f043 0310 	orr.w	r3, r3, #16
 8007b02:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 8007b04:	4b35      	ldr	r3, [pc, #212]	@ (8007bdc <MCU_TransmitState+0x16c>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d019      	beq.n	8007b44 <MCU_TransmitState+0xd4>
 8007b10:	79fc      	ldrb	r4, [r7, #7]
 8007b12:	79bd      	ldrb	r5, [r7, #6]
 8007b14:	4b2e      	ldr	r3, [pc, #184]	@ (8007bd0 <MCU_TransmitState+0x160>)
 8007b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f8 fcea 	bl	80004f4 <__aeabi_i2d>
 8007b20:	a329      	add	r3, pc, #164	@ (adr r3, 8007bc8 <MCU_TransmitState+0x158>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fd4f 	bl	80005c8 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b32:	462b      	mov	r3, r5
 8007b34:	4622      	mov	r2, r4
 8007b36:	492a      	ldr	r1, [pc, #168]	@ (8007be0 <MCU_TransmitState+0x170>)
 8007b38:	482a      	ldr	r0, [pc, #168]	@ (8007be4 <MCU_TransmitState+0x174>)
 8007b3a:	f008 fc35 	bl	80103a8 <siprintf>
 8007b3e:	4829      	ldr	r0, [pc, #164]	@ (8007be4 <MCU_TransmitState+0x174>)
 8007b40:	f7fb fe00 	bl	8003744 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 8007b44:	2001      	movs	r0, #1
 8007b46:	f7fe fa39 	bl	8005fbc <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f979 	bl	8007e44 <MCU_ModuleIndexFromId>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 8007b56:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd0 <MCU_TransmitState+0x160>)
 8007b58:	7d1b      	ldrb	r3, [r3, #20]
 8007b5a:	7bfa      	ldrb	r2, [r7, #15]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d02c      	beq.n	8007bba <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4a21      	ldr	r2, [pc, #132]	@ (8007be8 <MCU_TransmitState+0x178>)
 8007b64:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b68:	fb01 f303 	mul.w	r3, r1, r3
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3329      	adds	r3, #41	@ 0x29
 8007b70:	79ba      	ldrb	r2, [r7, #6]
 8007b72:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <MCU_TransmitState+0x178>)
 8007b78:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	332a      	adds	r3, #42	@ 0x2a
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 8007b88:	4b18      	ldr	r3, [pc, #96]	@ (8007bec <MCU_TransmitState+0x17c>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b90:	4915      	ldr	r1, [pc, #84]	@ (8007be8 <MCU_TransmitState+0x178>)
 8007b92:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	440b      	add	r3, r1
 8007b9c:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8007ba0:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	4a12      	ldr	r2, [pc, #72]	@ (8007bf0 <MCU_TransmitState+0x180>)
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	490f      	ldr	r1, [pc, #60]	@ (8007be8 <MCU_TransmitState+0x178>)
 8007baa:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007bae:	fb00 f303 	mul.w	r3, r0, r3
 8007bb2:	440b      	add	r3, r1
 8007bb4:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8007bb8:	601a      	str	r2, [r3, #0]
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	eb851eb8 	.word	0xeb851eb8
 8007bcc:	3f8eb851 	.word	0x3f8eb851
 8007bd0:	2000a4fc 	.word	0x2000a4fc
 8007bd4:	20000bd0 	.word	0x20000bd0
 8007bd8:	20000bdc 	.word	0x20000bdc
 8007bdc:	20000008 	.word	0x20000008
 8007be0:	08014dbc 	.word	0x08014dbc
 8007be4:	200009fc 	.word	0x200009fc
 8007be8:	20000c7c 	.word	0x20000c7c
 8007bec:	20000540 	.word	0x20000540
 8007bf0:	20000bb8 	.word	0x20000bb8

08007bf4 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 8007bf4:	b5b0      	push	{r4, r5, r7, lr}
 8007bf6:	b08a      	sub	sp, #40	@ 0x28
 8007bf8:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 8007bfe:	4a85      	ldr	r2, [pc, #532]	@ (8007e14 <MCU_ProcessCellDetail+0x220>)
 8007c00:	1d3b      	adds	r3, r7, #4
 8007c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c06:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 8007c0a:	4b83      	ldr	r3, [pc, #524]	@ (8007e18 <MCU_ProcessCellDetail+0x224>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d017      	beq.n	8007c46 <MCU_ProcessCellDetail+0x52>
 8007c16:	4b81      	ldr	r3, [pc, #516]	@ (8007e1c <MCU_ProcessCellDetail+0x228>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007c1e:	461c      	mov	r4, r3
 8007c20:	797b      	ldrb	r3, [r7, #5]
 8007c22:	461d      	mov	r5, r3
 8007c24:	793b      	ldrb	r3, [r7, #4]
 8007c26:	7aba      	ldrb	r2, [r7, #10]
 8007c28:	88f9      	ldrh	r1, [r7, #6]
 8007c2a:	8938      	ldrh	r0, [r7, #8]
 8007c2c:	9003      	str	r0, [sp, #12]
 8007c2e:	9102      	str	r1, [sp, #8]
 8007c30:	9201      	str	r2, [sp, #4]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	462b      	mov	r3, r5
 8007c36:	4622      	mov	r2, r4
 8007c38:	4979      	ldr	r1, [pc, #484]	@ (8007e20 <MCU_ProcessCellDetail+0x22c>)
 8007c3a:	487a      	ldr	r0, [pc, #488]	@ (8007e24 <MCU_ProcessCellDetail+0x230>)
 8007c3c:	f008 fbb4 	bl	80103a8 <siprintf>
 8007c40:	4878      	ldr	r0, [pc, #480]	@ (8007e24 <MCU_ProcessCellDetail+0x230>)
 8007c42:	f7fb fd7f 	bl	8003744 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8007c46:	4b78      	ldr	r3, [pc, #480]	@ (8007e28 <MCU_ProcessCellDetail+0x234>)
 8007c48:	7d1b      	ldrb	r3, [r3, #20]
 8007c4a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	75bb      	strb	r3, [r7, #22]
 8007c50:	e015      	b.n	8007c7e <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8007c52:	4b72      	ldr	r3, [pc, #456]	@ (8007e1c <MCU_ProcessCellDetail+0x228>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8007c5a:	7dbb      	ldrb	r3, [r7, #22]
 8007c5c:	4973      	ldr	r1, [pc, #460]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007c5e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007c62:	fb00 f303 	mul.w	r3, r0, r3
 8007c66:	440b      	add	r3, r1
 8007c68:	3308      	adds	r3, #8
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d101      	bne.n	8007c78 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 8007c74:	7dbb      	ldrb	r3, [r7, #22]
 8007c76:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8007c78:	7dbb      	ldrb	r3, [r7, #22]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	75bb      	strb	r3, [r7, #22]
 8007c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007e28 <MCU_ProcessCellDetail+0x234>)
 8007c80:	7d1b      	ldrb	r3, [r3, #20]
 8007c82:	7dba      	ldrb	r2, [r7, #22]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3e4      	bcc.n	8007c52 <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	7978      	ldrb	r0, [r7, #5]
 8007c8c:	4a67      	ldr	r2, [pc, #412]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007c8e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007c92:	fb01 f303 	mul.w	r3, r1, r3
 8007c96:	4413      	add	r3, r2
 8007c98:	332d      	adds	r3, #45	@ 0x2d
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 8007c9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ca0:	793b      	ldrb	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	7abc      	ldrb	r4, [r7, #10]
 8007ca6:	4961      	ldr	r1, [pc, #388]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007ca8:	4603      	mov	r3, r0
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	4403      	add	r3, r0
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007cb4:	fb00 f202 	mul.w	r2, r0, r2
 8007cb8:	4413      	add	r3, r2
 8007cba:	440b      	add	r3, r1
 8007cbc:	3332      	adds	r3, #50	@ 0x32
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 8007cc2:	7dfa      	ldrb	r2, [r7, #23]
 8007cc4:	793b      	ldrb	r3, [r7, #4]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	7afc      	ldrb	r4, [r7, #11]
 8007cca:	4958      	ldr	r1, [pc, #352]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007ccc:	4603      	mov	r3, r0
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	4403      	add	r3, r0
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007cd8:	fb00 f202 	mul.w	r2, r0, r2
 8007cdc:	4413      	add	r3, r2
 8007cde:	440b      	add	r3, r1
 8007ce0:	3333      	adds	r3, #51	@ 0x33
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 8007ce6:	7dfa      	ldrb	r2, [r7, #23]
 8007ce8:	793b      	ldrb	r3, [r7, #4]
 8007cea:	4618      	mov	r0, r3
 8007cec:	88fc      	ldrh	r4, [r7, #6]
 8007cee:	494f      	ldr	r1, [pc, #316]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4403      	add	r3, r0
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007cfc:	fb00 f202 	mul.w	r2, r0, r2
 8007d00:	4413      	add	r3, r2
 8007d02:	440b      	add	r3, r1
 8007d04:	3330      	adds	r3, #48	@ 0x30
 8007d06:	4622      	mov	r2, r4
 8007d08:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 8007d0a:	7dfa      	ldrb	r2, [r7, #23]
 8007d0c:	793b      	ldrb	r3, [r7, #4]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	893c      	ldrh	r4, [r7, #8]
 8007d12:	4946      	ldr	r1, [pc, #280]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007d14:	4603      	mov	r3, r0
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4403      	add	r3, r0
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007d20:	fb00 f202 	mul.w	r2, r0, r2
 8007d24:	4413      	add	r3, r2
 8007d26:	440b      	add	r3, r1
 8007d28:	332e      	adds	r3, #46	@ 0x2e
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 8007d2e:	4b40      	ldr	r3, [pc, #256]	@ (8007e30 <MCU_ProcessCellDetail+0x23c>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d36:	493d      	ldr	r1, [pc, #244]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007d38:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007d3c:	fb00 f303 	mul.w	r3, r0, r3
 8007d40:	440b      	add	r3, r1
 8007d42:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8007d46:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	4a3a      	ldr	r2, [pc, #232]	@ (8007e34 <MCU_ProcessCellDetail+0x240>)
 8007d4c:	6812      	ldr	r2, [r2, #0]
 8007d4e:	4937      	ldr	r1, [pc, #220]	@ (8007e2c <MCU_ProcessCellDetail+0x238>)
 8007d50:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007d54:	fb00 f303 	mul.w	r3, r0, r3
 8007d58:	440b      	add	r3, r1
 8007d5a:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8007d5e:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 8007d60:	793b      	ldrb	r3, [r7, #4]
 8007d62:	461a      	mov	r2, r3
 8007d64:	797b      	ldrb	r3, [r7, #5]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	da4f      	bge.n	8007e0c <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 8007d6c:	793b      	ldrb	r3, [r7, #4]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8007d74:	4b30      	ldr	r3, [pc, #192]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8007d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8007d80:	4b2d      	ldr	r3, [pc, #180]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 8007d86:	4b2d      	ldr	r3, [pc, #180]	@ (8007e3c <MCU_ProcessCellDetail+0x248>)
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f107 030c 	add.w	r3, r7, #12
 8007d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007d92:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 8007d96:	4a28      	ldr	r2, [pc, #160]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007d98:	8813      	ldrh	r3, [r2, #0]
 8007d9a:	f240 5115 	movw	r1, #1301	@ 0x515
 8007d9e:	f361 030a 	bfi	r3, r1, #0, #11
 8007da2:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 8007da4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e1c <MCU_ProcessCellDetail+0x228>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 8007dac:	4a22      	ldr	r2, [pc, #136]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007dae:	6813      	ldr	r3, [r2, #0]
 8007db0:	f361 23dc 	bfi	r3, r1, #11, #18
 8007db4:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8007db6:	4a20      	ldr	r2, [pc, #128]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007db8:	7913      	ldrb	r3, [r2, #4]
 8007dba:	f36f 1386 	bfc	r3, #6, #1
 8007dbe:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 8007dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007dc2:	7913      	ldrb	r3, [r2, #4]
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	f361 0303 	bfi	r3, r1, #0, #4
 8007dca:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8007dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007dce:	7913      	ldrb	r3, [r2, #4]
 8007dd0:	f36f 13c7 	bfc	r3, #7, #1
 8007dd4:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8007dd6:	4a18      	ldr	r2, [pc, #96]	@ (8007e38 <MCU_ProcessCellDetail+0x244>)
 8007dd8:	7913      	ldrb	r3, [r2, #4]
 8007dda:	f043 0310 	orr.w	r3, r3, #16
 8007dde:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 8007de0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <MCU_ProcessCellDetail+0x224>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00c      	beq.n	8007e06 <MCU_ProcessCellDetail+0x212>
 8007dec:	4b0b      	ldr	r3, [pc, #44]	@ (8007e1c <MCU_ProcessCellDetail+0x228>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007df4:	461a      	mov	r2, r3
 8007df6:	7b7b      	ldrb	r3, [r7, #13]
 8007df8:	4911      	ldr	r1, [pc, #68]	@ (8007e40 <MCU_ProcessCellDetail+0x24c>)
 8007dfa:	480a      	ldr	r0, [pc, #40]	@ (8007e24 <MCU_ProcessCellDetail+0x230>)
 8007dfc:	f008 fad4 	bl	80103a8 <siprintf>
 8007e00:	4808      	ldr	r0, [pc, #32]	@ (8007e24 <MCU_ProcessCellDetail+0x230>)
 8007e02:	f7fb fc9f 	bl	8003744 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8007e06:	2001      	movs	r0, #1
 8007e08:	f7fe f8d8 	bl	8005fbc <MCU_TransmitMessageQueue>
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bdb0      	pop	{r4, r5, r7, pc}
 8007e14:	20000c38 	.word	0x20000c38
 8007e18:	20000008 	.word	0x20000008
 8007e1c:	20000c2c 	.word	0x20000c2c
 8007e20:	08014df4 	.word	0x08014df4
 8007e24:	200009fc 	.word	0x200009fc
 8007e28:	2000a4fc 	.word	0x2000a4fc
 8007e2c:	20000c7c 	.word	0x20000c7c
 8007e30:	20000540 	.word	0x20000540
 8007e34:	20000bb8 	.word	0x20000bb8
 8007e38:	20000bd0 	.word	0x20000bd0
 8007e3c:	20000bdc 	.word	0x20000bdc
 8007e40:	08014e50 	.word	0x08014e50

08007e44 <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 8007e4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ea4 <MCU_ModuleIndexFromId+0x60>)
 8007e50:	7d1b      	ldrb	r3, [r3, #20]
 8007e52:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8007e54:	2300      	movs	r3, #0
 8007e56:	73bb      	strb	r3, [r7, #14]
 8007e58:	e010      	b.n	8007e7c <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	4a12      	ldr	r2, [pc, #72]	@ (8007ea8 <MCU_ModuleIndexFromId+0x64>)
 8007e5e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	3308      	adds	r3, #8
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d101      	bne.n	8007e76 <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	73bb      	strb	r3, [r7, #14]
 8007e7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ea4 <MCU_ModuleIndexFromId+0x60>)
 8007e7e:	7d1b      	ldrb	r3, [r3, #20]
 8007e80:	7bba      	ldrb	r2, [r7, #14]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d3e9      	bcc.n	8007e5a <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 8007e86:	4b07      	ldr	r3, [pc, #28]	@ (8007ea4 <MCU_ModuleIndexFromId+0x60>)
 8007e88:	7d1b      	ldrb	r3, [r3, #20]
 8007e8a:	7bfa      	ldrb	r2, [r7, #15]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d001      	beq.n	8007e94 <MCU_ModuleIndexFromId+0x50>
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	e001      	b.n	8007e98 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 8007e94:	4b03      	ldr	r3, [pc, #12]	@ (8007ea4 <MCU_ModuleIndexFromId+0x60>)
 8007e96:	7d1b      	ldrb	r3, [r3, #20]

}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	2000a4fc 	.word	0x2000a4fc
 8007ea8:	20000c7c 	.word	0x20000c7c

08007eac <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8007eb6:	4b32      	ldr	r3, [pc, #200]	@ (8007f80 <MCU_TicksSinceLastMessage+0xd4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 8007ebe:	4b31      	ldr	r3, [pc, #196]	@ (8007f84 <MCU_TicksSinceLastMessage+0xd8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff ffbc 	bl	8007e44 <MCU_ModuleIndexFromId>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8007ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8007f88 <MCU_TicksSinceLastMessage+0xdc>)
 8007ed2:	7d1b      	ldrb	r3, [r3, #20]
 8007ed4:	7afa      	ldrb	r2, [r7, #11]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d040      	beq.n	8007f5c <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	4a2b      	ldr	r2, [pc, #172]	@ (8007f8c <MCU_TicksSinceLastMessage+0xe0>)
 8007ede:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d10d      	bne.n	8007f10 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	4a25      	ldr	r2, [pc, #148]	@ (8007f8c <MCU_TicksSinceLastMessage+0xe0>)
 8007ef8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007efc:	fb01 f303 	mul.w	r3, r1, r3
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e023      	b.n	8007f58 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 8007f10:	4b1b      	ldr	r3, [pc, #108]	@ (8007f80 <MCU_TicksSinceLastMessage+0xd4>)
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	491d      	ldr	r1, [pc, #116]	@ (8007f8c <MCU_TicksSinceLastMessage+0xe0>)
 8007f18:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007f1c:	fb00 f303 	mul.w	r3, r0, r3
 8007f20:	440b      	add	r3, r1
 8007f22:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	4b15      	ldr	r3, [pc, #84]	@ (8007f80 <MCU_TicksSinceLastMessage+0xd4>)
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	7af9      	ldrb	r1, [r7, #11]
 8007f32:	4816      	ldr	r0, [pc, #88]	@ (8007f8c <MCU_TicksSinceLastMessage+0xe0>)
 8007f34:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 8007f38:	fb04 f101 	mul.w	r1, r4, r1
 8007f3c:	4401      	add	r1, r0
 8007f3e:	f201 41b4 	addw	r1, r1, #1204	@ 0x4b4
 8007f42:	6809      	ldr	r1, [r1, #0]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	1a41      	subs	r1, r0, r1
 8007f48:	3901      	subs	r1, #1
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	441a      	add	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	3301      	adds	r3, #1
 8007f56:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	e00d      	b.n	8007f78 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f90 <MCU_TicksSinceLastMessage+0xe4>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d106      	bne.n	8007f76 <MCU_TicksSinceLastMessage+0xca>
 8007f68:	490a      	ldr	r1, [pc, #40]	@ (8007f94 <MCU_TicksSinceLastMessage+0xe8>)
 8007f6a:	480b      	ldr	r0, [pc, #44]	@ (8007f98 <MCU_TicksSinceLastMessage+0xec>)
 8007f6c:	f008 fa1c 	bl	80103a8 <siprintf>
 8007f70:	4809      	ldr	r0, [pc, #36]	@ (8007f98 <MCU_TicksSinceLastMessage+0xec>)
 8007f72:	f7fb fbe7 	bl	8003744 <serialOut>
    return 0; // TODO Handle this error
 8007f76:	2300      	movs	r3, #0
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd90      	pop	{r4, r7, pc}
 8007f80:	20000540 	.word	0x20000540
 8007f84:	20000bb8 	.word	0x20000bb8
 8007f88:	2000a4fc 	.word	0x2000a4fc
 8007f8c:	20000c7c 	.word	0x20000c7c
 8007f90:	20000008 	.word	0x20000008
 8007f94:	08014e80 	.word	0x08014e80
 8007f98:	200009fc 	.word	0x200009fc

08007f9c <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8007fa6:	4b32      	ldr	r3, [pc, #200]	@ (8008070 <MCU_TicksSinceLastStateTx+0xd4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 8007fae:	4b31      	ldr	r3, [pc, #196]	@ (8008074 <MCU_TicksSinceLastStateTx+0xd8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff ff44 	bl	8007e44 <MCU_ModuleIndexFromId>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8007fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8008078 <MCU_TicksSinceLastStateTx+0xdc>)
 8007fc2:	7d1b      	ldrb	r3, [r3, #20]
 8007fc4:	7afa      	ldrb	r2, [r7, #11]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d040      	beq.n	800804c <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800807c <MCU_TicksSinceLastStateTx+0xe0>)
 8007fce:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d10d      	bne.n	8008000 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	4a25      	ldr	r2, [pc, #148]	@ (800807c <MCU_TicksSinceLastStateTx+0xe0>)
 8007fe8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	e023      	b.n	8008048 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 8008000:	4b1b      	ldr	r3, [pc, #108]	@ (8008070 <MCU_TicksSinceLastStateTx+0xd4>)
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	491d      	ldr	r1, [pc, #116]	@ (800807c <MCU_TicksSinceLastStateTx+0xe0>)
 8008008:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800800c:	fb00 f303 	mul.w	r3, r0, r3
 8008010:	440b      	add	r3, r1
 8008012:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	1ad2      	subs	r2, r2, r3
 800801a:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <MCU_TicksSinceLastStateTx+0xd4>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	7af9      	ldrb	r1, [r7, #11]
 8008022:	4816      	ldr	r0, [pc, #88]	@ (800807c <MCU_TicksSinceLastStateTx+0xe0>)
 8008024:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 8008028:	fb04 f101 	mul.w	r1, r4, r1
 800802c:	4401      	add	r1, r0
 800802e:	f201 41bc 	addw	r1, r1, #1212	@ 0x4bc
 8008032:	6809      	ldr	r1, [r1, #0]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	1a41      	subs	r1, r0, r1
 8008038:	3901      	subs	r1, #1
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	441a      	add	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4413      	add	r3, r2
 8008044:	3301      	adds	r3, #1
 8008046:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	e00d      	b.n	8008068 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800804c:	4b0c      	ldr	r3, [pc, #48]	@ (8008080 <MCU_TicksSinceLastStateTx+0xe4>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d106      	bne.n	8008066 <MCU_TicksSinceLastStateTx+0xca>
 8008058:	490a      	ldr	r1, [pc, #40]	@ (8008084 <MCU_TicksSinceLastStateTx+0xe8>)
 800805a:	480b      	ldr	r0, [pc, #44]	@ (8008088 <MCU_TicksSinceLastStateTx+0xec>)
 800805c:	f008 f9a4 	bl	80103a8 <siprintf>
 8008060:	4809      	ldr	r0, [pc, #36]	@ (8008088 <MCU_TicksSinceLastStateTx+0xec>)
 8008062:	f7fb fb6f 	bl	8003744 <serialOut>
    return 0; // TODO Handle this error
 8008066:	2300      	movs	r3, #0
  }
}
 8008068:	4618      	mov	r0, r3
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd90      	pop	{r4, r7, pc}
 8008070:	20000540 	.word	0x20000540
 8008074:	20000bb8 	.word	0x20000bb8
 8008078:	2000a4fc 	.word	0x2000a4fc
 800807c:	20000c7c 	.word	0x20000c7c
 8008080:	20000008 	.word	0x20000008
 8008084:	08014ec0 	.word	0x08014ec0
 8008088:	200009fc 	.word	0x200009fc

0800808c <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 8008096:	2300      	movs	r3, #0
 8008098:	73bb      	strb	r3, [r7, #14]
  Nop();
 800809a:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	e05d      	b.n	800815e <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 80080a2:	4b34      	ldr	r3, [pc, #208]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e016      	b.n	80080d8 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 80080aa:	f007 fc25 	bl	800f8f8 <rand>
 80080ae:	4603      	mov	r3, r0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	4a30      	ldr	r2, [pc, #192]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ba:	b2d9      	uxtb	r1, r3
 80080bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008178 <CAN_TestRegisterAccess+0xec>)
 80080be:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 80080c0:	4b2c      	ldr	r3, [pc, #176]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	4b2d      	ldr	r3, [pc, #180]	@ (800817c <CAN_TestRegisterAccess+0xf0>)
 80080c8:	21ff      	movs	r1, #255	@ 0xff
 80080ca:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 80080cc:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	4b26      	ldr	r3, [pc, #152]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d8e3      	bhi.n	80080aa <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 80080e2:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	79f8      	ldrb	r0, [r7, #7]
 80080ea:	4a23      	ldr	r2, [pc, #140]	@ (8008178 <CAN_TestRegisterAccess+0xec>)
 80080ec:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80080f0:	f7f9 fb38 	bl	8001764 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	79f8      	ldrb	r0, [r7, #7]
 80080fa:	4a20      	ldr	r2, [pc, #128]	@ (800817c <CAN_TestRegisterAccess+0xf0>)
 80080fc:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8008100:	f7f9 faa0 	bl	8001644 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 8008104:	2300      	movs	r3, #0
 8008106:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 8008108:	4b1a      	ldr	r3, [pc, #104]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e01e      	b.n	800814e <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 8008110:	4b18      	ldr	r3, [pc, #96]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	4b18      	ldr	r3, [pc, #96]	@ (8008178 <CAN_TestRegisterAccess+0xec>)
 8008118:	5c9a      	ldrb	r2, [r3, r2]
 800811a:	4b16      	ldr	r3, [pc, #88]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	4619      	mov	r1, r3
 8008120:	4b16      	ldr	r3, [pc, #88]	@ (800817c <CAN_TestRegisterAccess+0xf0>)
 8008122:	5c5b      	ldrb	r3, [r3, r1]
 8008124:	429a      	cmp	r2, r3
 8008126:	bf0c      	ite	eq
 8008128:	2301      	moveq	r3, #1
 800812a:	2300      	movne	r3, #0
 800812c:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	f083 0301 	eor.w	r3, r3, #1
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <CAN_TestRegisterAccess+0xb6>
        Nop();
 800813a:	bf00      	nop
        Nop();
 800813c:	bf00      	nop

        // Data mismatch
        return false;
 800813e:	2300      	movs	r3, #0
 8008140:	e013      	b.n	800816a <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 8008142:	4b0c      	ldr	r3, [pc, #48]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <CAN_TestRegisterAccess+0xe8>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	7bfa      	ldrb	r2, [r7, #15]
 8008154:	429a      	cmp	r2, r3
 8008156:	d8db      	bhi.n	8008110 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	3301      	adds	r3, #1
 800815c:	73fb      	strb	r3, [r7, #15]
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b40      	cmp	r3, #64	@ 0x40
 8008162:	d99e      	bls.n	80080a2 <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 8008164:	bf00      	nop
  Nop();
 8008166:	bf00      	nop
  return true;
 8008168:	2301      	movs	r3, #1
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000c78 	.word	0x20000c78
 8008178:	20000bdc 	.word	0x20000bdc
 800817c:	20000c38 	.word	0x20000c38

08008180 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800818a:	2300      	movs	r3, #0
 800818c:	73bb      	strb	r3, [r7, #14]
  Nop();
 800818e:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8008190:	2304      	movs	r3, #4
 8008192:	73fb      	strb	r3, [r7, #15]
 8008194:	e05b      	b.n	800824e <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 8008196:	4b32      	ldr	r3, [pc, #200]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e014      	b.n	80081c8 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800819e:	f007 fbab 	bl	800f8f8 <rand>
 80081a2:	4601      	mov	r1, r0
 80081a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	b2c9      	uxtb	r1, r1
 80081ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008264 <CAN_TestRamAccess+0xe4>)
 80081ae:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 80081b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008268 <CAN_TestRamAccess+0xe8>)
 80081b8:	21ff      	movs	r1, #255	@ 0xff
 80081ba:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 80081bc:	4b28      	ldr	r3, [pc, #160]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	4b26      	ldr	r3, [pc, #152]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	4b25      	ldr	r3, [pc, #148]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	7bfa      	ldrb	r2, [r7, #15]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d8e5      	bhi.n	800819e <CAN_TestRamAccess+0x1e>
    }
    Nop();
 80081d2:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	79f8      	ldrb	r0, [r7, #7]
 80081da:	4a22      	ldr	r2, [pc, #136]	@ (8008264 <CAN_TestRamAccess+0xe4>)
 80081dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081e0:	f7f9 fac0 	bl	8001764 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	79f8      	ldrb	r0, [r7, #7]
 80081ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008268 <CAN_TestRamAccess+0xe8>)
 80081ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081f0:	f7f9 fa28 	bl	8001644 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 80081f8:	4b19      	ldr	r3, [pc, #100]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e01e      	b.n	800823e <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 8008200:	4b17      	ldr	r3, [pc, #92]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	4b17      	ldr	r3, [pc, #92]	@ (8008264 <CAN_TestRamAccess+0xe4>)
 8008208:	5c9a      	ldrb	r2, [r3, r2]
 800820a:	4b15      	ldr	r3, [pc, #84]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	4619      	mov	r1, r3
 8008210:	4b15      	ldr	r3, [pc, #84]	@ (8008268 <CAN_TestRamAccess+0xe8>)
 8008212:	5c5b      	ldrb	r3, [r3, r1]
 8008214:	429a      	cmp	r2, r3
 8008216:	bf0c      	ite	eq
 8008218:	2301      	moveq	r3, #1
 800821a:	2300      	movne	r3, #0
 800821c:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	f083 0301 	eor.w	r3, r3, #1
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <CAN_TestRamAccess+0xb2>
        Nop();
 800822a:	bf00      	nop
        Nop();
 800822c:	bf00      	nop

        // Data mismatch
        return false;
 800822e:	2300      	movs	r3, #0
 8008230:	e011      	b.n	8008256 <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 8008232:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	3301      	adds	r3, #1
 8008238:	b2da      	uxtb	r2, r3
 800823a:	4b09      	ldr	r3, [pc, #36]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	4b08      	ldr	r3, [pc, #32]	@ (8008260 <CAN_TestRamAccess+0xe0>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	429a      	cmp	r2, r3
 8008246:	d8db      	bhi.n	8008200 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	3304      	adds	r3, #4
 800824c:	73fb      	strb	r3, [r7, #15]
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b40      	cmp	r3, #64	@ 0x40
 8008252:	d9a0      	bls.n	8008196 <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 8008254:	2301      	movs	r3, #1
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000c78 	.word	0x20000c78
 8008264:	20000bdc 	.word	0x20000bdc
 8008268:	20000c38 	.word	0x20000c38

0800826c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8008270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800827c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008284:	bf00      	nop
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <LL_AHB2_GRP1_EnableClock>:
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800829a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800829c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4013      	ands	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082b2:	68fb      	ldr	r3, [r7, #12]
}
 80082b4:	bf00      	nop
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80082c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80082d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082e4:	68fb      	ldr	r3, [r7, #12]
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80082fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008300:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4313      	orrs	r3, r2
 8008308:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800830a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800830e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4013      	ands	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008316:	68fb      	ldr	r3, [r7, #12]
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800832c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008330:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008332:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4313      	orrs	r3, r2
 800833a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800833c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4013      	ands	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	bf00      	nop
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800835e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008362:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008364:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4313      	orrs	r3, r2
 800836c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800836e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008372:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4013      	ands	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800837a:	68fb      	ldr	r3, [r7, #12]
}
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800838c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008390:	f7ff ff96 	bl	80082c0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8008394:	2200      	movs	r2, #0
 8008396:	2100      	movs	r1, #0
 8008398:	202e      	movs	r0, #46	@ 0x2e
 800839a:	f001 fe26 	bl	8009fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800839e:	202e      	movs	r0, #46	@ 0x2e
 80083a0:	f001 fe3d 	bl	800a01e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083a4:	bf00      	nop
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b09c      	sub	sp, #112	@ 0x70
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	60da      	str	r2, [r3, #12]
 80083be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	2250      	movs	r2, #80	@ 0x50
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f008 f852 	bl	8010472 <memset>
  if(huart->Instance==LPUART1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008490 <HAL_UART_MspInit+0xe8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d125      	bne.n	8008424 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80083d8:	2302      	movs	r3, #2
 80083da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80083dc:	2300      	movs	r3, #0
 80083de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	4618      	mov	r0, r3
 80083e6:	f003 fd60 	bl	800beaa <HAL_RCCEx_PeriphCLKConfig>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80083f0:	f7fc fa06 	bl	8004800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7ff ff95 	bl	8008324 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083fa:	2001      	movs	r0, #1
 80083fc:	f7ff ff47 	bl	800828e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008400:	230c      	movs	r3, #12
 8008402:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008404:	2302      	movs	r3, #2
 8008406:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008408:	2300      	movs	r3, #0
 800840a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840c:	2300      	movs	r3, #0
 800840e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8008410:	2308      	movs	r3, #8
 8008412:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008414:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008418:	4619      	mov	r1, r3
 800841a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800841e:	f001 fed7 	bl	800a1d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008422:	e031      	b.n	8008488 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a1a      	ldr	r2, [pc, #104]	@ (8008494 <HAL_UART_MspInit+0xec>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d12c      	bne.n	8008488 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800842e:	2301      	movs	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8008432:	2302      	movs	r3, #2
 8008434:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008436:	f107 030c 	add.w	r3, r7, #12
 800843a:	4618      	mov	r0, r3
 800843c:	f003 fd35 	bl	800beaa <HAL_RCCEx_PeriphCLKConfig>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8008446:	f7fc f9db 	bl	8004800 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800844a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800844e:	f7ff ff82 	bl	8008356 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008452:	2002      	movs	r0, #2
 8008454:	f7ff ff1b 	bl	800828e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008458:	23c0      	movs	r3, #192	@ 0xc0
 800845a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845c:	2302      	movs	r3, #2
 800845e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008460:	2300      	movs	r3, #0
 8008462:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008464:	2300      	movs	r3, #0
 8008466:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008468:	2307      	movs	r3, #7
 800846a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800846c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008470:	4619      	mov	r1, r3
 8008472:	4809      	ldr	r0, [pc, #36]	@ (8008498 <HAL_UART_MspInit+0xf0>)
 8008474:	f001 feac 	bl	800a1d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008478:	2200      	movs	r2, #0
 800847a:	2100      	movs	r1, #0
 800847c:	2024      	movs	r0, #36	@ 0x24
 800847e:	f001 fdb4 	bl	8009fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008482:	2024      	movs	r0, #36	@ 0x24
 8008484:	f001 fdcb 	bl	800a01e <HAL_NVIC_EnableIRQ>
}
 8008488:	bf00      	nop
 800848a:	3770      	adds	r7, #112	@ 0x70
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	40008000 	.word	0x40008000
 8008494:	40013800 	.word	0x40013800
 8008498:	48000400 	.word	0x48000400

0800849c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a05      	ldr	r2, [pc, #20]	@ (80084c0 <HAL_PKA_MspInit+0x24>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d103      	bne.n	80084b6 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 80084ae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80084b2:	f7ff ff05 	bl	80082c0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	58002000 	.word	0x58002000

080084c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b096      	sub	sp, #88	@ 0x58
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	2250      	movs	r2, #80	@ 0x50
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f007 ffcc 	bl	8010472 <memset>
  if(hrtc->Instance==RTC)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a0e      	ldr	r2, [pc, #56]	@ (8008518 <HAL_RTC_MspInit+0x54>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d115      	bne.n	8008510 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80084e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80084ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084f0:	f107 0308 	add.w	r3, r7, #8
 80084f4:	4618      	mov	r0, r3
 80084f6:	f003 fcd8 	bl	800beaa <HAL_RCCEx_PeriphCLKConfig>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8008500:	f7fc f97e 	bl	8004800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008504:	f7ff feb2 	bl	800826c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008508:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800850c:	f7ff fef1 	bl	80082f2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008510:	bf00      	nop
 8008512:	3758      	adds	r7, #88	@ 0x58
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40002800 	.word	0x40002800

0800851c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a30      	ldr	r2, [pc, #192]	@ (80085fc <HAL_SPI_MspInit+0xe0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d118      	bne.n	8008570 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800853e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008542:	f7ff ff08 	bl	8008356 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008546:	2001      	movs	r0, #1
 8008548:	f7ff fea1 	bl	800828e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800854c:	23c2      	movs	r3, #194	@ 0xc2
 800854e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008550:	2302      	movs	r3, #2
 8008552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008558:	2300      	movs	r3, #0
 800855a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800855c:	2305      	movs	r3, #5
 800855e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008560:	f107 030c 	add.w	r3, r7, #12
 8008564:	4619      	mov	r1, r3
 8008566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800856a:	f001 fe31 	bl	800a1d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800856e:	e040      	b.n	80085f2 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a22      	ldr	r2, [pc, #136]	@ (8008600 <HAL_SPI_MspInit+0xe4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d13b      	bne.n	80085f2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800857a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800857e:	f7ff feb8 	bl	80082f2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008582:	2004      	movs	r0, #4
 8008584:	f7ff fe83 	bl	800828e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008588:	2001      	movs	r0, #1
 800858a:	f7ff fe80 	bl	800828e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800858e:	2302      	movs	r3, #2
 8008590:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008592:	2302      	movs	r3, #2
 8008594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800859a:	2300      	movs	r3, #0
 800859c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800859e:	2303      	movs	r3, #3
 80085a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	4619      	mov	r1, r3
 80085a8:	4816      	ldr	r0, [pc, #88]	@ (8008604 <HAL_SPI_MspInit+0xe8>)
 80085aa:	f001 fe11 	bl	800a1d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80085ae:	2304      	movs	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085b2:	2302      	movs	r3, #2
 80085b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ba:	2300      	movs	r3, #0
 80085bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80085be:	2305      	movs	r3, #5
 80085c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085c2:	f107 030c 	add.w	r3, r7, #12
 80085c6:	4619      	mov	r1, r3
 80085c8:	480e      	ldr	r0, [pc, #56]	@ (8008604 <HAL_SPI_MspInit+0xe8>)
 80085ca:	f001 fe01 	bl	800a1d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d4:	2302      	movs	r3, #2
 80085d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80085e0:	2305      	movs	r3, #5
 80085e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e4:	f107 030c 	add.w	r3, r7, #12
 80085e8:	4619      	mov	r1, r3
 80085ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80085ee:	f001 fdef 	bl	800a1d0 <HAL_GPIO_Init>
}
 80085f2:	bf00      	nop
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40013000 	.word	0x40013000
 8008600:	40003800 	.word	0x40003800
 8008604:	48000800 	.word	0x48000800

08008608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a09      	ldr	r2, [pc, #36]	@ (800863c <HAL_TIM_Base_MspInit+0x34>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d10b      	bne.n	8008632 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800861a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800861e:	f7ff fe9a 	bl	8008356 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8008622:	2200      	movs	r2, #0
 8008624:	2100      	movs	r1, #0
 8008626:	2019      	movs	r0, #25
 8008628:	f001 fcdf 	bl	8009fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800862c:	2019      	movs	r0, #25
 800862e:	f001 fcf6 	bl	800a01e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40012c00 	.word	0x40012c00

08008640 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b09c      	sub	sp, #112	@ 0x70
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008648:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	605a      	str	r2, [r3, #4]
 8008652:	609a      	str	r2, [r3, #8]
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008658:	f107 030c 	add.w	r3, r7, #12
 800865c:	2250      	movs	r2, #80	@ 0x50
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f007 ff06 	bl	8010472 <memset>
  if(hpcd->Instance==USB)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a1f      	ldr	r2, [pc, #124]	@ (80086e8 <HAL_PCD_MspInit+0xa8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d136      	bne.n	80086de <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008674:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8008676:	2306      	movs	r3, #6
 8008678:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800867a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800867e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008680:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008684:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008686:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800868a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800868c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008690:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008692:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008696:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	4618      	mov	r0, r3
 800869e:	f003 fc04 	bl	800beaa <HAL_RCCEx_PeriphCLKConfig>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80086a8:	f7fc f8aa 	bl	8004800 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7ff fdee 	bl	800828e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80086b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b8:	2302      	movs	r3, #2
 80086ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086c0:	2300      	movs	r3, #0
 80086c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80086c4:	230a      	movs	r3, #10
 80086c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80086cc:	4619      	mov	r1, r3
 80086ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086d2:	f001 fd7d 	bl	800a1d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80086d6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80086da:	f7ff fe0a 	bl	80082f2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80086de:	bf00      	nop
 80086e0:	3770      	adds	r7, #112	@ 0x70
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40006800 	.word	0x40006800

080086ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <NMI_Handler+0x4>

080086f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086f8:	bf00      	nop
 80086fa:	e7fd      	b.n	80086f8 <HardFault_Handler+0x4>

080086fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <MemManage_Handler+0x4>

08008704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <BusFault_Handler+0x4>

0800870c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <UsageFault_Handler+0x4>

08008714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008718:	bf00      	nop
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008722:	b480      	push	{r7}
 8008724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008726:	bf00      	nop
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008734:	bf00      	nop
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008742:	f001 fb4b 	bl	8009ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008746:	bf00      	nop
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8008750:	4b03      	ldr	r3, [pc, #12]	@ (8008760 <EXTI0_IRQHandler+0x14>)
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f001 fef5 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800875a:	bf00      	nop
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000b6e 	.word	0x20000b6e

08008764 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8008768:	4b03      	ldr	r3, [pc, #12]	@ (8008778 <EXTI1_IRQHandler+0x14>)
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fee9 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000b76 	.word	0x20000b76

0800877c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8008780:	4b03      	ldr	r3, [pc, #12]	@ (8008790 <EXTI4_IRQHandler+0x14>)
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fedd 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800878a:	bf00      	nop
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000b64 	.word	0x20000b64

08008794 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 8008798:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <EXTI9_5_IRQHandler+0x1c>)
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f001 fed1 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 80087a2:	4b04      	ldr	r3, [pc, #16]	@ (80087b4 <EXTI9_5_IRQHandler+0x20>)
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fecc 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80087ac:	bf00      	nop
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000afe 	.word	0x20000afe
 80087b4:	20000b06 	.word	0x20000b06

080087b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80087bc:	4802      	ldr	r0, [pc, #8]	@ (80087c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80087be:	f004 fea5 	bl	800d50c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80087c2:	bf00      	nop
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000540 	.word	0x20000540

080087cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80087d0:	4802      	ldr	r0, [pc, #8]	@ (80087dc <USART1_IRQHandler+0x10>)
 80087d2:	f005 ff6d 	bl	800e6b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80087d6:	bf00      	nop
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	200003b4 	.word	0x200003b4

080087e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 80087e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008810 <EXTI15_10_IRQHandler+0x30>)
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 feab 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 80087ee:	4b09      	ldr	r3, [pc, #36]	@ (8008814 <EXTI15_10_IRQHandler+0x34>)
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 fea6 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 80087f8:	4b07      	ldr	r3, [pc, #28]	@ (8008818 <EXTI15_10_IRQHandler+0x38>)
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fea1 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 8008802:	4b06      	ldr	r3, [pc, #24]	@ (800881c <EXTI15_10_IRQHandler+0x3c>)
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f001 fe9c 	bl	800a544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800880c:	bf00      	nop
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000af6 	.word	0x20000af6
 8008814:	20000b14 	.word	0x20000b14
 8008818:	20000b1e 	.word	0x20000b1e
 800881c:	20000b26 	.word	0x20000b26

08008820 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8008824:	f001 fea6 	bl	800a574 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8008828:	bf00      	nop
 800882a:	bd80      	pop	{r7, pc}

0800882c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  return 1;
 8008830:	2301      	movs	r3, #1
}
 8008832:	4618      	mov	r0, r3
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <_kill>:

int _kill(int pid, int sig)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008846:	f008 fcd5 	bl	80111f4 <__errno>
 800884a:	4603      	mov	r3, r0
 800884c:	2216      	movs	r2, #22
 800884e:	601a      	str	r2, [r3, #0]
  return -1;
 8008850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <_exit>:

void _exit (int status)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008864:	f04f 31ff 	mov.w	r1, #4294967295
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff ffe7 	bl	800883c <_kill>
  while (1) {}    /* Make sure we hang here */
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <_exit+0x12>

08008872 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e00a      	b.n	800889a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008884:	f3af 8000 	nop.w
 8008888:	4601      	mov	r1, r0
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	60ba      	str	r2, [r7, #8]
 8008890:	b2ca      	uxtb	r2, r1
 8008892:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	3301      	adds	r3, #1
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	429a      	cmp	r2, r3
 80088a0:	dbf0      	blt.n	8008884 <_read+0x12>
  }

  return len;
 80088a2:	687b      	ldr	r3, [r7, #4]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	e009      	b.n	80088d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	60ba      	str	r2, [r7, #8]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	3301      	adds	r3, #1
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	dbf1      	blt.n	80088be <_write+0x12>
  }
  return len;
 80088da:	687b      	ldr	r3, [r7, #4]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <_close>:

int _close(int file)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80088ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800890c:	605a      	str	r2, [r3, #4]
  return 0;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <_isatty>:

int _isatty(int file)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008924:	2301      	movs	r3, #1
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008954:	4a14      	ldr	r2, [pc, #80]	@ (80089a8 <_sbrk+0x5c>)
 8008956:	4b15      	ldr	r3, [pc, #84]	@ (80089ac <_sbrk+0x60>)
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008960:	4b13      	ldr	r3, [pc, #76]	@ (80089b0 <_sbrk+0x64>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008968:	4b11      	ldr	r3, [pc, #68]	@ (80089b0 <_sbrk+0x64>)
 800896a:	4a12      	ldr	r2, [pc, #72]	@ (80089b4 <_sbrk+0x68>)
 800896c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800896e:	4b10      	ldr	r3, [pc, #64]	@ (80089b0 <_sbrk+0x64>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4413      	add	r3, r2
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	429a      	cmp	r2, r3
 800897a:	d207      	bcs.n	800898c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800897c:	f008 fc3a 	bl	80111f4 <__errno>
 8008980:	4603      	mov	r3, r0
 8008982:	220c      	movs	r2, #12
 8008984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	e009      	b.n	80089a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800898c:	4b08      	ldr	r3, [pc, #32]	@ (80089b0 <_sbrk+0x64>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008992:	4b07      	ldr	r3, [pc, #28]	@ (80089b0 <_sbrk+0x64>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4413      	add	r3, r2
 800899a:	4a05      	ldr	r2, [pc, #20]	@ (80089b0 <_sbrk+0x64>)
 800899c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20030000 	.word	0x20030000
 80089ac:	00000400 	.word	0x00000400
 80089b0:	2000a554 	.word	0x2000a554
 80089b4:	2000a770 	.word	0x2000a770

080089b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80089bc:	4b24      	ldr	r3, [pc, #144]	@ (8008a50 <SystemInit+0x98>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	4a23      	ldr	r2, [pc, #140]	@ (8008a50 <SystemInit+0x98>)
 80089c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80089cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80089dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089e0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80089e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80089e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089f0:	4b18      	ldr	r3, [pc, #96]	@ (8008a54 <SystemInit+0x9c>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80089f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a02:	f023 0305 	bic.w	r3, r3, #5
 8008a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a16:	f023 0301 	bic.w	r3, r3, #1
 8008a1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8008a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a22:	4a0d      	ldr	r2, [pc, #52]	@ (8008a58 <SystemInit+0xa0>)
 8008a24:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8008a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a58 <SystemInit+0xa0>)
 8008a2c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a42:	2200      	movs	r2, #0
 8008a44:	619a      	str	r2, [r3, #24]
}
 8008a46:	bf00      	nop
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	e000ed00 	.word	0xe000ed00
 8008a54:	faf6fefb 	.word	0xfaf6fefb
 8008a58:	22041000 	.word	0x22041000

08008a5c <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 8008a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5e:	b08b      	sub	sp, #44	@ 0x2c
 8008a60:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 8008a62:	4a52      	ldr	r2, [pc, #328]	@ (8008bac <VCU_ReceiveMessages+0x150>)
 8008a64:	2101      	movs	r1, #1
 8008a66:	2000      	movs	r0, #0
 8008a68:	f7f9 fd68 	bl	800253c <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008a6c:	e091      	b.n	8008b92 <VCU_ReceiveMessages+0x136>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 8008a6e:	2340      	movs	r3, #64	@ 0x40
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4b4f      	ldr	r3, [pc, #316]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008a74:	4a4f      	ldr	r2, [pc, #316]	@ (8008bb4 <VCU_ReceiveMessages+0x158>)
 8008a76:	2101      	movs	r1, #1
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f7f9 fbc3 	bl	8002204 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_VERBOSE)) == (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 8008a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8008bb8 <VCU_ReceiveMessages+0x15c>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f003 030c 	and.w	r3, r3, #12
 8008a86:	2b0c      	cmp	r3, #12
 8008a88:	d12c      	bne.n	8008ae4 <VCU_ReceiveMessages+0x88>
 8008a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8008bb4 <VCU_ReceiveMessages+0x158>)
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	469c      	mov	ip, r3
 8008a96:	4b46      	ldr	r3, [pc, #280]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	469e      	mov	lr, r3
 8008a9c:	4b44      	ldr	r3, [pc, #272]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4b43      	ldr	r3, [pc, #268]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008aa4:	789b      	ldrb	r3, [r3, #2]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4b41      	ldr	r3, [pc, #260]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008aaa:	78db      	ldrb	r3, [r3, #3]
 8008aac:	4618      	mov	r0, r3
 8008aae:	4b40      	ldr	r3, [pc, #256]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	461c      	mov	r4, r3
 8008ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008ab6:	795b      	ldrb	r3, [r3, #5]
 8008ab8:	461d      	mov	r5, r3
 8008aba:	4b3d      	ldr	r3, [pc, #244]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008abc:	799b      	ldrb	r3, [r3, #6]
 8008abe:	461e      	mov	r6, r3
 8008ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008ac2:	79db      	ldrb	r3, [r3, #7]
 8008ac4:	9306      	str	r3, [sp, #24]
 8008ac6:	9605      	str	r6, [sp, #20]
 8008ac8:	9504      	str	r5, [sp, #16]
 8008aca:	9403      	str	r4, [sp, #12]
 8008acc:	9002      	str	r0, [sp, #8]
 8008ace:	9101      	str	r1, [sp, #4]
 8008ad0:	9200      	str	r2, [sp, #0]
 8008ad2:	4673      	mov	r3, lr
 8008ad4:	4662      	mov	r2, ip
 8008ad6:	4939      	ldr	r1, [pc, #228]	@ (8008bbc <VCU_ReceiveMessages+0x160>)
 8008ad8:	4839      	ldr	r0, [pc, #228]	@ (8008bc0 <VCU_ReceiveMessages+0x164>)
 8008ada:	f007 fc65 	bl	80103a8 <siprintf>
 8008ade:	4838      	ldr	r0, [pc, #224]	@ (8008bc0 <VCU_ReceiveMessages+0x164>)
 8008ae0:	f7fa fe30 	bl	8003744 <serialOut>

    switch (vcu_rxObj.bF.id.SID + pack.vcuCanOffset) {
 8008ae4:	4b33      	ldr	r3, [pc, #204]	@ (8008bb4 <VCU_ReceiveMessages+0x158>)
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	4b34      	ldr	r3, [pc, #208]	@ (8008bc4 <VCU_ReceiveMessages+0x168>)
 8008af2:	895b      	ldrh	r3, [r3, #10]
 8008af4:	4413      	add	r3, r2
 8008af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afa:	d004      	beq.n	8008b06 <VCU_ReceiveMessages+0xaa>
 8008afc:	f240 4201 	movw	r2, #1025	@ 0x401
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <VCU_ReceiveMessages+0xb0>
 8008b04:	e005      	b.n	8008b12 <VCU_ReceiveMessages+0xb6>
      case ID_VCU_COMMAND:
        /// Process the command
        VCU_ProcessVcuCommand();
 8008b06:	f000 f8bf 	bl	8008c88 <VCU_ProcessVcuCommand>
        break;
 8008b0a:	e03d      	b.n	8008b88 <VCU_ReceiveMessages+0x12c>
      case ID_VCU_TIME:
        /// Process the command
        VCU_ProcessVcuTime();
 8008b0c:	f000 f95c 	bl	8008dc8 <VCU_ProcessVcuTime>
        break;
 8008b10:	e03a      	b.n	8008b88 <VCU_ReceiveMessages+0x12c>
      default:
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 8008b12:	4b29      	ldr	r3, [pc, #164]	@ (8008bb8 <VCU_ReceiveMessages+0x15c>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0305 	and.w	r3, r3, #5
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	d133      	bne.n	8008b86 <VCU_ReceiveMessages+0x12a>
 8008b1e:	4b25      	ldr	r3, [pc, #148]	@ (8008bb4 <VCU_ReceiveMessages+0x158>)
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	469c      	mov	ip, r3
 8008b2a:	4b22      	ldr	r3, [pc, #136]	@ (8008bb4 <VCU_ReceiveMessages+0x158>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008b32:	469e      	mov	lr, r3
 8008b34:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b42:	789b      	ldrb	r3, [r3, #2]
 8008b44:	4618      	mov	r0, r3
 8008b46:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b48:	78db      	ldrb	r3, [r3, #3]
 8008b4a:	461c      	mov	r4, r3
 8008b4c:	4b18      	ldr	r3, [pc, #96]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b4e:	791b      	ldrb	r3, [r3, #4]
 8008b50:	461d      	mov	r5, r3
 8008b52:	4b17      	ldr	r3, [pc, #92]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b54:	795b      	ldrb	r3, [r3, #5]
 8008b56:	461e      	mov	r6, r3
 8008b58:	4b15      	ldr	r3, [pc, #84]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b5a:	799b      	ldrb	r3, [r3, #6]
 8008b5c:	607b      	str	r3, [r7, #4]
 8008b5e:	4b14      	ldr	r3, [pc, #80]	@ (8008bb0 <VCU_ReceiveMessages+0x154>)
 8008b60:	79db      	ldrb	r3, [r3, #7]
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	9306      	str	r3, [sp, #24]
 8008b68:	9605      	str	r6, [sp, #20]
 8008b6a:	9504      	str	r5, [sp, #16]
 8008b6c:	9403      	str	r4, [sp, #12]
 8008b6e:	9002      	str	r0, [sp, #8]
 8008b70:	9101      	str	r1, [sp, #4]
 8008b72:	9200      	str	r2, [sp, #0]
 8008b74:	4673      	mov	r3, lr
 8008b76:	4662      	mov	r2, ip
 8008b78:	4913      	ldr	r1, [pc, #76]	@ (8008bc8 <VCU_ReceiveMessages+0x16c>)
 8008b7a:	4811      	ldr	r0, [pc, #68]	@ (8008bc0 <VCU_ReceiveMessages+0x164>)
 8008b7c:	f007 fc14 	bl	80103a8 <siprintf>
 8008b80:	480f      	ldr	r0, [pc, #60]	@ (8008bc0 <VCU_ReceiveMessages+0x164>)
 8008b82:	f7fa fddf 	bl	8003744 <serialOut>
        break;
 8008b86:	bf00      	nop
    }
    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 8008b88:	4a08      	ldr	r2, [pc, #32]	@ (8008bac <VCU_ReceiveMessages+0x150>)
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	f7f9 fcd5 	bl	800253c <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008b92:	4b06      	ldr	r3, [pc, #24]	@ (8008bac <VCU_ReceiveMessages+0x150>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f47f af67 	bne.w	8008a6e <VCU_ReceiveMessages+0x12>
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	2000a5a8 	.word	0x2000a5a8
 8008bb0:	2000a5b8 	.word	0x2000a5b8
 8008bb4:	2000a5ac 	.word	0x2000a5ac
 8008bb8:	20000008 	.word	0x20000008
 8008bbc:	08014efc 	.word	0x08014efc
 8008bc0:	200009fc 	.word	0x200009fc
 8008bc4:	2000a4fc 	.word	0x2000a4fc
 8008bc8:	08014f54 	.word	0x08014f54

08008bcc <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8008bd6:	2332      	movs	r3, #50	@ 0x32
 8008bd8:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4a21      	ldr	r2, [pc, #132]	@ (8008c64 <VCU_TransmitMessageQueue+0x98>)
 8008bde:	2102      	movs	r1, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7f9 fc78 	bl	80024d6 <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d11a      	bne.n	8008c22 <VCU_TransmitMessageQueue+0x56>
      Nop();
 8008bec:	bf00      	nop
      Nop();
 8008bee:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 8008bf0:	79f8      	ldrb	r0, [r7, #7]
 8008bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8008c68 <VCU_TransmitMessageQueue+0x9c>)
 8008bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c6c <VCU_TransmitMessageQueue+0xa0>)
 8008bf6:	491e      	ldr	r1, [pc, #120]	@ (8008c70 <VCU_TransmitMessageQueue+0xa4>)
 8008bf8:	f7f9 fd27 	bl	800264a <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c74 <VCU_TransmitMessageQueue+0xa8>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	f003 0305 	and.w	r3, r3, #5
 8008c04:	2b05      	cmp	r3, #5
 8008c06:	d106      	bne.n	8008c16 <VCU_TransmitMessageQueue+0x4a>
 8008c08:	491b      	ldr	r1, [pc, #108]	@ (8008c78 <VCU_TransmitMessageQueue+0xac>)
 8008c0a:	481c      	ldr	r0, [pc, #112]	@ (8008c7c <VCU_TransmitMessageQueue+0xb0>)
 8008c0c:	f007 fbcc 	bl	80103a8 <siprintf>
 8008c10:	481a      	ldr	r0, [pc, #104]	@ (8008c7c <VCU_TransmitMessageQueue+0xb0>)
 8008c12:	f7fa fd97 	bl	8003744 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2102      	movs	r1, #2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7f9 f99e 	bl	8001f5c <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 8008c20:	e01c      	b.n	8008c5c <VCU_TransmitMessageQueue+0x90>
    }
    attempts--;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <VCU_TransmitMessageQueue+0x98>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0d2      	beq.n	8008bda <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 8008c34:	4b12      	ldr	r3, [pc, #72]	@ (8008c80 <VCU_TransmitMessageQueue+0xb4>)
 8008c36:	791b      	ldrb	r3, [r3, #4]
 8008c38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fa fd10 	bl	8003664 <DRV_CANFDSPI_DlcToDataBytes>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73bb      	strb	r3, [r7, #14]

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	79f8      	ldrb	r0, [r7, #7]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	9201      	str	r2, [sp, #4]
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	4b0c      	ldr	r3, [pc, #48]	@ (8008c84 <VCU_TransmitMessageQueue+0xb8>)
 8008c54:	4a0a      	ldr	r2, [pc, #40]	@ (8008c80 <VCU_TransmitMessageQueue+0xb4>)
 8008c56:	2102      	movs	r1, #2
 8008c58:	f7f9 f88e 	bl	8001d78 <DRV_CANFDSPI_TransmitChannelLoad>
}
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	2000a558 	.word	0x2000a558
 8008c68:	2000a5fa 	.word	0x2000a5fa
 8008c6c:	2000a5f9 	.word	0x2000a5f9
 8008c70:	2000a5f8 	.word	0x2000a5f8
 8008c74:	20000008 	.word	0x20000008
 8008c78:	08014fc0 	.word	0x08014fc0
 8008c7c:	200009fc 	.word	0x200009fc
 8008c80:	2000a55c 	.word	0x2000a55c
 8008c84:	2000a568 	.word	0x2000a568

08008c88 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 8008c88:	b590      	push	{r4, r7, lr}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 8008c8e:	4b46      	ldr	r3, [pc, #280]	@ (8008da8 <VCU_ProcessVcuCommand+0x120>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a46      	ldr	r2, [pc, #280]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008c94:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 8008c96:	4b46      	ldr	r3, [pc, #280]	@ (8008db0 <VCU_ProcessVcuCommand+0x128>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	4a43      	ldr	r2, [pc, #268]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008c9e:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f007 fbe3 	bl	8010472 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 8008cac:	4a41      	ldr	r2, [pc, #260]	@ (8008db4 <VCU_ProcessVcuCommand+0x12c>)
 8008cae:	463b      	mov	r3, r7
 8008cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cb4:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 8008cb8:	887a      	ldrh	r2, [r7, #2]
 8008cba:	4b3c      	ldr	r3, [pc, #240]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008cbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50



  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 8008cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc6:	783a      	ldrb	r2, [r7, #0]
 8008cc8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8008ccc:	b2d2      	uxtb	r2, r2
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d03d      	beq.n	8008d4e <VCU_ProcessVcuCommand+0xc6>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 8008cd2:	783b      	ldrb	r3, [r7, #0]
 8008cd4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4b33      	ldr	r3, [pc, #204]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    switch (pack.vcuRequestedState) {
 8008ce2:	4b32      	ldr	r3, [pc, #200]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d81b      	bhi.n	8008d24 <VCU_ProcessVcuCommand+0x9c>
 8008cec:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf4 <VCU_ProcessVcuCommand+0x6c>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008d49 	.word	0x08008d49
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d05 	.word	0x08008d05
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 8008d04:	4b29      	ldr	r3, [pc, #164]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 8008d0a:	4b28      	ldr	r3, [pc, #160]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 8008d12:	e01c      	b.n	8008d4e <VCU_ProcessVcuCommand+0xc6>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 8008d14:	4b25      	ldr	r3, [pc, #148]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 8008d1a:	4b24      	ldr	r3, [pc, #144]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 8008d22:	e014      	b.n	8008d4e <VCU_ProcessVcuCommand+0xc6>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 8008d24:	4b24      	ldr	r3, [pc, #144]	@ (8008db8 <VCU_ProcessVcuCommand+0x130>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	f003 0305 	and.w	r3, r3, #5
 8008d2c:	2b05      	cmp	r3, #5
 8008d2e:	d10d      	bne.n	8008d4c <VCU_ProcessVcuCommand+0xc4>
 8008d30:	4b1e      	ldr	r3, [pc, #120]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d36:	461a      	mov	r2, r3
 8008d38:	4920      	ldr	r1, [pc, #128]	@ (8008dbc <VCU_ProcessVcuCommand+0x134>)
 8008d3a:	4821      	ldr	r0, [pc, #132]	@ (8008dc0 <VCU_ProcessVcuCommand+0x138>)
 8008d3c:	f007 fb34 	bl	80103a8 <siprintf>
 8008d40:	481f      	ldr	r0, [pc, #124]	@ (8008dc0 <VCU_ProcessVcuCommand+0x138>)
 8008d42:	f7fa fcff 	bl	8003744 <serialOut>
        break;
 8008d46:	e001      	b.n	8008d4c <VCU_ProcessVcuCommand+0xc4>
        break;
 8008d48:	bf00      	nop
 8008d4a:	e000      	b.n	8008d4e <VCU_ProcessVcuCommand+0xc6>
        break;
 8008d4c:	bf00      	nop
    }
  }
  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", ID_VCU_COMMAND + PACK_ID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008db8 <VCU_ProcessVcuCommand+0x130>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01c      	beq.n	8008d94 <VCU_ProcessVcuCommand+0x10c>
 8008d5a:	4b14      	ldr	r3, [pc, #80]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d60:	461c      	mov	r4, r3
 8008d62:	4b12      	ldr	r3, [pc, #72]	@ (8008dac <VCU_ProcessVcuCommand+0x124>)
 8008d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f7 fbc3 	bl	80004f4 <__aeabi_i2d>
 8008d6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008da0 <VCU_ProcessVcuCommand+0x118>)
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f7f7 fc28 	bl	80005c8 <__aeabi_dmul>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	e9cd 2300 	strd	r2, r3, [sp]
 8008d80:	4623      	mov	r3, r4
 8008d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d86:	490f      	ldr	r1, [pc, #60]	@ (8008dc4 <VCU_ProcessVcuCommand+0x13c>)
 8008d88:	480d      	ldr	r0, [pc, #52]	@ (8008dc0 <VCU_ProcessVcuCommand+0x138>)
 8008d8a:	f007 fb0d 	bl	80103a8 <siprintf>
 8008d8e:	480c      	ldr	r0, [pc, #48]	@ (8008dc0 <VCU_ProcessVcuCommand+0x138>)
 8008d90:	f7fa fcd8 	bl	8003744 <serialOut>
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd90      	pop	{r4, r7, pc}
 8008d9c:	f3af 8000 	nop.w
 8008da0:	eb851eb8 	.word	0xeb851eb8
 8008da4:	3f8eb851 	.word	0x3f8eb851
 8008da8:	20000bb8 	.word	0x20000bb8
 8008dac:	2000a4fc 	.word	0x2000a4fc
 8008db0:	20000540 	.word	0x20000540
 8008db4:	2000a5b8 	.word	0x2000a5b8
 8008db8:	20000008 	.word	0x20000008
 8008dbc:	08014ff0 	.word	0x08014ff0
 8008dc0:	200009fc 	.word	0x200009fc
 8008dc4:	08015018 	.word	0x08015018

08008dc8 <VCU_ProcessVcuTime>:

/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8008dce:	4b1c      	ldr	r3, [pc, #112]	@ (8008e40 <VCU_ProcessVcuTime+0x78>)
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <VCU_ProcessVcuTime+0x2c>
 8008dda:	4b1a      	ldr	r3, [pc, #104]	@ (8008e44 <VCU_ProcessVcuTime+0x7c>)
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	4918      	ldr	r1, [pc, #96]	@ (8008e48 <VCU_ProcessVcuTime+0x80>)
 8008de8:	4818      	ldr	r0, [pc, #96]	@ (8008e4c <VCU_ProcessVcuTime+0x84>)
 8008dea:	f007 fadd 	bl	80103a8 <siprintf>
 8008dee:	4817      	ldr	r0, [pc, #92]	@ (8008e4c <VCU_ProcessVcuTime+0x84>)
 8008df0:	f7fa fca8 	bl	8003744 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 8008df4:	4b16      	ldr	r3, [pc, #88]	@ (8008e50 <VCU_ProcessVcuTime+0x88>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a16      	ldr	r2, [pc, #88]	@ (8008e54 <VCU_ProcessVcuTime+0x8c>)
 8008dfa:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 8008dfc:	4b16      	ldr	r3, [pc, #88]	@ (8008e58 <VCU_ProcessVcuTime+0x90>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e02:	4a14      	ldr	r2, [pc, #80]	@ (8008e54 <VCU_ProcessVcuTime+0x8c>)
 8008e04:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 8008e06:	463b      	mov	r3, r7
 8008e08:	2208      	movs	r2, #8
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f007 fb30 	bl	8010472 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 8008e12:	463b      	mov	r3, r7
 8008e14:	2208      	movs	r2, #8
 8008e16:	4911      	ldr	r1, [pc, #68]	@ (8008e5c <VCU_ProcessVcuTime+0x94>)
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f008 fa22 	bl	8011262 <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 8008e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e22:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 8008e26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e2a:	f7fa fcf9 	bl	8003820 <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 8008e2e:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <VCU_ProcessVcuTime+0x8c>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000008 	.word	0x20000008
 8008e44:	2000a55c 	.word	0x2000a55c
 8008e48:	08015048 	.word	0x08015048
 8008e4c:	200009fc 	.word	0x200009fc
 8008e50:	20000bb8 	.word	0x20000bb8
 8008e54:	2000a4fc 	.word	0x2000a4fc
 8008e58:	20000540 	.word	0x20000540
 8008e5c:	2000a5b8 	.word	0x2000a5b8

08008e60 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8008e66:	4b16      	ldr	r3, [pc, #88]	@ (8008ec0 <VCU_TicksSinceLastMessage+0x60>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 8008e6e:	4b15      	ldr	r3, [pc, #84]	@ (8008ec4 <VCU_TicksSinceLastMessage+0x64>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 8008e74:	4b14      	ldr	r3, [pc, #80]	@ (8008ec8 <VCU_TicksSinceLastMessage+0x68>)
 8008e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d105      	bne.n	8008e8a <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 8008e7e:	4b12      	ldr	r3, [pc, #72]	@ (8008ec8 <VCU_TicksSinceLastMessage+0x68>)
 8008e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	e013      	b.n	8008eb2 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec0 <VCU_TicksSinceLastMessage+0x60>)
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec8 <VCU_TicksSinceLastMessage+0x68>)
 8008e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e92:	1ad2      	subs	r2, r2, r3
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <VCU_TicksSinceLastMessage+0x60>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	490b      	ldr	r1, [pc, #44]	@ (8008ec8 <VCU_TicksSinceLastMessage+0x68>)
 8008e9c:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	1a41      	subs	r1, r0, r1
 8008ea2:	3901      	subs	r1, #1
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	441a      	add	r2, r3
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20000540 	.word	0x20000540
 8008ec4:	20000bb8 	.word	0x20000bb8
 8008ec8:	2000a4fc 	.word	0x2000a4fc
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 8008ee2:	4b67      	ldr	r3, [pc, #412]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008ee4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7f7 fb03 	bl	80004f4 <__aeabi_i2d>
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	4b64      	ldr	r3, [pc, #400]	@ (8009084 <VCU_TransmitBmsState+0x1b4>)
 8008ef4:	f7f7 fb68 	bl	80005c8 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4610      	mov	r0, r2
 8008efe:	4619      	mov	r1, r3
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	f7f7 f9a8 	bl	800025c <__adddf3>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4610      	mov	r0, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	f7f7 fe50 	bl	8000bb8 <__aeabi_d2f>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 8008f1c:	6978      	ldr	r0, [r7, #20]
 8008f1e:	f7f7 fafb 	bl	8000518 <__aeabi_f2d>
 8008f22:	a355      	add	r3, pc, #340	@ (adr r3, 8009078 <VCU_TransmitBmsState+0x1a8>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 fc78 	bl	800081c <__aeabi_ddiv>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4610      	mov	r0, r2
 8008f32:	4619      	mov	r1, r3
 8008f34:	f7f7 fe40 	bl	8000bb8 <__aeabi_d2f>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 8008f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f44:	edc7 7a01 	vstr	s15, [r7, #4]
 8008f48:	793b      	ldrb	r3, [r7, #4]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	893b      	ldrh	r3, [r7, #8]
 8008f4e:	f362 0389 	bfi	r3, r2, #2, #8
 8008f52:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 8008f54:	4b4a      	ldr	r3, [pc, #296]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	7a3b      	ldrb	r3, [r7, #8]
 8008f62:	f362 0301 	bfi	r3, r2, #0, #2
 8008f66:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 8008f68:	4b45      	ldr	r3, [pc, #276]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	7a7b      	ldrb	r3, [r7, #9]
 8008f76:	f362 0383 	bfi	r3, r2, #2, #2
 8008f7a:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 8008f7c:	4b40      	ldr	r3, [pc, #256]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008f7e:	7d9b      	ldrb	r3, [r3, #22]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	7a7b      	ldrb	r3, [r7, #9]
 8008f88:	f362 1304 	bfi	r3, r2, #4, #1
 8008f8c:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 8008f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008f90:	7d5b      	ldrb	r3, [r3, #21]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	7a7b      	ldrb	r3, [r7, #9]
 8008f9a:	f362 1345 	bfi	r3, r2, #5, #1
 8008f9e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 8008fa0:	4b37      	ldr	r3, [pc, #220]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008fa2:	7ddb      	ldrb	r3, [r3, #23]
 8008fa4:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 8008fa6:	4b36      	ldr	r3, [pc, #216]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008fa8:	7e1b      	ldrb	r3, [r3, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 8008fae:	7a7b      	ldrb	r3, [r7, #9]
 8008fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb4:	727b      	strb	r3, [r7, #9]
 8008fb6:	e003      	b.n	8008fc0 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 8008fb8:	7a7b      	ldrb	r3, [r7, #9]
 8008fba:	f36f 1386 	bfc	r3, #6, #1
 8008fbe:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 8008fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008fc2:	7d1b      	ldrb	r3, [r3, #20]
 8008fc4:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 8008fc6:	7a7b      	ldrb	r3, [r7, #9]
 8008fc8:	f36f 13c7 	bfc	r3, #7, #1
 8008fcc:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 8008fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8008fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 8008fde:	4b2a      	ldr	r3, [pc, #168]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 8008fe4:	4b29      	ldr	r3, [pc, #164]	@ (800908c <VCU_TransmitBmsState+0x1bc>)
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ff0:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 8008ff4:	4b22      	ldr	r3, [pc, #136]	@ (8009080 <VCU_TransmitBmsState+0x1b0>)
 8008ff6:	895b      	ldrh	r3, [r3, #10]
 8008ff8:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009002:	b299      	uxth	r1, r3
 8009004:	4a20      	ldr	r2, [pc, #128]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8009006:	8813      	ldrh	r3, [r2, #0]
 8009008:	f361 030a 	bfi	r3, r1, #0, #11
 800900c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800900e:	4a1e      	ldr	r2, [pc, #120]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	f36f 23dc 	bfc	r3, #11, #18
 8009016:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009018:	4a1b      	ldr	r2, [pc, #108]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 800901a:	7913      	ldrb	r3, [r2, #4]
 800901c:	f36f 1386 	bfc	r3, #6, #1
 8009020:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009022:	4a19      	ldr	r2, [pc, #100]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8009024:	7913      	ldrb	r3, [r2, #4]
 8009026:	2108      	movs	r1, #8
 8009028:	f361 0303 	bfi	r3, r1, #0, #4
 800902c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800902e:	4a16      	ldr	r2, [pc, #88]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8009030:	7913      	ldrb	r3, [r2, #4]
 8009032:	f36f 13c7 	bfc	r3, #7, #1
 8009036:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009038:	4a13      	ldr	r2, [pc, #76]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 800903a:	7913      	ldrb	r3, [r2, #4]
 800903c:	f36f 1304 	bfc	r3, #4, #1
 8009040:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009042:	4b13      	ldr	r3, [pc, #76]	@ (8009090 <VCU_TransmitBmsState+0x1c0>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <VCU_TransmitBmsState+0x198>
 800904e:	4b0e      	ldr	r3, [pc, #56]	@ (8009088 <VCU_TransmitBmsState+0x1b8>)
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009056:	b29b      	uxth	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	490e      	ldr	r1, [pc, #56]	@ (8009094 <VCU_TransmitBmsState+0x1c4>)
 800905c:	480e      	ldr	r0, [pc, #56]	@ (8009098 <VCU_TransmitBmsState+0x1c8>)
 800905e:	f007 f9a3 	bl	80103a8 <siprintf>
 8009062:	480d      	ldr	r0, [pc, #52]	@ (8009098 <VCU_TransmitBmsState+0x1c8>)
 8009064:	f7fa fb6e 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 8009068:	2000      	movs	r0, #0
 800906a:	f7ff fdaf 	bl	8008bcc <VCU_TransmitMessageQueue>
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	9999999a 	.word	0x9999999a
 800907c:	3fd99999 	.word	0x3fd99999
 8009080:	2000a4fc 	.word	0x2000a4fc
 8009084:	3fe00000 	.word	0x3fe00000
 8009088:	2000a55c 	.word	0x2000a55c
 800908c:	2000a568 	.word	0x2000a568
 8009090:	20000008 	.word	0x20000008
 8009094:	08015060 	.word	0x08015060
 8009098:	200009fc 	.word	0x200009fc
 800909c:	00000000 	.word	0x00000000

080090a0 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 80090a6:	f04f 0300 	mov.w	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 80090ac:	f04f 0300 	mov.w	r3, #0
 80090b0:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 80090b2:	4b65      	ldr	r3, [pc, #404]	@ (8009248 <VCU_TransmitBmsData1+0x1a8>)
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7f7 fa0c 	bl	80004d4 <__aeabi_ui2d>
 80090bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8009238 <VCU_TransmitBmsData1+0x198>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f7f7 fa81 	bl	80005c8 <__aeabi_dmul>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	4b5e      	ldr	r3, [pc, #376]	@ (800924c <VCU_TransmitBmsData1+0x1ac>)
 80090d4:	f7f7 f8c0 	bl	8000258 <__aeabi_dsub>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4610      	mov	r0, r2
 80090de:	4619      	mov	r1, r3
 80090e0:	f7f7 fd6a 	bl	8000bb8 <__aeabi_d2f>
 80090e4:	4603      	mov	r3, r0
 80090e6:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7f7 fa15 	bl	8000518 <__aeabi_f2d>
 80090ee:	a352      	add	r3, pc, #328	@ (adr r3, 8009238 <VCU_TransmitBmsData1+0x198>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 fb92 	bl	800081c <__aeabi_ddiv>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4610      	mov	r0, r2
 80090fe:	4619      	mov	r1, r3
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	4b52      	ldr	r3, [pc, #328]	@ (8009250 <VCU_TransmitBmsData1+0x1b0>)
 8009106:	f7f7 f8a9 	bl	800025c <__adddf3>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4610      	mov	r0, r2
 8009110:	4619      	mov	r1, r3
 8009112:	f7f7 fd51 	bl	8000bb8 <__aeabi_d2f>
 8009116:	4603      	mov	r3, r0
 8009118:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800911a:	edd7 7a02 	vldr	s15, [r7, #8]
 800911e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009122:	ee17 3a90 	vmov	r3, s15
 8009126:	b29b      	uxth	r3, r3
 8009128:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800912a:	4b47      	ldr	r3, [pc, #284]	@ (8009248 <VCU_TransmitBmsData1+0x1a8>)
 800912c:	899b      	ldrh	r3, [r3, #12]
 800912e:	4618      	mov	r0, r3
 8009130:	f7f7 f9e0 	bl	80004f4 <__aeabi_i2d>
 8009134:	a342      	add	r3, pc, #264	@ (adr r3, 8009240 <VCU_TransmitBmsData1+0x1a0>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 fa45 	bl	80005c8 <__aeabi_dmul>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4610      	mov	r0, r2
 8009144:	4619      	mov	r1, r3
 8009146:	f04f 0200 	mov.w	r2, #0
 800914a:	f04f 0300 	mov.w	r3, #0
 800914e:	f7f7 f885 	bl	800025c <__adddf3>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4610      	mov	r0, r2
 8009158:	4619      	mov	r1, r3
 800915a:	f7f7 fd2d 	bl	8000bb8 <__aeabi_d2f>
 800915e:	4603      	mov	r3, r0
 8009160:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7f7 f9d8 	bl	8000518 <__aeabi_f2d>
 8009168:	a333      	add	r3, pc, #204	@ (adr r3, 8009238 <VCU_TransmitBmsData1+0x198>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 fb55 	bl	800081c <__aeabi_ddiv>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4610      	mov	r0, r2
 8009178:	4619      	mov	r1, r3
 800917a:	f7f7 fd1d 	bl	8000bb8 <__aeabi_d2f>
 800917e:	4603      	mov	r3, r0
 8009180:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 8009182:	edd7 7a02 	vldr	s15, [r7, #8]
 8009186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800918a:	ee17 3a90 	vmov	r3, s15
 800918e:	b29b      	uxth	r3, r3
 8009190:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 8009196:	4b2f      	ldr	r3, [pc, #188]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800919c:	4b2d      	ldr	r3, [pc, #180]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 800919e:	2200      	movs	r2, #0
 80091a0:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 80091a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 80091a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009258 <VCU_TransmitBmsData1+0x1b8>)
 80091aa:	461a      	mov	r2, r3
 80091ac:	463b      	mov	r3, r7
 80091ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091b2:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 80091b6:	4b24      	ldr	r3, [pc, #144]	@ (8009248 <VCU_TransmitBmsData1+0x1a8>)
 80091b8:	895b      	ldrh	r3, [r3, #10]
 80091ba:	f203 4321 	addw	r3, r3, #1057	@ 0x421
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091c4:	b299      	uxth	r1, r3
 80091c6:	4a23      	ldr	r2, [pc, #140]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091c8:	8813      	ldrh	r3, [r2, #0]
 80091ca:	f361 030a 	bfi	r3, r1, #0, #11
 80091ce:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 80091d0:	4a20      	ldr	r2, [pc, #128]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	f36f 23dc 	bfc	r3, #11, #18
 80091d8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80091da:	4a1e      	ldr	r2, [pc, #120]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091dc:	7913      	ldrb	r3, [r2, #4]
 80091de:	f36f 1386 	bfc	r3, #6, #1
 80091e2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80091e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091e6:	7913      	ldrb	r3, [r2, #4]
 80091e8:	2108      	movs	r1, #8
 80091ea:	f361 0303 	bfi	r3, r1, #0, #4
 80091ee:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80091f0:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091f2:	7913      	ldrb	r3, [r2, #4]
 80091f4:	f36f 13c7 	bfc	r3, #7, #1
 80091f8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80091fa:	4a16      	ldr	r2, [pc, #88]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 80091fc:	7913      	ldrb	r3, [r2, #4]
 80091fe:	f36f 1304 	bfc	r3, #4, #1
 8009202:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009204:	4b15      	ldr	r3, [pc, #84]	@ (800925c <VCU_TransmitBmsData1+0x1bc>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00c      	beq.n	800922a <VCU_TransmitBmsData1+0x18a>
 8009210:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <VCU_TransmitBmsData1+0x1b4>)
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009218:	b29b      	uxth	r3, r3
 800921a:	461a      	mov	r2, r3
 800921c:	4910      	ldr	r1, [pc, #64]	@ (8009260 <VCU_TransmitBmsData1+0x1c0>)
 800921e:	4811      	ldr	r0, [pc, #68]	@ (8009264 <VCU_TransmitBmsData1+0x1c4>)
 8009220:	f007 f8c2 	bl	80103a8 <siprintf>
 8009224:	480f      	ldr	r0, [pc, #60]	@ (8009264 <VCU_TransmitBmsData1+0x1c4>)
 8009226:	f7fa fa8d 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800922a:	2000      	movs	r0, #0
 800922c:	f7ff fcce 	bl	8008bcc <VCU_TransmitMessageQueue>
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	9999999a 	.word	0x9999999a
 800923c:	3fa99999 	.word	0x3fa99999
 8009240:	eb851eb8 	.word	0xeb851eb8
 8009244:	3f8eb851 	.word	0x3f8eb851
 8009248:	2000a4fc 	.word	0x2000a4fc
 800924c:	40990000 	.word	0x40990000
 8009250:	40df4000 	.word	0x40df4000
 8009254:	2000a55c 	.word	0x2000a55c
 8009258:	2000a568 	.word	0x2000a568
 800925c:	20000008 	.word	0x20000008
 8009260:	08015078 	.word	0x08015078
 8009264:	200009fc 	.word	0x200009fc

08009268 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800927a:	4b95      	ldr	r3, [pc, #596]	@ (80094d0 <VCU_TransmitBmsData2+0x268>)
 800927c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009280:	4618      	mov	r0, r3
 8009282:	f7f7 f937 	bl	80004f4 <__aeabi_i2d>
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	4b92      	ldr	r3, [pc, #584]	@ (80094d4 <VCU_TransmitBmsData2+0x26c>)
 800928c:	f7f7 f99c 	bl	80005c8 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4610      	mov	r0, r2
 8009296:	4619      	mov	r1, r3
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	f7f6 ffdc 	bl	800025c <__adddf3>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	f7f7 fc84 	bl	8000bb8 <__aeabi_d2f>
 80092b0:	4603      	mov	r3, r0
 80092b2:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7f7 f92f 	bl	8000518 <__aeabi_f2d>
 80092ba:	a381      	add	r3, pc, #516	@ (adr r3, 80094c0 <VCU_TransmitBmsData2+0x258>)
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f7f7 faac 	bl	800081c <__aeabi_ddiv>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4610      	mov	r0, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7f7 fc74 	bl	8000bb8 <__aeabi_d2f>
 80092d0:	4603      	mov	r3, r0
 80092d2:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 80092d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80092d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092dc:	ee17 3a90 	vmov	r3, s15
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 80092e4:	4b7a      	ldr	r3, [pc, #488]	@ (80094d0 <VCU_TransmitBmsData2+0x268>)
 80092e6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7f7 f903 	bl	80004f4 <__aeabi_i2d>
 80092ee:	a376      	add	r3, pc, #472	@ (adr r3, 80094c8 <VCU_TransmitBmsData2+0x260>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f7 f968 	bl	80005c8 <__aeabi_dmul>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4610      	mov	r0, r2
 80092fe:	4619      	mov	r1, r3
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	f7f6 ffa8 	bl	800025c <__adddf3>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4610      	mov	r0, r2
 8009312:	4619      	mov	r1, r3
 8009314:	f7f7 fc50 	bl	8000bb8 <__aeabi_d2f>
 8009318:	4603      	mov	r3, r0
 800931a:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7f7 f8fb 	bl	8000518 <__aeabi_f2d>
 8009322:	a369      	add	r3, pc, #420	@ (adr r3, 80094c8 <VCU_TransmitBmsData2+0x260>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f7f7 fa78 	bl	800081c <__aeabi_ddiv>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4610      	mov	r0, r2
 8009332:	4619      	mov	r1, r3
 8009334:	f7f7 fc40 	bl	8000bb8 <__aeabi_d2f>
 8009338:	4603      	mov	r3, r0
 800933a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800933c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009344:	ee17 3a90 	vmov	r3, s15
 8009348:	b29b      	uxth	r3, r3
 800934a:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800934c:	4b60      	ldr	r3, [pc, #384]	@ (80094d0 <VCU_TransmitBmsData2+0x268>)
 800934e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009350:	4618      	mov	r0, r3
 8009352:	f7f7 f8cf 	bl	80004f4 <__aeabi_i2d>
 8009356:	a35c      	add	r3, pc, #368	@ (adr r3, 80094c8 <VCU_TransmitBmsData2+0x260>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f7 f934 	bl	80005c8 <__aeabi_dmul>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4610      	mov	r0, r2
 8009366:	4619      	mov	r1, r3
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	f7f6 ff74 	bl	800025c <__adddf3>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4610      	mov	r0, r2
 800937a:	4619      	mov	r1, r3
 800937c:	f7f7 fc1c 	bl	8000bb8 <__aeabi_d2f>
 8009380:	4603      	mov	r3, r0
 8009382:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7f7 f8c7 	bl	8000518 <__aeabi_f2d>
 800938a:	a34f      	add	r3, pc, #316	@ (adr r3, 80094c8 <VCU_TransmitBmsData2+0x260>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f7 fa44 	bl	800081c <__aeabi_ddiv>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4610      	mov	r0, r2
 800939a:	4619      	mov	r1, r3
 800939c:	f7f7 fc0c 	bl	8000bb8 <__aeabi_d2f>
 80093a0:	4603      	mov	r3, r0
 80093a2:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 80093a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80093a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ac:	ee17 3a90 	vmov	r3, s15
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 80093b4:	4b46      	ldr	r3, [pc, #280]	@ (80094d0 <VCU_TransmitBmsData2+0x268>)
 80093b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f7 f89b 	bl	80004f4 <__aeabi_i2d>
 80093be:	a342      	add	r3, pc, #264	@ (adr r3, 80094c8 <VCU_TransmitBmsData2+0x260>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	f7f7 f900 	bl	80005c8 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4610      	mov	r0, r2
 80093ce:	4619      	mov	r1, r3
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	f7f6 ff40 	bl	800025c <__adddf3>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4610      	mov	r0, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	f7f7 fbe8 	bl	8000bb8 <__aeabi_d2f>
 80093e8:	4603      	mov	r3, r0
 80093ea:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7f7 f893 	bl	8000518 <__aeabi_f2d>
 80093f2:	a335      	add	r3, pc, #212	@ (adr r3, 80094c8 <VCU_TransmitBmsData2+0x260>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f7f7 fa10 	bl	800081c <__aeabi_ddiv>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4610      	mov	r0, r2
 8009402:	4619      	mov	r1, r3
 8009404:	f7f7 fbd8 	bl	8000bb8 <__aeabi_d2f>
 8009408:	4603      	mov	r3, r0
 800940a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800940c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009414:	ee17 3a90 	vmov	r3, s15
 8009418:	b29b      	uxth	r3, r3
 800941a:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800941c:	4b2e      	ldr	r3, [pc, #184]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8009422:	4b2d      	ldr	r3, [pc, #180]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 8009424:	2200      	movs	r2, #0
 8009426:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 8009428:	4b2b      	ldr	r3, [pc, #172]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 800942a:	2200      	movs	r2, #0
 800942c:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800942e:	4b2b      	ldr	r3, [pc, #172]	@ (80094dc <VCU_TransmitBmsData2+0x274>)
 8009430:	461a      	mov	r2, r3
 8009432:	463b      	mov	r3, r7
 8009434:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009438:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800943c:	4b24      	ldr	r3, [pc, #144]	@ (80094d0 <VCU_TransmitBmsData2+0x268>)
 800943e:	895b      	ldrh	r3, [r3, #10]
 8009440:	f203 4322 	addw	r3, r3, #1058	@ 0x422
 8009444:	b29b      	uxth	r3, r3
 8009446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800944a:	b299      	uxth	r1, r3
 800944c:	4a22      	ldr	r2, [pc, #136]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 800944e:	8813      	ldrh	r3, [r2, #0]
 8009450:	f361 030a 	bfi	r3, r1, #0, #11
 8009454:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 8009456:	4a20      	ldr	r2, [pc, #128]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 8009458:	6813      	ldr	r3, [r2, #0]
 800945a:	f36f 23dc 	bfc	r3, #11, #18
 800945e:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009460:	4a1d      	ldr	r2, [pc, #116]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 8009462:	7913      	ldrb	r3, [r2, #4]
 8009464:	f36f 1386 	bfc	r3, #6, #1
 8009468:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800946a:	4a1b      	ldr	r2, [pc, #108]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 800946c:	7913      	ldrb	r3, [r2, #4]
 800946e:	2108      	movs	r1, #8
 8009470:	f361 0303 	bfi	r3, r1, #0, #4
 8009474:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009476:	4a18      	ldr	r2, [pc, #96]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 8009478:	7913      	ldrb	r3, [r2, #4]
 800947a:	f36f 13c7 	bfc	r3, #7, #1
 800947e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009480:	4a15      	ldr	r2, [pc, #84]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 8009482:	7913      	ldrb	r3, [r2, #4]
 8009484:	f36f 1304 	bfc	r3, #4, #1
 8009488:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800948a:	4b15      	ldr	r3, [pc, #84]	@ (80094e0 <VCU_TransmitBmsData2+0x278>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00c      	beq.n	80094b0 <VCU_TransmitBmsData2+0x248>
 8009496:	4b10      	ldr	r3, [pc, #64]	@ (80094d8 <VCU_TransmitBmsData2+0x270>)
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800949e:	b29b      	uxth	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	4910      	ldr	r1, [pc, #64]	@ (80094e4 <VCU_TransmitBmsData2+0x27c>)
 80094a4:	4810      	ldr	r0, [pc, #64]	@ (80094e8 <VCU_TransmitBmsData2+0x280>)
 80094a6:	f006 ff7f 	bl	80103a8 <siprintf>
 80094aa:	480f      	ldr	r0, [pc, #60]	@ (80094e8 <VCU_TransmitBmsData2+0x280>)
 80094ac:	f7fa f94a 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 80094b0:	2000      	movs	r0, #0
 80094b2:	f7ff fb8b 	bl	8008bcc <VCU_TransmitMessageQueue>
}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	9999999a 	.word	0x9999999a
 80094c4:	3f599999 	.word	0x3f599999
 80094c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80094cc:	3f50624d 	.word	0x3f50624d
 80094d0:	2000a4fc 	.word	0x2000a4fc
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	2000a55c 	.word	0x2000a55c
 80094dc:	2000a568 	.word	0x2000a568
 80094e0:	20000008 	.word	0x20000008
 80094e4:	08015094 	.word	0x08015094
 80094e8:	200009fc 	.word	0x200009fc
 80094ec:	00000000 	.word	0x00000000

080094f0 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 8009502:	4b89      	ldr	r3, [pc, #548]	@ (8009728 <VCU_TransmitBmsData3+0x238>)
 8009504:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009506:	4618      	mov	r0, r3
 8009508:	f7f6 fff4 	bl	80004f4 <__aeabi_i2d>
 800950c:	a380      	add	r3, pc, #512	@ (adr r3, 8009710 <VCU_TransmitBmsData3+0x220>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 f859 	bl	80005c8 <__aeabi_dmul>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4610      	mov	r0, r2
 800951c:	4619      	mov	r1, r3
 800951e:	a37e      	add	r3, pc, #504	@ (adr r3, 8009718 <VCU_TransmitBmsData3+0x228>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f7f6 fe98 	bl	8000258 <__aeabi_dsub>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4610      	mov	r0, r2
 800952e:	4619      	mov	r1, r3
 8009530:	f7f7 fb42 	bl	8000bb8 <__aeabi_d2f>
 8009534:	4603      	mov	r3, r0
 8009536:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7f6 ffed 	bl	8000518 <__aeabi_f2d>
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	4b7a      	ldr	r3, [pc, #488]	@ (800972c <VCU_TransmitBmsData3+0x23c>)
 8009544:	f7f7 f96a 	bl	800081c <__aeabi_ddiv>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4610      	mov	r0, r2
 800954e:	4619      	mov	r1, r3
 8009550:	a373      	add	r3, pc, #460	@ (adr r3, 8009720 <VCU_TransmitBmsData3+0x230>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f6 fe81 	bl	800025c <__adddf3>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4610      	mov	r0, r2
 8009560:	4619      	mov	r1, r3
 8009562:	f7f7 fb29 	bl	8000bb8 <__aeabi_d2f>
 8009566:	4603      	mov	r3, r0
 8009568:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800956a:	edd7 7a02 	vldr	s15, [r7, #8]
 800956e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009572:	ee17 3a90 	vmov	r3, s15
 8009576:	b29b      	uxth	r3, r3
 8009578:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800957a:	4b6b      	ldr	r3, [pc, #428]	@ (8009728 <VCU_TransmitBmsData3+0x238>)
 800957c:	8bdb      	ldrh	r3, [r3, #30]
 800957e:	4618      	mov	r0, r3
 8009580:	f7f6 ffb8 	bl	80004f4 <__aeabi_i2d>
 8009584:	a362      	add	r3, pc, #392	@ (adr r3, 8009710 <VCU_TransmitBmsData3+0x220>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f7 f81d 	bl	80005c8 <__aeabi_dmul>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4610      	mov	r0, r2
 8009594:	4619      	mov	r1, r3
 8009596:	a360      	add	r3, pc, #384	@ (adr r3, 8009718 <VCU_TransmitBmsData3+0x228>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f6 fe5c 	bl	8000258 <__aeabi_dsub>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	4610      	mov	r0, r2
 80095a6:	4619      	mov	r1, r3
 80095a8:	f7f7 fb06 	bl	8000bb8 <__aeabi_d2f>
 80095ac:	4603      	mov	r3, r0
 80095ae:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7f6 ffb1 	bl	8000518 <__aeabi_f2d>
 80095b6:	f04f 0200 	mov.w	r2, #0
 80095ba:	4b5c      	ldr	r3, [pc, #368]	@ (800972c <VCU_TransmitBmsData3+0x23c>)
 80095bc:	f7f7 f92e 	bl	800081c <__aeabi_ddiv>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4610      	mov	r0, r2
 80095c6:	4619      	mov	r1, r3
 80095c8:	a355      	add	r3, pc, #340	@ (adr r3, 8009720 <VCU_TransmitBmsData3+0x230>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f6 fe45 	bl	800025c <__adddf3>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4610      	mov	r0, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	f7f7 faed 	bl	8000bb8 <__aeabi_d2f>
 80095de:	4603      	mov	r3, r0
 80095e0:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 80095e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80095e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ea:	ee17 3a90 	vmov	r3, s15
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 80095f2:	4b4d      	ldr	r3, [pc, #308]	@ (8009728 <VCU_TransmitBmsData3+0x238>)
 80095f4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f6 ff7c 	bl	80004f4 <__aeabi_i2d>
 80095fc:	a344      	add	r3, pc, #272	@ (adr r3, 8009710 <VCU_TransmitBmsData3+0x220>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f7f6 ffe1 	bl	80005c8 <__aeabi_dmul>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4610      	mov	r0, r2
 800960c:	4619      	mov	r1, r3
 800960e:	a342      	add	r3, pc, #264	@ (adr r3, 8009718 <VCU_TransmitBmsData3+0x228>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fe20 	bl	8000258 <__aeabi_dsub>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4610      	mov	r0, r2
 800961e:	4619      	mov	r1, r3
 8009620:	f7f7 faca 	bl	8000bb8 <__aeabi_d2f>
 8009624:	4603      	mov	r3, r0
 8009626:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7f6 ff75 	bl	8000518 <__aeabi_f2d>
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	4b3e      	ldr	r3, [pc, #248]	@ (800972c <VCU_TransmitBmsData3+0x23c>)
 8009634:	f7f7 f8f2 	bl	800081c <__aeabi_ddiv>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4610      	mov	r0, r2
 800963e:	4619      	mov	r1, r3
 8009640:	a337      	add	r3, pc, #220	@ (adr r3, 8009720 <VCU_TransmitBmsData3+0x230>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 fe09 	bl	800025c <__adddf3>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4610      	mov	r0, r2
 8009650:	4619      	mov	r1, r3
 8009652:	f7f7 fab1 	bl	8000bb8 <__aeabi_d2f>
 8009656:	4603      	mov	r3, r0
 8009658:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800965a:	edd7 7a02 	vldr	s15, [r7, #8]
 800965e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009662:	ee17 3a90 	vmov	r3, s15
 8009666:	b29b      	uxth	r3, r3
 8009668:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800966e:	4b30      	ldr	r3, [pc, #192]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8009674:	4b2e      	ldr	r3, [pc, #184]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 8009676:	2200      	movs	r2, #0
 8009678:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800967a:	4b2d      	ldr	r3, [pc, #180]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 800967c:	2200      	movs	r2, #0
 800967e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 8009680:	4b2c      	ldr	r3, [pc, #176]	@ (8009734 <VCU_TransmitBmsData3+0x244>)
 8009682:	461a      	mov	r2, r3
 8009684:	463b      	mov	r3, r7
 8009686:	e893 0003 	ldmia.w	r3, {r0, r1}
 800968a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800968e:	4b26      	ldr	r3, [pc, #152]	@ (8009728 <VCU_TransmitBmsData3+0x238>)
 8009690:	895b      	ldrh	r3, [r3, #10]
 8009692:	f203 4323 	addw	r3, r3, #1059	@ 0x423
 8009696:	b29b      	uxth	r3, r3
 8009698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800969c:	b299      	uxth	r1, r3
 800969e:	4a24      	ldr	r2, [pc, #144]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096a0:	8813      	ldrh	r3, [r2, #0]
 80096a2:	f361 030a 	bfi	r3, r1, #0, #11
 80096a6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 80096a8:	4a21      	ldr	r2, [pc, #132]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096aa:	6813      	ldr	r3, [r2, #0]
 80096ac:	f36f 23dc 	bfc	r3, #11, #18
 80096b0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80096b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096b4:	7913      	ldrb	r3, [r2, #4]
 80096b6:	f36f 1386 	bfc	r3, #6, #1
 80096ba:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80096bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096be:	7913      	ldrb	r3, [r2, #4]
 80096c0:	2108      	movs	r1, #8
 80096c2:	f361 0303 	bfi	r3, r1, #0, #4
 80096c6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80096c8:	4a19      	ldr	r2, [pc, #100]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096ca:	7913      	ldrb	r3, [r2, #4]
 80096cc:	f36f 13c7 	bfc	r3, #7, #1
 80096d0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80096d2:	4a17      	ldr	r2, [pc, #92]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096d4:	7913      	ldrb	r3, [r2, #4]
 80096d6:	f36f 1304 	bfc	r3, #4, #1
 80096da:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 80096dc:	4b16      	ldr	r3, [pc, #88]	@ (8009738 <VCU_TransmitBmsData3+0x248>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00c      	beq.n	8009702 <VCU_TransmitBmsData3+0x212>
 80096e8:	4b11      	ldr	r3, [pc, #68]	@ (8009730 <VCU_TransmitBmsData3+0x240>)
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	461a      	mov	r2, r3
 80096f4:	4911      	ldr	r1, [pc, #68]	@ (800973c <VCU_TransmitBmsData3+0x24c>)
 80096f6:	4812      	ldr	r0, [pc, #72]	@ (8009740 <VCU_TransmitBmsData3+0x250>)
 80096f8:	f006 fe56 	bl	80103a8 <siprintf>
 80096fc:	4810      	ldr	r0, [pc, #64]	@ (8009740 <VCU_TransmitBmsData3+0x250>)
 80096fe:	f7fa f821 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 8009702:	2000      	movs	r0, #0
 8009704:	f7ff fa62 	bl	8008bcc <VCU_TransmitMessageQueue>
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	47ae147b 	.word	0x47ae147b
 8009714:	3f847ae1 	.word	0x3f847ae1
 8009718:	cccccccd 	.word	0xcccccccd
 800971c:	404baccc 	.word	0x404baccc
 8009720:	00000000 	.word	0x00000000
 8009724:	40c11000 	.word	0x40c11000
 8009728:	2000a4fc 	.word	0x2000a4fc
 800972c:	3fa00000 	.word	0x3fa00000
 8009730:	2000a55c 	.word	0x2000a55c
 8009734:	2000a568 	.word	0x2000a568
 8009738:	20000008 	.word	0x20000008
 800973c:	080150b0 	.word	0x080150b0
 8009740:	200009fc 	.word	0x200009fc
 8009744:	00000000 	.word	0x00000000

08009748 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 8009754:	f04f 0300 	mov.w	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800975a:	4b83      	ldr	r3, [pc, #524]	@ (8009968 <VCU_TransmitBmsData5+0x220>)
 800975c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800975e:	4618      	mov	r0, r3
 8009760:	f7f6 feb8 	bl	80004d4 <__aeabi_ui2d>
 8009764:	a37c      	add	r3, pc, #496	@ (adr r3, 8009958 <VCU_TransmitBmsData5+0x210>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f7f6 ff2d 	bl	80005c8 <__aeabi_dmul>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4610      	mov	r0, r2
 8009774:	4619      	mov	r1, r3
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	4b7c      	ldr	r3, [pc, #496]	@ (800996c <VCU_TransmitBmsData5+0x224>)
 800977c:	f7f6 fd6c 	bl	8000258 <__aeabi_dsub>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4610      	mov	r0, r2
 8009786:	4619      	mov	r1, r3
 8009788:	f7f7 fa16 	bl	8000bb8 <__aeabi_d2f>
 800978c:	4603      	mov	r3, r0
 800978e:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7f6 fec1 	bl	8000518 <__aeabi_f2d>
 8009796:	a370      	add	r3, pc, #448	@ (adr r3, 8009958 <VCU_TransmitBmsData5+0x210>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f7 f83e 	bl	800081c <__aeabi_ddiv>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	4b70      	ldr	r3, [pc, #448]	@ (8009970 <VCU_TransmitBmsData5+0x228>)
 80097ae:	f7f6 fd55 	bl	800025c <__adddf3>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4610      	mov	r0, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	f7f7 f9fd 	bl	8000bb8 <__aeabi_d2f>
 80097be:	4603      	mov	r3, r0
 80097c0:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 80097c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80097c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ca:	ee17 3a90 	vmov	r3, s15
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 80097d2:	4b65      	ldr	r3, [pc, #404]	@ (8009968 <VCU_TransmitBmsData5+0x220>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7f6 fe7c 	bl	80004d4 <__aeabi_ui2d>
 80097dc:	a35e      	add	r3, pc, #376	@ (adr r3, 8009958 <VCU_TransmitBmsData5+0x210>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fef1 	bl	80005c8 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	4b5e      	ldr	r3, [pc, #376]	@ (800996c <VCU_TransmitBmsData5+0x224>)
 80097f4:	f7f6 fd30 	bl	8000258 <__aeabi_dsub>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4610      	mov	r0, r2
 80097fe:	4619      	mov	r1, r3
 8009800:	f7f7 f9da 	bl	8000bb8 <__aeabi_d2f>
 8009804:	4603      	mov	r3, r0
 8009806:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7f6 fe85 	bl	8000518 <__aeabi_f2d>
 800980e:	a352      	add	r3, pc, #328	@ (adr r3, 8009958 <VCU_TransmitBmsData5+0x210>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f7 f802 	bl	800081c <__aeabi_ddiv>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	f04f 0200 	mov.w	r2, #0
 8009824:	4b52      	ldr	r3, [pc, #328]	@ (8009970 <VCU_TransmitBmsData5+0x228>)
 8009826:	f7f6 fd19 	bl	800025c <__adddf3>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4610      	mov	r0, r2
 8009830:	4619      	mov	r1, r3
 8009832:	f7f7 f9c1 	bl	8000bb8 <__aeabi_d2f>
 8009836:	4603      	mov	r3, r0
 8009838:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800983a:	edd7 7a02 	vldr	s15, [r7, #8]
 800983e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009842:	ee17 3a90 	vmov	r3, s15
 8009846:	b29b      	uxth	r3, r3
 8009848:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800984a:	4b47      	ldr	r3, [pc, #284]	@ (8009968 <VCU_TransmitBmsData5+0x220>)
 800984c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800984e:	4618      	mov	r0, r3
 8009850:	f7f6 fe50 	bl	80004f4 <__aeabi_i2d>
 8009854:	a342      	add	r3, pc, #264	@ (adr r3, 8009960 <VCU_TransmitBmsData5+0x218>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 feb5 	bl	80005c8 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4610      	mov	r0, r2
 8009864:	4619      	mov	r1, r3
 8009866:	f04f 0200 	mov.w	r2, #0
 800986a:	f04f 0300 	mov.w	r3, #0
 800986e:	f7f6 fcf5 	bl	800025c <__adddf3>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4610      	mov	r0, r2
 8009878:	4619      	mov	r1, r3
 800987a:	f7f7 f99d 	bl	8000bb8 <__aeabi_d2f>
 800987e:	4603      	mov	r3, r0
 8009880:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f7f6 fe48 	bl	8000518 <__aeabi_f2d>
 8009888:	a333      	add	r3, pc, #204	@ (adr r3, 8009958 <VCU_TransmitBmsData5+0x210>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 ffc5 	bl	800081c <__aeabi_ddiv>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4610      	mov	r0, r2
 8009898:	4619      	mov	r1, r3
 800989a:	f7f7 f98d 	bl	8000bb8 <__aeabi_d2f>
 800989e:	4603      	mov	r3, r0
 80098a0:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 80098a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80098a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098aa:	ee17 3a90 	vmov	r3, s15
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 80098b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 80098bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 80098be:	2200      	movs	r2, #0
 80098c0:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 80098c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 80098c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009978 <VCU_TransmitBmsData5+0x230>)
 80098ca:	461a      	mov	r2, r3
 80098cc:	463b      	mov	r3, r7
 80098ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098d2:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 80098d6:	4b24      	ldr	r3, [pc, #144]	@ (8009968 <VCU_TransmitBmsData5+0x220>)
 80098d8:	895b      	ldrh	r3, [r3, #10]
 80098da:	f203 4325 	addw	r3, r3, #1061	@ 0x425
 80098de:	b29b      	uxth	r3, r3
 80098e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098e4:	b299      	uxth	r1, r3
 80098e6:	4a23      	ldr	r2, [pc, #140]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 80098e8:	8813      	ldrh	r3, [r2, #0]
 80098ea:	f361 030a 	bfi	r3, r1, #0, #11
 80098ee:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 80098f0:	4a20      	ldr	r2, [pc, #128]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	f36f 23dc 	bfc	r3, #11, #18
 80098f8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80098fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 80098fc:	7913      	ldrb	r3, [r2, #4]
 80098fe:	f36f 1386 	bfc	r3, #6, #1
 8009902:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009904:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 8009906:	7913      	ldrb	r3, [r2, #4]
 8009908:	2108      	movs	r1, #8
 800990a:	f361 0303 	bfi	r3, r1, #0, #4
 800990e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009910:	4a18      	ldr	r2, [pc, #96]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 8009912:	7913      	ldrb	r3, [r2, #4]
 8009914:	f36f 13c7 	bfc	r3, #7, #1
 8009918:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800991a:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 800991c:	7913      	ldrb	r3, [r2, #4]
 800991e:	f36f 1304 	bfc	r3, #4, #1
 8009922:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009924:	4b15      	ldr	r3, [pc, #84]	@ (800997c <VCU_TransmitBmsData5+0x234>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00c      	beq.n	800994a <VCU_TransmitBmsData5+0x202>
 8009930:	4b10      	ldr	r3, [pc, #64]	@ (8009974 <VCU_TransmitBmsData5+0x22c>)
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009938:	b29b      	uxth	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	4910      	ldr	r1, [pc, #64]	@ (8009980 <VCU_TransmitBmsData5+0x238>)
 800993e:	4811      	ldr	r0, [pc, #68]	@ (8009984 <VCU_TransmitBmsData5+0x23c>)
 8009940:	f006 fd32 	bl	80103a8 <siprintf>
 8009944:	480f      	ldr	r0, [pc, #60]	@ (8009984 <VCU_TransmitBmsData5+0x23c>)
 8009946:	f7f9 fefd 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800994a:	2000      	movs	r0, #0
 800994c:	f7ff f93e 	bl	8008bcc <VCU_TransmitMessageQueue>
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	9999999a 	.word	0x9999999a
 800995c:	3fa99999 	.word	0x3fa99999
 8009960:	eb851eb8 	.word	0xeb851eb8
 8009964:	3f8eb851 	.word	0x3f8eb851
 8009968:	2000a4fc 	.word	0x2000a4fc
 800996c:	40990000 	.word	0x40990000
 8009970:	40df4000 	.word	0x40df4000
 8009974:	2000a55c 	.word	0x2000a55c
 8009978:	2000a568 	.word	0x2000a568
 800997c:	20000008 	.word	0x20000008
 8009980:	080150cc 	.word	0x080150cc
 8009984:	200009fc 	.word	0x200009fc

08009988 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 8009992:	2300      	movs	r3, #0
 8009994:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 8009996:	4b2d      	ldr	r3, [pc, #180]	@ (8009a4c <VCU_TransmitBmsData8+0xc4>)
 8009998:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800999c:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800999e:	2300      	movs	r3, #0
 80099a0:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 80099a2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a4c <VCU_TransmitBmsData8+0xc4>)
 80099a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80099a8:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 80099aa:	4b29      	ldr	r3, [pc, #164]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 80099b0:	4b27      	ldr	r3, [pc, #156]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 80099b6:	4b26      	ldr	r3, [pc, #152]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 80099bc:	4b25      	ldr	r3, [pc, #148]	@ (8009a54 <VCU_TransmitBmsData8+0xcc>)
 80099be:	461a      	mov	r2, r3
 80099c0:	463b      	mov	r3, r7
 80099c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099c6:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 80099ca:	4b20      	ldr	r3, [pc, #128]	@ (8009a4c <VCU_TransmitBmsData8+0xc4>)
 80099cc:	895b      	ldrh	r3, [r3, #10]
 80099ce:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099d8:	b299      	uxth	r1, r3
 80099da:	4a1d      	ldr	r2, [pc, #116]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099dc:	8813      	ldrh	r3, [r2, #0]
 80099de:	f361 030a 	bfi	r3, r1, #0, #11
 80099e2:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 80099e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	f36f 23dc 	bfc	r3, #11, #18
 80099ec:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80099ee:	4a18      	ldr	r2, [pc, #96]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099f0:	7913      	ldrb	r3, [r2, #4]
 80099f2:	f36f 1386 	bfc	r3, #6, #1
 80099f6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80099f8:	4a15      	ldr	r2, [pc, #84]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 80099fa:	7913      	ldrb	r3, [r2, #4]
 80099fc:	2108      	movs	r1, #8
 80099fe:	f361 0303 	bfi	r3, r1, #0, #4
 8009a02:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009a04:	4a12      	ldr	r2, [pc, #72]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 8009a06:	7913      	ldrb	r3, [r2, #4]
 8009a08:	f36f 13c7 	bfc	r3, #7, #1
 8009a0c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009a0e:	4a10      	ldr	r2, [pc, #64]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 8009a10:	7913      	ldrb	r3, [r2, #4]
 8009a12:	f36f 1304 	bfc	r3, #4, #1
 8009a16:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009a18:	4b0f      	ldr	r3, [pc, #60]	@ (8009a58 <VCU_TransmitBmsData8+0xd0>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00c      	beq.n	8009a3e <VCU_TransmitBmsData8+0xb6>
 8009a24:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <VCU_TransmitBmsData8+0xc8>)
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	461a      	mov	r2, r3
 8009a30:	490a      	ldr	r1, [pc, #40]	@ (8009a5c <VCU_TransmitBmsData8+0xd4>)
 8009a32:	480b      	ldr	r0, [pc, #44]	@ (8009a60 <VCU_TransmitBmsData8+0xd8>)
 8009a34:	f006 fcb8 	bl	80103a8 <siprintf>
 8009a38:	4809      	ldr	r0, [pc, #36]	@ (8009a60 <VCU_TransmitBmsData8+0xd8>)
 8009a3a:	f7f9 fe83 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f7ff f8c4 	bl	8008bcc <VCU_TransmitMessageQueue>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	2000a4fc 	.word	0x2000a4fc
 8009a50:	2000a55c 	.word	0x2000a55c
 8009a54:	2000a568 	.word	0x2000a568
 8009a58:	20000008 	.word	0x20000008
 8009a5c:	080150e8 	.word	0x080150e8
 8009a60:	200009fc 	.word	0x200009fc

08009a64 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 8009a6e:	2300      	movs	r3, #0
 8009a70:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 8009a72:	4b2d      	ldr	r3, [pc, #180]	@ (8009b28 <VCU_TransmitBmsData9+0xc4>)
 8009a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a78:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 8009a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8009b28 <VCU_TransmitBmsData9+0xc4>)
 8009a80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a84:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 8009a86:	4b29      	ldr	r3, [pc, #164]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8009a8c:	4b27      	ldr	r3, [pc, #156]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 8009a92:	4b26      	ldr	r3, [pc, #152]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 8009a98:	4b25      	ldr	r3, [pc, #148]	@ (8009b30 <VCU_TransmitBmsData9+0xcc>)
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	463b      	mov	r3, r7
 8009a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009aa2:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 8009aa6:	4b20      	ldr	r3, [pc, #128]	@ (8009b28 <VCU_TransmitBmsData9+0xc4>)
 8009aa8:	895b      	ldrh	r3, [r3, #10]
 8009aaa:	f203 4329 	addw	r3, r3, #1065	@ 0x429
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ab4:	b299      	uxth	r1, r3
 8009ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009ab8:	8813      	ldrh	r3, [r2, #0]
 8009aba:	f361 030a 	bfi	r3, r1, #0, #11
 8009abe:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 8009ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	f36f 23dc 	bfc	r3, #11, #18
 8009ac8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009aca:	4a18      	ldr	r2, [pc, #96]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009acc:	7913      	ldrb	r3, [r2, #4]
 8009ace:	f36f 1386 	bfc	r3, #6, #1
 8009ad2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009ad4:	4a15      	ldr	r2, [pc, #84]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009ad6:	7913      	ldrb	r3, [r2, #4]
 8009ad8:	2108      	movs	r1, #8
 8009ada:	f361 0303 	bfi	r3, r1, #0, #4
 8009ade:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009ae0:	4a12      	ldr	r2, [pc, #72]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009ae2:	7913      	ldrb	r3, [r2, #4]
 8009ae4:	f36f 13c7 	bfc	r3, #7, #1
 8009ae8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009aea:	4a10      	ldr	r2, [pc, #64]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009aec:	7913      	ldrb	r3, [r2, #4]
 8009aee:	f36f 1304 	bfc	r3, #4, #1
 8009af2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009af4:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <VCU_TransmitBmsData9+0xd0>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00c      	beq.n	8009b1a <VCU_TransmitBmsData9+0xb6>
 8009b00:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <VCU_TransmitBmsData9+0xc8>)
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	490a      	ldr	r1, [pc, #40]	@ (8009b38 <VCU_TransmitBmsData9+0xd4>)
 8009b0e:	480b      	ldr	r0, [pc, #44]	@ (8009b3c <VCU_TransmitBmsData9+0xd8>)
 8009b10:	f006 fc4a 	bl	80103a8 <siprintf>
 8009b14:	4809      	ldr	r0, [pc, #36]	@ (8009b3c <VCU_TransmitBmsData9+0xd8>)
 8009b16:	f7f9 fe15 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f7ff f856 	bl	8008bcc <VCU_TransmitMessageQueue>

}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	2000a4fc 	.word	0x2000a4fc
 8009b2c:	2000a55c 	.word	0x2000a55c
 8009b30:	2000a568 	.word	0x2000a568
 8009b34:	20000008 	.word	0x20000008
 8009b38:	08015104 	.word	0x08015104
 8009b3c:	200009fc 	.word	0x200009fc

08009b40 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 8009b4e:	2300      	movs	r3, #0
 8009b50:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 8009b52:	4b28      	ldr	r3, [pc, #160]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8009b58:	4b26      	ldr	r3, [pc, #152]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 8009b5e:	4b25      	ldr	r3, [pc, #148]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 8009b64:	4b24      	ldr	r3, [pc, #144]	@ (8009bf8 <VCU_TransmitBmsData10+0xb8>)
 8009b66:	461a      	mov	r2, r3
 8009b68:	463b      	mov	r3, r7
 8009b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b6e:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 8009b72:	4b22      	ldr	r3, [pc, #136]	@ (8009bfc <VCU_TransmitBmsData10+0xbc>)
 8009b74:	895b      	ldrh	r3, [r3, #10]
 8009b76:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b80:	b299      	uxth	r1, r3
 8009b82:	4a1c      	ldr	r2, [pc, #112]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009b84:	8813      	ldrh	r3, [r2, #0]
 8009b86:	f361 030a 	bfi	r3, r1, #0, #11
 8009b8a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 8009b8c:	4a19      	ldr	r2, [pc, #100]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	f36f 23dc 	bfc	r3, #11, #18
 8009b94:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009b96:	4a17      	ldr	r2, [pc, #92]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009b98:	7913      	ldrb	r3, [r2, #4]
 8009b9a:	f36f 1386 	bfc	r3, #6, #1
 8009b9e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009ba0:	4a14      	ldr	r2, [pc, #80]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009ba2:	7913      	ldrb	r3, [r2, #4]
 8009ba4:	2108      	movs	r1, #8
 8009ba6:	f361 0303 	bfi	r3, r1, #0, #4
 8009baa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009bac:	4a11      	ldr	r2, [pc, #68]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009bae:	7913      	ldrb	r3, [r2, #4]
 8009bb0:	f36f 13c7 	bfc	r3, #7, #1
 8009bb4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009bb8:	7913      	ldrb	r3, [r2, #4]
 8009bba:	f36f 1304 	bfc	r3, #4, #1
 8009bbe:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8009c00 <VCU_TransmitBmsData10+0xc0>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00c      	beq.n	8009be6 <VCU_TransmitBmsData10+0xa6>
 8009bcc:	4b09      	ldr	r3, [pc, #36]	@ (8009bf4 <VCU_TransmitBmsData10+0xb4>)
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	490a      	ldr	r1, [pc, #40]	@ (8009c04 <VCU_TransmitBmsData10+0xc4>)
 8009bda:	480b      	ldr	r0, [pc, #44]	@ (8009c08 <VCU_TransmitBmsData10+0xc8>)
 8009bdc:	f006 fbe4 	bl	80103a8 <siprintf>
 8009be0:	4809      	ldr	r0, [pc, #36]	@ (8009c08 <VCU_TransmitBmsData10+0xc8>)
 8009be2:	f7f9 fdaf 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 8009be6:	2000      	movs	r0, #0
 8009be8:	f7fe fff0 	bl	8008bcc <VCU_TransmitMessageQueue>

}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	2000a55c 	.word	0x2000a55c
 8009bf8:	2000a568 	.word	0x2000a568
 8009bfc:	2000a4fc 	.word	0x2000a4fc
 8009c00:	20000008 	.word	0x20000008
 8009c04:	08015120 	.word	0x08015120
 8009c08:	200009fc 	.word	0x200009fc

08009c0c <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 8009c10:	4b23      	ldr	r3, [pc, #140]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8009c16:	4b22      	ldr	r3, [pc, #136]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 8009c1c:	4b20      	ldr	r3, [pc, #128]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 8009c22:	4b20      	ldr	r3, [pc, #128]	@ (8009ca4 <VCU_RequestTime+0x98>)
 8009c24:	895b      	ldrh	r3, [r3, #10]
 8009c26:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c30:	b299      	uxth	r1, r3
 8009c32:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c34:	8813      	ldrh	r3, [r2, #0]
 8009c36:	f361 030a 	bfi	r3, r1, #0, #11
 8009c3a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 8009c3c:	4a18      	ldr	r2, [pc, #96]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	f36f 23dc 	bfc	r3, #11, #18
 8009c44:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009c46:	4a16      	ldr	r2, [pc, #88]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c48:	7913      	ldrb	r3, [r2, #4]
 8009c4a:	f36f 1386 	bfc	r3, #6, #1
 8009c4e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009c50:	4a13      	ldr	r2, [pc, #76]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c52:	7913      	ldrb	r3, [r2, #4]
 8009c54:	2108      	movs	r1, #8
 8009c56:	f361 0303 	bfi	r3, r1, #0, #4
 8009c5a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009c5c:	4a10      	ldr	r2, [pc, #64]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c5e:	7913      	ldrb	r3, [r2, #4]
 8009c60:	f36f 13c7 	bfc	r3, #7, #1
 8009c64:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009c66:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c68:	7913      	ldrb	r3, [r2, #4]
 8009c6a:	f36f 1304 	bfc	r3, #4, #1
 8009c6e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8009c70:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca8 <VCU_RequestTime+0x9c>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00c      	beq.n	8009c96 <VCU_RequestTime+0x8a>
 8009c7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ca0 <VCU_RequestTime+0x94>)
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	461a      	mov	r2, r3
 8009c88:	4908      	ldr	r1, [pc, #32]	@ (8009cac <VCU_RequestTime+0xa0>)
 8009c8a:	4809      	ldr	r0, [pc, #36]	@ (8009cb0 <VCU_RequestTime+0xa4>)
 8009c8c:	f006 fb8c 	bl	80103a8 <siprintf>
 8009c90:	4807      	ldr	r0, [pc, #28]	@ (8009cb0 <VCU_RequestTime+0xa4>)
 8009c92:	f7f9 fd57 	bl	8003744 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 8009c96:	2000      	movs	r0, #0
 8009c98:	f7fe ff98 	bl	8008bcc <VCU_TransmitMessageQueue>

}
 8009c9c:	bf00      	nop
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	2000a55c 	.word	0x2000a55c
 8009ca4:	2000a4fc 	.word	0x2000a4fc
 8009ca8:	20000008 	.word	0x20000008
 8009cac:	0801513c 	.word	0x0801513c
 8009cb0:	200009fc 	.word	0x200009fc

08009cb4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8009cb4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009cb6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009cb8:	3304      	adds	r3, #4

08009cba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009cba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009cbc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8009cbe:	d3f9      	bcc.n	8009cb4 <CopyDataInit>
  bx lr
 8009cc0:	4770      	bx	lr

08009cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8009cc2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8009cc4:	3004      	adds	r0, #4

08009cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8009cc6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8009cc8:	d3fb      	bcc.n	8009cc2 <FillZerobss>
  bx lr
 8009cca:	4770      	bx	lr

08009ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009ccc:	480c      	ldr	r0, [pc, #48]	@ (8009d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009cce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009cd0:	f7fe fe72 	bl	80089b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8009cd4:	480b      	ldr	r0, [pc, #44]	@ (8009d04 <LoopForever+0x6>)
 8009cd6:	490c      	ldr	r1, [pc, #48]	@ (8009d08 <LoopForever+0xa>)
 8009cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8009d0c <LoopForever+0xe>)
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f7ff ffed 	bl	8009cba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8009ce0:	480b      	ldr	r0, [pc, #44]	@ (8009d10 <LoopForever+0x12>)
 8009ce2:	490c      	ldr	r1, [pc, #48]	@ (8009d14 <LoopForever+0x16>)
 8009ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8009d18 <LoopForever+0x1a>)
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f7ff ffe7 	bl	8009cba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8009cec:	480b      	ldr	r0, [pc, #44]	@ (8009d1c <LoopForever+0x1e>)
 8009cee:	490c      	ldr	r1, [pc, #48]	@ (8009d20 <LoopForever+0x22>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f7ff ffe8 	bl	8009cc6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009cf6:	f007 fa83 	bl	8011200 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009cfa:	f7f9 ffb1 	bl	8003c60 <main>

08009cfe <LoopForever>:

LoopForever:
  b LoopForever
 8009cfe:	e7fe      	b.n	8009cfe <LoopForever>
  ldr   r0, =_estack
 8009d00:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8009d04:	20000008 	.word	0x20000008
 8009d08:	20000244 	.word	0x20000244
 8009d0c:	080157b8 	.word	0x080157b8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8009d10:	20030000 	.word	0x20030000
 8009d14:	20030000 	.word	0x20030000
 8009d18:	080159f4 	.word	0x080159f4
  INIT_BSS _sbss, _ebss
 8009d1c:	20000244 	.word	0x20000244
 8009d20:	2000a770 	.word	0x2000a770

08009d24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009d24:	e7fe      	b.n	8009d24 <ADC1_IRQHandler>
	...

08009d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d32:	4b0c      	ldr	r3, [pc, #48]	@ (8009d64 <HAL_Init+0x3c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a0b      	ldr	r2, [pc, #44]	@ (8009d64 <HAL_Init+0x3c>)
 8009d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d3e:	2003      	movs	r0, #3
 8009d40:	f000 f948 	bl	8009fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d44:	200f      	movs	r0, #15
 8009d46:	f000 f80f 	bl	8009d68 <HAL_InitTick>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	e001      	b.n	8009d5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009d56:	f7fe fb17 	bl	8008388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	58004000 	.word	0x58004000

08009d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8009d74:	4b17      	ldr	r3, [pc, #92]	@ (8009dd4 <HAL_InitTick+0x6c>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d024      	beq.n	8009dc6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009d7c:	f001 fe04 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 8009d80:	4602      	mov	r2, r0
 8009d82:	4b14      	ldr	r3, [pc, #80]	@ (8009dd4 <HAL_InitTick+0x6c>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	4619      	mov	r1, r3
 8009d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 f950 	bl	800a03a <HAL_SYSTICK_Config>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10f      	bne.n	8009dc0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b0f      	cmp	r3, #15
 8009da4:	d809      	bhi.n	8009dba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009da6:	2200      	movs	r2, #0
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	f000 f91c 	bl	8009fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009db2:	4a09      	ldr	r2, [pc, #36]	@ (8009dd8 <HAL_InitTick+0x70>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	e007      	b.n	8009dca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	73fb      	strb	r3, [r7, #15]
 8009dbe:	e004      	b.n	8009dca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
 8009dc4:	e001      	b.n	8009dca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20000018 	.word	0x20000018
 8009dd8:	20000014 	.word	0x20000014

08009ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009de0:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <HAL_IncTick+0x20>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b06      	ldr	r3, [pc, #24]	@ (8009e00 <HAL_IncTick+0x24>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4413      	add	r3, r2
 8009dec:	4a04      	ldr	r2, [pc, #16]	@ (8009e00 <HAL_IncTick+0x24>)
 8009dee:	6013      	str	r3, [r2, #0]
}
 8009df0:	bf00      	nop
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000018 	.word	0x20000018
 8009e00:	2000a5fc 	.word	0x2000a5fc

08009e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
  return uwTick;
 8009e08:	4b03      	ldr	r3, [pc, #12]	@ (8009e18 <HAL_GetTick+0x14>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	2000a5fc 	.word	0x2000a5fc

08009e1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8009e20:	4b03      	ldr	r3, [pc, #12]	@ (8009e30 <HAL_GetTickPrio+0x14>)
 8009e22:	681b      	ldr	r3, [r3, #0]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	20000014 	.word	0x20000014

08009e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e44:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <__NVIC_SetPriorityGrouping+0x44>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009e50:	4013      	ands	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e66:	4a04      	ldr	r2, [pc, #16]	@ (8009e78 <__NVIC_SetPriorityGrouping+0x44>)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	60d3      	str	r3, [r2, #12]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	e000ed00 	.word	0xe000ed00

08009e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e80:	4b04      	ldr	r3, [pc, #16]	@ (8009e94 <__NVIC_GetPriorityGrouping+0x18>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	f003 0307 	and.w	r3, r3, #7
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	e000ed00 	.word	0xe000ed00

08009e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	db0b      	blt.n	8009ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	f003 021f 	and.w	r2, r3, #31
 8009eb0:	4907      	ldr	r1, [pc, #28]	@ (8009ed0 <__NVIC_EnableIRQ+0x38>)
 8009eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb6:	095b      	lsrs	r3, r3, #5
 8009eb8:	2001      	movs	r0, #1
 8009eba:	fa00 f202 	lsl.w	r2, r0, r2
 8009ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	e000e100 	.word	0xe000e100

08009ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	db0a      	blt.n	8009efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	490c      	ldr	r1, [pc, #48]	@ (8009f20 <__NVIC_SetPriority+0x4c>)
 8009eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef2:	0112      	lsls	r2, r2, #4
 8009ef4:	b2d2      	uxtb	r2, r2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009efc:	e00a      	b.n	8009f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	4908      	ldr	r1, [pc, #32]	@ (8009f24 <__NVIC_SetPriority+0x50>)
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	3b04      	subs	r3, #4
 8009f0c:	0112      	lsls	r2, r2, #4
 8009f0e:	b2d2      	uxtb	r2, r2
 8009f10:	440b      	add	r3, r1
 8009f12:	761a      	strb	r2, [r3, #24]
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	e000e100 	.word	0xe000e100
 8009f24:	e000ed00 	.word	0xe000ed00

08009f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b089      	sub	sp, #36	@ 0x24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	f1c3 0307 	rsb	r3, r3, #7
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	bf28      	it	cs
 8009f46:	2304      	movcs	r3, #4
 8009f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	2b06      	cmp	r3, #6
 8009f50:	d902      	bls.n	8009f58 <NVIC_EncodePriority+0x30>
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	3b03      	subs	r3, #3
 8009f56:	e000      	b.n	8009f5a <NVIC_EncodePriority+0x32>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	fa02 f303 	lsl.w	r3, r2, r3
 8009f66:	43da      	mvns	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	401a      	ands	r2, r3
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f70:	f04f 31ff 	mov.w	r1, #4294967295
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7a:	43d9      	mvns	r1, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f80:	4313      	orrs	r3, r2
         );
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3724      	adds	r7, #36	@ 0x24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fa0:	d301      	bcc.n	8009fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e00f      	b.n	8009fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd0 <SysTick_Config+0x40>)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009fae:	210f      	movs	r1, #15
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb4:	f7ff ff8e 	bl	8009ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fb8:	4b05      	ldr	r3, [pc, #20]	@ (8009fd0 <SysTick_Config+0x40>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009fbe:	4b04      	ldr	r3, [pc, #16]	@ (8009fd0 <SysTick_Config+0x40>)
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	e000e010 	.word	0xe000e010

08009fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff29 	bl	8009e34 <__NVIC_SetPriorityGrouping>
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009ff8:	f7ff ff40 	bl	8009e7c <__NVIC_GetPriorityGrouping>
 8009ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	6978      	ldr	r0, [r7, #20]
 800a004:	f7ff ff90 	bl	8009f28 <NVIC_EncodePriority>
 800a008:	4602      	mov	r2, r0
 800a00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff ff5f 	bl	8009ed4 <__NVIC_SetPriority>
}
 800a016:	bf00      	nop
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	4603      	mov	r3, r0
 800a026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff ff33 	bl	8009e98 <__NVIC_EnableIRQ>
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff ffa4 	bl	8009f90 <SysTick_Config>
 800a048:	4603      	mov	r3, r0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e04f      	b.n	800a104 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d008      	beq.n	800a082 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2204      	movs	r2, #4
 800a074:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e040      	b.n	800a104 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 020e 	bic.w	r2, r2, #14
 800a090:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a09c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0201 	bic.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b6:	f003 021c 	and.w	r2, r3, #28
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0be:	2101      	movs	r1, #1
 800a0c0:	fa01 f202 	lsl.w	r2, r1, r2
 800a0c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a0ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00c      	beq.n	800a0f2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a0f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d005      	beq.n	800a134 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2204      	movs	r2, #4
 800a12c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	73fb      	strb	r3, [r7, #15]
 800a132:	e047      	b.n	800a1c4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 020e 	bic.w	r2, r2, #14
 800a142:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a15e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a162:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a168:	f003 021c 	and.w	r2, r3, #28
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a170:	2101      	movs	r1, #1
 800a172:	fa01 f202 	lsl.w	r2, r1, r2
 800a176:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a180:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00c      	beq.n	800a1a4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a198:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a1a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	4798      	blx	r3
    }
  }
  return status;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a1de:	e14c      	b.n	800a47a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 813e 	beq.w	800a474 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f003 0303 	and.w	r3, r3, #3
 800a200:	2b01      	cmp	r3, #1
 800a202:	d005      	beq.n	800a210 <HAL_GPIO_Init+0x40>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d130      	bne.n	800a272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	2203      	movs	r2, #3
 800a21c:	fa02 f303 	lsl.w	r3, r2, r3
 800a220:	43db      	mvns	r3, r3
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4013      	ands	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	fa02 f303 	lsl.w	r3, r2, r3
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4313      	orrs	r3, r2
 800a238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a246:	2201      	movs	r2, #1
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	fa02 f303 	lsl.w	r3, r2, r3
 800a24e:	43db      	mvns	r3, r3
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4013      	ands	r3, r2
 800a254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	091b      	lsrs	r3, r3, #4
 800a25c:	f003 0201 	and.w	r2, r3, #1
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d017      	beq.n	800a2ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	2203      	movs	r2, #3
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	43db      	mvns	r3, r3
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4013      	ands	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f003 0303 	and.w	r3, r3, #3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d123      	bne.n	800a302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	08da      	lsrs	r2, r3, #3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3208      	adds	r2, #8
 800a2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	220f      	movs	r2, #15
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f003 0307 	and.w	r3, r3, #7
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	08da      	lsrs	r2, r3, #3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3208      	adds	r2, #8
 800a2fc:	6939      	ldr	r1, [r7, #16]
 800a2fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	2203      	movs	r2, #3
 800a30e:	fa02 f303 	lsl.w	r3, r2, r3
 800a312:	43db      	mvns	r3, r3
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4013      	ands	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f003 0203 	and.w	r2, r3, #3
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	fa02 f303 	lsl.w	r3, r2, r3
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8098 	beq.w	800a474 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800a344:	4a54      	ldr	r2, [pc, #336]	@ (800a498 <HAL_GPIO_Init+0x2c8>)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	089b      	lsrs	r3, r3, #2
 800a34a:	3302      	adds	r3, #2
 800a34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	220f      	movs	r2, #15
 800a35c:	fa02 f303 	lsl.w	r3, r2, r3
 800a360:	43db      	mvns	r3, r3
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4013      	ands	r3, r2
 800a366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a36e:	d019      	beq.n	800a3a4 <HAL_GPIO_Init+0x1d4>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a4a      	ldr	r2, [pc, #296]	@ (800a49c <HAL_GPIO_Init+0x2cc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d013      	beq.n	800a3a0 <HAL_GPIO_Init+0x1d0>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a49      	ldr	r2, [pc, #292]	@ (800a4a0 <HAL_GPIO_Init+0x2d0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00d      	beq.n	800a39c <HAL_GPIO_Init+0x1cc>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a48      	ldr	r2, [pc, #288]	@ (800a4a4 <HAL_GPIO_Init+0x2d4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d007      	beq.n	800a398 <HAL_GPIO_Init+0x1c8>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a47      	ldr	r2, [pc, #284]	@ (800a4a8 <HAL_GPIO_Init+0x2d8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d101      	bne.n	800a394 <HAL_GPIO_Init+0x1c4>
 800a390:	2304      	movs	r3, #4
 800a392:	e008      	b.n	800a3a6 <HAL_GPIO_Init+0x1d6>
 800a394:	2307      	movs	r3, #7
 800a396:	e006      	b.n	800a3a6 <HAL_GPIO_Init+0x1d6>
 800a398:	2303      	movs	r3, #3
 800a39a:	e004      	b.n	800a3a6 <HAL_GPIO_Init+0x1d6>
 800a39c:	2302      	movs	r3, #2
 800a39e:	e002      	b.n	800a3a6 <HAL_GPIO_Init+0x1d6>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <HAL_GPIO_Init+0x1d6>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	f002 0203 	and.w	r2, r2, #3
 800a3ac:	0092      	lsls	r2, r2, #2
 800a3ae:	4093      	lsls	r3, r2
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a3b6:	4938      	ldr	r1, [pc, #224]	@ (800a498 <HAL_GPIO_Init+0x2c8>)
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	089b      	lsrs	r3, r3, #2
 800a3bc:	3302      	adds	r3, #2
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3c4:	4b39      	ldr	r3, [pc, #228]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	43db      	mvns	r3, r3
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a3e8:	4a30      	ldr	r2, [pc, #192]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a3ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	43db      	mvns	r3, r3
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a412:	4a26      	ldr	r2, [pc, #152]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a418:	4b24      	ldr	r3, [pc, #144]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a41e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	43db      	mvns	r3, r3
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4013      	ands	r3, r2
 800a428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a43e:	4a1b      	ldr	r2, [pc, #108]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800a446:	4b19      	ldr	r3, [pc, #100]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a44c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	43db      	mvns	r3, r3
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4013      	ands	r3, r2
 800a456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a46c:	4a0f      	ldr	r2, [pc, #60]	@ (800a4ac <HAL_GPIO_Init+0x2dc>)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	3301      	adds	r3, #1
 800a478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	fa22 f303 	lsr.w	r3, r2, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	f47f aeab 	bne.w	800a1e0 <HAL_GPIO_Init+0x10>
  }
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	371c      	adds	r7, #28
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	40010000 	.word	0x40010000
 800a49c:	48000400 	.word	0x48000400
 800a4a0:	48000800 	.word	0x48000800
 800a4a4:	48000c00 	.word	0x48000c00
 800a4a8:	48001000 	.word	0x48001000
 800a4ac:	58000800 	.word	0x58000800

0800a4b0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691a      	ldr	r2, [r3, #16]
 800a4c0:	887b      	ldrh	r3, [r7, #2]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
 800a4cc:	e001      	b.n	800a4d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	807b      	strh	r3, [r7, #2]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4f0:	787b      	ldrb	r3, [r7, #1]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a4f6:	887a      	ldrh	r2, [r7, #2]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a4fc:	e002      	b.n	800a504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a4fe:	887a      	ldrh	r2, [r7, #2]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	695b      	ldr	r3, [r3, #20]
 800a520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a522:	887a      	ldrh	r2, [r7, #2]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4013      	ands	r3, r2
 800a528:	041a      	lsls	r2, r3, #16
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	43d9      	mvns	r1, r3
 800a52e:	887b      	ldrh	r3, [r7, #2]
 800a530:	400b      	ands	r3, r1
 800a532:	431a      	orrs	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	619a      	str	r2, [r3, #24]
}
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a54e:	4b08      	ldr	r3, [pc, #32]	@ (800a570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a550:	68da      	ldr	r2, [r3, #12]
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	4013      	ands	r3, r2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d006      	beq.n	800a568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a55a:	4a05      	ldr	r2, [pc, #20]	@ (800a570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a55c:	88fb      	ldrh	r3, [r7, #6]
 800a55e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a560:	88fb      	ldrh	r3, [r7, #6]
 800a562:	4618      	mov	r0, r3
 800a564:	f7f9 faa8 	bl	8003ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	58000800 	.word	0x58000800

0800a574 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800a57a:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a4 <HAL_HSEM_IRQHandler+0x30>)
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a580:	4b08      	ldr	r3, [pc, #32]	@ (800a5a4 <HAL_HSEM_IRQHandler+0x30>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	43db      	mvns	r3, r3
 800a588:	4906      	ldr	r1, [pc, #24]	@ (800a5a4 <HAL_HSEM_IRQHandler+0x30>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a58e:	4a05      	ldr	r2, [pc, #20]	@ (800a5a4 <HAL_HSEM_IRQHandler+0x30>)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f807 	bl	800a5a8 <HAL_HSEM_FreeCallback>
}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	58001500 	.word	0x58001500

0800a5a8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5be:	b08b      	sub	sp, #44	@ 0x2c
 800a5c0:	af06      	add	r7, sp, #24
 800a5c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e0cb      	b.n	800a766 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7fe f82c 	bl	8008640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f005 f943 	bl	800f880 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]
 800a5fe:	e040      	b.n	800a682 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	00db      	lsls	r3, r3, #3
 800a60e:	440b      	add	r3, r1
 800a610:	3301      	adds	r3, #1
 800a612:	2201      	movs	r2, #1
 800a614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	440b      	add	r3, r1
 800a626:	7bfa      	ldrb	r2, [r7, #15]
 800a628:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	4613      	mov	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4413      	add	r3, r2
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	440b      	add	r3, r1
 800a63a:	3303      	adds	r3, #3
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a640:	7bfa      	ldrb	r2, [r7, #15]
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	4613      	mov	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	440b      	add	r3, r1
 800a64e:	3338      	adds	r3, #56	@ 0x38
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a654:	7bfa      	ldrb	r2, [r7, #15]
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	440b      	add	r3, r1
 800a662:	333c      	adds	r3, #60	@ 0x3c
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a668:	7bfa      	ldrb	r2, [r7, #15]
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	440b      	add	r3, r1
 800a676:	3340      	adds	r3, #64	@ 0x40
 800a678:	2200      	movs	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	3301      	adds	r3, #1
 800a680:	73fb      	strb	r3, [r7, #15]
 800a682:	7bfa      	ldrb	r2, [r7, #15]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d3b9      	bcc.n	800a600 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a68c:	2300      	movs	r3, #0
 800a68e:	73fb      	strb	r3, [r7, #15]
 800a690:	e044      	b.n	800a71c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a692:	7bfa      	ldrb	r2, [r7, #15]
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	440b      	add	r3, r1
 800a6a0:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a6a8:	7bfa      	ldrb	r2, [r7, #15]
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	440b      	add	r3, r1
 800a6b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a6ba:	7bfa      	ldrb	r2, [r7, #15]
 800a6bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a6be:	7bfa      	ldrb	r2, [r7, #15]
 800a6c0:	6879      	ldr	r1, [r7, #4]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	440b      	add	r3, r1
 800a6cc:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a6d4:	7bfa      	ldrb	r2, [r7, #15]
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	440b      	add	r3, r1
 800a6e2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a6ea:	7bfa      	ldrb	r2, [r7, #15]
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	440b      	add	r3, r1
 800a6f8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a700:	7bfa      	ldrb	r2, [r7, #15]
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	440b      	add	r3, r1
 800a70e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	3301      	adds	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	429a      	cmp	r2, r3
 800a724:	d3b5      	bcc.n	800a692 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	687e      	ldr	r6, [r7, #4]
 800a72e:	466d      	mov	r5, sp
 800a730:	f106 0410 	add.w	r4, r6, #16
 800a734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	1d33      	adds	r3, r6, #4
 800a73e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a740:	6838      	ldr	r0, [r7, #0]
 800a742:	f005 f8b8 	bl	800f8b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d102      	bne.n	800a764 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f805 	bl	800a76e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a76e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a76e:	b480      	push	{r7}
 800a770:	b085      	sub	sp, #20
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a792:	b29b      	uxth	r3, r3
 800a794:	f043 0301 	orr.w	r3, r3, #1
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f043 0302 	orr.w	r3, r3, #2
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01d      	beq.n	800a810 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	791b      	ldrb	r3, [r3, #4]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7fd fe5c 	bl	800849c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800a800:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	711a      	strb	r2, [r3, #4]
 800a80e:	e001      	b.n	800a814 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a824:	4b05      	ldr	r3, [pc, #20]	@ (800a83c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a04      	ldr	r2, [pc, #16]	@ (800a83c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a82a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a82e:	6013      	str	r3, [r2, #0]
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	58000400 	.word	0x58000400

0800a840 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a840:	b480      	push	{r7}
 800a842:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a844:	4b04      	ldr	r3, [pc, #16]	@ (800a858 <HAL_PWREx_GetVoltageRange+0x18>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	58000400 	.word	0x58000400

0800a85c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a86a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a86e:	d101      	bne.n	800a874 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a870:	2301      	movs	r3, #1
 800a872:	e000      	b.n	800a876 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <LL_RCC_HSE_Enable>:
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a88e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a892:	6013      	str	r3, [r2, #0]
}
 800a894:	bf00      	nop
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <LL_RCC_HSE_Disable>:
{
 800a89e:	b480      	push	{r7}
 800a8a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a8a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]
}
 800a8b2:	bf00      	nop
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <LL_RCC_HSE_IsReady>:
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a8c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ce:	d101      	bne.n	800a8d4 <LL_RCC_HSE_IsReady+0x18>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <LL_RCC_HSE_IsReady+0x1a>
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <LL_RCC_HSI_Enable>:
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a8e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <LL_RCC_HSI_Disable>:
{
 800a8fe:	b480      	push	{r7}
 800a900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a90c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a910:	6013      	str	r3, [r2, #0]
}
 800a912:	bf00      	nop
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <LL_RCC_HSI_IsReady>:
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a92a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a92e:	d101      	bne.n	800a934 <LL_RCC_HSI_IsReady+0x18>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <LL_RCC_HSI_IsReady+0x1a>
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	061b      	lsls	r3, r3, #24
 800a956:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a95a:	4313      	orrs	r3, r2
 800a95c:	604b      	str	r3, [r1, #4]
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <LL_RCC_HSI48_Enable>:
{
 800a96a:	b480      	push	{r7}
 800a96c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a96e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a97a:	f043 0301 	orr.w	r3, r3, #1
 800a97e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a982:	bf00      	nop
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <LL_RCC_HSI48_Disable>:
{
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a9a4:	bf00      	nop
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <LL_RCC_HSI48_IsReady>:
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a9b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d101      	bne.n	800a9c6 <LL_RCC_HSI48_IsReady+0x18>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e000      	b.n	800a9c8 <LL_RCC_HSI48_IsReady+0x1a>
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <LL_RCC_LSE_Enable>:
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a9ea:	bf00      	nop
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <LL_RCC_LSE_Disable>:
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa04:	f023 0301 	bic.w	r3, r3, #1
 800aa08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aa0c:	bf00      	nop
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <LL_RCC_LSE_EnableBypass>:
{
 800aa16:	b480      	push	{r7}
 800aa18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800aa1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa26:	f043 0304 	orr.w	r3, r3, #4
 800aa2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aa2e:	bf00      	nop
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <LL_RCC_LSE_DisableBypass>:
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800aa3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa48:	f023 0304 	bic.w	r3, r3, #4
 800aa4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aa50:	bf00      	nop
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <LL_RCC_LSE_IsReady>:
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aa5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa66:	f003 0302 	and.w	r3, r3, #2
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d101      	bne.n	800aa72 <LL_RCC_LSE_IsReady+0x18>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <LL_RCC_LSE_IsReady+0x1a>
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <LL_RCC_LSI1_Enable>:
{
 800aa7e:	b480      	push	{r7}
 800aa80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800aa82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa8e:	f043 0301 	orr.w	r3, r3, #1
 800aa92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aa96:	bf00      	nop
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <LL_RCC_LSI1_Disable>:
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800aaa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aab8:	bf00      	nop
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <LL_RCC_LSI1_IsReady>:
{
 800aac2:	b480      	push	{r7}
 800aac4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800aac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d101      	bne.n	800aada <LL_RCC_LSI1_IsReady+0x18>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <LL_RCC_LSI1_IsReady+0x1a>
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <LL_RCC_LSI2_Enable>:
{
 800aae6:	b480      	push	{r7}
 800aae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800aaea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaf6:	f043 0304 	orr.w	r3, r3, #4
 800aafa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aafe:	bf00      	nop
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <LL_RCC_LSI2_Disable>:
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ab0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab18:	f023 0304 	bic.w	r3, r3, #4
 800ab1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ab20:	bf00      	nop
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <LL_RCC_LSI2_IsReady>:
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ab2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d101      	bne.n	800ab42 <LL_RCC_LSI2_IsReady+0x18>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <LL_RCC_LSI2_IsReady+0x1a>
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <LL_RCC_LSI2_SetTrimming>:
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ab56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <LL_RCC_MSI_Enable>:
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ab80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab8a:	f043 0301 	orr.w	r3, r3, #1
 800ab8e:	6013      	str	r3, [r2, #0]
}
 800ab90:	bf00      	nop
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <LL_RCC_MSI_Disable>:
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ab9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	6013      	str	r3, [r2, #0]
}
 800abae:	bf00      	nop
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <LL_RCC_MSI_IsReady>:
{
 800abb8:	b480      	push	{r7}
 800abba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800abbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d101      	bne.n	800abce <LL_RCC_MSI_IsReady+0x16>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <LL_RCC_MSI_IsReady+0x18>
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <LL_RCC_MSI_SetRange>:
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800abe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	600b      	str	r3, [r1, #0]
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <LL_RCC_MSI_GetRange>:
{
 800ac02:	b480      	push	{r7}
 800ac04:	b083      	sub	sp, #12
 800ac06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ac08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2bb0      	cmp	r3, #176	@ 0xb0
 800ac18:	d901      	bls.n	800ac1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ac1a:	23b0      	movs	r3, #176	@ 0xb0
 800ac1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800ac1e:	687b      	ldr	r3, [r7, #4]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <LL_RCC_MSI_SetCalibTrimming>:
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ac34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac46:	4313      	orrs	r3, r2
 800ac48:	604b      	str	r3, [r1, #4]
}
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <LL_RCC_SetSysClkSource>:
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ac5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f023 0203 	bic.w	r2, r3, #3
 800ac68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	608b      	str	r3, [r1, #8]
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <LL_RCC_GetSysClkSource>:
{
 800ac7e:	b480      	push	{r7}
 800ac80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ac82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f003 030c 	and.w	r3, r3, #12
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <LL_RCC_SetAHBPrescaler>:
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ac9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4313      	orrs	r3, r2
 800acb0:	608b      	str	r3, [r1, #8]
}
 800acb2:	bf00      	nop
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <LL_C2_RCC_SetAHBPrescaler>:
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800acc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800acce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800acd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4313      	orrs	r3, r2
 800acda:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <LL_RCC_SetAHB4Prescaler>:
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800acf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800acfa:	f023 020f 	bic.w	r2, r3, #15
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	091b      	lsrs	r3, r3, #4
 800ad02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad06:	4313      	orrs	r3, r2
 800ad08:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <LL_RCC_SetAPB1Prescaler>:
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ad20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ad2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	608b      	str	r3, [r1, #8]
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <LL_RCC_SetAPB2Prescaler>:
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ad48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	608b      	str	r3, [r1, #8]
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <LL_RCC_GetAHBPrescaler>:
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ad6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <LL_RCC_GetAHB4Prescaler>:
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800ad84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad88:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <LL_RCC_GetAPB1Prescaler>:
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ada0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800adaa:	4618      	mov	r0, r3
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <LL_RCC_GetAPB2Prescaler>:
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800adb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800add0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800adde:	6013      	str	r3, [r2, #0]
}
 800ade0:	bf00      	nop
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800adea:	b480      	push	{r7}
 800adec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800adee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adfc:	6013      	str	r3, [r2, #0]
}
 800adfe:	bf00      	nop
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ae0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae1a:	d101      	bne.n	800ae20 <LL_RCC_PLL_IsReady+0x18>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e000      	b.n	800ae22 <LL_RCC_PLL_IsReady+0x1a>
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ae30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	0a1b      	lsrs	r3, r3, #8
 800ae38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800ae46:	b480      	push	{r7}
 800ae48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ae4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ae62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ae76:	b480      	push	{r7}
 800ae78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ae7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f003 0303 	and.w	r3, r3, #3
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ae92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aea0:	d101      	bne.n	800aea6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e000      	b.n	800aea8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800aeb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aec6:	d101      	bne.n	800aecc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800aed8:	b480      	push	{r7}
 800aeda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800aedc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aee0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeec:	d101      	bne.n	800aef2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800aefe:	b480      	push	{r7}
 800af00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800af02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af10:	d101      	bne.n	800af16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800af12:	2301      	movs	r3, #1
 800af14:	e000      	b.n	800af18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800af22:	b480      	push	{r7}
 800af24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800af26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af34:	d101      	bne.n	800af3a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800af36:	2301      	movs	r3, #1
 800af38:	e000      	b.n	800af3c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
	...

0800af48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af48:	b590      	push	{r4, r7, lr}
 800af4a:	b08d      	sub	sp, #52	@ 0x34
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e363      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 808d 	beq.w	800b082 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af68:	f7ff fe89 	bl	800ac7e <LL_RCC_GetSysClkSource>
 800af6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af6e:	f7ff ff82 	bl	800ae76 <LL_RCC_PLL_GetMainSource>
 800af72:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <HAL_RCC_OscConfig+0x3e>
 800af7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af7c:	2b0c      	cmp	r3, #12
 800af7e:	d147      	bne.n	800b010 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800af80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af82:	2b01      	cmp	r3, #1
 800af84:	d144      	bne.n	800b010 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e347      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800af96:	f7ff fe34 	bl	800ac02 <LL_RCC_MSI_GetRange>
 800af9a:	4603      	mov	r3, r0
 800af9c:	429c      	cmp	r4, r3
 800af9e:	d914      	bls.n	800afca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 fd2f 	bl	800ba08 <RCC_SetFlashLatencyFromMSIRange>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e336      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fe0e 	bl	800abda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff fe32 	bl	800ac2c <LL_RCC_MSI_SetCalibTrimming>
 800afc8:	e013      	b.n	800aff2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fe03 	bl	800abda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fe27 	bl	800ac2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fd10 	bl	800ba08 <RCC_SetFlashLatencyFromMSIRange>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e317      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800aff2:	f000 fcc9 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 800aff6:	4603      	mov	r3, r0
 800aff8:	4aa4      	ldr	r2, [pc, #656]	@ (800b28c <HAL_RCC_OscConfig+0x344>)
 800affa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800affc:	4ba4      	ldr	r3, [pc, #656]	@ (800b290 <HAL_RCC_OscConfig+0x348>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe feb1 	bl	8009d68 <HAL_InitTick>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d039      	beq.n	800b080 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e308      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01e      	beq.n	800b056 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b018:	f7ff fdb0 	bl	800ab7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b01c:	f7fe fef2 	bl	8009e04 <HAL_GetTick>
 800b020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b022:	e008      	b.n	800b036 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b024:	f7fe feee 	bl	8009e04 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d901      	bls.n	800b036 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e2f5      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b036:	f7ff fdbf 	bl	800abb8 <LL_RCC_MSI_IsReady>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0f1      	beq.n	800b024 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fdc8 	bl	800abda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fdec 	bl	800ac2c <LL_RCC_MSI_SetCalibTrimming>
 800b054:	e015      	b.n	800b082 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b056:	f7ff fda0 	bl	800ab9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b05a:	f7fe fed3 	bl	8009e04 <HAL_GetTick>
 800b05e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b060:	e008      	b.n	800b074 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b062:	f7fe fecf 	bl	8009e04 <HAL_GetTick>
 800b066:	4602      	mov	r2, r0
 800b068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d901      	bls.n	800b074 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e2d6      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b074:	f7ff fda0 	bl	800abb8 <LL_RCC_MSI_IsReady>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1f1      	bne.n	800b062 <HAL_RCC_OscConfig+0x11a>
 800b07e:	e000      	b.n	800b082 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b080:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d047      	beq.n	800b11e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b08e:	f7ff fdf6 	bl	800ac7e <LL_RCC_GetSysClkSource>
 800b092:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b094:	f7ff feef 	bl	800ae76 <LL_RCC_PLL_GetMainSource>
 800b098:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	2b08      	cmp	r3, #8
 800b09e:	d005      	beq.n	800b0ac <HAL_RCC_OscConfig+0x164>
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	2b0c      	cmp	r3, #12
 800b0a4:	d108      	bne.n	800b0b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d105      	bne.n	800b0b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d134      	bne.n	800b11e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e2b4      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0c0:	d102      	bne.n	800b0c8 <HAL_RCC_OscConfig+0x180>
 800b0c2:	f7ff fbdd 	bl	800a880 <LL_RCC_HSE_Enable>
 800b0c6:	e001      	b.n	800b0cc <HAL_RCC_OscConfig+0x184>
 800b0c8:	f7ff fbe9 	bl	800a89e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0d4:	f7fe fe96 	bl	8009e04 <HAL_GetTick>
 800b0d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b0da:	e008      	b.n	800b0ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0dc:	f7fe fe92 	bl	8009e04 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	2b64      	cmp	r3, #100	@ 0x64
 800b0e8:	d901      	bls.n	800b0ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e299      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b0ee:	f7ff fbe5 	bl	800a8bc <LL_RCC_HSE_IsReady>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0f1      	beq.n	800b0dc <HAL_RCC_OscConfig+0x194>
 800b0f8:	e011      	b.n	800b11e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0fa:	f7fe fe83 	bl	8009e04 <HAL_GetTick>
 800b0fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b100:	e008      	b.n	800b114 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b102:	f7fe fe7f 	bl	8009e04 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	2b64      	cmp	r3, #100	@ 0x64
 800b10e:	d901      	bls.n	800b114 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e286      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b114:	f7ff fbd2 	bl	800a8bc <LL_RCC_HSE_IsReady>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1f1      	bne.n	800b102 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d04c      	beq.n	800b1c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b12a:	f7ff fda8 	bl	800ac7e <LL_RCC_GetSysClkSource>
 800b12e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b130:	f7ff fea1 	bl	800ae76 <LL_RCC_PLL_GetMainSource>
 800b134:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b04      	cmp	r3, #4
 800b13a:	d005      	beq.n	800b148 <HAL_RCC_OscConfig+0x200>
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	2b0c      	cmp	r3, #12
 800b140:	d10e      	bne.n	800b160 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d10b      	bne.n	800b160 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e266      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff fbf1 	bl	800a940 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b15e:	e031      	b.n	800b1c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d019      	beq.n	800b19c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b168:	f7ff fbba 	bl	800a8e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b16c:	f7fe fe4a 	bl	8009e04 <HAL_GetTick>
 800b170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b172:	e008      	b.n	800b186 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b174:	f7fe fe46 	bl	8009e04 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d901      	bls.n	800b186 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e24d      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b186:	f7ff fbc9 	bl	800a91c <LL_RCC_HSI_IsReady>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0f1      	beq.n	800b174 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff fbd3 	bl	800a940 <LL_RCC_HSI_SetCalibTrimming>
 800b19a:	e013      	b.n	800b1c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b19c:	f7ff fbaf 	bl	800a8fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a0:	f7fe fe30 	bl	8009e04 <HAL_GetTick>
 800b1a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1a8:	f7fe fe2c 	bl	8009e04 <HAL_GetTick>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e233      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b1ba:	f7ff fbaf 	bl	800a91c <LL_RCC_HSI_IsReady>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1f1      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 80a3 	beq.w	800b324 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d076      	beq.n	800b2d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0310 	and.w	r3, r3, #16
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d046      	beq.n	800b280 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b1f2:	f7ff fc66 	bl	800aac2 <LL_RCC_LSI1_IsReady>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d113      	bne.n	800b224 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b1fc:	f7ff fc3f 	bl	800aa7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b200:	f7fe fe00 	bl	8009e04 <HAL_GetTick>
 800b204:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b206:	e008      	b.n	800b21a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b208:	f7fe fdfc 	bl	8009e04 <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b02      	cmp	r3, #2
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e203      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b21a:	f7ff fc52 	bl	800aac2 <LL_RCC_LSI1_IsReady>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d0f1      	beq.n	800b208 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b224:	f7ff fc5f 	bl	800aae6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b228:	f7fe fdec 	bl	8009e04 <HAL_GetTick>
 800b22c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b22e:	e008      	b.n	800b242 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b230:	f7fe fde8 	bl	8009e04 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d901      	bls.n	800b242 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e1ef      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b242:	f7ff fc72 	bl	800ab2a <LL_RCC_LSI2_IsReady>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d0f1      	beq.n	800b230 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	4618      	mov	r0, r3
 800b252:	f7ff fc7c 	bl	800ab4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b256:	f7ff fc23 	bl	800aaa0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b25a:	f7fe fdd3 	bl	8009e04 <HAL_GetTick>
 800b25e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b260:	e008      	b.n	800b274 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b262:	f7fe fdcf 	bl	8009e04 <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d901      	bls.n	800b274 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	e1d6      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b274:	f7ff fc25 	bl	800aac2 <LL_RCC_LSI1_IsReady>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1f1      	bne.n	800b262 <HAL_RCC_OscConfig+0x31a>
 800b27e:	e051      	b.n	800b324 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b280:	f7ff fbfd 	bl	800aa7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b284:	f7fe fdbe 	bl	8009e04 <HAL_GetTick>
 800b288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b28a:	e00c      	b.n	800b2a6 <HAL_RCC_OscConfig+0x35e>
 800b28c:	20000010 	.word	0x20000010
 800b290:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b294:	f7fe fdb6 	bl	8009e04 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e1bd      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b2a6:	f7ff fc0c 	bl	800aac2 <LL_RCC_LSI1_IsReady>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0f1      	beq.n	800b294 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b2b0:	f7ff fc2a 	bl	800ab08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b2b6:	f7fe fda5 	bl	8009e04 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d901      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e1ac      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b2c8:	f7ff fc2f 	bl	800ab2a <LL_RCC_LSI2_IsReady>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1f1      	bne.n	800b2b6 <HAL_RCC_OscConfig+0x36e>
 800b2d2:	e027      	b.n	800b324 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b2d4:	f7ff fc18 	bl	800ab08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2d8:	f7fe fd94 	bl	8009e04 <HAL_GetTick>
 800b2dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b2de:	e008      	b.n	800b2f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b2e0:	f7fe fd90 	bl	8009e04 <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e197      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b2f2:	f7ff fc1a 	bl	800ab2a <LL_RCC_LSI2_IsReady>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1f1      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b2fc:	f7ff fbd0 	bl	800aaa0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b300:	f7fe fd80 	bl	8009e04 <HAL_GetTick>
 800b304:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b306:	e008      	b.n	800b31a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b308:	f7fe fd7c 	bl	8009e04 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b02      	cmp	r3, #2
 800b314:	d901      	bls.n	800b31a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	e183      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b31a:	f7ff fbd2 	bl	800aac2 <LL_RCC_LSI1_IsReady>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1f1      	bne.n	800b308 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0304 	and.w	r3, r3, #4
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d05b      	beq.n	800b3e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b330:	4ba7      	ldr	r3, [pc, #668]	@ (800b5d0 <HAL_RCC_OscConfig+0x688>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d114      	bne.n	800b366 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b33c:	f7ff fa70 	bl	800a820 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b340:	f7fe fd60 	bl	8009e04 <HAL_GetTick>
 800b344:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b346:	e008      	b.n	800b35a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b348:	f7fe fd5c 	bl	8009e04 <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e163      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b35a:	4b9d      	ldr	r3, [pc, #628]	@ (800b5d0 <HAL_RCC_OscConfig+0x688>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0f0      	beq.n	800b348 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d102      	bne.n	800b374 <HAL_RCC_OscConfig+0x42c>
 800b36e:	f7ff fb30 	bl	800a9d2 <LL_RCC_LSE_Enable>
 800b372:	e00c      	b.n	800b38e <HAL_RCC_OscConfig+0x446>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	2b05      	cmp	r3, #5
 800b37a:	d104      	bne.n	800b386 <HAL_RCC_OscConfig+0x43e>
 800b37c:	f7ff fb4b 	bl	800aa16 <LL_RCC_LSE_EnableBypass>
 800b380:	f7ff fb27 	bl	800a9d2 <LL_RCC_LSE_Enable>
 800b384:	e003      	b.n	800b38e <HAL_RCC_OscConfig+0x446>
 800b386:	f7ff fb35 	bl	800a9f4 <LL_RCC_LSE_Disable>
 800b38a:	f7ff fb55 	bl	800aa38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d014      	beq.n	800b3c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b396:	f7fe fd35 	bl	8009e04 <HAL_GetTick>
 800b39a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b39c:	e00a      	b.n	800b3b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b39e:	f7fe fd31 	bl	8009e04 <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d901      	bls.n	800b3b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e136      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b3b4:	f7ff fb51 	bl	800aa5a <LL_RCC_LSE_IsReady>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0ef      	beq.n	800b39e <HAL_RCC_OscConfig+0x456>
 800b3be:	e013      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3c0:	f7fe fd20 	bl	8009e04 <HAL_GetTick>
 800b3c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b3c6:	e00a      	b.n	800b3de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3c8:	f7fe fd1c 	bl	8009e04 <HAL_GetTick>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d901      	bls.n	800b3de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e121      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b3de:	f7ff fb3c 	bl	800aa5a <LL_RCC_LSE_IsReady>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1ef      	bne.n	800b3c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d02c      	beq.n	800b44e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d014      	beq.n	800b426 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3fc:	f7ff fab5 	bl	800a96a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b400:	f7fe fd00 	bl	8009e04 <HAL_GetTick>
 800b404:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b406:	e008      	b.n	800b41a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b408:	f7fe fcfc 	bl	8009e04 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	2b02      	cmp	r3, #2
 800b414:	d901      	bls.n	800b41a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e103      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b41a:	f7ff fac8 	bl	800a9ae <LL_RCC_HSI48_IsReady>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0f1      	beq.n	800b408 <HAL_RCC_OscConfig+0x4c0>
 800b424:	e013      	b.n	800b44e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b426:	f7ff fab1 	bl	800a98c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b42a:	f7fe fceb 	bl	8009e04 <HAL_GetTick>
 800b42e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b430:	e008      	b.n	800b444 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b432:	f7fe fce7 	bl	8009e04 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d901      	bls.n	800b444 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e0ee      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b444:	f7ff fab3 	bl	800a9ae <LL_RCC_HSI48_IsReady>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1f1      	bne.n	800b432 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 80e4 	beq.w	800b620 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b458:	f7ff fc11 	bl	800ac7e <LL_RCC_GetSysClkSource>
 800b45c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b45e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	f040 80b4 	bne.w	800b5d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f003 0203 	and.w	r2, r3, #3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d123      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b488:	429a      	cmp	r2, r3
 800b48a:	d11c      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	0a1b      	lsrs	r3, r3, #8
 800b490:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b498:	429a      	cmp	r2, r3
 800b49a:	d114      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d10d      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d106      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d05d      	beq.n	800b582 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b0c      	cmp	r3, #12
 800b4ca:	d058      	beq.n	800b57e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b4cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e0a1      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b4de:	f7ff fc84 	bl	800adea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b4e2:	f7fe fc8f 	bl	8009e04 <HAL_GetTick>
 800b4e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4e8:	e008      	b.n	800b4fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ea:	f7fe fc8b 	bl	8009e04 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d901      	bls.n	800b4fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e092      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1ef      	bne.n	800b4ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b50a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	4b30      	ldr	r3, [pc, #192]	@ (800b5d4 <HAL_RCC_OscConfig+0x68c>)
 800b512:	4013      	ands	r3, r2
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b51c:	4311      	orrs	r1, r2
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b522:	0212      	lsls	r2, r2, #8
 800b524:	4311      	orrs	r1, r2
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b52a:	4311      	orrs	r1, r2
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b530:	4311      	orrs	r1, r2
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b536:	430a      	orrs	r2, r1
 800b538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b540:	f7ff fc44 	bl	800adcc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b54e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b552:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b554:	f7fe fc56 	bl	8009e04 <HAL_GetTick>
 800b558:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b55a:	e008      	b.n	800b56e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b55c:	f7fe fc52 	bl	8009e04 <HAL_GetTick>
 800b560:	4602      	mov	r2, r0
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	2b02      	cmp	r3, #2
 800b568:	d901      	bls.n	800b56e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e059      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b56e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0ef      	beq.n	800b55c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b57c:	e050      	b.n	800b620 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e04f      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d147      	bne.n	800b620 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b590:	f7ff fc1c 	bl	800adcc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b59e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b5a4:	f7fe fc2e 	bl	8009e04 <HAL_GetTick>
 800b5a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5aa:	e008      	b.n	800b5be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5ac:	f7fe fc2a 	bl	8009e04 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d901      	bls.n	800b5be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e031      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0ef      	beq.n	800b5ac <HAL_RCC_OscConfig+0x664>
 800b5cc:	e028      	b.n	800b620 <HAL_RCC_OscConfig+0x6d8>
 800b5ce:	bf00      	nop
 800b5d0:	58000400 	.word	0x58000400
 800b5d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	2b0c      	cmp	r3, #12
 800b5dc:	d01e      	beq.n	800b61c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5de:	f7ff fc04 	bl	800adea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e2:	f7fe fc0f 	bl	8009e04 <HAL_GetTick>
 800b5e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5e8:	e008      	b.n	800b5fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5ea:	f7fe fc0b 	bl	8009e04 <HAL_GetTick>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d901      	bls.n	800b5fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e012      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1ef      	bne.n	800b5ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b60a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b614:	4b05      	ldr	r3, [pc, #20]	@ (800b62c <HAL_RCC_OscConfig+0x6e4>)
 800b616:	4013      	ands	r3, r2
 800b618:	60cb      	str	r3, [r1, #12]
 800b61a:	e001      	b.n	800b620 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e000      	b.n	800b622 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3734      	adds	r7, #52	@ 0x34
 800b626:	46bd      	mov	sp, r7
 800b628:	bd90      	pop	{r4, r7, pc}
 800b62a:	bf00      	nop
 800b62c:	eefefffc 	.word	0xeefefffc

0800b630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e12d      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b644:	4b98      	ldr	r3, [pc, #608]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d91b      	bls.n	800b68a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b652:	4b95      	ldr	r3, [pc, #596]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f023 0207 	bic.w	r2, r3, #7
 800b65a:	4993      	ldr	r1, [pc, #588]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	4313      	orrs	r3, r2
 800b660:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b662:	f7fe fbcf 	bl	8009e04 <HAL_GetTick>
 800b666:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b668:	e008      	b.n	800b67c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b66a:	f7fe fbcb 	bl	8009e04 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	2b02      	cmp	r3, #2
 800b676:	d901      	bls.n	800b67c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e111      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b67c:	4b8a      	ldr	r3, [pc, #552]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0307 	and.w	r3, r3, #7
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d1ef      	bne.n	800b66a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d016      	beq.n	800b6c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fafb 	bl	800ac96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b6a0:	f7fe fbb0 	bl	8009e04 <HAL_GetTick>
 800b6a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b6a6:	e008      	b.n	800b6ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b6a8:	f7fe fbac 	bl	8009e04 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d901      	bls.n	800b6ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e0f2      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b6ba:	f7ff fbe8 	bl	800ae8e <LL_RCC_IsActiveFlag_HPRE>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0f1      	beq.n	800b6a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0320 	and.w	r3, r3, #32
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d016      	beq.n	800b6fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff faf2 	bl	800acbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b6da:	f7fe fb93 	bl	8009e04 <HAL_GetTick>
 800b6de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b6e0:	e008      	b.n	800b6f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b6e2:	f7fe fb8f 	bl	8009e04 <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d901      	bls.n	800b6f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e0d5      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b6f4:	f7ff fbdd 	bl	800aeb2 <LL_RCC_IsActiveFlag_C2HPRE>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0f1      	beq.n	800b6e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d016      	beq.n	800b738 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff faeb 	bl	800acea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b714:	f7fe fb76 	bl	8009e04 <HAL_GetTick>
 800b718:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b71a:	e008      	b.n	800b72e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b71c:	f7fe fb72 	bl	8009e04 <HAL_GetTick>
 800b720:	4602      	mov	r2, r0
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	2b02      	cmp	r3, #2
 800b728:	d901      	bls.n	800b72e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e0b8      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b72e:	f7ff fbd3 	bl	800aed8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0f1      	beq.n	800b71c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d016      	beq.n	800b772 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fae5 	bl	800ad18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b74e:	f7fe fb59 	bl	8009e04 <HAL_GetTick>
 800b752:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b754:	e008      	b.n	800b768 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b756:	f7fe fb55 	bl	8009e04 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	2b02      	cmp	r3, #2
 800b762:	d901      	bls.n	800b768 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e09b      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b768:	f7ff fbc9 	bl	800aefe <LL_RCC_IsActiveFlag_PPRE1>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0f1      	beq.n	800b756 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d017      	beq.n	800b7ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fadb 	bl	800ad40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b78a:	f7fe fb3b 	bl	8009e04 <HAL_GetTick>
 800b78e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b790:	e008      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b792:	f7fe fb37 	bl	8009e04 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d901      	bls.n	800b7a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e07d      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b7a4:	f7ff fbbd 	bl	800af22 <LL_RCC_IsActiveFlag_PPRE2>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0f1      	beq.n	800b792 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d043      	beq.n	800b842 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d106      	bne.n	800b7d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b7c2:	f7ff f87b 	bl	800a8bc <LL_RCC_HSE_IsReady>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d11e      	bne.n	800b80a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e067      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d106      	bne.n	800b7e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b7d8:	f7ff fb16 	bl	800ae08 <LL_RCC_PLL_IsReady>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d113      	bne.n	800b80a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e05c      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d106      	bne.n	800b7fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b7ee:	f7ff f9e3 	bl	800abb8 <LL_RCC_MSI_IsReady>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d108      	bne.n	800b80a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e051      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b7fc:	f7ff f88e 	bl	800a91c <LL_RCC_HSI_IsReady>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e04a      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff fa21 	bl	800ac56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b814:	f7fe faf6 	bl	8009e04 <HAL_GetTick>
 800b818:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b81a:	e00a      	b.n	800b832 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b81c:	f7fe faf2 	bl	8009e04 <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d901      	bls.n	800b832 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e036      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b832:	f7ff fa24 	bl	800ac7e <LL_RCC_GetSysClkSource>
 800b836:	4602      	mov	r2, r0
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	429a      	cmp	r2, r3
 800b840:	d1ec      	bne.n	800b81c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b842:	4b19      	ldr	r3, [pc, #100]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d21b      	bcs.n	800b888 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b850:	4b15      	ldr	r3, [pc, #84]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f023 0207 	bic.w	r2, r3, #7
 800b858:	4913      	ldr	r1, [pc, #76]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b860:	f7fe fad0 	bl	8009e04 <HAL_GetTick>
 800b864:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b866:	e008      	b.n	800b87a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b868:	f7fe facc 	bl	8009e04 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b02      	cmp	r3, #2
 800b874:	d901      	bls.n	800b87a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e012      	b.n	800b8a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b87a:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a8 <HAL_RCC_ClockConfig+0x278>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0307 	and.w	r3, r3, #7
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d1ef      	bne.n	800b868 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b888:	f000 f87e 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 800b88c:	4603      	mov	r3, r0
 800b88e:	4a07      	ldr	r2, [pc, #28]	@ (800b8ac <HAL_RCC_ClockConfig+0x27c>)
 800b890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b892:	f7fe fac3 	bl	8009e1c <HAL_GetTickPrio>
 800b896:	4603      	mov	r3, r0
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fe fa65 	bl	8009d68 <HAL_InitTick>
 800b89e:	4603      	mov	r3, r0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	58004000 	.word	0x58004000
 800b8ac:	20000010 	.word	0x20000010

0800b8b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b8b6:	f7ff f9e2 	bl	800ac7e <LL_RCC_GetSysClkSource>
 800b8ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b8c2:	f7ff f99e 	bl	800ac02 <LL_RCC_MSI_GetRange>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	091b      	lsrs	r3, r3, #4
 800b8ca:	f003 030f 	and.w	r3, r3, #15
 800b8ce:	4a2b      	ldr	r2, [pc, #172]	@ (800b97c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	e04b      	b.n	800b970 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	d102      	bne.n	800b8e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b8de:	4b28      	ldr	r3, [pc, #160]	@ (800b980 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	e045      	b.n	800b970 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b08      	cmp	r3, #8
 800b8e8:	d10a      	bne.n	800b900 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b8ea:	f7fe ffb7 	bl	800a85c <LL_RCC_HSE_IsEnabledDiv2>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d102      	bne.n	800b8fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b8f4:	4b22      	ldr	r3, [pc, #136]	@ (800b980 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	e03a      	b.n	800b970 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b8fa:	4b22      	ldr	r3, [pc, #136]	@ (800b984 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b8fc:	60fb      	str	r3, [r7, #12]
 800b8fe:	e037      	b.n	800b970 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b900:	f7ff fab9 	bl	800ae76 <LL_RCC_PLL_GetMainSource>
 800b904:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d003      	beq.n	800b914 <HAL_RCC_GetSysClockFreq+0x64>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d003      	beq.n	800b91a <HAL_RCC_GetSysClockFreq+0x6a>
 800b912:	e00d      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b914:	4b1a      	ldr	r3, [pc, #104]	@ (800b980 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b916:	60bb      	str	r3, [r7, #8]
        break;
 800b918:	e015      	b.n	800b946 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b91a:	f7fe ff9f 	bl	800a85c <LL_RCC_HSE_IsEnabledDiv2>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b01      	cmp	r3, #1
 800b922:	d102      	bne.n	800b92a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b924:	4b16      	ldr	r3, [pc, #88]	@ (800b980 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b926:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b928:	e00d      	b.n	800b946 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b92a:	4b16      	ldr	r3, [pc, #88]	@ (800b984 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b92c:	60bb      	str	r3, [r7, #8]
        break;
 800b92e:	e00a      	b.n	800b946 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b930:	f7ff f967 	bl	800ac02 <LL_RCC_MSI_GetRange>
 800b934:	4603      	mov	r3, r0
 800b936:	091b      	lsrs	r3, r3, #4
 800b938:	f003 030f 	and.w	r3, r3, #15
 800b93c:	4a0f      	ldr	r2, [pc, #60]	@ (800b97c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b942:	60bb      	str	r3, [r7, #8]
        break;
 800b944:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b946:	f7ff fa71 	bl	800ae2c <LL_RCC_PLL_GetN>
 800b94a:	4602      	mov	r2, r0
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	fb03 f402 	mul.w	r4, r3, r2
 800b952:	f7ff fa84 	bl	800ae5e <LL_RCC_PLL_GetDivider>
 800b956:	4603      	mov	r3, r0
 800b958:	091b      	lsrs	r3, r3, #4
 800b95a:	3301      	adds	r3, #1
 800b95c:	fbb4 f4f3 	udiv	r4, r4, r3
 800b960:	f7ff fa71 	bl	800ae46 <LL_RCC_PLL_GetR>
 800b964:	4603      	mov	r3, r0
 800b966:	0f5b      	lsrs	r3, r3, #29
 800b968:	3301      	adds	r3, #1
 800b96a:	fbb4 f3f3 	udiv	r3, r4, r3
 800b96e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b970:	68fb      	ldr	r3, [r7, #12]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	bd90      	pop	{r4, r7, pc}
 800b97a:	bf00      	nop
 800b97c:	080151f4 	.word	0x080151f4
 800b980:	00f42400 	.word	0x00f42400
 800b984:	01e84800 	.word	0x01e84800

0800b988 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b988:	b598      	push	{r3, r4, r7, lr}
 800b98a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b98c:	f7ff ff90 	bl	800b8b0 <HAL_RCC_GetSysClockFreq>
 800b990:	4604      	mov	r4, r0
 800b992:	f7ff f9e9 	bl	800ad68 <LL_RCC_GetAHBPrescaler>
 800b996:	4603      	mov	r3, r0
 800b998:	091b      	lsrs	r3, r3, #4
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	4a03      	ldr	r2, [pc, #12]	@ (800b9ac <HAL_RCC_GetHCLKFreq+0x24>)
 800b9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	bd98      	pop	{r3, r4, r7, pc}
 800b9ac:	08015194 	.word	0x08015194

0800b9b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9b0:	b598      	push	{r3, r4, r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b9b4:	f7ff ffe8 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	f7ff f9ef 	bl	800ad9c <LL_RCC_GetAPB1Prescaler>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	0a1b      	lsrs	r3, r3, #8
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	4a04      	ldr	r2, [pc, #16]	@ (800b9d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9cc:	f003 031f 	and.w	r3, r3, #31
 800b9d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	bd98      	pop	{r3, r4, r7, pc}
 800b9d8:	080151d4 	.word	0x080151d4

0800b9dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b9dc:	b598      	push	{r3, r4, r7, lr}
 800b9de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b9e0:	f7ff ffd2 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	f7ff f9e5 	bl	800adb4 <LL_RCC_GetAPB2Prescaler>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	0adb      	lsrs	r3, r3, #11
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	4a04      	ldr	r2, [pc, #16]	@ (800ba04 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f8:	f003 031f 	and.w	r3, r3, #31
 800b9fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	bd98      	pop	{r3, r4, r7, pc}
 800ba04:	080151d4 	.word	0x080151d4

0800ba08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2bb0      	cmp	r3, #176	@ 0xb0
 800ba14:	d903      	bls.n	800ba1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ba16:	4b15      	ldr	r3, [pc, #84]	@ (800ba6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ba18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	e007      	b.n	800ba2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	091b      	lsrs	r3, r3, #4
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	4a11      	ldr	r2, [pc, #68]	@ (800ba6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ba28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ba2e:	f7ff f9a7 	bl	800ad80 <LL_RCC_GetAHB4Prescaler>
 800ba32:	4603      	mov	r3, r0
 800ba34:	091b      	lsrs	r3, r3, #4
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	4a0d      	ldr	r2, [pc, #52]	@ (800ba70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ba3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba50:	0c9c      	lsrs	r4, r3, #18
 800ba52:	f7fe fef5 	bl	800a840 <HAL_PWREx_GetVoltageRange>
 800ba56:	4603      	mov	r3, r0
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 f80c 	bl	800ba78 <RCC_SetFlashLatency>
 800ba60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd90      	pop	{r4, r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	080151f4 	.word	0x080151f4
 800ba70:	08015194 	.word	0x08015194
 800ba74:	431bde83 	.word	0x431bde83

0800ba78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ba78:	b590      	push	{r4, r7, lr}
 800ba7a:	b093      	sub	sp, #76	@ 0x4c
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ba82:	4b37      	ldr	r3, [pc, #220]	@ (800bb60 <RCC_SetFlashLatency+0xe8>)
 800ba84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800ba88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ba8e:	4a35      	ldr	r2, [pc, #212]	@ (800bb64 <RCC_SetFlashLatency+0xec>)
 800ba90:	f107 031c 	add.w	r3, r7, #28
 800ba94:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ba9a:	4b33      	ldr	r3, [pc, #204]	@ (800bb68 <RCC_SetFlashLatency+0xf0>)
 800ba9c:	f107 040c 	add.w	r4, r7, #12
 800baa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800baa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800baa6:	2300      	movs	r3, #0
 800baa8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bab0:	d11a      	bne.n	800bae8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bab2:	2300      	movs	r3, #0
 800bab4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bab6:	e013      	b.n	800bae0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	3348      	adds	r3, #72	@ 0x48
 800babe:	443b      	add	r3, r7
 800bac0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d807      	bhi.n	800bada <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800baca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	3348      	adds	r3, #72	@ 0x48
 800bad0:	443b      	add	r3, r7
 800bad2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bad6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bad8:	e020      	b.n	800bb1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800badc:	3301      	adds	r3, #1
 800bade:	643b      	str	r3, [r7, #64]	@ 0x40
 800bae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d9e8      	bls.n	800bab8 <RCC_SetFlashLatency+0x40>
 800bae6:	e019      	b.n	800bb1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bae8:	2300      	movs	r3, #0
 800baea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baec:	e013      	b.n	800bb16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800baee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	3348      	adds	r3, #72	@ 0x48
 800baf4:	443b      	add	r3, r7
 800baf6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d807      	bhi.n	800bb10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bb00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	3348      	adds	r3, #72	@ 0x48
 800bb06:	443b      	add	r3, r7
 800bb08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bb0c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bb0e:	e005      	b.n	800bb1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb12:	3301      	adds	r3, #1
 800bb14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d9e8      	bls.n	800baee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800bb1c:	4b13      	ldr	r3, [pc, #76]	@ (800bb6c <RCC_SetFlashLatency+0xf4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f023 0207 	bic.w	r2, r3, #7
 800bb24:	4911      	ldr	r1, [pc, #68]	@ (800bb6c <RCC_SetFlashLatency+0xf4>)
 800bb26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb2c:	f7fe f96a 	bl	8009e04 <HAL_GetTick>
 800bb30:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bb32:	e008      	b.n	800bb46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bb34:	f7fe f966 	bl	8009e04 <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d901      	bls.n	800bb46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e007      	b.n	800bb56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bb46:	4b09      	ldr	r3, [pc, #36]	@ (800bb6c <RCC_SetFlashLatency+0xf4>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d1ef      	bne.n	800bb34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	374c      	adds	r7, #76	@ 0x4c
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd90      	pop	{r4, r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	0801515c 	.word	0x0801515c
 800bb64:	0801516c 	.word	0x0801516c
 800bb68:	08015178 	.word	0x08015178
 800bb6c:	58004000 	.word	0x58004000

0800bb70 <LL_RCC_LSE_IsEnabled>:
{
 800bb70:	b480      	push	{r7}
 800bb72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bb74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <LL_RCC_LSE_IsEnabled+0x18>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e000      	b.n	800bb8a <LL_RCC_LSE_IsEnabled+0x1a>
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <LL_RCC_LSE_IsReady>:
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bb98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d101      	bne.n	800bbac <LL_RCC_LSE_IsReady+0x18>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e000      	b.n	800bbae <LL_RCC_LSE_IsReady+0x1a>
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <LL_RCC_SetRFWKPClockSource>:
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bbc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bbcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <LL_RCC_SetSMPSClockSource>:
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bbec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf2:	f023 0203 	bic.w	r2, r3, #3
 800bbf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <LL_RCC_SetSMPSPrescaler>:
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bc14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bc1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <LL_RCC_SetUSARTClockSource>:
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bc3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc44:	f023 0203 	bic.w	r2, r3, #3
 800bc48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <LL_RCC_SetLPUARTClockSource>:
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bc68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bc74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <LL_RCC_SetI2CClockSource>:
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bc94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	091b      	lsrs	r3, r3, #4
 800bca0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bca4:	43db      	mvns	r3, r3
 800bca6:	401a      	ands	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bcb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <LL_RCC_SetLPTIMClockSource>:
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bcce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	0c1b      	lsrs	r3, r3, #16
 800bcda:	041b      	lsls	r3, r3, #16
 800bcdc:	43db      	mvns	r3, r3
 800bcde:	401a      	ands	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bce8:	4313      	orrs	r3, r2
 800bcea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <LL_RCC_SetSAIClockSource>:
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b083      	sub	sp, #12
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bd02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bd0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd1a:	bf00      	nop
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <LL_RCC_SetRNGClockSource>:
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bd2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bd3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <LL_RCC_SetCLK48ClockSource>:
{
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bd5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bd66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd72:	bf00      	nop
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <LL_RCC_SetUSBClockSource>:
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff ffe3 	bl	800bd52 <LL_RCC_SetCLK48ClockSource>
}
 800bd8c:	bf00      	nop
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <LL_RCC_SetADCClockSource>:
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bd9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bda4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bda8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <LL_RCC_SetRTCClockSource>:
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bdc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bdd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <LL_RCC_GetRTCClockSource>:
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bdf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <LL_RCC_ForceBackupDomainReset>:
{
 800be06:	b480      	push	{r7}
 800be08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800be0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be1e:	bf00      	nop
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <LL_RCC_ReleaseBackupDomainReset>:
{
 800be28:	b480      	push	{r7}
 800be2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800be2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be40:	bf00      	nop
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <LL_RCC_PLLSAI1_Enable>:
{
 800be4a:	b480      	push	{r7}
 800be4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800be4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be5c:	6013      	str	r3, [r2, #0]
}
 800be5e:	bf00      	nop
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <LL_RCC_PLLSAI1_Disable>:
{
 800be68:	b480      	push	{r7}
 800be6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800be6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be7a:	6013      	str	r3, [r2, #0]
}
 800be7c:	bf00      	nop
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <LL_RCC_PLLSAI1_IsReady>:
{
 800be86:	b480      	push	{r7}
 800be88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800be8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be98:	d101      	bne.n	800be9e <LL_RCC_PLLSAI1_IsReady+0x18>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e000      	b.n	800bea0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800beb2:	2300      	movs	r3, #0
 800beb4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800beb6:	2300      	movs	r3, #0
 800beb8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d034      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bece:	d021      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bed0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bed4:	d81b      	bhi.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bed6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800beda:	d01d      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800bedc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bee0:	d815      	bhi.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00b      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x54>
 800bee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800beea:	d110      	bne.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800beec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800befa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800befc:	e00d      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	3304      	adds	r3, #4
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f947 	bl	800c196 <RCCEx_PLLSAI1_ConfigNP>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bf0c:	e005      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	77fb      	strb	r3, [r7, #31]
        break;
 800bf12:	e002      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bf14:	bf00      	nop
 800bf16:	e000      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bf18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf1a:	7ffb      	ldrb	r3, [r7, #31]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d105      	bne.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff fee8 	bl	800bcfa <LL_RCC_SetSAIClockSource>
 800bf2a:	e001      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf2c:	7ffb      	ldrb	r3, [r7, #31]
 800bf2e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d046      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800bf3c:	f7ff ff56 	bl	800bdec <LL_RCC_GetRTCClockSource>
 800bf40:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d03c      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bf4c:	f7fe fc68 	bl	800a820 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d105      	bne.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff ff30 	bl	800bdc0 <LL_RCC_SetRTCClockSource>
 800bf60:	e02e      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800bf62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf6a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800bf6c:	f7ff ff4b 	bl	800be06 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800bf70:	f7ff ff5a 	bl	800be28 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800bf82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800bf8c:	f7ff fdf0 	bl	800bb70 <LL_RCC_LSE_IsEnabled>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d114      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bf96:	f7fd ff35 	bl	8009e04 <HAL_GetTick>
 800bf9a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800bf9c:	e00b      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf9e:	f7fd ff31 	bl	8009e04 <HAL_GetTick>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d902      	bls.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	77fb      	strb	r3, [r7, #31]
              break;
 800bfb4:	e004      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800bfb6:	f7ff fded 	bl	800bb94 <LL_RCC_LSE_IsReady>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d1ee      	bne.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800bfc0:	7ffb      	ldrb	r3, [r7, #31]
 800bfc2:	77bb      	strb	r3, [r7, #30]
 800bfc4:	e001      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc6:	7ffb      	ldrb	r3, [r7, #31]
 800bfc8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d004      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fe2a 	bl	800bc34 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 0302 	and.w	r3, r3, #2
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d004      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fe35 	bl	800bc60 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0310 	and.w	r3, r3, #16
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fe5d 	bl	800bcc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0320 	and.w	r3, r3, #32
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fe52 	bl	800bcc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d004      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff fe2a 	bl	800bc8c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0308 	and.w	r3, r3, #8
 800c040:	2b00      	cmp	r3, #0
 800c042:	d004      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c048:	4618      	mov	r0, r3
 800c04a:	f7ff fe1f 	bl	800bc8c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c056:	2b00      	cmp	r3, #0
 800c058:	d022      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff fe8d 	bl	800bd7e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c06c:	d107      	bne.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c06e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c07c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c086:	d10b      	bne.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3304      	adds	r3, #4
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 f8dd 	bl	800c24c <RCCEx_PLLSAI1_ConfigNQ>
 800c092:	4603      	mov	r3, r0
 800c094:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c096:	7ffb      	ldrb	r3, [r7, #31]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c09c:	7ffb      	ldrb	r3, [r7, #31]
 800c09e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d02b      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b4:	d008      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0be:	d003      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d105      	bne.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fe2a 	bl	800bd26 <LL_RCC_SetRNGClockSource>
 800c0d2:	e00a      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c0dc:	60fb      	str	r3, [r7, #12]
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f7ff fe21 	bl	800bd26 <LL_RCC_SetRNGClockSource>
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7ff fe34 	bl	800bd52 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c0f2:	d107      	bne.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c0f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d022      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff fe3d 	bl	800bd94 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c11e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c122:	d107      	bne.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c12e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c132:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c13c:	d10b      	bne.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3304      	adds	r3, #4
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f8dd 	bl	800c302 <RCCEx_PLLSAI1_ConfigNR>
 800c148:	4603      	mov	r3, r0
 800c14a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c14c:	7ffb      	ldrb	r3, [r7, #31]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c152:	7ffb      	ldrb	r3, [r7, #31]
 800c154:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d004      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff fd26 	bl	800bbb8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d009      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fd45 	bl	800bc0c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c186:	4618      	mov	r0, r3
 800c188:	f7ff fd2c 	bl	800bbe4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c18c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3720      	adds	r7, #32
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c1a2:	f7ff fe61 	bl	800be68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c1a6:	f7fd fe2d 	bl	8009e04 <HAL_GetTick>
 800c1aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c1ac:	e009      	b.n	800c1c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c1ae:	f7fd fe29 	bl	8009e04 <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d902      	bls.n	800c1c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	73fb      	strb	r3, [r7, #15]
      break;
 800c1c0:	e004      	b.n	800c1cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c1c2:	f7ff fe60 	bl	800be86 <LL_RCC_PLLSAI1_IsReady>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1f0      	bne.n	800c1ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d137      	bne.n	800c242 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	021b      	lsls	r3, r3, #8
 800c1e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c200:	f7ff fe23 	bl	800be4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c204:	f7fd fdfe 	bl	8009e04 <HAL_GetTick>
 800c208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c20a:	e009      	b.n	800c220 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c20c:	f7fd fdfa 	bl	8009e04 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	2b02      	cmp	r3, #2
 800c218:	d902      	bls.n	800c220 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	73fb      	strb	r3, [r7, #15]
        break;
 800c21e:	e004      	b.n	800c22a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c220:	f7ff fe31 	bl	800be86 <LL_RCC_PLLSAI1_IsReady>
 800c224:	4603      	mov	r3, r0
 800c226:	2b01      	cmp	r3, #1
 800c228:	d1f0      	bne.n	800c20c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d108      	bne.n	800c242 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c234:	691a      	ldr	r2, [r3, #16]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c23e:	4313      	orrs	r3, r2
 800c240:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c242:	7bfb      	ldrb	r3, [r7, #15]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c258:	f7ff fe06 	bl	800be68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c25c:	f7fd fdd2 	bl	8009e04 <HAL_GetTick>
 800c260:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c262:	e009      	b.n	800c278 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c264:	f7fd fdce 	bl	8009e04 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d902      	bls.n	800c278 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	73fb      	strb	r3, [r7, #15]
      break;
 800c276:	e004      	b.n	800c282 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c278:	f7ff fe05 	bl	800be86 <LL_RCC_PLLSAI1_IsReady>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1f0      	bne.n	800c264 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d137      	bne.n	800c2f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c29c:	4313      	orrs	r3, r2
 800c29e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c2a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c2b6:	f7ff fdc8 	bl	800be4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2ba:	f7fd fda3 	bl	8009e04 <HAL_GetTick>
 800c2be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c2c0:	e009      	b.n	800c2d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c2c2:	f7fd fd9f 	bl	8009e04 <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d902      	bls.n	800c2d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	73fb      	strb	r3, [r7, #15]
        break;
 800c2d4:	e004      	b.n	800c2e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c2d6:	f7ff fdd6 	bl	800be86 <LL_RCC_PLLSAI1_IsReady>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d1f0      	bne.n	800c2c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d108      	bne.n	800c2f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c2e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2ea:	691a      	ldr	r2, [r3, #16]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c30e:	f7ff fdab 	bl	800be68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c312:	f7fd fd77 	bl	8009e04 <HAL_GetTick>
 800c316:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c318:	e009      	b.n	800c32e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c31a:	f7fd fd73 	bl	8009e04 <HAL_GetTick>
 800c31e:	4602      	mov	r2, r0
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	2b02      	cmp	r3, #2
 800c326:	d902      	bls.n	800c32e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c328:	2303      	movs	r3, #3
 800c32a:	73fb      	strb	r3, [r7, #15]
      break;
 800c32c:	e004      	b.n	800c338 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c32e:	f7ff fdaa 	bl	800be86 <LL_RCC_PLLSAI1_IsReady>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1f0      	bne.n	800c31a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d137      	bne.n	800c3ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c33e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c352:	4313      	orrs	r3, r2
 800c354:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c368:	4313      	orrs	r3, r2
 800c36a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c36c:	f7ff fd6d 	bl	800be4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c370:	f7fd fd48 	bl	8009e04 <HAL_GetTick>
 800c374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c376:	e009      	b.n	800c38c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c378:	f7fd fd44 	bl	8009e04 <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b02      	cmp	r3, #2
 800c384:	d902      	bls.n	800c38c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	73fb      	strb	r3, [r7, #15]
        break;
 800c38a:	e004      	b.n	800c396 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c38c:	f7ff fd7b 	bl	800be86 <LL_RCC_PLLSAI1_IsReady>
 800c390:	4603      	mov	r3, r0
 800c392:	2b01      	cmp	r3, #1
 800c394:	d1f0      	bne.n	800c378 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d108      	bne.n	800c3ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c39c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3a0:	691a      	ldr	r2, [r3, #16]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e09f      	b.n	800c50a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7fc f870 	bl	80084c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c3ec:	4b49      	ldr	r3, [pc, #292]	@ (800c514 <HAL_RTC_Init+0x15c>)
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f003 0310 	and.w	r3, r3, #16
 800c3f4:	2b10      	cmp	r3, #16
 800c3f6:	d07e      	beq.n	800c4f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	22ca      	movs	r2, #202	@ 0xca
 800c3fe:	625a      	str	r2, [r3, #36]	@ 0x24
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2253      	movs	r2, #83	@ 0x53
 800c406:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fac6 	bl	800c99a <RTC_EnterInitMode>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00a      	beq.n	800c42a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	22ff      	movs	r2, #255	@ 0xff
 800c41a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2204      	movs	r2, #4
 800c420:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	73fb      	strb	r3, [r7, #15]
 800c428:	e067      	b.n	800c4fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	6812      	ldr	r2, [r2, #0]
 800c434:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c43c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	6899      	ldr	r1, [r3, #8]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	431a      	orrs	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	430a      	orrs	r2, r1
 800c45a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	68d2      	ldr	r2, [r2, #12]
 800c464:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6919      	ldr	r1, [r3, #16]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	041a      	lsls	r2, r3, #16
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68da      	ldr	r2, [r3, #12]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c488:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f022 0203 	bic.w	r2, r2, #3
 800c498:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	69da      	ldr	r2, [r3, #28]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	431a      	orrs	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f003 0320 	and.w	r3, r3, #32
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d113      	bne.n	800c4e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fa44 	bl	800c94e <HAL_RTC_WaitForSynchro>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00d      	beq.n	800c4e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	22ff      	movs	r2, #255	@ 0xff
 800c4d2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2204      	movs	r2, #4
 800c4d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e010      	b.n	800c50a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	22ff      	movs	r2, #255	@ 0xff
 800c4ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
 800c4f4:	e001      	b.n	800c4fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d103      	bne.n	800c508 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	40002800 	.word	0x40002800

0800c518 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c518:	b590      	push	{r4, r7, lr}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d101      	bne.n	800c532 <HAL_RTC_SetTime+0x1a>
 800c52e:	2302      	movs	r3, #2
 800c530:	e0b2      	b.n	800c698 <HAL_RTC_SetTime+0x180>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2202      	movs	r2, #2
 800c53e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d126      	bne.n	800c596 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	d102      	bne.n	800c55c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2200      	movs	r2, #0
 800c55a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	4618      	mov	r0, r3
 800c562:	f000 fa44 	bl	800c9ee <RTC_ByteToBcd2>
 800c566:	4603      	mov	r3, r0
 800c568:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	785b      	ldrb	r3, [r3, #1]
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 fa3d 	bl	800c9ee <RTC_ByteToBcd2>
 800c574:	4603      	mov	r3, r0
 800c576:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c578:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	789b      	ldrb	r3, [r3, #2]
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fa35 	bl	800c9ee <RTC_ByteToBcd2>
 800c584:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c586:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	78db      	ldrb	r3, [r3, #3]
 800c58e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	e018      	b.n	800c5c8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d102      	bne.n	800c5aa <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	785b      	ldrb	r3, [r3, #1]
 800c5b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c5b6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c5bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	78db      	ldrb	r3, [r3, #3]
 800c5c2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	22ca      	movs	r2, #202	@ 0xca
 800c5ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2253      	movs	r2, #83	@ 0x53
 800c5d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f000 f9de 	bl	800c99a <RTC_EnterInitMode>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00d      	beq.n	800c600 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	22ff      	movs	r2, #255	@ 0xff
 800c5ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2204      	movs	r2, #4
 800c5f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e04b      	b.n	800c698 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c60a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c60e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	689a      	ldr	r2, [r3, #8]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c61e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6899      	ldr	r1, [r3, #8]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	68da      	ldr	r2, [r3, #12]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	431a      	orrs	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	430a      	orrs	r2, r1
 800c636:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c646:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d113      	bne.n	800c67e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f000 f979 	bl	800c94e <HAL_RTC_WaitForSynchro>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00d      	beq.n	800c67e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	22ff      	movs	r2, #255	@ 0xff
 800c668:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2204      	movs	r2, #4
 800c66e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e00c      	b.n	800c698 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	22ff      	movs	r2, #255	@ 0xff
 800c684:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800c696:	2300      	movs	r3, #0
  }
}
 800c698:	4618      	mov	r0, r3
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd90      	pop	{r4, r7, pc}

0800c6a0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c6ce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c6d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	0c1b      	lsrs	r3, r3, #16
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	0a1b      	lsrs	r3, r3, #8
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	0c1b      	lsrs	r3, r3, #16
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d11a      	bne.n	800c74e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 f986 	bl	800ca2e <RTC_Bcd2ToByte>
 800c722:	4603      	mov	r3, r0
 800c724:	461a      	mov	r2, r3
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	785b      	ldrb	r3, [r3, #1]
 800c72e:	4618      	mov	r0, r3
 800c730:	f000 f97d 	bl	800ca2e <RTC_Bcd2ToByte>
 800c734:	4603      	mov	r3, r0
 800c736:	461a      	mov	r2, r3
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	789b      	ldrb	r3, [r3, #2]
 800c740:	4618      	mov	r0, r3
 800c742:	f000 f974 	bl	800ca2e <RTC_Bcd2ToByte>
 800c746:	4603      	mov	r3, r0
 800c748:	461a      	mov	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c758:	b590      	push	{r4, r7, lr}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <HAL_RTC_SetDate+0x1a>
 800c76e:	2302      	movs	r3, #2
 800c770:	e09c      	b.n	800c8ac <HAL_RTC_SetDate+0x154>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2202      	movs	r2, #2
 800c77e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10e      	bne.n	800c7a6 <HAL_RTC_SetDate+0x4e>
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	2b00      	cmp	r3, #0
 800c792:	d008      	beq.n	800c7a6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	f023 0310 	bic.w	r3, r3, #16
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	330a      	adds	r3, #10
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d11c      	bne.n	800c7e6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	78db      	ldrb	r3, [r3, #3]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f91c 	bl	800c9ee <RTC_ByteToBcd2>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	785b      	ldrb	r3, [r3, #1]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 f915 	bl	800c9ee <RTC_ByteToBcd2>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c7c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	789b      	ldrb	r3, [r3, #2]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 f90d 	bl	800c9ee <RTC_ByteToBcd2>
 800c7d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c7d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	e00e      	b.n	800c804 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	78db      	ldrb	r3, [r3, #3]
 800c7ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c7f2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c7f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c800:	4313      	orrs	r3, r2
 800c802:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	22ca      	movs	r2, #202	@ 0xca
 800c80a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2253      	movs	r2, #83	@ 0x53
 800c812:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 f8c0 	bl	800c99a <RTC_EnterInitMode>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00d      	beq.n	800c83c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	22ff      	movs	r2, #255	@ 0xff
 800c826:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2204      	movs	r2, #4
 800c82c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e037      	b.n	800c8ac <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c846:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c84a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68da      	ldr	r2, [r3, #12]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c85a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f003 0320 	and.w	r3, r3, #32
 800c866:	2b00      	cmp	r3, #0
 800c868:	d113      	bne.n	800c892 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 f86f 	bl	800c94e <HAL_RTC_WaitForSynchro>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00d      	beq.n	800c892 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	22ff      	movs	r2, #255	@ 0xff
 800c87c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2204      	movs	r2, #4
 800c882:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e00c      	b.n	800c8ac <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	22ff      	movs	r2, #255	@ 0xff
 800c898:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
  }
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	371c      	adds	r7, #28
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd90      	pop	{r4, r7, pc}

0800c8b4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c8ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c8ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	0c1b      	lsrs	r3, r3, #16
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	0a1b      	lsrs	r3, r3, #8
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 031f 	and.w	r3, r3, #31
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	0b5b      	lsrs	r3, r3, #13
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 0307 	and.w	r3, r3, #7
 800c902:	b2da      	uxtb	r2, r3
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d11a      	bne.n	800c944 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	78db      	ldrb	r3, [r3, #3]
 800c912:	4618      	mov	r0, r3
 800c914:	f000 f88b 	bl	800ca2e <RTC_Bcd2ToByte>
 800c918:	4603      	mov	r3, r0
 800c91a:	461a      	mov	r2, r3
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	4618      	mov	r0, r3
 800c926:	f000 f882 	bl	800ca2e <RTC_Bcd2ToByte>
 800c92a:	4603      	mov	r3, r0
 800c92c:	461a      	mov	r2, r3
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	789b      	ldrb	r3, [r3, #2]
 800c936:	4618      	mov	r0, r3
 800c938:	f000 f879 	bl	800ca2e <RTC_Bcd2ToByte>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800c964:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c966:	f7fd fa4d 	bl	8009e04 <HAL_GetTick>
 800c96a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c96c:	e009      	b.n	800c982 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c96e:	f7fd fa49 	bl	8009e04 <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c97c:	d901      	bls.n	800c982 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c97e:	2303      	movs	r3, #3
 800c980:	e007      	b.n	800c992 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	f003 0320 	and.w	r3, r3, #32
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d0ee      	beq.n	800c96e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d119      	bne.n	800c9e4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c9ba:	f7fd fa23 	bl	8009e04 <HAL_GetTick>
 800c9be:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c9c0:	e009      	b.n	800c9d6 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c9c2:	f7fd fa1f 	bl	8009e04 <HAL_GetTick>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9d0:	d901      	bls.n	800c9d6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e007      	b.n	800c9e6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0ee      	beq.n	800c9c2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800ca00:	e005      	b.n	800ca0e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3301      	adds	r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800ca08:	7afb      	ldrb	r3, [r7, #11]
 800ca0a:	3b0a      	subs	r3, #10
 800ca0c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800ca0e:	7afb      	ldrb	r3, [r7, #11]
 800ca10:	2b09      	cmp	r3, #9
 800ca12:	d8f6      	bhi.n	800ca02 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	7afb      	ldrb	r3, [r7, #11]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	b2db      	uxtb	r3, r3
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ca2e:	b480      	push	{r7}
 800ca30:	b085      	sub	sp, #20
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	4603      	mov	r3, r0
 800ca36:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	091b      	lsrs	r3, r3, #4
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	461a      	mov	r2, r3
 800ca40:	4613      	mov	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	79fb      	ldrb	r3, [r7, #7]
 800ca50:	f003 030f 	and.w	r3, r3, #15
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	4413      	add	r3, r2
 800ca58:	b2db      	uxtb	r3, r3
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b087      	sub	sp, #28
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	60f8      	str	r0, [r7, #12]
 800ca6e:	60b9      	str	r1, [r7, #8]
 800ca70:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3350      	adds	r3, #80	@ 0x50
 800ca78:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	697a      	ldr	r2, [r7, #20]
 800ca80:	4413      	add	r3, r2
 800ca82:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	601a      	str	r2, [r3, #0]
}
 800ca8a:	bf00      	nop
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e095      	b.n	800cbd4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	d108      	bne.n	800cac2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cab8:	d009      	beq.n	800cace <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	61da      	str	r2, [r3, #28]
 800cac0:	e005      	b.n	800cace <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d106      	bne.n	800caee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7fb fd17 	bl	800851c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2202      	movs	r2, #2
 800caf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb04:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cb0e:	d902      	bls.n	800cb16 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e002      	b.n	800cb1c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cb16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cb24:	d007      	beq.n	800cb36 <HAL_SPI_Init+0xa0>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cb2e:	d002      	beq.n	800cb36 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cb46:	431a      	orrs	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	f003 0302 	and.w	r3, r3, #2
 800cb50:	431a      	orrs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb64:	431a      	orrs	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb78:	ea42 0103 	orr.w	r1, r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	0c1b      	lsrs	r3, r3, #16
 800cb92:	f003 0204 	and.w	r2, r3, #4
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9a:	f003 0310 	and.w	r3, r3, #16
 800cb9e:	431a      	orrs	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba4:	f003 0308 	and.w	r3, r3, #8
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cbb2:	ea42 0103 	orr.w	r1, r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08a      	sub	sp, #40	@ 0x28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cbea:	2301      	movs	r3, #1
 800cbec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d101      	bne.n	800cc02 <HAL_SPI_TransmitReceive+0x26>
 800cbfe:	2302      	movs	r3, #2
 800cc00:	e1fb      	b.n	800cffa <HAL_SPI_TransmitReceive+0x41e>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc0a:	f7fd f8fb 	bl	8009e04 <HAL_GetTick>
 800cc0e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cc16:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800cc1e:	887b      	ldrh	r3, [r7, #2]
 800cc20:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800cc22:	887b      	ldrh	r3, [r7, #2]
 800cc24:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc26:	7efb      	ldrb	r3, [r7, #27]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d00e      	beq.n	800cc4a <HAL_SPI_TransmitReceive+0x6e>
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cc32:	d106      	bne.n	800cc42 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d102      	bne.n	800cc42 <HAL_SPI_TransmitReceive+0x66>
 800cc3c:	7efb      	ldrb	r3, [r7, #27]
 800cc3e:	2b04      	cmp	r3, #4
 800cc40:	d003      	beq.n	800cc4a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
 800cc44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800cc48:	e1cd      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <HAL_SPI_TransmitReceive+0x80>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <HAL_SPI_TransmitReceive+0x80>
 800cc56:	887b      	ldrh	r3, [r7, #2]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d103      	bne.n	800cc64 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800cc62:	e1c0      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d003      	beq.n	800cc78 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2205      	movs	r2, #5
 800cc74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	887a      	ldrh	r2, [r7, #2]
 800cc88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	887a      	ldrh	r2, [r7, #2]
 800cc90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	887a      	ldrh	r2, [r7, #2]
 800cc9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	887a      	ldrh	r2, [r7, #2]
 800cca4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ccba:	d802      	bhi.n	800ccc2 <HAL_SPI_TransmitReceive+0xe6>
 800ccbc:	8a3b      	ldrh	r3, [r7, #16]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d908      	bls.n	800ccd4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ccd0:	605a      	str	r2, [r3, #4]
 800ccd2:	e007      	b.n	800cce4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cce2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccee:	2b40      	cmp	r3, #64	@ 0x40
 800ccf0:	d007      	beq.n	800cd02 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cd0a:	d97c      	bls.n	800ce06 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <HAL_SPI_TransmitReceive+0x13e>
 800cd14:	8a7b      	ldrh	r3, [r7, #18]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d169      	bne.n	800cdee <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd1e:	881a      	ldrh	r2, [r3, #0]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2a:	1c9a      	adds	r2, r3, #2
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	3b01      	subs	r3, #1
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd3e:	e056      	b.n	800cdee <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d11b      	bne.n	800cd86 <HAL_SPI_TransmitReceive+0x1aa>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d016      	beq.n	800cd86 <HAL_SPI_TransmitReceive+0x1aa>
 800cd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d113      	bne.n	800cd86 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd62:	881a      	ldrh	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd6e:	1c9a      	adds	r2, r3, #2
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d11c      	bne.n	800cdce <HAL_SPI_TransmitReceive+0x1f2>
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d016      	beq.n	800cdce <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68da      	ldr	r2, [r3, #12]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdaa:	b292      	uxth	r2, r2
 800cdac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb2:	1c9a      	adds	r2, r3, #2
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cdce:	f7fd f819 	bl	8009e04 <HAL_GetTick>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d807      	bhi.n	800cdee <HAL_SPI_TransmitReceive+0x212>
 800cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde4:	d003      	beq.n	800cdee <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800cde6:	2303      	movs	r3, #3
 800cde8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800cdec:	e0fb      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1a3      	bne.n	800cd40 <HAL_SPI_TransmitReceive+0x164>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d19d      	bne.n	800cd40 <HAL_SPI_TransmitReceive+0x164>
 800ce04:	e0df      	b.n	800cfc6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <HAL_SPI_TransmitReceive+0x23a>
 800ce0e:	8a7b      	ldrh	r3, [r7, #18]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	f040 80cb 	bne.w	800cfac <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d912      	bls.n	800ce46 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce24:	881a      	ldrh	r2, [r3, #0]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce30:	1c9a      	adds	r2, r3, #2
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	3b02      	subs	r3, #2
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ce44:	e0b2      	b.n	800cfac <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	330c      	adds	r3, #12
 800ce50:	7812      	ldrb	r2, [r2, #0]
 800ce52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	3b01      	subs	r3, #1
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce6c:	e09e      	b.n	800cfac <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f003 0302 	and.w	r3, r3, #2
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d134      	bne.n	800cee6 <HAL_SPI_TransmitReceive+0x30a>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d02f      	beq.n	800cee6 <HAL_SPI_TransmitReceive+0x30a>
 800ce86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d12c      	bne.n	800cee6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d912      	bls.n	800cebc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9a:	881a      	ldrh	r2, [r3, #0]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea6:	1c9a      	adds	r2, r3, #2
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	3b02      	subs	r3, #2
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ceba:	e012      	b.n	800cee2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	330c      	adds	r3, #12
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	3b01      	subs	r3, #1
 800cedc:	b29a      	uxth	r2, r3
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d148      	bne.n	800cf86 <HAL_SPI_TransmitReceive+0x3aa>
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d042      	beq.n	800cf86 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d923      	bls.n	800cf54 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68da      	ldr	r2, [r3, #12]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf16:	b292      	uxth	r2, r2
 800cf18:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf1e:	1c9a      	adds	r2, r3, #2
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	3b02      	subs	r3, #2
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d81f      	bhi.n	800cf82 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	685a      	ldr	r2, [r3, #4]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cf50:	605a      	str	r2, [r3, #4]
 800cf52:	e016      	b.n	800cf82 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f103 020c 	add.w	r2, r3, #12
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf60:	7812      	ldrb	r2, [r2, #0]
 800cf62:	b2d2      	uxtb	r2, r2
 800cf64:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf6a:	1c5a      	adds	r2, r3, #1
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cf82:	2301      	movs	r3, #1
 800cf84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cf86:	f7fc ff3d 	bl	8009e04 <HAL_GetTick>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d803      	bhi.n	800cf9e <HAL_SPI_TransmitReceive+0x3c2>
 800cf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9c:	d102      	bne.n	800cfa4 <HAL_SPI_TransmitReceive+0x3c8>
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800cfaa:	e01c      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f47f af5b 	bne.w	800ce6e <HAL_SPI_TransmitReceive+0x292>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f47f af54 	bne.w	800ce6e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cfc6:	69fa      	ldr	r2, [r7, #28]
 800cfc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f000 f938 	bl	800d240 <SPI_EndRxTxTransaction>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d006      	beq.n	800cfe4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2220      	movs	r2, #32
 800cfe0:	661a      	str	r2, [r3, #96]	@ 0x60
 800cfe2:	e000      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800cfe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cff6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3728      	adds	r7, #40	@ 0x28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b088      	sub	sp, #32
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	603b      	str	r3, [r7, #0]
 800d010:	4613      	mov	r3, r2
 800d012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d014:	f7fc fef6 	bl	8009e04 <HAL_GetTick>
 800d018:	4602      	mov	r2, r0
 800d01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01c:	1a9b      	subs	r3, r3, r2
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	4413      	add	r3, r2
 800d022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d024:	f7fc feee 	bl	8009e04 <HAL_GetTick>
 800d028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d02a:	4b39      	ldr	r3, [pc, #228]	@ (800d110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	015b      	lsls	r3, r3, #5
 800d030:	0d1b      	lsrs	r3, r3, #20
 800d032:	69fa      	ldr	r2, [r7, #28]
 800d034:	fb02 f303 	mul.w	r3, r2, r3
 800d038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d03a:	e054      	b.n	800d0e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d042:	d050      	beq.n	800d0e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d044:	f7fc fede 	bl	8009e04 <HAL_GetTick>
 800d048:	4602      	mov	r2, r0
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	429a      	cmp	r2, r3
 800d052:	d902      	bls.n	800d05a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d13d      	bne.n	800d0d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d072:	d111      	bne.n	800d098 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d07c:	d004      	beq.n	800d088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d086:	d107      	bne.n	800d098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d09c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0a0:	d10f      	bne.n	800d0c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d0c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	e017      	b.n	800d106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d101      	bne.n	800d0e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	689a      	ldr	r2, [r3, #8]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	bf0c      	ite	eq
 800d0f6:	2301      	moveq	r3, #1
 800d0f8:	2300      	movne	r3, #0
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	79fb      	ldrb	r3, [r7, #7]
 800d100:	429a      	cmp	r2, r3
 800d102:	d19b      	bne.n	800d03c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3720      	adds	r7, #32
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20000010 	.word	0x20000010

0800d114 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08a      	sub	sp, #40	@ 0x28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d126:	f7fc fe6d 	bl	8009e04 <HAL_GetTick>
 800d12a:	4602      	mov	r2, r0
 800d12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12e:	1a9b      	subs	r3, r3, r2
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	4413      	add	r3, r2
 800d134:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d136:	f7fc fe65 	bl	8009e04 <HAL_GetTick>
 800d13a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	330c      	adds	r3, #12
 800d142:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d144:	4b3d      	ldr	r3, [pc, #244]	@ (800d23c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	00da      	lsls	r2, r3, #3
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	0d1b      	lsrs	r3, r3, #20
 800d154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d156:	fb02 f303 	mul.w	r3, r2, r3
 800d15a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d15c:	e060      	b.n	800d220 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d164:	d107      	bne.n	800d176 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d104      	bne.n	800d176 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	b2db      	uxtb	r3, r3
 800d172:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d174:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d050      	beq.n	800d220 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d17e:	f7fc fe41 	bl	8009e04 <HAL_GetTick>
 800d182:	4602      	mov	r2, r0
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d902      	bls.n	800d194 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d190:	2b00      	cmp	r3, #0
 800d192:	d13d      	bne.n	800d210 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d1a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d1ac:	d111      	bne.n	800d1d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1b6:	d004      	beq.n	800d1c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1c0:	d107      	bne.n	800d1d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1da:	d10f      	bne.n	800d1fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d1fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d20c:	2303      	movs	r3, #3
 800d20e:	e010      	b.n	800d232 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	689a      	ldr	r2, [r3, #8]
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	4013      	ands	r3, r2
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d196      	bne.n	800d15e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3728      	adds	r7, #40	@ 0x28
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20000010 	.word	0x20000010

0800d240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af02      	add	r7, sp, #8
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2200      	movs	r2, #0
 800d254:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f7ff ff5b 	bl	800d114 <SPI_WaitFifoStateUntilTimeout>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d268:	f043 0220 	orr.w	r2, r3, #32
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d270:	2303      	movs	r3, #3
 800d272:	e027      	b.n	800d2c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2200      	movs	r2, #0
 800d27c:	2180      	movs	r1, #128	@ 0x80
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7ff fec0 	bl	800d004 <SPI_WaitFlagStateUntilTimeout>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d007      	beq.n	800d29a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d28e:	f043 0220 	orr.w	r2, r3, #32
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d296:	2303      	movs	r3, #3
 800d298:	e014      	b.n	800d2c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f7ff ff34 	bl	800d114 <SPI_WaitFifoStateUntilTimeout>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d007      	beq.n	800d2c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2b6:	f043 0220 	orr.w	r2, r3, #32
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e000      	b.n	800d2c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e054      	b.n	800d388 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d111      	bne.n	800d30e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 ff68 	bl	800e1c8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d102      	bne.n	800d306 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a23      	ldr	r2, [pc, #140]	@ (800d390 <HAL_TIM_Base_Init+0xc4>)
 800d304:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2202      	movs	r2, #2
 800d312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3304      	adds	r3, #4
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f000 fbd3 	bl	800dacc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2201      	movs	r2, #1
 800d332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2201      	movs	r2, #1
 800d36a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	08008609 	.word	0x08008609

0800d394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d001      	beq.n	800d3ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e036      	b.n	800d41a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	68da      	ldr	r2, [r3, #12]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f042 0201 	orr.w	r2, r2, #1
 800d3c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a17      	ldr	r2, [pc, #92]	@ (800d428 <HAL_TIM_Base_Start_IT+0x94>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d004      	beq.n	800d3d8 <HAL_TIM_Base_Start_IT+0x44>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3d6:	d115      	bne.n	800d404 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	689a      	ldr	r2, [r3, #8]
 800d3de:	4b13      	ldr	r3, [pc, #76]	@ (800d42c <HAL_TIM_Base_Start_IT+0x98>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b06      	cmp	r3, #6
 800d3e8:	d015      	beq.n	800d416 <HAL_TIM_Base_Start_IT+0x82>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f0:	d011      	beq.n	800d416 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f042 0201 	orr.w	r2, r2, #1
 800d400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d402:	e008      	b.n	800d416 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f042 0201 	orr.w	r2, r2, #1
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	e000      	b.n	800d418 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	40012c00 	.word	0x40012c00
 800d42c:	00010007 	.word	0x00010007

0800d430 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d101      	bne.n	800d442 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	e054      	b.n	800d4ec <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d111      	bne.n	800d472 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 feb6 	bl	800e1c8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a23      	ldr	r2, [pc, #140]	@ (800d4f4 <HAL_TIM_OC_Init+0xc4>)
 800d468:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2202      	movs	r2, #2
 800d476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	3304      	adds	r3, #4
 800d482:	4619      	mov	r1, r3
 800d484:	4610      	mov	r0, r2
 800d486:	f000 fb21 	bl	800dacc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	0800d4f9 	.word	0x0800d4f9

0800d4f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	f003 0302 	and.w	r3, r3, #2
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d128      	bne.n	800d574 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d121      	bne.n	800d574 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f06f 0202 	mvn.w	r2, #2
 800d538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2201      	movs	r2, #1
 800d53e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	699b      	ldr	r3, [r3, #24]
 800d546:	f003 0303 	and.w	r3, r3, #3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d005      	beq.n	800d55a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	4798      	blx	r3
 800d558:	e009      	b.n	800d56e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	f003 0304 	and.w	r3, r3, #4
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d128      	bne.n	800d5d4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d121      	bne.n	800d5d4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f06f 0204 	mvn.w	r2, #4
 800d598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2202      	movs	r2, #2
 800d59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	4798      	blx	r3
 800d5b8:	e009      	b.n	800d5ce <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	f003 0308 	and.w	r3, r3, #8
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	d128      	bne.n	800d634 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	f003 0308 	and.w	r3, r3, #8
 800d5ec:	2b08      	cmp	r3, #8
 800d5ee:	d121      	bne.n	800d634 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f06f 0208 	mvn.w	r2, #8
 800d5f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2204      	movs	r2, #4
 800d5fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	69db      	ldr	r3, [r3, #28]
 800d606:	f003 0303 	and.w	r3, r3, #3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	4798      	blx	r3
 800d618:	e009      	b.n	800d62e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	f003 0310 	and.w	r3, r3, #16
 800d63e:	2b10      	cmp	r3, #16
 800d640:	d128      	bne.n	800d694 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	f003 0310 	and.w	r3, r3, #16
 800d64c:	2b10      	cmp	r3, #16
 800d64e:	d121      	bne.n	800d694 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f06f 0210 	mvn.w	r2, #16
 800d658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2208      	movs	r2, #8
 800d65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	69db      	ldr	r3, [r3, #28]
 800d666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	4798      	blx	r3
 800d678:	e009      	b.n	800d68e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d110      	bne.n	800d6c4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d109      	bne.n	800d6c4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f06f 0201 	mvn.w	r2, #1
 800d6b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6ce:	2b80      	cmp	r3, #128	@ 0x80
 800d6d0:	d110      	bne.n	800d6f4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6dc:	2b80      	cmp	r3, #128	@ 0x80
 800d6de:	d109      	bne.n	800d6f4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d702:	d110      	bne.n	800d726 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d70e:	2b80      	cmp	r3, #128	@ 0x80
 800d710:	d109      	bne.n	800d726 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d730:	2b40      	cmp	r3, #64	@ 0x40
 800d732:	d110      	bne.n	800d756 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d73e:	2b40      	cmp	r3, #64	@ 0x40
 800d740:	d109      	bne.n	800d756 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b20      	cmp	r3, #32
 800d762:	d110      	bne.n	800d786 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	f003 0320 	and.w	r3, r3, #32
 800d76e:	2b20      	cmp	r3, #32
 800d770:	d109      	bne.n	800d786 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f06f 0220 	mvn.w	r2, #32
 800d77a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d101      	bne.n	800d7ae <HAL_TIM_OC_ConfigChannel+0x1e>
 800d7aa:	2302      	movs	r3, #2
 800d7ac:	e066      	b.n	800d87c <HAL_TIM_OC_ConfigChannel+0xec>
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b14      	cmp	r3, #20
 800d7ba:	d857      	bhi.n	800d86c <HAL_TIM_OC_ConfigChannel+0xdc>
 800d7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d7c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800d7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c2:	bf00      	nop
 800d7c4:	0800d819 	.word	0x0800d819
 800d7c8:	0800d86d 	.word	0x0800d86d
 800d7cc:	0800d86d 	.word	0x0800d86d
 800d7d0:	0800d86d 	.word	0x0800d86d
 800d7d4:	0800d827 	.word	0x0800d827
 800d7d8:	0800d86d 	.word	0x0800d86d
 800d7dc:	0800d86d 	.word	0x0800d86d
 800d7e0:	0800d86d 	.word	0x0800d86d
 800d7e4:	0800d835 	.word	0x0800d835
 800d7e8:	0800d86d 	.word	0x0800d86d
 800d7ec:	0800d86d 	.word	0x0800d86d
 800d7f0:	0800d86d 	.word	0x0800d86d
 800d7f4:	0800d843 	.word	0x0800d843
 800d7f8:	0800d86d 	.word	0x0800d86d
 800d7fc:	0800d86d 	.word	0x0800d86d
 800d800:	0800d86d 	.word	0x0800d86d
 800d804:	0800d851 	.word	0x0800d851
 800d808:	0800d86d 	.word	0x0800d86d
 800d80c:	0800d86d 	.word	0x0800d86d
 800d810:	0800d86d 	.word	0x0800d86d
 800d814:	0800d85f 	.word	0x0800d85f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68b9      	ldr	r1, [r7, #8]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f9b8 	bl	800db94 <TIM_OC1_SetConfig>
      break;
 800d824:	e025      	b.n	800d872 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 fa2d 	bl	800dc8c <TIM_OC2_SetConfig>
      break;
 800d832:	e01e      	b.n	800d872 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68b9      	ldr	r1, [r7, #8]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 faa0 	bl	800dd80 <TIM_OC3_SetConfig>
      break;
 800d840:	e017      	b.n	800d872 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68b9      	ldr	r1, [r7, #8]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fb11 	bl	800de70 <TIM_OC4_SetConfig>
      break;
 800d84e:	e010      	b.n	800d872 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68b9      	ldr	r1, [r7, #8]
 800d856:	4618      	mov	r0, r3
 800d858:	f000 fb68 	bl	800df2c <TIM_OC5_SetConfig>
      break;
 800d85c:	e009      	b.n	800d872 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	4618      	mov	r0, r3
 800d866:	f000 fbb9 	bl	800dfdc <TIM_OC6_SetConfig>
      break;
 800d86a:	e002      	b.n	800d872 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	75fb      	strb	r3, [r7, #23]
      break;
 800d870:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d101      	bne.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c>
 800d89c:	2302      	movs	r3, #2
 800d89e:	e0b6      	b.n	800da0e <HAL_TIM_ConfigClockSource+0x18a>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2202      	movs	r2, #2
 800d8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800d8be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d8c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d8ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8dc:	d03e      	beq.n	800d95c <HAL_TIM_ConfigClockSource+0xd8>
 800d8de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8e2:	f200 8087 	bhi.w	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d8e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8ea:	f000 8086 	beq.w	800d9fa <HAL_TIM_ConfigClockSource+0x176>
 800d8ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8f2:	d87f      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d8f4:	2b70      	cmp	r3, #112	@ 0x70
 800d8f6:	d01a      	beq.n	800d92e <HAL_TIM_ConfigClockSource+0xaa>
 800d8f8:	2b70      	cmp	r3, #112	@ 0x70
 800d8fa:	d87b      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d8fc:	2b60      	cmp	r3, #96	@ 0x60
 800d8fe:	d050      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x11e>
 800d900:	2b60      	cmp	r3, #96	@ 0x60
 800d902:	d877      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d904:	2b50      	cmp	r3, #80	@ 0x50
 800d906:	d03c      	beq.n	800d982 <HAL_TIM_ConfigClockSource+0xfe>
 800d908:	2b50      	cmp	r3, #80	@ 0x50
 800d90a:	d873      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d90c:	2b40      	cmp	r3, #64	@ 0x40
 800d90e:	d058      	beq.n	800d9c2 <HAL_TIM_ConfigClockSource+0x13e>
 800d910:	2b40      	cmp	r3, #64	@ 0x40
 800d912:	d86f      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d914:	2b30      	cmp	r3, #48	@ 0x30
 800d916:	d064      	beq.n	800d9e2 <HAL_TIM_ConfigClockSource+0x15e>
 800d918:	2b30      	cmp	r3, #48	@ 0x30
 800d91a:	d86b      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d91c:	2b20      	cmp	r3, #32
 800d91e:	d060      	beq.n	800d9e2 <HAL_TIM_ConfigClockSource+0x15e>
 800d920:	2b20      	cmp	r3, #32
 800d922:	d867      	bhi.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
 800d924:	2b00      	cmp	r3, #0
 800d926:	d05c      	beq.n	800d9e2 <HAL_TIM_ConfigClockSource+0x15e>
 800d928:	2b10      	cmp	r3, #16
 800d92a:	d05a      	beq.n	800d9e2 <HAL_TIM_ConfigClockSource+0x15e>
 800d92c:	e062      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d93e:	f000 fc23 	bl	800e188 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	609a      	str	r2, [r3, #8]
      break;
 800d95a:	e04f      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d96c:	f000 fc0c 	bl	800e188 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	689a      	ldr	r2, [r3, #8]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d97e:	609a      	str	r2, [r3, #8]
      break;
 800d980:	e03c      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d98e:	461a      	mov	r2, r3
 800d990:	f000 fb7e 	bl	800e090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2150      	movs	r1, #80	@ 0x50
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 fbd7 	bl	800e14e <TIM_ITRx_SetConfig>
      break;
 800d9a0:	e02c      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f000 fb9d 	bl	800e0ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2160      	movs	r1, #96	@ 0x60
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 fbc7 	bl	800e14e <TIM_ITRx_SetConfig>
      break;
 800d9c0:	e01c      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	f000 fb5e 	bl	800e090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2140      	movs	r1, #64	@ 0x40
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 fbb7 	bl	800e14e <TIM_ITRx_SetConfig>
      break;
 800d9e0:	e00c      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f000 fbae 	bl	800e14e <TIM_ITRx_SetConfig>
      break;
 800d9f2:	e003      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f8:	e000      	b.n	800d9fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d9fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800da16:	b480      	push	{r7}
 800da18:	b083      	sub	sp, #12
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800da1e:	bf00      	nop
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b083      	sub	sp, #12
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da32:	bf00      	nop
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da3e:	b480      	push	{r7}
 800da40:	b083      	sub	sp, #12
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800da5a:	bf00      	nop
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da6e:	bf00      	nop
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b083      	sub	sp, #12
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800da82:	bf00      	nop
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da96:	bf00      	nop
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b083      	sub	sp, #12
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800daaa:	bf00      	nop
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b083      	sub	sp, #12
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800dabe:	bf00      	nop
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
	...

0800dacc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a2a      	ldr	r2, [pc, #168]	@ (800db88 <TIM_Base_SetConfig+0xbc>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d003      	beq.n	800daec <TIM_Base_SetConfig+0x20>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800daea:	d108      	bne.n	800dafe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a21      	ldr	r2, [pc, #132]	@ (800db88 <TIM_Base_SetConfig+0xbc>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d00b      	beq.n	800db1e <TIM_Base_SetConfig+0x52>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db0c:	d007      	beq.n	800db1e <TIM_Base_SetConfig+0x52>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a1e      	ldr	r2, [pc, #120]	@ (800db8c <TIM_Base_SetConfig+0xc0>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d003      	beq.n	800db1e <TIM_Base_SetConfig+0x52>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a1d      	ldr	r2, [pc, #116]	@ (800db90 <TIM_Base_SetConfig+0xc4>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d108      	bne.n	800db30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	689a      	ldr	r2, [r3, #8]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a0c      	ldr	r2, [pc, #48]	@ (800db88 <TIM_Base_SetConfig+0xbc>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d007      	beq.n	800db6c <TIM_Base_SetConfig+0xa0>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a0b      	ldr	r2, [pc, #44]	@ (800db8c <TIM_Base_SetConfig+0xc0>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d003      	beq.n	800db6c <TIM_Base_SetConfig+0xa0>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a0a      	ldr	r2, [pc, #40]	@ (800db90 <TIM_Base_SetConfig+0xc4>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d103      	bne.n	800db74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	691a      	ldr	r2, [r3, #16]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	615a      	str	r2, [r3, #20]
}
 800db7a:	bf00      	nop
 800db7c:	3714      	adds	r7, #20
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	40012c00 	.word	0x40012c00
 800db8c:	40014400 	.word	0x40014400
 800db90:	40014800 	.word	0x40014800

0800db94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db94:	b480      	push	{r7}
 800db96:	b087      	sub	sp, #28
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a1b      	ldr	r3, [r3, #32]
 800dba2:	f023 0201 	bic.w	r2, r3, #1
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	699b      	ldr	r3, [r3, #24]
 800dbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f023 0303 	bic.w	r3, r3, #3
 800dbce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f023 0302 	bic.w	r3, r3, #2
 800dbe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4a24      	ldr	r2, [pc, #144]	@ (800dc80 <TIM_OC1_SetConfig+0xec>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d007      	beq.n	800dc04 <TIM_OC1_SetConfig+0x70>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a23      	ldr	r2, [pc, #140]	@ (800dc84 <TIM_OC1_SetConfig+0xf0>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d003      	beq.n	800dc04 <TIM_OC1_SetConfig+0x70>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a22      	ldr	r2, [pc, #136]	@ (800dc88 <TIM_OC1_SetConfig+0xf4>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d10c      	bne.n	800dc1e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f023 0308 	bic.w	r3, r3, #8
 800dc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f023 0304 	bic.w	r3, r3, #4
 800dc1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a17      	ldr	r2, [pc, #92]	@ (800dc80 <TIM_OC1_SetConfig+0xec>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d007      	beq.n	800dc36 <TIM_OC1_SetConfig+0xa2>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a17      	ldr	r2, [pc, #92]	@ (800dc88 <TIM_OC1_SetConfig+0xf4>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d003      	beq.n	800dc36 <TIM_OC1_SetConfig+0xa2>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a14      	ldr	r2, [pc, #80]	@ (800dc84 <TIM_OC1_SetConfig+0xf0>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d111      	bne.n	800dc5a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	695b      	ldr	r3, [r3, #20]
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	621a      	str	r2, [r3, #32]
}
 800dc74:	bf00      	nop
 800dc76:	371c      	adds	r7, #28
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	40012c00 	.word	0x40012c00
 800dc84:	40014800 	.word	0x40014800
 800dc88:	40014400 	.word	0x40014400

0800dc8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a1b      	ldr	r3, [r3, #32]
 800dc9a:	f023 0210 	bic.w	r2, r3, #16
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a1b      	ldr	r3, [r3, #32]
 800dca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dcba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	021b      	lsls	r3, r3, #8
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	f023 0320 	bic.w	r3, r3, #32
 800dcda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	011b      	lsls	r3, r3, #4
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a22      	ldr	r2, [pc, #136]	@ (800dd74 <TIM_OC2_SetConfig+0xe8>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d10d      	bne.n	800dd0c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	011b      	lsls	r3, r3, #4
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a19      	ldr	r2, [pc, #100]	@ (800dd74 <TIM_OC2_SetConfig+0xe8>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d007      	beq.n	800dd24 <TIM_OC2_SetConfig+0x98>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a18      	ldr	r2, [pc, #96]	@ (800dd78 <TIM_OC2_SetConfig+0xec>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d003      	beq.n	800dd24 <TIM_OC2_SetConfig+0x98>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a17      	ldr	r2, [pc, #92]	@ (800dd7c <TIM_OC2_SetConfig+0xf0>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d113      	bne.n	800dd4c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	699b      	ldr	r3, [r3, #24]
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	697a      	ldr	r2, [r7, #20]
 800dd64:	621a      	str	r2, [r3, #32]
}
 800dd66:	bf00      	nop
 800dd68:	371c      	adds	r7, #28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	40012c00 	.word	0x40012c00
 800dd78:	40014400 	.word	0x40014400
 800dd7c:	40014800 	.word	0x40014800

0800dd80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b087      	sub	sp, #28
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a1b      	ldr	r3, [r3, #32]
 800dd9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	69db      	ldr	r3, [r3, #28]
 800dda6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ddae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f023 0303 	bic.w	r3, r3, #3
 800ddba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ddcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	021b      	lsls	r3, r3, #8
 800ddd4:	697a      	ldr	r2, [r7, #20]
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a21      	ldr	r2, [pc, #132]	@ (800de64 <TIM_OC3_SetConfig+0xe4>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d10d      	bne.n	800ddfe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dde8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	021b      	lsls	r3, r3, #8
 800ddf0:	697a      	ldr	r2, [r7, #20]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ddfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4a18      	ldr	r2, [pc, #96]	@ (800de64 <TIM_OC3_SetConfig+0xe4>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d007      	beq.n	800de16 <TIM_OC3_SetConfig+0x96>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4a17      	ldr	r2, [pc, #92]	@ (800de68 <TIM_OC3_SetConfig+0xe8>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d003      	beq.n	800de16 <TIM_OC3_SetConfig+0x96>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a16      	ldr	r2, [pc, #88]	@ (800de6c <TIM_OC3_SetConfig+0xec>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d113      	bne.n	800de3e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	011b      	lsls	r3, r3, #4
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	4313      	orrs	r3, r2
 800de30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	011b      	lsls	r3, r3, #4
 800de38:	693a      	ldr	r2, [r7, #16]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	621a      	str	r2, [r3, #32]
}
 800de58:	bf00      	nop
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	40012c00 	.word	0x40012c00
 800de68:	40014400 	.word	0x40014400
 800de6c:	40014800 	.word	0x40014800

0800de70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de70:	b480      	push	{r7}
 800de72:	b087      	sub	sp, #28
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	69db      	ldr	r3, [r3, #28]
 800de96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800de9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800deaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	021b      	lsls	r3, r3, #8
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800debe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	031b      	lsls	r3, r3, #12
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	4313      	orrs	r3, r2
 800deca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a14      	ldr	r2, [pc, #80]	@ (800df20 <TIM_OC4_SetConfig+0xb0>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d007      	beq.n	800dee4 <TIM_OC4_SetConfig+0x74>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a13      	ldr	r2, [pc, #76]	@ (800df24 <TIM_OC4_SetConfig+0xb4>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d003      	beq.n	800dee4 <TIM_OC4_SetConfig+0x74>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a12      	ldr	r2, [pc, #72]	@ (800df28 <TIM_OC4_SetConfig+0xb8>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d109      	bne.n	800def8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800deea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	019b      	lsls	r3, r3, #6
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	4313      	orrs	r3, r2
 800def6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	693a      	ldr	r2, [r7, #16]
 800df10:	621a      	str	r2, [r3, #32]
}
 800df12:	bf00      	nop
 800df14:	371c      	adds	r7, #28
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	40012c00 	.word	0x40012c00
 800df24:	40014400 	.word	0x40014400
 800df28:	40014800 	.word	0x40014800

0800df2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a1b      	ldr	r3, [r3, #32]
 800df3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	4313      	orrs	r3, r2
 800df68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800df70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	041b      	lsls	r3, r3, #16
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	4313      	orrs	r3, r2
 800df7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4a13      	ldr	r2, [pc, #76]	@ (800dfd0 <TIM_OC5_SetConfig+0xa4>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d007      	beq.n	800df96 <TIM_OC5_SetConfig+0x6a>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a12      	ldr	r2, [pc, #72]	@ (800dfd4 <TIM_OC5_SetConfig+0xa8>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d003      	beq.n	800df96 <TIM_OC5_SetConfig+0x6a>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4a11      	ldr	r2, [pc, #68]	@ (800dfd8 <TIM_OC5_SetConfig+0xac>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d109      	bne.n	800dfaa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	697a      	ldr	r2, [r7, #20]
 800dfae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	621a      	str	r2, [r3, #32]
}
 800dfc4:	bf00      	nop
 800dfc6:	371c      	adds	r7, #28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	40012c00 	.word	0x40012c00
 800dfd4:	40014400 	.word	0x40014400
 800dfd8:	40014800 	.word	0x40014800

0800dfdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b087      	sub	sp, #28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6a1b      	ldr	r3, [r3, #32]
 800dfea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a1b      	ldr	r3, [r3, #32]
 800dff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e00a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	021b      	lsls	r3, r3, #8
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	4313      	orrs	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	051b      	lsls	r3, r3, #20
 800e02a:	693a      	ldr	r2, [r7, #16]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a14      	ldr	r2, [pc, #80]	@ (800e084 <TIM_OC6_SetConfig+0xa8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d007      	beq.n	800e048 <TIM_OC6_SetConfig+0x6c>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a13      	ldr	r2, [pc, #76]	@ (800e088 <TIM_OC6_SetConfig+0xac>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d003      	beq.n	800e048 <TIM_OC6_SetConfig+0x6c>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a12      	ldr	r2, [pc, #72]	@ (800e08c <TIM_OC6_SetConfig+0xb0>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d109      	bne.n	800e05c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e04e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	029b      	lsls	r3, r3, #10
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	4313      	orrs	r3, r2
 800e05a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	697a      	ldr	r2, [r7, #20]
 800e060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	685a      	ldr	r2, [r3, #4]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	693a      	ldr	r2, [r7, #16]
 800e074:	621a      	str	r2, [r3, #32]
}
 800e076:	bf00      	nop
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	40012c00 	.word	0x40012c00
 800e088:	40014400 	.word	0x40014400
 800e08c:	40014800 	.word	0x40014800

0800e090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e090:	b480      	push	{r7}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6a1b      	ldr	r3, [r3, #32]
 800e0a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	f023 0201 	bic.w	r2, r3, #1
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e0ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	011b      	lsls	r3, r3, #4
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f023 030a 	bic.w	r3, r3, #10
 800e0cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	693a      	ldr	r2, [r7, #16]
 800e0da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	697a      	ldr	r2, [r7, #20]
 800e0e0:	621a      	str	r2, [r3, #32]
}
 800e0e2:	bf00      	nop
 800e0e4:	371c      	adds	r7, #28
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr

0800e0ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b087      	sub	sp, #28
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	60f8      	str	r0, [r7, #12]
 800e0f6:	60b9      	str	r1, [r7, #8]
 800e0f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	f023 0210 	bic.w	r2, r3, #16
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6a1b      	ldr	r3, [r3, #32]
 800e110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	031b      	lsls	r3, r3, #12
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	4313      	orrs	r3, r2
 800e122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e12a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	011b      	lsls	r3, r3, #4
 800e130:	693a      	ldr	r2, [r7, #16]
 800e132:	4313      	orrs	r3, r2
 800e134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	621a      	str	r2, [r3, #32]
}
 800e142:	bf00      	nop
 800e144:	371c      	adds	r7, #28
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e14e:	b480      	push	{r7}
 800e150:	b085      	sub	sp, #20
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4313      	orrs	r3, r2
 800e170:	f043 0307 	orr.w	r3, r3, #7
 800e174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	609a      	str	r2, [r3, #8]
}
 800e17c:	bf00      	nop
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e188:	b480      	push	{r7}
 800e18a:	b087      	sub	sp, #28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
 800e194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e1a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	021a      	lsls	r2, r3, #8
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	697a      	ldr	r2, [r7, #20]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	697a      	ldr	r2, [r7, #20]
 800e1ba:	609a      	str	r2, [r3, #8]
}
 800e1bc:	bf00      	nop
 800e1be:	371c      	adds	r7, #28
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4a1e      	ldr	r2, [pc, #120]	@ (800e24c <TIM_ResetCallback+0x84>)
 800e1d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4a1d      	ldr	r2, [pc, #116]	@ (800e250 <TIM_ResetCallback+0x88>)
 800e1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a1c      	ldr	r2, [pc, #112]	@ (800e254 <TIM_ResetCallback+0x8c>)
 800e1e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e258 <TIM_ResetCallback+0x90>)
 800e1ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e25c <TIM_ResetCallback+0x94>)
 800e1f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a19      	ldr	r2, [pc, #100]	@ (800e260 <TIM_ResetCallback+0x98>)
 800e1fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a18      	ldr	r2, [pc, #96]	@ (800e264 <TIM_ResetCallback+0x9c>)
 800e204:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a17      	ldr	r2, [pc, #92]	@ (800e268 <TIM_ResetCallback+0xa0>)
 800e20c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a16      	ldr	r2, [pc, #88]	@ (800e26c <TIM_ResetCallback+0xa4>)
 800e214:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4a15      	ldr	r2, [pc, #84]	@ (800e270 <TIM_ResetCallback+0xa8>)
 800e21c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a14      	ldr	r2, [pc, #80]	@ (800e274 <TIM_ResetCallback+0xac>)
 800e224:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a13      	ldr	r2, [pc, #76]	@ (800e278 <TIM_ResetCallback+0xb0>)
 800e22c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a12      	ldr	r2, [pc, #72]	@ (800e27c <TIM_ResetCallback+0xb4>)
 800e234:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a11      	ldr	r2, [pc, #68]	@ (800e280 <TIM_ResetCallback+0xb8>)
 800e23c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	08003bd5 	.word	0x08003bd5
 800e250:	0800da17 	.word	0x0800da17
 800e254:	0800da8f 	.word	0x0800da8f
 800e258:	0800daa3 	.word	0x0800daa3
 800e25c:	0800da3f 	.word	0x0800da3f
 800e260:	0800da53 	.word	0x0800da53
 800e264:	0800da2b 	.word	0x0800da2b
 800e268:	0800da67 	.word	0x0800da67
 800e26c:	0800da7b 	.word	0x0800da7b
 800e270:	0800dab7 	.word	0x0800dab7
 800e274:	0800e465 	.word	0x0800e465
 800e278:	0800e479 	.word	0x0800e479
 800e27c:	0800e48d 	.word	0x0800e48d
 800e280:	0800e4a1 	.word	0x0800e4a1

0800e284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e294:	2b01      	cmp	r3, #1
 800e296:	d101      	bne.n	800e29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e298:	2302      	movs	r3, #2
 800e29a:	e04a      	b.n	800e332 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2202      	movs	r2, #2
 800e2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a1f      	ldr	r2, [pc, #124]	@ (800e340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d108      	bne.n	800e2d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e2cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a12      	ldr	r2, [pc, #72]	@ (800e340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d004      	beq.n	800e306 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e304:	d10c      	bne.n	800e320 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e30c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	4313      	orrs	r3, r2
 800e316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	40012c00 	.word	0x40012c00

0800e344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e34e:	2300      	movs	r3, #0
 800e350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d101      	bne.n	800e360 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e35c:	2302      	movs	r3, #2
 800e35e:	e078      	b.n	800e452 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	4313      	orrs	r3, r2
 800e374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	4313      	orrs	r3, r2
 800e382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	4313      	orrs	r3, r2
 800e390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4313      	orrs	r3, r2
 800e39e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	695b      	ldr	r3, [r3, #20]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	041b      	lsls	r3, r3, #16
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4a20      	ldr	r2, [pc, #128]	@ (800e460 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d106      	bne.n	800e3f2 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	69db      	ldr	r3, [r3, #28]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a1a      	ldr	r2, [pc, #104]	@ (800e460 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d121      	bne.n	800e440 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e406:	051b      	lsls	r3, r3, #20
 800e408:	4313      	orrs	r3, r2
 800e40a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	4313      	orrs	r3, r2
 800e418:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e424:	4313      	orrs	r3, r2
 800e426:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a0c      	ldr	r2, [pc, #48]	@ (800e460 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d106      	bne.n	800e440 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43c:	4313      	orrs	r3, r2
 800e43e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3714      	adds	r7, #20
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	40012c00 	.word	0x40012c00

0800e464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4a8:	bf00      	nop
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <LL_RCC_GetUSARTClockSource>:
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800e4bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4013      	ands	r3, r2
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <LL_RCC_GetLPUARTClockSource>:
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e4dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4013      	ands	r3, r2
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	e042      	b.n	800e58c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d106      	bne.n	800e51e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7f9 ff45 	bl	80083a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2224      	movs	r2, #36	@ 0x24
 800e522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f022 0201 	bic.w	r2, r2, #1
 800e534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fbfe 	bl	800ed38 <UART_SetConfig>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d101      	bne.n	800e546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	e022      	b.n	800e58c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 fe1a 	bl	800f188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	689a      	ldr	r2, [r3, #8]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f042 0201 	orr.w	r2, r2, #1
 800e582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 fea1 	bl	800f2cc <UART_CheckIdleState>
 800e58a:	4603      	mov	r3, r0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b08a      	sub	sp, #40	@ 0x28
 800e598:	af02      	add	r7, sp, #8
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	603b      	str	r3, [r7, #0]
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5aa:	2b20      	cmp	r3, #32
 800e5ac:	d17b      	bne.n	800e6a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <HAL_UART_Transmit+0x26>
 800e5b4:	88fb      	ldrh	r3, [r7, #6]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e074      	b.n	800e6a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2221      	movs	r2, #33	@ 0x21
 800e5ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5ce:	f7fb fc19 	bl	8009e04 <HAL_GetTick>
 800e5d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	88fa      	ldrh	r2, [r7, #6]
 800e5d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	88fa      	ldrh	r2, [r7, #6]
 800e5e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5ec:	d108      	bne.n	800e600 <HAL_UART_Transmit+0x6c>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d104      	bne.n	800e600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	61bb      	str	r3, [r7, #24]
 800e5fe:	e003      	b.n	800e608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e604:	2300      	movs	r3, #0
 800e606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e608:	e030      	b.n	800e66c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	2200      	movs	r2, #0
 800e612:	2180      	movs	r1, #128	@ 0x80
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f000 ff03 	bl	800f420 <UART_WaitOnFlagUntilTimeout>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d005      	beq.n	800e62c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2220      	movs	r2, #32
 800e624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e628:	2303      	movs	r3, #3
 800e62a:	e03d      	b.n	800e6a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10b      	bne.n	800e64a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	3302      	adds	r3, #2
 800e646:	61bb      	str	r3, [r7, #24]
 800e648:	e007      	b.n	800e65a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	781a      	ldrb	r2, [r3, #0]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	3301      	adds	r3, #1
 800e658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e660:	b29b      	uxth	r3, r3
 800e662:	3b01      	subs	r3, #1
 800e664:	b29a      	uxth	r2, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e672:	b29b      	uxth	r3, r3
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1c8      	bne.n	800e60a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	2200      	movs	r2, #0
 800e680:	2140      	movs	r1, #64	@ 0x40
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 fecc 	bl	800f420 <UART_WaitOnFlagUntilTimeout>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d005      	beq.n	800e69a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e696:	2303      	movs	r3, #3
 800e698:	e006      	b.n	800e6a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2220      	movs	r2, #32
 800e69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e000      	b.n	800e6a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e6a6:	2302      	movs	r3, #2
  }
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3720      	adds	r7, #32
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b0ba      	sub	sp, #232	@ 0xe8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	69db      	ldr	r3, [r3, #28]
 800e6be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e6d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e6da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e6de:	4013      	ands	r3, r2
 800e6e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e6e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d11b      	bne.n	800e724 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6f0:	f003 0320 	and.w	r3, r3, #32
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d015      	beq.n	800e724 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6fc:	f003 0320 	and.w	r3, r3, #32
 800e700:	2b00      	cmp	r3, #0
 800e702:	d105      	bne.n	800e710 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d009      	beq.n	800e724 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 82e3 	beq.w	800ece0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	4798      	blx	r3
      }
      return;
 800e722:	e2dd      	b.n	800ece0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f000 8123 	beq.w	800e974 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e72e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e732:	4b8d      	ldr	r3, [pc, #564]	@ (800e968 <HAL_UART_IRQHandler+0x2b8>)
 800e734:	4013      	ands	r3, r2
 800e736:	2b00      	cmp	r3, #0
 800e738:	d106      	bne.n	800e748 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e73a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e73e:	4b8b      	ldr	r3, [pc, #556]	@ (800e96c <HAL_UART_IRQHandler+0x2bc>)
 800e740:	4013      	ands	r3, r2
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 8116 	beq.w	800e974 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d011      	beq.n	800e778 <HAL_UART_IRQHandler+0xc8>
 800e754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00b      	beq.n	800e778 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2201      	movs	r2, #1
 800e766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e76e:	f043 0201 	orr.w	r2, r3, #1
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e77c:	f003 0302 	and.w	r3, r3, #2
 800e780:	2b00      	cmp	r3, #0
 800e782:	d011      	beq.n	800e7a8 <HAL_UART_IRQHandler+0xf8>
 800e784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e788:	f003 0301 	and.w	r3, r3, #1
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00b      	beq.n	800e7a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2202      	movs	r2, #2
 800e796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e79e:	f043 0204 	orr.w	r2, r3, #4
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ac:	f003 0304 	and.w	r3, r3, #4
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d011      	beq.n	800e7d8 <HAL_UART_IRQHandler+0x128>
 800e7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00b      	beq.n	800e7d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2204      	movs	r2, #4
 800e7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7ce:	f043 0202 	orr.w	r2, r3, #2
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7dc:	f003 0308 	and.w	r3, r3, #8
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d017      	beq.n	800e814 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7e8:	f003 0320 	and.w	r3, r3, #32
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e7f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e7f4:	4b5c      	ldr	r3, [pc, #368]	@ (800e968 <HAL_UART_IRQHandler+0x2b8>)
 800e7f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00b      	beq.n	800e814 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2208      	movs	r2, #8
 800e802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e80a:	f043 0208 	orr.w	r2, r3, #8
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d012      	beq.n	800e846 <HAL_UART_IRQHandler+0x196>
 800e820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e824:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00c      	beq.n	800e846 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e83c:	f043 0220 	orr.w	r2, r3, #32
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 8249 	beq.w	800ece4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e856:	f003 0320 	and.w	r3, r3, #32
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d013      	beq.n	800e886 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	d105      	bne.n	800e876 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e86a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e86e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e872:	2b00      	cmp	r3, #0
 800e874:	d007      	beq.n	800e886 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e88c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e89a:	2b40      	cmp	r3, #64	@ 0x40
 800e89c:	d005      	beq.n	800e8aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e89e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e8a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d054      	beq.n	800e954 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 fe1f 	bl	800f4ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ba:	2b40      	cmp	r3, #64	@ 0x40
 800e8bc:	d146      	bne.n	800e94c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3308      	adds	r3, #8
 800e8c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e8cc:	e853 3f00 	ldrex	r3, [r3]
 800e8d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e8d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e8d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e8ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e8ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e8f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e8fa:	e841 2300 	strex	r3, r2, [r1]
 800e8fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1d9      	bne.n	800e8be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e910:	2b00      	cmp	r3, #0
 800e912:	d017      	beq.n	800e944 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e91a:	4a15      	ldr	r2, [pc, #84]	@ (800e970 <HAL_UART_IRQHandler+0x2c0>)
 800e91c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e924:	4618      	mov	r0, r3
 800e926:	f7fb fbf3 	bl	800a110 <HAL_DMA_Abort_IT>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d019      	beq.n	800e964 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e93e:	4610      	mov	r0, r2
 800e940:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e942:	e00f      	b.n	800e964 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f9e1 	bl	800ed0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e94a:	e00b      	b.n	800e964 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f9dd 	bl	800ed0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e952:	e007      	b.n	800e964 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f9d9 	bl	800ed0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e962:	e1bf      	b.n	800ece4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e964:	bf00      	nop
    return;
 800e966:	e1bd      	b.n	800ece4 <HAL_UART_IRQHandler+0x634>
 800e968:	10000001 	.word	0x10000001
 800e96c:	04000120 	.word	0x04000120
 800e970:	0800f5bb 	.word	0x0800f5bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e978:	2b01      	cmp	r3, #1
 800e97a:	f040 8153 	bne.w	800ec24 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e982:	f003 0310 	and.w	r3, r3, #16
 800e986:	2b00      	cmp	r3, #0
 800e988:	f000 814c 	beq.w	800ec24 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e990:	f003 0310 	and.w	r3, r3, #16
 800e994:	2b00      	cmp	r3, #0
 800e996:	f000 8145 	beq.w	800ec24 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2210      	movs	r2, #16
 800e9a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ac:	2b40      	cmp	r3, #64	@ 0x40
 800e9ae:	f040 80bb 	bne.w	800eb28 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e9c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f000 818f 	beq.w	800ece8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e9d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	f080 8187 	bcs.w	800ece8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e9e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f003 0320 	and.w	r3, r3, #32
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f040 8087 	bne.w	800eb06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ea04:	e853 3f00 	ldrex	r3, [r3]
 800ea08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ea0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ea10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ea22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ea26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ea2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ea32:	e841 2300 	strex	r3, r2, [r1]
 800ea36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ea3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1da      	bne.n	800e9f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3308      	adds	r3, #8
 800ea48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea4c:	e853 3f00 	ldrex	r3, [r3]
 800ea50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ea52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea54:	f023 0301 	bic.w	r3, r3, #1
 800ea58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3308      	adds	r3, #8
 800ea62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ea66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ea6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ea6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ea72:	e841 2300 	strex	r3, r2, [r1]
 800ea76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ea78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1e1      	bne.n	800ea42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3308      	adds	r3, #8
 800ea84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea88:	e853 3f00 	ldrex	r3, [r3]
 800ea8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ea8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3308      	adds	r3, #8
 800ea9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800eaa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800eaa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eaa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eaaa:	e841 2300 	strex	r3, r2, [r1]
 800eaae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1e3      	bne.n	800ea7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2220      	movs	r2, #32
 800eaba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eacc:	e853 3f00 	ldrex	r3, [r3]
 800ead0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ead2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ead4:	f023 0310 	bic.w	r3, r3, #16
 800ead8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	461a      	mov	r2, r3
 800eae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eae8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eaec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eaf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e4      	bne.n	800eac4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fb faa6 	bl	800a052 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2202      	movs	r2, #2
 800eb0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f8fd 	bl	800ed20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb26:	e0df      	b.n	800ece8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f000 80d1 	beq.w	800ecec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800eb4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 80cc 	beq.w	800ecec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5c:	e853 3f00 	ldrex	r3, [r3]
 800eb60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	461a      	mov	r2, r3
 800eb72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb76:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb7e:	e841 2300 	strex	r3, r2, [r1]
 800eb82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1e4      	bne.n	800eb54 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb94:	e853 3f00 	ldrex	r3, [r3]
 800eb98:	623b      	str	r3, [r7, #32]
   return(result);
 800eb9a:	6a3b      	ldr	r3, [r7, #32]
 800eb9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eba0:	f023 0301 	bic.w	r3, r3, #1
 800eba4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	3308      	adds	r3, #8
 800ebae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ebb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800ebb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebba:	e841 2300 	strex	r3, r2, [r1]
 800ebbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1e1      	bne.n	800eb8a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2220      	movs	r2, #32
 800ebca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	e853 3f00 	ldrex	r3, [r3]
 800ebe6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f023 0310 	bic.w	r3, r3, #16
 800ebee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ebfc:	61fb      	str	r3, [r7, #28]
 800ebfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec00:	69b9      	ldr	r1, [r7, #24]
 800ec02:	69fa      	ldr	r2, [r7, #28]
 800ec04:	e841 2300 	strex	r3, r2, [r1]
 800ec08:	617b      	str	r3, [r7, #20]
   return(result);
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1e4      	bne.n	800ebda <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ec16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 f87f 	bl	800ed20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec22:	e063      	b.n	800ecec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ec24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00e      	beq.n	800ec4e <HAL_UART_IRQHandler+0x59e>
 800ec30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d008      	beq.n	800ec4e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ec44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fcf8 	bl	800f63c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec4c:	e051      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d014      	beq.n	800ec84 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ec5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d105      	bne.n	800ec72 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d008      	beq.n	800ec84 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d03a      	beq.n	800ecf0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	4798      	blx	r3
    }
    return;
 800ec82:	e035      	b.n	800ecf0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d009      	beq.n	800eca4 <HAL_UART_IRQHandler+0x5f4>
 800ec90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d003      	beq.n	800eca4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 fca2 	bl	800f5e6 <UART_EndTransmit_IT>
    return;
 800eca2:	e026      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d009      	beq.n	800ecc4 <HAL_UART_IRQHandler+0x614>
 800ecb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d003      	beq.n	800ecc4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 fcd1 	bl	800f664 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ecc2:	e016      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ecc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d010      	beq.n	800ecf2 <HAL_UART_IRQHandler+0x642>
 800ecd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	da0c      	bge.n	800ecf2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 fcb9 	bl	800f650 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ecde:	e008      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
      return;
 800ece0:	bf00      	nop
 800ece2:	e006      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
    return;
 800ece4:	bf00      	nop
 800ece6:	e004      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
      return;
 800ece8:	bf00      	nop
 800ecea:	e002      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
      return;
 800ecec:	bf00      	nop
 800ecee:	e000      	b.n	800ecf2 <HAL_UART_IRQHandler+0x642>
    return;
 800ecf0:	bf00      	nop
  }
}
 800ecf2:	37e8      	adds	r7, #232	@ 0xe8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed14:	bf00      	nop
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed3c:	b08c      	sub	sp, #48	@ 0x30
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed42:	2300      	movs	r3, #0
 800ed44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	689a      	ldr	r2, [r3, #8]
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	431a      	orrs	r2, r3
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	431a      	orrs	r2, r3
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	69db      	ldr	r3, [r3, #28]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	4baf      	ldr	r3, [pc, #700]	@ (800f024 <UART_SetConfig+0x2ec>)
 800ed68:	4013      	ands	r3, r2
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	6812      	ldr	r2, [r2, #0]
 800ed6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed70:	430b      	orrs	r3, r1
 800ed72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	68da      	ldr	r2, [r3, #12]
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	430a      	orrs	r2, r1
 800ed88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	699b      	ldr	r3, [r3, #24]
 800ed8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4aa4      	ldr	r2, [pc, #656]	@ (800f028 <UART_SetConfig+0x2f0>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d004      	beq.n	800eda4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eda0:	4313      	orrs	r3, r2
 800eda2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800edae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	6812      	ldr	r2, [r2, #0]
 800edb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edb8:	430b      	orrs	r3, r1
 800edba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc2:	f023 010f 	bic.w	r1, r3, #15
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	430a      	orrs	r2, r1
 800edd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a95      	ldr	r2, [pc, #596]	@ (800f02c <UART_SetConfig+0x2f4>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d125      	bne.n	800ee28 <UART_SetConfig+0xf0>
 800eddc:	2003      	movs	r0, #3
 800edde:	f7ff fb69 	bl	800e4b4 <LL_RCC_GetUSARTClockSource>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d81b      	bhi.n	800ee20 <UART_SetConfig+0xe8>
 800ede8:	a201      	add	r2, pc, #4	@ (adr r2, 800edf0 <UART_SetConfig+0xb8>)
 800edea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edee:	bf00      	nop
 800edf0:	0800ee01 	.word	0x0800ee01
 800edf4:	0800ee11 	.word	0x0800ee11
 800edf8:	0800ee09 	.word	0x0800ee09
 800edfc:	0800ee19 	.word	0x0800ee19
 800ee00:	2301      	movs	r3, #1
 800ee02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee06:	e042      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee0e:	e03e      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee10:	2304      	movs	r3, #4
 800ee12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee16:	e03a      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee18:	2308      	movs	r3, #8
 800ee1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee1e:	e036      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee20:	2310      	movs	r3, #16
 800ee22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee26:	e032      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a7e      	ldr	r2, [pc, #504]	@ (800f028 <UART_SetConfig+0x2f0>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d12a      	bne.n	800ee88 <UART_SetConfig+0x150>
 800ee32:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800ee36:	f7ff fb4d 	bl	800e4d4 <LL_RCC_GetLPUARTClockSource>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee40:	d01a      	beq.n	800ee78 <UART_SetConfig+0x140>
 800ee42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee46:	d81b      	bhi.n	800ee80 <UART_SetConfig+0x148>
 800ee48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee4c:	d00c      	beq.n	800ee68 <UART_SetConfig+0x130>
 800ee4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee52:	d815      	bhi.n	800ee80 <UART_SetConfig+0x148>
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d003      	beq.n	800ee60 <UART_SetConfig+0x128>
 800ee58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee5c:	d008      	beq.n	800ee70 <UART_SetConfig+0x138>
 800ee5e:	e00f      	b.n	800ee80 <UART_SetConfig+0x148>
 800ee60:	2300      	movs	r3, #0
 800ee62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee66:	e012      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee68:	2302      	movs	r3, #2
 800ee6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee6e:	e00e      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee70:	2304      	movs	r3, #4
 800ee72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee76:	e00a      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee78:	2308      	movs	r3, #8
 800ee7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee7e:	e006      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee80:	2310      	movs	r3, #16
 800ee82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee86:	e002      	b.n	800ee8e <UART_SetConfig+0x156>
 800ee88:	2310      	movs	r3, #16
 800ee8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a65      	ldr	r2, [pc, #404]	@ (800f028 <UART_SetConfig+0x2f0>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	f040 8097 	bne.w	800efc8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ee9e:	2b08      	cmp	r3, #8
 800eea0:	d823      	bhi.n	800eeea <UART_SetConfig+0x1b2>
 800eea2:	a201      	add	r2, pc, #4	@ (adr r2, 800eea8 <UART_SetConfig+0x170>)
 800eea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea8:	0800eecd 	.word	0x0800eecd
 800eeac:	0800eeeb 	.word	0x0800eeeb
 800eeb0:	0800eed5 	.word	0x0800eed5
 800eeb4:	0800eeeb 	.word	0x0800eeeb
 800eeb8:	0800eedb 	.word	0x0800eedb
 800eebc:	0800eeeb 	.word	0x0800eeeb
 800eec0:	0800eeeb 	.word	0x0800eeeb
 800eec4:	0800eeeb 	.word	0x0800eeeb
 800eec8:	0800eee3 	.word	0x0800eee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eecc:	f7fc fd70 	bl	800b9b0 <HAL_RCC_GetPCLK1Freq>
 800eed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800eed2:	e010      	b.n	800eef6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eed4:	4b56      	ldr	r3, [pc, #344]	@ (800f030 <UART_SetConfig+0x2f8>)
 800eed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800eed8:	e00d      	b.n	800eef6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eeda:	f7fc fce9 	bl	800b8b0 <HAL_RCC_GetSysClockFreq>
 800eede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800eee0:	e009      	b.n	800eef6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800eee8:	e005      	b.n	800eef6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800eeea:	2300      	movs	r3, #0
 800eeec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800eef4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f000 812b 	beq.w	800f154 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef02:	4a4c      	ldr	r2, [pc, #304]	@ (800f034 <UART_SetConfig+0x2fc>)
 800ef04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef08:	461a      	mov	r2, r3
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	685a      	ldr	r2, [r3, #4]
 800ef16:	4613      	mov	r3, r2
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	69ba      	ldr	r2, [r7, #24]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d305      	bcc.n	800ef2e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef28:	69ba      	ldr	r2, [r7, #24]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d903      	bls.n	800ef36 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ef34:	e10e      	b.n	800f154 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef38:	2200      	movs	r2, #0
 800ef3a:	60bb      	str	r3, [r7, #8]
 800ef3c:	60fa      	str	r2, [r7, #12]
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef42:	4a3c      	ldr	r2, [pc, #240]	@ (800f034 <UART_SetConfig+0x2fc>)
 800ef44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	603b      	str	r3, [r7, #0]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef58:	f7f1 fece 	bl	8000cf8 <__aeabi_uldivmod>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4610      	mov	r0, r2
 800ef62:	4619      	mov	r1, r3
 800ef64:	f04f 0200 	mov.w	r2, #0
 800ef68:	f04f 0300 	mov.w	r3, #0
 800ef6c:	020b      	lsls	r3, r1, #8
 800ef6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef72:	0202      	lsls	r2, r0, #8
 800ef74:	6979      	ldr	r1, [r7, #20]
 800ef76:	6849      	ldr	r1, [r1, #4]
 800ef78:	0849      	lsrs	r1, r1, #1
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	4605      	mov	r5, r0
 800ef80:	eb12 0804 	adds.w	r8, r2, r4
 800ef84:	eb43 0905 	adc.w	r9, r3, r5
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	469a      	mov	sl, r3
 800ef90:	4693      	mov	fp, r2
 800ef92:	4652      	mov	r2, sl
 800ef94:	465b      	mov	r3, fp
 800ef96:	4640      	mov	r0, r8
 800ef98:	4649      	mov	r1, r9
 800ef9a:	f7f1 fead 	bl	8000cf8 <__aeabi_uldivmod>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	460b      	mov	r3, r1
 800efa2:	4613      	mov	r3, r2
 800efa4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800efac:	d308      	bcc.n	800efc0 <UART_SetConfig+0x288>
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efb4:	d204      	bcs.n	800efc0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	6a3a      	ldr	r2, [r7, #32]
 800efbc:	60da      	str	r2, [r3, #12]
 800efbe:	e0c9      	b.n	800f154 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800efc6:	e0c5      	b.n	800f154 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	69db      	ldr	r3, [r3, #28]
 800efcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800efd0:	d16d      	bne.n	800f0ae <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800efd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800efd6:	3b01      	subs	r3, #1
 800efd8:	2b07      	cmp	r3, #7
 800efda:	d82d      	bhi.n	800f038 <UART_SetConfig+0x300>
 800efdc:	a201      	add	r2, pc, #4	@ (adr r2, 800efe4 <UART_SetConfig+0x2ac>)
 800efde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe2:	bf00      	nop
 800efe4:	0800f005 	.word	0x0800f005
 800efe8:	0800f00d 	.word	0x0800f00d
 800efec:	0800f039 	.word	0x0800f039
 800eff0:	0800f013 	.word	0x0800f013
 800eff4:	0800f039 	.word	0x0800f039
 800eff8:	0800f039 	.word	0x0800f039
 800effc:	0800f039 	.word	0x0800f039
 800f000:	0800f01b 	.word	0x0800f01b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f004:	f7fc fcea 	bl	800b9dc <HAL_RCC_GetPCLK2Freq>
 800f008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f00a:	e01b      	b.n	800f044 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f00c:	4b08      	ldr	r3, [pc, #32]	@ (800f030 <UART_SetConfig+0x2f8>)
 800f00e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f010:	e018      	b.n	800f044 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f012:	f7fc fc4d 	bl	800b8b0 <HAL_RCC_GetSysClockFreq>
 800f016:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f018:	e014      	b.n	800f044 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f01a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f01e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f020:	e010      	b.n	800f044 <UART_SetConfig+0x30c>
 800f022:	bf00      	nop
 800f024:	cfff69f3 	.word	0xcfff69f3
 800f028:	40008000 	.word	0x40008000
 800f02c:	40013800 	.word	0x40013800
 800f030:	00f42400 	.word	0x00f42400
 800f034:	08015234 	.word	0x08015234
      default:
        pclk = 0U;
 800f038:	2300      	movs	r3, #0
 800f03a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f042:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 8084 	beq.w	800f154 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f050:	4a4b      	ldr	r2, [pc, #300]	@ (800f180 <UART_SetConfig+0x448>)
 800f052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f056:	461a      	mov	r2, r3
 800f058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f05e:	005a      	lsls	r2, r3, #1
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	085b      	lsrs	r3, r3, #1
 800f066:	441a      	add	r2, r3
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f070:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f072:	6a3b      	ldr	r3, [r7, #32]
 800f074:	2b0f      	cmp	r3, #15
 800f076:	d916      	bls.n	800f0a6 <UART_SetConfig+0x36e>
 800f078:	6a3b      	ldr	r3, [r7, #32]
 800f07a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f07e:	d212      	bcs.n	800f0a6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f080:	6a3b      	ldr	r3, [r7, #32]
 800f082:	b29b      	uxth	r3, r3
 800f084:	f023 030f 	bic.w	r3, r3, #15
 800f088:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f08a:	6a3b      	ldr	r3, [r7, #32]
 800f08c:	085b      	lsrs	r3, r3, #1
 800f08e:	b29b      	uxth	r3, r3
 800f090:	f003 0307 	and.w	r3, r3, #7
 800f094:	b29a      	uxth	r2, r3
 800f096:	8bfb      	ldrh	r3, [r7, #30]
 800f098:	4313      	orrs	r3, r2
 800f09a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	8bfa      	ldrh	r2, [r7, #30]
 800f0a2:	60da      	str	r2, [r3, #12]
 800f0a4:	e056      	b.n	800f154 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f0ac:	e052      	b.n	800f154 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	2b07      	cmp	r3, #7
 800f0b6:	d822      	bhi.n	800f0fe <UART_SetConfig+0x3c6>
 800f0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f0c0 <UART_SetConfig+0x388>)
 800f0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0be:	bf00      	nop
 800f0c0:	0800f0e1 	.word	0x0800f0e1
 800f0c4:	0800f0e9 	.word	0x0800f0e9
 800f0c8:	0800f0ff 	.word	0x0800f0ff
 800f0cc:	0800f0ef 	.word	0x0800f0ef
 800f0d0:	0800f0ff 	.word	0x0800f0ff
 800f0d4:	0800f0ff 	.word	0x0800f0ff
 800f0d8:	0800f0ff 	.word	0x0800f0ff
 800f0dc:	0800f0f7 	.word	0x0800f0f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0e0:	f7fc fc7c 	bl	800b9dc <HAL_RCC_GetPCLK2Freq>
 800f0e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f0e6:	e010      	b.n	800f10a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0e8:	4b26      	ldr	r3, [pc, #152]	@ (800f184 <UART_SetConfig+0x44c>)
 800f0ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f0ec:	e00d      	b.n	800f10a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0ee:	f7fc fbdf 	bl	800b8b0 <HAL_RCC_GetSysClockFreq>
 800f0f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f0f4:	e009      	b.n	800f10a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f0fc:	e005      	b.n	800f10a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f0fe:	2300      	movs	r3, #0
 800f100:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f108:	bf00      	nop
    }

    if (pclk != 0U)
 800f10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d021      	beq.n	800f154 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f114:	4a1a      	ldr	r2, [pc, #104]	@ (800f180 <UART_SetConfig+0x448>)
 800f116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f11a:	461a      	mov	r2, r3
 800f11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f11e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	085b      	lsrs	r3, r3, #1
 800f128:	441a      	add	r2, r3
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	2b0f      	cmp	r3, #15
 800f138:	d909      	bls.n	800f14e <UART_SetConfig+0x416>
 800f13a:	6a3b      	ldr	r3, [r7, #32]
 800f13c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f140:	d205      	bcs.n	800f14e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	b29a      	uxth	r2, r3
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	60da      	str	r2, [r3, #12]
 800f14c:	e002      	b.n	800f154 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f14e:	2301      	movs	r3, #1
 800f150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	2201      	movs	r2, #1
 800f158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2201      	movs	r2, #1
 800f160:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2200      	movs	r2, #0
 800f168:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2200      	movs	r2, #0
 800f16e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f170:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f174:	4618      	mov	r0, r3
 800f176:	3730      	adds	r7, #48	@ 0x30
 800f178:	46bd      	mov	sp, r7
 800f17a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f17e:	bf00      	nop
 800f180:	08015234 	.word	0x08015234
 800f184:	00f42400 	.word	0x00f42400

0800f188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00a      	beq.n	800f1b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	430a      	orrs	r2, r1
 800f1b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b6:	f003 0302 	and.w	r3, r3, #2
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00a      	beq.n	800f1d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	430a      	orrs	r2, r1
 800f1d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00a      	beq.n	800f1f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	430a      	orrs	r2, r1
 800f1f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1fa:	f003 0308 	and.w	r3, r3, #8
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00a      	beq.n	800f218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	430a      	orrs	r2, r1
 800f216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f21c:	f003 0310 	and.w	r3, r3, #16
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00a      	beq.n	800f23a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	430a      	orrs	r2, r1
 800f238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f23e:	f003 0320 	and.w	r3, r3, #32
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00a      	beq.n	800f25c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	430a      	orrs	r2, r1
 800f25a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d01a      	beq.n	800f29e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	430a      	orrs	r2, r1
 800f27c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f286:	d10a      	bne.n	800f29e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	430a      	orrs	r2, r1
 800f29c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00a      	beq.n	800f2c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	430a      	orrs	r2, r1
 800f2be:	605a      	str	r2, [r3, #4]
  }
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b098      	sub	sp, #96	@ 0x60
 800f2d0:	af02      	add	r7, sp, #8
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f2dc:	f7fa fd92 	bl	8009e04 <HAL_GetTick>
 800f2e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f003 0308 	and.w	r3, r3, #8
 800f2ec:	2b08      	cmp	r3, #8
 800f2ee:	d12f      	bne.n	800f350 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 f88e 	bl	800f420 <UART_WaitOnFlagUntilTimeout>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d022      	beq.n	800f350 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f312:	e853 3f00 	ldrex	r3, [r3]
 800f316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f31a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f31e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	461a      	mov	r2, r3
 800f326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f328:	647b      	str	r3, [r7, #68]	@ 0x44
 800f32a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f32e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f330:	e841 2300 	strex	r3, r2, [r1]
 800f334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1e6      	bne.n	800f30a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2220      	movs	r2, #32
 800f340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f34c:	2303      	movs	r3, #3
 800f34e:	e063      	b.n	800f418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f003 0304 	and.w	r3, r3, #4
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d149      	bne.n	800f3f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f35e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f366:	2200      	movs	r2, #0
 800f368:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f857 	bl	800f420 <UART_WaitOnFlagUntilTimeout>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d03c      	beq.n	800f3f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f380:	e853 3f00 	ldrex	r3, [r3]
 800f384:	623b      	str	r3, [r7, #32]
   return(result);
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	461a      	mov	r2, r3
 800f394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f396:	633b      	str	r3, [r7, #48]	@ 0x30
 800f398:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f39c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f39e:	e841 2300 	strex	r3, r2, [r1]
 800f3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1e6      	bne.n	800f378 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3308      	adds	r3, #8
 800f3b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	e853 3f00 	ldrex	r3, [r3]
 800f3b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f023 0301 	bic.w	r3, r3, #1
 800f3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3308      	adds	r3, #8
 800f3c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3ca:	61fa      	str	r2, [r7, #28]
 800f3cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ce:	69b9      	ldr	r1, [r7, #24]
 800f3d0:	69fa      	ldr	r2, [r7, #28]
 800f3d2:	e841 2300 	strex	r3, r2, [r1]
 800f3d6:	617b      	str	r3, [r7, #20]
   return(result);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1e5      	bne.n	800f3aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2220      	movs	r2, #32
 800f3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3ee:	2303      	movs	r3, #3
 800f3f0:	e012      	b.n	800f418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2220      	movs	r2, #32
 800f3f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2220      	movs	r2, #32
 800f3fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3758      	adds	r7, #88	@ 0x58
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	603b      	str	r3, [r7, #0]
 800f42c:	4613      	mov	r3, r2
 800f42e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f430:	e049      	b.n	800f4c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f438:	d045      	beq.n	800f4c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f43a:	f7fa fce3 	bl	8009e04 <HAL_GetTick>
 800f43e:	4602      	mov	r2, r0
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	69ba      	ldr	r2, [r7, #24]
 800f446:	429a      	cmp	r2, r3
 800f448:	d302      	bcc.n	800f450 <UART_WaitOnFlagUntilTimeout+0x30>
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f450:	2303      	movs	r3, #3
 800f452:	e048      	b.n	800f4e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f003 0304 	and.w	r3, r3, #4
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d031      	beq.n	800f4c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	69db      	ldr	r3, [r3, #28]
 800f468:	f003 0308 	and.w	r3, r3, #8
 800f46c:	2b08      	cmp	r3, #8
 800f46e:	d110      	bne.n	800f492 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2208      	movs	r2, #8
 800f476:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 f838 	bl	800f4ee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2208      	movs	r2, #8
 800f482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800f48e:	2301      	movs	r3, #1
 800f490:	e029      	b.n	800f4e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	69db      	ldr	r3, [r3, #28]
 800f498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f49c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4a0:	d111      	bne.n	800f4c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 f81e 	bl	800f4ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2220      	movs	r2, #32
 800f4b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e00f      	b.n	800f4e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	69da      	ldr	r2, [r3, #28]
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	4013      	ands	r3, r2
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	bf0c      	ite	eq
 800f4d6:	2301      	moveq	r3, #1
 800f4d8:	2300      	movne	r3, #0
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	461a      	mov	r2, r3
 800f4de:	79fb      	ldrb	r3, [r7, #7]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d0a6      	beq.n	800f432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4ee:	b480      	push	{r7}
 800f4f0:	b095      	sub	sp, #84	@ 0x54
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4fe:	e853 3f00 	ldrex	r3, [r3]
 800f502:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	461a      	mov	r2, r3
 800f512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f514:	643b      	str	r3, [r7, #64]	@ 0x40
 800f516:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f518:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f51a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f51c:	e841 2300 	strex	r3, r2, [r1]
 800f520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1e6      	bne.n	800f4f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3308      	adds	r3, #8
 800f52e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f530:	6a3b      	ldr	r3, [r7, #32]
 800f532:	e853 3f00 	ldrex	r3, [r3]
 800f536:	61fb      	str	r3, [r7, #28]
   return(result);
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f53e:	f023 0301 	bic.w	r3, r3, #1
 800f542:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	3308      	adds	r3, #8
 800f54a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f54c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f54e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f554:	e841 2300 	strex	r3, r2, [r1]
 800f558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e3      	bne.n	800f528 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f564:	2b01      	cmp	r3, #1
 800f566:	d118      	bne.n	800f59a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	e853 3f00 	ldrex	r3, [r3]
 800f574:	60bb      	str	r3, [r7, #8]
   return(result);
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	f023 0310 	bic.w	r3, r3, #16
 800f57c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f586:	61bb      	str	r3, [r7, #24]
 800f588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58a:	6979      	ldr	r1, [r7, #20]
 800f58c:	69ba      	ldr	r2, [r7, #24]
 800f58e:	e841 2300 	strex	r3, r2, [r1]
 800f592:	613b      	str	r3, [r7, #16]
   return(result);
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1e6      	bne.n	800f568 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2220      	movs	r2, #32
 800f59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f5ae:	bf00      	nop
 800f5b0:	3754      	adds	r7, #84	@ 0x54
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b084      	sub	sp, #16
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f7ff fb97 	bl	800ed0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b088      	sub	sp, #32
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	e853 3f00 	ldrex	r3, [r3]
 800f5fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f602:	61fb      	str	r3, [r7, #28]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	461a      	mov	r2, r3
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	61bb      	str	r3, [r7, #24]
 800f60e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f610:	6979      	ldr	r1, [r7, #20]
 800f612:	69ba      	ldr	r2, [r7, #24]
 800f614:	e841 2300 	strex	r3, r2, [r1]
 800f618:	613b      	str	r3, [r7, #16]
   return(result);
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1e6      	bne.n	800f5ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2220      	movs	r2, #32
 800f624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff fb62 	bl	800ecf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f634:	bf00      	nop
 800f636:	3720      	adds	r7, #32
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f644:	bf00      	nop
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f678:	b480      	push	{r7}
 800f67a:	b085      	sub	sp, #20
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f686:	2b01      	cmp	r3, #1
 800f688:	d101      	bne.n	800f68e <HAL_UARTEx_DisableFifoMode+0x16>
 800f68a:	2302      	movs	r3, #2
 800f68c:	e027      	b.n	800f6de <HAL_UARTEx_DisableFifoMode+0x66>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2224      	movs	r2, #36	@ 0x24
 800f69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f022 0201 	bic.w	r2, r2, #1
 800f6b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f6bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2220      	movs	r2, #32
 800f6d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b084      	sub	sp, #16
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d101      	bne.n	800f702 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f6fe:	2302      	movs	r3, #2
 800f700:	e02d      	b.n	800f75e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2224      	movs	r2, #36	@ 0x24
 800f70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f022 0201 	bic.w	r2, r2, #1
 800f728:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	430a      	orrs	r2, r1
 800f73c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f850 	bl	800f7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2220      	movs	r2, #32
 800f750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f766:	b580      	push	{r7, lr}
 800f768:	b084      	sub	sp, #16
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f776:	2b01      	cmp	r3, #1
 800f778:	d101      	bne.n	800f77e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f77a:	2302      	movs	r3, #2
 800f77c:	e02d      	b.n	800f7da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2224      	movs	r2, #36	@ 0x24
 800f78a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f022 0201 	bic.w	r2, r2, #1
 800f7a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	430a      	orrs	r2, r1
 800f7b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f812 	bl	800f7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2220      	movs	r2, #32
 800f7cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
	...

0800f7e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d108      	bne.n	800f806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f804:	e031      	b.n	800f86a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f806:	2308      	movs	r3, #8
 800f808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f80a:	2308      	movs	r3, #8
 800f80c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	0e5b      	lsrs	r3, r3, #25
 800f816:	b2db      	uxtb	r3, r3
 800f818:	f003 0307 	and.w	r3, r3, #7
 800f81c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	0f5b      	lsrs	r3, r3, #29
 800f826:	b2db      	uxtb	r3, r3
 800f828:	f003 0307 	and.w	r3, r3, #7
 800f82c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f82e:	7bbb      	ldrb	r3, [r7, #14]
 800f830:	7b3a      	ldrb	r2, [r7, #12]
 800f832:	4911      	ldr	r1, [pc, #68]	@ (800f878 <UARTEx_SetNbDataToProcess+0x94>)
 800f834:	5c8a      	ldrb	r2, [r1, r2]
 800f836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f83a:	7b3a      	ldrb	r2, [r7, #12]
 800f83c:	490f      	ldr	r1, [pc, #60]	@ (800f87c <UARTEx_SetNbDataToProcess+0x98>)
 800f83e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f840:	fb93 f3f2 	sdiv	r3, r3, r2
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	7b7a      	ldrb	r2, [r7, #13]
 800f850:	4909      	ldr	r1, [pc, #36]	@ (800f878 <UARTEx_SetNbDataToProcess+0x94>)
 800f852:	5c8a      	ldrb	r2, [r1, r2]
 800f854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f858:	7b7a      	ldrb	r2, [r7, #13]
 800f85a:	4908      	ldr	r1, [pc, #32]	@ (800f87c <UARTEx_SetNbDataToProcess+0x98>)
 800f85c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f85e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f86a:	bf00      	nop
 800f86c:	3714      	adds	r7, #20
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	0801524c 	.word	0x0801524c
 800f87c:	08015254 	.word	0x08015254

0800f880 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f888:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800f88c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800f894:	b29a      	uxth	r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	43db      	mvns	r3, r3
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	4013      	ands	r3, r2
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr

0800f8b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	f107 0014 	add.w	r0, r7, #20
 800f8c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	370c      	adds	r7, #12
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	b004      	add	sp, #16
 800f8f6:	4770      	bx	lr

0800f8f8 <rand>:
 800f8f8:	4b16      	ldr	r3, [pc, #88]	@ (800f954 <rand+0x5c>)
 800f8fa:	b510      	push	{r4, lr}
 800f8fc:	681c      	ldr	r4, [r3, #0]
 800f8fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f900:	b9b3      	cbnz	r3, 800f930 <rand+0x38>
 800f902:	2018      	movs	r0, #24
 800f904:	f002 fbbe 	bl	8012084 <malloc>
 800f908:	4602      	mov	r2, r0
 800f90a:	6320      	str	r0, [r4, #48]	@ 0x30
 800f90c:	b920      	cbnz	r0, 800f918 <rand+0x20>
 800f90e:	4b12      	ldr	r3, [pc, #72]	@ (800f958 <rand+0x60>)
 800f910:	4812      	ldr	r0, [pc, #72]	@ (800f95c <rand+0x64>)
 800f912:	2152      	movs	r1, #82	@ 0x52
 800f914:	f001 fcb4 	bl	8011280 <__assert_func>
 800f918:	4911      	ldr	r1, [pc, #68]	@ (800f960 <rand+0x68>)
 800f91a:	4b12      	ldr	r3, [pc, #72]	@ (800f964 <rand+0x6c>)
 800f91c:	e9c0 1300 	strd	r1, r3, [r0]
 800f920:	4b11      	ldr	r3, [pc, #68]	@ (800f968 <rand+0x70>)
 800f922:	6083      	str	r3, [r0, #8]
 800f924:	230b      	movs	r3, #11
 800f926:	8183      	strh	r3, [r0, #12]
 800f928:	2100      	movs	r1, #0
 800f92a:	2001      	movs	r0, #1
 800f92c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f930:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f932:	480e      	ldr	r0, [pc, #56]	@ (800f96c <rand+0x74>)
 800f934:	690b      	ldr	r3, [r1, #16]
 800f936:	694c      	ldr	r4, [r1, #20]
 800f938:	4a0d      	ldr	r2, [pc, #52]	@ (800f970 <rand+0x78>)
 800f93a:	4358      	muls	r0, r3
 800f93c:	fb02 0004 	mla	r0, r2, r4, r0
 800f940:	fba3 3202 	umull	r3, r2, r3, r2
 800f944:	3301      	adds	r3, #1
 800f946:	eb40 0002 	adc.w	r0, r0, r2
 800f94a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f94e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f952:	bd10      	pop	{r4, pc}
 800f954:	20000030 	.word	0x20000030
 800f958:	0801525c 	.word	0x0801525c
 800f95c:	08015273 	.word	0x08015273
 800f960:	abcd330e 	.word	0xabcd330e
 800f964:	e66d1234 	.word	0xe66d1234
 800f968:	0005deec 	.word	0x0005deec
 800f96c:	5851f42d 	.word	0x5851f42d
 800f970:	4c957f2d 	.word	0x4c957f2d

0800f974 <__cvt>:
 800f974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f978:	ec57 6b10 	vmov	r6, r7, d0
 800f97c:	2f00      	cmp	r7, #0
 800f97e:	460c      	mov	r4, r1
 800f980:	4619      	mov	r1, r3
 800f982:	463b      	mov	r3, r7
 800f984:	bfbb      	ittet	lt
 800f986:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f98a:	461f      	movlt	r7, r3
 800f98c:	2300      	movge	r3, #0
 800f98e:	232d      	movlt	r3, #45	@ 0x2d
 800f990:	700b      	strb	r3, [r1, #0]
 800f992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f994:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f998:	4691      	mov	r9, r2
 800f99a:	f023 0820 	bic.w	r8, r3, #32
 800f99e:	bfbc      	itt	lt
 800f9a0:	4632      	movlt	r2, r6
 800f9a2:	4616      	movlt	r6, r2
 800f9a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f9a8:	d005      	beq.n	800f9b6 <__cvt+0x42>
 800f9aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f9ae:	d100      	bne.n	800f9b2 <__cvt+0x3e>
 800f9b0:	3401      	adds	r4, #1
 800f9b2:	2102      	movs	r1, #2
 800f9b4:	e000      	b.n	800f9b8 <__cvt+0x44>
 800f9b6:	2103      	movs	r1, #3
 800f9b8:	ab03      	add	r3, sp, #12
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	ab02      	add	r3, sp, #8
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	ec47 6b10 	vmov	d0, r6, r7
 800f9c4:	4653      	mov	r3, sl
 800f9c6:	4622      	mov	r2, r4
 800f9c8:	f001 fd0a 	bl	80113e0 <_dtoa_r>
 800f9cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	d119      	bne.n	800fa08 <__cvt+0x94>
 800f9d4:	f019 0f01 	tst.w	r9, #1
 800f9d8:	d00e      	beq.n	800f9f8 <__cvt+0x84>
 800f9da:	eb00 0904 	add.w	r9, r0, r4
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f1 f857 	bl	8000a98 <__aeabi_dcmpeq>
 800f9ea:	b108      	cbz	r0, 800f9f0 <__cvt+0x7c>
 800f9ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800f9f0:	2230      	movs	r2, #48	@ 0x30
 800f9f2:	9b03      	ldr	r3, [sp, #12]
 800f9f4:	454b      	cmp	r3, r9
 800f9f6:	d31e      	bcc.n	800fa36 <__cvt+0xc2>
 800f9f8:	9b03      	ldr	r3, [sp, #12]
 800f9fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9fc:	1b5b      	subs	r3, r3, r5
 800f9fe:	4628      	mov	r0, r5
 800fa00:	6013      	str	r3, [r2, #0]
 800fa02:	b004      	add	sp, #16
 800fa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa0c:	eb00 0904 	add.w	r9, r0, r4
 800fa10:	d1e5      	bne.n	800f9de <__cvt+0x6a>
 800fa12:	7803      	ldrb	r3, [r0, #0]
 800fa14:	2b30      	cmp	r3, #48	@ 0x30
 800fa16:	d10a      	bne.n	800fa2e <__cvt+0xba>
 800fa18:	2200      	movs	r2, #0
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	4639      	mov	r1, r7
 800fa20:	f7f1 f83a 	bl	8000a98 <__aeabi_dcmpeq>
 800fa24:	b918      	cbnz	r0, 800fa2e <__cvt+0xba>
 800fa26:	f1c4 0401 	rsb	r4, r4, #1
 800fa2a:	f8ca 4000 	str.w	r4, [sl]
 800fa2e:	f8da 3000 	ldr.w	r3, [sl]
 800fa32:	4499      	add	r9, r3
 800fa34:	e7d3      	b.n	800f9de <__cvt+0x6a>
 800fa36:	1c59      	adds	r1, r3, #1
 800fa38:	9103      	str	r1, [sp, #12]
 800fa3a:	701a      	strb	r2, [r3, #0]
 800fa3c:	e7d9      	b.n	800f9f2 <__cvt+0x7e>

0800fa3e <__exponent>:
 800fa3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa40:	2900      	cmp	r1, #0
 800fa42:	bfba      	itte	lt
 800fa44:	4249      	neglt	r1, r1
 800fa46:	232d      	movlt	r3, #45	@ 0x2d
 800fa48:	232b      	movge	r3, #43	@ 0x2b
 800fa4a:	2909      	cmp	r1, #9
 800fa4c:	7002      	strb	r2, [r0, #0]
 800fa4e:	7043      	strb	r3, [r0, #1]
 800fa50:	dd29      	ble.n	800faa6 <__exponent+0x68>
 800fa52:	f10d 0307 	add.w	r3, sp, #7
 800fa56:	461d      	mov	r5, r3
 800fa58:	270a      	movs	r7, #10
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	fbb1 f6f7 	udiv	r6, r1, r7
 800fa60:	fb07 1416 	mls	r4, r7, r6, r1
 800fa64:	3430      	adds	r4, #48	@ 0x30
 800fa66:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fa6a:	460c      	mov	r4, r1
 800fa6c:	2c63      	cmp	r4, #99	@ 0x63
 800fa6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa72:	4631      	mov	r1, r6
 800fa74:	dcf1      	bgt.n	800fa5a <__exponent+0x1c>
 800fa76:	3130      	adds	r1, #48	@ 0x30
 800fa78:	1e94      	subs	r4, r2, #2
 800fa7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fa7e:	1c41      	adds	r1, r0, #1
 800fa80:	4623      	mov	r3, r4
 800fa82:	42ab      	cmp	r3, r5
 800fa84:	d30a      	bcc.n	800fa9c <__exponent+0x5e>
 800fa86:	f10d 0309 	add.w	r3, sp, #9
 800fa8a:	1a9b      	subs	r3, r3, r2
 800fa8c:	42ac      	cmp	r4, r5
 800fa8e:	bf88      	it	hi
 800fa90:	2300      	movhi	r3, #0
 800fa92:	3302      	adds	r3, #2
 800fa94:	4403      	add	r3, r0
 800fa96:	1a18      	subs	r0, r3, r0
 800fa98:	b003      	add	sp, #12
 800fa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800faa0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800faa4:	e7ed      	b.n	800fa82 <__exponent+0x44>
 800faa6:	2330      	movs	r3, #48	@ 0x30
 800faa8:	3130      	adds	r1, #48	@ 0x30
 800faaa:	7083      	strb	r3, [r0, #2]
 800faac:	70c1      	strb	r1, [r0, #3]
 800faae:	1d03      	adds	r3, r0, #4
 800fab0:	e7f1      	b.n	800fa96 <__exponent+0x58>
	...

0800fab4 <_printf_float>:
 800fab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab8:	b08d      	sub	sp, #52	@ 0x34
 800faba:	460c      	mov	r4, r1
 800fabc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fac0:	4616      	mov	r6, r2
 800fac2:	461f      	mov	r7, r3
 800fac4:	4605      	mov	r5, r0
 800fac6:	f001 fb4b 	bl	8011160 <_localeconv_r>
 800faca:	6803      	ldr	r3, [r0, #0]
 800facc:	9304      	str	r3, [sp, #16]
 800face:	4618      	mov	r0, r3
 800fad0:	f7f0 fbb6 	bl	8000240 <strlen>
 800fad4:	2300      	movs	r3, #0
 800fad6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fad8:	f8d8 3000 	ldr.w	r3, [r8]
 800fadc:	9005      	str	r0, [sp, #20]
 800fade:	3307      	adds	r3, #7
 800fae0:	f023 0307 	bic.w	r3, r3, #7
 800fae4:	f103 0208 	add.w	r2, r3, #8
 800fae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800faec:	f8d4 b000 	ldr.w	fp, [r4]
 800faf0:	f8c8 2000 	str.w	r2, [r8]
 800faf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800faf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fafc:	9307      	str	r3, [sp, #28]
 800fafe:	f8cd 8018 	str.w	r8, [sp, #24]
 800fb02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fb06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb0a:	4b9c      	ldr	r3, [pc, #624]	@ (800fd7c <_printf_float+0x2c8>)
 800fb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb10:	f7f0 fff4 	bl	8000afc <__aeabi_dcmpun>
 800fb14:	bb70      	cbnz	r0, 800fb74 <_printf_float+0xc0>
 800fb16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb1a:	4b98      	ldr	r3, [pc, #608]	@ (800fd7c <_printf_float+0x2c8>)
 800fb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb20:	f7f0 ffce 	bl	8000ac0 <__aeabi_dcmple>
 800fb24:	bb30      	cbnz	r0, 800fb74 <_printf_float+0xc0>
 800fb26:	2200      	movs	r2, #0
 800fb28:	2300      	movs	r3, #0
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	4649      	mov	r1, r9
 800fb2e:	f7f0 ffbd 	bl	8000aac <__aeabi_dcmplt>
 800fb32:	b110      	cbz	r0, 800fb3a <_printf_float+0x86>
 800fb34:	232d      	movs	r3, #45	@ 0x2d
 800fb36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb3a:	4a91      	ldr	r2, [pc, #580]	@ (800fd80 <_printf_float+0x2cc>)
 800fb3c:	4b91      	ldr	r3, [pc, #580]	@ (800fd84 <_printf_float+0x2d0>)
 800fb3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fb42:	bf94      	ite	ls
 800fb44:	4690      	movls	r8, r2
 800fb46:	4698      	movhi	r8, r3
 800fb48:	2303      	movs	r3, #3
 800fb4a:	6123      	str	r3, [r4, #16]
 800fb4c:	f02b 0304 	bic.w	r3, fp, #4
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	f04f 0900 	mov.w	r9, #0
 800fb56:	9700      	str	r7, [sp, #0]
 800fb58:	4633      	mov	r3, r6
 800fb5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fb5c:	4621      	mov	r1, r4
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f000 f9d2 	bl	800ff08 <_printf_common>
 800fb64:	3001      	adds	r0, #1
 800fb66:	f040 808d 	bne.w	800fc84 <_printf_float+0x1d0>
 800fb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb6e:	b00d      	add	sp, #52	@ 0x34
 800fb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb74:	4642      	mov	r2, r8
 800fb76:	464b      	mov	r3, r9
 800fb78:	4640      	mov	r0, r8
 800fb7a:	4649      	mov	r1, r9
 800fb7c:	f7f0 ffbe 	bl	8000afc <__aeabi_dcmpun>
 800fb80:	b140      	cbz	r0, 800fb94 <_printf_float+0xe0>
 800fb82:	464b      	mov	r3, r9
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bfbc      	itt	lt
 800fb88:	232d      	movlt	r3, #45	@ 0x2d
 800fb8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fb8e:	4a7e      	ldr	r2, [pc, #504]	@ (800fd88 <_printf_float+0x2d4>)
 800fb90:	4b7e      	ldr	r3, [pc, #504]	@ (800fd8c <_printf_float+0x2d8>)
 800fb92:	e7d4      	b.n	800fb3e <_printf_float+0x8a>
 800fb94:	6863      	ldr	r3, [r4, #4]
 800fb96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fb9a:	9206      	str	r2, [sp, #24]
 800fb9c:	1c5a      	adds	r2, r3, #1
 800fb9e:	d13b      	bne.n	800fc18 <_printf_float+0x164>
 800fba0:	2306      	movs	r3, #6
 800fba2:	6063      	str	r3, [r4, #4]
 800fba4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fba8:	2300      	movs	r3, #0
 800fbaa:	6022      	str	r2, [r4, #0]
 800fbac:	9303      	str	r3, [sp, #12]
 800fbae:	ab0a      	add	r3, sp, #40	@ 0x28
 800fbb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fbb4:	ab09      	add	r3, sp, #36	@ 0x24
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	6861      	ldr	r1, [r4, #4]
 800fbba:	ec49 8b10 	vmov	d0, r8, r9
 800fbbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7ff fed6 	bl	800f974 <__cvt>
 800fbc8:	9b06      	ldr	r3, [sp, #24]
 800fbca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbcc:	2b47      	cmp	r3, #71	@ 0x47
 800fbce:	4680      	mov	r8, r0
 800fbd0:	d129      	bne.n	800fc26 <_printf_float+0x172>
 800fbd2:	1cc8      	adds	r0, r1, #3
 800fbd4:	db02      	blt.n	800fbdc <_printf_float+0x128>
 800fbd6:	6863      	ldr	r3, [r4, #4]
 800fbd8:	4299      	cmp	r1, r3
 800fbda:	dd41      	ble.n	800fc60 <_printf_float+0x1ac>
 800fbdc:	f1aa 0a02 	sub.w	sl, sl, #2
 800fbe0:	fa5f fa8a 	uxtb.w	sl, sl
 800fbe4:	3901      	subs	r1, #1
 800fbe6:	4652      	mov	r2, sl
 800fbe8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fbec:	9109      	str	r1, [sp, #36]	@ 0x24
 800fbee:	f7ff ff26 	bl	800fa3e <__exponent>
 800fbf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fbf4:	1813      	adds	r3, r2, r0
 800fbf6:	2a01      	cmp	r2, #1
 800fbf8:	4681      	mov	r9, r0
 800fbfa:	6123      	str	r3, [r4, #16]
 800fbfc:	dc02      	bgt.n	800fc04 <_printf_float+0x150>
 800fbfe:	6822      	ldr	r2, [r4, #0]
 800fc00:	07d2      	lsls	r2, r2, #31
 800fc02:	d501      	bpl.n	800fc08 <_printf_float+0x154>
 800fc04:	3301      	adds	r3, #1
 800fc06:	6123      	str	r3, [r4, #16]
 800fc08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0a2      	beq.n	800fb56 <_printf_float+0xa2>
 800fc10:	232d      	movs	r3, #45	@ 0x2d
 800fc12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc16:	e79e      	b.n	800fb56 <_printf_float+0xa2>
 800fc18:	9a06      	ldr	r2, [sp, #24]
 800fc1a:	2a47      	cmp	r2, #71	@ 0x47
 800fc1c:	d1c2      	bne.n	800fba4 <_printf_float+0xf0>
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1c0      	bne.n	800fba4 <_printf_float+0xf0>
 800fc22:	2301      	movs	r3, #1
 800fc24:	e7bd      	b.n	800fba2 <_printf_float+0xee>
 800fc26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fc2a:	d9db      	bls.n	800fbe4 <_printf_float+0x130>
 800fc2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fc30:	d118      	bne.n	800fc64 <_printf_float+0x1b0>
 800fc32:	2900      	cmp	r1, #0
 800fc34:	6863      	ldr	r3, [r4, #4]
 800fc36:	dd0b      	ble.n	800fc50 <_printf_float+0x19c>
 800fc38:	6121      	str	r1, [r4, #16]
 800fc3a:	b913      	cbnz	r3, 800fc42 <_printf_float+0x18e>
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	07d0      	lsls	r0, r2, #31
 800fc40:	d502      	bpl.n	800fc48 <_printf_float+0x194>
 800fc42:	3301      	adds	r3, #1
 800fc44:	440b      	add	r3, r1
 800fc46:	6123      	str	r3, [r4, #16]
 800fc48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fc4a:	f04f 0900 	mov.w	r9, #0
 800fc4e:	e7db      	b.n	800fc08 <_printf_float+0x154>
 800fc50:	b913      	cbnz	r3, 800fc58 <_printf_float+0x1a4>
 800fc52:	6822      	ldr	r2, [r4, #0]
 800fc54:	07d2      	lsls	r2, r2, #31
 800fc56:	d501      	bpl.n	800fc5c <_printf_float+0x1a8>
 800fc58:	3302      	adds	r3, #2
 800fc5a:	e7f4      	b.n	800fc46 <_printf_float+0x192>
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e7f2      	b.n	800fc46 <_printf_float+0x192>
 800fc60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fc64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc66:	4299      	cmp	r1, r3
 800fc68:	db05      	blt.n	800fc76 <_printf_float+0x1c2>
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	6121      	str	r1, [r4, #16]
 800fc6e:	07d8      	lsls	r0, r3, #31
 800fc70:	d5ea      	bpl.n	800fc48 <_printf_float+0x194>
 800fc72:	1c4b      	adds	r3, r1, #1
 800fc74:	e7e7      	b.n	800fc46 <_printf_float+0x192>
 800fc76:	2900      	cmp	r1, #0
 800fc78:	bfd4      	ite	le
 800fc7a:	f1c1 0202 	rsble	r2, r1, #2
 800fc7e:	2201      	movgt	r2, #1
 800fc80:	4413      	add	r3, r2
 800fc82:	e7e0      	b.n	800fc46 <_printf_float+0x192>
 800fc84:	6823      	ldr	r3, [r4, #0]
 800fc86:	055a      	lsls	r2, r3, #21
 800fc88:	d407      	bmi.n	800fc9a <_printf_float+0x1e6>
 800fc8a:	6923      	ldr	r3, [r4, #16]
 800fc8c:	4642      	mov	r2, r8
 800fc8e:	4631      	mov	r1, r6
 800fc90:	4628      	mov	r0, r5
 800fc92:	47b8      	blx	r7
 800fc94:	3001      	adds	r0, #1
 800fc96:	d12b      	bne.n	800fcf0 <_printf_float+0x23c>
 800fc98:	e767      	b.n	800fb6a <_printf_float+0xb6>
 800fc9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fc9e:	f240 80dd 	bls.w	800fe5c <_printf_float+0x3a8>
 800fca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fca6:	2200      	movs	r2, #0
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f7f0 fef5 	bl	8000a98 <__aeabi_dcmpeq>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d033      	beq.n	800fd1a <_printf_float+0x266>
 800fcb2:	4a37      	ldr	r2, [pc, #220]	@ (800fd90 <_printf_float+0x2dc>)
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	4631      	mov	r1, r6
 800fcb8:	4628      	mov	r0, r5
 800fcba:	47b8      	blx	r7
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	f43f af54 	beq.w	800fb6a <_printf_float+0xb6>
 800fcc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fcc6:	4543      	cmp	r3, r8
 800fcc8:	db02      	blt.n	800fcd0 <_printf_float+0x21c>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	07d8      	lsls	r0, r3, #31
 800fcce:	d50f      	bpl.n	800fcf0 <_printf_float+0x23c>
 800fcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcd4:	4631      	mov	r1, r6
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	47b8      	blx	r7
 800fcda:	3001      	adds	r0, #1
 800fcdc:	f43f af45 	beq.w	800fb6a <_printf_float+0xb6>
 800fce0:	f04f 0900 	mov.w	r9, #0
 800fce4:	f108 38ff 	add.w	r8, r8, #4294967295
 800fce8:	f104 0a1a 	add.w	sl, r4, #26
 800fcec:	45c8      	cmp	r8, r9
 800fcee:	dc09      	bgt.n	800fd04 <_printf_float+0x250>
 800fcf0:	6823      	ldr	r3, [r4, #0]
 800fcf2:	079b      	lsls	r3, r3, #30
 800fcf4:	f100 8103 	bmi.w	800fefe <_printf_float+0x44a>
 800fcf8:	68e0      	ldr	r0, [r4, #12]
 800fcfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcfc:	4298      	cmp	r0, r3
 800fcfe:	bfb8      	it	lt
 800fd00:	4618      	movlt	r0, r3
 800fd02:	e734      	b.n	800fb6e <_printf_float+0xba>
 800fd04:	2301      	movs	r3, #1
 800fd06:	4652      	mov	r2, sl
 800fd08:	4631      	mov	r1, r6
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	47b8      	blx	r7
 800fd0e:	3001      	adds	r0, #1
 800fd10:	f43f af2b 	beq.w	800fb6a <_printf_float+0xb6>
 800fd14:	f109 0901 	add.w	r9, r9, #1
 800fd18:	e7e8      	b.n	800fcec <_printf_float+0x238>
 800fd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	dc39      	bgt.n	800fd94 <_printf_float+0x2e0>
 800fd20:	4a1b      	ldr	r2, [pc, #108]	@ (800fd90 <_printf_float+0x2dc>)
 800fd22:	2301      	movs	r3, #1
 800fd24:	4631      	mov	r1, r6
 800fd26:	4628      	mov	r0, r5
 800fd28:	47b8      	blx	r7
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	f43f af1d 	beq.w	800fb6a <_printf_float+0xb6>
 800fd30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fd34:	ea59 0303 	orrs.w	r3, r9, r3
 800fd38:	d102      	bne.n	800fd40 <_printf_float+0x28c>
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	07d9      	lsls	r1, r3, #31
 800fd3e:	d5d7      	bpl.n	800fcf0 <_printf_float+0x23c>
 800fd40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd44:	4631      	mov	r1, r6
 800fd46:	4628      	mov	r0, r5
 800fd48:	47b8      	blx	r7
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	f43f af0d 	beq.w	800fb6a <_printf_float+0xb6>
 800fd50:	f04f 0a00 	mov.w	sl, #0
 800fd54:	f104 0b1a 	add.w	fp, r4, #26
 800fd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd5a:	425b      	negs	r3, r3
 800fd5c:	4553      	cmp	r3, sl
 800fd5e:	dc01      	bgt.n	800fd64 <_printf_float+0x2b0>
 800fd60:	464b      	mov	r3, r9
 800fd62:	e793      	b.n	800fc8c <_printf_float+0x1d8>
 800fd64:	2301      	movs	r3, #1
 800fd66:	465a      	mov	r2, fp
 800fd68:	4631      	mov	r1, r6
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	47b8      	blx	r7
 800fd6e:	3001      	adds	r0, #1
 800fd70:	f43f aefb 	beq.w	800fb6a <_printf_float+0xb6>
 800fd74:	f10a 0a01 	add.w	sl, sl, #1
 800fd78:	e7ee      	b.n	800fd58 <_printf_float+0x2a4>
 800fd7a:	bf00      	nop
 800fd7c:	7fefffff 	.word	0x7fefffff
 800fd80:	080152cb 	.word	0x080152cb
 800fd84:	080152cf 	.word	0x080152cf
 800fd88:	080152d3 	.word	0x080152d3
 800fd8c:	080152d7 	.word	0x080152d7
 800fd90:	080157a2 	.word	0x080157a2
 800fd94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd9a:	4553      	cmp	r3, sl
 800fd9c:	bfa8      	it	ge
 800fd9e:	4653      	movge	r3, sl
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	4699      	mov	r9, r3
 800fda4:	dc36      	bgt.n	800fe14 <_printf_float+0x360>
 800fda6:	f04f 0b00 	mov.w	fp, #0
 800fdaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdae:	f104 021a 	add.w	r2, r4, #26
 800fdb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdb4:	9306      	str	r3, [sp, #24]
 800fdb6:	eba3 0309 	sub.w	r3, r3, r9
 800fdba:	455b      	cmp	r3, fp
 800fdbc:	dc31      	bgt.n	800fe22 <_printf_float+0x36e>
 800fdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdc0:	459a      	cmp	sl, r3
 800fdc2:	dc3a      	bgt.n	800fe3a <_printf_float+0x386>
 800fdc4:	6823      	ldr	r3, [r4, #0]
 800fdc6:	07da      	lsls	r2, r3, #31
 800fdc8:	d437      	bmi.n	800fe3a <_printf_float+0x386>
 800fdca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdcc:	ebaa 0903 	sub.w	r9, sl, r3
 800fdd0:	9b06      	ldr	r3, [sp, #24]
 800fdd2:	ebaa 0303 	sub.w	r3, sl, r3
 800fdd6:	4599      	cmp	r9, r3
 800fdd8:	bfa8      	it	ge
 800fdda:	4699      	movge	r9, r3
 800fddc:	f1b9 0f00 	cmp.w	r9, #0
 800fde0:	dc33      	bgt.n	800fe4a <_printf_float+0x396>
 800fde2:	f04f 0800 	mov.w	r8, #0
 800fde6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdea:	f104 0b1a 	add.w	fp, r4, #26
 800fdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdf0:	ebaa 0303 	sub.w	r3, sl, r3
 800fdf4:	eba3 0309 	sub.w	r3, r3, r9
 800fdf8:	4543      	cmp	r3, r8
 800fdfa:	f77f af79 	ble.w	800fcf0 <_printf_float+0x23c>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	465a      	mov	r2, fp
 800fe02:	4631      	mov	r1, r6
 800fe04:	4628      	mov	r0, r5
 800fe06:	47b8      	blx	r7
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f43f aeae 	beq.w	800fb6a <_printf_float+0xb6>
 800fe0e:	f108 0801 	add.w	r8, r8, #1
 800fe12:	e7ec      	b.n	800fdee <_printf_float+0x33a>
 800fe14:	4642      	mov	r2, r8
 800fe16:	4631      	mov	r1, r6
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b8      	blx	r7
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	d1c2      	bne.n	800fda6 <_printf_float+0x2f2>
 800fe20:	e6a3      	b.n	800fb6a <_printf_float+0xb6>
 800fe22:	2301      	movs	r3, #1
 800fe24:	4631      	mov	r1, r6
 800fe26:	4628      	mov	r0, r5
 800fe28:	9206      	str	r2, [sp, #24]
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	f43f ae9c 	beq.w	800fb6a <_printf_float+0xb6>
 800fe32:	9a06      	ldr	r2, [sp, #24]
 800fe34:	f10b 0b01 	add.w	fp, fp, #1
 800fe38:	e7bb      	b.n	800fdb2 <_printf_float+0x2fe>
 800fe3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe3e:	4631      	mov	r1, r6
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b8      	blx	r7
 800fe44:	3001      	adds	r0, #1
 800fe46:	d1c0      	bne.n	800fdca <_printf_float+0x316>
 800fe48:	e68f      	b.n	800fb6a <_printf_float+0xb6>
 800fe4a:	9a06      	ldr	r2, [sp, #24]
 800fe4c:	464b      	mov	r3, r9
 800fe4e:	4442      	add	r2, r8
 800fe50:	4631      	mov	r1, r6
 800fe52:	4628      	mov	r0, r5
 800fe54:	47b8      	blx	r7
 800fe56:	3001      	adds	r0, #1
 800fe58:	d1c3      	bne.n	800fde2 <_printf_float+0x32e>
 800fe5a:	e686      	b.n	800fb6a <_printf_float+0xb6>
 800fe5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe60:	f1ba 0f01 	cmp.w	sl, #1
 800fe64:	dc01      	bgt.n	800fe6a <_printf_float+0x3b6>
 800fe66:	07db      	lsls	r3, r3, #31
 800fe68:	d536      	bpl.n	800fed8 <_printf_float+0x424>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	4642      	mov	r2, r8
 800fe6e:	4631      	mov	r1, r6
 800fe70:	4628      	mov	r0, r5
 800fe72:	47b8      	blx	r7
 800fe74:	3001      	adds	r0, #1
 800fe76:	f43f ae78 	beq.w	800fb6a <_printf_float+0xb6>
 800fe7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4628      	mov	r0, r5
 800fe82:	47b8      	blx	r7
 800fe84:	3001      	adds	r0, #1
 800fe86:	f43f ae70 	beq.w	800fb6a <_printf_float+0xb6>
 800fe8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fe8e:	2200      	movs	r2, #0
 800fe90:	2300      	movs	r3, #0
 800fe92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe96:	f7f0 fdff 	bl	8000a98 <__aeabi_dcmpeq>
 800fe9a:	b9c0      	cbnz	r0, 800fece <_printf_float+0x41a>
 800fe9c:	4653      	mov	r3, sl
 800fe9e:	f108 0201 	add.w	r2, r8, #1
 800fea2:	4631      	mov	r1, r6
 800fea4:	4628      	mov	r0, r5
 800fea6:	47b8      	blx	r7
 800fea8:	3001      	adds	r0, #1
 800feaa:	d10c      	bne.n	800fec6 <_printf_float+0x412>
 800feac:	e65d      	b.n	800fb6a <_printf_float+0xb6>
 800feae:	2301      	movs	r3, #1
 800feb0:	465a      	mov	r2, fp
 800feb2:	4631      	mov	r1, r6
 800feb4:	4628      	mov	r0, r5
 800feb6:	47b8      	blx	r7
 800feb8:	3001      	adds	r0, #1
 800feba:	f43f ae56 	beq.w	800fb6a <_printf_float+0xb6>
 800febe:	f108 0801 	add.w	r8, r8, #1
 800fec2:	45d0      	cmp	r8, sl
 800fec4:	dbf3      	blt.n	800feae <_printf_float+0x3fa>
 800fec6:	464b      	mov	r3, r9
 800fec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fecc:	e6df      	b.n	800fc8e <_printf_float+0x1da>
 800fece:	f04f 0800 	mov.w	r8, #0
 800fed2:	f104 0b1a 	add.w	fp, r4, #26
 800fed6:	e7f4      	b.n	800fec2 <_printf_float+0x40e>
 800fed8:	2301      	movs	r3, #1
 800feda:	4642      	mov	r2, r8
 800fedc:	e7e1      	b.n	800fea2 <_printf_float+0x3ee>
 800fede:	2301      	movs	r3, #1
 800fee0:	464a      	mov	r2, r9
 800fee2:	4631      	mov	r1, r6
 800fee4:	4628      	mov	r0, r5
 800fee6:	47b8      	blx	r7
 800fee8:	3001      	adds	r0, #1
 800feea:	f43f ae3e 	beq.w	800fb6a <_printf_float+0xb6>
 800feee:	f108 0801 	add.w	r8, r8, #1
 800fef2:	68e3      	ldr	r3, [r4, #12]
 800fef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fef6:	1a5b      	subs	r3, r3, r1
 800fef8:	4543      	cmp	r3, r8
 800fefa:	dcf0      	bgt.n	800fede <_printf_float+0x42a>
 800fefc:	e6fc      	b.n	800fcf8 <_printf_float+0x244>
 800fefe:	f04f 0800 	mov.w	r8, #0
 800ff02:	f104 0919 	add.w	r9, r4, #25
 800ff06:	e7f4      	b.n	800fef2 <_printf_float+0x43e>

0800ff08 <_printf_common>:
 800ff08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff0c:	4616      	mov	r6, r2
 800ff0e:	4698      	mov	r8, r3
 800ff10:	688a      	ldr	r2, [r1, #8]
 800ff12:	690b      	ldr	r3, [r1, #16]
 800ff14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	bfb8      	it	lt
 800ff1c:	4613      	movlt	r3, r2
 800ff1e:	6033      	str	r3, [r6, #0]
 800ff20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff24:	4607      	mov	r7, r0
 800ff26:	460c      	mov	r4, r1
 800ff28:	b10a      	cbz	r2, 800ff2e <_printf_common+0x26>
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	6033      	str	r3, [r6, #0]
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	0699      	lsls	r1, r3, #26
 800ff32:	bf42      	ittt	mi
 800ff34:	6833      	ldrmi	r3, [r6, #0]
 800ff36:	3302      	addmi	r3, #2
 800ff38:	6033      	strmi	r3, [r6, #0]
 800ff3a:	6825      	ldr	r5, [r4, #0]
 800ff3c:	f015 0506 	ands.w	r5, r5, #6
 800ff40:	d106      	bne.n	800ff50 <_printf_common+0x48>
 800ff42:	f104 0a19 	add.w	sl, r4, #25
 800ff46:	68e3      	ldr	r3, [r4, #12]
 800ff48:	6832      	ldr	r2, [r6, #0]
 800ff4a:	1a9b      	subs	r3, r3, r2
 800ff4c:	42ab      	cmp	r3, r5
 800ff4e:	dc26      	bgt.n	800ff9e <_printf_common+0x96>
 800ff50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff54:	6822      	ldr	r2, [r4, #0]
 800ff56:	3b00      	subs	r3, #0
 800ff58:	bf18      	it	ne
 800ff5a:	2301      	movne	r3, #1
 800ff5c:	0692      	lsls	r2, r2, #26
 800ff5e:	d42b      	bmi.n	800ffb8 <_printf_common+0xb0>
 800ff60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff64:	4641      	mov	r1, r8
 800ff66:	4638      	mov	r0, r7
 800ff68:	47c8      	blx	r9
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	d01e      	beq.n	800ffac <_printf_common+0xa4>
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	6922      	ldr	r2, [r4, #16]
 800ff72:	f003 0306 	and.w	r3, r3, #6
 800ff76:	2b04      	cmp	r3, #4
 800ff78:	bf02      	ittt	eq
 800ff7a:	68e5      	ldreq	r5, [r4, #12]
 800ff7c:	6833      	ldreq	r3, [r6, #0]
 800ff7e:	1aed      	subeq	r5, r5, r3
 800ff80:	68a3      	ldr	r3, [r4, #8]
 800ff82:	bf0c      	ite	eq
 800ff84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff88:	2500      	movne	r5, #0
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	bfc4      	itt	gt
 800ff8e:	1a9b      	subgt	r3, r3, r2
 800ff90:	18ed      	addgt	r5, r5, r3
 800ff92:	2600      	movs	r6, #0
 800ff94:	341a      	adds	r4, #26
 800ff96:	42b5      	cmp	r5, r6
 800ff98:	d11a      	bne.n	800ffd0 <_printf_common+0xc8>
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	e008      	b.n	800ffb0 <_printf_common+0xa8>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	4652      	mov	r2, sl
 800ffa2:	4641      	mov	r1, r8
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	47c8      	blx	r9
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	d103      	bne.n	800ffb4 <_printf_common+0xac>
 800ffac:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb4:	3501      	adds	r5, #1
 800ffb6:	e7c6      	b.n	800ff46 <_printf_common+0x3e>
 800ffb8:	18e1      	adds	r1, r4, r3
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	2030      	movs	r0, #48	@ 0x30
 800ffbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ffc2:	4422      	add	r2, r4
 800ffc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ffc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ffcc:	3302      	adds	r3, #2
 800ffce:	e7c7      	b.n	800ff60 <_printf_common+0x58>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	4622      	mov	r2, r4
 800ffd4:	4641      	mov	r1, r8
 800ffd6:	4638      	mov	r0, r7
 800ffd8:	47c8      	blx	r9
 800ffda:	3001      	adds	r0, #1
 800ffdc:	d0e6      	beq.n	800ffac <_printf_common+0xa4>
 800ffde:	3601      	adds	r6, #1
 800ffe0:	e7d9      	b.n	800ff96 <_printf_common+0x8e>
	...

0800ffe4 <_printf_i>:
 800ffe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe8:	7e0f      	ldrb	r7, [r1, #24]
 800ffea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ffec:	2f78      	cmp	r7, #120	@ 0x78
 800ffee:	4691      	mov	r9, r2
 800fff0:	4680      	mov	r8, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	469a      	mov	sl, r3
 800fff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fffa:	d807      	bhi.n	801000c <_printf_i+0x28>
 800fffc:	2f62      	cmp	r7, #98	@ 0x62
 800fffe:	d80a      	bhi.n	8010016 <_printf_i+0x32>
 8010000:	2f00      	cmp	r7, #0
 8010002:	f000 80d2 	beq.w	80101aa <_printf_i+0x1c6>
 8010006:	2f58      	cmp	r7, #88	@ 0x58
 8010008:	f000 80b9 	beq.w	801017e <_printf_i+0x19a>
 801000c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010014:	e03a      	b.n	801008c <_printf_i+0xa8>
 8010016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801001a:	2b15      	cmp	r3, #21
 801001c:	d8f6      	bhi.n	801000c <_printf_i+0x28>
 801001e:	a101      	add	r1, pc, #4	@ (adr r1, 8010024 <_printf_i+0x40>)
 8010020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010024:	0801007d 	.word	0x0801007d
 8010028:	08010091 	.word	0x08010091
 801002c:	0801000d 	.word	0x0801000d
 8010030:	0801000d 	.word	0x0801000d
 8010034:	0801000d 	.word	0x0801000d
 8010038:	0801000d 	.word	0x0801000d
 801003c:	08010091 	.word	0x08010091
 8010040:	0801000d 	.word	0x0801000d
 8010044:	0801000d 	.word	0x0801000d
 8010048:	0801000d 	.word	0x0801000d
 801004c:	0801000d 	.word	0x0801000d
 8010050:	08010191 	.word	0x08010191
 8010054:	080100bb 	.word	0x080100bb
 8010058:	0801014b 	.word	0x0801014b
 801005c:	0801000d 	.word	0x0801000d
 8010060:	0801000d 	.word	0x0801000d
 8010064:	080101b3 	.word	0x080101b3
 8010068:	0801000d 	.word	0x0801000d
 801006c:	080100bb 	.word	0x080100bb
 8010070:	0801000d 	.word	0x0801000d
 8010074:	0801000d 	.word	0x0801000d
 8010078:	08010153 	.word	0x08010153
 801007c:	6833      	ldr	r3, [r6, #0]
 801007e:	1d1a      	adds	r2, r3, #4
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6032      	str	r2, [r6, #0]
 8010084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801008c:	2301      	movs	r3, #1
 801008e:	e09d      	b.n	80101cc <_printf_i+0x1e8>
 8010090:	6833      	ldr	r3, [r6, #0]
 8010092:	6820      	ldr	r0, [r4, #0]
 8010094:	1d19      	adds	r1, r3, #4
 8010096:	6031      	str	r1, [r6, #0]
 8010098:	0606      	lsls	r6, r0, #24
 801009a:	d501      	bpl.n	80100a0 <_printf_i+0xbc>
 801009c:	681d      	ldr	r5, [r3, #0]
 801009e:	e003      	b.n	80100a8 <_printf_i+0xc4>
 80100a0:	0645      	lsls	r5, r0, #25
 80100a2:	d5fb      	bpl.n	801009c <_printf_i+0xb8>
 80100a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80100a8:	2d00      	cmp	r5, #0
 80100aa:	da03      	bge.n	80100b4 <_printf_i+0xd0>
 80100ac:	232d      	movs	r3, #45	@ 0x2d
 80100ae:	426d      	negs	r5, r5
 80100b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100b4:	4859      	ldr	r0, [pc, #356]	@ (801021c <_printf_i+0x238>)
 80100b6:	230a      	movs	r3, #10
 80100b8:	e011      	b.n	80100de <_printf_i+0xfa>
 80100ba:	6821      	ldr	r1, [r4, #0]
 80100bc:	6833      	ldr	r3, [r6, #0]
 80100be:	0608      	lsls	r0, r1, #24
 80100c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80100c4:	d402      	bmi.n	80100cc <_printf_i+0xe8>
 80100c6:	0649      	lsls	r1, r1, #25
 80100c8:	bf48      	it	mi
 80100ca:	b2ad      	uxthmi	r5, r5
 80100cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80100ce:	4853      	ldr	r0, [pc, #332]	@ (801021c <_printf_i+0x238>)
 80100d0:	6033      	str	r3, [r6, #0]
 80100d2:	bf14      	ite	ne
 80100d4:	230a      	movne	r3, #10
 80100d6:	2308      	moveq	r3, #8
 80100d8:	2100      	movs	r1, #0
 80100da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80100de:	6866      	ldr	r6, [r4, #4]
 80100e0:	60a6      	str	r6, [r4, #8]
 80100e2:	2e00      	cmp	r6, #0
 80100e4:	bfa2      	ittt	ge
 80100e6:	6821      	ldrge	r1, [r4, #0]
 80100e8:	f021 0104 	bicge.w	r1, r1, #4
 80100ec:	6021      	strge	r1, [r4, #0]
 80100ee:	b90d      	cbnz	r5, 80100f4 <_printf_i+0x110>
 80100f0:	2e00      	cmp	r6, #0
 80100f2:	d04b      	beq.n	801018c <_printf_i+0x1a8>
 80100f4:	4616      	mov	r6, r2
 80100f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80100fa:	fb03 5711 	mls	r7, r3, r1, r5
 80100fe:	5dc7      	ldrb	r7, [r0, r7]
 8010100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010104:	462f      	mov	r7, r5
 8010106:	42bb      	cmp	r3, r7
 8010108:	460d      	mov	r5, r1
 801010a:	d9f4      	bls.n	80100f6 <_printf_i+0x112>
 801010c:	2b08      	cmp	r3, #8
 801010e:	d10b      	bne.n	8010128 <_printf_i+0x144>
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	07df      	lsls	r7, r3, #31
 8010114:	d508      	bpl.n	8010128 <_printf_i+0x144>
 8010116:	6923      	ldr	r3, [r4, #16]
 8010118:	6861      	ldr	r1, [r4, #4]
 801011a:	4299      	cmp	r1, r3
 801011c:	bfde      	ittt	le
 801011e:	2330      	movle	r3, #48	@ 0x30
 8010120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010128:	1b92      	subs	r2, r2, r6
 801012a:	6122      	str	r2, [r4, #16]
 801012c:	f8cd a000 	str.w	sl, [sp]
 8010130:	464b      	mov	r3, r9
 8010132:	aa03      	add	r2, sp, #12
 8010134:	4621      	mov	r1, r4
 8010136:	4640      	mov	r0, r8
 8010138:	f7ff fee6 	bl	800ff08 <_printf_common>
 801013c:	3001      	adds	r0, #1
 801013e:	d14a      	bne.n	80101d6 <_printf_i+0x1f2>
 8010140:	f04f 30ff 	mov.w	r0, #4294967295
 8010144:	b004      	add	sp, #16
 8010146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801014a:	6823      	ldr	r3, [r4, #0]
 801014c:	f043 0320 	orr.w	r3, r3, #32
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	4833      	ldr	r0, [pc, #204]	@ (8010220 <_printf_i+0x23c>)
 8010154:	2778      	movs	r7, #120	@ 0x78
 8010156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	6831      	ldr	r1, [r6, #0]
 801015e:	061f      	lsls	r7, r3, #24
 8010160:	f851 5b04 	ldr.w	r5, [r1], #4
 8010164:	d402      	bmi.n	801016c <_printf_i+0x188>
 8010166:	065f      	lsls	r7, r3, #25
 8010168:	bf48      	it	mi
 801016a:	b2ad      	uxthmi	r5, r5
 801016c:	6031      	str	r1, [r6, #0]
 801016e:	07d9      	lsls	r1, r3, #31
 8010170:	bf44      	itt	mi
 8010172:	f043 0320 	orrmi.w	r3, r3, #32
 8010176:	6023      	strmi	r3, [r4, #0]
 8010178:	b11d      	cbz	r5, 8010182 <_printf_i+0x19e>
 801017a:	2310      	movs	r3, #16
 801017c:	e7ac      	b.n	80100d8 <_printf_i+0xf4>
 801017e:	4827      	ldr	r0, [pc, #156]	@ (801021c <_printf_i+0x238>)
 8010180:	e7e9      	b.n	8010156 <_printf_i+0x172>
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	f023 0320 	bic.w	r3, r3, #32
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	e7f6      	b.n	801017a <_printf_i+0x196>
 801018c:	4616      	mov	r6, r2
 801018e:	e7bd      	b.n	801010c <_printf_i+0x128>
 8010190:	6833      	ldr	r3, [r6, #0]
 8010192:	6825      	ldr	r5, [r4, #0]
 8010194:	6961      	ldr	r1, [r4, #20]
 8010196:	1d18      	adds	r0, r3, #4
 8010198:	6030      	str	r0, [r6, #0]
 801019a:	062e      	lsls	r6, r5, #24
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	d501      	bpl.n	80101a4 <_printf_i+0x1c0>
 80101a0:	6019      	str	r1, [r3, #0]
 80101a2:	e002      	b.n	80101aa <_printf_i+0x1c6>
 80101a4:	0668      	lsls	r0, r5, #25
 80101a6:	d5fb      	bpl.n	80101a0 <_printf_i+0x1bc>
 80101a8:	8019      	strh	r1, [r3, #0]
 80101aa:	2300      	movs	r3, #0
 80101ac:	6123      	str	r3, [r4, #16]
 80101ae:	4616      	mov	r6, r2
 80101b0:	e7bc      	b.n	801012c <_printf_i+0x148>
 80101b2:	6833      	ldr	r3, [r6, #0]
 80101b4:	1d1a      	adds	r2, r3, #4
 80101b6:	6032      	str	r2, [r6, #0]
 80101b8:	681e      	ldr	r6, [r3, #0]
 80101ba:	6862      	ldr	r2, [r4, #4]
 80101bc:	2100      	movs	r1, #0
 80101be:	4630      	mov	r0, r6
 80101c0:	f7ef ffee 	bl	80001a0 <memchr>
 80101c4:	b108      	cbz	r0, 80101ca <_printf_i+0x1e6>
 80101c6:	1b80      	subs	r0, r0, r6
 80101c8:	6060      	str	r0, [r4, #4]
 80101ca:	6863      	ldr	r3, [r4, #4]
 80101cc:	6123      	str	r3, [r4, #16]
 80101ce:	2300      	movs	r3, #0
 80101d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101d4:	e7aa      	b.n	801012c <_printf_i+0x148>
 80101d6:	6923      	ldr	r3, [r4, #16]
 80101d8:	4632      	mov	r2, r6
 80101da:	4649      	mov	r1, r9
 80101dc:	4640      	mov	r0, r8
 80101de:	47d0      	blx	sl
 80101e0:	3001      	adds	r0, #1
 80101e2:	d0ad      	beq.n	8010140 <_printf_i+0x15c>
 80101e4:	6823      	ldr	r3, [r4, #0]
 80101e6:	079b      	lsls	r3, r3, #30
 80101e8:	d413      	bmi.n	8010212 <_printf_i+0x22e>
 80101ea:	68e0      	ldr	r0, [r4, #12]
 80101ec:	9b03      	ldr	r3, [sp, #12]
 80101ee:	4298      	cmp	r0, r3
 80101f0:	bfb8      	it	lt
 80101f2:	4618      	movlt	r0, r3
 80101f4:	e7a6      	b.n	8010144 <_printf_i+0x160>
 80101f6:	2301      	movs	r3, #1
 80101f8:	4632      	mov	r2, r6
 80101fa:	4649      	mov	r1, r9
 80101fc:	4640      	mov	r0, r8
 80101fe:	47d0      	blx	sl
 8010200:	3001      	adds	r0, #1
 8010202:	d09d      	beq.n	8010140 <_printf_i+0x15c>
 8010204:	3501      	adds	r5, #1
 8010206:	68e3      	ldr	r3, [r4, #12]
 8010208:	9903      	ldr	r1, [sp, #12]
 801020a:	1a5b      	subs	r3, r3, r1
 801020c:	42ab      	cmp	r3, r5
 801020e:	dcf2      	bgt.n	80101f6 <_printf_i+0x212>
 8010210:	e7eb      	b.n	80101ea <_printf_i+0x206>
 8010212:	2500      	movs	r5, #0
 8010214:	f104 0619 	add.w	r6, r4, #25
 8010218:	e7f5      	b.n	8010206 <_printf_i+0x222>
 801021a:	bf00      	nop
 801021c:	080152db 	.word	0x080152db
 8010220:	080152ec 	.word	0x080152ec

08010224 <std>:
 8010224:	2300      	movs	r3, #0
 8010226:	b510      	push	{r4, lr}
 8010228:	4604      	mov	r4, r0
 801022a:	e9c0 3300 	strd	r3, r3, [r0]
 801022e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010232:	6083      	str	r3, [r0, #8]
 8010234:	8181      	strh	r1, [r0, #12]
 8010236:	6643      	str	r3, [r0, #100]	@ 0x64
 8010238:	81c2      	strh	r2, [r0, #14]
 801023a:	6183      	str	r3, [r0, #24]
 801023c:	4619      	mov	r1, r3
 801023e:	2208      	movs	r2, #8
 8010240:	305c      	adds	r0, #92	@ 0x5c
 8010242:	f000 f916 	bl	8010472 <memset>
 8010246:	4b0d      	ldr	r3, [pc, #52]	@ (801027c <std+0x58>)
 8010248:	6263      	str	r3, [r4, #36]	@ 0x24
 801024a:	4b0d      	ldr	r3, [pc, #52]	@ (8010280 <std+0x5c>)
 801024c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801024e:	4b0d      	ldr	r3, [pc, #52]	@ (8010284 <std+0x60>)
 8010250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010252:	4b0d      	ldr	r3, [pc, #52]	@ (8010288 <std+0x64>)
 8010254:	6323      	str	r3, [r4, #48]	@ 0x30
 8010256:	4b0d      	ldr	r3, [pc, #52]	@ (801028c <std+0x68>)
 8010258:	6224      	str	r4, [r4, #32]
 801025a:	429c      	cmp	r4, r3
 801025c:	d006      	beq.n	801026c <std+0x48>
 801025e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010262:	4294      	cmp	r4, r2
 8010264:	d002      	beq.n	801026c <std+0x48>
 8010266:	33d0      	adds	r3, #208	@ 0xd0
 8010268:	429c      	cmp	r4, r3
 801026a:	d105      	bne.n	8010278 <std+0x54>
 801026c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010274:	f000 bfe8 	b.w	8011248 <__retarget_lock_init_recursive>
 8010278:	bd10      	pop	{r4, pc}
 801027a:	bf00      	nop
 801027c:	080103e9 	.word	0x080103e9
 8010280:	0801040f 	.word	0x0801040f
 8010284:	08010447 	.word	0x08010447
 8010288:	0801046b 	.word	0x0801046b
 801028c:	2000a600 	.word	0x2000a600

08010290 <stdio_exit_handler>:
 8010290:	4a02      	ldr	r2, [pc, #8]	@ (801029c <stdio_exit_handler+0xc>)
 8010292:	4903      	ldr	r1, [pc, #12]	@ (80102a0 <stdio_exit_handler+0x10>)
 8010294:	4803      	ldr	r0, [pc, #12]	@ (80102a4 <stdio_exit_handler+0x14>)
 8010296:	f000 b869 	b.w	801036c <_fwalk_sglue>
 801029a:	bf00      	nop
 801029c:	2000001c 	.word	0x2000001c
 80102a0:	08012db1 	.word	0x08012db1
 80102a4:	20000034 	.word	0x20000034

080102a8 <cleanup_stdio>:
 80102a8:	6841      	ldr	r1, [r0, #4]
 80102aa:	4b0c      	ldr	r3, [pc, #48]	@ (80102dc <cleanup_stdio+0x34>)
 80102ac:	4299      	cmp	r1, r3
 80102ae:	b510      	push	{r4, lr}
 80102b0:	4604      	mov	r4, r0
 80102b2:	d001      	beq.n	80102b8 <cleanup_stdio+0x10>
 80102b4:	f002 fd7c 	bl	8012db0 <_fflush_r>
 80102b8:	68a1      	ldr	r1, [r4, #8]
 80102ba:	4b09      	ldr	r3, [pc, #36]	@ (80102e0 <cleanup_stdio+0x38>)
 80102bc:	4299      	cmp	r1, r3
 80102be:	d002      	beq.n	80102c6 <cleanup_stdio+0x1e>
 80102c0:	4620      	mov	r0, r4
 80102c2:	f002 fd75 	bl	8012db0 <_fflush_r>
 80102c6:	68e1      	ldr	r1, [r4, #12]
 80102c8:	4b06      	ldr	r3, [pc, #24]	@ (80102e4 <cleanup_stdio+0x3c>)
 80102ca:	4299      	cmp	r1, r3
 80102cc:	d004      	beq.n	80102d8 <cleanup_stdio+0x30>
 80102ce:	4620      	mov	r0, r4
 80102d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d4:	f002 bd6c 	b.w	8012db0 <_fflush_r>
 80102d8:	bd10      	pop	{r4, pc}
 80102da:	bf00      	nop
 80102dc:	2000a600 	.word	0x2000a600
 80102e0:	2000a668 	.word	0x2000a668
 80102e4:	2000a6d0 	.word	0x2000a6d0

080102e8 <global_stdio_init.part.0>:
 80102e8:	b510      	push	{r4, lr}
 80102ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010318 <global_stdio_init.part.0+0x30>)
 80102ec:	4c0b      	ldr	r4, [pc, #44]	@ (801031c <global_stdio_init.part.0+0x34>)
 80102ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010320 <global_stdio_init.part.0+0x38>)
 80102f0:	601a      	str	r2, [r3, #0]
 80102f2:	4620      	mov	r0, r4
 80102f4:	2200      	movs	r2, #0
 80102f6:	2104      	movs	r1, #4
 80102f8:	f7ff ff94 	bl	8010224 <std>
 80102fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010300:	2201      	movs	r2, #1
 8010302:	2109      	movs	r1, #9
 8010304:	f7ff ff8e 	bl	8010224 <std>
 8010308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801030c:	2202      	movs	r2, #2
 801030e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010312:	2112      	movs	r1, #18
 8010314:	f7ff bf86 	b.w	8010224 <std>
 8010318:	2000a738 	.word	0x2000a738
 801031c:	2000a600 	.word	0x2000a600
 8010320:	08010291 	.word	0x08010291

08010324 <__sfp_lock_acquire>:
 8010324:	4801      	ldr	r0, [pc, #4]	@ (801032c <__sfp_lock_acquire+0x8>)
 8010326:	f000 bf91 	b.w	801124c <__retarget_lock_acquire_recursive>
 801032a:	bf00      	nop
 801032c:	2000a767 	.word	0x2000a767

08010330 <__sfp_lock_release>:
 8010330:	4801      	ldr	r0, [pc, #4]	@ (8010338 <__sfp_lock_release+0x8>)
 8010332:	f000 bf8d 	b.w	8011250 <__retarget_lock_release_recursive>
 8010336:	bf00      	nop
 8010338:	2000a767 	.word	0x2000a767

0801033c <__sinit>:
 801033c:	b510      	push	{r4, lr}
 801033e:	4604      	mov	r4, r0
 8010340:	f7ff fff0 	bl	8010324 <__sfp_lock_acquire>
 8010344:	6a23      	ldr	r3, [r4, #32]
 8010346:	b11b      	cbz	r3, 8010350 <__sinit+0x14>
 8010348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801034c:	f7ff bff0 	b.w	8010330 <__sfp_lock_release>
 8010350:	4b04      	ldr	r3, [pc, #16]	@ (8010364 <__sinit+0x28>)
 8010352:	6223      	str	r3, [r4, #32]
 8010354:	4b04      	ldr	r3, [pc, #16]	@ (8010368 <__sinit+0x2c>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1f5      	bne.n	8010348 <__sinit+0xc>
 801035c:	f7ff ffc4 	bl	80102e8 <global_stdio_init.part.0>
 8010360:	e7f2      	b.n	8010348 <__sinit+0xc>
 8010362:	bf00      	nop
 8010364:	080102a9 	.word	0x080102a9
 8010368:	2000a738 	.word	0x2000a738

0801036c <_fwalk_sglue>:
 801036c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010370:	4607      	mov	r7, r0
 8010372:	4688      	mov	r8, r1
 8010374:	4614      	mov	r4, r2
 8010376:	2600      	movs	r6, #0
 8010378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801037c:	f1b9 0901 	subs.w	r9, r9, #1
 8010380:	d505      	bpl.n	801038e <_fwalk_sglue+0x22>
 8010382:	6824      	ldr	r4, [r4, #0]
 8010384:	2c00      	cmp	r4, #0
 8010386:	d1f7      	bne.n	8010378 <_fwalk_sglue+0xc>
 8010388:	4630      	mov	r0, r6
 801038a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801038e:	89ab      	ldrh	r3, [r5, #12]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d907      	bls.n	80103a4 <_fwalk_sglue+0x38>
 8010394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010398:	3301      	adds	r3, #1
 801039a:	d003      	beq.n	80103a4 <_fwalk_sglue+0x38>
 801039c:	4629      	mov	r1, r5
 801039e:	4638      	mov	r0, r7
 80103a0:	47c0      	blx	r8
 80103a2:	4306      	orrs	r6, r0
 80103a4:	3568      	adds	r5, #104	@ 0x68
 80103a6:	e7e9      	b.n	801037c <_fwalk_sglue+0x10>

080103a8 <siprintf>:
 80103a8:	b40e      	push	{r1, r2, r3}
 80103aa:	b500      	push	{lr}
 80103ac:	b09c      	sub	sp, #112	@ 0x70
 80103ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80103b0:	9002      	str	r0, [sp, #8]
 80103b2:	9006      	str	r0, [sp, #24]
 80103b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80103b8:	4809      	ldr	r0, [pc, #36]	@ (80103e0 <siprintf+0x38>)
 80103ba:	9107      	str	r1, [sp, #28]
 80103bc:	9104      	str	r1, [sp, #16]
 80103be:	4909      	ldr	r1, [pc, #36]	@ (80103e4 <siprintf+0x3c>)
 80103c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c4:	9105      	str	r1, [sp, #20]
 80103c6:	6800      	ldr	r0, [r0, #0]
 80103c8:	9301      	str	r3, [sp, #4]
 80103ca:	a902      	add	r1, sp, #8
 80103cc:	f002 fb70 	bl	8012ab0 <_svfiprintf_r>
 80103d0:	9b02      	ldr	r3, [sp, #8]
 80103d2:	2200      	movs	r2, #0
 80103d4:	701a      	strb	r2, [r3, #0]
 80103d6:	b01c      	add	sp, #112	@ 0x70
 80103d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80103dc:	b003      	add	sp, #12
 80103de:	4770      	bx	lr
 80103e0:	20000030 	.word	0x20000030
 80103e4:	ffff0208 	.word	0xffff0208

080103e8 <__sread>:
 80103e8:	b510      	push	{r4, lr}
 80103ea:	460c      	mov	r4, r1
 80103ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f0:	f000 fedc 	bl	80111ac <_read_r>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	bfab      	itete	ge
 80103f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80103fa:	89a3      	ldrhlt	r3, [r4, #12]
 80103fc:	181b      	addge	r3, r3, r0
 80103fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010402:	bfac      	ite	ge
 8010404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010406:	81a3      	strhlt	r3, [r4, #12]
 8010408:	bd10      	pop	{r4, pc}

0801040a <__seofread>:
 801040a:	2000      	movs	r0, #0
 801040c:	4770      	bx	lr

0801040e <__swrite>:
 801040e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010412:	461f      	mov	r7, r3
 8010414:	898b      	ldrh	r3, [r1, #12]
 8010416:	05db      	lsls	r3, r3, #23
 8010418:	4605      	mov	r5, r0
 801041a:	460c      	mov	r4, r1
 801041c:	4616      	mov	r6, r2
 801041e:	d505      	bpl.n	801042c <__swrite+0x1e>
 8010420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010424:	2302      	movs	r3, #2
 8010426:	2200      	movs	r2, #0
 8010428:	f000 feae 	bl	8011188 <_lseek_r>
 801042c:	89a3      	ldrh	r3, [r4, #12]
 801042e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010436:	81a3      	strh	r3, [r4, #12]
 8010438:	4632      	mov	r2, r6
 801043a:	463b      	mov	r3, r7
 801043c:	4628      	mov	r0, r5
 801043e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010442:	f000 bec5 	b.w	80111d0 <_write_r>

08010446 <__sseek>:
 8010446:	b510      	push	{r4, lr}
 8010448:	460c      	mov	r4, r1
 801044a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044e:	f000 fe9b 	bl	8011188 <_lseek_r>
 8010452:	1c43      	adds	r3, r0, #1
 8010454:	89a3      	ldrh	r3, [r4, #12]
 8010456:	bf15      	itete	ne
 8010458:	6560      	strne	r0, [r4, #84]	@ 0x54
 801045a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801045e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010462:	81a3      	strheq	r3, [r4, #12]
 8010464:	bf18      	it	ne
 8010466:	81a3      	strhne	r3, [r4, #12]
 8010468:	bd10      	pop	{r4, pc}

0801046a <__sclose>:
 801046a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046e:	f000 be7b 	b.w	8011168 <_close_r>

08010472 <memset>:
 8010472:	4402      	add	r2, r0
 8010474:	4603      	mov	r3, r0
 8010476:	4293      	cmp	r3, r2
 8010478:	d100      	bne.n	801047c <memset+0xa>
 801047a:	4770      	bx	lr
 801047c:	f803 1b01 	strb.w	r1, [r3], #1
 8010480:	e7f9      	b.n	8010476 <memset+0x4>
	...

08010484 <localtime>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	4b0b      	ldr	r3, [pc, #44]	@ (80104b4 <localtime+0x30>)
 8010488:	681d      	ldr	r5, [r3, #0]
 801048a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801048c:	4604      	mov	r4, r0
 801048e:	b953      	cbnz	r3, 80104a6 <localtime+0x22>
 8010490:	2024      	movs	r0, #36	@ 0x24
 8010492:	f001 fdf7 	bl	8012084 <malloc>
 8010496:	4602      	mov	r2, r0
 8010498:	6368      	str	r0, [r5, #52]	@ 0x34
 801049a:	b920      	cbnz	r0, 80104a6 <localtime+0x22>
 801049c:	4b06      	ldr	r3, [pc, #24]	@ (80104b8 <localtime+0x34>)
 801049e:	4807      	ldr	r0, [pc, #28]	@ (80104bc <localtime+0x38>)
 80104a0:	2132      	movs	r1, #50	@ 0x32
 80104a2:	f000 feed 	bl	8011280 <__assert_func>
 80104a6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80104a8:	4620      	mov	r0, r4
 80104aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ae:	f000 b807 	b.w	80104c0 <localtime_r>
 80104b2:	bf00      	nop
 80104b4:	20000030 	.word	0x20000030
 80104b8:	0801525c 	.word	0x0801525c
 80104bc:	080152fd 	.word	0x080152fd

080104c0 <localtime_r>:
 80104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	460c      	mov	r4, r1
 80104c6:	4680      	mov	r8, r0
 80104c8:	f002 fd02 	bl	8012ed0 <__gettzinfo>
 80104cc:	4621      	mov	r1, r4
 80104ce:	4605      	mov	r5, r0
 80104d0:	4640      	mov	r0, r8
 80104d2:	f002 fd01 	bl	8012ed8 <gmtime_r>
 80104d6:	6943      	ldr	r3, [r0, #20]
 80104d8:	0799      	lsls	r1, r3, #30
 80104da:	4604      	mov	r4, r0
 80104dc:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 80104e0:	d106      	bne.n	80104f0 <localtime_r+0x30>
 80104e2:	2264      	movs	r2, #100	@ 0x64
 80104e4:	fb97 f3f2 	sdiv	r3, r7, r2
 80104e8:	fb02 7313 	mls	r3, r2, r3, r7
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d170      	bne.n	80105d2 <localtime_r+0x112>
 80104f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80104f4:	fb97 f3f2 	sdiv	r3, r7, r2
 80104f8:	fb02 7313 	mls	r3, r2, r3, r7
 80104fc:	fab3 f383 	clz	r3, r3
 8010500:	095b      	lsrs	r3, r3, #5
 8010502:	4e64      	ldr	r6, [pc, #400]	@ (8010694 <localtime_r+0x1d4>)
 8010504:	2230      	movs	r2, #48	@ 0x30
 8010506:	fb02 6603 	mla	r6, r2, r3, r6
 801050a:	f000 fbf5 	bl	8010cf8 <__tz_lock>
 801050e:	f000 fbff 	bl	8010d10 <_tzset_unlocked>
 8010512:	4b61      	ldr	r3, [pc, #388]	@ (8010698 <localtime_r+0x1d8>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d06a      	beq.n	80105f0 <localtime_r+0x130>
 801051a:	686b      	ldr	r3, [r5, #4]
 801051c:	42bb      	cmp	r3, r7
 801051e:	d15a      	bne.n	80105d6 <localtime_r+0x116>
 8010520:	682f      	ldr	r7, [r5, #0]
 8010522:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010526:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801052a:	2f00      	cmp	r7, #0
 801052c:	d15b      	bne.n	80105e6 <localtime_r+0x126>
 801052e:	4282      	cmp	r2, r0
 8010530:	eb73 0101 	sbcs.w	r1, r3, r1
 8010534:	db5e      	blt.n	80105f4 <localtime_r+0x134>
 8010536:	2301      	movs	r3, #1
 8010538:	6223      	str	r3, [r4, #32]
 801053a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801053c:	6861      	ldr	r1, [r4, #4]
 801053e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8010542:	fb93 f0f2 	sdiv	r0, r3, r2
 8010546:	fb02 3310 	mls	r3, r2, r0, r3
 801054a:	223c      	movs	r2, #60	@ 0x3c
 801054c:	fb93 f5f2 	sdiv	r5, r3, r2
 8010550:	fb02 3215 	mls	r2, r2, r5, r3
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	1a9b      	subs	r3, r3, r2
 8010558:	68a2      	ldr	r2, [r4, #8]
 801055a:	6023      	str	r3, [r4, #0]
 801055c:	1b49      	subs	r1, r1, r5
 801055e:	1a12      	subs	r2, r2, r0
 8010560:	2b3b      	cmp	r3, #59	@ 0x3b
 8010562:	6061      	str	r1, [r4, #4]
 8010564:	60a2      	str	r2, [r4, #8]
 8010566:	dd51      	ble.n	801060c <localtime_r+0x14c>
 8010568:	3101      	adds	r1, #1
 801056a:	6061      	str	r1, [r4, #4]
 801056c:	3b3c      	subs	r3, #60	@ 0x3c
 801056e:	6023      	str	r3, [r4, #0]
 8010570:	6863      	ldr	r3, [r4, #4]
 8010572:	2b3b      	cmp	r3, #59	@ 0x3b
 8010574:	dd50      	ble.n	8010618 <localtime_r+0x158>
 8010576:	3201      	adds	r2, #1
 8010578:	60a2      	str	r2, [r4, #8]
 801057a:	3b3c      	subs	r3, #60	@ 0x3c
 801057c:	6063      	str	r3, [r4, #4]
 801057e:	68a3      	ldr	r3, [r4, #8]
 8010580:	2b17      	cmp	r3, #23
 8010582:	dd4f      	ble.n	8010624 <localtime_r+0x164>
 8010584:	69e2      	ldr	r2, [r4, #28]
 8010586:	3201      	adds	r2, #1
 8010588:	61e2      	str	r2, [r4, #28]
 801058a:	69a2      	ldr	r2, [r4, #24]
 801058c:	3201      	adds	r2, #1
 801058e:	2a07      	cmp	r2, #7
 8010590:	bfa8      	it	ge
 8010592:	2200      	movge	r2, #0
 8010594:	61a2      	str	r2, [r4, #24]
 8010596:	68e2      	ldr	r2, [r4, #12]
 8010598:	3b18      	subs	r3, #24
 801059a:	3201      	adds	r2, #1
 801059c:	60a3      	str	r3, [r4, #8]
 801059e:	6923      	ldr	r3, [r4, #16]
 80105a0:	60e2      	str	r2, [r4, #12]
 80105a2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80105a6:	428a      	cmp	r2, r1
 80105a8:	dd0e      	ble.n	80105c8 <localtime_r+0x108>
 80105aa:	2b0b      	cmp	r3, #11
 80105ac:	eba2 0201 	sub.w	r2, r2, r1
 80105b0:	60e2      	str	r2, [r4, #12]
 80105b2:	f103 0201 	add.w	r2, r3, #1
 80105b6:	bf09      	itett	eq
 80105b8:	6963      	ldreq	r3, [r4, #20]
 80105ba:	6122      	strne	r2, [r4, #16]
 80105bc:	2200      	moveq	r2, #0
 80105be:	3301      	addeq	r3, #1
 80105c0:	bf02      	ittt	eq
 80105c2:	6122      	streq	r2, [r4, #16]
 80105c4:	6163      	streq	r3, [r4, #20]
 80105c6:	61e2      	streq	r2, [r4, #28]
 80105c8:	f000 fb9c 	bl	8010d04 <__tz_unlock>
 80105cc:	4620      	mov	r0, r4
 80105ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d2:	2301      	movs	r3, #1
 80105d4:	e795      	b.n	8010502 <localtime_r+0x42>
 80105d6:	4638      	mov	r0, r7
 80105d8:	f000 fae4 	bl	8010ba4 <__tzcalc_limits>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d19f      	bne.n	8010520 <localtime_r+0x60>
 80105e0:	f04f 33ff 	mov.w	r3, #4294967295
 80105e4:	e004      	b.n	80105f0 <localtime_r+0x130>
 80105e6:	4282      	cmp	r2, r0
 80105e8:	eb73 0101 	sbcs.w	r1, r3, r1
 80105ec:	da02      	bge.n	80105f4 <localtime_r+0x134>
 80105ee:	2300      	movs	r3, #0
 80105f0:	6223      	str	r3, [r4, #32]
 80105f2:	e009      	b.n	8010608 <localtime_r+0x148>
 80105f4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80105f8:	4282      	cmp	r2, r0
 80105fa:	418b      	sbcs	r3, r1
 80105fc:	bfb4      	ite	lt
 80105fe:	2301      	movlt	r3, #1
 8010600:	2300      	movge	r3, #0
 8010602:	6223      	str	r3, [r4, #32]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d198      	bne.n	801053a <localtime_r+0x7a>
 8010608:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801060a:	e797      	b.n	801053c <localtime_r+0x7c>
 801060c:	2b00      	cmp	r3, #0
 801060e:	daaf      	bge.n	8010570 <localtime_r+0xb0>
 8010610:	3901      	subs	r1, #1
 8010612:	6061      	str	r1, [r4, #4]
 8010614:	333c      	adds	r3, #60	@ 0x3c
 8010616:	e7aa      	b.n	801056e <localtime_r+0xae>
 8010618:	2b00      	cmp	r3, #0
 801061a:	dab0      	bge.n	801057e <localtime_r+0xbe>
 801061c:	3a01      	subs	r2, #1
 801061e:	60a2      	str	r2, [r4, #8]
 8010620:	333c      	adds	r3, #60	@ 0x3c
 8010622:	e7ab      	b.n	801057c <localtime_r+0xbc>
 8010624:	2b00      	cmp	r3, #0
 8010626:	dacf      	bge.n	80105c8 <localtime_r+0x108>
 8010628:	69e2      	ldr	r2, [r4, #28]
 801062a:	3a01      	subs	r2, #1
 801062c:	61e2      	str	r2, [r4, #28]
 801062e:	69a2      	ldr	r2, [r4, #24]
 8010630:	3a01      	subs	r2, #1
 8010632:	bf48      	it	mi
 8010634:	2206      	movmi	r2, #6
 8010636:	61a2      	str	r2, [r4, #24]
 8010638:	68e2      	ldr	r2, [r4, #12]
 801063a:	3318      	adds	r3, #24
 801063c:	3a01      	subs	r2, #1
 801063e:	60e2      	str	r2, [r4, #12]
 8010640:	60a3      	str	r3, [r4, #8]
 8010642:	2a00      	cmp	r2, #0
 8010644:	d1c0      	bne.n	80105c8 <localtime_r+0x108>
 8010646:	6923      	ldr	r3, [r4, #16]
 8010648:	3b01      	subs	r3, #1
 801064a:	d405      	bmi.n	8010658 <localtime_r+0x198>
 801064c:	6123      	str	r3, [r4, #16]
 801064e:	6923      	ldr	r3, [r4, #16]
 8010650:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8010654:	60e3      	str	r3, [r4, #12]
 8010656:	e7b7      	b.n	80105c8 <localtime_r+0x108>
 8010658:	230b      	movs	r3, #11
 801065a:	6123      	str	r3, [r4, #16]
 801065c:	6963      	ldr	r3, [r4, #20]
 801065e:	1e5a      	subs	r2, r3, #1
 8010660:	6162      	str	r2, [r4, #20]
 8010662:	0792      	lsls	r2, r2, #30
 8010664:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8010668:	d105      	bne.n	8010676 <localtime_r+0x1b6>
 801066a:	2164      	movs	r1, #100	@ 0x64
 801066c:	fb93 f2f1 	sdiv	r2, r3, r1
 8010670:	fb01 3212 	mls	r2, r1, r2, r3
 8010674:	b962      	cbnz	r2, 8010690 <localtime_r+0x1d0>
 8010676:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801067a:	fb93 f1f2 	sdiv	r1, r3, r2
 801067e:	fb02 3311 	mls	r3, r2, r1, r3
 8010682:	fab3 f383 	clz	r3, r3
 8010686:	095b      	lsrs	r3, r3, #5
 8010688:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 801068c:	61e3      	str	r3, [r4, #28]
 801068e:	e7de      	b.n	801064e <localtime_r+0x18e>
 8010690:	2301      	movs	r3, #1
 8010692:	e7f9      	b.n	8010688 <localtime_r+0x1c8>
 8010694:	080153b8 	.word	0x080153b8
 8010698:	2000a75c 	.word	0x2000a75c

0801069c <validate_structure>:
 801069c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801069e:	6801      	ldr	r1, [r0, #0]
 80106a0:	293b      	cmp	r1, #59	@ 0x3b
 80106a2:	4604      	mov	r4, r0
 80106a4:	d911      	bls.n	80106ca <validate_structure+0x2e>
 80106a6:	223c      	movs	r2, #60	@ 0x3c
 80106a8:	4668      	mov	r0, sp
 80106aa:	f000 fe07 	bl	80112bc <div>
 80106ae:	9a01      	ldr	r2, [sp, #4]
 80106b0:	6863      	ldr	r3, [r4, #4]
 80106b2:	9900      	ldr	r1, [sp, #0]
 80106b4:	2a00      	cmp	r2, #0
 80106b6:	440b      	add	r3, r1
 80106b8:	6063      	str	r3, [r4, #4]
 80106ba:	bfbb      	ittet	lt
 80106bc:	323c      	addlt	r2, #60	@ 0x3c
 80106be:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80106c2:	6022      	strge	r2, [r4, #0]
 80106c4:	6022      	strlt	r2, [r4, #0]
 80106c6:	bfb8      	it	lt
 80106c8:	6063      	strlt	r3, [r4, #4]
 80106ca:	6861      	ldr	r1, [r4, #4]
 80106cc:	293b      	cmp	r1, #59	@ 0x3b
 80106ce:	d911      	bls.n	80106f4 <validate_structure+0x58>
 80106d0:	223c      	movs	r2, #60	@ 0x3c
 80106d2:	4668      	mov	r0, sp
 80106d4:	f000 fdf2 	bl	80112bc <div>
 80106d8:	9a01      	ldr	r2, [sp, #4]
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	9900      	ldr	r1, [sp, #0]
 80106de:	2a00      	cmp	r2, #0
 80106e0:	440b      	add	r3, r1
 80106e2:	60a3      	str	r3, [r4, #8]
 80106e4:	bfbb      	ittet	lt
 80106e6:	323c      	addlt	r2, #60	@ 0x3c
 80106e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80106ec:	6062      	strge	r2, [r4, #4]
 80106ee:	6062      	strlt	r2, [r4, #4]
 80106f0:	bfb8      	it	lt
 80106f2:	60a3      	strlt	r3, [r4, #8]
 80106f4:	68a1      	ldr	r1, [r4, #8]
 80106f6:	2917      	cmp	r1, #23
 80106f8:	d911      	bls.n	801071e <validate_structure+0x82>
 80106fa:	2218      	movs	r2, #24
 80106fc:	4668      	mov	r0, sp
 80106fe:	f000 fddd 	bl	80112bc <div>
 8010702:	9a01      	ldr	r2, [sp, #4]
 8010704:	68e3      	ldr	r3, [r4, #12]
 8010706:	9900      	ldr	r1, [sp, #0]
 8010708:	2a00      	cmp	r2, #0
 801070a:	440b      	add	r3, r1
 801070c:	60e3      	str	r3, [r4, #12]
 801070e:	bfbb      	ittet	lt
 8010710:	3218      	addlt	r2, #24
 8010712:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010716:	60a2      	strge	r2, [r4, #8]
 8010718:	60a2      	strlt	r2, [r4, #8]
 801071a:	bfb8      	it	lt
 801071c:	60e3      	strlt	r3, [r4, #12]
 801071e:	6921      	ldr	r1, [r4, #16]
 8010720:	290b      	cmp	r1, #11
 8010722:	d911      	bls.n	8010748 <validate_structure+0xac>
 8010724:	220c      	movs	r2, #12
 8010726:	4668      	mov	r0, sp
 8010728:	f000 fdc8 	bl	80112bc <div>
 801072c:	9a01      	ldr	r2, [sp, #4]
 801072e:	6963      	ldr	r3, [r4, #20]
 8010730:	9900      	ldr	r1, [sp, #0]
 8010732:	2a00      	cmp	r2, #0
 8010734:	440b      	add	r3, r1
 8010736:	6163      	str	r3, [r4, #20]
 8010738:	bfbb      	ittet	lt
 801073a:	320c      	addlt	r2, #12
 801073c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010740:	6122      	strge	r2, [r4, #16]
 8010742:	6122      	strlt	r2, [r4, #16]
 8010744:	bfb8      	it	lt
 8010746:	6163      	strlt	r3, [r4, #20]
 8010748:	6963      	ldr	r3, [r4, #20]
 801074a:	079a      	lsls	r2, r3, #30
 801074c:	d11c      	bne.n	8010788 <validate_structure+0xec>
 801074e:	2164      	movs	r1, #100	@ 0x64
 8010750:	fb93 f2f1 	sdiv	r2, r3, r1
 8010754:	fb01 3212 	mls	r2, r1, r2, r3
 8010758:	b9c2      	cbnz	r2, 801078c <validate_structure+0xf0>
 801075a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801075e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8010762:	fb93 f1f2 	sdiv	r1, r3, r2
 8010766:	fb02 3311 	mls	r3, r2, r1, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	bf14      	ite	ne
 801076e:	231c      	movne	r3, #28
 8010770:	231d      	moveq	r3, #29
 8010772:	68e2      	ldr	r2, [r4, #12]
 8010774:	2a00      	cmp	r2, #0
 8010776:	dc0b      	bgt.n	8010790 <validate_structure+0xf4>
 8010778:	4d31      	ldr	r5, [pc, #196]	@ (8010840 <validate_structure+0x1a4>)
 801077a:	200b      	movs	r0, #11
 801077c:	2164      	movs	r1, #100	@ 0x64
 801077e:	68e6      	ldr	r6, [r4, #12]
 8010780:	2e00      	cmp	r6, #0
 8010782:	dd30      	ble.n	80107e6 <validate_structure+0x14a>
 8010784:	b003      	add	sp, #12
 8010786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010788:	231c      	movs	r3, #28
 801078a:	e7f2      	b.n	8010772 <validate_structure+0xd6>
 801078c:	231d      	movs	r3, #29
 801078e:	e7f0      	b.n	8010772 <validate_structure+0xd6>
 8010790:	4d2b      	ldr	r5, [pc, #172]	@ (8010840 <validate_structure+0x1a4>)
 8010792:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8010796:	2a01      	cmp	r2, #1
 8010798:	bf14      	ite	ne
 801079a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 801079e:	4618      	moveq	r0, r3
 80107a0:	4281      	cmp	r1, r0
 80107a2:	ddef      	ble.n	8010784 <validate_structure+0xe8>
 80107a4:	3201      	adds	r2, #1
 80107a6:	1a09      	subs	r1, r1, r0
 80107a8:	2a0c      	cmp	r2, #12
 80107aa:	60e1      	str	r1, [r4, #12]
 80107ac:	6122      	str	r2, [r4, #16]
 80107ae:	d1f0      	bne.n	8010792 <validate_structure+0xf6>
 80107b0:	6963      	ldr	r3, [r4, #20]
 80107b2:	2100      	movs	r1, #0
 80107b4:	1c5a      	adds	r2, r3, #1
 80107b6:	6121      	str	r1, [r4, #16]
 80107b8:	0791      	lsls	r1, r2, #30
 80107ba:	6162      	str	r2, [r4, #20]
 80107bc:	d13c      	bne.n	8010838 <validate_structure+0x19c>
 80107be:	2164      	movs	r1, #100	@ 0x64
 80107c0:	fb92 f0f1 	sdiv	r0, r2, r1
 80107c4:	fb01 2210 	mls	r2, r1, r0, r2
 80107c8:	2a00      	cmp	r2, #0
 80107ca:	d137      	bne.n	801083c <validate_structure+0x1a0>
 80107cc:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80107d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80107d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80107d8:	fb02 3311 	mls	r3, r2, r1, r3
 80107dc:	2b00      	cmp	r3, #0
 80107de:	bf14      	ite	ne
 80107e0:	231c      	movne	r3, #28
 80107e2:	231d      	moveq	r3, #29
 80107e4:	e7d5      	b.n	8010792 <validate_structure+0xf6>
 80107e6:	6922      	ldr	r2, [r4, #16]
 80107e8:	3a01      	subs	r2, #1
 80107ea:	6122      	str	r2, [r4, #16]
 80107ec:	3201      	adds	r2, #1
 80107ee:	d116      	bne.n	801081e <validate_structure+0x182>
 80107f0:	6963      	ldr	r3, [r4, #20]
 80107f2:	1e5a      	subs	r2, r3, #1
 80107f4:	0797      	lsls	r7, r2, #30
 80107f6:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80107fa:	d119      	bne.n	8010830 <validate_structure+0x194>
 80107fc:	fb92 f7f1 	sdiv	r7, r2, r1
 8010800:	fb01 2217 	mls	r2, r1, r7, r2
 8010804:	b9b2      	cbnz	r2, 8010834 <validate_structure+0x198>
 8010806:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801080a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801080e:	fb93 f7f2 	sdiv	r7, r3, r2
 8010812:	fb02 3317 	mls	r3, r2, r7, r3
 8010816:	2b00      	cmp	r3, #0
 8010818:	bf14      	ite	ne
 801081a:	231c      	movne	r3, #28
 801081c:	231d      	moveq	r3, #29
 801081e:	6922      	ldr	r2, [r4, #16]
 8010820:	2a01      	cmp	r2, #1
 8010822:	bf14      	ite	ne
 8010824:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8010828:	461a      	moveq	r2, r3
 801082a:	4432      	add	r2, r6
 801082c:	60e2      	str	r2, [r4, #12]
 801082e:	e7a6      	b.n	801077e <validate_structure+0xe2>
 8010830:	231c      	movs	r3, #28
 8010832:	e7f4      	b.n	801081e <validate_structure+0x182>
 8010834:	231d      	movs	r3, #29
 8010836:	e7f2      	b.n	801081e <validate_structure+0x182>
 8010838:	231c      	movs	r3, #28
 801083a:	e7aa      	b.n	8010792 <validate_structure+0xf6>
 801083c:	231d      	movs	r3, #29
 801083e:	e7a8      	b.n	8010792 <validate_structure+0xf6>
 8010840:	08015388 	.word	0x08015388

08010844 <mktime>:
 8010844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010848:	b085      	sub	sp, #20
 801084a:	4607      	mov	r7, r0
 801084c:	f002 fb40 	bl	8012ed0 <__gettzinfo>
 8010850:	4681      	mov	r9, r0
 8010852:	4638      	mov	r0, r7
 8010854:	f7ff ff22 	bl	801069c <validate_structure>
 8010858:	e9d7 4300 	ldrd	r4, r3, [r7]
 801085c:	223c      	movs	r2, #60	@ 0x3c
 801085e:	fb02 4403 	mla	r4, r2, r3, r4
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	697d      	ldr	r5, [r7, #20]
 8010866:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801086a:	fb02 4403 	mla	r4, r2, r3, r4
 801086e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8010872:	4ac1      	ldr	r2, [pc, #772]	@ (8010b78 <mktime+0x334>)
 8010874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010878:	3e01      	subs	r6, #1
 801087a:	2b01      	cmp	r3, #1
 801087c:	4416      	add	r6, r2
 801087e:	dd11      	ble.n	80108a4 <mktime+0x60>
 8010880:	07a9      	lsls	r1, r5, #30
 8010882:	d10f      	bne.n	80108a4 <mktime+0x60>
 8010884:	2264      	movs	r2, #100	@ 0x64
 8010886:	fb95 f3f2 	sdiv	r3, r5, r2
 801088a:	fb02 5313 	mls	r3, r2, r3, r5
 801088e:	b943      	cbnz	r3, 80108a2 <mktime+0x5e>
 8010890:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8010894:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8010898:	fb93 f1f2 	sdiv	r1, r3, r2
 801089c:	fb02 3311 	mls	r3, r2, r1, r3
 80108a0:	b903      	cbnz	r3, 80108a4 <mktime+0x60>
 80108a2:	3601      	adds	r6, #1
 80108a4:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80108a8:	3310      	adds	r3, #16
 80108aa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80108ae:	4293      	cmp	r3, r2
 80108b0:	61fe      	str	r6, [r7, #28]
 80108b2:	f200 8167 	bhi.w	8010b84 <mktime+0x340>
 80108b6:	2d46      	cmp	r5, #70	@ 0x46
 80108b8:	f340 808e 	ble.w	80109d8 <mktime+0x194>
 80108bc:	2346      	movs	r3, #70	@ 0x46
 80108be:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80108c2:	2164      	movs	r1, #100	@ 0x64
 80108c4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80108c8:	079a      	lsls	r2, r3, #30
 80108ca:	d17f      	bne.n	80109cc <mktime+0x188>
 80108cc:	fb93 f2f1 	sdiv	r2, r3, r1
 80108d0:	fb01 3212 	mls	r2, r1, r2, r3
 80108d4:	2a00      	cmp	r2, #0
 80108d6:	d17c      	bne.n	80109d2 <mktime+0x18e>
 80108d8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80108dc:	fb92 fef0 	sdiv	lr, r2, r0
 80108e0:	fb00 221e 	mls	r2, r0, lr, r2
 80108e4:	2a00      	cmp	r2, #0
 80108e6:	bf14      	ite	ne
 80108e8:	4662      	movne	r2, ip
 80108ea:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80108ee:	3301      	adds	r3, #1
 80108f0:	429d      	cmp	r5, r3
 80108f2:	4416      	add	r6, r2
 80108f4:	d1e8      	bne.n	80108c8 <mktime+0x84>
 80108f6:	4ba1      	ldr	r3, [pc, #644]	@ (8010b7c <mktime+0x338>)
 80108f8:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80108fc:	fbc6 4803 	smlal	r4, r8, r6, r3
 8010900:	f000 f9fa 	bl	8010cf8 <__tz_lock>
 8010904:	f000 fa04 	bl	8010d10 <_tzset_unlocked>
 8010908:	4b9d      	ldr	r3, [pc, #628]	@ (8010b80 <mktime+0x33c>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	f000 8140 	beq.w	8010b92 <mktime+0x34e>
 8010912:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8010916:	6978      	ldr	r0, [r7, #20]
 8010918:	4653      	mov	r3, sl
 801091a:	2b01      	cmp	r3, #1
 801091c:	bfa8      	it	ge
 801091e:	2301      	movge	r3, #1
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010926:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801092a:	4283      	cmp	r3, r0
 801092c:	f040 8096 	bne.w	8010a5c <mktime+0x218>
 8010930:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8010934:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8010938:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 801093c:	1a13      	subs	r3, r2, r0
 801093e:	9303      	str	r3, [sp, #12]
 8010940:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8010944:	9302      	str	r3, [sp, #8]
 8010946:	9a02      	ldr	r2, [sp, #8]
 8010948:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801094c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8010950:	ebb2 0e03 	subs.w	lr, r2, r3
 8010954:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8010958:	4574      	cmp	r4, lr
 801095a:	eb78 0201 	sbcs.w	r2, r8, r1
 801095e:	f280 8085 	bge.w	8010a6c <mktime+0x228>
 8010962:	f8d9 2000 	ldr.w	r2, [r9]
 8010966:	2a00      	cmp	r2, #0
 8010968:	f000 808d 	beq.w	8010a86 <mktime+0x242>
 801096c:	9a03      	ldr	r2, [sp, #12]
 801096e:	4294      	cmp	r4, r2
 8010970:	eb78 020b 	sbcs.w	r2, r8, fp
 8010974:	f2c0 810a 	blt.w	8010b8c <mktime+0x348>
 8010978:	4574      	cmp	r4, lr
 801097a:	eb78 0101 	sbcs.w	r1, r8, r1
 801097e:	bfb4      	ite	lt
 8010980:	f04f 0b01 	movlt.w	fp, #1
 8010984:	f04f 0b00 	movge.w	fp, #0
 8010988:	f1ba 0f00 	cmp.w	sl, #0
 801098c:	f280 8087 	bge.w	8010a9e <mktime+0x25a>
 8010990:	f1bb 0f01 	cmp.w	fp, #1
 8010994:	f040 80ff 	bne.w	8010b96 <mktime+0x352>
 8010998:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801099c:	191c      	adds	r4, r3, r4
 801099e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80109a2:	f04f 0b01 	mov.w	fp, #1
 80109a6:	f000 f9ad 	bl	8010d04 <__tz_unlock>
 80109aa:	3604      	adds	r6, #4
 80109ac:	2307      	movs	r3, #7
 80109ae:	fb96 f3f3 	sdiv	r3, r6, r3
 80109b2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80109b6:	1af6      	subs	r6, r6, r3
 80109b8:	f100 80db 	bmi.w	8010b72 <mktime+0x32e>
 80109bc:	f8c7 b020 	str.w	fp, [r7, #32]
 80109c0:	61be      	str	r6, [r7, #24]
 80109c2:	4620      	mov	r0, r4
 80109c4:	4641      	mov	r1, r8
 80109c6:	b005      	add	sp, #20
 80109c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109cc:	f240 126d 	movw	r2, #365	@ 0x16d
 80109d0:	e78d      	b.n	80108ee <mktime+0xaa>
 80109d2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80109d6:	e78a      	b.n	80108ee <mktime+0xaa>
 80109d8:	d08d      	beq.n	80108f6 <mktime+0xb2>
 80109da:	2345      	movs	r3, #69	@ 0x45
 80109dc:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80109e0:	2164      	movs	r1, #100	@ 0x64
 80109e2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80109e6:	e012      	b.n	8010a0e <mktime+0x1ca>
 80109e8:	bb62      	cbnz	r2, 8010a44 <mktime+0x200>
 80109ea:	fb93 f2f1 	sdiv	r2, r3, r1
 80109ee:	fb01 3212 	mls	r2, r1, r2, r3
 80109f2:	bb52      	cbnz	r2, 8010a4a <mktime+0x206>
 80109f4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80109f8:	fb92 fef0 	sdiv	lr, r2, r0
 80109fc:	fb00 221e 	mls	r2, r0, lr, r2
 8010a00:	2a00      	cmp	r2, #0
 8010a02:	bf14      	ite	ne
 8010a04:	4662      	movne	r2, ip
 8010a06:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8010a0a:	1ab6      	subs	r6, r6, r2
 8010a0c:	3b01      	subs	r3, #1
 8010a0e:	429d      	cmp	r5, r3
 8010a10:	f003 0203 	and.w	r2, r3, #3
 8010a14:	dbe8      	blt.n	80109e8 <mktime+0x1a4>
 8010a16:	b9da      	cbnz	r2, 8010a50 <mktime+0x20c>
 8010a18:	2264      	movs	r2, #100	@ 0x64
 8010a1a:	fb95 f3f2 	sdiv	r3, r5, r2
 8010a1e:	fb02 5313 	mls	r3, r2, r3, r5
 8010a22:	b9c3      	cbnz	r3, 8010a56 <mktime+0x212>
 8010a24:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8010a28:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8010a2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8010a30:	fb02 3311 	mls	r3, r2, r1, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f240 136d 	movw	r3, #365	@ 0x16d
 8010a3a:	bf08      	it	eq
 8010a3c:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8010a40:	1af6      	subs	r6, r6, r3
 8010a42:	e758      	b.n	80108f6 <mktime+0xb2>
 8010a44:	f240 126d 	movw	r2, #365	@ 0x16d
 8010a48:	e7df      	b.n	8010a0a <mktime+0x1c6>
 8010a4a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8010a4e:	e7dc      	b.n	8010a0a <mktime+0x1c6>
 8010a50:	f240 136d 	movw	r3, #365	@ 0x16d
 8010a54:	e7f4      	b.n	8010a40 <mktime+0x1fc>
 8010a56:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8010a5a:	e7f1      	b.n	8010a40 <mktime+0x1fc>
 8010a5c:	f000 f8a2 	bl	8010ba4 <__tzcalc_limits>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	f47f af65 	bne.w	8010930 <mktime+0xec>
 8010a66:	f8dd b004 	ldr.w	fp, [sp, #4]
 8010a6a:	e791      	b.n	8010990 <mktime+0x14c>
 8010a6c:	9a02      	ldr	r2, [sp, #8]
 8010a6e:	1a12      	subs	r2, r2, r0
 8010a70:	9202      	str	r2, [sp, #8]
 8010a72:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8010a76:	eb6c 0c02 	sbc.w	ip, ip, r2
 8010a7a:	9a02      	ldr	r2, [sp, #8]
 8010a7c:	4294      	cmp	r4, r2
 8010a7e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8010a82:	dbf0      	blt.n	8010a66 <mktime+0x222>
 8010a84:	e76d      	b.n	8010962 <mktime+0x11e>
 8010a86:	9a03      	ldr	r2, [sp, #12]
 8010a88:	4294      	cmp	r4, r2
 8010a8a:	eb78 020b 	sbcs.w	r2, r8, fp
 8010a8e:	f6ff af73 	blt.w	8010978 <mktime+0x134>
 8010a92:	f1ba 0f00 	cmp.w	sl, #0
 8010a96:	f6ff af7f 	blt.w	8010998 <mktime+0x154>
 8010a9a:	f04f 0b01 	mov.w	fp, #1
 8010a9e:	9a01      	ldr	r2, [sp, #4]
 8010aa0:	ea82 020b 	eor.w	r2, r2, fp
 8010aa4:	2a01      	cmp	r2, #1
 8010aa6:	f47f af73 	bne.w	8010990 <mktime+0x14c>
 8010aaa:	f1bb 0f00 	cmp.w	fp, #0
 8010aae:	d035      	beq.n	8010b1c <mktime+0x2d8>
 8010ab0:	1a1b      	subs	r3, r3, r0
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8010ab8:	441a      	add	r2, r3
 8010aba:	191c      	adds	r4, r3, r4
 8010abc:	603a      	str	r2, [r7, #0]
 8010abe:	4638      	mov	r0, r7
 8010ac0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8010ac4:	f7ff fdea 	bl	801069c <validate_structure>
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	ebb2 020a 	subs.w	r2, r2, sl
 8010ace:	f43f af5f 	beq.w	8010990 <mktime+0x14c>
 8010ad2:	2a01      	cmp	r2, #1
 8010ad4:	dc24      	bgt.n	8010b20 <mktime+0x2dc>
 8010ad6:	1c93      	adds	r3, r2, #2
 8010ad8:	bfd8      	it	le
 8010ada:	2201      	movle	r2, #1
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	18d3      	adds	r3, r2, r3
 8010ae0:	d527      	bpl.n	8010b32 <mktime+0x2ee>
 8010ae2:	1e6b      	subs	r3, r5, #1
 8010ae4:	0798      	lsls	r0, r3, #30
 8010ae6:	d11e      	bne.n	8010b26 <mktime+0x2e2>
 8010ae8:	2164      	movs	r1, #100	@ 0x64
 8010aea:	fb93 f0f1 	sdiv	r0, r3, r1
 8010aee:	fb01 3310 	mls	r3, r1, r0, r3
 8010af2:	b9db      	cbnz	r3, 8010b2c <mktime+0x2e8>
 8010af4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010af8:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8010afc:	fb95 f1f3 	sdiv	r1, r5, r3
 8010b00:	fb03 5511 	mls	r5, r3, r1, r5
 8010b04:	2d00      	cmp	r5, #0
 8010b06:	f240 136d 	movw	r3, #365	@ 0x16d
 8010b0a:	bf18      	it	ne
 8010b0c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8010b10:	61fb      	str	r3, [r7, #28]
 8010b12:	4416      	add	r6, r2
 8010b14:	e73c      	b.n	8010990 <mktime+0x14c>
 8010b16:	f04f 0b00 	mov.w	fp, #0
 8010b1a:	e7c0      	b.n	8010a9e <mktime+0x25a>
 8010b1c:	1ac3      	subs	r3, r0, r3
 8010b1e:	e7c8      	b.n	8010ab2 <mktime+0x26e>
 8010b20:	f04f 32ff 	mov.w	r2, #4294967295
 8010b24:	e7da      	b.n	8010adc <mktime+0x298>
 8010b26:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8010b2a:	e7f1      	b.n	8010b10 <mktime+0x2cc>
 8010b2c:	f240 136d 	movw	r3, #365	@ 0x16d
 8010b30:	e7ee      	b.n	8010b10 <mktime+0x2cc>
 8010b32:	07a9      	lsls	r1, r5, #30
 8010b34:	d117      	bne.n	8010b66 <mktime+0x322>
 8010b36:	2064      	movs	r0, #100	@ 0x64
 8010b38:	fb95 f1f0 	sdiv	r1, r5, r0
 8010b3c:	fb00 5111 	mls	r1, r0, r1, r5
 8010b40:	b9a1      	cbnz	r1, 8010b6c <mktime+0x328>
 8010b42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8010b46:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8010b4a:	fb95 f0f1 	sdiv	r0, r5, r1
 8010b4e:	fb01 5510 	mls	r5, r1, r0, r5
 8010b52:	2d00      	cmp	r5, #0
 8010b54:	f240 116d 	movw	r1, #365	@ 0x16d
 8010b58:	bf08      	it	eq
 8010b5a:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8010b5e:	428b      	cmp	r3, r1
 8010b60:	bfa8      	it	ge
 8010b62:	1a5b      	subge	r3, r3, r1
 8010b64:	e7d4      	b.n	8010b10 <mktime+0x2cc>
 8010b66:	f240 116d 	movw	r1, #365	@ 0x16d
 8010b6a:	e7f8      	b.n	8010b5e <mktime+0x31a>
 8010b6c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8010b70:	e7f5      	b.n	8010b5e <mktime+0x31a>
 8010b72:	3607      	adds	r6, #7
 8010b74:	e722      	b.n	80109bc <mktime+0x178>
 8010b76:	bf00      	nop
 8010b78:	08015358 	.word	0x08015358
 8010b7c:	00015180 	.word	0x00015180
 8010b80:	2000a75c 	.word	0x2000a75c
 8010b84:	f04f 34ff 	mov.w	r4, #4294967295
 8010b88:	46a0      	mov	r8, r4
 8010b8a:	e71a      	b.n	80109c2 <mktime+0x17e>
 8010b8c:	f1ba 0f00 	cmp.w	sl, #0
 8010b90:	dac1      	bge.n	8010b16 <mktime+0x2d2>
 8010b92:	f04f 0b00 	mov.w	fp, #0
 8010b96:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8010b9a:	191c      	adds	r4, r3, r4
 8010b9c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8010ba0:	e701      	b.n	80109a6 <mktime+0x162>
 8010ba2:	bf00      	nop

08010ba4 <__tzcalc_limits>:
 8010ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ba8:	4604      	mov	r4, r0
 8010baa:	f002 f991 	bl	8012ed0 <__gettzinfo>
 8010bae:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8010bb2:	429c      	cmp	r4, r3
 8010bb4:	f340 8099 	ble.w	8010cea <__tzcalc_limits+0x146>
 8010bb8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8010bbc:	19e5      	adds	r5, r4, r7
 8010bbe:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8010bc2:	f240 126d 	movw	r2, #365	@ 0x16d
 8010bc6:	10ad      	asrs	r5, r5, #2
 8010bc8:	fb02 5503 	mla	r5, r2, r3, r5
 8010bcc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8010bd0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8010bd4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8010bd8:	4f45      	ldr	r7, [pc, #276]	@ (8010cf0 <__tzcalc_limits+0x14c>)
 8010bda:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bde:	441d      	add	r5, r3
 8010be0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8010be4:	eb04 030c 	add.w	r3, r4, ip
 8010be8:	6044      	str	r4, [r0, #4]
 8010bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bee:	4601      	mov	r1, r0
 8010bf0:	441d      	add	r5, r3
 8010bf2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8010bf6:	7a0b      	ldrb	r3, [r1, #8]
 8010bf8:	694a      	ldr	r2, [r1, #20]
 8010bfa:	2b4a      	cmp	r3, #74	@ 0x4a
 8010bfc:	d133      	bne.n	8010c66 <__tzcalc_limits+0xc2>
 8010bfe:	07a6      	lsls	r6, r4, #30
 8010c00:	eb05 0302 	add.w	r3, r5, r2
 8010c04:	d106      	bne.n	8010c14 <__tzcalc_limits+0x70>
 8010c06:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8010c0a:	fb94 f6fe 	sdiv	r6, r4, lr
 8010c0e:	fb0e 4616 	mls	r6, lr, r6, r4
 8010c12:	b936      	cbnz	r6, 8010c22 <__tzcalc_limits+0x7e>
 8010c14:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8010c18:	fb94 f6fe 	sdiv	r6, r4, lr
 8010c1c:	fb0e 4616 	mls	r6, lr, r6, r4
 8010c20:	b9fe      	cbnz	r6, 8010c62 <__tzcalc_limits+0xbe>
 8010c22:	2a3b      	cmp	r2, #59	@ 0x3b
 8010c24:	bfd4      	ite	le
 8010c26:	2200      	movle	r2, #0
 8010c28:	2201      	movgt	r2, #1
 8010c2a:	4413      	add	r3, r2
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	698a      	ldr	r2, [r1, #24]
 8010c30:	17d6      	asrs	r6, r2, #31
 8010c32:	fbc3 2607 	smlal	r2, r6, r3, r7
 8010c36:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8010c38:	18d2      	adds	r2, r2, r3
 8010c3a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8010c3e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8010c42:	3128      	adds	r1, #40	@ 0x28
 8010c44:	458c      	cmp	ip, r1
 8010c46:	d1d6      	bne.n	8010bf6 <__tzcalc_limits+0x52>
 8010c48:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8010c4c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8010c50:	428c      	cmp	r4, r1
 8010c52:	4193      	sbcs	r3, r2
 8010c54:	bfb4      	ite	lt
 8010c56:	2301      	movlt	r3, #1
 8010c58:	2300      	movge	r3, #0
 8010c5a:	6003      	str	r3, [r0, #0]
 8010c5c:	2001      	movs	r0, #1
 8010c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c62:	2200      	movs	r2, #0
 8010c64:	e7e1      	b.n	8010c2a <__tzcalc_limits+0x86>
 8010c66:	2b44      	cmp	r3, #68	@ 0x44
 8010c68:	d101      	bne.n	8010c6e <__tzcalc_limits+0xca>
 8010c6a:	18ab      	adds	r3, r5, r2
 8010c6c:	e7df      	b.n	8010c2e <__tzcalc_limits+0x8a>
 8010c6e:	07a3      	lsls	r3, r4, #30
 8010c70:	d105      	bne.n	8010c7e <__tzcalc_limits+0xda>
 8010c72:	2664      	movs	r6, #100	@ 0x64
 8010c74:	fb94 f3f6 	sdiv	r3, r4, r6
 8010c78:	fb06 4313 	mls	r3, r6, r3, r4
 8010c7c:	bb7b      	cbnz	r3, 8010cde <__tzcalc_limits+0x13a>
 8010c7e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010c82:	fb94 f6f3 	sdiv	r6, r4, r3
 8010c86:	fb03 4616 	mls	r6, r3, r6, r4
 8010c8a:	fab6 f686 	clz	r6, r6
 8010c8e:	0976      	lsrs	r6, r6, #5
 8010c90:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8010cf4 <__tzcalc_limits+0x150>
 8010c94:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8010c98:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8010c9c:	462b      	mov	r3, r5
 8010c9e:	f04f 0800 	mov.w	r8, #0
 8010ca2:	fb0a e606 	mla	r6, sl, r6, lr
 8010ca6:	f108 0801 	add.w	r8, r8, #1
 8010caa:	45c1      	cmp	r9, r8
 8010cac:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8010cb0:	dc17      	bgt.n	8010ce2 <__tzcalc_limits+0x13e>
 8010cb2:	f103 0804 	add.w	r8, r3, #4
 8010cb6:	2607      	movs	r6, #7
 8010cb8:	fb98 f6f6 	sdiv	r6, r8, r6
 8010cbc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8010cc0:	eba8 0606 	sub.w	r6, r8, r6
 8010cc4:	1b92      	subs	r2, r2, r6
 8010cc6:	690e      	ldr	r6, [r1, #16]
 8010cc8:	f106 36ff 	add.w	r6, r6, #4294967295
 8010ccc:	bf48      	it	mi
 8010cce:	3207      	addmi	r2, #7
 8010cd0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8010cd4:	4432      	add	r2, r6
 8010cd6:	4572      	cmp	r2, lr
 8010cd8:	da05      	bge.n	8010ce6 <__tzcalc_limits+0x142>
 8010cda:	4413      	add	r3, r2
 8010cdc:	e7a7      	b.n	8010c2e <__tzcalc_limits+0x8a>
 8010cde:	2601      	movs	r6, #1
 8010ce0:	e7d6      	b.n	8010c90 <__tzcalc_limits+0xec>
 8010ce2:	4473      	add	r3, lr
 8010ce4:	e7df      	b.n	8010ca6 <__tzcalc_limits+0x102>
 8010ce6:	3a07      	subs	r2, #7
 8010ce8:	e7f5      	b.n	8010cd6 <__tzcalc_limits+0x132>
 8010cea:	2000      	movs	r0, #0
 8010cec:	e7b7      	b.n	8010c5e <__tzcalc_limits+0xba>
 8010cee:	bf00      	nop
 8010cf0:	00015180 	.word	0x00015180
 8010cf4:	080153b4 	.word	0x080153b4

08010cf8 <__tz_lock>:
 8010cf8:	4801      	ldr	r0, [pc, #4]	@ (8010d00 <__tz_lock+0x8>)
 8010cfa:	f000 baa6 	b.w	801124a <__retarget_lock_acquire>
 8010cfe:	bf00      	nop
 8010d00:	2000a764 	.word	0x2000a764

08010d04 <__tz_unlock>:
 8010d04:	4801      	ldr	r0, [pc, #4]	@ (8010d0c <__tz_unlock+0x8>)
 8010d06:	f000 baa2 	b.w	801124e <__retarget_lock_release>
 8010d0a:	bf00      	nop
 8010d0c:	2000a764 	.word	0x2000a764

08010d10 <_tzset_unlocked>:
 8010d10:	4b01      	ldr	r3, [pc, #4]	@ (8010d18 <_tzset_unlocked+0x8>)
 8010d12:	6818      	ldr	r0, [r3, #0]
 8010d14:	f000 b802 	b.w	8010d1c <_tzset_unlocked_r>
 8010d18:	20000030 	.word	0x20000030

08010d1c <_tzset_unlocked_r>:
 8010d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	b08d      	sub	sp, #52	@ 0x34
 8010d22:	4607      	mov	r7, r0
 8010d24:	f002 f8d4 	bl	8012ed0 <__gettzinfo>
 8010d28:	49bc      	ldr	r1, [pc, #752]	@ (801101c <_tzset_unlocked_r+0x300>)
 8010d2a:	4dbd      	ldr	r5, [pc, #756]	@ (8011020 <_tzset_unlocked_r+0x304>)
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	4638      	mov	r0, r7
 8010d30:	f001 f9a0 	bl	8012074 <_getenv_r>
 8010d34:	4606      	mov	r6, r0
 8010d36:	bb10      	cbnz	r0, 8010d7e <_tzset_unlocked_r+0x62>
 8010d38:	4bba      	ldr	r3, [pc, #744]	@ (8011024 <_tzset_unlocked_r+0x308>)
 8010d3a:	4abb      	ldr	r2, [pc, #748]	@ (8011028 <_tzset_unlocked_r+0x30c>)
 8010d3c:	6018      	str	r0, [r3, #0]
 8010d3e:	4bbb      	ldr	r3, [pc, #748]	@ (801102c <_tzset_unlocked_r+0x310>)
 8010d40:	62a0      	str	r0, [r4, #40]	@ 0x28
 8010d42:	6018      	str	r0, [r3, #0]
 8010d44:	4bba      	ldr	r3, [pc, #744]	@ (8011030 <_tzset_unlocked_r+0x314>)
 8010d46:	6520      	str	r0, [r4, #80]	@ 0x50
 8010d48:	e9c3 2200 	strd	r2, r2, [r3]
 8010d4c:	214a      	movs	r1, #74	@ 0x4a
 8010d4e:	2200      	movs	r2, #0
 8010d50:	2300      	movs	r3, #0
 8010d52:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8010d56:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8010d5a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8010d5e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8010d62:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8010d66:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8010d6a:	6828      	ldr	r0, [r5, #0]
 8010d6c:	7221      	strb	r1, [r4, #8]
 8010d6e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8010d72:	f001 f98f 	bl	8012094 <free>
 8010d76:	602e      	str	r6, [r5, #0]
 8010d78:	b00d      	add	sp, #52	@ 0x34
 8010d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7e:	6829      	ldr	r1, [r5, #0]
 8010d80:	2900      	cmp	r1, #0
 8010d82:	f040 808e 	bne.w	8010ea2 <_tzset_unlocked_r+0x186>
 8010d86:	6828      	ldr	r0, [r5, #0]
 8010d88:	f001 f984 	bl	8012094 <free>
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	f7ef fa57 	bl	8000240 <strlen>
 8010d92:	1c41      	adds	r1, r0, #1
 8010d94:	4638      	mov	r0, r7
 8010d96:	f001 f9a7 	bl	80120e8 <_malloc_r>
 8010d9a:	6028      	str	r0, [r5, #0]
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	f040 8086 	bne.w	8010eae <_tzset_unlocked_r+0x192>
 8010da2:	4aa2      	ldr	r2, [pc, #648]	@ (801102c <_tzset_unlocked_r+0x310>)
 8010da4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8011030 <_tzset_unlocked_r+0x314>
 8010da8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8011024 <_tzset_unlocked_r+0x308>
 8010dac:	2300      	movs	r3, #0
 8010dae:	6013      	str	r3, [r2, #0]
 8010db0:	4aa0      	ldr	r2, [pc, #640]	@ (8011034 <_tzset_unlocked_r+0x318>)
 8010db2:	f8ca 3000 	str.w	r3, [sl]
 8010db6:	2000      	movs	r0, #0
 8010db8:	2100      	movs	r1, #0
 8010dba:	e9c8 2200 	strd	r2, r2, [r8]
 8010dbe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8010dc2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8010dc6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8010dca:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8010dce:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8010dd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8010dd6:	224a      	movs	r2, #74	@ 0x4a
 8010dd8:	7222      	strb	r2, [r4, #8]
 8010dda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010ddc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8010de0:	6523      	str	r3, [r4, #80]	@ 0x50
 8010de2:	7833      	ldrb	r3, [r6, #0]
 8010de4:	2b3a      	cmp	r3, #58	@ 0x3a
 8010de6:	bf08      	it	eq
 8010de8:	3601      	addeq	r6, #1
 8010dea:	7833      	ldrb	r3, [r6, #0]
 8010dec:	2b3c      	cmp	r3, #60	@ 0x3c
 8010dee:	d162      	bne.n	8010eb6 <_tzset_unlocked_r+0x19a>
 8010df0:	1c75      	adds	r5, r6, #1
 8010df2:	4a91      	ldr	r2, [pc, #580]	@ (8011038 <_tzset_unlocked_r+0x31c>)
 8010df4:	4991      	ldr	r1, [pc, #580]	@ (801103c <_tzset_unlocked_r+0x320>)
 8010df6:	ab0a      	add	r3, sp, #40	@ 0x28
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f002 f813 	bl	8012e24 <siscanf>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	ddba      	ble.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e04:	1eda      	subs	r2, r3, #3
 8010e06:	2a07      	cmp	r2, #7
 8010e08:	d8b6      	bhi.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010e0a:	5ceb      	ldrb	r3, [r5, r3]
 8010e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e0e:	d1b3      	bne.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010e10:	3602      	adds	r6, #2
 8010e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e14:	18f5      	adds	r5, r6, r3
 8010e16:	5cf3      	ldrb	r3, [r6, r3]
 8010e18:	2b2d      	cmp	r3, #45	@ 0x2d
 8010e1a:	d15a      	bne.n	8010ed2 <_tzset_unlocked_r+0x1b6>
 8010e1c:	3501      	adds	r5, #1
 8010e1e:	f04f 39ff 	mov.w	r9, #4294967295
 8010e22:	2300      	movs	r3, #0
 8010e24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010e28:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010e2c:	af08      	add	r7, sp, #32
 8010e2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010e30:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8010e34:	9303      	str	r3, [sp, #12]
 8010e36:	f10d 031e 	add.w	r3, sp, #30
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	4980      	ldr	r1, [pc, #512]	@ (8011040 <_tzset_unlocked_r+0x324>)
 8010e3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010e40:	aa07      	add	r2, sp, #28
 8010e42:	4628      	mov	r0, r5
 8010e44:	f001 ffee 	bl	8012e24 <siscanf>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	dd95      	ble.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010e4c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010e50:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8010e54:	223c      	movs	r2, #60	@ 0x3c
 8010e56:	fb02 6603 	mla	r6, r2, r3, r6
 8010e5a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010e5e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8010e62:	fb02 6603 	mla	r6, r2, r3, r6
 8010e66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e68:	fb09 f606 	mul.w	r6, r9, r6
 8010e6c:	eb05 0903 	add.w	r9, r5, r3
 8010e70:	5ceb      	ldrb	r3, [r5, r3]
 8010e72:	2b3c      	cmp	r3, #60	@ 0x3c
 8010e74:	f040 80ee 	bne.w	8011054 <_tzset_unlocked_r+0x338>
 8010e78:	f109 0501 	add.w	r5, r9, #1
 8010e7c:	4a71      	ldr	r2, [pc, #452]	@ (8011044 <_tzset_unlocked_r+0x328>)
 8010e7e:	496f      	ldr	r1, [pc, #444]	@ (801103c <_tzset_unlocked_r+0x320>)
 8010e80:	ab0a      	add	r3, sp, #40	@ 0x28
 8010e82:	4628      	mov	r0, r5
 8010e84:	f001 ffce 	bl	8012e24 <siscanf>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	dc28      	bgt.n	8010ede <_tzset_unlocked_r+0x1c2>
 8010e8c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e92:	d124      	bne.n	8010ede <_tzset_unlocked_r+0x1c2>
 8010e94:	4b68      	ldr	r3, [pc, #416]	@ (8011038 <_tzset_unlocked_r+0x31c>)
 8010e96:	62a6      	str	r6, [r4, #40]	@ 0x28
 8010e98:	e9c8 3300 	strd	r3, r3, [r8]
 8010e9c:	f8ca 6000 	str.w	r6, [sl]
 8010ea0:	e76a      	b.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010ea2:	f7ef f96d 	bl	8000180 <strcmp>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f47f af6d 	bne.w	8010d86 <_tzset_unlocked_r+0x6a>
 8010eac:	e764      	b.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010eae:	4631      	mov	r1, r6
 8010eb0:	f000 f9cf 	bl	8011252 <strcpy>
 8010eb4:	e775      	b.n	8010da2 <_tzset_unlocked_r+0x86>
 8010eb6:	4a60      	ldr	r2, [pc, #384]	@ (8011038 <_tzset_unlocked_r+0x31c>)
 8010eb8:	4963      	ldr	r1, [pc, #396]	@ (8011048 <_tzset_unlocked_r+0x32c>)
 8010eba:	ab0a      	add	r3, sp, #40	@ 0x28
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f001 ffb1 	bl	8012e24 <siscanf>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f77f af58 	ble.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010eca:	3b03      	subs	r3, #3
 8010ecc:	2b07      	cmp	r3, #7
 8010ece:	d9a0      	bls.n	8010e12 <_tzset_unlocked_r+0xf6>
 8010ed0:	e752      	b.n	8010d78 <_tzset_unlocked_r+0x5c>
 8010ed2:	2b2b      	cmp	r3, #43	@ 0x2b
 8010ed4:	bf08      	it	eq
 8010ed6:	3501      	addeq	r5, #1
 8010ed8:	f04f 0901 	mov.w	r9, #1
 8010edc:	e7a1      	b.n	8010e22 <_tzset_unlocked_r+0x106>
 8010ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ee0:	1eda      	subs	r2, r3, #3
 8010ee2:	2a07      	cmp	r2, #7
 8010ee4:	f63f af48 	bhi.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010ee8:	5ceb      	ldrb	r3, [r5, r3]
 8010eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8010eec:	f47f af44 	bne.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010ef0:	f109 0902 	add.w	r9, r9, #2
 8010ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ef6:	eb09 0503 	add.w	r5, r9, r3
 8010efa:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010efe:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f00:	f040 80b7 	bne.w	8011072 <_tzset_unlocked_r+0x356>
 8010f04:	3501      	adds	r5, #1
 8010f06:	f04f 39ff 	mov.w	r9, #4294967295
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010f10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010f14:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010f1c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8010f20:	9301      	str	r3, [sp, #4]
 8010f22:	f10d 031e 	add.w	r3, sp, #30
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	4945      	ldr	r1, [pc, #276]	@ (8011040 <_tzset_unlocked_r+0x324>)
 8010f2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010f2c:	aa07      	add	r2, sp, #28
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f001 ff78 	bl	8012e24 <siscanf>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f300 80a2 	bgt.w	801107e <_tzset_unlocked_r+0x362>
 8010f3a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8010f3e:	9304      	str	r3, [sp, #16]
 8010f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f42:	4627      	mov	r7, r4
 8010f44:	441d      	add	r5, r3
 8010f46:	f04f 0b00 	mov.w	fp, #0
 8010f4a:	782b      	ldrb	r3, [r5, #0]
 8010f4c:	2b2c      	cmp	r3, #44	@ 0x2c
 8010f4e:	bf08      	it	eq
 8010f50:	3501      	addeq	r5, #1
 8010f52:	f895 9000 	ldrb.w	r9, [r5]
 8010f56:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8010f5a:	f040 80a3 	bne.w	80110a4 <_tzset_unlocked_r+0x388>
 8010f5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010f60:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8010f64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010f68:	aa09      	add	r2, sp, #36	@ 0x24
 8010f6a:	9200      	str	r2, [sp, #0]
 8010f6c:	4937      	ldr	r1, [pc, #220]	@ (801104c <_tzset_unlocked_r+0x330>)
 8010f6e:	9303      	str	r3, [sp, #12]
 8010f70:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8010f74:	4628      	mov	r0, r5
 8010f76:	f001 ff55 	bl	8012e24 <siscanf>
 8010f7a:	2803      	cmp	r0, #3
 8010f7c:	f47f aefc 	bne.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010f80:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8010f84:	1e4b      	subs	r3, r1, #1
 8010f86:	2b0b      	cmp	r3, #11
 8010f88:	f63f aef6 	bhi.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010f8c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8010f90:	1e53      	subs	r3, r2, #1
 8010f92:	2b04      	cmp	r3, #4
 8010f94:	f63f aef0 	bhi.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010f98:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8010f9c:	2b06      	cmp	r3, #6
 8010f9e:	f63f aeeb 	bhi.w	8010d78 <_tzset_unlocked_r+0x5c>
 8010fa2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8010fa6:	f887 9008 	strb.w	r9, [r7, #8]
 8010faa:	617b      	str	r3, [r7, #20]
 8010fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fae:	eb05 0903 	add.w	r9, r5, r3
 8010fb2:	2500      	movs	r5, #0
 8010fb4:	f04f 0302 	mov.w	r3, #2
 8010fb8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010fbc:	f8ad 501e 	strh.w	r5, [sp, #30]
 8010fc0:	f8ad 5020 	strh.w	r5, [sp, #32]
 8010fc4:	950a      	str	r5, [sp, #40]	@ 0x28
 8010fc6:	f899 3000 	ldrb.w	r3, [r9]
 8010fca:	2b2f      	cmp	r3, #47	@ 0x2f
 8010fcc:	f040 8096 	bne.w	80110fc <_tzset_unlocked_r+0x3e0>
 8010fd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8010fd2:	aa08      	add	r2, sp, #32
 8010fd4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010fd8:	f10d 021e 	add.w	r2, sp, #30
 8010fdc:	9200      	str	r2, [sp, #0]
 8010fde:	491c      	ldr	r1, [pc, #112]	@ (8011050 <_tzset_unlocked_r+0x334>)
 8010fe0:	9303      	str	r3, [sp, #12]
 8010fe2:	aa07      	add	r2, sp, #28
 8010fe4:	4648      	mov	r0, r9
 8010fe6:	f001 ff1d 	bl	8012e24 <siscanf>
 8010fea:	42a8      	cmp	r0, r5
 8010fec:	f300 8086 	bgt.w	80110fc <_tzset_unlocked_r+0x3e0>
 8010ff0:	214a      	movs	r1, #74	@ 0x4a
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8010ffa:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010ffe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8011002:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8011006:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801100a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801100e:	7221      	strb	r1, [r4, #8]
 8011010:	62a5      	str	r5, [r4, #40]	@ 0x28
 8011012:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8011016:	6525      	str	r5, [r4, #80]	@ 0x50
 8011018:	e6ae      	b.n	8010d78 <_tzset_unlocked_r+0x5c>
 801101a:	bf00      	nop
 801101c:	08015418 	.word	0x08015418
 8011020:	2000a73c 	.word	0x2000a73c
 8011024:	2000a758 	.word	0x2000a758
 8011028:	0801541b 	.word	0x0801541b
 801102c:	2000a75c 	.word	0x2000a75c
 8011030:	20000028 	.word	0x20000028
 8011034:	080154a1 	.word	0x080154a1
 8011038:	2000a74c 	.word	0x2000a74c
 801103c:	0801541f 	.word	0x0801541f
 8011040:	08015454 	.word	0x08015454
 8011044:	2000a740 	.word	0x2000a740
 8011048:	08015432 	.word	0x08015432
 801104c:	08015440 	.word	0x08015440
 8011050:	08015453 	.word	0x08015453
 8011054:	4a3e      	ldr	r2, [pc, #248]	@ (8011150 <_tzset_unlocked_r+0x434>)
 8011056:	493f      	ldr	r1, [pc, #252]	@ (8011154 <_tzset_unlocked_r+0x438>)
 8011058:	ab0a      	add	r3, sp, #40	@ 0x28
 801105a:	4648      	mov	r0, r9
 801105c:	f001 fee2 	bl	8012e24 <siscanf>
 8011060:	2800      	cmp	r0, #0
 8011062:	f77f af17 	ble.w	8010e94 <_tzset_unlocked_r+0x178>
 8011066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011068:	3b03      	subs	r3, #3
 801106a:	2b07      	cmp	r3, #7
 801106c:	f67f af42 	bls.w	8010ef4 <_tzset_unlocked_r+0x1d8>
 8011070:	e682      	b.n	8010d78 <_tzset_unlocked_r+0x5c>
 8011072:	2b2b      	cmp	r3, #43	@ 0x2b
 8011074:	bf08      	it	eq
 8011076:	3501      	addeq	r5, #1
 8011078:	f04f 0901 	mov.w	r9, #1
 801107c:	e745      	b.n	8010f0a <_tzset_unlocked_r+0x1ee>
 801107e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8011082:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011086:	213c      	movs	r1, #60	@ 0x3c
 8011088:	fb01 3302 	mla	r3, r1, r2, r3
 801108c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8011090:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8011094:	fb01 3302 	mla	r3, r1, r2, r3
 8011098:	fb09 f303 	mul.w	r3, r9, r3
 801109c:	e74f      	b.n	8010f3e <_tzset_unlocked_r+0x222>
 801109e:	f04f 0b01 	mov.w	fp, #1
 80110a2:	e752      	b.n	8010f4a <_tzset_unlocked_r+0x22e>
 80110a4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 80110a8:	bf06      	itte	eq
 80110aa:	3501      	addeq	r5, #1
 80110ac:	464b      	moveq	r3, r9
 80110ae:	2344      	movne	r3, #68	@ 0x44
 80110b0:	220a      	movs	r2, #10
 80110b2:	a90b      	add	r1, sp, #44	@ 0x2c
 80110b4:	4628      	mov	r0, r5
 80110b6:	9305      	str	r3, [sp, #20]
 80110b8:	f001 fc94 	bl	80129e4 <strtoul>
 80110bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80110c0:	9b05      	ldr	r3, [sp, #20]
 80110c2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80110c6:	45a9      	cmp	r9, r5
 80110c8:	d114      	bne.n	80110f4 <_tzset_unlocked_r+0x3d8>
 80110ca:	234d      	movs	r3, #77	@ 0x4d
 80110cc:	f1bb 0f00 	cmp.w	fp, #0
 80110d0:	d107      	bne.n	80110e2 <_tzset_unlocked_r+0x3c6>
 80110d2:	7223      	strb	r3, [r4, #8]
 80110d4:	2103      	movs	r1, #3
 80110d6:	2302      	movs	r3, #2
 80110d8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80110dc:	f8c4 b014 	str.w	fp, [r4, #20]
 80110e0:	e767      	b.n	8010fb2 <_tzset_unlocked_r+0x296>
 80110e2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80110e6:	220b      	movs	r2, #11
 80110e8:	2301      	movs	r3, #1
 80110ea:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80110ee:	2300      	movs	r3, #0
 80110f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80110f2:	e75e      	b.n	8010fb2 <_tzset_unlocked_r+0x296>
 80110f4:	b280      	uxth	r0, r0
 80110f6:	723b      	strb	r3, [r7, #8]
 80110f8:	6178      	str	r0, [r7, #20]
 80110fa:	e75a      	b.n	8010fb2 <_tzset_unlocked_r+0x296>
 80110fc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8011100:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011104:	213c      	movs	r1, #60	@ 0x3c
 8011106:	fb01 3302 	mla	r3, r1, r2, r3
 801110a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801110e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8011112:	fb01 3302 	mla	r3, r1, r2, r3
 8011116:	61bb      	str	r3, [r7, #24]
 8011118:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801111a:	3728      	adds	r7, #40	@ 0x28
 801111c:	444d      	add	r5, r9
 801111e:	f1bb 0f00 	cmp.w	fp, #0
 8011122:	d0bc      	beq.n	801109e <_tzset_unlocked_r+0x382>
 8011124:	9b04      	ldr	r3, [sp, #16]
 8011126:	6523      	str	r3, [r4, #80]	@ 0x50
 8011128:	4b0b      	ldr	r3, [pc, #44]	@ (8011158 <_tzset_unlocked_r+0x43c>)
 801112a:	f8c8 3000 	str.w	r3, [r8]
 801112e:	6860      	ldr	r0, [r4, #4]
 8011130:	4b07      	ldr	r3, [pc, #28]	@ (8011150 <_tzset_unlocked_r+0x434>)
 8011132:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011134:	f8c8 3004 	str.w	r3, [r8, #4]
 8011138:	f7ff fd34 	bl	8010ba4 <__tzcalc_limits>
 801113c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801113e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011140:	f8ca 2000 	str.w	r2, [sl]
 8011144:	1a9b      	subs	r3, r3, r2
 8011146:	4a05      	ldr	r2, [pc, #20]	@ (801115c <_tzset_unlocked_r+0x440>)
 8011148:	bf18      	it	ne
 801114a:	2301      	movne	r3, #1
 801114c:	6013      	str	r3, [r2, #0]
 801114e:	e613      	b.n	8010d78 <_tzset_unlocked_r+0x5c>
 8011150:	2000a740 	.word	0x2000a740
 8011154:	08015432 	.word	0x08015432
 8011158:	2000a74c 	.word	0x2000a74c
 801115c:	2000a75c 	.word	0x2000a75c

08011160 <_localeconv_r>:
 8011160:	4800      	ldr	r0, [pc, #0]	@ (8011164 <_localeconv_r+0x4>)
 8011162:	4770      	bx	lr
 8011164:	200001c8 	.word	0x200001c8

08011168 <_close_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4d06      	ldr	r5, [pc, #24]	@ (8011184 <_close_r+0x1c>)
 801116c:	2300      	movs	r3, #0
 801116e:	4604      	mov	r4, r0
 8011170:	4608      	mov	r0, r1
 8011172:	602b      	str	r3, [r5, #0]
 8011174:	f7f7 fbb6 	bl	80088e4 <_close>
 8011178:	1c43      	adds	r3, r0, #1
 801117a:	d102      	bne.n	8011182 <_close_r+0x1a>
 801117c:	682b      	ldr	r3, [r5, #0]
 801117e:	b103      	cbz	r3, 8011182 <_close_r+0x1a>
 8011180:	6023      	str	r3, [r4, #0]
 8011182:	bd38      	pop	{r3, r4, r5, pc}
 8011184:	2000a760 	.word	0x2000a760

08011188 <_lseek_r>:
 8011188:	b538      	push	{r3, r4, r5, lr}
 801118a:	4d07      	ldr	r5, [pc, #28]	@ (80111a8 <_lseek_r+0x20>)
 801118c:	4604      	mov	r4, r0
 801118e:	4608      	mov	r0, r1
 8011190:	4611      	mov	r1, r2
 8011192:	2200      	movs	r2, #0
 8011194:	602a      	str	r2, [r5, #0]
 8011196:	461a      	mov	r2, r3
 8011198:	f7f7 fbcb 	bl	8008932 <_lseek>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d102      	bne.n	80111a6 <_lseek_r+0x1e>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	b103      	cbz	r3, 80111a6 <_lseek_r+0x1e>
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	2000a760 	.word	0x2000a760

080111ac <_read_r>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	4d07      	ldr	r5, [pc, #28]	@ (80111cc <_read_r+0x20>)
 80111b0:	4604      	mov	r4, r0
 80111b2:	4608      	mov	r0, r1
 80111b4:	4611      	mov	r1, r2
 80111b6:	2200      	movs	r2, #0
 80111b8:	602a      	str	r2, [r5, #0]
 80111ba:	461a      	mov	r2, r3
 80111bc:	f7f7 fb59 	bl	8008872 <_read>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d102      	bne.n	80111ca <_read_r+0x1e>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	b103      	cbz	r3, 80111ca <_read_r+0x1e>
 80111c8:	6023      	str	r3, [r4, #0]
 80111ca:	bd38      	pop	{r3, r4, r5, pc}
 80111cc:	2000a760 	.word	0x2000a760

080111d0 <_write_r>:
 80111d0:	b538      	push	{r3, r4, r5, lr}
 80111d2:	4d07      	ldr	r5, [pc, #28]	@ (80111f0 <_write_r+0x20>)
 80111d4:	4604      	mov	r4, r0
 80111d6:	4608      	mov	r0, r1
 80111d8:	4611      	mov	r1, r2
 80111da:	2200      	movs	r2, #0
 80111dc:	602a      	str	r2, [r5, #0]
 80111de:	461a      	mov	r2, r3
 80111e0:	f7f7 fb64 	bl	80088ac <_write>
 80111e4:	1c43      	adds	r3, r0, #1
 80111e6:	d102      	bne.n	80111ee <_write_r+0x1e>
 80111e8:	682b      	ldr	r3, [r5, #0]
 80111ea:	b103      	cbz	r3, 80111ee <_write_r+0x1e>
 80111ec:	6023      	str	r3, [r4, #0]
 80111ee:	bd38      	pop	{r3, r4, r5, pc}
 80111f0:	2000a760 	.word	0x2000a760

080111f4 <__errno>:
 80111f4:	4b01      	ldr	r3, [pc, #4]	@ (80111fc <__errno+0x8>)
 80111f6:	6818      	ldr	r0, [r3, #0]
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	20000030 	.word	0x20000030

08011200 <__libc_init_array>:
 8011200:	b570      	push	{r4, r5, r6, lr}
 8011202:	4d0d      	ldr	r5, [pc, #52]	@ (8011238 <__libc_init_array+0x38>)
 8011204:	4c0d      	ldr	r4, [pc, #52]	@ (801123c <__libc_init_array+0x3c>)
 8011206:	1b64      	subs	r4, r4, r5
 8011208:	10a4      	asrs	r4, r4, #2
 801120a:	2600      	movs	r6, #0
 801120c:	42a6      	cmp	r6, r4
 801120e:	d109      	bne.n	8011224 <__libc_init_array+0x24>
 8011210:	4d0b      	ldr	r5, [pc, #44]	@ (8011240 <__libc_init_array+0x40>)
 8011212:	4c0c      	ldr	r4, [pc, #48]	@ (8011244 <__libc_init_array+0x44>)
 8011214:	f002 fe3c 	bl	8013e90 <_init>
 8011218:	1b64      	subs	r4, r4, r5
 801121a:	10a4      	asrs	r4, r4, #2
 801121c:	2600      	movs	r6, #0
 801121e:	42a6      	cmp	r6, r4
 8011220:	d105      	bne.n	801122e <__libc_init_array+0x2e>
 8011222:	bd70      	pop	{r4, r5, r6, pc}
 8011224:	f855 3b04 	ldr.w	r3, [r5], #4
 8011228:	4798      	blx	r3
 801122a:	3601      	adds	r6, #1
 801122c:	e7ee      	b.n	801120c <__libc_init_array+0xc>
 801122e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011232:	4798      	blx	r3
 8011234:	3601      	adds	r6, #1
 8011236:	e7f2      	b.n	801121e <__libc_init_array+0x1e>
 8011238:	080157b0 	.word	0x080157b0
 801123c:	080157b0 	.word	0x080157b0
 8011240:	080157b0 	.word	0x080157b0
 8011244:	080157b4 	.word	0x080157b4

08011248 <__retarget_lock_init_recursive>:
 8011248:	4770      	bx	lr

0801124a <__retarget_lock_acquire>:
 801124a:	4770      	bx	lr

0801124c <__retarget_lock_acquire_recursive>:
 801124c:	4770      	bx	lr

0801124e <__retarget_lock_release>:
 801124e:	4770      	bx	lr

08011250 <__retarget_lock_release_recursive>:
 8011250:	4770      	bx	lr

08011252 <strcpy>:
 8011252:	4603      	mov	r3, r0
 8011254:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011258:	f803 2b01 	strb.w	r2, [r3], #1
 801125c:	2a00      	cmp	r2, #0
 801125e:	d1f9      	bne.n	8011254 <strcpy+0x2>
 8011260:	4770      	bx	lr

08011262 <memcpy>:
 8011262:	440a      	add	r2, r1
 8011264:	4291      	cmp	r1, r2
 8011266:	f100 33ff 	add.w	r3, r0, #4294967295
 801126a:	d100      	bne.n	801126e <memcpy+0xc>
 801126c:	4770      	bx	lr
 801126e:	b510      	push	{r4, lr}
 8011270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011278:	4291      	cmp	r1, r2
 801127a:	d1f9      	bne.n	8011270 <memcpy+0xe>
 801127c:	bd10      	pop	{r4, pc}
	...

08011280 <__assert_func>:
 8011280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011282:	4614      	mov	r4, r2
 8011284:	461a      	mov	r2, r3
 8011286:	4b09      	ldr	r3, [pc, #36]	@ (80112ac <__assert_func+0x2c>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4605      	mov	r5, r0
 801128c:	68d8      	ldr	r0, [r3, #12]
 801128e:	b954      	cbnz	r4, 80112a6 <__assert_func+0x26>
 8011290:	4b07      	ldr	r3, [pc, #28]	@ (80112b0 <__assert_func+0x30>)
 8011292:	461c      	mov	r4, r3
 8011294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011298:	9100      	str	r1, [sp, #0]
 801129a:	462b      	mov	r3, r5
 801129c:	4905      	ldr	r1, [pc, #20]	@ (80112b4 <__assert_func+0x34>)
 801129e:	f001 fdaf 	bl	8012e00 <fiprintf>
 80112a2:	f001 fecf 	bl	8013044 <abort>
 80112a6:	4b04      	ldr	r3, [pc, #16]	@ (80112b8 <__assert_func+0x38>)
 80112a8:	e7f4      	b.n	8011294 <__assert_func+0x14>
 80112aa:	bf00      	nop
 80112ac:	20000030 	.word	0x20000030
 80112b0:	080154a1 	.word	0x080154a1
 80112b4:	08015473 	.word	0x08015473
 80112b8:	08015466 	.word	0x08015466

080112bc <div>:
 80112bc:	b510      	push	{r4, lr}
 80112be:	fb91 f4f2 	sdiv	r4, r1, r2
 80112c2:	fb02 1114 	mls	r1, r2, r4, r1
 80112c6:	6004      	str	r4, [r0, #0]
 80112c8:	6041      	str	r1, [r0, #4]
 80112ca:	bd10      	pop	{r4, pc}

080112cc <quorem>:
 80112cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d0:	6903      	ldr	r3, [r0, #16]
 80112d2:	690c      	ldr	r4, [r1, #16]
 80112d4:	42a3      	cmp	r3, r4
 80112d6:	4607      	mov	r7, r0
 80112d8:	db7e      	blt.n	80113d8 <quorem+0x10c>
 80112da:	3c01      	subs	r4, #1
 80112dc:	f101 0814 	add.w	r8, r1, #20
 80112e0:	00a3      	lsls	r3, r4, #2
 80112e2:	f100 0514 	add.w	r5, r0, #20
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112ec:	9301      	str	r3, [sp, #4]
 80112ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80112f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112f6:	3301      	adds	r3, #1
 80112f8:	429a      	cmp	r2, r3
 80112fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80112fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8011302:	d32e      	bcc.n	8011362 <quorem+0x96>
 8011304:	f04f 0a00 	mov.w	sl, #0
 8011308:	46c4      	mov	ip, r8
 801130a:	46ae      	mov	lr, r5
 801130c:	46d3      	mov	fp, sl
 801130e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011312:	b298      	uxth	r0, r3
 8011314:	fb06 a000 	mla	r0, r6, r0, sl
 8011318:	0c02      	lsrs	r2, r0, #16
 801131a:	0c1b      	lsrs	r3, r3, #16
 801131c:	fb06 2303 	mla	r3, r6, r3, r2
 8011320:	f8de 2000 	ldr.w	r2, [lr]
 8011324:	b280      	uxth	r0, r0
 8011326:	b292      	uxth	r2, r2
 8011328:	1a12      	subs	r2, r2, r0
 801132a:	445a      	add	r2, fp
 801132c:	f8de 0000 	ldr.w	r0, [lr]
 8011330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011334:	b29b      	uxth	r3, r3
 8011336:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801133a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801133e:	b292      	uxth	r2, r2
 8011340:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011344:	45e1      	cmp	r9, ip
 8011346:	f84e 2b04 	str.w	r2, [lr], #4
 801134a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801134e:	d2de      	bcs.n	801130e <quorem+0x42>
 8011350:	9b00      	ldr	r3, [sp, #0]
 8011352:	58eb      	ldr	r3, [r5, r3]
 8011354:	b92b      	cbnz	r3, 8011362 <quorem+0x96>
 8011356:	9b01      	ldr	r3, [sp, #4]
 8011358:	3b04      	subs	r3, #4
 801135a:	429d      	cmp	r5, r3
 801135c:	461a      	mov	r2, r3
 801135e:	d32f      	bcc.n	80113c0 <quorem+0xf4>
 8011360:	613c      	str	r4, [r7, #16]
 8011362:	4638      	mov	r0, r7
 8011364:	f001 f9c6 	bl	80126f4 <__mcmp>
 8011368:	2800      	cmp	r0, #0
 801136a:	db25      	blt.n	80113b8 <quorem+0xec>
 801136c:	4629      	mov	r1, r5
 801136e:	2000      	movs	r0, #0
 8011370:	f858 2b04 	ldr.w	r2, [r8], #4
 8011374:	f8d1 c000 	ldr.w	ip, [r1]
 8011378:	fa1f fe82 	uxth.w	lr, r2
 801137c:	fa1f f38c 	uxth.w	r3, ip
 8011380:	eba3 030e 	sub.w	r3, r3, lr
 8011384:	4403      	add	r3, r0
 8011386:	0c12      	lsrs	r2, r2, #16
 8011388:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801138c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011390:	b29b      	uxth	r3, r3
 8011392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011396:	45c1      	cmp	r9, r8
 8011398:	f841 3b04 	str.w	r3, [r1], #4
 801139c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80113a0:	d2e6      	bcs.n	8011370 <quorem+0xa4>
 80113a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113aa:	b922      	cbnz	r2, 80113b6 <quorem+0xea>
 80113ac:	3b04      	subs	r3, #4
 80113ae:	429d      	cmp	r5, r3
 80113b0:	461a      	mov	r2, r3
 80113b2:	d30b      	bcc.n	80113cc <quorem+0x100>
 80113b4:	613c      	str	r4, [r7, #16]
 80113b6:	3601      	adds	r6, #1
 80113b8:	4630      	mov	r0, r6
 80113ba:	b003      	add	sp, #12
 80113bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c0:	6812      	ldr	r2, [r2, #0]
 80113c2:	3b04      	subs	r3, #4
 80113c4:	2a00      	cmp	r2, #0
 80113c6:	d1cb      	bne.n	8011360 <quorem+0x94>
 80113c8:	3c01      	subs	r4, #1
 80113ca:	e7c6      	b.n	801135a <quorem+0x8e>
 80113cc:	6812      	ldr	r2, [r2, #0]
 80113ce:	3b04      	subs	r3, #4
 80113d0:	2a00      	cmp	r2, #0
 80113d2:	d1ef      	bne.n	80113b4 <quorem+0xe8>
 80113d4:	3c01      	subs	r4, #1
 80113d6:	e7ea      	b.n	80113ae <quorem+0xe2>
 80113d8:	2000      	movs	r0, #0
 80113da:	e7ee      	b.n	80113ba <quorem+0xee>
 80113dc:	0000      	movs	r0, r0
	...

080113e0 <_dtoa_r>:
 80113e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e4:	69c7      	ldr	r7, [r0, #28]
 80113e6:	b099      	sub	sp, #100	@ 0x64
 80113e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80113ec:	ec55 4b10 	vmov	r4, r5, d0
 80113f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80113f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80113f4:	4683      	mov	fp, r0
 80113f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80113f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80113fa:	b97f      	cbnz	r7, 801141c <_dtoa_r+0x3c>
 80113fc:	2010      	movs	r0, #16
 80113fe:	f000 fe41 	bl	8012084 <malloc>
 8011402:	4602      	mov	r2, r0
 8011404:	f8cb 001c 	str.w	r0, [fp, #28]
 8011408:	b920      	cbnz	r0, 8011414 <_dtoa_r+0x34>
 801140a:	4ba7      	ldr	r3, [pc, #668]	@ (80116a8 <_dtoa_r+0x2c8>)
 801140c:	21ef      	movs	r1, #239	@ 0xef
 801140e:	48a7      	ldr	r0, [pc, #668]	@ (80116ac <_dtoa_r+0x2cc>)
 8011410:	f7ff ff36 	bl	8011280 <__assert_func>
 8011414:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011418:	6007      	str	r7, [r0, #0]
 801141a:	60c7      	str	r7, [r0, #12]
 801141c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011420:	6819      	ldr	r1, [r3, #0]
 8011422:	b159      	cbz	r1, 801143c <_dtoa_r+0x5c>
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	604a      	str	r2, [r1, #4]
 8011428:	2301      	movs	r3, #1
 801142a:	4093      	lsls	r3, r2
 801142c:	608b      	str	r3, [r1, #8]
 801142e:	4658      	mov	r0, fp
 8011430:	f000 ff26 	bl	8012280 <_Bfree>
 8011434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011438:	2200      	movs	r2, #0
 801143a:	601a      	str	r2, [r3, #0]
 801143c:	1e2b      	subs	r3, r5, #0
 801143e:	bfb9      	ittee	lt
 8011440:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011444:	9303      	strlt	r3, [sp, #12]
 8011446:	2300      	movge	r3, #0
 8011448:	6033      	strge	r3, [r6, #0]
 801144a:	9f03      	ldr	r7, [sp, #12]
 801144c:	4b98      	ldr	r3, [pc, #608]	@ (80116b0 <_dtoa_r+0x2d0>)
 801144e:	bfbc      	itt	lt
 8011450:	2201      	movlt	r2, #1
 8011452:	6032      	strlt	r2, [r6, #0]
 8011454:	43bb      	bics	r3, r7
 8011456:	d112      	bne.n	801147e <_dtoa_r+0x9e>
 8011458:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801145a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011464:	4323      	orrs	r3, r4
 8011466:	f000 854d 	beq.w	8011f04 <_dtoa_r+0xb24>
 801146a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801146c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80116c4 <_dtoa_r+0x2e4>
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 854f 	beq.w	8011f14 <_dtoa_r+0xb34>
 8011476:	f10a 0303 	add.w	r3, sl, #3
 801147a:	f000 bd49 	b.w	8011f10 <_dtoa_r+0xb30>
 801147e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011482:	2200      	movs	r2, #0
 8011484:	ec51 0b17 	vmov	r0, r1, d7
 8011488:	2300      	movs	r3, #0
 801148a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801148e:	f7ef fb03 	bl	8000a98 <__aeabi_dcmpeq>
 8011492:	4680      	mov	r8, r0
 8011494:	b158      	cbz	r0, 80114ae <_dtoa_r+0xce>
 8011496:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011498:	2301      	movs	r3, #1
 801149a:	6013      	str	r3, [r2, #0]
 801149c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801149e:	b113      	cbz	r3, 80114a6 <_dtoa_r+0xc6>
 80114a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80114a2:	4b84      	ldr	r3, [pc, #528]	@ (80116b4 <_dtoa_r+0x2d4>)
 80114a4:	6013      	str	r3, [r2, #0]
 80114a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80116c8 <_dtoa_r+0x2e8>
 80114aa:	f000 bd33 	b.w	8011f14 <_dtoa_r+0xb34>
 80114ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80114b2:	aa16      	add	r2, sp, #88	@ 0x58
 80114b4:	a917      	add	r1, sp, #92	@ 0x5c
 80114b6:	4658      	mov	r0, fp
 80114b8:	f001 f9cc 	bl	8012854 <__d2b>
 80114bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80114c0:	4681      	mov	r9, r0
 80114c2:	2e00      	cmp	r6, #0
 80114c4:	d077      	beq.n	80115b6 <_dtoa_r+0x1d6>
 80114c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80114cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80114d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80114dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80114e0:	4619      	mov	r1, r3
 80114e2:	2200      	movs	r2, #0
 80114e4:	4b74      	ldr	r3, [pc, #464]	@ (80116b8 <_dtoa_r+0x2d8>)
 80114e6:	f7ee feb7 	bl	8000258 <__aeabi_dsub>
 80114ea:	a369      	add	r3, pc, #420	@ (adr r3, 8011690 <_dtoa_r+0x2b0>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	f7ef f86a 	bl	80005c8 <__aeabi_dmul>
 80114f4:	a368      	add	r3, pc, #416	@ (adr r3, 8011698 <_dtoa_r+0x2b8>)
 80114f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fa:	f7ee feaf 	bl	800025c <__adddf3>
 80114fe:	4604      	mov	r4, r0
 8011500:	4630      	mov	r0, r6
 8011502:	460d      	mov	r5, r1
 8011504:	f7ee fff6 	bl	80004f4 <__aeabi_i2d>
 8011508:	a365      	add	r3, pc, #404	@ (adr r3, 80116a0 <_dtoa_r+0x2c0>)
 801150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150e:	f7ef f85b 	bl	80005c8 <__aeabi_dmul>
 8011512:	4602      	mov	r2, r0
 8011514:	460b      	mov	r3, r1
 8011516:	4620      	mov	r0, r4
 8011518:	4629      	mov	r1, r5
 801151a:	f7ee fe9f 	bl	800025c <__adddf3>
 801151e:	4604      	mov	r4, r0
 8011520:	460d      	mov	r5, r1
 8011522:	f7ef fb01 	bl	8000b28 <__aeabi_d2iz>
 8011526:	2200      	movs	r2, #0
 8011528:	4607      	mov	r7, r0
 801152a:	2300      	movs	r3, #0
 801152c:	4620      	mov	r0, r4
 801152e:	4629      	mov	r1, r5
 8011530:	f7ef fabc 	bl	8000aac <__aeabi_dcmplt>
 8011534:	b140      	cbz	r0, 8011548 <_dtoa_r+0x168>
 8011536:	4638      	mov	r0, r7
 8011538:	f7ee ffdc 	bl	80004f4 <__aeabi_i2d>
 801153c:	4622      	mov	r2, r4
 801153e:	462b      	mov	r3, r5
 8011540:	f7ef faaa 	bl	8000a98 <__aeabi_dcmpeq>
 8011544:	b900      	cbnz	r0, 8011548 <_dtoa_r+0x168>
 8011546:	3f01      	subs	r7, #1
 8011548:	2f16      	cmp	r7, #22
 801154a:	d851      	bhi.n	80115f0 <_dtoa_r+0x210>
 801154c:	4b5b      	ldr	r3, [pc, #364]	@ (80116bc <_dtoa_r+0x2dc>)
 801154e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801155a:	f7ef faa7 	bl	8000aac <__aeabi_dcmplt>
 801155e:	2800      	cmp	r0, #0
 8011560:	d048      	beq.n	80115f4 <_dtoa_r+0x214>
 8011562:	3f01      	subs	r7, #1
 8011564:	2300      	movs	r3, #0
 8011566:	9312      	str	r3, [sp, #72]	@ 0x48
 8011568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801156a:	1b9b      	subs	r3, r3, r6
 801156c:	1e5a      	subs	r2, r3, #1
 801156e:	bf44      	itt	mi
 8011570:	f1c3 0801 	rsbmi	r8, r3, #1
 8011574:	2300      	movmi	r3, #0
 8011576:	9208      	str	r2, [sp, #32]
 8011578:	bf54      	ite	pl
 801157a:	f04f 0800 	movpl.w	r8, #0
 801157e:	9308      	strmi	r3, [sp, #32]
 8011580:	2f00      	cmp	r7, #0
 8011582:	db39      	blt.n	80115f8 <_dtoa_r+0x218>
 8011584:	9b08      	ldr	r3, [sp, #32]
 8011586:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011588:	443b      	add	r3, r7
 801158a:	9308      	str	r3, [sp, #32]
 801158c:	2300      	movs	r3, #0
 801158e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011592:	2b09      	cmp	r3, #9
 8011594:	d864      	bhi.n	8011660 <_dtoa_r+0x280>
 8011596:	2b05      	cmp	r3, #5
 8011598:	bfc4      	itt	gt
 801159a:	3b04      	subgt	r3, #4
 801159c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801159e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115a0:	f1a3 0302 	sub.w	r3, r3, #2
 80115a4:	bfcc      	ite	gt
 80115a6:	2400      	movgt	r4, #0
 80115a8:	2401      	movle	r4, #1
 80115aa:	2b03      	cmp	r3, #3
 80115ac:	d863      	bhi.n	8011676 <_dtoa_r+0x296>
 80115ae:	e8df f003 	tbb	[pc, r3]
 80115b2:	372a      	.short	0x372a
 80115b4:	5535      	.short	0x5535
 80115b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80115ba:	441e      	add	r6, r3
 80115bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80115c0:	2b20      	cmp	r3, #32
 80115c2:	bfc1      	itttt	gt
 80115c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80115c8:	409f      	lslgt	r7, r3
 80115ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80115ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80115d2:	bfd6      	itet	le
 80115d4:	f1c3 0320 	rsble	r3, r3, #32
 80115d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80115dc:	fa04 f003 	lslle.w	r0, r4, r3
 80115e0:	f7ee ff78 	bl	80004d4 <__aeabi_ui2d>
 80115e4:	2201      	movs	r2, #1
 80115e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80115ea:	3e01      	subs	r6, #1
 80115ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80115ee:	e777      	b.n	80114e0 <_dtoa_r+0x100>
 80115f0:	2301      	movs	r3, #1
 80115f2:	e7b8      	b.n	8011566 <_dtoa_r+0x186>
 80115f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80115f6:	e7b7      	b.n	8011568 <_dtoa_r+0x188>
 80115f8:	427b      	negs	r3, r7
 80115fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80115fc:	2300      	movs	r3, #0
 80115fe:	eba8 0807 	sub.w	r8, r8, r7
 8011602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011604:	e7c4      	b.n	8011590 <_dtoa_r+0x1b0>
 8011606:	2300      	movs	r3, #0
 8011608:	930b      	str	r3, [sp, #44]	@ 0x2c
 801160a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801160c:	2b00      	cmp	r3, #0
 801160e:	dc35      	bgt.n	801167c <_dtoa_r+0x29c>
 8011610:	2301      	movs	r3, #1
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	9307      	str	r3, [sp, #28]
 8011616:	461a      	mov	r2, r3
 8011618:	920e      	str	r2, [sp, #56]	@ 0x38
 801161a:	e00b      	b.n	8011634 <_dtoa_r+0x254>
 801161c:	2301      	movs	r3, #1
 801161e:	e7f3      	b.n	8011608 <_dtoa_r+0x228>
 8011620:	2300      	movs	r3, #0
 8011622:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	9300      	str	r3, [sp, #0]
 801162a:	3301      	adds	r3, #1
 801162c:	2b01      	cmp	r3, #1
 801162e:	9307      	str	r3, [sp, #28]
 8011630:	bfb8      	it	lt
 8011632:	2301      	movlt	r3, #1
 8011634:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011638:	2100      	movs	r1, #0
 801163a:	2204      	movs	r2, #4
 801163c:	f102 0514 	add.w	r5, r2, #20
 8011640:	429d      	cmp	r5, r3
 8011642:	d91f      	bls.n	8011684 <_dtoa_r+0x2a4>
 8011644:	6041      	str	r1, [r0, #4]
 8011646:	4658      	mov	r0, fp
 8011648:	f000 fdda 	bl	8012200 <_Balloc>
 801164c:	4682      	mov	sl, r0
 801164e:	2800      	cmp	r0, #0
 8011650:	d13c      	bne.n	80116cc <_dtoa_r+0x2ec>
 8011652:	4b1b      	ldr	r3, [pc, #108]	@ (80116c0 <_dtoa_r+0x2e0>)
 8011654:	4602      	mov	r2, r0
 8011656:	f240 11af 	movw	r1, #431	@ 0x1af
 801165a:	e6d8      	b.n	801140e <_dtoa_r+0x2e>
 801165c:	2301      	movs	r3, #1
 801165e:	e7e0      	b.n	8011622 <_dtoa_r+0x242>
 8011660:	2401      	movs	r4, #1
 8011662:	2300      	movs	r3, #0
 8011664:	9309      	str	r3, [sp, #36]	@ 0x24
 8011666:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011668:	f04f 33ff 	mov.w	r3, #4294967295
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	9307      	str	r3, [sp, #28]
 8011670:	2200      	movs	r2, #0
 8011672:	2312      	movs	r3, #18
 8011674:	e7d0      	b.n	8011618 <_dtoa_r+0x238>
 8011676:	2301      	movs	r3, #1
 8011678:	930b      	str	r3, [sp, #44]	@ 0x2c
 801167a:	e7f5      	b.n	8011668 <_dtoa_r+0x288>
 801167c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	9307      	str	r3, [sp, #28]
 8011682:	e7d7      	b.n	8011634 <_dtoa_r+0x254>
 8011684:	3101      	adds	r1, #1
 8011686:	0052      	lsls	r2, r2, #1
 8011688:	e7d8      	b.n	801163c <_dtoa_r+0x25c>
 801168a:	bf00      	nop
 801168c:	f3af 8000 	nop.w
 8011690:	636f4361 	.word	0x636f4361
 8011694:	3fd287a7 	.word	0x3fd287a7
 8011698:	8b60c8b3 	.word	0x8b60c8b3
 801169c:	3fc68a28 	.word	0x3fc68a28
 80116a0:	509f79fb 	.word	0x509f79fb
 80116a4:	3fd34413 	.word	0x3fd34413
 80116a8:	0801525c 	.word	0x0801525c
 80116ac:	080154af 	.word	0x080154af
 80116b0:	7ff00000 	.word	0x7ff00000
 80116b4:	080157a3 	.word	0x080157a3
 80116b8:	3ff80000 	.word	0x3ff80000
 80116bc:	080155a8 	.word	0x080155a8
 80116c0:	08015507 	.word	0x08015507
 80116c4:	080154ab 	.word	0x080154ab
 80116c8:	080157a2 	.word	0x080157a2
 80116cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80116d0:	6018      	str	r0, [r3, #0]
 80116d2:	9b07      	ldr	r3, [sp, #28]
 80116d4:	2b0e      	cmp	r3, #14
 80116d6:	f200 80a4 	bhi.w	8011822 <_dtoa_r+0x442>
 80116da:	2c00      	cmp	r4, #0
 80116dc:	f000 80a1 	beq.w	8011822 <_dtoa_r+0x442>
 80116e0:	2f00      	cmp	r7, #0
 80116e2:	dd33      	ble.n	801174c <_dtoa_r+0x36c>
 80116e4:	4bad      	ldr	r3, [pc, #692]	@ (801199c <_dtoa_r+0x5bc>)
 80116e6:	f007 020f 	and.w	r2, r7, #15
 80116ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ee:	ed93 7b00 	vldr	d7, [r3]
 80116f2:	05f8      	lsls	r0, r7, #23
 80116f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80116f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80116fc:	d516      	bpl.n	801172c <_dtoa_r+0x34c>
 80116fe:	4ba8      	ldr	r3, [pc, #672]	@ (80119a0 <_dtoa_r+0x5c0>)
 8011700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011708:	f7ef f888 	bl	800081c <__aeabi_ddiv>
 801170c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011710:	f004 040f 	and.w	r4, r4, #15
 8011714:	2603      	movs	r6, #3
 8011716:	4da2      	ldr	r5, [pc, #648]	@ (80119a0 <_dtoa_r+0x5c0>)
 8011718:	b954      	cbnz	r4, 8011730 <_dtoa_r+0x350>
 801171a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801171e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011722:	f7ef f87b 	bl	800081c <__aeabi_ddiv>
 8011726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801172a:	e028      	b.n	801177e <_dtoa_r+0x39e>
 801172c:	2602      	movs	r6, #2
 801172e:	e7f2      	b.n	8011716 <_dtoa_r+0x336>
 8011730:	07e1      	lsls	r1, r4, #31
 8011732:	d508      	bpl.n	8011746 <_dtoa_r+0x366>
 8011734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011738:	e9d5 2300 	ldrd	r2, r3, [r5]
 801173c:	f7ee ff44 	bl	80005c8 <__aeabi_dmul>
 8011740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011744:	3601      	adds	r6, #1
 8011746:	1064      	asrs	r4, r4, #1
 8011748:	3508      	adds	r5, #8
 801174a:	e7e5      	b.n	8011718 <_dtoa_r+0x338>
 801174c:	f000 80d2 	beq.w	80118f4 <_dtoa_r+0x514>
 8011750:	427c      	negs	r4, r7
 8011752:	4b92      	ldr	r3, [pc, #584]	@ (801199c <_dtoa_r+0x5bc>)
 8011754:	4d92      	ldr	r5, [pc, #584]	@ (80119a0 <_dtoa_r+0x5c0>)
 8011756:	f004 020f 	and.w	r2, r4, #15
 801175a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011766:	f7ee ff2f 	bl	80005c8 <__aeabi_dmul>
 801176a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801176e:	1124      	asrs	r4, r4, #4
 8011770:	2300      	movs	r3, #0
 8011772:	2602      	movs	r6, #2
 8011774:	2c00      	cmp	r4, #0
 8011776:	f040 80b2 	bne.w	80118de <_dtoa_r+0x4fe>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1d3      	bne.n	8011726 <_dtoa_r+0x346>
 801177e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011780:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011784:	2b00      	cmp	r3, #0
 8011786:	f000 80b7 	beq.w	80118f8 <_dtoa_r+0x518>
 801178a:	4b86      	ldr	r3, [pc, #536]	@ (80119a4 <_dtoa_r+0x5c4>)
 801178c:	2200      	movs	r2, #0
 801178e:	4620      	mov	r0, r4
 8011790:	4629      	mov	r1, r5
 8011792:	f7ef f98b 	bl	8000aac <__aeabi_dcmplt>
 8011796:	2800      	cmp	r0, #0
 8011798:	f000 80ae 	beq.w	80118f8 <_dtoa_r+0x518>
 801179c:	9b07      	ldr	r3, [sp, #28]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 80aa 	beq.w	80118f8 <_dtoa_r+0x518>
 80117a4:	9b00      	ldr	r3, [sp, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	dd37      	ble.n	801181a <_dtoa_r+0x43a>
 80117aa:	1e7b      	subs	r3, r7, #1
 80117ac:	9304      	str	r3, [sp, #16]
 80117ae:	4620      	mov	r0, r4
 80117b0:	4b7d      	ldr	r3, [pc, #500]	@ (80119a8 <_dtoa_r+0x5c8>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	4629      	mov	r1, r5
 80117b6:	f7ee ff07 	bl	80005c8 <__aeabi_dmul>
 80117ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117be:	9c00      	ldr	r4, [sp, #0]
 80117c0:	3601      	adds	r6, #1
 80117c2:	4630      	mov	r0, r6
 80117c4:	f7ee fe96 	bl	80004f4 <__aeabi_i2d>
 80117c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117cc:	f7ee fefc 	bl	80005c8 <__aeabi_dmul>
 80117d0:	4b76      	ldr	r3, [pc, #472]	@ (80119ac <_dtoa_r+0x5cc>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	f7ee fd42 	bl	800025c <__adddf3>
 80117d8:	4605      	mov	r5, r0
 80117da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80117de:	2c00      	cmp	r4, #0
 80117e0:	f040 808d 	bne.w	80118fe <_dtoa_r+0x51e>
 80117e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117e8:	4b71      	ldr	r3, [pc, #452]	@ (80119b0 <_dtoa_r+0x5d0>)
 80117ea:	2200      	movs	r2, #0
 80117ec:	f7ee fd34 	bl	8000258 <__aeabi_dsub>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117f8:	462a      	mov	r2, r5
 80117fa:	4633      	mov	r3, r6
 80117fc:	f7ef f974 	bl	8000ae8 <__aeabi_dcmpgt>
 8011800:	2800      	cmp	r0, #0
 8011802:	f040 828b 	bne.w	8011d1c <_dtoa_r+0x93c>
 8011806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801180a:	462a      	mov	r2, r5
 801180c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011810:	f7ef f94c 	bl	8000aac <__aeabi_dcmplt>
 8011814:	2800      	cmp	r0, #0
 8011816:	f040 8128 	bne.w	8011a6a <_dtoa_r+0x68a>
 801181a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801181e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011824:	2b00      	cmp	r3, #0
 8011826:	f2c0 815a 	blt.w	8011ade <_dtoa_r+0x6fe>
 801182a:	2f0e      	cmp	r7, #14
 801182c:	f300 8157 	bgt.w	8011ade <_dtoa_r+0x6fe>
 8011830:	4b5a      	ldr	r3, [pc, #360]	@ (801199c <_dtoa_r+0x5bc>)
 8011832:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011836:	ed93 7b00 	vldr	d7, [r3]
 801183a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801183c:	2b00      	cmp	r3, #0
 801183e:	ed8d 7b00 	vstr	d7, [sp]
 8011842:	da03      	bge.n	801184c <_dtoa_r+0x46c>
 8011844:	9b07      	ldr	r3, [sp, #28]
 8011846:	2b00      	cmp	r3, #0
 8011848:	f340 8101 	ble.w	8011a4e <_dtoa_r+0x66e>
 801184c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011850:	4656      	mov	r6, sl
 8011852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011856:	4620      	mov	r0, r4
 8011858:	4629      	mov	r1, r5
 801185a:	f7ee ffdf 	bl	800081c <__aeabi_ddiv>
 801185e:	f7ef f963 	bl	8000b28 <__aeabi_d2iz>
 8011862:	4680      	mov	r8, r0
 8011864:	f7ee fe46 	bl	80004f4 <__aeabi_i2d>
 8011868:	e9dd 2300 	ldrd	r2, r3, [sp]
 801186c:	f7ee feac 	bl	80005c8 <__aeabi_dmul>
 8011870:	4602      	mov	r2, r0
 8011872:	460b      	mov	r3, r1
 8011874:	4620      	mov	r0, r4
 8011876:	4629      	mov	r1, r5
 8011878:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801187c:	f7ee fcec 	bl	8000258 <__aeabi_dsub>
 8011880:	f806 4b01 	strb.w	r4, [r6], #1
 8011884:	9d07      	ldr	r5, [sp, #28]
 8011886:	eba6 040a 	sub.w	r4, r6, sl
 801188a:	42a5      	cmp	r5, r4
 801188c:	4602      	mov	r2, r0
 801188e:	460b      	mov	r3, r1
 8011890:	f040 8117 	bne.w	8011ac2 <_dtoa_r+0x6e2>
 8011894:	f7ee fce2 	bl	800025c <__adddf3>
 8011898:	e9dd 2300 	ldrd	r2, r3, [sp]
 801189c:	4604      	mov	r4, r0
 801189e:	460d      	mov	r5, r1
 80118a0:	f7ef f922 	bl	8000ae8 <__aeabi_dcmpgt>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	f040 80f9 	bne.w	8011a9c <_dtoa_r+0x6bc>
 80118aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118ae:	4620      	mov	r0, r4
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7ef f8f1 	bl	8000a98 <__aeabi_dcmpeq>
 80118b6:	b118      	cbz	r0, 80118c0 <_dtoa_r+0x4e0>
 80118b8:	f018 0f01 	tst.w	r8, #1
 80118bc:	f040 80ee 	bne.w	8011a9c <_dtoa_r+0x6bc>
 80118c0:	4649      	mov	r1, r9
 80118c2:	4658      	mov	r0, fp
 80118c4:	f000 fcdc 	bl	8012280 <_Bfree>
 80118c8:	2300      	movs	r3, #0
 80118ca:	7033      	strb	r3, [r6, #0]
 80118cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80118ce:	3701      	adds	r7, #1
 80118d0:	601f      	str	r7, [r3, #0]
 80118d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f000 831d 	beq.w	8011f14 <_dtoa_r+0xb34>
 80118da:	601e      	str	r6, [r3, #0]
 80118dc:	e31a      	b.n	8011f14 <_dtoa_r+0xb34>
 80118de:	07e2      	lsls	r2, r4, #31
 80118e0:	d505      	bpl.n	80118ee <_dtoa_r+0x50e>
 80118e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80118e6:	f7ee fe6f 	bl	80005c8 <__aeabi_dmul>
 80118ea:	3601      	adds	r6, #1
 80118ec:	2301      	movs	r3, #1
 80118ee:	1064      	asrs	r4, r4, #1
 80118f0:	3508      	adds	r5, #8
 80118f2:	e73f      	b.n	8011774 <_dtoa_r+0x394>
 80118f4:	2602      	movs	r6, #2
 80118f6:	e742      	b.n	801177e <_dtoa_r+0x39e>
 80118f8:	9c07      	ldr	r4, [sp, #28]
 80118fa:	9704      	str	r7, [sp, #16]
 80118fc:	e761      	b.n	80117c2 <_dtoa_r+0x3e2>
 80118fe:	4b27      	ldr	r3, [pc, #156]	@ (801199c <_dtoa_r+0x5bc>)
 8011900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011906:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801190a:	4454      	add	r4, sl
 801190c:	2900      	cmp	r1, #0
 801190e:	d053      	beq.n	80119b8 <_dtoa_r+0x5d8>
 8011910:	4928      	ldr	r1, [pc, #160]	@ (80119b4 <_dtoa_r+0x5d4>)
 8011912:	2000      	movs	r0, #0
 8011914:	f7ee ff82 	bl	800081c <__aeabi_ddiv>
 8011918:	4633      	mov	r3, r6
 801191a:	462a      	mov	r2, r5
 801191c:	f7ee fc9c 	bl	8000258 <__aeabi_dsub>
 8011920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011924:	4656      	mov	r6, sl
 8011926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801192a:	f7ef f8fd 	bl	8000b28 <__aeabi_d2iz>
 801192e:	4605      	mov	r5, r0
 8011930:	f7ee fde0 	bl	80004f4 <__aeabi_i2d>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801193c:	f7ee fc8c 	bl	8000258 <__aeabi_dsub>
 8011940:	3530      	adds	r5, #48	@ 0x30
 8011942:	4602      	mov	r2, r0
 8011944:	460b      	mov	r3, r1
 8011946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801194a:	f806 5b01 	strb.w	r5, [r6], #1
 801194e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011952:	f7ef f8ab 	bl	8000aac <__aeabi_dcmplt>
 8011956:	2800      	cmp	r0, #0
 8011958:	d171      	bne.n	8011a3e <_dtoa_r+0x65e>
 801195a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801195e:	4911      	ldr	r1, [pc, #68]	@ (80119a4 <_dtoa_r+0x5c4>)
 8011960:	2000      	movs	r0, #0
 8011962:	f7ee fc79 	bl	8000258 <__aeabi_dsub>
 8011966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801196a:	f7ef f89f 	bl	8000aac <__aeabi_dcmplt>
 801196e:	2800      	cmp	r0, #0
 8011970:	f040 8095 	bne.w	8011a9e <_dtoa_r+0x6be>
 8011974:	42a6      	cmp	r6, r4
 8011976:	f43f af50 	beq.w	801181a <_dtoa_r+0x43a>
 801197a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801197e:	4b0a      	ldr	r3, [pc, #40]	@ (80119a8 <_dtoa_r+0x5c8>)
 8011980:	2200      	movs	r2, #0
 8011982:	f7ee fe21 	bl	80005c8 <__aeabi_dmul>
 8011986:	4b08      	ldr	r3, [pc, #32]	@ (80119a8 <_dtoa_r+0x5c8>)
 8011988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801198c:	2200      	movs	r2, #0
 801198e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011992:	f7ee fe19 	bl	80005c8 <__aeabi_dmul>
 8011996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801199a:	e7c4      	b.n	8011926 <_dtoa_r+0x546>
 801199c:	080155a8 	.word	0x080155a8
 80119a0:	08015580 	.word	0x08015580
 80119a4:	3ff00000 	.word	0x3ff00000
 80119a8:	40240000 	.word	0x40240000
 80119ac:	401c0000 	.word	0x401c0000
 80119b0:	40140000 	.word	0x40140000
 80119b4:	3fe00000 	.word	0x3fe00000
 80119b8:	4631      	mov	r1, r6
 80119ba:	4628      	mov	r0, r5
 80119bc:	f7ee fe04 	bl	80005c8 <__aeabi_dmul>
 80119c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80119c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80119c6:	4656      	mov	r6, sl
 80119c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119cc:	f7ef f8ac 	bl	8000b28 <__aeabi_d2iz>
 80119d0:	4605      	mov	r5, r0
 80119d2:	f7ee fd8f 	bl	80004f4 <__aeabi_i2d>
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119de:	f7ee fc3b 	bl	8000258 <__aeabi_dsub>
 80119e2:	3530      	adds	r5, #48	@ 0x30
 80119e4:	f806 5b01 	strb.w	r5, [r6], #1
 80119e8:	4602      	mov	r2, r0
 80119ea:	460b      	mov	r3, r1
 80119ec:	42a6      	cmp	r6, r4
 80119ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	d124      	bne.n	8011a42 <_dtoa_r+0x662>
 80119f8:	4bac      	ldr	r3, [pc, #688]	@ (8011cac <_dtoa_r+0x8cc>)
 80119fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80119fe:	f7ee fc2d 	bl	800025c <__adddf3>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a0a:	f7ef f86d 	bl	8000ae8 <__aeabi_dcmpgt>
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	d145      	bne.n	8011a9e <_dtoa_r+0x6be>
 8011a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011a16:	49a5      	ldr	r1, [pc, #660]	@ (8011cac <_dtoa_r+0x8cc>)
 8011a18:	2000      	movs	r0, #0
 8011a1a:	f7ee fc1d 	bl	8000258 <__aeabi_dsub>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a26:	f7ef f841 	bl	8000aac <__aeabi_dcmplt>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f43f aef5 	beq.w	801181a <_dtoa_r+0x43a>
 8011a30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011a32:	1e73      	subs	r3, r6, #1
 8011a34:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a3a:	2b30      	cmp	r3, #48	@ 0x30
 8011a3c:	d0f8      	beq.n	8011a30 <_dtoa_r+0x650>
 8011a3e:	9f04      	ldr	r7, [sp, #16]
 8011a40:	e73e      	b.n	80118c0 <_dtoa_r+0x4e0>
 8011a42:	4b9b      	ldr	r3, [pc, #620]	@ (8011cb0 <_dtoa_r+0x8d0>)
 8011a44:	f7ee fdc0 	bl	80005c8 <__aeabi_dmul>
 8011a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a4c:	e7bc      	b.n	80119c8 <_dtoa_r+0x5e8>
 8011a4e:	d10c      	bne.n	8011a6a <_dtoa_r+0x68a>
 8011a50:	4b98      	ldr	r3, [pc, #608]	@ (8011cb4 <_dtoa_r+0x8d4>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a58:	f7ee fdb6 	bl	80005c8 <__aeabi_dmul>
 8011a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a60:	f7ef f838 	bl	8000ad4 <__aeabi_dcmpge>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	f000 8157 	beq.w	8011d18 <_dtoa_r+0x938>
 8011a6a:	2400      	movs	r4, #0
 8011a6c:	4625      	mov	r5, r4
 8011a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a70:	43db      	mvns	r3, r3
 8011a72:	9304      	str	r3, [sp, #16]
 8011a74:	4656      	mov	r6, sl
 8011a76:	2700      	movs	r7, #0
 8011a78:	4621      	mov	r1, r4
 8011a7a:	4658      	mov	r0, fp
 8011a7c:	f000 fc00 	bl	8012280 <_Bfree>
 8011a80:	2d00      	cmp	r5, #0
 8011a82:	d0dc      	beq.n	8011a3e <_dtoa_r+0x65e>
 8011a84:	b12f      	cbz	r7, 8011a92 <_dtoa_r+0x6b2>
 8011a86:	42af      	cmp	r7, r5
 8011a88:	d003      	beq.n	8011a92 <_dtoa_r+0x6b2>
 8011a8a:	4639      	mov	r1, r7
 8011a8c:	4658      	mov	r0, fp
 8011a8e:	f000 fbf7 	bl	8012280 <_Bfree>
 8011a92:	4629      	mov	r1, r5
 8011a94:	4658      	mov	r0, fp
 8011a96:	f000 fbf3 	bl	8012280 <_Bfree>
 8011a9a:	e7d0      	b.n	8011a3e <_dtoa_r+0x65e>
 8011a9c:	9704      	str	r7, [sp, #16]
 8011a9e:	4633      	mov	r3, r6
 8011aa0:	461e      	mov	r6, r3
 8011aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011aa6:	2a39      	cmp	r2, #57	@ 0x39
 8011aa8:	d107      	bne.n	8011aba <_dtoa_r+0x6da>
 8011aaa:	459a      	cmp	sl, r3
 8011aac:	d1f8      	bne.n	8011aa0 <_dtoa_r+0x6c0>
 8011aae:	9a04      	ldr	r2, [sp, #16]
 8011ab0:	3201      	adds	r2, #1
 8011ab2:	9204      	str	r2, [sp, #16]
 8011ab4:	2230      	movs	r2, #48	@ 0x30
 8011ab6:	f88a 2000 	strb.w	r2, [sl]
 8011aba:	781a      	ldrb	r2, [r3, #0]
 8011abc:	3201      	adds	r2, #1
 8011abe:	701a      	strb	r2, [r3, #0]
 8011ac0:	e7bd      	b.n	8011a3e <_dtoa_r+0x65e>
 8011ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8011cb0 <_dtoa_r+0x8d0>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f7ee fd7f 	bl	80005c8 <__aeabi_dmul>
 8011aca:	2200      	movs	r2, #0
 8011acc:	2300      	movs	r3, #0
 8011ace:	4604      	mov	r4, r0
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	f7ee ffe1 	bl	8000a98 <__aeabi_dcmpeq>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	f43f aebb 	beq.w	8011852 <_dtoa_r+0x472>
 8011adc:	e6f0      	b.n	80118c0 <_dtoa_r+0x4e0>
 8011ade:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	f000 80db 	beq.w	8011c9c <_dtoa_r+0x8bc>
 8011ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ae8:	2a01      	cmp	r2, #1
 8011aea:	f300 80bf 	bgt.w	8011c6c <_dtoa_r+0x88c>
 8011aee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011af0:	2a00      	cmp	r2, #0
 8011af2:	f000 80b7 	beq.w	8011c64 <_dtoa_r+0x884>
 8011af6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011afa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011afc:	4646      	mov	r6, r8
 8011afe:	9a08      	ldr	r2, [sp, #32]
 8011b00:	2101      	movs	r1, #1
 8011b02:	441a      	add	r2, r3
 8011b04:	4658      	mov	r0, fp
 8011b06:	4498      	add	r8, r3
 8011b08:	9208      	str	r2, [sp, #32]
 8011b0a:	f000 fc6d 	bl	80123e8 <__i2b>
 8011b0e:	4605      	mov	r5, r0
 8011b10:	b15e      	cbz	r6, 8011b2a <_dtoa_r+0x74a>
 8011b12:	9b08      	ldr	r3, [sp, #32]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	dd08      	ble.n	8011b2a <_dtoa_r+0x74a>
 8011b18:	42b3      	cmp	r3, r6
 8011b1a:	9a08      	ldr	r2, [sp, #32]
 8011b1c:	bfa8      	it	ge
 8011b1e:	4633      	movge	r3, r6
 8011b20:	eba8 0803 	sub.w	r8, r8, r3
 8011b24:	1af6      	subs	r6, r6, r3
 8011b26:	1ad3      	subs	r3, r2, r3
 8011b28:	9308      	str	r3, [sp, #32]
 8011b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b2c:	b1f3      	cbz	r3, 8011b6c <_dtoa_r+0x78c>
 8011b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f000 80b7 	beq.w	8011ca4 <_dtoa_r+0x8c4>
 8011b36:	b18c      	cbz	r4, 8011b5c <_dtoa_r+0x77c>
 8011b38:	4629      	mov	r1, r5
 8011b3a:	4622      	mov	r2, r4
 8011b3c:	4658      	mov	r0, fp
 8011b3e:	f000 fd13 	bl	8012568 <__pow5mult>
 8011b42:	464a      	mov	r2, r9
 8011b44:	4601      	mov	r1, r0
 8011b46:	4605      	mov	r5, r0
 8011b48:	4658      	mov	r0, fp
 8011b4a:	f000 fc63 	bl	8012414 <__multiply>
 8011b4e:	4649      	mov	r1, r9
 8011b50:	9004      	str	r0, [sp, #16]
 8011b52:	4658      	mov	r0, fp
 8011b54:	f000 fb94 	bl	8012280 <_Bfree>
 8011b58:	9b04      	ldr	r3, [sp, #16]
 8011b5a:	4699      	mov	r9, r3
 8011b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b5e:	1b1a      	subs	r2, r3, r4
 8011b60:	d004      	beq.n	8011b6c <_dtoa_r+0x78c>
 8011b62:	4649      	mov	r1, r9
 8011b64:	4658      	mov	r0, fp
 8011b66:	f000 fcff 	bl	8012568 <__pow5mult>
 8011b6a:	4681      	mov	r9, r0
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	4658      	mov	r0, fp
 8011b70:	f000 fc3a 	bl	80123e8 <__i2b>
 8011b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b76:	4604      	mov	r4, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f000 81cf 	beq.w	8011f1c <_dtoa_r+0xb3c>
 8011b7e:	461a      	mov	r2, r3
 8011b80:	4601      	mov	r1, r0
 8011b82:	4658      	mov	r0, fp
 8011b84:	f000 fcf0 	bl	8012568 <__pow5mult>
 8011b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	f300 8095 	bgt.w	8011cbc <_dtoa_r+0x8dc>
 8011b92:	9b02      	ldr	r3, [sp, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f040 8087 	bne.w	8011ca8 <_dtoa_r+0x8c8>
 8011b9a:	9b03      	ldr	r3, [sp, #12]
 8011b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f040 8089 	bne.w	8011cb8 <_dtoa_r+0x8d8>
 8011ba6:	9b03      	ldr	r3, [sp, #12]
 8011ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011bac:	0d1b      	lsrs	r3, r3, #20
 8011bae:	051b      	lsls	r3, r3, #20
 8011bb0:	b12b      	cbz	r3, 8011bbe <_dtoa_r+0x7de>
 8011bb2:	9b08      	ldr	r3, [sp, #32]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	9308      	str	r3, [sp, #32]
 8011bb8:	f108 0801 	add.w	r8, r8, #1
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 81b0 	beq.w	8011f28 <_dtoa_r+0xb48>
 8011bc8:	6923      	ldr	r3, [r4, #16]
 8011bca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011bce:	6918      	ldr	r0, [r3, #16]
 8011bd0:	f000 fbbe 	bl	8012350 <__hi0bits>
 8011bd4:	f1c0 0020 	rsb	r0, r0, #32
 8011bd8:	9b08      	ldr	r3, [sp, #32]
 8011bda:	4418      	add	r0, r3
 8011bdc:	f010 001f 	ands.w	r0, r0, #31
 8011be0:	d077      	beq.n	8011cd2 <_dtoa_r+0x8f2>
 8011be2:	f1c0 0320 	rsb	r3, r0, #32
 8011be6:	2b04      	cmp	r3, #4
 8011be8:	dd6b      	ble.n	8011cc2 <_dtoa_r+0x8e2>
 8011bea:	9b08      	ldr	r3, [sp, #32]
 8011bec:	f1c0 001c 	rsb	r0, r0, #28
 8011bf0:	4403      	add	r3, r0
 8011bf2:	4480      	add	r8, r0
 8011bf4:	4406      	add	r6, r0
 8011bf6:	9308      	str	r3, [sp, #32]
 8011bf8:	f1b8 0f00 	cmp.w	r8, #0
 8011bfc:	dd05      	ble.n	8011c0a <_dtoa_r+0x82a>
 8011bfe:	4649      	mov	r1, r9
 8011c00:	4642      	mov	r2, r8
 8011c02:	4658      	mov	r0, fp
 8011c04:	f000 fd0a 	bl	801261c <__lshift>
 8011c08:	4681      	mov	r9, r0
 8011c0a:	9b08      	ldr	r3, [sp, #32]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	dd05      	ble.n	8011c1c <_dtoa_r+0x83c>
 8011c10:	4621      	mov	r1, r4
 8011c12:	461a      	mov	r2, r3
 8011c14:	4658      	mov	r0, fp
 8011c16:	f000 fd01 	bl	801261c <__lshift>
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d059      	beq.n	8011cd6 <_dtoa_r+0x8f6>
 8011c22:	4621      	mov	r1, r4
 8011c24:	4648      	mov	r0, r9
 8011c26:	f000 fd65 	bl	80126f4 <__mcmp>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	da53      	bge.n	8011cd6 <_dtoa_r+0x8f6>
 8011c2e:	1e7b      	subs	r3, r7, #1
 8011c30:	9304      	str	r3, [sp, #16]
 8011c32:	4649      	mov	r1, r9
 8011c34:	2300      	movs	r3, #0
 8011c36:	220a      	movs	r2, #10
 8011c38:	4658      	mov	r0, fp
 8011c3a:	f000 fb43 	bl	80122c4 <__multadd>
 8011c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c40:	4681      	mov	r9, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f000 8172 	beq.w	8011f2c <_dtoa_r+0xb4c>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	4658      	mov	r0, fp
 8011c50:	f000 fb38 	bl	80122c4 <__multadd>
 8011c54:	9b00      	ldr	r3, [sp, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	4605      	mov	r5, r0
 8011c5a:	dc67      	bgt.n	8011d2c <_dtoa_r+0x94c>
 8011c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	dc41      	bgt.n	8011ce6 <_dtoa_r+0x906>
 8011c62:	e063      	b.n	8011d2c <_dtoa_r+0x94c>
 8011c64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011c66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011c6a:	e746      	b.n	8011afa <_dtoa_r+0x71a>
 8011c6c:	9b07      	ldr	r3, [sp, #28]
 8011c6e:	1e5c      	subs	r4, r3, #1
 8011c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c72:	42a3      	cmp	r3, r4
 8011c74:	bfbf      	itttt	lt
 8011c76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011c78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011c7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011c7c:	1ae3      	sublt	r3, r4, r3
 8011c7e:	bfb4      	ite	lt
 8011c80:	18d2      	addlt	r2, r2, r3
 8011c82:	1b1c      	subge	r4, r3, r4
 8011c84:	9b07      	ldr	r3, [sp, #28]
 8011c86:	bfbc      	itt	lt
 8011c88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011c8a:	2400      	movlt	r4, #0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	bfb5      	itete	lt
 8011c90:	eba8 0603 	sublt.w	r6, r8, r3
 8011c94:	9b07      	ldrge	r3, [sp, #28]
 8011c96:	2300      	movlt	r3, #0
 8011c98:	4646      	movge	r6, r8
 8011c9a:	e730      	b.n	8011afe <_dtoa_r+0x71e>
 8011c9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011c9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011ca0:	4646      	mov	r6, r8
 8011ca2:	e735      	b.n	8011b10 <_dtoa_r+0x730>
 8011ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ca6:	e75c      	b.n	8011b62 <_dtoa_r+0x782>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	e788      	b.n	8011bbe <_dtoa_r+0x7de>
 8011cac:	3fe00000 	.word	0x3fe00000
 8011cb0:	40240000 	.word	0x40240000
 8011cb4:	40140000 	.word	0x40140000
 8011cb8:	9b02      	ldr	r3, [sp, #8]
 8011cba:	e780      	b.n	8011bbe <_dtoa_r+0x7de>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cc0:	e782      	b.n	8011bc8 <_dtoa_r+0x7e8>
 8011cc2:	d099      	beq.n	8011bf8 <_dtoa_r+0x818>
 8011cc4:	9a08      	ldr	r2, [sp, #32]
 8011cc6:	331c      	adds	r3, #28
 8011cc8:	441a      	add	r2, r3
 8011cca:	4498      	add	r8, r3
 8011ccc:	441e      	add	r6, r3
 8011cce:	9208      	str	r2, [sp, #32]
 8011cd0:	e792      	b.n	8011bf8 <_dtoa_r+0x818>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	e7f6      	b.n	8011cc4 <_dtoa_r+0x8e4>
 8011cd6:	9b07      	ldr	r3, [sp, #28]
 8011cd8:	9704      	str	r7, [sp, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	dc20      	bgt.n	8011d20 <_dtoa_r+0x940>
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	dd1e      	ble.n	8011d24 <_dtoa_r+0x944>
 8011ce6:	9b00      	ldr	r3, [sp, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f47f aec0 	bne.w	8011a6e <_dtoa_r+0x68e>
 8011cee:	4621      	mov	r1, r4
 8011cf0:	2205      	movs	r2, #5
 8011cf2:	4658      	mov	r0, fp
 8011cf4:	f000 fae6 	bl	80122c4 <__multadd>
 8011cf8:	4601      	mov	r1, r0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4648      	mov	r0, r9
 8011cfe:	f000 fcf9 	bl	80126f4 <__mcmp>
 8011d02:	2800      	cmp	r0, #0
 8011d04:	f77f aeb3 	ble.w	8011a6e <_dtoa_r+0x68e>
 8011d08:	4656      	mov	r6, sl
 8011d0a:	2331      	movs	r3, #49	@ 0x31
 8011d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8011d10:	9b04      	ldr	r3, [sp, #16]
 8011d12:	3301      	adds	r3, #1
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	e6ae      	b.n	8011a76 <_dtoa_r+0x696>
 8011d18:	9c07      	ldr	r4, [sp, #28]
 8011d1a:	9704      	str	r7, [sp, #16]
 8011d1c:	4625      	mov	r5, r4
 8011d1e:	e7f3      	b.n	8011d08 <_dtoa_r+0x928>
 8011d20:	9b07      	ldr	r3, [sp, #28]
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 8104 	beq.w	8011f34 <_dtoa_r+0xb54>
 8011d2c:	2e00      	cmp	r6, #0
 8011d2e:	dd05      	ble.n	8011d3c <_dtoa_r+0x95c>
 8011d30:	4629      	mov	r1, r5
 8011d32:	4632      	mov	r2, r6
 8011d34:	4658      	mov	r0, fp
 8011d36:	f000 fc71 	bl	801261c <__lshift>
 8011d3a:	4605      	mov	r5, r0
 8011d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d05a      	beq.n	8011df8 <_dtoa_r+0xa18>
 8011d42:	6869      	ldr	r1, [r5, #4]
 8011d44:	4658      	mov	r0, fp
 8011d46:	f000 fa5b 	bl	8012200 <_Balloc>
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	b928      	cbnz	r0, 8011d5a <_dtoa_r+0x97a>
 8011d4e:	4b84      	ldr	r3, [pc, #528]	@ (8011f60 <_dtoa_r+0xb80>)
 8011d50:	4602      	mov	r2, r0
 8011d52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011d56:	f7ff bb5a 	b.w	801140e <_dtoa_r+0x2e>
 8011d5a:	692a      	ldr	r2, [r5, #16]
 8011d5c:	3202      	adds	r2, #2
 8011d5e:	0092      	lsls	r2, r2, #2
 8011d60:	f105 010c 	add.w	r1, r5, #12
 8011d64:	300c      	adds	r0, #12
 8011d66:	f7ff fa7c 	bl	8011262 <memcpy>
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	4631      	mov	r1, r6
 8011d6e:	4658      	mov	r0, fp
 8011d70:	f000 fc54 	bl	801261c <__lshift>
 8011d74:	f10a 0301 	add.w	r3, sl, #1
 8011d78:	9307      	str	r3, [sp, #28]
 8011d7a:	9b00      	ldr	r3, [sp, #0]
 8011d7c:	4453      	add	r3, sl
 8011d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d80:	9b02      	ldr	r3, [sp, #8]
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	462f      	mov	r7, r5
 8011d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d8a:	4605      	mov	r5, r0
 8011d8c:	9b07      	ldr	r3, [sp, #28]
 8011d8e:	4621      	mov	r1, r4
 8011d90:	3b01      	subs	r3, #1
 8011d92:	4648      	mov	r0, r9
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	f7ff fa99 	bl	80112cc <quorem>
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	9002      	str	r0, [sp, #8]
 8011d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011da2:	4648      	mov	r0, r9
 8011da4:	f000 fca6 	bl	80126f4 <__mcmp>
 8011da8:	462a      	mov	r2, r5
 8011daa:	9008      	str	r0, [sp, #32]
 8011dac:	4621      	mov	r1, r4
 8011dae:	4658      	mov	r0, fp
 8011db0:	f000 fcbc 	bl	801272c <__mdiff>
 8011db4:	68c2      	ldr	r2, [r0, #12]
 8011db6:	4606      	mov	r6, r0
 8011db8:	bb02      	cbnz	r2, 8011dfc <_dtoa_r+0xa1c>
 8011dba:	4601      	mov	r1, r0
 8011dbc:	4648      	mov	r0, r9
 8011dbe:	f000 fc99 	bl	80126f4 <__mcmp>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	4631      	mov	r1, r6
 8011dc6:	4658      	mov	r0, fp
 8011dc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8011dca:	f000 fa59 	bl	8012280 <_Bfree>
 8011dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011dd2:	9e07      	ldr	r6, [sp, #28]
 8011dd4:	ea43 0102 	orr.w	r1, r3, r2
 8011dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dda:	4319      	orrs	r1, r3
 8011ddc:	d110      	bne.n	8011e00 <_dtoa_r+0xa20>
 8011dde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011de2:	d029      	beq.n	8011e38 <_dtoa_r+0xa58>
 8011de4:	9b08      	ldr	r3, [sp, #32]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	dd02      	ble.n	8011df0 <_dtoa_r+0xa10>
 8011dea:	9b02      	ldr	r3, [sp, #8]
 8011dec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011df0:	9b00      	ldr	r3, [sp, #0]
 8011df2:	f883 8000 	strb.w	r8, [r3]
 8011df6:	e63f      	b.n	8011a78 <_dtoa_r+0x698>
 8011df8:	4628      	mov	r0, r5
 8011dfa:	e7bb      	b.n	8011d74 <_dtoa_r+0x994>
 8011dfc:	2201      	movs	r2, #1
 8011dfe:	e7e1      	b.n	8011dc4 <_dtoa_r+0x9e4>
 8011e00:	9b08      	ldr	r3, [sp, #32]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	db04      	blt.n	8011e10 <_dtoa_r+0xa30>
 8011e06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e08:	430b      	orrs	r3, r1
 8011e0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e0c:	430b      	orrs	r3, r1
 8011e0e:	d120      	bne.n	8011e52 <_dtoa_r+0xa72>
 8011e10:	2a00      	cmp	r2, #0
 8011e12:	dded      	ble.n	8011df0 <_dtoa_r+0xa10>
 8011e14:	4649      	mov	r1, r9
 8011e16:	2201      	movs	r2, #1
 8011e18:	4658      	mov	r0, fp
 8011e1a:	f000 fbff 	bl	801261c <__lshift>
 8011e1e:	4621      	mov	r1, r4
 8011e20:	4681      	mov	r9, r0
 8011e22:	f000 fc67 	bl	80126f4 <__mcmp>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	dc03      	bgt.n	8011e32 <_dtoa_r+0xa52>
 8011e2a:	d1e1      	bne.n	8011df0 <_dtoa_r+0xa10>
 8011e2c:	f018 0f01 	tst.w	r8, #1
 8011e30:	d0de      	beq.n	8011df0 <_dtoa_r+0xa10>
 8011e32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e36:	d1d8      	bne.n	8011dea <_dtoa_r+0xa0a>
 8011e38:	9a00      	ldr	r2, [sp, #0]
 8011e3a:	2339      	movs	r3, #57	@ 0x39
 8011e3c:	7013      	strb	r3, [r2, #0]
 8011e3e:	4633      	mov	r3, r6
 8011e40:	461e      	mov	r6, r3
 8011e42:	3b01      	subs	r3, #1
 8011e44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011e48:	2a39      	cmp	r2, #57	@ 0x39
 8011e4a:	d052      	beq.n	8011ef2 <_dtoa_r+0xb12>
 8011e4c:	3201      	adds	r2, #1
 8011e4e:	701a      	strb	r2, [r3, #0]
 8011e50:	e612      	b.n	8011a78 <_dtoa_r+0x698>
 8011e52:	2a00      	cmp	r2, #0
 8011e54:	dd07      	ble.n	8011e66 <_dtoa_r+0xa86>
 8011e56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e5a:	d0ed      	beq.n	8011e38 <_dtoa_r+0xa58>
 8011e5c:	9a00      	ldr	r2, [sp, #0]
 8011e5e:	f108 0301 	add.w	r3, r8, #1
 8011e62:	7013      	strb	r3, [r2, #0]
 8011e64:	e608      	b.n	8011a78 <_dtoa_r+0x698>
 8011e66:	9b07      	ldr	r3, [sp, #28]
 8011e68:	9a07      	ldr	r2, [sp, #28]
 8011e6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d028      	beq.n	8011ec6 <_dtoa_r+0xae6>
 8011e74:	4649      	mov	r1, r9
 8011e76:	2300      	movs	r3, #0
 8011e78:	220a      	movs	r2, #10
 8011e7a:	4658      	mov	r0, fp
 8011e7c:	f000 fa22 	bl	80122c4 <__multadd>
 8011e80:	42af      	cmp	r7, r5
 8011e82:	4681      	mov	r9, r0
 8011e84:	f04f 0300 	mov.w	r3, #0
 8011e88:	f04f 020a 	mov.w	r2, #10
 8011e8c:	4639      	mov	r1, r7
 8011e8e:	4658      	mov	r0, fp
 8011e90:	d107      	bne.n	8011ea2 <_dtoa_r+0xac2>
 8011e92:	f000 fa17 	bl	80122c4 <__multadd>
 8011e96:	4607      	mov	r7, r0
 8011e98:	4605      	mov	r5, r0
 8011e9a:	9b07      	ldr	r3, [sp, #28]
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	9307      	str	r3, [sp, #28]
 8011ea0:	e774      	b.n	8011d8c <_dtoa_r+0x9ac>
 8011ea2:	f000 fa0f 	bl	80122c4 <__multadd>
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	4607      	mov	r7, r0
 8011eaa:	2300      	movs	r3, #0
 8011eac:	220a      	movs	r2, #10
 8011eae:	4658      	mov	r0, fp
 8011eb0:	f000 fa08 	bl	80122c4 <__multadd>
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	e7f0      	b.n	8011e9a <_dtoa_r+0xaba>
 8011eb8:	9b00      	ldr	r3, [sp, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	bfcc      	ite	gt
 8011ebe:	461e      	movgt	r6, r3
 8011ec0:	2601      	movle	r6, #1
 8011ec2:	4456      	add	r6, sl
 8011ec4:	2700      	movs	r7, #0
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	2201      	movs	r2, #1
 8011eca:	4658      	mov	r0, fp
 8011ecc:	f000 fba6 	bl	801261c <__lshift>
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	4681      	mov	r9, r0
 8011ed4:	f000 fc0e 	bl	80126f4 <__mcmp>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	dcb0      	bgt.n	8011e3e <_dtoa_r+0xa5e>
 8011edc:	d102      	bne.n	8011ee4 <_dtoa_r+0xb04>
 8011ede:	f018 0f01 	tst.w	r8, #1
 8011ee2:	d1ac      	bne.n	8011e3e <_dtoa_r+0xa5e>
 8011ee4:	4633      	mov	r3, r6
 8011ee6:	461e      	mov	r6, r3
 8011ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011eec:	2a30      	cmp	r2, #48	@ 0x30
 8011eee:	d0fa      	beq.n	8011ee6 <_dtoa_r+0xb06>
 8011ef0:	e5c2      	b.n	8011a78 <_dtoa_r+0x698>
 8011ef2:	459a      	cmp	sl, r3
 8011ef4:	d1a4      	bne.n	8011e40 <_dtoa_r+0xa60>
 8011ef6:	9b04      	ldr	r3, [sp, #16]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	9304      	str	r3, [sp, #16]
 8011efc:	2331      	movs	r3, #49	@ 0x31
 8011efe:	f88a 3000 	strb.w	r3, [sl]
 8011f02:	e5b9      	b.n	8011a78 <_dtoa_r+0x698>
 8011f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011f64 <_dtoa_r+0xb84>
 8011f0a:	b11b      	cbz	r3, 8011f14 <_dtoa_r+0xb34>
 8011f0c:	f10a 0308 	add.w	r3, sl, #8
 8011f10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	4650      	mov	r0, sl
 8011f16:	b019      	add	sp, #100	@ 0x64
 8011f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	f77f ae37 	ble.w	8011b92 <_dtoa_r+0x7b2>
 8011f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f28:	2001      	movs	r0, #1
 8011f2a:	e655      	b.n	8011bd8 <_dtoa_r+0x7f8>
 8011f2c:	9b00      	ldr	r3, [sp, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	f77f aed6 	ble.w	8011ce0 <_dtoa_r+0x900>
 8011f34:	4656      	mov	r6, sl
 8011f36:	4621      	mov	r1, r4
 8011f38:	4648      	mov	r0, r9
 8011f3a:	f7ff f9c7 	bl	80112cc <quorem>
 8011f3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011f42:	f806 8b01 	strb.w	r8, [r6], #1
 8011f46:	9b00      	ldr	r3, [sp, #0]
 8011f48:	eba6 020a 	sub.w	r2, r6, sl
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	ddb3      	ble.n	8011eb8 <_dtoa_r+0xad8>
 8011f50:	4649      	mov	r1, r9
 8011f52:	2300      	movs	r3, #0
 8011f54:	220a      	movs	r2, #10
 8011f56:	4658      	mov	r0, fp
 8011f58:	f000 f9b4 	bl	80122c4 <__multadd>
 8011f5c:	4681      	mov	r9, r0
 8011f5e:	e7ea      	b.n	8011f36 <_dtoa_r+0xb56>
 8011f60:	08015507 	.word	0x08015507
 8011f64:	080154a2 	.word	0x080154a2

08011f68 <_free_r>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	2900      	cmp	r1, #0
 8011f6e:	d041      	beq.n	8011ff4 <_free_r+0x8c>
 8011f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f74:	1f0c      	subs	r4, r1, #4
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	bfb8      	it	lt
 8011f7a:	18e4      	addlt	r4, r4, r3
 8011f7c:	f000 f934 	bl	80121e8 <__malloc_lock>
 8011f80:	4a1d      	ldr	r2, [pc, #116]	@ (8011ff8 <_free_r+0x90>)
 8011f82:	6813      	ldr	r3, [r2, #0]
 8011f84:	b933      	cbnz	r3, 8011f94 <_free_r+0x2c>
 8011f86:	6063      	str	r3, [r4, #4]
 8011f88:	6014      	str	r4, [r2, #0]
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f90:	f000 b930 	b.w	80121f4 <__malloc_unlock>
 8011f94:	42a3      	cmp	r3, r4
 8011f96:	d908      	bls.n	8011faa <_free_r+0x42>
 8011f98:	6820      	ldr	r0, [r4, #0]
 8011f9a:	1821      	adds	r1, r4, r0
 8011f9c:	428b      	cmp	r3, r1
 8011f9e:	bf01      	itttt	eq
 8011fa0:	6819      	ldreq	r1, [r3, #0]
 8011fa2:	685b      	ldreq	r3, [r3, #4]
 8011fa4:	1809      	addeq	r1, r1, r0
 8011fa6:	6021      	streq	r1, [r4, #0]
 8011fa8:	e7ed      	b.n	8011f86 <_free_r+0x1e>
 8011faa:	461a      	mov	r2, r3
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	b10b      	cbz	r3, 8011fb4 <_free_r+0x4c>
 8011fb0:	42a3      	cmp	r3, r4
 8011fb2:	d9fa      	bls.n	8011faa <_free_r+0x42>
 8011fb4:	6811      	ldr	r1, [r2, #0]
 8011fb6:	1850      	adds	r0, r2, r1
 8011fb8:	42a0      	cmp	r0, r4
 8011fba:	d10b      	bne.n	8011fd4 <_free_r+0x6c>
 8011fbc:	6820      	ldr	r0, [r4, #0]
 8011fbe:	4401      	add	r1, r0
 8011fc0:	1850      	adds	r0, r2, r1
 8011fc2:	4283      	cmp	r3, r0
 8011fc4:	6011      	str	r1, [r2, #0]
 8011fc6:	d1e0      	bne.n	8011f8a <_free_r+0x22>
 8011fc8:	6818      	ldr	r0, [r3, #0]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	6053      	str	r3, [r2, #4]
 8011fce:	4408      	add	r0, r1
 8011fd0:	6010      	str	r0, [r2, #0]
 8011fd2:	e7da      	b.n	8011f8a <_free_r+0x22>
 8011fd4:	d902      	bls.n	8011fdc <_free_r+0x74>
 8011fd6:	230c      	movs	r3, #12
 8011fd8:	602b      	str	r3, [r5, #0]
 8011fda:	e7d6      	b.n	8011f8a <_free_r+0x22>
 8011fdc:	6820      	ldr	r0, [r4, #0]
 8011fde:	1821      	adds	r1, r4, r0
 8011fe0:	428b      	cmp	r3, r1
 8011fe2:	bf04      	itt	eq
 8011fe4:	6819      	ldreq	r1, [r3, #0]
 8011fe6:	685b      	ldreq	r3, [r3, #4]
 8011fe8:	6063      	str	r3, [r4, #4]
 8011fea:	bf04      	itt	eq
 8011fec:	1809      	addeq	r1, r1, r0
 8011fee:	6021      	streq	r1, [r4, #0]
 8011ff0:	6054      	str	r4, [r2, #4]
 8011ff2:	e7ca      	b.n	8011f8a <_free_r+0x22>
 8011ff4:	bd38      	pop	{r3, r4, r5, pc}
 8011ff6:	bf00      	nop
 8011ff8:	2000a76c 	.word	0x2000a76c

08011ffc <_findenv_r>:
 8011ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012000:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8012070 <_findenv_r+0x74>
 8012004:	4606      	mov	r6, r0
 8012006:	4689      	mov	r9, r1
 8012008:	4617      	mov	r7, r2
 801200a:	f001 f837 	bl	801307c <__env_lock>
 801200e:	f8da 4000 	ldr.w	r4, [sl]
 8012012:	b134      	cbz	r4, 8012022 <_findenv_r+0x26>
 8012014:	464b      	mov	r3, r9
 8012016:	4698      	mov	r8, r3
 8012018:	f813 2b01 	ldrb.w	r2, [r3], #1
 801201c:	b13a      	cbz	r2, 801202e <_findenv_r+0x32>
 801201e:	2a3d      	cmp	r2, #61	@ 0x3d
 8012020:	d1f9      	bne.n	8012016 <_findenv_r+0x1a>
 8012022:	4630      	mov	r0, r6
 8012024:	f001 f830 	bl	8013088 <__env_unlock>
 8012028:	2000      	movs	r0, #0
 801202a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202e:	eba8 0809 	sub.w	r8, r8, r9
 8012032:	46a3      	mov	fp, r4
 8012034:	f854 0b04 	ldr.w	r0, [r4], #4
 8012038:	2800      	cmp	r0, #0
 801203a:	d0f2      	beq.n	8012022 <_findenv_r+0x26>
 801203c:	4642      	mov	r2, r8
 801203e:	4649      	mov	r1, r9
 8012040:	f000 ff34 	bl	8012eac <strncmp>
 8012044:	2800      	cmp	r0, #0
 8012046:	d1f4      	bne.n	8012032 <_findenv_r+0x36>
 8012048:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801204c:	eb03 0508 	add.w	r5, r3, r8
 8012050:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012054:	2b3d      	cmp	r3, #61	@ 0x3d
 8012056:	d1ec      	bne.n	8012032 <_findenv_r+0x36>
 8012058:	f8da 3000 	ldr.w	r3, [sl]
 801205c:	ebab 0303 	sub.w	r3, fp, r3
 8012060:	109b      	asrs	r3, r3, #2
 8012062:	4630      	mov	r0, r6
 8012064:	603b      	str	r3, [r7, #0]
 8012066:	f001 f80f 	bl	8013088 <__env_unlock>
 801206a:	1c68      	adds	r0, r5, #1
 801206c:	e7dd      	b.n	801202a <_findenv_r+0x2e>
 801206e:	bf00      	nop
 8012070:	2000000c 	.word	0x2000000c

08012074 <_getenv_r>:
 8012074:	b507      	push	{r0, r1, r2, lr}
 8012076:	aa01      	add	r2, sp, #4
 8012078:	f7ff ffc0 	bl	8011ffc <_findenv_r>
 801207c:	b003      	add	sp, #12
 801207e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012084 <malloc>:
 8012084:	4b02      	ldr	r3, [pc, #8]	@ (8012090 <malloc+0xc>)
 8012086:	4601      	mov	r1, r0
 8012088:	6818      	ldr	r0, [r3, #0]
 801208a:	f000 b82d 	b.w	80120e8 <_malloc_r>
 801208e:	bf00      	nop
 8012090:	20000030 	.word	0x20000030

08012094 <free>:
 8012094:	4b02      	ldr	r3, [pc, #8]	@ (80120a0 <free+0xc>)
 8012096:	4601      	mov	r1, r0
 8012098:	6818      	ldr	r0, [r3, #0]
 801209a:	f7ff bf65 	b.w	8011f68 <_free_r>
 801209e:	bf00      	nop
 80120a0:	20000030 	.word	0x20000030

080120a4 <sbrk_aligned>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	4e0f      	ldr	r6, [pc, #60]	@ (80120e4 <sbrk_aligned+0x40>)
 80120a8:	460c      	mov	r4, r1
 80120aa:	6831      	ldr	r1, [r6, #0]
 80120ac:	4605      	mov	r5, r0
 80120ae:	b911      	cbnz	r1, 80120b6 <sbrk_aligned+0x12>
 80120b0:	f000 ffb8 	bl	8013024 <_sbrk_r>
 80120b4:	6030      	str	r0, [r6, #0]
 80120b6:	4621      	mov	r1, r4
 80120b8:	4628      	mov	r0, r5
 80120ba:	f000 ffb3 	bl	8013024 <_sbrk_r>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	d103      	bne.n	80120ca <sbrk_aligned+0x26>
 80120c2:	f04f 34ff 	mov.w	r4, #4294967295
 80120c6:	4620      	mov	r0, r4
 80120c8:	bd70      	pop	{r4, r5, r6, pc}
 80120ca:	1cc4      	adds	r4, r0, #3
 80120cc:	f024 0403 	bic.w	r4, r4, #3
 80120d0:	42a0      	cmp	r0, r4
 80120d2:	d0f8      	beq.n	80120c6 <sbrk_aligned+0x22>
 80120d4:	1a21      	subs	r1, r4, r0
 80120d6:	4628      	mov	r0, r5
 80120d8:	f000 ffa4 	bl	8013024 <_sbrk_r>
 80120dc:	3001      	adds	r0, #1
 80120de:	d1f2      	bne.n	80120c6 <sbrk_aligned+0x22>
 80120e0:	e7ef      	b.n	80120c2 <sbrk_aligned+0x1e>
 80120e2:	bf00      	nop
 80120e4:	2000a768 	.word	0x2000a768

080120e8 <_malloc_r>:
 80120e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120ec:	1ccd      	adds	r5, r1, #3
 80120ee:	f025 0503 	bic.w	r5, r5, #3
 80120f2:	3508      	adds	r5, #8
 80120f4:	2d0c      	cmp	r5, #12
 80120f6:	bf38      	it	cc
 80120f8:	250c      	movcc	r5, #12
 80120fa:	2d00      	cmp	r5, #0
 80120fc:	4606      	mov	r6, r0
 80120fe:	db01      	blt.n	8012104 <_malloc_r+0x1c>
 8012100:	42a9      	cmp	r1, r5
 8012102:	d904      	bls.n	801210e <_malloc_r+0x26>
 8012104:	230c      	movs	r3, #12
 8012106:	6033      	str	r3, [r6, #0]
 8012108:	2000      	movs	r0, #0
 801210a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801210e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121e4 <_malloc_r+0xfc>
 8012112:	f000 f869 	bl	80121e8 <__malloc_lock>
 8012116:	f8d8 3000 	ldr.w	r3, [r8]
 801211a:	461c      	mov	r4, r3
 801211c:	bb44      	cbnz	r4, 8012170 <_malloc_r+0x88>
 801211e:	4629      	mov	r1, r5
 8012120:	4630      	mov	r0, r6
 8012122:	f7ff ffbf 	bl	80120a4 <sbrk_aligned>
 8012126:	1c43      	adds	r3, r0, #1
 8012128:	4604      	mov	r4, r0
 801212a:	d158      	bne.n	80121de <_malloc_r+0xf6>
 801212c:	f8d8 4000 	ldr.w	r4, [r8]
 8012130:	4627      	mov	r7, r4
 8012132:	2f00      	cmp	r7, #0
 8012134:	d143      	bne.n	80121be <_malloc_r+0xd6>
 8012136:	2c00      	cmp	r4, #0
 8012138:	d04b      	beq.n	80121d2 <_malloc_r+0xea>
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	4639      	mov	r1, r7
 801213e:	4630      	mov	r0, r6
 8012140:	eb04 0903 	add.w	r9, r4, r3
 8012144:	f000 ff6e 	bl	8013024 <_sbrk_r>
 8012148:	4581      	cmp	r9, r0
 801214a:	d142      	bne.n	80121d2 <_malloc_r+0xea>
 801214c:	6821      	ldr	r1, [r4, #0]
 801214e:	1a6d      	subs	r5, r5, r1
 8012150:	4629      	mov	r1, r5
 8012152:	4630      	mov	r0, r6
 8012154:	f7ff ffa6 	bl	80120a4 <sbrk_aligned>
 8012158:	3001      	adds	r0, #1
 801215a:	d03a      	beq.n	80121d2 <_malloc_r+0xea>
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	442b      	add	r3, r5
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	f8d8 3000 	ldr.w	r3, [r8]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	bb62      	cbnz	r2, 80121c4 <_malloc_r+0xdc>
 801216a:	f8c8 7000 	str.w	r7, [r8]
 801216e:	e00f      	b.n	8012190 <_malloc_r+0xa8>
 8012170:	6822      	ldr	r2, [r4, #0]
 8012172:	1b52      	subs	r2, r2, r5
 8012174:	d420      	bmi.n	80121b8 <_malloc_r+0xd0>
 8012176:	2a0b      	cmp	r2, #11
 8012178:	d917      	bls.n	80121aa <_malloc_r+0xc2>
 801217a:	1961      	adds	r1, r4, r5
 801217c:	42a3      	cmp	r3, r4
 801217e:	6025      	str	r5, [r4, #0]
 8012180:	bf18      	it	ne
 8012182:	6059      	strne	r1, [r3, #4]
 8012184:	6863      	ldr	r3, [r4, #4]
 8012186:	bf08      	it	eq
 8012188:	f8c8 1000 	streq.w	r1, [r8]
 801218c:	5162      	str	r2, [r4, r5]
 801218e:	604b      	str	r3, [r1, #4]
 8012190:	4630      	mov	r0, r6
 8012192:	f000 f82f 	bl	80121f4 <__malloc_unlock>
 8012196:	f104 000b 	add.w	r0, r4, #11
 801219a:	1d23      	adds	r3, r4, #4
 801219c:	f020 0007 	bic.w	r0, r0, #7
 80121a0:	1ac2      	subs	r2, r0, r3
 80121a2:	bf1c      	itt	ne
 80121a4:	1a1b      	subne	r3, r3, r0
 80121a6:	50a3      	strne	r3, [r4, r2]
 80121a8:	e7af      	b.n	801210a <_malloc_r+0x22>
 80121aa:	6862      	ldr	r2, [r4, #4]
 80121ac:	42a3      	cmp	r3, r4
 80121ae:	bf0c      	ite	eq
 80121b0:	f8c8 2000 	streq.w	r2, [r8]
 80121b4:	605a      	strne	r2, [r3, #4]
 80121b6:	e7eb      	b.n	8012190 <_malloc_r+0xa8>
 80121b8:	4623      	mov	r3, r4
 80121ba:	6864      	ldr	r4, [r4, #4]
 80121bc:	e7ae      	b.n	801211c <_malloc_r+0x34>
 80121be:	463c      	mov	r4, r7
 80121c0:	687f      	ldr	r7, [r7, #4]
 80121c2:	e7b6      	b.n	8012132 <_malloc_r+0x4a>
 80121c4:	461a      	mov	r2, r3
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	42a3      	cmp	r3, r4
 80121ca:	d1fb      	bne.n	80121c4 <_malloc_r+0xdc>
 80121cc:	2300      	movs	r3, #0
 80121ce:	6053      	str	r3, [r2, #4]
 80121d0:	e7de      	b.n	8012190 <_malloc_r+0xa8>
 80121d2:	230c      	movs	r3, #12
 80121d4:	6033      	str	r3, [r6, #0]
 80121d6:	4630      	mov	r0, r6
 80121d8:	f000 f80c 	bl	80121f4 <__malloc_unlock>
 80121dc:	e794      	b.n	8012108 <_malloc_r+0x20>
 80121de:	6005      	str	r5, [r0, #0]
 80121e0:	e7d6      	b.n	8012190 <_malloc_r+0xa8>
 80121e2:	bf00      	nop
 80121e4:	2000a76c 	.word	0x2000a76c

080121e8 <__malloc_lock>:
 80121e8:	4801      	ldr	r0, [pc, #4]	@ (80121f0 <__malloc_lock+0x8>)
 80121ea:	f7ff b82f 	b.w	801124c <__retarget_lock_acquire_recursive>
 80121ee:	bf00      	nop
 80121f0:	2000a766 	.word	0x2000a766

080121f4 <__malloc_unlock>:
 80121f4:	4801      	ldr	r0, [pc, #4]	@ (80121fc <__malloc_unlock+0x8>)
 80121f6:	f7ff b82b 	b.w	8011250 <__retarget_lock_release_recursive>
 80121fa:	bf00      	nop
 80121fc:	2000a766 	.word	0x2000a766

08012200 <_Balloc>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	69c6      	ldr	r6, [r0, #28]
 8012204:	4604      	mov	r4, r0
 8012206:	460d      	mov	r5, r1
 8012208:	b976      	cbnz	r6, 8012228 <_Balloc+0x28>
 801220a:	2010      	movs	r0, #16
 801220c:	f7ff ff3a 	bl	8012084 <malloc>
 8012210:	4602      	mov	r2, r0
 8012212:	61e0      	str	r0, [r4, #28]
 8012214:	b920      	cbnz	r0, 8012220 <_Balloc+0x20>
 8012216:	4b18      	ldr	r3, [pc, #96]	@ (8012278 <_Balloc+0x78>)
 8012218:	4818      	ldr	r0, [pc, #96]	@ (801227c <_Balloc+0x7c>)
 801221a:	216b      	movs	r1, #107	@ 0x6b
 801221c:	f7ff f830 	bl	8011280 <__assert_func>
 8012220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012224:	6006      	str	r6, [r0, #0]
 8012226:	60c6      	str	r6, [r0, #12]
 8012228:	69e6      	ldr	r6, [r4, #28]
 801222a:	68f3      	ldr	r3, [r6, #12]
 801222c:	b183      	cbz	r3, 8012250 <_Balloc+0x50>
 801222e:	69e3      	ldr	r3, [r4, #28]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012236:	b9b8      	cbnz	r0, 8012268 <_Balloc+0x68>
 8012238:	2101      	movs	r1, #1
 801223a:	fa01 f605 	lsl.w	r6, r1, r5
 801223e:	1d72      	adds	r2, r6, #5
 8012240:	0092      	lsls	r2, r2, #2
 8012242:	4620      	mov	r0, r4
 8012244:	f000 ff05 	bl	8013052 <_calloc_r>
 8012248:	b160      	cbz	r0, 8012264 <_Balloc+0x64>
 801224a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801224e:	e00e      	b.n	801226e <_Balloc+0x6e>
 8012250:	2221      	movs	r2, #33	@ 0x21
 8012252:	2104      	movs	r1, #4
 8012254:	4620      	mov	r0, r4
 8012256:	f000 fefc 	bl	8013052 <_calloc_r>
 801225a:	69e3      	ldr	r3, [r4, #28]
 801225c:	60f0      	str	r0, [r6, #12]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1e4      	bne.n	801222e <_Balloc+0x2e>
 8012264:	2000      	movs	r0, #0
 8012266:	bd70      	pop	{r4, r5, r6, pc}
 8012268:	6802      	ldr	r2, [r0, #0]
 801226a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801226e:	2300      	movs	r3, #0
 8012270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012274:	e7f7      	b.n	8012266 <_Balloc+0x66>
 8012276:	bf00      	nop
 8012278:	0801525c 	.word	0x0801525c
 801227c:	08015518 	.word	0x08015518

08012280 <_Bfree>:
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	69c6      	ldr	r6, [r0, #28]
 8012284:	4605      	mov	r5, r0
 8012286:	460c      	mov	r4, r1
 8012288:	b976      	cbnz	r6, 80122a8 <_Bfree+0x28>
 801228a:	2010      	movs	r0, #16
 801228c:	f7ff fefa 	bl	8012084 <malloc>
 8012290:	4602      	mov	r2, r0
 8012292:	61e8      	str	r0, [r5, #28]
 8012294:	b920      	cbnz	r0, 80122a0 <_Bfree+0x20>
 8012296:	4b09      	ldr	r3, [pc, #36]	@ (80122bc <_Bfree+0x3c>)
 8012298:	4809      	ldr	r0, [pc, #36]	@ (80122c0 <_Bfree+0x40>)
 801229a:	218f      	movs	r1, #143	@ 0x8f
 801229c:	f7fe fff0 	bl	8011280 <__assert_func>
 80122a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122a4:	6006      	str	r6, [r0, #0]
 80122a6:	60c6      	str	r6, [r0, #12]
 80122a8:	b13c      	cbz	r4, 80122ba <_Bfree+0x3a>
 80122aa:	69eb      	ldr	r3, [r5, #28]
 80122ac:	6862      	ldr	r2, [r4, #4]
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122b4:	6021      	str	r1, [r4, #0]
 80122b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122ba:	bd70      	pop	{r4, r5, r6, pc}
 80122bc:	0801525c 	.word	0x0801525c
 80122c0:	08015518 	.word	0x08015518

080122c4 <__multadd>:
 80122c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c8:	690d      	ldr	r5, [r1, #16]
 80122ca:	4607      	mov	r7, r0
 80122cc:	460c      	mov	r4, r1
 80122ce:	461e      	mov	r6, r3
 80122d0:	f101 0c14 	add.w	ip, r1, #20
 80122d4:	2000      	movs	r0, #0
 80122d6:	f8dc 3000 	ldr.w	r3, [ip]
 80122da:	b299      	uxth	r1, r3
 80122dc:	fb02 6101 	mla	r1, r2, r1, r6
 80122e0:	0c1e      	lsrs	r6, r3, #16
 80122e2:	0c0b      	lsrs	r3, r1, #16
 80122e4:	fb02 3306 	mla	r3, r2, r6, r3
 80122e8:	b289      	uxth	r1, r1
 80122ea:	3001      	adds	r0, #1
 80122ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122f0:	4285      	cmp	r5, r0
 80122f2:	f84c 1b04 	str.w	r1, [ip], #4
 80122f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122fa:	dcec      	bgt.n	80122d6 <__multadd+0x12>
 80122fc:	b30e      	cbz	r6, 8012342 <__multadd+0x7e>
 80122fe:	68a3      	ldr	r3, [r4, #8]
 8012300:	42ab      	cmp	r3, r5
 8012302:	dc19      	bgt.n	8012338 <__multadd+0x74>
 8012304:	6861      	ldr	r1, [r4, #4]
 8012306:	4638      	mov	r0, r7
 8012308:	3101      	adds	r1, #1
 801230a:	f7ff ff79 	bl	8012200 <_Balloc>
 801230e:	4680      	mov	r8, r0
 8012310:	b928      	cbnz	r0, 801231e <__multadd+0x5a>
 8012312:	4602      	mov	r2, r0
 8012314:	4b0c      	ldr	r3, [pc, #48]	@ (8012348 <__multadd+0x84>)
 8012316:	480d      	ldr	r0, [pc, #52]	@ (801234c <__multadd+0x88>)
 8012318:	21ba      	movs	r1, #186	@ 0xba
 801231a:	f7fe ffb1 	bl	8011280 <__assert_func>
 801231e:	6922      	ldr	r2, [r4, #16]
 8012320:	3202      	adds	r2, #2
 8012322:	f104 010c 	add.w	r1, r4, #12
 8012326:	0092      	lsls	r2, r2, #2
 8012328:	300c      	adds	r0, #12
 801232a:	f7fe ff9a 	bl	8011262 <memcpy>
 801232e:	4621      	mov	r1, r4
 8012330:	4638      	mov	r0, r7
 8012332:	f7ff ffa5 	bl	8012280 <_Bfree>
 8012336:	4644      	mov	r4, r8
 8012338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801233c:	3501      	adds	r5, #1
 801233e:	615e      	str	r6, [r3, #20]
 8012340:	6125      	str	r5, [r4, #16]
 8012342:	4620      	mov	r0, r4
 8012344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012348:	08015507 	.word	0x08015507
 801234c:	08015518 	.word	0x08015518

08012350 <__hi0bits>:
 8012350:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012354:	4603      	mov	r3, r0
 8012356:	bf36      	itet	cc
 8012358:	0403      	lslcc	r3, r0, #16
 801235a:	2000      	movcs	r0, #0
 801235c:	2010      	movcc	r0, #16
 801235e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012362:	bf3c      	itt	cc
 8012364:	021b      	lslcc	r3, r3, #8
 8012366:	3008      	addcc	r0, #8
 8012368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801236c:	bf3c      	itt	cc
 801236e:	011b      	lslcc	r3, r3, #4
 8012370:	3004      	addcc	r0, #4
 8012372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012376:	bf3c      	itt	cc
 8012378:	009b      	lslcc	r3, r3, #2
 801237a:	3002      	addcc	r0, #2
 801237c:	2b00      	cmp	r3, #0
 801237e:	db05      	blt.n	801238c <__hi0bits+0x3c>
 8012380:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012384:	f100 0001 	add.w	r0, r0, #1
 8012388:	bf08      	it	eq
 801238a:	2020      	moveq	r0, #32
 801238c:	4770      	bx	lr

0801238e <__lo0bits>:
 801238e:	6803      	ldr	r3, [r0, #0]
 8012390:	4602      	mov	r2, r0
 8012392:	f013 0007 	ands.w	r0, r3, #7
 8012396:	d00b      	beq.n	80123b0 <__lo0bits+0x22>
 8012398:	07d9      	lsls	r1, r3, #31
 801239a:	d421      	bmi.n	80123e0 <__lo0bits+0x52>
 801239c:	0798      	lsls	r0, r3, #30
 801239e:	bf49      	itett	mi
 80123a0:	085b      	lsrmi	r3, r3, #1
 80123a2:	089b      	lsrpl	r3, r3, #2
 80123a4:	2001      	movmi	r0, #1
 80123a6:	6013      	strmi	r3, [r2, #0]
 80123a8:	bf5c      	itt	pl
 80123aa:	6013      	strpl	r3, [r2, #0]
 80123ac:	2002      	movpl	r0, #2
 80123ae:	4770      	bx	lr
 80123b0:	b299      	uxth	r1, r3
 80123b2:	b909      	cbnz	r1, 80123b8 <__lo0bits+0x2a>
 80123b4:	0c1b      	lsrs	r3, r3, #16
 80123b6:	2010      	movs	r0, #16
 80123b8:	b2d9      	uxtb	r1, r3
 80123ba:	b909      	cbnz	r1, 80123c0 <__lo0bits+0x32>
 80123bc:	3008      	adds	r0, #8
 80123be:	0a1b      	lsrs	r3, r3, #8
 80123c0:	0719      	lsls	r1, r3, #28
 80123c2:	bf04      	itt	eq
 80123c4:	091b      	lsreq	r3, r3, #4
 80123c6:	3004      	addeq	r0, #4
 80123c8:	0799      	lsls	r1, r3, #30
 80123ca:	bf04      	itt	eq
 80123cc:	089b      	lsreq	r3, r3, #2
 80123ce:	3002      	addeq	r0, #2
 80123d0:	07d9      	lsls	r1, r3, #31
 80123d2:	d403      	bmi.n	80123dc <__lo0bits+0x4e>
 80123d4:	085b      	lsrs	r3, r3, #1
 80123d6:	f100 0001 	add.w	r0, r0, #1
 80123da:	d003      	beq.n	80123e4 <__lo0bits+0x56>
 80123dc:	6013      	str	r3, [r2, #0]
 80123de:	4770      	bx	lr
 80123e0:	2000      	movs	r0, #0
 80123e2:	4770      	bx	lr
 80123e4:	2020      	movs	r0, #32
 80123e6:	4770      	bx	lr

080123e8 <__i2b>:
 80123e8:	b510      	push	{r4, lr}
 80123ea:	460c      	mov	r4, r1
 80123ec:	2101      	movs	r1, #1
 80123ee:	f7ff ff07 	bl	8012200 <_Balloc>
 80123f2:	4602      	mov	r2, r0
 80123f4:	b928      	cbnz	r0, 8012402 <__i2b+0x1a>
 80123f6:	4b05      	ldr	r3, [pc, #20]	@ (801240c <__i2b+0x24>)
 80123f8:	4805      	ldr	r0, [pc, #20]	@ (8012410 <__i2b+0x28>)
 80123fa:	f240 1145 	movw	r1, #325	@ 0x145
 80123fe:	f7fe ff3f 	bl	8011280 <__assert_func>
 8012402:	2301      	movs	r3, #1
 8012404:	6144      	str	r4, [r0, #20]
 8012406:	6103      	str	r3, [r0, #16]
 8012408:	bd10      	pop	{r4, pc}
 801240a:	bf00      	nop
 801240c:	08015507 	.word	0x08015507
 8012410:	08015518 	.word	0x08015518

08012414 <__multiply>:
 8012414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012418:	4614      	mov	r4, r2
 801241a:	690a      	ldr	r2, [r1, #16]
 801241c:	6923      	ldr	r3, [r4, #16]
 801241e:	429a      	cmp	r2, r3
 8012420:	bfa8      	it	ge
 8012422:	4623      	movge	r3, r4
 8012424:	460f      	mov	r7, r1
 8012426:	bfa4      	itt	ge
 8012428:	460c      	movge	r4, r1
 801242a:	461f      	movge	r7, r3
 801242c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012430:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012434:	68a3      	ldr	r3, [r4, #8]
 8012436:	6861      	ldr	r1, [r4, #4]
 8012438:	eb0a 0609 	add.w	r6, sl, r9
 801243c:	42b3      	cmp	r3, r6
 801243e:	b085      	sub	sp, #20
 8012440:	bfb8      	it	lt
 8012442:	3101      	addlt	r1, #1
 8012444:	f7ff fedc 	bl	8012200 <_Balloc>
 8012448:	b930      	cbnz	r0, 8012458 <__multiply+0x44>
 801244a:	4602      	mov	r2, r0
 801244c:	4b44      	ldr	r3, [pc, #272]	@ (8012560 <__multiply+0x14c>)
 801244e:	4845      	ldr	r0, [pc, #276]	@ (8012564 <__multiply+0x150>)
 8012450:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012454:	f7fe ff14 	bl	8011280 <__assert_func>
 8012458:	f100 0514 	add.w	r5, r0, #20
 801245c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012460:	462b      	mov	r3, r5
 8012462:	2200      	movs	r2, #0
 8012464:	4543      	cmp	r3, r8
 8012466:	d321      	bcc.n	80124ac <__multiply+0x98>
 8012468:	f107 0114 	add.w	r1, r7, #20
 801246c:	f104 0214 	add.w	r2, r4, #20
 8012470:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012474:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012478:	9302      	str	r3, [sp, #8]
 801247a:	1b13      	subs	r3, r2, r4
 801247c:	3b15      	subs	r3, #21
 801247e:	f023 0303 	bic.w	r3, r3, #3
 8012482:	3304      	adds	r3, #4
 8012484:	f104 0715 	add.w	r7, r4, #21
 8012488:	42ba      	cmp	r2, r7
 801248a:	bf38      	it	cc
 801248c:	2304      	movcc	r3, #4
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	9b02      	ldr	r3, [sp, #8]
 8012492:	9103      	str	r1, [sp, #12]
 8012494:	428b      	cmp	r3, r1
 8012496:	d80c      	bhi.n	80124b2 <__multiply+0x9e>
 8012498:	2e00      	cmp	r6, #0
 801249a:	dd03      	ble.n	80124a4 <__multiply+0x90>
 801249c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d05b      	beq.n	801255c <__multiply+0x148>
 80124a4:	6106      	str	r6, [r0, #16]
 80124a6:	b005      	add	sp, #20
 80124a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ac:	f843 2b04 	str.w	r2, [r3], #4
 80124b0:	e7d8      	b.n	8012464 <__multiply+0x50>
 80124b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80124b6:	f1ba 0f00 	cmp.w	sl, #0
 80124ba:	d024      	beq.n	8012506 <__multiply+0xf2>
 80124bc:	f104 0e14 	add.w	lr, r4, #20
 80124c0:	46a9      	mov	r9, r5
 80124c2:	f04f 0c00 	mov.w	ip, #0
 80124c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80124ca:	f8d9 3000 	ldr.w	r3, [r9]
 80124ce:	fa1f fb87 	uxth.w	fp, r7
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80124d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80124dc:	f8d9 7000 	ldr.w	r7, [r9]
 80124e0:	4463      	add	r3, ip
 80124e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80124e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80124ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124f4:	4572      	cmp	r2, lr
 80124f6:	f849 3b04 	str.w	r3, [r9], #4
 80124fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80124fe:	d8e2      	bhi.n	80124c6 <__multiply+0xb2>
 8012500:	9b01      	ldr	r3, [sp, #4]
 8012502:	f845 c003 	str.w	ip, [r5, r3]
 8012506:	9b03      	ldr	r3, [sp, #12]
 8012508:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801250c:	3104      	adds	r1, #4
 801250e:	f1b9 0f00 	cmp.w	r9, #0
 8012512:	d021      	beq.n	8012558 <__multiply+0x144>
 8012514:	682b      	ldr	r3, [r5, #0]
 8012516:	f104 0c14 	add.w	ip, r4, #20
 801251a:	46ae      	mov	lr, r5
 801251c:	f04f 0a00 	mov.w	sl, #0
 8012520:	f8bc b000 	ldrh.w	fp, [ip]
 8012524:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012528:	fb09 770b 	mla	r7, r9, fp, r7
 801252c:	4457      	add	r7, sl
 801252e:	b29b      	uxth	r3, r3
 8012530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012534:	f84e 3b04 	str.w	r3, [lr], #4
 8012538:	f85c 3b04 	ldr.w	r3, [ip], #4
 801253c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012540:	f8be 3000 	ldrh.w	r3, [lr]
 8012544:	fb09 330a 	mla	r3, r9, sl, r3
 8012548:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801254c:	4562      	cmp	r2, ip
 801254e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012552:	d8e5      	bhi.n	8012520 <__multiply+0x10c>
 8012554:	9f01      	ldr	r7, [sp, #4]
 8012556:	51eb      	str	r3, [r5, r7]
 8012558:	3504      	adds	r5, #4
 801255a:	e799      	b.n	8012490 <__multiply+0x7c>
 801255c:	3e01      	subs	r6, #1
 801255e:	e79b      	b.n	8012498 <__multiply+0x84>
 8012560:	08015507 	.word	0x08015507
 8012564:	08015518 	.word	0x08015518

08012568 <__pow5mult>:
 8012568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801256c:	4615      	mov	r5, r2
 801256e:	f012 0203 	ands.w	r2, r2, #3
 8012572:	4607      	mov	r7, r0
 8012574:	460e      	mov	r6, r1
 8012576:	d007      	beq.n	8012588 <__pow5mult+0x20>
 8012578:	4c25      	ldr	r4, [pc, #148]	@ (8012610 <__pow5mult+0xa8>)
 801257a:	3a01      	subs	r2, #1
 801257c:	2300      	movs	r3, #0
 801257e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012582:	f7ff fe9f 	bl	80122c4 <__multadd>
 8012586:	4606      	mov	r6, r0
 8012588:	10ad      	asrs	r5, r5, #2
 801258a:	d03d      	beq.n	8012608 <__pow5mult+0xa0>
 801258c:	69fc      	ldr	r4, [r7, #28]
 801258e:	b97c      	cbnz	r4, 80125b0 <__pow5mult+0x48>
 8012590:	2010      	movs	r0, #16
 8012592:	f7ff fd77 	bl	8012084 <malloc>
 8012596:	4602      	mov	r2, r0
 8012598:	61f8      	str	r0, [r7, #28]
 801259a:	b928      	cbnz	r0, 80125a8 <__pow5mult+0x40>
 801259c:	4b1d      	ldr	r3, [pc, #116]	@ (8012614 <__pow5mult+0xac>)
 801259e:	481e      	ldr	r0, [pc, #120]	@ (8012618 <__pow5mult+0xb0>)
 80125a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80125a4:	f7fe fe6c 	bl	8011280 <__assert_func>
 80125a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125ac:	6004      	str	r4, [r0, #0]
 80125ae:	60c4      	str	r4, [r0, #12]
 80125b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80125b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125b8:	b94c      	cbnz	r4, 80125ce <__pow5mult+0x66>
 80125ba:	f240 2171 	movw	r1, #625	@ 0x271
 80125be:	4638      	mov	r0, r7
 80125c0:	f7ff ff12 	bl	80123e8 <__i2b>
 80125c4:	2300      	movs	r3, #0
 80125c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80125ca:	4604      	mov	r4, r0
 80125cc:	6003      	str	r3, [r0, #0]
 80125ce:	f04f 0900 	mov.w	r9, #0
 80125d2:	07eb      	lsls	r3, r5, #31
 80125d4:	d50a      	bpl.n	80125ec <__pow5mult+0x84>
 80125d6:	4631      	mov	r1, r6
 80125d8:	4622      	mov	r2, r4
 80125da:	4638      	mov	r0, r7
 80125dc:	f7ff ff1a 	bl	8012414 <__multiply>
 80125e0:	4631      	mov	r1, r6
 80125e2:	4680      	mov	r8, r0
 80125e4:	4638      	mov	r0, r7
 80125e6:	f7ff fe4b 	bl	8012280 <_Bfree>
 80125ea:	4646      	mov	r6, r8
 80125ec:	106d      	asrs	r5, r5, #1
 80125ee:	d00b      	beq.n	8012608 <__pow5mult+0xa0>
 80125f0:	6820      	ldr	r0, [r4, #0]
 80125f2:	b938      	cbnz	r0, 8012604 <__pow5mult+0x9c>
 80125f4:	4622      	mov	r2, r4
 80125f6:	4621      	mov	r1, r4
 80125f8:	4638      	mov	r0, r7
 80125fa:	f7ff ff0b 	bl	8012414 <__multiply>
 80125fe:	6020      	str	r0, [r4, #0]
 8012600:	f8c0 9000 	str.w	r9, [r0]
 8012604:	4604      	mov	r4, r0
 8012606:	e7e4      	b.n	80125d2 <__pow5mult+0x6a>
 8012608:	4630      	mov	r0, r6
 801260a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801260e:	bf00      	nop
 8012610:	08015574 	.word	0x08015574
 8012614:	0801525c 	.word	0x0801525c
 8012618:	08015518 	.word	0x08015518

0801261c <__lshift>:
 801261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012620:	460c      	mov	r4, r1
 8012622:	6849      	ldr	r1, [r1, #4]
 8012624:	6923      	ldr	r3, [r4, #16]
 8012626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801262a:	68a3      	ldr	r3, [r4, #8]
 801262c:	4607      	mov	r7, r0
 801262e:	4691      	mov	r9, r2
 8012630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012634:	f108 0601 	add.w	r6, r8, #1
 8012638:	42b3      	cmp	r3, r6
 801263a:	db0b      	blt.n	8012654 <__lshift+0x38>
 801263c:	4638      	mov	r0, r7
 801263e:	f7ff fddf 	bl	8012200 <_Balloc>
 8012642:	4605      	mov	r5, r0
 8012644:	b948      	cbnz	r0, 801265a <__lshift+0x3e>
 8012646:	4602      	mov	r2, r0
 8012648:	4b28      	ldr	r3, [pc, #160]	@ (80126ec <__lshift+0xd0>)
 801264a:	4829      	ldr	r0, [pc, #164]	@ (80126f0 <__lshift+0xd4>)
 801264c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012650:	f7fe fe16 	bl	8011280 <__assert_func>
 8012654:	3101      	adds	r1, #1
 8012656:	005b      	lsls	r3, r3, #1
 8012658:	e7ee      	b.n	8012638 <__lshift+0x1c>
 801265a:	2300      	movs	r3, #0
 801265c:	f100 0114 	add.w	r1, r0, #20
 8012660:	f100 0210 	add.w	r2, r0, #16
 8012664:	4618      	mov	r0, r3
 8012666:	4553      	cmp	r3, sl
 8012668:	db33      	blt.n	80126d2 <__lshift+0xb6>
 801266a:	6920      	ldr	r0, [r4, #16]
 801266c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012670:	f104 0314 	add.w	r3, r4, #20
 8012674:	f019 091f 	ands.w	r9, r9, #31
 8012678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801267c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012680:	d02b      	beq.n	80126da <__lshift+0xbe>
 8012682:	f1c9 0e20 	rsb	lr, r9, #32
 8012686:	468a      	mov	sl, r1
 8012688:	2200      	movs	r2, #0
 801268a:	6818      	ldr	r0, [r3, #0]
 801268c:	fa00 f009 	lsl.w	r0, r0, r9
 8012690:	4310      	orrs	r0, r2
 8012692:	f84a 0b04 	str.w	r0, [sl], #4
 8012696:	f853 2b04 	ldr.w	r2, [r3], #4
 801269a:	459c      	cmp	ip, r3
 801269c:	fa22 f20e 	lsr.w	r2, r2, lr
 80126a0:	d8f3      	bhi.n	801268a <__lshift+0x6e>
 80126a2:	ebac 0304 	sub.w	r3, ip, r4
 80126a6:	3b15      	subs	r3, #21
 80126a8:	f023 0303 	bic.w	r3, r3, #3
 80126ac:	3304      	adds	r3, #4
 80126ae:	f104 0015 	add.w	r0, r4, #21
 80126b2:	4584      	cmp	ip, r0
 80126b4:	bf38      	it	cc
 80126b6:	2304      	movcc	r3, #4
 80126b8:	50ca      	str	r2, [r1, r3]
 80126ba:	b10a      	cbz	r2, 80126c0 <__lshift+0xa4>
 80126bc:	f108 0602 	add.w	r6, r8, #2
 80126c0:	3e01      	subs	r6, #1
 80126c2:	4638      	mov	r0, r7
 80126c4:	612e      	str	r6, [r5, #16]
 80126c6:	4621      	mov	r1, r4
 80126c8:	f7ff fdda 	bl	8012280 <_Bfree>
 80126cc:	4628      	mov	r0, r5
 80126ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80126d6:	3301      	adds	r3, #1
 80126d8:	e7c5      	b.n	8012666 <__lshift+0x4a>
 80126da:	3904      	subs	r1, #4
 80126dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80126e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80126e4:	459c      	cmp	ip, r3
 80126e6:	d8f9      	bhi.n	80126dc <__lshift+0xc0>
 80126e8:	e7ea      	b.n	80126c0 <__lshift+0xa4>
 80126ea:	bf00      	nop
 80126ec:	08015507 	.word	0x08015507
 80126f0:	08015518 	.word	0x08015518

080126f4 <__mcmp>:
 80126f4:	690a      	ldr	r2, [r1, #16]
 80126f6:	4603      	mov	r3, r0
 80126f8:	6900      	ldr	r0, [r0, #16]
 80126fa:	1a80      	subs	r0, r0, r2
 80126fc:	b530      	push	{r4, r5, lr}
 80126fe:	d10e      	bne.n	801271e <__mcmp+0x2a>
 8012700:	3314      	adds	r3, #20
 8012702:	3114      	adds	r1, #20
 8012704:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012708:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801270c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012714:	4295      	cmp	r5, r2
 8012716:	d003      	beq.n	8012720 <__mcmp+0x2c>
 8012718:	d205      	bcs.n	8012726 <__mcmp+0x32>
 801271a:	f04f 30ff 	mov.w	r0, #4294967295
 801271e:	bd30      	pop	{r4, r5, pc}
 8012720:	42a3      	cmp	r3, r4
 8012722:	d3f3      	bcc.n	801270c <__mcmp+0x18>
 8012724:	e7fb      	b.n	801271e <__mcmp+0x2a>
 8012726:	2001      	movs	r0, #1
 8012728:	e7f9      	b.n	801271e <__mcmp+0x2a>
	...

0801272c <__mdiff>:
 801272c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012730:	4689      	mov	r9, r1
 8012732:	4606      	mov	r6, r0
 8012734:	4611      	mov	r1, r2
 8012736:	4648      	mov	r0, r9
 8012738:	4614      	mov	r4, r2
 801273a:	f7ff ffdb 	bl	80126f4 <__mcmp>
 801273e:	1e05      	subs	r5, r0, #0
 8012740:	d112      	bne.n	8012768 <__mdiff+0x3c>
 8012742:	4629      	mov	r1, r5
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff fd5b 	bl	8012200 <_Balloc>
 801274a:	4602      	mov	r2, r0
 801274c:	b928      	cbnz	r0, 801275a <__mdiff+0x2e>
 801274e:	4b3f      	ldr	r3, [pc, #252]	@ (801284c <__mdiff+0x120>)
 8012750:	f240 2137 	movw	r1, #567	@ 0x237
 8012754:	483e      	ldr	r0, [pc, #248]	@ (8012850 <__mdiff+0x124>)
 8012756:	f7fe fd93 	bl	8011280 <__assert_func>
 801275a:	2301      	movs	r3, #1
 801275c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012760:	4610      	mov	r0, r2
 8012762:	b003      	add	sp, #12
 8012764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012768:	bfbc      	itt	lt
 801276a:	464b      	movlt	r3, r9
 801276c:	46a1      	movlt	r9, r4
 801276e:	4630      	mov	r0, r6
 8012770:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012774:	bfba      	itte	lt
 8012776:	461c      	movlt	r4, r3
 8012778:	2501      	movlt	r5, #1
 801277a:	2500      	movge	r5, #0
 801277c:	f7ff fd40 	bl	8012200 <_Balloc>
 8012780:	4602      	mov	r2, r0
 8012782:	b918      	cbnz	r0, 801278c <__mdiff+0x60>
 8012784:	4b31      	ldr	r3, [pc, #196]	@ (801284c <__mdiff+0x120>)
 8012786:	f240 2145 	movw	r1, #581	@ 0x245
 801278a:	e7e3      	b.n	8012754 <__mdiff+0x28>
 801278c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012790:	6926      	ldr	r6, [r4, #16]
 8012792:	60c5      	str	r5, [r0, #12]
 8012794:	f109 0310 	add.w	r3, r9, #16
 8012798:	f109 0514 	add.w	r5, r9, #20
 801279c:	f104 0e14 	add.w	lr, r4, #20
 80127a0:	f100 0b14 	add.w	fp, r0, #20
 80127a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80127a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	46d9      	mov	r9, fp
 80127b0:	f04f 0c00 	mov.w	ip, #0
 80127b4:	9b01      	ldr	r3, [sp, #4]
 80127b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80127ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80127be:	9301      	str	r3, [sp, #4]
 80127c0:	fa1f f38a 	uxth.w	r3, sl
 80127c4:	4619      	mov	r1, r3
 80127c6:	b283      	uxth	r3, r0
 80127c8:	1acb      	subs	r3, r1, r3
 80127ca:	0c00      	lsrs	r0, r0, #16
 80127cc:	4463      	add	r3, ip
 80127ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80127d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80127dc:	4576      	cmp	r6, lr
 80127de:	f849 3b04 	str.w	r3, [r9], #4
 80127e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127e6:	d8e5      	bhi.n	80127b4 <__mdiff+0x88>
 80127e8:	1b33      	subs	r3, r6, r4
 80127ea:	3b15      	subs	r3, #21
 80127ec:	f023 0303 	bic.w	r3, r3, #3
 80127f0:	3415      	adds	r4, #21
 80127f2:	3304      	adds	r3, #4
 80127f4:	42a6      	cmp	r6, r4
 80127f6:	bf38      	it	cc
 80127f8:	2304      	movcc	r3, #4
 80127fa:	441d      	add	r5, r3
 80127fc:	445b      	add	r3, fp
 80127fe:	461e      	mov	r6, r3
 8012800:	462c      	mov	r4, r5
 8012802:	4544      	cmp	r4, r8
 8012804:	d30e      	bcc.n	8012824 <__mdiff+0xf8>
 8012806:	f108 0103 	add.w	r1, r8, #3
 801280a:	1b49      	subs	r1, r1, r5
 801280c:	f021 0103 	bic.w	r1, r1, #3
 8012810:	3d03      	subs	r5, #3
 8012812:	45a8      	cmp	r8, r5
 8012814:	bf38      	it	cc
 8012816:	2100      	movcc	r1, #0
 8012818:	440b      	add	r3, r1
 801281a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801281e:	b191      	cbz	r1, 8012846 <__mdiff+0x11a>
 8012820:	6117      	str	r7, [r2, #16]
 8012822:	e79d      	b.n	8012760 <__mdiff+0x34>
 8012824:	f854 1b04 	ldr.w	r1, [r4], #4
 8012828:	46e6      	mov	lr, ip
 801282a:	0c08      	lsrs	r0, r1, #16
 801282c:	fa1c fc81 	uxtah	ip, ip, r1
 8012830:	4471      	add	r1, lr
 8012832:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012836:	b289      	uxth	r1, r1
 8012838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801283c:	f846 1b04 	str.w	r1, [r6], #4
 8012840:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012844:	e7dd      	b.n	8012802 <__mdiff+0xd6>
 8012846:	3f01      	subs	r7, #1
 8012848:	e7e7      	b.n	801281a <__mdiff+0xee>
 801284a:	bf00      	nop
 801284c:	08015507 	.word	0x08015507
 8012850:	08015518 	.word	0x08015518

08012854 <__d2b>:
 8012854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012858:	460f      	mov	r7, r1
 801285a:	2101      	movs	r1, #1
 801285c:	ec59 8b10 	vmov	r8, r9, d0
 8012860:	4616      	mov	r6, r2
 8012862:	f7ff fccd 	bl	8012200 <_Balloc>
 8012866:	4604      	mov	r4, r0
 8012868:	b930      	cbnz	r0, 8012878 <__d2b+0x24>
 801286a:	4602      	mov	r2, r0
 801286c:	4b23      	ldr	r3, [pc, #140]	@ (80128fc <__d2b+0xa8>)
 801286e:	4824      	ldr	r0, [pc, #144]	@ (8012900 <__d2b+0xac>)
 8012870:	f240 310f 	movw	r1, #783	@ 0x30f
 8012874:	f7fe fd04 	bl	8011280 <__assert_func>
 8012878:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801287c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012880:	b10d      	cbz	r5, 8012886 <__d2b+0x32>
 8012882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012886:	9301      	str	r3, [sp, #4]
 8012888:	f1b8 0300 	subs.w	r3, r8, #0
 801288c:	d023      	beq.n	80128d6 <__d2b+0x82>
 801288e:	4668      	mov	r0, sp
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	f7ff fd7c 	bl	801238e <__lo0bits>
 8012896:	e9dd 1200 	ldrd	r1, r2, [sp]
 801289a:	b1d0      	cbz	r0, 80128d2 <__d2b+0x7e>
 801289c:	f1c0 0320 	rsb	r3, r0, #32
 80128a0:	fa02 f303 	lsl.w	r3, r2, r3
 80128a4:	430b      	orrs	r3, r1
 80128a6:	40c2      	lsrs	r2, r0
 80128a8:	6163      	str	r3, [r4, #20]
 80128aa:	9201      	str	r2, [sp, #4]
 80128ac:	9b01      	ldr	r3, [sp, #4]
 80128ae:	61a3      	str	r3, [r4, #24]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	bf0c      	ite	eq
 80128b4:	2201      	moveq	r2, #1
 80128b6:	2202      	movne	r2, #2
 80128b8:	6122      	str	r2, [r4, #16]
 80128ba:	b1a5      	cbz	r5, 80128e6 <__d2b+0x92>
 80128bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80128c0:	4405      	add	r5, r0
 80128c2:	603d      	str	r5, [r7, #0]
 80128c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80128c8:	6030      	str	r0, [r6, #0]
 80128ca:	4620      	mov	r0, r4
 80128cc:	b003      	add	sp, #12
 80128ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128d2:	6161      	str	r1, [r4, #20]
 80128d4:	e7ea      	b.n	80128ac <__d2b+0x58>
 80128d6:	a801      	add	r0, sp, #4
 80128d8:	f7ff fd59 	bl	801238e <__lo0bits>
 80128dc:	9b01      	ldr	r3, [sp, #4]
 80128de:	6163      	str	r3, [r4, #20]
 80128e0:	3020      	adds	r0, #32
 80128e2:	2201      	movs	r2, #1
 80128e4:	e7e8      	b.n	80128b8 <__d2b+0x64>
 80128e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80128ee:	6038      	str	r0, [r7, #0]
 80128f0:	6918      	ldr	r0, [r3, #16]
 80128f2:	f7ff fd2d 	bl	8012350 <__hi0bits>
 80128f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128fa:	e7e5      	b.n	80128c8 <__d2b+0x74>
 80128fc:	08015507 	.word	0x08015507
 8012900:	08015518 	.word	0x08015518

08012904 <_strtoul_l.constprop.0>:
 8012904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012908:	4e34      	ldr	r6, [pc, #208]	@ (80129dc <_strtoul_l.constprop.0+0xd8>)
 801290a:	4686      	mov	lr, r0
 801290c:	460d      	mov	r5, r1
 801290e:	4628      	mov	r0, r5
 8012910:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012914:	5d37      	ldrb	r7, [r6, r4]
 8012916:	f017 0708 	ands.w	r7, r7, #8
 801291a:	d1f8      	bne.n	801290e <_strtoul_l.constprop.0+0xa>
 801291c:	2c2d      	cmp	r4, #45	@ 0x2d
 801291e:	d12f      	bne.n	8012980 <_strtoul_l.constprop.0+0x7c>
 8012920:	782c      	ldrb	r4, [r5, #0]
 8012922:	2701      	movs	r7, #1
 8012924:	1c85      	adds	r5, r0, #2
 8012926:	f033 0010 	bics.w	r0, r3, #16
 801292a:	d109      	bne.n	8012940 <_strtoul_l.constprop.0+0x3c>
 801292c:	2c30      	cmp	r4, #48	@ 0x30
 801292e:	d12c      	bne.n	801298a <_strtoul_l.constprop.0+0x86>
 8012930:	7828      	ldrb	r0, [r5, #0]
 8012932:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012936:	2858      	cmp	r0, #88	@ 0x58
 8012938:	d127      	bne.n	801298a <_strtoul_l.constprop.0+0x86>
 801293a:	786c      	ldrb	r4, [r5, #1]
 801293c:	2310      	movs	r3, #16
 801293e:	3502      	adds	r5, #2
 8012940:	f04f 38ff 	mov.w	r8, #4294967295
 8012944:	2600      	movs	r6, #0
 8012946:	fbb8 f8f3 	udiv	r8, r8, r3
 801294a:	fb03 f908 	mul.w	r9, r3, r8
 801294e:	ea6f 0909 	mvn.w	r9, r9
 8012952:	4630      	mov	r0, r6
 8012954:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012958:	f1bc 0f09 	cmp.w	ip, #9
 801295c:	d81c      	bhi.n	8012998 <_strtoul_l.constprop.0+0x94>
 801295e:	4664      	mov	r4, ip
 8012960:	42a3      	cmp	r3, r4
 8012962:	dd2a      	ble.n	80129ba <_strtoul_l.constprop.0+0xb6>
 8012964:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012968:	d007      	beq.n	801297a <_strtoul_l.constprop.0+0x76>
 801296a:	4580      	cmp	r8, r0
 801296c:	d322      	bcc.n	80129b4 <_strtoul_l.constprop.0+0xb0>
 801296e:	d101      	bne.n	8012974 <_strtoul_l.constprop.0+0x70>
 8012970:	45a1      	cmp	r9, r4
 8012972:	db1f      	blt.n	80129b4 <_strtoul_l.constprop.0+0xb0>
 8012974:	fb00 4003 	mla	r0, r0, r3, r4
 8012978:	2601      	movs	r6, #1
 801297a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801297e:	e7e9      	b.n	8012954 <_strtoul_l.constprop.0+0x50>
 8012980:	2c2b      	cmp	r4, #43	@ 0x2b
 8012982:	bf04      	itt	eq
 8012984:	782c      	ldrbeq	r4, [r5, #0]
 8012986:	1c85      	addeq	r5, r0, #2
 8012988:	e7cd      	b.n	8012926 <_strtoul_l.constprop.0+0x22>
 801298a:	2b00      	cmp	r3, #0
 801298c:	d1d8      	bne.n	8012940 <_strtoul_l.constprop.0+0x3c>
 801298e:	2c30      	cmp	r4, #48	@ 0x30
 8012990:	bf0c      	ite	eq
 8012992:	2308      	moveq	r3, #8
 8012994:	230a      	movne	r3, #10
 8012996:	e7d3      	b.n	8012940 <_strtoul_l.constprop.0+0x3c>
 8012998:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801299c:	f1bc 0f19 	cmp.w	ip, #25
 80129a0:	d801      	bhi.n	80129a6 <_strtoul_l.constprop.0+0xa2>
 80129a2:	3c37      	subs	r4, #55	@ 0x37
 80129a4:	e7dc      	b.n	8012960 <_strtoul_l.constprop.0+0x5c>
 80129a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80129aa:	f1bc 0f19 	cmp.w	ip, #25
 80129ae:	d804      	bhi.n	80129ba <_strtoul_l.constprop.0+0xb6>
 80129b0:	3c57      	subs	r4, #87	@ 0x57
 80129b2:	e7d5      	b.n	8012960 <_strtoul_l.constprop.0+0x5c>
 80129b4:	f04f 36ff 	mov.w	r6, #4294967295
 80129b8:	e7df      	b.n	801297a <_strtoul_l.constprop.0+0x76>
 80129ba:	1c73      	adds	r3, r6, #1
 80129bc:	d106      	bne.n	80129cc <_strtoul_l.constprop.0+0xc8>
 80129be:	2322      	movs	r3, #34	@ 0x22
 80129c0:	f8ce 3000 	str.w	r3, [lr]
 80129c4:	4630      	mov	r0, r6
 80129c6:	b932      	cbnz	r2, 80129d6 <_strtoul_l.constprop.0+0xd2>
 80129c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129cc:	b107      	cbz	r7, 80129d0 <_strtoul_l.constprop.0+0xcc>
 80129ce:	4240      	negs	r0, r0
 80129d0:	2a00      	cmp	r2, #0
 80129d2:	d0f9      	beq.n	80129c8 <_strtoul_l.constprop.0+0xc4>
 80129d4:	b106      	cbz	r6, 80129d8 <_strtoul_l.constprop.0+0xd4>
 80129d6:	1e69      	subs	r1, r5, #1
 80129d8:	6011      	str	r1, [r2, #0]
 80129da:	e7f5      	b.n	80129c8 <_strtoul_l.constprop.0+0xc4>
 80129dc:	08015671 	.word	0x08015671

080129e0 <_strtoul_r>:
 80129e0:	f7ff bf90 	b.w	8012904 <_strtoul_l.constprop.0>

080129e4 <strtoul>:
 80129e4:	4613      	mov	r3, r2
 80129e6:	460a      	mov	r2, r1
 80129e8:	4601      	mov	r1, r0
 80129ea:	4802      	ldr	r0, [pc, #8]	@ (80129f4 <strtoul+0x10>)
 80129ec:	6800      	ldr	r0, [r0, #0]
 80129ee:	f7ff bf89 	b.w	8012904 <_strtoul_l.constprop.0>
 80129f2:	bf00      	nop
 80129f4:	20000030 	.word	0x20000030

080129f8 <__ssputs_r>:
 80129f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129fc:	688e      	ldr	r6, [r1, #8]
 80129fe:	461f      	mov	r7, r3
 8012a00:	42be      	cmp	r6, r7
 8012a02:	680b      	ldr	r3, [r1, #0]
 8012a04:	4682      	mov	sl, r0
 8012a06:	460c      	mov	r4, r1
 8012a08:	4690      	mov	r8, r2
 8012a0a:	d82d      	bhi.n	8012a68 <__ssputs_r+0x70>
 8012a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012a14:	d026      	beq.n	8012a64 <__ssputs_r+0x6c>
 8012a16:	6965      	ldr	r5, [r4, #20]
 8012a18:	6909      	ldr	r1, [r1, #16]
 8012a1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a1e:	eba3 0901 	sub.w	r9, r3, r1
 8012a22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a26:	1c7b      	adds	r3, r7, #1
 8012a28:	444b      	add	r3, r9
 8012a2a:	106d      	asrs	r5, r5, #1
 8012a2c:	429d      	cmp	r5, r3
 8012a2e:	bf38      	it	cc
 8012a30:	461d      	movcc	r5, r3
 8012a32:	0553      	lsls	r3, r2, #21
 8012a34:	d527      	bpl.n	8012a86 <__ssputs_r+0x8e>
 8012a36:	4629      	mov	r1, r5
 8012a38:	f7ff fb56 	bl	80120e8 <_malloc_r>
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	b360      	cbz	r0, 8012a9a <__ssputs_r+0xa2>
 8012a40:	6921      	ldr	r1, [r4, #16]
 8012a42:	464a      	mov	r2, r9
 8012a44:	f7fe fc0d 	bl	8011262 <memcpy>
 8012a48:	89a3      	ldrh	r3, [r4, #12]
 8012a4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a52:	81a3      	strh	r3, [r4, #12]
 8012a54:	6126      	str	r6, [r4, #16]
 8012a56:	6165      	str	r5, [r4, #20]
 8012a58:	444e      	add	r6, r9
 8012a5a:	eba5 0509 	sub.w	r5, r5, r9
 8012a5e:	6026      	str	r6, [r4, #0]
 8012a60:	60a5      	str	r5, [r4, #8]
 8012a62:	463e      	mov	r6, r7
 8012a64:	42be      	cmp	r6, r7
 8012a66:	d900      	bls.n	8012a6a <__ssputs_r+0x72>
 8012a68:	463e      	mov	r6, r7
 8012a6a:	6820      	ldr	r0, [r4, #0]
 8012a6c:	4632      	mov	r2, r6
 8012a6e:	4641      	mov	r1, r8
 8012a70:	f000 fa02 	bl	8012e78 <memmove>
 8012a74:	68a3      	ldr	r3, [r4, #8]
 8012a76:	1b9b      	subs	r3, r3, r6
 8012a78:	60a3      	str	r3, [r4, #8]
 8012a7a:	6823      	ldr	r3, [r4, #0]
 8012a7c:	4433      	add	r3, r6
 8012a7e:	6023      	str	r3, [r4, #0]
 8012a80:	2000      	movs	r0, #0
 8012a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a86:	462a      	mov	r2, r5
 8012a88:	f000 fb16 	bl	80130b8 <_realloc_r>
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d1e0      	bne.n	8012a54 <__ssputs_r+0x5c>
 8012a92:	6921      	ldr	r1, [r4, #16]
 8012a94:	4650      	mov	r0, sl
 8012a96:	f7ff fa67 	bl	8011f68 <_free_r>
 8012a9a:	230c      	movs	r3, #12
 8012a9c:	f8ca 3000 	str.w	r3, [sl]
 8012aa0:	89a3      	ldrh	r3, [r4, #12]
 8012aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aa6:	81a3      	strh	r3, [r4, #12]
 8012aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aac:	e7e9      	b.n	8012a82 <__ssputs_r+0x8a>
	...

08012ab0 <_svfiprintf_r>:
 8012ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab4:	4698      	mov	r8, r3
 8012ab6:	898b      	ldrh	r3, [r1, #12]
 8012ab8:	061b      	lsls	r3, r3, #24
 8012aba:	b09d      	sub	sp, #116	@ 0x74
 8012abc:	4607      	mov	r7, r0
 8012abe:	460d      	mov	r5, r1
 8012ac0:	4614      	mov	r4, r2
 8012ac2:	d510      	bpl.n	8012ae6 <_svfiprintf_r+0x36>
 8012ac4:	690b      	ldr	r3, [r1, #16]
 8012ac6:	b973      	cbnz	r3, 8012ae6 <_svfiprintf_r+0x36>
 8012ac8:	2140      	movs	r1, #64	@ 0x40
 8012aca:	f7ff fb0d 	bl	80120e8 <_malloc_r>
 8012ace:	6028      	str	r0, [r5, #0]
 8012ad0:	6128      	str	r0, [r5, #16]
 8012ad2:	b930      	cbnz	r0, 8012ae2 <_svfiprintf_r+0x32>
 8012ad4:	230c      	movs	r3, #12
 8012ad6:	603b      	str	r3, [r7, #0]
 8012ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8012adc:	b01d      	add	sp, #116	@ 0x74
 8012ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae2:	2340      	movs	r3, #64	@ 0x40
 8012ae4:	616b      	str	r3, [r5, #20]
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012aea:	2320      	movs	r3, #32
 8012aec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012af4:	2330      	movs	r3, #48	@ 0x30
 8012af6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012c94 <_svfiprintf_r+0x1e4>
 8012afa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012afe:	f04f 0901 	mov.w	r9, #1
 8012b02:	4623      	mov	r3, r4
 8012b04:	469a      	mov	sl, r3
 8012b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b0a:	b10a      	cbz	r2, 8012b10 <_svfiprintf_r+0x60>
 8012b0c:	2a25      	cmp	r2, #37	@ 0x25
 8012b0e:	d1f9      	bne.n	8012b04 <_svfiprintf_r+0x54>
 8012b10:	ebba 0b04 	subs.w	fp, sl, r4
 8012b14:	d00b      	beq.n	8012b2e <_svfiprintf_r+0x7e>
 8012b16:	465b      	mov	r3, fp
 8012b18:	4622      	mov	r2, r4
 8012b1a:	4629      	mov	r1, r5
 8012b1c:	4638      	mov	r0, r7
 8012b1e:	f7ff ff6b 	bl	80129f8 <__ssputs_r>
 8012b22:	3001      	adds	r0, #1
 8012b24:	f000 80a7 	beq.w	8012c76 <_svfiprintf_r+0x1c6>
 8012b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b2a:	445a      	add	r2, fp
 8012b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	f000 809f 	beq.w	8012c76 <_svfiprintf_r+0x1c6>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b42:	f10a 0a01 	add.w	sl, sl, #1
 8012b46:	9304      	str	r3, [sp, #16]
 8012b48:	9307      	str	r3, [sp, #28]
 8012b4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b50:	4654      	mov	r4, sl
 8012b52:	2205      	movs	r2, #5
 8012b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b58:	484e      	ldr	r0, [pc, #312]	@ (8012c94 <_svfiprintf_r+0x1e4>)
 8012b5a:	f7ed fb21 	bl	80001a0 <memchr>
 8012b5e:	9a04      	ldr	r2, [sp, #16]
 8012b60:	b9d8      	cbnz	r0, 8012b9a <_svfiprintf_r+0xea>
 8012b62:	06d0      	lsls	r0, r2, #27
 8012b64:	bf44      	itt	mi
 8012b66:	2320      	movmi	r3, #32
 8012b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b6c:	0711      	lsls	r1, r2, #28
 8012b6e:	bf44      	itt	mi
 8012b70:	232b      	movmi	r3, #43	@ 0x2b
 8012b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b76:	f89a 3000 	ldrb.w	r3, [sl]
 8012b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b7c:	d015      	beq.n	8012baa <_svfiprintf_r+0xfa>
 8012b7e:	9a07      	ldr	r2, [sp, #28]
 8012b80:	4654      	mov	r4, sl
 8012b82:	2000      	movs	r0, #0
 8012b84:	f04f 0c0a 	mov.w	ip, #10
 8012b88:	4621      	mov	r1, r4
 8012b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b8e:	3b30      	subs	r3, #48	@ 0x30
 8012b90:	2b09      	cmp	r3, #9
 8012b92:	d94b      	bls.n	8012c2c <_svfiprintf_r+0x17c>
 8012b94:	b1b0      	cbz	r0, 8012bc4 <_svfiprintf_r+0x114>
 8012b96:	9207      	str	r2, [sp, #28]
 8012b98:	e014      	b.n	8012bc4 <_svfiprintf_r+0x114>
 8012b9a:	eba0 0308 	sub.w	r3, r0, r8
 8012b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	9304      	str	r3, [sp, #16]
 8012ba6:	46a2      	mov	sl, r4
 8012ba8:	e7d2      	b.n	8012b50 <_svfiprintf_r+0xa0>
 8012baa:	9b03      	ldr	r3, [sp, #12]
 8012bac:	1d19      	adds	r1, r3, #4
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	9103      	str	r1, [sp, #12]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	bfbb      	ittet	lt
 8012bb6:	425b      	neglt	r3, r3
 8012bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8012bbc:	9307      	strge	r3, [sp, #28]
 8012bbe:	9307      	strlt	r3, [sp, #28]
 8012bc0:	bfb8      	it	lt
 8012bc2:	9204      	strlt	r2, [sp, #16]
 8012bc4:	7823      	ldrb	r3, [r4, #0]
 8012bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012bc8:	d10a      	bne.n	8012be0 <_svfiprintf_r+0x130>
 8012bca:	7863      	ldrb	r3, [r4, #1]
 8012bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bce:	d132      	bne.n	8012c36 <_svfiprintf_r+0x186>
 8012bd0:	9b03      	ldr	r3, [sp, #12]
 8012bd2:	1d1a      	adds	r2, r3, #4
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	9203      	str	r2, [sp, #12]
 8012bd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012bdc:	3402      	adds	r4, #2
 8012bde:	9305      	str	r3, [sp, #20]
 8012be0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ca4 <_svfiprintf_r+0x1f4>
 8012be4:	7821      	ldrb	r1, [r4, #0]
 8012be6:	2203      	movs	r2, #3
 8012be8:	4650      	mov	r0, sl
 8012bea:	f7ed fad9 	bl	80001a0 <memchr>
 8012bee:	b138      	cbz	r0, 8012c00 <_svfiprintf_r+0x150>
 8012bf0:	9b04      	ldr	r3, [sp, #16]
 8012bf2:	eba0 000a 	sub.w	r0, r0, sl
 8012bf6:	2240      	movs	r2, #64	@ 0x40
 8012bf8:	4082      	lsls	r2, r0
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	3401      	adds	r4, #1
 8012bfe:	9304      	str	r3, [sp, #16]
 8012c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c04:	4824      	ldr	r0, [pc, #144]	@ (8012c98 <_svfiprintf_r+0x1e8>)
 8012c06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c0a:	2206      	movs	r2, #6
 8012c0c:	f7ed fac8 	bl	80001a0 <memchr>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d036      	beq.n	8012c82 <_svfiprintf_r+0x1d2>
 8012c14:	4b21      	ldr	r3, [pc, #132]	@ (8012c9c <_svfiprintf_r+0x1ec>)
 8012c16:	bb1b      	cbnz	r3, 8012c60 <_svfiprintf_r+0x1b0>
 8012c18:	9b03      	ldr	r3, [sp, #12]
 8012c1a:	3307      	adds	r3, #7
 8012c1c:	f023 0307 	bic.w	r3, r3, #7
 8012c20:	3308      	adds	r3, #8
 8012c22:	9303      	str	r3, [sp, #12]
 8012c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c26:	4433      	add	r3, r6
 8012c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c2a:	e76a      	b.n	8012b02 <_svfiprintf_r+0x52>
 8012c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c30:	460c      	mov	r4, r1
 8012c32:	2001      	movs	r0, #1
 8012c34:	e7a8      	b.n	8012b88 <_svfiprintf_r+0xd8>
 8012c36:	2300      	movs	r3, #0
 8012c38:	3401      	adds	r4, #1
 8012c3a:	9305      	str	r3, [sp, #20]
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	f04f 0c0a 	mov.w	ip, #10
 8012c42:	4620      	mov	r0, r4
 8012c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c48:	3a30      	subs	r2, #48	@ 0x30
 8012c4a:	2a09      	cmp	r2, #9
 8012c4c:	d903      	bls.n	8012c56 <_svfiprintf_r+0x1a6>
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d0c6      	beq.n	8012be0 <_svfiprintf_r+0x130>
 8012c52:	9105      	str	r1, [sp, #20]
 8012c54:	e7c4      	b.n	8012be0 <_svfiprintf_r+0x130>
 8012c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e7f0      	b.n	8012c42 <_svfiprintf_r+0x192>
 8012c60:	ab03      	add	r3, sp, #12
 8012c62:	9300      	str	r3, [sp, #0]
 8012c64:	462a      	mov	r2, r5
 8012c66:	4b0e      	ldr	r3, [pc, #56]	@ (8012ca0 <_svfiprintf_r+0x1f0>)
 8012c68:	a904      	add	r1, sp, #16
 8012c6a:	4638      	mov	r0, r7
 8012c6c:	f7fc ff22 	bl	800fab4 <_printf_float>
 8012c70:	1c42      	adds	r2, r0, #1
 8012c72:	4606      	mov	r6, r0
 8012c74:	d1d6      	bne.n	8012c24 <_svfiprintf_r+0x174>
 8012c76:	89ab      	ldrh	r3, [r5, #12]
 8012c78:	065b      	lsls	r3, r3, #25
 8012c7a:	f53f af2d 	bmi.w	8012ad8 <_svfiprintf_r+0x28>
 8012c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c80:	e72c      	b.n	8012adc <_svfiprintf_r+0x2c>
 8012c82:	ab03      	add	r3, sp, #12
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	462a      	mov	r2, r5
 8012c88:	4b05      	ldr	r3, [pc, #20]	@ (8012ca0 <_svfiprintf_r+0x1f0>)
 8012c8a:	a904      	add	r1, sp, #16
 8012c8c:	4638      	mov	r0, r7
 8012c8e:	f7fd f9a9 	bl	800ffe4 <_printf_i>
 8012c92:	e7ed      	b.n	8012c70 <_svfiprintf_r+0x1c0>
 8012c94:	08015771 	.word	0x08015771
 8012c98:	0801577b 	.word	0x0801577b
 8012c9c:	0800fab5 	.word	0x0800fab5
 8012ca0:	080129f9 	.word	0x080129f9
 8012ca4:	08015777 	.word	0x08015777

08012ca8 <__sflush_r>:
 8012ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	0716      	lsls	r6, r2, #28
 8012cb2:	4605      	mov	r5, r0
 8012cb4:	460c      	mov	r4, r1
 8012cb6:	d454      	bmi.n	8012d62 <__sflush_r+0xba>
 8012cb8:	684b      	ldr	r3, [r1, #4]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	dc02      	bgt.n	8012cc4 <__sflush_r+0x1c>
 8012cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dd48      	ble.n	8012d56 <__sflush_r+0xae>
 8012cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012cc6:	2e00      	cmp	r6, #0
 8012cc8:	d045      	beq.n	8012d56 <__sflush_r+0xae>
 8012cca:	2300      	movs	r3, #0
 8012ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012cd0:	682f      	ldr	r7, [r5, #0]
 8012cd2:	6a21      	ldr	r1, [r4, #32]
 8012cd4:	602b      	str	r3, [r5, #0]
 8012cd6:	d030      	beq.n	8012d3a <__sflush_r+0x92>
 8012cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012cda:	89a3      	ldrh	r3, [r4, #12]
 8012cdc:	0759      	lsls	r1, r3, #29
 8012cde:	d505      	bpl.n	8012cec <__sflush_r+0x44>
 8012ce0:	6863      	ldr	r3, [r4, #4]
 8012ce2:	1ad2      	subs	r2, r2, r3
 8012ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ce6:	b10b      	cbz	r3, 8012cec <__sflush_r+0x44>
 8012ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012cea:	1ad2      	subs	r2, r2, r3
 8012cec:	2300      	movs	r3, #0
 8012cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012cf0:	6a21      	ldr	r1, [r4, #32]
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	47b0      	blx	r6
 8012cf6:	1c43      	adds	r3, r0, #1
 8012cf8:	89a3      	ldrh	r3, [r4, #12]
 8012cfa:	d106      	bne.n	8012d0a <__sflush_r+0x62>
 8012cfc:	6829      	ldr	r1, [r5, #0]
 8012cfe:	291d      	cmp	r1, #29
 8012d00:	d82b      	bhi.n	8012d5a <__sflush_r+0xb2>
 8012d02:	4a2a      	ldr	r2, [pc, #168]	@ (8012dac <__sflush_r+0x104>)
 8012d04:	410a      	asrs	r2, r1
 8012d06:	07d6      	lsls	r6, r2, #31
 8012d08:	d427      	bmi.n	8012d5a <__sflush_r+0xb2>
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	6062      	str	r2, [r4, #4]
 8012d0e:	04d9      	lsls	r1, r3, #19
 8012d10:	6922      	ldr	r2, [r4, #16]
 8012d12:	6022      	str	r2, [r4, #0]
 8012d14:	d504      	bpl.n	8012d20 <__sflush_r+0x78>
 8012d16:	1c42      	adds	r2, r0, #1
 8012d18:	d101      	bne.n	8012d1e <__sflush_r+0x76>
 8012d1a:	682b      	ldr	r3, [r5, #0]
 8012d1c:	b903      	cbnz	r3, 8012d20 <__sflush_r+0x78>
 8012d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d22:	602f      	str	r7, [r5, #0]
 8012d24:	b1b9      	cbz	r1, 8012d56 <__sflush_r+0xae>
 8012d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d2a:	4299      	cmp	r1, r3
 8012d2c:	d002      	beq.n	8012d34 <__sflush_r+0x8c>
 8012d2e:	4628      	mov	r0, r5
 8012d30:	f7ff f91a 	bl	8011f68 <_free_r>
 8012d34:	2300      	movs	r3, #0
 8012d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d38:	e00d      	b.n	8012d56 <__sflush_r+0xae>
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	47b0      	blx	r6
 8012d40:	4602      	mov	r2, r0
 8012d42:	1c50      	adds	r0, r2, #1
 8012d44:	d1c9      	bne.n	8012cda <__sflush_r+0x32>
 8012d46:	682b      	ldr	r3, [r5, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d0c6      	beq.n	8012cda <__sflush_r+0x32>
 8012d4c:	2b1d      	cmp	r3, #29
 8012d4e:	d001      	beq.n	8012d54 <__sflush_r+0xac>
 8012d50:	2b16      	cmp	r3, #22
 8012d52:	d11e      	bne.n	8012d92 <__sflush_r+0xea>
 8012d54:	602f      	str	r7, [r5, #0]
 8012d56:	2000      	movs	r0, #0
 8012d58:	e022      	b.n	8012da0 <__sflush_r+0xf8>
 8012d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d5e:	b21b      	sxth	r3, r3
 8012d60:	e01b      	b.n	8012d9a <__sflush_r+0xf2>
 8012d62:	690f      	ldr	r7, [r1, #16]
 8012d64:	2f00      	cmp	r7, #0
 8012d66:	d0f6      	beq.n	8012d56 <__sflush_r+0xae>
 8012d68:	0793      	lsls	r3, r2, #30
 8012d6a:	680e      	ldr	r6, [r1, #0]
 8012d6c:	bf08      	it	eq
 8012d6e:	694b      	ldreq	r3, [r1, #20]
 8012d70:	600f      	str	r7, [r1, #0]
 8012d72:	bf18      	it	ne
 8012d74:	2300      	movne	r3, #0
 8012d76:	eba6 0807 	sub.w	r8, r6, r7
 8012d7a:	608b      	str	r3, [r1, #8]
 8012d7c:	f1b8 0f00 	cmp.w	r8, #0
 8012d80:	dde9      	ble.n	8012d56 <__sflush_r+0xae>
 8012d82:	6a21      	ldr	r1, [r4, #32]
 8012d84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012d86:	4643      	mov	r3, r8
 8012d88:	463a      	mov	r2, r7
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	47b0      	blx	r6
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	dc08      	bgt.n	8012da4 <__sflush_r+0xfc>
 8012d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d9a:	81a3      	strh	r3, [r4, #12]
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da4:	4407      	add	r7, r0
 8012da6:	eba8 0800 	sub.w	r8, r8, r0
 8012daa:	e7e7      	b.n	8012d7c <__sflush_r+0xd4>
 8012dac:	dfbffffe 	.word	0xdfbffffe

08012db0 <_fflush_r>:
 8012db0:	b538      	push	{r3, r4, r5, lr}
 8012db2:	690b      	ldr	r3, [r1, #16]
 8012db4:	4605      	mov	r5, r0
 8012db6:	460c      	mov	r4, r1
 8012db8:	b913      	cbnz	r3, 8012dc0 <_fflush_r+0x10>
 8012dba:	2500      	movs	r5, #0
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	bd38      	pop	{r3, r4, r5, pc}
 8012dc0:	b118      	cbz	r0, 8012dca <_fflush_r+0x1a>
 8012dc2:	6a03      	ldr	r3, [r0, #32]
 8012dc4:	b90b      	cbnz	r3, 8012dca <_fflush_r+0x1a>
 8012dc6:	f7fd fab9 	bl	801033c <__sinit>
 8012dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d0f3      	beq.n	8012dba <_fflush_r+0xa>
 8012dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012dd4:	07d0      	lsls	r0, r2, #31
 8012dd6:	d404      	bmi.n	8012de2 <_fflush_r+0x32>
 8012dd8:	0599      	lsls	r1, r3, #22
 8012dda:	d402      	bmi.n	8012de2 <_fflush_r+0x32>
 8012ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dde:	f7fe fa35 	bl	801124c <__retarget_lock_acquire_recursive>
 8012de2:	4628      	mov	r0, r5
 8012de4:	4621      	mov	r1, r4
 8012de6:	f7ff ff5f 	bl	8012ca8 <__sflush_r>
 8012dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012dec:	07da      	lsls	r2, r3, #31
 8012dee:	4605      	mov	r5, r0
 8012df0:	d4e4      	bmi.n	8012dbc <_fflush_r+0xc>
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	059b      	lsls	r3, r3, #22
 8012df6:	d4e1      	bmi.n	8012dbc <_fflush_r+0xc>
 8012df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dfa:	f7fe fa29 	bl	8011250 <__retarget_lock_release_recursive>
 8012dfe:	e7dd      	b.n	8012dbc <_fflush_r+0xc>

08012e00 <fiprintf>:
 8012e00:	b40e      	push	{r1, r2, r3}
 8012e02:	b503      	push	{r0, r1, lr}
 8012e04:	4601      	mov	r1, r0
 8012e06:	ab03      	add	r3, sp, #12
 8012e08:	4805      	ldr	r0, [pc, #20]	@ (8012e20 <fiprintf+0x20>)
 8012e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e0e:	6800      	ldr	r0, [r0, #0]
 8012e10:	9301      	str	r3, [sp, #4]
 8012e12:	f000 fb83 	bl	801351c <_vfiprintf_r>
 8012e16:	b002      	add	sp, #8
 8012e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e1c:	b003      	add	sp, #12
 8012e1e:	4770      	bx	lr
 8012e20:	20000030 	.word	0x20000030

08012e24 <siscanf>:
 8012e24:	b40e      	push	{r1, r2, r3}
 8012e26:	b530      	push	{r4, r5, lr}
 8012e28:	b09c      	sub	sp, #112	@ 0x70
 8012e2a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8012e2c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8012e30:	f854 5b04 	ldr.w	r5, [r4], #4
 8012e34:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012e38:	9002      	str	r0, [sp, #8]
 8012e3a:	9006      	str	r0, [sp, #24]
 8012e3c:	f7ed fa00 	bl	8000240 <strlen>
 8012e40:	4b0b      	ldr	r3, [pc, #44]	@ (8012e70 <siscanf+0x4c>)
 8012e42:	9003      	str	r0, [sp, #12]
 8012e44:	9007      	str	r0, [sp, #28]
 8012e46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e48:	480a      	ldr	r0, [pc, #40]	@ (8012e74 <siscanf+0x50>)
 8012e4a:	9401      	str	r4, [sp, #4]
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012e50:	9314      	str	r3, [sp, #80]	@ 0x50
 8012e52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e5a:	462a      	mov	r2, r5
 8012e5c:	4623      	mov	r3, r4
 8012e5e:	a902      	add	r1, sp, #8
 8012e60:	6800      	ldr	r0, [r0, #0]
 8012e62:	f000 f9bd 	bl	80131e0 <__ssvfiscanf_r>
 8012e66:	b01c      	add	sp, #112	@ 0x70
 8012e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e6c:	b003      	add	sp, #12
 8012e6e:	4770      	bx	lr
 8012e70:	0801040b 	.word	0x0801040b
 8012e74:	20000030 	.word	0x20000030

08012e78 <memmove>:
 8012e78:	4288      	cmp	r0, r1
 8012e7a:	b510      	push	{r4, lr}
 8012e7c:	eb01 0402 	add.w	r4, r1, r2
 8012e80:	d902      	bls.n	8012e88 <memmove+0x10>
 8012e82:	4284      	cmp	r4, r0
 8012e84:	4623      	mov	r3, r4
 8012e86:	d807      	bhi.n	8012e98 <memmove+0x20>
 8012e88:	1e43      	subs	r3, r0, #1
 8012e8a:	42a1      	cmp	r1, r4
 8012e8c:	d008      	beq.n	8012ea0 <memmove+0x28>
 8012e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e96:	e7f8      	b.n	8012e8a <memmove+0x12>
 8012e98:	4402      	add	r2, r0
 8012e9a:	4601      	mov	r1, r0
 8012e9c:	428a      	cmp	r2, r1
 8012e9e:	d100      	bne.n	8012ea2 <memmove+0x2a>
 8012ea0:	bd10      	pop	{r4, pc}
 8012ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012eaa:	e7f7      	b.n	8012e9c <memmove+0x24>

08012eac <strncmp>:
 8012eac:	b510      	push	{r4, lr}
 8012eae:	b16a      	cbz	r2, 8012ecc <strncmp+0x20>
 8012eb0:	3901      	subs	r1, #1
 8012eb2:	1884      	adds	r4, r0, r2
 8012eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012eb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d103      	bne.n	8012ec8 <strncmp+0x1c>
 8012ec0:	42a0      	cmp	r0, r4
 8012ec2:	d001      	beq.n	8012ec8 <strncmp+0x1c>
 8012ec4:	2a00      	cmp	r2, #0
 8012ec6:	d1f5      	bne.n	8012eb4 <strncmp+0x8>
 8012ec8:	1ad0      	subs	r0, r2, r3
 8012eca:	bd10      	pop	{r4, pc}
 8012ecc:	4610      	mov	r0, r2
 8012ece:	e7fc      	b.n	8012eca <strncmp+0x1e>

08012ed0 <__gettzinfo>:
 8012ed0:	4800      	ldr	r0, [pc, #0]	@ (8012ed4 <__gettzinfo+0x4>)
 8012ed2:	4770      	bx	lr
 8012ed4:	20000080 	.word	0x20000080

08012ed8 <gmtime_r>:
 8012ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012edc:	4a4d      	ldr	r2, [pc, #308]	@ (8013014 <gmtime_r+0x13c>)
 8012ede:	460c      	mov	r4, r1
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012ee6:	f7ed feb7 	bl	8000c58 <__aeabi_ldivmod>
 8012eea:	2a00      	cmp	r2, #0
 8012eec:	bfbc      	itt	lt
 8012eee:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8012ef2:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8012ef6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8012efa:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8012efe:	fbb2 f3f1 	udiv	r3, r2, r1
 8012f02:	fb01 2213 	mls	r2, r1, r3, r2
 8012f06:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8012f0a:	bfac      	ite	ge
 8012f0c:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8012f10:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8012f14:	60a3      	str	r3, [r4, #8]
 8012f16:	fbb2 f3f1 	udiv	r3, r2, r1
 8012f1a:	fb01 2213 	mls	r2, r1, r3, r2
 8012f1e:	6063      	str	r3, [r4, #4]
 8012f20:	6022      	str	r2, [r4, #0]
 8012f22:	1cc3      	adds	r3, r0, #3
 8012f24:	2207      	movs	r2, #7
 8012f26:	fb93 f2f2 	sdiv	r2, r3, r2
 8012f2a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8012f2e:	1a9b      	subs	r3, r3, r2
 8012f30:	bf48      	it	mi
 8012f32:	3307      	addmi	r3, #7
 8012f34:	2800      	cmp	r0, #0
 8012f36:	61a3      	str	r3, [r4, #24]
 8012f38:	bfb8      	it	lt
 8012f3a:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8012f3e:	4936      	ldr	r1, [pc, #216]	@ (8013018 <gmtime_r+0x140>)
 8012f40:	bfae      	itee	ge
 8012f42:	fb90 f1f1 	sdivge	r1, r0, r1
 8012f46:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8012f4a:	fb93 f1f1 	sdivlt	r1, r3, r1
 8012f4e:	4b33      	ldr	r3, [pc, #204]	@ (801301c <gmtime_r+0x144>)
 8012f50:	fb03 0001 	mla	r0, r3, r1, r0
 8012f54:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8012f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8012f5c:	4403      	add	r3, r0
 8012f5e:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8012f62:	fbb0 f2fc 	udiv	r2, r0, ip
 8012f66:	1a9b      	subs	r3, r3, r2
 8012f68:	f240 176d 	movw	r7, #365	@ 0x16d
 8012f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8013020 <gmtime_r+0x148>)
 8012f6e:	fbb0 f2f2 	udiv	r2, r0, r2
 8012f72:	2664      	movs	r6, #100	@ 0x64
 8012f74:	1a9b      	subs	r3, r3, r2
 8012f76:	fbb3 f2f7 	udiv	r2, r3, r7
 8012f7a:	fbb3 f3fc 	udiv	r3, r3, ip
 8012f7e:	fbb2 f5f6 	udiv	r5, r2, r6
 8012f82:	1aeb      	subs	r3, r5, r3
 8012f84:	4403      	add	r3, r0
 8012f86:	fb07 3312 	mls	r3, r7, r2, r3
 8012f8a:	2099      	movs	r0, #153	@ 0x99
 8012f8c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8012f90:	3702      	adds	r7, #2
 8012f92:	f103 0e01 	add.w	lr, r3, #1
 8012f96:	fbb7 fcf0 	udiv	ip, r7, r0
 8012f9a:	fb00 f00c 	mul.w	r0, r0, ip
 8012f9e:	3002      	adds	r0, #2
 8012fa0:	f04f 0805 	mov.w	r8, #5
 8012fa4:	fbb0 f0f8 	udiv	r0, r0, r8
 8012fa8:	ebae 0000 	sub.w	r0, lr, r0
 8012fac:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8012fb0:	4577      	cmp	r7, lr
 8012fb2:	bf8c      	ite	hi
 8012fb4:	f06f 0709 	mvnhi.w	r7, #9
 8012fb8:	2702      	movls	r7, #2
 8012fba:	4467      	add	r7, ip
 8012fbc:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8012fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fc4:	2f01      	cmp	r7, #1
 8012fc6:	bf98      	it	ls
 8012fc8:	3101      	addls	r1, #1
 8012fca:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8012fce:	d30c      	bcc.n	8012fea <gmtime_r+0x112>
 8012fd0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8012fd4:	61e3      	str	r3, [r4, #28]
 8012fd6:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8012fda:	2300      	movs	r3, #0
 8012fdc:	60e0      	str	r0, [r4, #12]
 8012fde:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8012fe2:	6223      	str	r3, [r4, #32]
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fea:	f012 0f03 	tst.w	r2, #3
 8012fee:	d102      	bne.n	8012ff6 <gmtime_r+0x11e>
 8012ff0:	fb06 2515 	mls	r5, r6, r5, r2
 8012ff4:	b95d      	cbnz	r5, 801300e <gmtime_r+0x136>
 8012ff6:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8012ffa:	fbb2 f6f5 	udiv	r6, r2, r5
 8012ffe:	fb05 2216 	mls	r2, r5, r6, r2
 8013002:	fab2 f282 	clz	r2, r2
 8013006:	0952      	lsrs	r2, r2, #5
 8013008:	333b      	adds	r3, #59	@ 0x3b
 801300a:	4413      	add	r3, r2
 801300c:	e7e2      	b.n	8012fd4 <gmtime_r+0xfc>
 801300e:	2201      	movs	r2, #1
 8013010:	e7fa      	b.n	8013008 <gmtime_r+0x130>
 8013012:	bf00      	nop
 8013014:	00015180 	.word	0x00015180
 8013018:	00023ab1 	.word	0x00023ab1
 801301c:	fffdc54f 	.word	0xfffdc54f
 8013020:	00023ab0 	.word	0x00023ab0

08013024 <_sbrk_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4d06      	ldr	r5, [pc, #24]	@ (8013040 <_sbrk_r+0x1c>)
 8013028:	2300      	movs	r3, #0
 801302a:	4604      	mov	r4, r0
 801302c:	4608      	mov	r0, r1
 801302e:	602b      	str	r3, [r5, #0]
 8013030:	f7f5 fc8c 	bl	800894c <_sbrk>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	d102      	bne.n	801303e <_sbrk_r+0x1a>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	b103      	cbz	r3, 801303e <_sbrk_r+0x1a>
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	2000a760 	.word	0x2000a760

08013044 <abort>:
 8013044:	b508      	push	{r3, lr}
 8013046:	2006      	movs	r0, #6
 8013048:	f000 fdfe 	bl	8013c48 <raise>
 801304c:	2001      	movs	r0, #1
 801304e:	f7f5 fc05 	bl	800885c <_exit>

08013052 <_calloc_r>:
 8013052:	b570      	push	{r4, r5, r6, lr}
 8013054:	fba1 5402 	umull	r5, r4, r1, r2
 8013058:	b93c      	cbnz	r4, 801306a <_calloc_r+0x18>
 801305a:	4629      	mov	r1, r5
 801305c:	f7ff f844 	bl	80120e8 <_malloc_r>
 8013060:	4606      	mov	r6, r0
 8013062:	b928      	cbnz	r0, 8013070 <_calloc_r+0x1e>
 8013064:	2600      	movs	r6, #0
 8013066:	4630      	mov	r0, r6
 8013068:	bd70      	pop	{r4, r5, r6, pc}
 801306a:	220c      	movs	r2, #12
 801306c:	6002      	str	r2, [r0, #0]
 801306e:	e7f9      	b.n	8013064 <_calloc_r+0x12>
 8013070:	462a      	mov	r2, r5
 8013072:	4621      	mov	r1, r4
 8013074:	f7fd f9fd 	bl	8010472 <memset>
 8013078:	e7f5      	b.n	8013066 <_calloc_r+0x14>
	...

0801307c <__env_lock>:
 801307c:	4801      	ldr	r0, [pc, #4]	@ (8013084 <__env_lock+0x8>)
 801307e:	f7fe b8e5 	b.w	801124c <__retarget_lock_acquire_recursive>
 8013082:	bf00      	nop
 8013084:	2000a765 	.word	0x2000a765

08013088 <__env_unlock>:
 8013088:	4801      	ldr	r0, [pc, #4]	@ (8013090 <__env_unlock+0x8>)
 801308a:	f7fe b8e1 	b.w	8011250 <__retarget_lock_release_recursive>
 801308e:	bf00      	nop
 8013090:	2000a765 	.word	0x2000a765

08013094 <__ascii_mbtowc>:
 8013094:	b082      	sub	sp, #8
 8013096:	b901      	cbnz	r1, 801309a <__ascii_mbtowc+0x6>
 8013098:	a901      	add	r1, sp, #4
 801309a:	b142      	cbz	r2, 80130ae <__ascii_mbtowc+0x1a>
 801309c:	b14b      	cbz	r3, 80130b2 <__ascii_mbtowc+0x1e>
 801309e:	7813      	ldrb	r3, [r2, #0]
 80130a0:	600b      	str	r3, [r1, #0]
 80130a2:	7812      	ldrb	r2, [r2, #0]
 80130a4:	1e10      	subs	r0, r2, #0
 80130a6:	bf18      	it	ne
 80130a8:	2001      	movne	r0, #1
 80130aa:	b002      	add	sp, #8
 80130ac:	4770      	bx	lr
 80130ae:	4610      	mov	r0, r2
 80130b0:	e7fb      	b.n	80130aa <__ascii_mbtowc+0x16>
 80130b2:	f06f 0001 	mvn.w	r0, #1
 80130b6:	e7f8      	b.n	80130aa <__ascii_mbtowc+0x16>

080130b8 <_realloc_r>:
 80130b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130bc:	4680      	mov	r8, r0
 80130be:	4615      	mov	r5, r2
 80130c0:	460c      	mov	r4, r1
 80130c2:	b921      	cbnz	r1, 80130ce <_realloc_r+0x16>
 80130c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130c8:	4611      	mov	r1, r2
 80130ca:	f7ff b80d 	b.w	80120e8 <_malloc_r>
 80130ce:	b92a      	cbnz	r2, 80130dc <_realloc_r+0x24>
 80130d0:	f7fe ff4a 	bl	8011f68 <_free_r>
 80130d4:	2400      	movs	r4, #0
 80130d6:	4620      	mov	r0, r4
 80130d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130dc:	f000 fdd0 	bl	8013c80 <_malloc_usable_size_r>
 80130e0:	4285      	cmp	r5, r0
 80130e2:	4606      	mov	r6, r0
 80130e4:	d802      	bhi.n	80130ec <_realloc_r+0x34>
 80130e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80130ea:	d8f4      	bhi.n	80130d6 <_realloc_r+0x1e>
 80130ec:	4629      	mov	r1, r5
 80130ee:	4640      	mov	r0, r8
 80130f0:	f7fe fffa 	bl	80120e8 <_malloc_r>
 80130f4:	4607      	mov	r7, r0
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d0ec      	beq.n	80130d4 <_realloc_r+0x1c>
 80130fa:	42b5      	cmp	r5, r6
 80130fc:	462a      	mov	r2, r5
 80130fe:	4621      	mov	r1, r4
 8013100:	bf28      	it	cs
 8013102:	4632      	movcs	r2, r6
 8013104:	f7fe f8ad 	bl	8011262 <memcpy>
 8013108:	4621      	mov	r1, r4
 801310a:	4640      	mov	r0, r8
 801310c:	f7fe ff2c 	bl	8011f68 <_free_r>
 8013110:	463c      	mov	r4, r7
 8013112:	e7e0      	b.n	80130d6 <_realloc_r+0x1e>

08013114 <__ascii_wctomb>:
 8013114:	4603      	mov	r3, r0
 8013116:	4608      	mov	r0, r1
 8013118:	b141      	cbz	r1, 801312c <__ascii_wctomb+0x18>
 801311a:	2aff      	cmp	r2, #255	@ 0xff
 801311c:	d904      	bls.n	8013128 <__ascii_wctomb+0x14>
 801311e:	228a      	movs	r2, #138	@ 0x8a
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	f04f 30ff 	mov.w	r0, #4294967295
 8013126:	4770      	bx	lr
 8013128:	700a      	strb	r2, [r1, #0]
 801312a:	2001      	movs	r0, #1
 801312c:	4770      	bx	lr

0801312e <_sungetc_r>:
 801312e:	b538      	push	{r3, r4, r5, lr}
 8013130:	1c4b      	adds	r3, r1, #1
 8013132:	4614      	mov	r4, r2
 8013134:	d103      	bne.n	801313e <_sungetc_r+0x10>
 8013136:	f04f 35ff 	mov.w	r5, #4294967295
 801313a:	4628      	mov	r0, r5
 801313c:	bd38      	pop	{r3, r4, r5, pc}
 801313e:	8993      	ldrh	r3, [r2, #12]
 8013140:	f023 0320 	bic.w	r3, r3, #32
 8013144:	8193      	strh	r3, [r2, #12]
 8013146:	6853      	ldr	r3, [r2, #4]
 8013148:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801314a:	b2cd      	uxtb	r5, r1
 801314c:	b18a      	cbz	r2, 8013172 <_sungetc_r+0x44>
 801314e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013150:	429a      	cmp	r2, r3
 8013152:	dd08      	ble.n	8013166 <_sungetc_r+0x38>
 8013154:	6823      	ldr	r3, [r4, #0]
 8013156:	1e5a      	subs	r2, r3, #1
 8013158:	6022      	str	r2, [r4, #0]
 801315a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801315e:	6863      	ldr	r3, [r4, #4]
 8013160:	3301      	adds	r3, #1
 8013162:	6063      	str	r3, [r4, #4]
 8013164:	e7e9      	b.n	801313a <_sungetc_r+0xc>
 8013166:	4621      	mov	r1, r4
 8013168:	f000 fc77 	bl	8013a5a <__submore>
 801316c:	2800      	cmp	r0, #0
 801316e:	d0f1      	beq.n	8013154 <_sungetc_r+0x26>
 8013170:	e7e1      	b.n	8013136 <_sungetc_r+0x8>
 8013172:	6921      	ldr	r1, [r4, #16]
 8013174:	6822      	ldr	r2, [r4, #0]
 8013176:	b141      	cbz	r1, 801318a <_sungetc_r+0x5c>
 8013178:	4291      	cmp	r1, r2
 801317a:	d206      	bcs.n	801318a <_sungetc_r+0x5c>
 801317c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013180:	42a9      	cmp	r1, r5
 8013182:	d102      	bne.n	801318a <_sungetc_r+0x5c>
 8013184:	3a01      	subs	r2, #1
 8013186:	6022      	str	r2, [r4, #0]
 8013188:	e7ea      	b.n	8013160 <_sungetc_r+0x32>
 801318a:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801318e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013192:	6363      	str	r3, [r4, #52]	@ 0x34
 8013194:	2303      	movs	r3, #3
 8013196:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013198:	4623      	mov	r3, r4
 801319a:	f803 5f46 	strb.w	r5, [r3, #70]!
 801319e:	6023      	str	r3, [r4, #0]
 80131a0:	2301      	movs	r3, #1
 80131a2:	e7de      	b.n	8013162 <_sungetc_r+0x34>

080131a4 <__ssrefill_r>:
 80131a4:	b510      	push	{r4, lr}
 80131a6:	460c      	mov	r4, r1
 80131a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80131aa:	b169      	cbz	r1, 80131c8 <__ssrefill_r+0x24>
 80131ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80131b0:	4299      	cmp	r1, r3
 80131b2:	d001      	beq.n	80131b8 <__ssrefill_r+0x14>
 80131b4:	f7fe fed8 	bl	8011f68 <_free_r>
 80131b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80131ba:	6063      	str	r3, [r4, #4]
 80131bc:	2000      	movs	r0, #0
 80131be:	6360      	str	r0, [r4, #52]	@ 0x34
 80131c0:	b113      	cbz	r3, 80131c8 <__ssrefill_r+0x24>
 80131c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80131c4:	6023      	str	r3, [r4, #0]
 80131c6:	bd10      	pop	{r4, pc}
 80131c8:	6923      	ldr	r3, [r4, #16]
 80131ca:	6023      	str	r3, [r4, #0]
 80131cc:	2300      	movs	r3, #0
 80131ce:	6063      	str	r3, [r4, #4]
 80131d0:	89a3      	ldrh	r3, [r4, #12]
 80131d2:	f043 0320 	orr.w	r3, r3, #32
 80131d6:	81a3      	strh	r3, [r4, #12]
 80131d8:	f04f 30ff 	mov.w	r0, #4294967295
 80131dc:	e7f3      	b.n	80131c6 <__ssrefill_r+0x22>
	...

080131e0 <__ssvfiscanf_r>:
 80131e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131e4:	460c      	mov	r4, r1
 80131e6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80131ea:	2100      	movs	r1, #0
 80131ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80131f0:	49a5      	ldr	r1, [pc, #660]	@ (8013488 <__ssvfiscanf_r+0x2a8>)
 80131f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80131f4:	f10d 0804 	add.w	r8, sp, #4
 80131f8:	49a4      	ldr	r1, [pc, #656]	@ (801348c <__ssvfiscanf_r+0x2ac>)
 80131fa:	4fa5      	ldr	r7, [pc, #660]	@ (8013490 <__ssvfiscanf_r+0x2b0>)
 80131fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013200:	4606      	mov	r6, r0
 8013202:	91a1      	str	r1, [sp, #644]	@ 0x284
 8013204:	9300      	str	r3, [sp, #0]
 8013206:	7813      	ldrb	r3, [r2, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	f000 8158 	beq.w	80134be <__ssvfiscanf_r+0x2de>
 801320e:	5cf9      	ldrb	r1, [r7, r3]
 8013210:	f011 0108 	ands.w	r1, r1, #8
 8013214:	f102 0501 	add.w	r5, r2, #1
 8013218:	d019      	beq.n	801324e <__ssvfiscanf_r+0x6e>
 801321a:	6863      	ldr	r3, [r4, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	dd0f      	ble.n	8013240 <__ssvfiscanf_r+0x60>
 8013220:	6823      	ldr	r3, [r4, #0]
 8013222:	781a      	ldrb	r2, [r3, #0]
 8013224:	5cba      	ldrb	r2, [r7, r2]
 8013226:	0712      	lsls	r2, r2, #28
 8013228:	d401      	bmi.n	801322e <__ssvfiscanf_r+0x4e>
 801322a:	462a      	mov	r2, r5
 801322c:	e7eb      	b.n	8013206 <__ssvfiscanf_r+0x26>
 801322e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013230:	3201      	adds	r2, #1
 8013232:	9245      	str	r2, [sp, #276]	@ 0x114
 8013234:	6862      	ldr	r2, [r4, #4]
 8013236:	3301      	adds	r3, #1
 8013238:	3a01      	subs	r2, #1
 801323a:	6062      	str	r2, [r4, #4]
 801323c:	6023      	str	r3, [r4, #0]
 801323e:	e7ec      	b.n	801321a <__ssvfiscanf_r+0x3a>
 8013240:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013242:	4621      	mov	r1, r4
 8013244:	4630      	mov	r0, r6
 8013246:	4798      	blx	r3
 8013248:	2800      	cmp	r0, #0
 801324a:	d0e9      	beq.n	8013220 <__ssvfiscanf_r+0x40>
 801324c:	e7ed      	b.n	801322a <__ssvfiscanf_r+0x4a>
 801324e:	2b25      	cmp	r3, #37	@ 0x25
 8013250:	d012      	beq.n	8013278 <__ssvfiscanf_r+0x98>
 8013252:	4699      	mov	r9, r3
 8013254:	6863      	ldr	r3, [r4, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	f340 8093 	ble.w	8013382 <__ssvfiscanf_r+0x1a2>
 801325c:	6822      	ldr	r2, [r4, #0]
 801325e:	7813      	ldrb	r3, [r2, #0]
 8013260:	454b      	cmp	r3, r9
 8013262:	f040 812c 	bne.w	80134be <__ssvfiscanf_r+0x2de>
 8013266:	6863      	ldr	r3, [r4, #4]
 8013268:	3b01      	subs	r3, #1
 801326a:	6063      	str	r3, [r4, #4]
 801326c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801326e:	3201      	adds	r2, #1
 8013270:	3301      	adds	r3, #1
 8013272:	6022      	str	r2, [r4, #0]
 8013274:	9345      	str	r3, [sp, #276]	@ 0x114
 8013276:	e7d8      	b.n	801322a <__ssvfiscanf_r+0x4a>
 8013278:	9141      	str	r1, [sp, #260]	@ 0x104
 801327a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801327c:	7853      	ldrb	r3, [r2, #1]
 801327e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013280:	bf02      	ittt	eq
 8013282:	2310      	moveq	r3, #16
 8013284:	1c95      	addeq	r5, r2, #2
 8013286:	9341      	streq	r3, [sp, #260]	@ 0x104
 8013288:	220a      	movs	r2, #10
 801328a:	46a9      	mov	r9, r5
 801328c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8013290:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8013294:	2b09      	cmp	r3, #9
 8013296:	d91e      	bls.n	80132d6 <__ssvfiscanf_r+0xf6>
 8013298:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8013494 <__ssvfiscanf_r+0x2b4>
 801329c:	2203      	movs	r2, #3
 801329e:	4650      	mov	r0, sl
 80132a0:	f7ec ff7e 	bl	80001a0 <memchr>
 80132a4:	b138      	cbz	r0, 80132b6 <__ssvfiscanf_r+0xd6>
 80132a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80132a8:	eba0 000a 	sub.w	r0, r0, sl
 80132ac:	2301      	movs	r3, #1
 80132ae:	4083      	lsls	r3, r0
 80132b0:	4313      	orrs	r3, r2
 80132b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80132b4:	464d      	mov	r5, r9
 80132b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80132ba:	2b78      	cmp	r3, #120	@ 0x78
 80132bc:	d806      	bhi.n	80132cc <__ssvfiscanf_r+0xec>
 80132be:	2b57      	cmp	r3, #87	@ 0x57
 80132c0:	d810      	bhi.n	80132e4 <__ssvfiscanf_r+0x104>
 80132c2:	2b25      	cmp	r3, #37	@ 0x25
 80132c4:	d0c5      	beq.n	8013252 <__ssvfiscanf_r+0x72>
 80132c6:	d857      	bhi.n	8013378 <__ssvfiscanf_r+0x198>
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d065      	beq.n	8013398 <__ssvfiscanf_r+0x1b8>
 80132cc:	2303      	movs	r3, #3
 80132ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80132d0:	230a      	movs	r3, #10
 80132d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80132d4:	e078      	b.n	80133c8 <__ssvfiscanf_r+0x1e8>
 80132d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80132d8:	fb02 1103 	mla	r1, r2, r3, r1
 80132dc:	3930      	subs	r1, #48	@ 0x30
 80132de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80132e0:	464d      	mov	r5, r9
 80132e2:	e7d2      	b.n	801328a <__ssvfiscanf_r+0xaa>
 80132e4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80132e8:	2a20      	cmp	r2, #32
 80132ea:	d8ef      	bhi.n	80132cc <__ssvfiscanf_r+0xec>
 80132ec:	a101      	add	r1, pc, #4	@ (adr r1, 80132f4 <__ssvfiscanf_r+0x114>)
 80132ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80132f2:	bf00      	nop
 80132f4:	080133a7 	.word	0x080133a7
 80132f8:	080132cd 	.word	0x080132cd
 80132fc:	080132cd 	.word	0x080132cd
 8013300:	08013401 	.word	0x08013401
 8013304:	080132cd 	.word	0x080132cd
 8013308:	080132cd 	.word	0x080132cd
 801330c:	080132cd 	.word	0x080132cd
 8013310:	080132cd 	.word	0x080132cd
 8013314:	080132cd 	.word	0x080132cd
 8013318:	080132cd 	.word	0x080132cd
 801331c:	080132cd 	.word	0x080132cd
 8013320:	08013417 	.word	0x08013417
 8013324:	080133fd 	.word	0x080133fd
 8013328:	0801337f 	.word	0x0801337f
 801332c:	0801337f 	.word	0x0801337f
 8013330:	0801337f 	.word	0x0801337f
 8013334:	080132cd 	.word	0x080132cd
 8013338:	080133b9 	.word	0x080133b9
 801333c:	080132cd 	.word	0x080132cd
 8013340:	080132cd 	.word	0x080132cd
 8013344:	080132cd 	.word	0x080132cd
 8013348:	080132cd 	.word	0x080132cd
 801334c:	08013427 	.word	0x08013427
 8013350:	080133c1 	.word	0x080133c1
 8013354:	0801339f 	.word	0x0801339f
 8013358:	080132cd 	.word	0x080132cd
 801335c:	080132cd 	.word	0x080132cd
 8013360:	08013423 	.word	0x08013423
 8013364:	080132cd 	.word	0x080132cd
 8013368:	080133fd 	.word	0x080133fd
 801336c:	080132cd 	.word	0x080132cd
 8013370:	080132cd 	.word	0x080132cd
 8013374:	080133a7 	.word	0x080133a7
 8013378:	3b45      	subs	r3, #69	@ 0x45
 801337a:	2b02      	cmp	r3, #2
 801337c:	d8a6      	bhi.n	80132cc <__ssvfiscanf_r+0xec>
 801337e:	2305      	movs	r3, #5
 8013380:	e021      	b.n	80133c6 <__ssvfiscanf_r+0x1e6>
 8013382:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013384:	4621      	mov	r1, r4
 8013386:	4630      	mov	r0, r6
 8013388:	4798      	blx	r3
 801338a:	2800      	cmp	r0, #0
 801338c:	f43f af66 	beq.w	801325c <__ssvfiscanf_r+0x7c>
 8013390:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013392:	2800      	cmp	r0, #0
 8013394:	f040 808b 	bne.w	80134ae <__ssvfiscanf_r+0x2ce>
 8013398:	f04f 30ff 	mov.w	r0, #4294967295
 801339c:	e08b      	b.n	80134b6 <__ssvfiscanf_r+0x2d6>
 801339e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80133a0:	f042 0220 	orr.w	r2, r2, #32
 80133a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80133a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80133a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80133ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80133ae:	2210      	movs	r2, #16
 80133b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80133b2:	9242      	str	r2, [sp, #264]	@ 0x108
 80133b4:	d902      	bls.n	80133bc <__ssvfiscanf_r+0x1dc>
 80133b6:	e005      	b.n	80133c4 <__ssvfiscanf_r+0x1e4>
 80133b8:	2300      	movs	r3, #0
 80133ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80133bc:	2303      	movs	r3, #3
 80133be:	e002      	b.n	80133c6 <__ssvfiscanf_r+0x1e6>
 80133c0:	2308      	movs	r3, #8
 80133c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80133c4:	2304      	movs	r3, #4
 80133c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80133c8:	6863      	ldr	r3, [r4, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	dd39      	ble.n	8013442 <__ssvfiscanf_r+0x262>
 80133ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80133d0:	0659      	lsls	r1, r3, #25
 80133d2:	d404      	bmi.n	80133de <__ssvfiscanf_r+0x1fe>
 80133d4:	6823      	ldr	r3, [r4, #0]
 80133d6:	781a      	ldrb	r2, [r3, #0]
 80133d8:	5cba      	ldrb	r2, [r7, r2]
 80133da:	0712      	lsls	r2, r2, #28
 80133dc:	d438      	bmi.n	8013450 <__ssvfiscanf_r+0x270>
 80133de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	dc47      	bgt.n	8013474 <__ssvfiscanf_r+0x294>
 80133e4:	466b      	mov	r3, sp
 80133e6:	4622      	mov	r2, r4
 80133e8:	a941      	add	r1, sp, #260	@ 0x104
 80133ea:	4630      	mov	r0, r6
 80133ec:	f000 f9ae 	bl	801374c <_scanf_chars>
 80133f0:	2801      	cmp	r0, #1
 80133f2:	d064      	beq.n	80134be <__ssvfiscanf_r+0x2de>
 80133f4:	2802      	cmp	r0, #2
 80133f6:	f47f af18 	bne.w	801322a <__ssvfiscanf_r+0x4a>
 80133fa:	e7c9      	b.n	8013390 <__ssvfiscanf_r+0x1b0>
 80133fc:	220a      	movs	r2, #10
 80133fe:	e7d7      	b.n	80133b0 <__ssvfiscanf_r+0x1d0>
 8013400:	4629      	mov	r1, r5
 8013402:	4640      	mov	r0, r8
 8013404:	f000 faf0 	bl	80139e8 <__sccl>
 8013408:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801340a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801340e:	9341      	str	r3, [sp, #260]	@ 0x104
 8013410:	4605      	mov	r5, r0
 8013412:	2301      	movs	r3, #1
 8013414:	e7d7      	b.n	80133c6 <__ssvfiscanf_r+0x1e6>
 8013416:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801341c:	9341      	str	r3, [sp, #260]	@ 0x104
 801341e:	2300      	movs	r3, #0
 8013420:	e7d1      	b.n	80133c6 <__ssvfiscanf_r+0x1e6>
 8013422:	2302      	movs	r3, #2
 8013424:	e7cf      	b.n	80133c6 <__ssvfiscanf_r+0x1e6>
 8013426:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8013428:	06c3      	lsls	r3, r0, #27
 801342a:	f53f aefe 	bmi.w	801322a <__ssvfiscanf_r+0x4a>
 801342e:	9b00      	ldr	r3, [sp, #0]
 8013430:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013432:	1d19      	adds	r1, r3, #4
 8013434:	9100      	str	r1, [sp, #0]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	07c0      	lsls	r0, r0, #31
 801343a:	bf4c      	ite	mi
 801343c:	801a      	strhmi	r2, [r3, #0]
 801343e:	601a      	strpl	r2, [r3, #0]
 8013440:	e6f3      	b.n	801322a <__ssvfiscanf_r+0x4a>
 8013442:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013444:	4621      	mov	r1, r4
 8013446:	4630      	mov	r0, r6
 8013448:	4798      	blx	r3
 801344a:	2800      	cmp	r0, #0
 801344c:	d0bf      	beq.n	80133ce <__ssvfiscanf_r+0x1ee>
 801344e:	e79f      	b.n	8013390 <__ssvfiscanf_r+0x1b0>
 8013450:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013452:	3201      	adds	r2, #1
 8013454:	9245      	str	r2, [sp, #276]	@ 0x114
 8013456:	6862      	ldr	r2, [r4, #4]
 8013458:	3a01      	subs	r2, #1
 801345a:	2a00      	cmp	r2, #0
 801345c:	6062      	str	r2, [r4, #4]
 801345e:	dd02      	ble.n	8013466 <__ssvfiscanf_r+0x286>
 8013460:	3301      	adds	r3, #1
 8013462:	6023      	str	r3, [r4, #0]
 8013464:	e7b6      	b.n	80133d4 <__ssvfiscanf_r+0x1f4>
 8013466:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013468:	4621      	mov	r1, r4
 801346a:	4630      	mov	r0, r6
 801346c:	4798      	blx	r3
 801346e:	2800      	cmp	r0, #0
 8013470:	d0b0      	beq.n	80133d4 <__ssvfiscanf_r+0x1f4>
 8013472:	e78d      	b.n	8013390 <__ssvfiscanf_r+0x1b0>
 8013474:	2b04      	cmp	r3, #4
 8013476:	dc0f      	bgt.n	8013498 <__ssvfiscanf_r+0x2b8>
 8013478:	466b      	mov	r3, sp
 801347a:	4622      	mov	r2, r4
 801347c:	a941      	add	r1, sp, #260	@ 0x104
 801347e:	4630      	mov	r0, r6
 8013480:	f000 f9be 	bl	8013800 <_scanf_i>
 8013484:	e7b4      	b.n	80133f0 <__ssvfiscanf_r+0x210>
 8013486:	bf00      	nop
 8013488:	0801312f 	.word	0x0801312f
 801348c:	080131a5 	.word	0x080131a5
 8013490:	08015671 	.word	0x08015671
 8013494:	08015777 	.word	0x08015777
 8013498:	4b0a      	ldr	r3, [pc, #40]	@ (80134c4 <__ssvfiscanf_r+0x2e4>)
 801349a:	2b00      	cmp	r3, #0
 801349c:	f43f aec5 	beq.w	801322a <__ssvfiscanf_r+0x4a>
 80134a0:	466b      	mov	r3, sp
 80134a2:	4622      	mov	r2, r4
 80134a4:	a941      	add	r1, sp, #260	@ 0x104
 80134a6:	4630      	mov	r0, r6
 80134a8:	f3af 8000 	nop.w
 80134ac:	e7a0      	b.n	80133f0 <__ssvfiscanf_r+0x210>
 80134ae:	89a3      	ldrh	r3, [r4, #12]
 80134b0:	065b      	lsls	r3, r3, #25
 80134b2:	f53f af71 	bmi.w	8013398 <__ssvfiscanf_r+0x1b8>
 80134b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80134ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134be:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80134c0:	e7f9      	b.n	80134b6 <__ssvfiscanf_r+0x2d6>
 80134c2:	bf00      	nop
 80134c4:	00000000 	.word	0x00000000

080134c8 <__sfputc_r>:
 80134c8:	6893      	ldr	r3, [r2, #8]
 80134ca:	3b01      	subs	r3, #1
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	b410      	push	{r4}
 80134d0:	6093      	str	r3, [r2, #8]
 80134d2:	da08      	bge.n	80134e6 <__sfputc_r+0x1e>
 80134d4:	6994      	ldr	r4, [r2, #24]
 80134d6:	42a3      	cmp	r3, r4
 80134d8:	db01      	blt.n	80134de <__sfputc_r+0x16>
 80134da:	290a      	cmp	r1, #10
 80134dc:	d103      	bne.n	80134e6 <__sfputc_r+0x1e>
 80134de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134e2:	f000 baf4 	b.w	8013ace <__swbuf_r>
 80134e6:	6813      	ldr	r3, [r2, #0]
 80134e8:	1c58      	adds	r0, r3, #1
 80134ea:	6010      	str	r0, [r2, #0]
 80134ec:	7019      	strb	r1, [r3, #0]
 80134ee:	4608      	mov	r0, r1
 80134f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134f4:	4770      	bx	lr

080134f6 <__sfputs_r>:
 80134f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f8:	4606      	mov	r6, r0
 80134fa:	460f      	mov	r7, r1
 80134fc:	4614      	mov	r4, r2
 80134fe:	18d5      	adds	r5, r2, r3
 8013500:	42ac      	cmp	r4, r5
 8013502:	d101      	bne.n	8013508 <__sfputs_r+0x12>
 8013504:	2000      	movs	r0, #0
 8013506:	e007      	b.n	8013518 <__sfputs_r+0x22>
 8013508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801350c:	463a      	mov	r2, r7
 801350e:	4630      	mov	r0, r6
 8013510:	f7ff ffda 	bl	80134c8 <__sfputc_r>
 8013514:	1c43      	adds	r3, r0, #1
 8013516:	d1f3      	bne.n	8013500 <__sfputs_r+0xa>
 8013518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801351c <_vfiprintf_r>:
 801351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013520:	460d      	mov	r5, r1
 8013522:	b09d      	sub	sp, #116	@ 0x74
 8013524:	4614      	mov	r4, r2
 8013526:	4698      	mov	r8, r3
 8013528:	4606      	mov	r6, r0
 801352a:	b118      	cbz	r0, 8013534 <_vfiprintf_r+0x18>
 801352c:	6a03      	ldr	r3, [r0, #32]
 801352e:	b90b      	cbnz	r3, 8013534 <_vfiprintf_r+0x18>
 8013530:	f7fc ff04 	bl	801033c <__sinit>
 8013534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013536:	07d9      	lsls	r1, r3, #31
 8013538:	d405      	bmi.n	8013546 <_vfiprintf_r+0x2a>
 801353a:	89ab      	ldrh	r3, [r5, #12]
 801353c:	059a      	lsls	r2, r3, #22
 801353e:	d402      	bmi.n	8013546 <_vfiprintf_r+0x2a>
 8013540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013542:	f7fd fe83 	bl	801124c <__retarget_lock_acquire_recursive>
 8013546:	89ab      	ldrh	r3, [r5, #12]
 8013548:	071b      	lsls	r3, r3, #28
 801354a:	d501      	bpl.n	8013550 <_vfiprintf_r+0x34>
 801354c:	692b      	ldr	r3, [r5, #16]
 801354e:	b99b      	cbnz	r3, 8013578 <_vfiprintf_r+0x5c>
 8013550:	4629      	mov	r1, r5
 8013552:	4630      	mov	r0, r6
 8013554:	f000 fafa 	bl	8013b4c <__swsetup_r>
 8013558:	b170      	cbz	r0, 8013578 <_vfiprintf_r+0x5c>
 801355a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801355c:	07dc      	lsls	r4, r3, #31
 801355e:	d504      	bpl.n	801356a <_vfiprintf_r+0x4e>
 8013560:	f04f 30ff 	mov.w	r0, #4294967295
 8013564:	b01d      	add	sp, #116	@ 0x74
 8013566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356a:	89ab      	ldrh	r3, [r5, #12]
 801356c:	0598      	lsls	r0, r3, #22
 801356e:	d4f7      	bmi.n	8013560 <_vfiprintf_r+0x44>
 8013570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013572:	f7fd fe6d 	bl	8011250 <__retarget_lock_release_recursive>
 8013576:	e7f3      	b.n	8013560 <_vfiprintf_r+0x44>
 8013578:	2300      	movs	r3, #0
 801357a:	9309      	str	r3, [sp, #36]	@ 0x24
 801357c:	2320      	movs	r3, #32
 801357e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013582:	f8cd 800c 	str.w	r8, [sp, #12]
 8013586:	2330      	movs	r3, #48	@ 0x30
 8013588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013738 <_vfiprintf_r+0x21c>
 801358c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013590:	f04f 0901 	mov.w	r9, #1
 8013594:	4623      	mov	r3, r4
 8013596:	469a      	mov	sl, r3
 8013598:	f813 2b01 	ldrb.w	r2, [r3], #1
 801359c:	b10a      	cbz	r2, 80135a2 <_vfiprintf_r+0x86>
 801359e:	2a25      	cmp	r2, #37	@ 0x25
 80135a0:	d1f9      	bne.n	8013596 <_vfiprintf_r+0x7a>
 80135a2:	ebba 0b04 	subs.w	fp, sl, r4
 80135a6:	d00b      	beq.n	80135c0 <_vfiprintf_r+0xa4>
 80135a8:	465b      	mov	r3, fp
 80135aa:	4622      	mov	r2, r4
 80135ac:	4629      	mov	r1, r5
 80135ae:	4630      	mov	r0, r6
 80135b0:	f7ff ffa1 	bl	80134f6 <__sfputs_r>
 80135b4:	3001      	adds	r0, #1
 80135b6:	f000 80a7 	beq.w	8013708 <_vfiprintf_r+0x1ec>
 80135ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135bc:	445a      	add	r2, fp
 80135be:	9209      	str	r2, [sp, #36]	@ 0x24
 80135c0:	f89a 3000 	ldrb.w	r3, [sl]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	f000 809f 	beq.w	8013708 <_vfiprintf_r+0x1ec>
 80135ca:	2300      	movs	r3, #0
 80135cc:	f04f 32ff 	mov.w	r2, #4294967295
 80135d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135d4:	f10a 0a01 	add.w	sl, sl, #1
 80135d8:	9304      	str	r3, [sp, #16]
 80135da:	9307      	str	r3, [sp, #28]
 80135dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80135e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80135e2:	4654      	mov	r4, sl
 80135e4:	2205      	movs	r2, #5
 80135e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ea:	4853      	ldr	r0, [pc, #332]	@ (8013738 <_vfiprintf_r+0x21c>)
 80135ec:	f7ec fdd8 	bl	80001a0 <memchr>
 80135f0:	9a04      	ldr	r2, [sp, #16]
 80135f2:	b9d8      	cbnz	r0, 801362c <_vfiprintf_r+0x110>
 80135f4:	06d1      	lsls	r1, r2, #27
 80135f6:	bf44      	itt	mi
 80135f8:	2320      	movmi	r3, #32
 80135fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135fe:	0713      	lsls	r3, r2, #28
 8013600:	bf44      	itt	mi
 8013602:	232b      	movmi	r3, #43	@ 0x2b
 8013604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013608:	f89a 3000 	ldrb.w	r3, [sl]
 801360c:	2b2a      	cmp	r3, #42	@ 0x2a
 801360e:	d015      	beq.n	801363c <_vfiprintf_r+0x120>
 8013610:	9a07      	ldr	r2, [sp, #28]
 8013612:	4654      	mov	r4, sl
 8013614:	2000      	movs	r0, #0
 8013616:	f04f 0c0a 	mov.w	ip, #10
 801361a:	4621      	mov	r1, r4
 801361c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013620:	3b30      	subs	r3, #48	@ 0x30
 8013622:	2b09      	cmp	r3, #9
 8013624:	d94b      	bls.n	80136be <_vfiprintf_r+0x1a2>
 8013626:	b1b0      	cbz	r0, 8013656 <_vfiprintf_r+0x13a>
 8013628:	9207      	str	r2, [sp, #28]
 801362a:	e014      	b.n	8013656 <_vfiprintf_r+0x13a>
 801362c:	eba0 0308 	sub.w	r3, r0, r8
 8013630:	fa09 f303 	lsl.w	r3, r9, r3
 8013634:	4313      	orrs	r3, r2
 8013636:	9304      	str	r3, [sp, #16]
 8013638:	46a2      	mov	sl, r4
 801363a:	e7d2      	b.n	80135e2 <_vfiprintf_r+0xc6>
 801363c:	9b03      	ldr	r3, [sp, #12]
 801363e:	1d19      	adds	r1, r3, #4
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	9103      	str	r1, [sp, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	bfbb      	ittet	lt
 8013648:	425b      	neglt	r3, r3
 801364a:	f042 0202 	orrlt.w	r2, r2, #2
 801364e:	9307      	strge	r3, [sp, #28]
 8013650:	9307      	strlt	r3, [sp, #28]
 8013652:	bfb8      	it	lt
 8013654:	9204      	strlt	r2, [sp, #16]
 8013656:	7823      	ldrb	r3, [r4, #0]
 8013658:	2b2e      	cmp	r3, #46	@ 0x2e
 801365a:	d10a      	bne.n	8013672 <_vfiprintf_r+0x156>
 801365c:	7863      	ldrb	r3, [r4, #1]
 801365e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013660:	d132      	bne.n	80136c8 <_vfiprintf_r+0x1ac>
 8013662:	9b03      	ldr	r3, [sp, #12]
 8013664:	1d1a      	adds	r2, r3, #4
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	9203      	str	r2, [sp, #12]
 801366a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801366e:	3402      	adds	r4, #2
 8013670:	9305      	str	r3, [sp, #20]
 8013672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013748 <_vfiprintf_r+0x22c>
 8013676:	7821      	ldrb	r1, [r4, #0]
 8013678:	2203      	movs	r2, #3
 801367a:	4650      	mov	r0, sl
 801367c:	f7ec fd90 	bl	80001a0 <memchr>
 8013680:	b138      	cbz	r0, 8013692 <_vfiprintf_r+0x176>
 8013682:	9b04      	ldr	r3, [sp, #16]
 8013684:	eba0 000a 	sub.w	r0, r0, sl
 8013688:	2240      	movs	r2, #64	@ 0x40
 801368a:	4082      	lsls	r2, r0
 801368c:	4313      	orrs	r3, r2
 801368e:	3401      	adds	r4, #1
 8013690:	9304      	str	r3, [sp, #16]
 8013692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013696:	4829      	ldr	r0, [pc, #164]	@ (801373c <_vfiprintf_r+0x220>)
 8013698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801369c:	2206      	movs	r2, #6
 801369e:	f7ec fd7f 	bl	80001a0 <memchr>
 80136a2:	2800      	cmp	r0, #0
 80136a4:	d03f      	beq.n	8013726 <_vfiprintf_r+0x20a>
 80136a6:	4b26      	ldr	r3, [pc, #152]	@ (8013740 <_vfiprintf_r+0x224>)
 80136a8:	bb1b      	cbnz	r3, 80136f2 <_vfiprintf_r+0x1d6>
 80136aa:	9b03      	ldr	r3, [sp, #12]
 80136ac:	3307      	adds	r3, #7
 80136ae:	f023 0307 	bic.w	r3, r3, #7
 80136b2:	3308      	adds	r3, #8
 80136b4:	9303      	str	r3, [sp, #12]
 80136b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136b8:	443b      	add	r3, r7
 80136ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80136bc:	e76a      	b.n	8013594 <_vfiprintf_r+0x78>
 80136be:	fb0c 3202 	mla	r2, ip, r2, r3
 80136c2:	460c      	mov	r4, r1
 80136c4:	2001      	movs	r0, #1
 80136c6:	e7a8      	b.n	801361a <_vfiprintf_r+0xfe>
 80136c8:	2300      	movs	r3, #0
 80136ca:	3401      	adds	r4, #1
 80136cc:	9305      	str	r3, [sp, #20]
 80136ce:	4619      	mov	r1, r3
 80136d0:	f04f 0c0a 	mov.w	ip, #10
 80136d4:	4620      	mov	r0, r4
 80136d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136da:	3a30      	subs	r2, #48	@ 0x30
 80136dc:	2a09      	cmp	r2, #9
 80136de:	d903      	bls.n	80136e8 <_vfiprintf_r+0x1cc>
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d0c6      	beq.n	8013672 <_vfiprintf_r+0x156>
 80136e4:	9105      	str	r1, [sp, #20]
 80136e6:	e7c4      	b.n	8013672 <_vfiprintf_r+0x156>
 80136e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80136ec:	4604      	mov	r4, r0
 80136ee:	2301      	movs	r3, #1
 80136f0:	e7f0      	b.n	80136d4 <_vfiprintf_r+0x1b8>
 80136f2:	ab03      	add	r3, sp, #12
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	462a      	mov	r2, r5
 80136f8:	4b12      	ldr	r3, [pc, #72]	@ (8013744 <_vfiprintf_r+0x228>)
 80136fa:	a904      	add	r1, sp, #16
 80136fc:	4630      	mov	r0, r6
 80136fe:	f7fc f9d9 	bl	800fab4 <_printf_float>
 8013702:	4607      	mov	r7, r0
 8013704:	1c78      	adds	r0, r7, #1
 8013706:	d1d6      	bne.n	80136b6 <_vfiprintf_r+0x19a>
 8013708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801370a:	07d9      	lsls	r1, r3, #31
 801370c:	d405      	bmi.n	801371a <_vfiprintf_r+0x1fe>
 801370e:	89ab      	ldrh	r3, [r5, #12]
 8013710:	059a      	lsls	r2, r3, #22
 8013712:	d402      	bmi.n	801371a <_vfiprintf_r+0x1fe>
 8013714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013716:	f7fd fd9b 	bl	8011250 <__retarget_lock_release_recursive>
 801371a:	89ab      	ldrh	r3, [r5, #12]
 801371c:	065b      	lsls	r3, r3, #25
 801371e:	f53f af1f 	bmi.w	8013560 <_vfiprintf_r+0x44>
 8013722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013724:	e71e      	b.n	8013564 <_vfiprintf_r+0x48>
 8013726:	ab03      	add	r3, sp, #12
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	462a      	mov	r2, r5
 801372c:	4b05      	ldr	r3, [pc, #20]	@ (8013744 <_vfiprintf_r+0x228>)
 801372e:	a904      	add	r1, sp, #16
 8013730:	4630      	mov	r0, r6
 8013732:	f7fc fc57 	bl	800ffe4 <_printf_i>
 8013736:	e7e4      	b.n	8013702 <_vfiprintf_r+0x1e6>
 8013738:	08015771 	.word	0x08015771
 801373c:	0801577b 	.word	0x0801577b
 8013740:	0800fab5 	.word	0x0800fab5
 8013744:	080134f7 	.word	0x080134f7
 8013748:	08015777 	.word	0x08015777

0801374c <_scanf_chars>:
 801374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013750:	4615      	mov	r5, r2
 8013752:	688a      	ldr	r2, [r1, #8]
 8013754:	4680      	mov	r8, r0
 8013756:	460c      	mov	r4, r1
 8013758:	b932      	cbnz	r2, 8013768 <_scanf_chars+0x1c>
 801375a:	698a      	ldr	r2, [r1, #24]
 801375c:	2a00      	cmp	r2, #0
 801375e:	bf14      	ite	ne
 8013760:	f04f 32ff 	movne.w	r2, #4294967295
 8013764:	2201      	moveq	r2, #1
 8013766:	608a      	str	r2, [r1, #8]
 8013768:	6822      	ldr	r2, [r4, #0]
 801376a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80137fc <_scanf_chars+0xb0>
 801376e:	06d1      	lsls	r1, r2, #27
 8013770:	bf5f      	itttt	pl
 8013772:	681a      	ldrpl	r2, [r3, #0]
 8013774:	1d11      	addpl	r1, r2, #4
 8013776:	6019      	strpl	r1, [r3, #0]
 8013778:	6816      	ldrpl	r6, [r2, #0]
 801377a:	2700      	movs	r7, #0
 801377c:	69a0      	ldr	r0, [r4, #24]
 801377e:	b188      	cbz	r0, 80137a4 <_scanf_chars+0x58>
 8013780:	2801      	cmp	r0, #1
 8013782:	d107      	bne.n	8013794 <_scanf_chars+0x48>
 8013784:	682b      	ldr	r3, [r5, #0]
 8013786:	781a      	ldrb	r2, [r3, #0]
 8013788:	6963      	ldr	r3, [r4, #20]
 801378a:	5c9b      	ldrb	r3, [r3, r2]
 801378c:	b953      	cbnz	r3, 80137a4 <_scanf_chars+0x58>
 801378e:	2f00      	cmp	r7, #0
 8013790:	d031      	beq.n	80137f6 <_scanf_chars+0xaa>
 8013792:	e022      	b.n	80137da <_scanf_chars+0x8e>
 8013794:	2802      	cmp	r0, #2
 8013796:	d120      	bne.n	80137da <_scanf_chars+0x8e>
 8013798:	682b      	ldr	r3, [r5, #0]
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	f819 3003 	ldrb.w	r3, [r9, r3]
 80137a0:	071b      	lsls	r3, r3, #28
 80137a2:	d41a      	bmi.n	80137da <_scanf_chars+0x8e>
 80137a4:	6823      	ldr	r3, [r4, #0]
 80137a6:	06da      	lsls	r2, r3, #27
 80137a8:	bf5e      	ittt	pl
 80137aa:	682b      	ldrpl	r3, [r5, #0]
 80137ac:	781b      	ldrbpl	r3, [r3, #0]
 80137ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80137b2:	682a      	ldr	r2, [r5, #0]
 80137b4:	686b      	ldr	r3, [r5, #4]
 80137b6:	3201      	adds	r2, #1
 80137b8:	602a      	str	r2, [r5, #0]
 80137ba:	68a2      	ldr	r2, [r4, #8]
 80137bc:	3b01      	subs	r3, #1
 80137be:	3a01      	subs	r2, #1
 80137c0:	606b      	str	r3, [r5, #4]
 80137c2:	3701      	adds	r7, #1
 80137c4:	60a2      	str	r2, [r4, #8]
 80137c6:	b142      	cbz	r2, 80137da <_scanf_chars+0x8e>
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	dcd7      	bgt.n	801377c <_scanf_chars+0x30>
 80137cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80137d0:	4629      	mov	r1, r5
 80137d2:	4640      	mov	r0, r8
 80137d4:	4798      	blx	r3
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d0d0      	beq.n	801377c <_scanf_chars+0x30>
 80137da:	6823      	ldr	r3, [r4, #0]
 80137dc:	f013 0310 	ands.w	r3, r3, #16
 80137e0:	d105      	bne.n	80137ee <_scanf_chars+0xa2>
 80137e2:	68e2      	ldr	r2, [r4, #12]
 80137e4:	3201      	adds	r2, #1
 80137e6:	60e2      	str	r2, [r4, #12]
 80137e8:	69a2      	ldr	r2, [r4, #24]
 80137ea:	b102      	cbz	r2, 80137ee <_scanf_chars+0xa2>
 80137ec:	7033      	strb	r3, [r6, #0]
 80137ee:	6923      	ldr	r3, [r4, #16]
 80137f0:	443b      	add	r3, r7
 80137f2:	6123      	str	r3, [r4, #16]
 80137f4:	2000      	movs	r0, #0
 80137f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137fa:	bf00      	nop
 80137fc:	08015671 	.word	0x08015671

08013800 <_scanf_i>:
 8013800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013804:	4698      	mov	r8, r3
 8013806:	4b74      	ldr	r3, [pc, #464]	@ (80139d8 <_scanf_i+0x1d8>)
 8013808:	460c      	mov	r4, r1
 801380a:	4682      	mov	sl, r0
 801380c:	4616      	mov	r6, r2
 801380e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013812:	b087      	sub	sp, #28
 8013814:	ab03      	add	r3, sp, #12
 8013816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801381a:	4b70      	ldr	r3, [pc, #448]	@ (80139dc <_scanf_i+0x1dc>)
 801381c:	69a1      	ldr	r1, [r4, #24]
 801381e:	4a70      	ldr	r2, [pc, #448]	@ (80139e0 <_scanf_i+0x1e0>)
 8013820:	2903      	cmp	r1, #3
 8013822:	bf08      	it	eq
 8013824:	461a      	moveq	r2, r3
 8013826:	68a3      	ldr	r3, [r4, #8]
 8013828:	9201      	str	r2, [sp, #4]
 801382a:	1e5a      	subs	r2, r3, #1
 801382c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013830:	bf88      	it	hi
 8013832:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013836:	4627      	mov	r7, r4
 8013838:	bf82      	ittt	hi
 801383a:	eb03 0905 	addhi.w	r9, r3, r5
 801383e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013842:	60a3      	strhi	r3, [r4, #8]
 8013844:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013848:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801384c:	bf98      	it	ls
 801384e:	f04f 0900 	movls.w	r9, #0
 8013852:	6023      	str	r3, [r4, #0]
 8013854:	463d      	mov	r5, r7
 8013856:	f04f 0b00 	mov.w	fp, #0
 801385a:	6831      	ldr	r1, [r6, #0]
 801385c:	ab03      	add	r3, sp, #12
 801385e:	7809      	ldrb	r1, [r1, #0]
 8013860:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013864:	2202      	movs	r2, #2
 8013866:	f7ec fc9b 	bl	80001a0 <memchr>
 801386a:	b328      	cbz	r0, 80138b8 <_scanf_i+0xb8>
 801386c:	f1bb 0f01 	cmp.w	fp, #1
 8013870:	d159      	bne.n	8013926 <_scanf_i+0x126>
 8013872:	6862      	ldr	r2, [r4, #4]
 8013874:	b92a      	cbnz	r2, 8013882 <_scanf_i+0x82>
 8013876:	6822      	ldr	r2, [r4, #0]
 8013878:	2108      	movs	r1, #8
 801387a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801387e:	6061      	str	r1, [r4, #4]
 8013880:	6022      	str	r2, [r4, #0]
 8013882:	6822      	ldr	r2, [r4, #0]
 8013884:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013888:	6022      	str	r2, [r4, #0]
 801388a:	68a2      	ldr	r2, [r4, #8]
 801388c:	1e51      	subs	r1, r2, #1
 801388e:	60a1      	str	r1, [r4, #8]
 8013890:	b192      	cbz	r2, 80138b8 <_scanf_i+0xb8>
 8013892:	6832      	ldr	r2, [r6, #0]
 8013894:	1c51      	adds	r1, r2, #1
 8013896:	6031      	str	r1, [r6, #0]
 8013898:	7812      	ldrb	r2, [r2, #0]
 801389a:	f805 2b01 	strb.w	r2, [r5], #1
 801389e:	6872      	ldr	r2, [r6, #4]
 80138a0:	3a01      	subs	r2, #1
 80138a2:	2a00      	cmp	r2, #0
 80138a4:	6072      	str	r2, [r6, #4]
 80138a6:	dc07      	bgt.n	80138b8 <_scanf_i+0xb8>
 80138a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80138ac:	4631      	mov	r1, r6
 80138ae:	4650      	mov	r0, sl
 80138b0:	4790      	blx	r2
 80138b2:	2800      	cmp	r0, #0
 80138b4:	f040 8085 	bne.w	80139c2 <_scanf_i+0x1c2>
 80138b8:	f10b 0b01 	add.w	fp, fp, #1
 80138bc:	f1bb 0f03 	cmp.w	fp, #3
 80138c0:	d1cb      	bne.n	801385a <_scanf_i+0x5a>
 80138c2:	6863      	ldr	r3, [r4, #4]
 80138c4:	b90b      	cbnz	r3, 80138ca <_scanf_i+0xca>
 80138c6:	230a      	movs	r3, #10
 80138c8:	6063      	str	r3, [r4, #4]
 80138ca:	6863      	ldr	r3, [r4, #4]
 80138cc:	4945      	ldr	r1, [pc, #276]	@ (80139e4 <_scanf_i+0x1e4>)
 80138ce:	6960      	ldr	r0, [r4, #20]
 80138d0:	1ac9      	subs	r1, r1, r3
 80138d2:	f000 f889 	bl	80139e8 <__sccl>
 80138d6:	f04f 0b00 	mov.w	fp, #0
 80138da:	68a3      	ldr	r3, [r4, #8]
 80138dc:	6822      	ldr	r2, [r4, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d03d      	beq.n	801395e <_scanf_i+0x15e>
 80138e2:	6831      	ldr	r1, [r6, #0]
 80138e4:	6960      	ldr	r0, [r4, #20]
 80138e6:	f891 c000 	ldrb.w	ip, [r1]
 80138ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d035      	beq.n	801395e <_scanf_i+0x15e>
 80138f2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80138f6:	d124      	bne.n	8013942 <_scanf_i+0x142>
 80138f8:	0510      	lsls	r0, r2, #20
 80138fa:	d522      	bpl.n	8013942 <_scanf_i+0x142>
 80138fc:	f10b 0b01 	add.w	fp, fp, #1
 8013900:	f1b9 0f00 	cmp.w	r9, #0
 8013904:	d003      	beq.n	801390e <_scanf_i+0x10e>
 8013906:	3301      	adds	r3, #1
 8013908:	f109 39ff 	add.w	r9, r9, #4294967295
 801390c:	60a3      	str	r3, [r4, #8]
 801390e:	6873      	ldr	r3, [r6, #4]
 8013910:	3b01      	subs	r3, #1
 8013912:	2b00      	cmp	r3, #0
 8013914:	6073      	str	r3, [r6, #4]
 8013916:	dd1b      	ble.n	8013950 <_scanf_i+0x150>
 8013918:	6833      	ldr	r3, [r6, #0]
 801391a:	3301      	adds	r3, #1
 801391c:	6033      	str	r3, [r6, #0]
 801391e:	68a3      	ldr	r3, [r4, #8]
 8013920:	3b01      	subs	r3, #1
 8013922:	60a3      	str	r3, [r4, #8]
 8013924:	e7d9      	b.n	80138da <_scanf_i+0xda>
 8013926:	f1bb 0f02 	cmp.w	fp, #2
 801392a:	d1ae      	bne.n	801388a <_scanf_i+0x8a>
 801392c:	6822      	ldr	r2, [r4, #0]
 801392e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013932:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013936:	d1bf      	bne.n	80138b8 <_scanf_i+0xb8>
 8013938:	2110      	movs	r1, #16
 801393a:	6061      	str	r1, [r4, #4]
 801393c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013940:	e7a2      	b.n	8013888 <_scanf_i+0x88>
 8013942:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013946:	6022      	str	r2, [r4, #0]
 8013948:	780b      	ldrb	r3, [r1, #0]
 801394a:	f805 3b01 	strb.w	r3, [r5], #1
 801394e:	e7de      	b.n	801390e <_scanf_i+0x10e>
 8013950:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013954:	4631      	mov	r1, r6
 8013956:	4650      	mov	r0, sl
 8013958:	4798      	blx	r3
 801395a:	2800      	cmp	r0, #0
 801395c:	d0df      	beq.n	801391e <_scanf_i+0x11e>
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	05d9      	lsls	r1, r3, #23
 8013962:	d50d      	bpl.n	8013980 <_scanf_i+0x180>
 8013964:	42bd      	cmp	r5, r7
 8013966:	d909      	bls.n	801397c <_scanf_i+0x17c>
 8013968:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801396c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013970:	4632      	mov	r2, r6
 8013972:	4650      	mov	r0, sl
 8013974:	4798      	blx	r3
 8013976:	f105 39ff 	add.w	r9, r5, #4294967295
 801397a:	464d      	mov	r5, r9
 801397c:	42bd      	cmp	r5, r7
 801397e:	d028      	beq.n	80139d2 <_scanf_i+0x1d2>
 8013980:	6822      	ldr	r2, [r4, #0]
 8013982:	f012 0210 	ands.w	r2, r2, #16
 8013986:	d113      	bne.n	80139b0 <_scanf_i+0x1b0>
 8013988:	702a      	strb	r2, [r5, #0]
 801398a:	6863      	ldr	r3, [r4, #4]
 801398c:	9e01      	ldr	r6, [sp, #4]
 801398e:	4639      	mov	r1, r7
 8013990:	4650      	mov	r0, sl
 8013992:	47b0      	blx	r6
 8013994:	f8d8 3000 	ldr.w	r3, [r8]
 8013998:	6821      	ldr	r1, [r4, #0]
 801399a:	1d1a      	adds	r2, r3, #4
 801399c:	f8c8 2000 	str.w	r2, [r8]
 80139a0:	f011 0f20 	tst.w	r1, #32
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	d00f      	beq.n	80139c8 <_scanf_i+0x1c8>
 80139a8:	6018      	str	r0, [r3, #0]
 80139aa:	68e3      	ldr	r3, [r4, #12]
 80139ac:	3301      	adds	r3, #1
 80139ae:	60e3      	str	r3, [r4, #12]
 80139b0:	6923      	ldr	r3, [r4, #16]
 80139b2:	1bed      	subs	r5, r5, r7
 80139b4:	445d      	add	r5, fp
 80139b6:	442b      	add	r3, r5
 80139b8:	6123      	str	r3, [r4, #16]
 80139ba:	2000      	movs	r0, #0
 80139bc:	b007      	add	sp, #28
 80139be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c2:	f04f 0b00 	mov.w	fp, #0
 80139c6:	e7ca      	b.n	801395e <_scanf_i+0x15e>
 80139c8:	07ca      	lsls	r2, r1, #31
 80139ca:	bf4c      	ite	mi
 80139cc:	8018      	strhmi	r0, [r3, #0]
 80139ce:	6018      	strpl	r0, [r3, #0]
 80139d0:	e7eb      	b.n	80139aa <_scanf_i+0x1aa>
 80139d2:	2001      	movs	r0, #1
 80139d4:	e7f2      	b.n	80139bc <_scanf_i+0x1bc>
 80139d6:	bf00      	nop
 80139d8:	08015188 	.word	0x08015188
 80139dc:	08013d85 	.word	0x08013d85
 80139e0:	080129e1 	.word	0x080129e1
 80139e4:	0801579c 	.word	0x0801579c

080139e8 <__sccl>:
 80139e8:	b570      	push	{r4, r5, r6, lr}
 80139ea:	780b      	ldrb	r3, [r1, #0]
 80139ec:	4604      	mov	r4, r0
 80139ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80139f0:	bf0b      	itete	eq
 80139f2:	784b      	ldrbeq	r3, [r1, #1]
 80139f4:	1c4a      	addne	r2, r1, #1
 80139f6:	1c8a      	addeq	r2, r1, #2
 80139f8:	2100      	movne	r1, #0
 80139fa:	bf08      	it	eq
 80139fc:	2101      	moveq	r1, #1
 80139fe:	3801      	subs	r0, #1
 8013a00:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013a04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013a08:	42a8      	cmp	r0, r5
 8013a0a:	d1fb      	bne.n	8013a04 <__sccl+0x1c>
 8013a0c:	b90b      	cbnz	r3, 8013a12 <__sccl+0x2a>
 8013a0e:	1e50      	subs	r0, r2, #1
 8013a10:	bd70      	pop	{r4, r5, r6, pc}
 8013a12:	f081 0101 	eor.w	r1, r1, #1
 8013a16:	54e1      	strb	r1, [r4, r3]
 8013a18:	4610      	mov	r0, r2
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013a20:	2d2d      	cmp	r5, #45	@ 0x2d
 8013a22:	d005      	beq.n	8013a30 <__sccl+0x48>
 8013a24:	2d5d      	cmp	r5, #93	@ 0x5d
 8013a26:	d016      	beq.n	8013a56 <__sccl+0x6e>
 8013a28:	2d00      	cmp	r5, #0
 8013a2a:	d0f1      	beq.n	8013a10 <__sccl+0x28>
 8013a2c:	462b      	mov	r3, r5
 8013a2e:	e7f2      	b.n	8013a16 <__sccl+0x2e>
 8013a30:	7846      	ldrb	r6, [r0, #1]
 8013a32:	2e5d      	cmp	r6, #93	@ 0x5d
 8013a34:	d0fa      	beq.n	8013a2c <__sccl+0x44>
 8013a36:	42b3      	cmp	r3, r6
 8013a38:	dcf8      	bgt.n	8013a2c <__sccl+0x44>
 8013a3a:	3002      	adds	r0, #2
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	3201      	adds	r2, #1
 8013a40:	4296      	cmp	r6, r2
 8013a42:	54a1      	strb	r1, [r4, r2]
 8013a44:	dcfb      	bgt.n	8013a3e <__sccl+0x56>
 8013a46:	1af2      	subs	r2, r6, r3
 8013a48:	3a01      	subs	r2, #1
 8013a4a:	1c5d      	adds	r5, r3, #1
 8013a4c:	42b3      	cmp	r3, r6
 8013a4e:	bfa8      	it	ge
 8013a50:	2200      	movge	r2, #0
 8013a52:	18ab      	adds	r3, r5, r2
 8013a54:	e7e1      	b.n	8013a1a <__sccl+0x32>
 8013a56:	4610      	mov	r0, r2
 8013a58:	e7da      	b.n	8013a10 <__sccl+0x28>

08013a5a <__submore>:
 8013a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a5e:	460c      	mov	r4, r1
 8013a60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a66:	4299      	cmp	r1, r3
 8013a68:	d11d      	bne.n	8013aa6 <__submore+0x4c>
 8013a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013a6e:	f7fe fb3b 	bl	80120e8 <_malloc_r>
 8013a72:	b918      	cbnz	r0, 8013a7c <__submore+0x22>
 8013a74:	f04f 30ff 	mov.w	r0, #4294967295
 8013a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a80:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013a82:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013a86:	6360      	str	r0, [r4, #52]	@ 0x34
 8013a88:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013a8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013a90:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013a94:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a98:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013a9c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013aa0:	6020      	str	r0, [r4, #0]
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	e7e8      	b.n	8013a78 <__submore+0x1e>
 8013aa6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013aa8:	0077      	lsls	r7, r6, #1
 8013aaa:	463a      	mov	r2, r7
 8013aac:	f7ff fb04 	bl	80130b8 <_realloc_r>
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d0de      	beq.n	8013a74 <__submore+0x1a>
 8013ab6:	eb00 0806 	add.w	r8, r0, r6
 8013aba:	4601      	mov	r1, r0
 8013abc:	4632      	mov	r2, r6
 8013abe:	4640      	mov	r0, r8
 8013ac0:	f7fd fbcf 	bl	8011262 <memcpy>
 8013ac4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013ac8:	f8c4 8000 	str.w	r8, [r4]
 8013acc:	e7e9      	b.n	8013aa2 <__submore+0x48>

08013ace <__swbuf_r>:
 8013ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad0:	460e      	mov	r6, r1
 8013ad2:	4614      	mov	r4, r2
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	b118      	cbz	r0, 8013ae0 <__swbuf_r+0x12>
 8013ad8:	6a03      	ldr	r3, [r0, #32]
 8013ada:	b90b      	cbnz	r3, 8013ae0 <__swbuf_r+0x12>
 8013adc:	f7fc fc2e 	bl	801033c <__sinit>
 8013ae0:	69a3      	ldr	r3, [r4, #24]
 8013ae2:	60a3      	str	r3, [r4, #8]
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	071a      	lsls	r2, r3, #28
 8013ae8:	d501      	bpl.n	8013aee <__swbuf_r+0x20>
 8013aea:	6923      	ldr	r3, [r4, #16]
 8013aec:	b943      	cbnz	r3, 8013b00 <__swbuf_r+0x32>
 8013aee:	4621      	mov	r1, r4
 8013af0:	4628      	mov	r0, r5
 8013af2:	f000 f82b 	bl	8013b4c <__swsetup_r>
 8013af6:	b118      	cbz	r0, 8013b00 <__swbuf_r+0x32>
 8013af8:	f04f 37ff 	mov.w	r7, #4294967295
 8013afc:	4638      	mov	r0, r7
 8013afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b00:	6823      	ldr	r3, [r4, #0]
 8013b02:	6922      	ldr	r2, [r4, #16]
 8013b04:	1a98      	subs	r0, r3, r2
 8013b06:	6963      	ldr	r3, [r4, #20]
 8013b08:	b2f6      	uxtb	r6, r6
 8013b0a:	4283      	cmp	r3, r0
 8013b0c:	4637      	mov	r7, r6
 8013b0e:	dc05      	bgt.n	8013b1c <__swbuf_r+0x4e>
 8013b10:	4621      	mov	r1, r4
 8013b12:	4628      	mov	r0, r5
 8013b14:	f7ff f94c 	bl	8012db0 <_fflush_r>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	d1ed      	bne.n	8013af8 <__swbuf_r+0x2a>
 8013b1c:	68a3      	ldr	r3, [r4, #8]
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	60a3      	str	r3, [r4, #8]
 8013b22:	6823      	ldr	r3, [r4, #0]
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	6022      	str	r2, [r4, #0]
 8013b28:	701e      	strb	r6, [r3, #0]
 8013b2a:	6962      	ldr	r2, [r4, #20]
 8013b2c:	1c43      	adds	r3, r0, #1
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d004      	beq.n	8013b3c <__swbuf_r+0x6e>
 8013b32:	89a3      	ldrh	r3, [r4, #12]
 8013b34:	07db      	lsls	r3, r3, #31
 8013b36:	d5e1      	bpl.n	8013afc <__swbuf_r+0x2e>
 8013b38:	2e0a      	cmp	r6, #10
 8013b3a:	d1df      	bne.n	8013afc <__swbuf_r+0x2e>
 8013b3c:	4621      	mov	r1, r4
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f7ff f936 	bl	8012db0 <_fflush_r>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d0d9      	beq.n	8013afc <__swbuf_r+0x2e>
 8013b48:	e7d6      	b.n	8013af8 <__swbuf_r+0x2a>
	...

08013b4c <__swsetup_r>:
 8013b4c:	b538      	push	{r3, r4, r5, lr}
 8013b4e:	4b29      	ldr	r3, [pc, #164]	@ (8013bf4 <__swsetup_r+0xa8>)
 8013b50:	4605      	mov	r5, r0
 8013b52:	6818      	ldr	r0, [r3, #0]
 8013b54:	460c      	mov	r4, r1
 8013b56:	b118      	cbz	r0, 8013b60 <__swsetup_r+0x14>
 8013b58:	6a03      	ldr	r3, [r0, #32]
 8013b5a:	b90b      	cbnz	r3, 8013b60 <__swsetup_r+0x14>
 8013b5c:	f7fc fbee 	bl	801033c <__sinit>
 8013b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b64:	0719      	lsls	r1, r3, #28
 8013b66:	d422      	bmi.n	8013bae <__swsetup_r+0x62>
 8013b68:	06da      	lsls	r2, r3, #27
 8013b6a:	d407      	bmi.n	8013b7c <__swsetup_r+0x30>
 8013b6c:	2209      	movs	r2, #9
 8013b6e:	602a      	str	r2, [r5, #0]
 8013b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b74:	81a3      	strh	r3, [r4, #12]
 8013b76:	f04f 30ff 	mov.w	r0, #4294967295
 8013b7a:	e033      	b.n	8013be4 <__swsetup_r+0x98>
 8013b7c:	0758      	lsls	r0, r3, #29
 8013b7e:	d512      	bpl.n	8013ba6 <__swsetup_r+0x5a>
 8013b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b82:	b141      	cbz	r1, 8013b96 <__swsetup_r+0x4a>
 8013b84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b88:	4299      	cmp	r1, r3
 8013b8a:	d002      	beq.n	8013b92 <__swsetup_r+0x46>
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f7fe f9eb 	bl	8011f68 <_free_r>
 8013b92:	2300      	movs	r3, #0
 8013b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b96:	89a3      	ldrh	r3, [r4, #12]
 8013b98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b9c:	81a3      	strh	r3, [r4, #12]
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	6063      	str	r3, [r4, #4]
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	89a3      	ldrh	r3, [r4, #12]
 8013ba8:	f043 0308 	orr.w	r3, r3, #8
 8013bac:	81a3      	strh	r3, [r4, #12]
 8013bae:	6923      	ldr	r3, [r4, #16]
 8013bb0:	b94b      	cbnz	r3, 8013bc6 <__swsetup_r+0x7a>
 8013bb2:	89a3      	ldrh	r3, [r4, #12]
 8013bb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013bbc:	d003      	beq.n	8013bc6 <__swsetup_r+0x7a>
 8013bbe:	4621      	mov	r1, r4
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	f000 f907 	bl	8013dd4 <__smakebuf_r>
 8013bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bca:	f013 0201 	ands.w	r2, r3, #1
 8013bce:	d00a      	beq.n	8013be6 <__swsetup_r+0x9a>
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	60a2      	str	r2, [r4, #8]
 8013bd4:	6962      	ldr	r2, [r4, #20]
 8013bd6:	4252      	negs	r2, r2
 8013bd8:	61a2      	str	r2, [r4, #24]
 8013bda:	6922      	ldr	r2, [r4, #16]
 8013bdc:	b942      	cbnz	r2, 8013bf0 <__swsetup_r+0xa4>
 8013bde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013be2:	d1c5      	bne.n	8013b70 <__swsetup_r+0x24>
 8013be4:	bd38      	pop	{r3, r4, r5, pc}
 8013be6:	0799      	lsls	r1, r3, #30
 8013be8:	bf58      	it	pl
 8013bea:	6962      	ldrpl	r2, [r4, #20]
 8013bec:	60a2      	str	r2, [r4, #8]
 8013bee:	e7f4      	b.n	8013bda <__swsetup_r+0x8e>
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	e7f7      	b.n	8013be4 <__swsetup_r+0x98>
 8013bf4:	20000030 	.word	0x20000030

08013bf8 <_raise_r>:
 8013bf8:	291f      	cmp	r1, #31
 8013bfa:	b538      	push	{r3, r4, r5, lr}
 8013bfc:	4605      	mov	r5, r0
 8013bfe:	460c      	mov	r4, r1
 8013c00:	d904      	bls.n	8013c0c <_raise_r+0x14>
 8013c02:	2316      	movs	r3, #22
 8013c04:	6003      	str	r3, [r0, #0]
 8013c06:	f04f 30ff 	mov.w	r0, #4294967295
 8013c0a:	bd38      	pop	{r3, r4, r5, pc}
 8013c0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013c0e:	b112      	cbz	r2, 8013c16 <_raise_r+0x1e>
 8013c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c14:	b94b      	cbnz	r3, 8013c2a <_raise_r+0x32>
 8013c16:	4628      	mov	r0, r5
 8013c18:	f000 f830 	bl	8013c7c <_getpid_r>
 8013c1c:	4622      	mov	r2, r4
 8013c1e:	4601      	mov	r1, r0
 8013c20:	4628      	mov	r0, r5
 8013c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c26:	f000 b817 	b.w	8013c58 <_kill_r>
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d00a      	beq.n	8013c44 <_raise_r+0x4c>
 8013c2e:	1c59      	adds	r1, r3, #1
 8013c30:	d103      	bne.n	8013c3a <_raise_r+0x42>
 8013c32:	2316      	movs	r3, #22
 8013c34:	6003      	str	r3, [r0, #0]
 8013c36:	2001      	movs	r0, #1
 8013c38:	e7e7      	b.n	8013c0a <_raise_r+0x12>
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c40:	4620      	mov	r0, r4
 8013c42:	4798      	blx	r3
 8013c44:	2000      	movs	r0, #0
 8013c46:	e7e0      	b.n	8013c0a <_raise_r+0x12>

08013c48 <raise>:
 8013c48:	4b02      	ldr	r3, [pc, #8]	@ (8013c54 <raise+0xc>)
 8013c4a:	4601      	mov	r1, r0
 8013c4c:	6818      	ldr	r0, [r3, #0]
 8013c4e:	f7ff bfd3 	b.w	8013bf8 <_raise_r>
 8013c52:	bf00      	nop
 8013c54:	20000030 	.word	0x20000030

08013c58 <_kill_r>:
 8013c58:	b538      	push	{r3, r4, r5, lr}
 8013c5a:	4d07      	ldr	r5, [pc, #28]	@ (8013c78 <_kill_r+0x20>)
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	4604      	mov	r4, r0
 8013c60:	4608      	mov	r0, r1
 8013c62:	4611      	mov	r1, r2
 8013c64:	602b      	str	r3, [r5, #0]
 8013c66:	f7f4 fde9 	bl	800883c <_kill>
 8013c6a:	1c43      	adds	r3, r0, #1
 8013c6c:	d102      	bne.n	8013c74 <_kill_r+0x1c>
 8013c6e:	682b      	ldr	r3, [r5, #0]
 8013c70:	b103      	cbz	r3, 8013c74 <_kill_r+0x1c>
 8013c72:	6023      	str	r3, [r4, #0]
 8013c74:	bd38      	pop	{r3, r4, r5, pc}
 8013c76:	bf00      	nop
 8013c78:	2000a760 	.word	0x2000a760

08013c7c <_getpid_r>:
 8013c7c:	f7f4 bdd6 	b.w	800882c <_getpid>

08013c80 <_malloc_usable_size_r>:
 8013c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c84:	1f18      	subs	r0, r3, #4
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	bfbc      	itt	lt
 8013c8a:	580b      	ldrlt	r3, [r1, r0]
 8013c8c:	18c0      	addlt	r0, r0, r3
 8013c8e:	4770      	bx	lr

08013c90 <_strtol_l.constprop.0>:
 8013c90:	2b24      	cmp	r3, #36	@ 0x24
 8013c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c96:	4686      	mov	lr, r0
 8013c98:	4690      	mov	r8, r2
 8013c9a:	d801      	bhi.n	8013ca0 <_strtol_l.constprop.0+0x10>
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	d106      	bne.n	8013cae <_strtol_l.constprop.0+0x1e>
 8013ca0:	f7fd faa8 	bl	80111f4 <__errno>
 8013ca4:	2316      	movs	r3, #22
 8013ca6:	6003      	str	r3, [r0, #0]
 8013ca8:	2000      	movs	r0, #0
 8013caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cae:	4834      	ldr	r0, [pc, #208]	@ (8013d80 <_strtol_l.constprop.0+0xf0>)
 8013cb0:	460d      	mov	r5, r1
 8013cb2:	462a      	mov	r2, r5
 8013cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013cb8:	5d06      	ldrb	r6, [r0, r4]
 8013cba:	f016 0608 	ands.w	r6, r6, #8
 8013cbe:	d1f8      	bne.n	8013cb2 <_strtol_l.constprop.0+0x22>
 8013cc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8013cc2:	d12d      	bne.n	8013d20 <_strtol_l.constprop.0+0x90>
 8013cc4:	782c      	ldrb	r4, [r5, #0]
 8013cc6:	2601      	movs	r6, #1
 8013cc8:	1c95      	adds	r5, r2, #2
 8013cca:	f033 0210 	bics.w	r2, r3, #16
 8013cce:	d109      	bne.n	8013ce4 <_strtol_l.constprop.0+0x54>
 8013cd0:	2c30      	cmp	r4, #48	@ 0x30
 8013cd2:	d12a      	bne.n	8013d2a <_strtol_l.constprop.0+0x9a>
 8013cd4:	782a      	ldrb	r2, [r5, #0]
 8013cd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013cda:	2a58      	cmp	r2, #88	@ 0x58
 8013cdc:	d125      	bne.n	8013d2a <_strtol_l.constprop.0+0x9a>
 8013cde:	786c      	ldrb	r4, [r5, #1]
 8013ce0:	2310      	movs	r3, #16
 8013ce2:	3502      	adds	r5, #2
 8013ce4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013ce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013cec:	2200      	movs	r2, #0
 8013cee:	fbbc f9f3 	udiv	r9, ip, r3
 8013cf2:	4610      	mov	r0, r2
 8013cf4:	fb03 ca19 	mls	sl, r3, r9, ip
 8013cf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013cfc:	2f09      	cmp	r7, #9
 8013cfe:	d81b      	bhi.n	8013d38 <_strtol_l.constprop.0+0xa8>
 8013d00:	463c      	mov	r4, r7
 8013d02:	42a3      	cmp	r3, r4
 8013d04:	dd27      	ble.n	8013d56 <_strtol_l.constprop.0+0xc6>
 8013d06:	1c57      	adds	r7, r2, #1
 8013d08:	d007      	beq.n	8013d1a <_strtol_l.constprop.0+0x8a>
 8013d0a:	4581      	cmp	r9, r0
 8013d0c:	d320      	bcc.n	8013d50 <_strtol_l.constprop.0+0xc0>
 8013d0e:	d101      	bne.n	8013d14 <_strtol_l.constprop.0+0x84>
 8013d10:	45a2      	cmp	sl, r4
 8013d12:	db1d      	blt.n	8013d50 <_strtol_l.constprop.0+0xc0>
 8013d14:	fb00 4003 	mla	r0, r0, r3, r4
 8013d18:	2201      	movs	r2, #1
 8013d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d1e:	e7eb      	b.n	8013cf8 <_strtol_l.constprop.0+0x68>
 8013d20:	2c2b      	cmp	r4, #43	@ 0x2b
 8013d22:	bf04      	itt	eq
 8013d24:	782c      	ldrbeq	r4, [r5, #0]
 8013d26:	1c95      	addeq	r5, r2, #2
 8013d28:	e7cf      	b.n	8013cca <_strtol_l.constprop.0+0x3a>
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d1da      	bne.n	8013ce4 <_strtol_l.constprop.0+0x54>
 8013d2e:	2c30      	cmp	r4, #48	@ 0x30
 8013d30:	bf0c      	ite	eq
 8013d32:	2308      	moveq	r3, #8
 8013d34:	230a      	movne	r3, #10
 8013d36:	e7d5      	b.n	8013ce4 <_strtol_l.constprop.0+0x54>
 8013d38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013d3c:	2f19      	cmp	r7, #25
 8013d3e:	d801      	bhi.n	8013d44 <_strtol_l.constprop.0+0xb4>
 8013d40:	3c37      	subs	r4, #55	@ 0x37
 8013d42:	e7de      	b.n	8013d02 <_strtol_l.constprop.0+0x72>
 8013d44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013d48:	2f19      	cmp	r7, #25
 8013d4a:	d804      	bhi.n	8013d56 <_strtol_l.constprop.0+0xc6>
 8013d4c:	3c57      	subs	r4, #87	@ 0x57
 8013d4e:	e7d8      	b.n	8013d02 <_strtol_l.constprop.0+0x72>
 8013d50:	f04f 32ff 	mov.w	r2, #4294967295
 8013d54:	e7e1      	b.n	8013d1a <_strtol_l.constprop.0+0x8a>
 8013d56:	1c53      	adds	r3, r2, #1
 8013d58:	d108      	bne.n	8013d6c <_strtol_l.constprop.0+0xdc>
 8013d5a:	2322      	movs	r3, #34	@ 0x22
 8013d5c:	f8ce 3000 	str.w	r3, [lr]
 8013d60:	4660      	mov	r0, ip
 8013d62:	f1b8 0f00 	cmp.w	r8, #0
 8013d66:	d0a0      	beq.n	8013caa <_strtol_l.constprop.0+0x1a>
 8013d68:	1e69      	subs	r1, r5, #1
 8013d6a:	e006      	b.n	8013d7a <_strtol_l.constprop.0+0xea>
 8013d6c:	b106      	cbz	r6, 8013d70 <_strtol_l.constprop.0+0xe0>
 8013d6e:	4240      	negs	r0, r0
 8013d70:	f1b8 0f00 	cmp.w	r8, #0
 8013d74:	d099      	beq.n	8013caa <_strtol_l.constprop.0+0x1a>
 8013d76:	2a00      	cmp	r2, #0
 8013d78:	d1f6      	bne.n	8013d68 <_strtol_l.constprop.0+0xd8>
 8013d7a:	f8c8 1000 	str.w	r1, [r8]
 8013d7e:	e794      	b.n	8013caa <_strtol_l.constprop.0+0x1a>
 8013d80:	08015671 	.word	0x08015671

08013d84 <_strtol_r>:
 8013d84:	f7ff bf84 	b.w	8013c90 <_strtol_l.constprop.0>

08013d88 <__swhatbuf_r>:
 8013d88:	b570      	push	{r4, r5, r6, lr}
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d90:	2900      	cmp	r1, #0
 8013d92:	b096      	sub	sp, #88	@ 0x58
 8013d94:	4615      	mov	r5, r2
 8013d96:	461e      	mov	r6, r3
 8013d98:	da0d      	bge.n	8013db6 <__swhatbuf_r+0x2e>
 8013d9a:	89a3      	ldrh	r3, [r4, #12]
 8013d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013da0:	f04f 0100 	mov.w	r1, #0
 8013da4:	bf14      	ite	ne
 8013da6:	2340      	movne	r3, #64	@ 0x40
 8013da8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013dac:	2000      	movs	r0, #0
 8013dae:	6031      	str	r1, [r6, #0]
 8013db0:	602b      	str	r3, [r5, #0]
 8013db2:	b016      	add	sp, #88	@ 0x58
 8013db4:	bd70      	pop	{r4, r5, r6, pc}
 8013db6:	466a      	mov	r2, sp
 8013db8:	f000 f848 	bl	8013e4c <_fstat_r>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	dbec      	blt.n	8013d9a <__swhatbuf_r+0x12>
 8013dc0:	9901      	ldr	r1, [sp, #4]
 8013dc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013dc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013dca:	4259      	negs	r1, r3
 8013dcc:	4159      	adcs	r1, r3
 8013dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013dd2:	e7eb      	b.n	8013dac <__swhatbuf_r+0x24>

08013dd4 <__smakebuf_r>:
 8013dd4:	898b      	ldrh	r3, [r1, #12]
 8013dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dd8:	079d      	lsls	r5, r3, #30
 8013dda:	4606      	mov	r6, r0
 8013ddc:	460c      	mov	r4, r1
 8013dde:	d507      	bpl.n	8013df0 <__smakebuf_r+0x1c>
 8013de0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013de4:	6023      	str	r3, [r4, #0]
 8013de6:	6123      	str	r3, [r4, #16]
 8013de8:	2301      	movs	r3, #1
 8013dea:	6163      	str	r3, [r4, #20]
 8013dec:	b003      	add	sp, #12
 8013dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df0:	ab01      	add	r3, sp, #4
 8013df2:	466a      	mov	r2, sp
 8013df4:	f7ff ffc8 	bl	8013d88 <__swhatbuf_r>
 8013df8:	9f00      	ldr	r7, [sp, #0]
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	4639      	mov	r1, r7
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f7fe f972 	bl	80120e8 <_malloc_r>
 8013e04:	b948      	cbnz	r0, 8013e1a <__smakebuf_r+0x46>
 8013e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e0a:	059a      	lsls	r2, r3, #22
 8013e0c:	d4ee      	bmi.n	8013dec <__smakebuf_r+0x18>
 8013e0e:	f023 0303 	bic.w	r3, r3, #3
 8013e12:	f043 0302 	orr.w	r3, r3, #2
 8013e16:	81a3      	strh	r3, [r4, #12]
 8013e18:	e7e2      	b.n	8013de0 <__smakebuf_r+0xc>
 8013e1a:	89a3      	ldrh	r3, [r4, #12]
 8013e1c:	6020      	str	r0, [r4, #0]
 8013e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e22:	81a3      	strh	r3, [r4, #12]
 8013e24:	9b01      	ldr	r3, [sp, #4]
 8013e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e2a:	b15b      	cbz	r3, 8013e44 <__smakebuf_r+0x70>
 8013e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e30:	4630      	mov	r0, r6
 8013e32:	f000 f81d 	bl	8013e70 <_isatty_r>
 8013e36:	b128      	cbz	r0, 8013e44 <__smakebuf_r+0x70>
 8013e38:	89a3      	ldrh	r3, [r4, #12]
 8013e3a:	f023 0303 	bic.w	r3, r3, #3
 8013e3e:	f043 0301 	orr.w	r3, r3, #1
 8013e42:	81a3      	strh	r3, [r4, #12]
 8013e44:	89a3      	ldrh	r3, [r4, #12]
 8013e46:	431d      	orrs	r5, r3
 8013e48:	81a5      	strh	r5, [r4, #12]
 8013e4a:	e7cf      	b.n	8013dec <__smakebuf_r+0x18>

08013e4c <_fstat_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	4d07      	ldr	r5, [pc, #28]	@ (8013e6c <_fstat_r+0x20>)
 8013e50:	2300      	movs	r3, #0
 8013e52:	4604      	mov	r4, r0
 8013e54:	4608      	mov	r0, r1
 8013e56:	4611      	mov	r1, r2
 8013e58:	602b      	str	r3, [r5, #0]
 8013e5a:	f7f4 fd4f 	bl	80088fc <_fstat>
 8013e5e:	1c43      	adds	r3, r0, #1
 8013e60:	d102      	bne.n	8013e68 <_fstat_r+0x1c>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	b103      	cbz	r3, 8013e68 <_fstat_r+0x1c>
 8013e66:	6023      	str	r3, [r4, #0]
 8013e68:	bd38      	pop	{r3, r4, r5, pc}
 8013e6a:	bf00      	nop
 8013e6c:	2000a760 	.word	0x2000a760

08013e70 <_isatty_r>:
 8013e70:	b538      	push	{r3, r4, r5, lr}
 8013e72:	4d06      	ldr	r5, [pc, #24]	@ (8013e8c <_isatty_r+0x1c>)
 8013e74:	2300      	movs	r3, #0
 8013e76:	4604      	mov	r4, r0
 8013e78:	4608      	mov	r0, r1
 8013e7a:	602b      	str	r3, [r5, #0]
 8013e7c:	f7f4 fd4e 	bl	800891c <_isatty>
 8013e80:	1c43      	adds	r3, r0, #1
 8013e82:	d102      	bne.n	8013e8a <_isatty_r+0x1a>
 8013e84:	682b      	ldr	r3, [r5, #0]
 8013e86:	b103      	cbz	r3, 8013e8a <_isatty_r+0x1a>
 8013e88:	6023      	str	r3, [r4, #0]
 8013e8a:	bd38      	pop	{r3, r4, r5, pc}
 8013e8c:	2000a760 	.word	0x2000a760

08013e90 <_init>:
 8013e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e92:	bf00      	nop
 8013e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e96:	bc08      	pop	{r3}
 8013e98:	469e      	mov	lr, r3
 8013e9a:	4770      	bx	lr

08013e9c <_fini>:
 8013e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9e:	bf00      	nop
 8013ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ea2:	bc08      	pop	{r3}
 8013ea4:	469e      	mov	lr, r3
 8013ea6:	4770      	bx	lr
