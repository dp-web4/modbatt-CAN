
Battery Pack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d104  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800d244  0800d244  0001d244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d658  0800d658  0001d658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d65c  0800d65c  0001d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0800d660  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000094  0800d6ec  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  20000918  0800df6f  00020918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000958  0800dfac  00020958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008c0  2000096c  0800dfbd  0002096c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000122c  0800dfbd  0002122c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020969  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0003b24b  00000000  00000000  00020999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000678e  00000000  00000000  0005bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000030f8  00000000  00000000  00062378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002e60  00000000  00000000  00065470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e950  00000000  00000000  000682d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033bf3  00000000  00000000  00096c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101bfe  00000000  00000000  000ca813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001cc411  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d898  00000000  00000000  001cc464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000096c 	.word	0x2000096c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d22c 	.word	0x0800d22c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000970 	.word	0x20000970
 800017c:	0800d22c 	.word	0x0800d22c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APP_LED_Clear>:
// Section: Application Local Functions
// *****************************************************************************
// *****************************************************************************

void APP_LED_Clear(uint8_t led)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d012      	beq.n	800056a <APP_LED_Clear+0x36>
 8000544:	2b02      	cmp	r3, #2
 8000546:	dc16      	bgt.n	8000576 <APP_LED_Clear+0x42>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <APP_LED_Clear+0x1e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d006      	beq.n	800055e <APP_LED_Clear+0x2a>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8000550:	e011      	b.n	8000576 <APP_LED_Clear+0x42>
        	HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2102      	movs	r1, #2
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <APP_LED_Clear+0x4c>)
 8000558:	f005 f8f8 	bl	800574c <HAL_GPIO_WritePin>
            break;
 800055c:	e00c      	b.n	8000578 <APP_LED_Clear+0x44>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <APP_LED_Clear+0x4c>)
 8000564:	f005 f8f2 	bl	800574c <HAL_GPIO_WritePin>
            break;
 8000568:	e006      	b.n	8000578 <APP_LED_Clear+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <APP_LED_Clear+0x4c>)
 8000570:	f005 f8ec 	bl	800574c <HAL_GPIO_WritePin>
            break;
 8000574:	e000      	b.n	8000578 <APP_LED_Clear+0x44>
        default: break;
 8000576:	bf00      	nop
    }
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	48000400 	.word	0x48000400

08000584 <APP_LED_Set>:

void APP_LED_Set(uint8_t led)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d012      	beq.n	80005ba <APP_LED_Set+0x36>
 8000594:	2b02      	cmp	r3, #2
 8000596:	dc16      	bgt.n	80005c6 <APP_LED_Set+0x42>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <APP_LED_Set+0x1e>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d006      	beq.n	80005ae <APP_LED_Set+0x2a>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80005a0:	e011      	b.n	80005c6 <APP_LED_Set+0x42>
        	HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <APP_LED_Set+0x4c>)
 80005a8:	f005 f8d0 	bl	800574c <HAL_GPIO_WritePin>
            break;
 80005ac:	e00c      	b.n	80005c8 <APP_LED_Set+0x44>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <APP_LED_Set+0x4c>)
 80005b4:	f005 f8ca 	bl	800574c <HAL_GPIO_WritePin>
            break;
 80005b8:	e006      	b.n	80005c8 <APP_LED_Set+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2120      	movs	r1, #32
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <APP_LED_Set+0x4c>)
 80005c0:	f005 f8c4 	bl	800574c <HAL_GPIO_WritePin>
            break;
 80005c4:	e000      	b.n	80005c8 <APP_LED_Set+0x44>
        default: break;
 80005c6:	bf00      	nop
    }
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <APP_LED_Write>:

void APP_LED_Write(uint8_t led)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    uint8_t mask, pin;

    mask = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
    pin = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73bb      	strb	r3, [r7, #14]
    Nop();
 80005e6:	bf00      	nop

    for (i = 0; i < APP_N_LED; i++, pin++) {
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <APP_LED_Write+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	e01a      	b.n	8000626 <APP_LED_Write+0x52>
        if (led & mask) {
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d004      	beq.n	8000606 <APP_LED_Write+0x32>
            // Set LED
            APP_LED_Set(pin);
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffc0 	bl	8000584 <APP_LED_Set>
 8000604:	e003      	b.n	800060e <APP_LED_Write+0x3a>
        } else {
            // Clear LED
            APP_LED_Clear(pin);
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff93 	bl	8000534 <APP_LED_Clear>
        }

        mask = mask << 1;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < APP_N_LED; i++, pin++) {
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <APP_LED_Write+0x64>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <APP_LED_Write+0x64>)
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	3301      	adds	r3, #1
 8000624:	73bb      	strb	r3, [r7, #14]
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <APP_LED_Write+0x64>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d9e0      	bls.n	80005f0 <APP_LED_Write+0x1c>
    }
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000a48 	.word	0x20000a48

0800063c <APP_Initialize>:
// Section: Application Initialization and State Machine Functions
// *****************************************************************************
// *****************************************************************************

void APP_Initialize(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
    ioport_set_pin_dir(INT_IN, IOPORT_DIR_INPUT);
    ioport_set_pin_mode(INT_IN, IOPORT_MODE_GLITCH_FILTER);
    ioport_set_pin_sense_mode(INT_IN, IOPORT_SENSE_FALLING);
*/
    // Switch state
    lastSwitchState.S1 = APP_SWITCH_RELEASED;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <APP_Initialize+0x1c>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]

    appData.state = APP_STATE_TEST_RAM_ACCESS;

#else
    /* Place the App state machine in its initial state. */
    appData.state = APP_STATE_INIT;
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <APP_Initialize+0x20>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
#endif

}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000a3c 	.word	0x20000a3c
 800065c:	20000988 	.word	0x20000988

08000660 <APP_Tasks>:

void APP_Tasks(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

    /* Check the application's current state. */
    switch (appData.state) {
 8000666:	4b76      	ldr	r3, [pc, #472]	; (8000840 <APP_Tasks+0x1e0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b08      	cmp	r3, #8
 800066c:	f200 80de 	bhi.w	800082c <APP_Tasks+0x1cc>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <APP_Tasks+0x18>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	0800069d 	.word	0x0800069d
 800067c:	080006b7 	.word	0x080006b7
 8000680:	08000743 	.word	0x08000743
 8000684:	0800082d 	.word	0x0800082d
 8000688:	080007bd 	.word	0x080007bd
 800068c:	080007d5 	.word	0x080007d5
 8000690:	080007f1 	.word	0x080007f1
 8000694:	0800080f 	.word	0x0800080f
 8000698:	080007e5 	.word	0x080007e5
            /* Application's initial state. */
        case APP_STATE_INIT:
        {
            Nop();
 800069c:	bf00      	nop
            APP_LED_Set(APP_INIT_LED);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff70 	bl	8000584 <APP_LED_Set>

            APP_CANFDSPI_Init();
 80006a4:	f000 f8da 	bl	800085c <APP_CANFDSPI_Init>

            APP_LED_Clear(APP_INIT_LED);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff43 	bl	8000534 <APP_LED_Clear>

            appData.state = APP_STATE_INIT_TXOBJ;
 80006ae:	4b64      	ldr	r3, [pc, #400]	; (8000840 <APP_Tasks+0x1e0>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]

            break;
 80006b4:	e0c0      	b.n	8000838 <APP_Tasks+0x1d8>

            /* Initialize TX Object */
        case APP_STATE_INIT_TXOBJ:
        {
            // Configure transmit message
            txObj.word[0] = 0;
 80006b6:	4b63      	ldr	r3, [pc, #396]	; (8000844 <APP_Tasks+0x1e4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
            txObj.word[1] = 0;
 80006bc:	4b61      	ldr	r3, [pc, #388]	; (8000844 <APP_Tasks+0x1e4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]

            txObj.bF.id.SID = TX_RESPONSE_ID;
 80006c2:	4a60      	ldr	r2, [pc, #384]	; (8000844 <APP_Tasks+0x1e4>)
 80006c4:	8813      	ldrh	r3, [r2, #0]
 80006c6:	f240 3101 	movw	r1, #769	; 0x301
 80006ca:	f361 030a 	bfi	r3, r1, #0, #11
 80006ce:	8013      	strh	r3, [r2, #0]
            txObj.bF.id.EID = 0;
 80006d0:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <APP_Tasks+0x1e4>)
 80006d2:	6813      	ldr	r3, [r2, #0]
 80006d4:	f36f 23dc 	bfc	r3, #11, #18
 80006d8:	6013      	str	r3, [r2, #0]

            txObj.bF.ctrl.BRS = 1;
 80006da:	4a5a      	ldr	r2, [pc, #360]	; (8000844 <APP_Tasks+0x1e4>)
 80006dc:	7913      	ldrb	r3, [r2, #4]
 80006de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e2:	7113      	strb	r3, [r2, #4]
            txObj.bF.ctrl.DLC = CAN_DLC_64;
 80006e4:	4a57      	ldr	r2, [pc, #348]	; (8000844 <APP_Tasks+0x1e4>)
 80006e6:	7913      	ldrb	r3, [r2, #4]
 80006e8:	f043 030f 	orr.w	r3, r3, #15
 80006ec:	7113      	strb	r3, [r2, #4]
            txObj.bF.ctrl.FDF = 1;
 80006ee:	4a55      	ldr	r2, [pc, #340]	; (8000844 <APP_Tasks+0x1e4>)
 80006f0:	7913      	ldrb	r3, [r2, #4]
 80006f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f6:	7113      	strb	r3, [r2, #4]
            txObj.bF.ctrl.IDE = 0;
 80006f8:	4a52      	ldr	r2, [pc, #328]	; (8000844 <APP_Tasks+0x1e4>)
 80006fa:	7913      	ldrb	r3, [r2, #4]
 80006fc:	f36f 1304 	bfc	r3, #4, #1
 8000700:	7113      	strb	r3, [r2, #4]

            // Configure message data
            for (i = 0; i < MAX_DATA_BYTES; i++) txd[i] = txObj.bF.id.SID + i;
 8000702:	4b51      	ldr	r3, [pc, #324]	; (8000848 <APP_Tasks+0x1e8>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	e013      	b.n	8000732 <APP_Tasks+0xd2>
 800070a:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <APP_Tasks+0x1e4>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <APP_Tasks+0x1e8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	494b      	ldr	r1, [pc, #300]	; (8000848 <APP_Tasks+0x1e8>)
 800071c:	7809      	ldrb	r1, [r1, #0]
 800071e:	4413      	add	r3, r2
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b4a      	ldr	r3, [pc, #296]	; (800084c <APP_Tasks+0x1ec>)
 8000724:	545a      	strb	r2, [r3, r1]
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <APP_Tasks+0x1e8>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b46      	ldr	r3, [pc, #280]	; (8000848 <APP_Tasks+0x1e8>)
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <APP_Tasks+0x1e8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	d9e7      	bls.n	800070a <APP_Tasks+0xaa>

            appData.state = APP_STATE_FLASH_LEDS;
 800073a:	4b41      	ldr	r3, [pc, #260]	; (8000840 <APP_Tasks+0x1e0>)
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]
            break;
 8000740:	e07a      	b.n	8000838 <APP_Tasks+0x1d8>

            /* Flash all LEDs */
        case APP_STATE_FLASH_LEDS:
        {
            // Delay loop
        	Nop();
 8000742:	bf00      	nop

            // Delay expired, update LEDs and reset delayCount
            if (delayCount == 0) {
 8000744:	4b42      	ldr	r3, [pc, #264]	; (8000850 <APP_Tasks+0x1f0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d126      	bne.n	800079a <APP_Tasks+0x13a>
                if (ledCount < APP_N_LED) {
 800074c:	4b41      	ldr	r3, [pc, #260]	; (8000854 <APP_Tasks+0x1f4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d80e      	bhi.n	8000772 <APP_Tasks+0x112>
                    ledState |= 1 << ledCount;
 8000754:	4b3f      	ldr	r3, [pc, #252]	; (8000854 <APP_Tasks+0x1f4>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	2301      	movs	r3, #1
 800075c:	4093      	lsls	r3, r2
 800075e:	b25a      	sxtb	r2, r3
 8000760:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <APP_Tasks+0x1f8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b25b      	sxtb	r3, r3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <APP_Tasks+0x1f8>)
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e002      	b.n	8000778 <APP_Tasks+0x118>
                } else {
                    ledState = 0;
 8000772:	4b39      	ldr	r3, [pc, #228]	; (8000858 <APP_Tasks+0x1f8>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
                }
                Nop();
 8000778:	bf00      	nop
                APP_LED_Write(ledState);
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <APP_Tasks+0x1f8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff28 	bl	80005d4 <APP_LED_Write>

                ledCount++;
 8000784:	4b33      	ldr	r3, [pc, #204]	; (8000854 <APP_Tasks+0x1f4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <APP_Tasks+0x1f4>)
 800078e:	701a      	strb	r2, [r3, #0]
                delayCount = APP_LED_TIME;
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <APP_Tasks+0x1f0>)
 8000792:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e004      	b.n	80007a4 <APP_Tasks+0x144>
            } else {
                delayCount--;
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <APP_Tasks+0x1f0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <APP_Tasks+0x1f0>)
 80007a2:	6013      	str	r3, [r2, #0]
            }

            if (ledCount > (APP_N_LED + 1)) {
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <APP_Tasks+0x1f4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d903      	bls.n	80007b4 <APP_Tasks+0x154>
                appData.state = APP_STATE_RECEIVE;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <APP_Tasks+0x1e0>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	701a      	strb	r2, [r3, #0]
            } else {
                appData.state = APP_STATE_FLASH_LEDS;
            }

            break;
 80007b2:	e041      	b.n	8000838 <APP_Tasks+0x1d8>
                appData.state = APP_STATE_FLASH_LEDS;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <APP_Tasks+0x1e0>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	701a      	strb	r2, [r3, #0]
            break;
 80007ba:	e03d      	b.n	8000838 <APP_Tasks+0x1d8>
        }

            /* Receive a message */
        case APP_STATE_RECEIVE:
        {
            Nop();
 80007bc:	bf00      	nop
            Nop();
 80007be:	bf00      	nop
            appData.state = APP_ReceiveMessage_Tasks();
 80007c0:	f000 f8ee 	bl	80009a0 <APP_ReceiveMessage_Tasks>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <APP_Tasks+0x1e0>)
 80007ca:	701a      	strb	r2, [r3, #0]

            appData.state = APP_STATE_PAYLOAD;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <APP_Tasks+0x1e0>)
 80007ce:	2205      	movs	r2, #5
 80007d0:	701a      	strb	r2, [r3, #0]
            break;
 80007d2:	e031      	b.n	8000838 <APP_Tasks+0x1d8>
        }

        case APP_STATE_PAYLOAD:
        {
            Nop();
 80007d4:	bf00      	nop
            Nop();
 80007d6:	bf00      	nop
            APP_PayLoad_Tasks();
 80007d8:	f000 fa54 	bl	8000c84 <APP_PayLoad_Tasks>

            appData.state = APP_STATE_SWITCH_CHANGED;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <APP_Tasks+0x1e0>)
 80007de:	2208      	movs	r2, #8
 80007e0:	701a      	strb	r2, [r3, #0]
            break;
 80007e2:	e029      	b.n	8000838 <APP_Tasks+0x1d8>
        }

        case APP_STATE_SWITCH_CHANGED:
        {
            APP_TransmitSwitchState();
 80007e4:	f000 f9f8 	bl	8000bd8 <APP_TransmitSwitchState>
            appData.state = APP_STATE_RECEIVE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <APP_Tasks+0x1e0>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	701a      	strb	r2, [r3, #0]

            break;
 80007ee:	e023      	b.n	8000838 <APP_Tasks+0x1d8>
        }

            /* RAM access test */
        case APP_STATE_TEST_RAM_ACCESS:
        {
            bool passed = APP_TestRamAccess();
 80007f0:	f000 fb4e 	bl	8000e90 <APP_TestRamAccess>
 80007f4:	4603      	mov	r3, r0
 80007f6:	71bb      	strb	r3, [r7, #6]

            if (!passed) {
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d000      	beq.n	8000806 <APP_Tasks+0x1a6>
            	Nop();
 8000804:	bf00      	nop
            }

            appData.state = APP_STATE_TEST_REGISTER_ACCESS;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <APP_Tasks+0x1e0>)
 8000808:	2207      	movs	r2, #7
 800080a:	701a      	strb	r2, [r3, #0]

            break;
 800080c:	e014      	b.n	8000838 <APP_Tasks+0x1d8>
        }

            /* Register access test */
        case APP_STATE_TEST_REGISTER_ACCESS:
        {
            bool passed = APP_TestRegisterAccess();
 800080e:	f000 fac7 	bl	8000da0 <APP_TestRegisterAccess>
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]

            if (!passed) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f083 0301 	eor.w	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d000      	beq.n	8000824 <APP_Tasks+0x1c4>
            	Nop();
 8000822:	bf00      	nop
            }

            appData.state = APP_STATE_TEST_RAM_ACCESS;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <APP_Tasks+0x1e0>)
 8000826:	2206      	movs	r2, #6
 8000828:	701a      	strb	r2, [r3, #0]

            break;
 800082a:	e005      	b.n	8000838 <APP_Tasks+0x1d8>

            /* The default state should never be executed. */
        default:
        {
            /* TODO: Handle error in application's state machine. */
            Nop();
 800082c:	bf00      	nop
            Nop();
 800082e:	bf00      	nop
            appData.state = APP_STATE_INIT;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <APP_Tasks+0x1e0>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]

            break;
 8000836:	bf00      	nop
        }
    }
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000988 	.word	0x20000988
 8000844:	20000998 	.word	0x20000998
 8000848:	20000a48 	.word	0x20000a48
 800084c:	200009a4 	.word	0x200009a4
 8000850:	20000008 	.word	0x20000008
 8000854:	20000a46 	.word	0x20000a46
 8000858:	20000a47 	.word	0x20000a47

0800085c <APP_CANFDSPI_Init>:
// Section: Application Local Functions
// *****************************************************************************
// *****************************************************************************

void APP_CANFDSPI_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    // Reset device
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fec5 	bl	80015f0 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 8000866:	2000      	movs	r0, #0
 8000868:	f001 ffa6 	bl	80027b8 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 800086c:	21ff      	movs	r1, #255	; 0xff
 800086e:	2000      	movs	r0, #0
 8000870:	f001 ffd6 	bl	8002820 <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8000874:	4845      	ldr	r0, [pc, #276]	; (800098c <APP_CANFDSPI_Init+0x130>)
 8000876:	f001 fa1b 	bl	8001cb0 <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 800087a:	4a44      	ldr	r2, [pc, #272]	; (800098c <APP_CANFDSPI_Init+0x130>)
 800087c:	7813      	ldrb	r3, [r2, #0]
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 8000884:	4a41      	ldr	r2, [pc, #260]	; (800098c <APP_CANFDSPI_Init+0x130>)
 8000886:	7853      	ldrb	r3, [r2, #1]
 8000888:	f36f 1386 	bfc	r3, #6, #1
 800088c:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 800088e:	493f      	ldr	r1, [pc, #252]	; (800098c <APP_CANFDSPI_Init+0x130>)
 8000890:	2000      	movs	r0, #0
 8000892:	f001 f97f 	bl	8001b94 <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8000896:	483e      	ldr	r0, [pc, #248]	; (8000990 <APP_CANFDSPI_Init+0x134>)
 8000898:	f001 fb1a 	bl	8001ed0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 800089c:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <APP_CANFDSPI_Init+0x134>)
 800089e:	7853      	ldrb	r3, [r2, #1]
 80008a0:	2107      	movs	r1, #7
 80008a2:	f361 0304 	bfi	r3, r1, #0, #5
 80008a6:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 80008a8:	4a39      	ldr	r2, [pc, #228]	; (8000990 <APP_CANFDSPI_Init+0x134>)
 80008aa:	7853      	ldrb	r3, [r2, #1]
 80008ac:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80008b0:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 80008b2:	4a37      	ldr	r2, [pc, #220]	; (8000990 <APP_CANFDSPI_Init+0x134>)
 80008b4:	7813      	ldrb	r3, [r2, #0]
 80008b6:	2101      	movs	r1, #1
 80008b8:	f361 0345 	bfi	r3, r1, #1, #5
 80008bc:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 80008be:	4a34      	ldr	r2, [pc, #208]	; (8000990 <APP_CANFDSPI_Init+0x134>)
 80008c0:	2102      	movs	r1, #2
 80008c2:	2000      	movs	r0, #0
 80008c4:	f001 faac 	bl	8001e20 <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 80008c8:	4832      	ldr	r0, [pc, #200]	; (8000994 <APP_CANFDSPI_Init+0x138>)
 80008ca:	f001 fd2f 	bl	800232c <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 80008ce:	4a31      	ldr	r2, [pc, #196]	; (8000994 <APP_CANFDSPI_Init+0x138>)
 80008d0:	7813      	ldrb	r3, [r2, #0]
 80008d2:	210f      	movs	r1, #15
 80008d4:	f361 0345 	bfi	r3, r1, #1, #5
 80008d8:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 80008da:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <APP_CANFDSPI_Init+0x138>)
 80008dc:	8813      	ldrh	r3, [r2, #0]
 80008de:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80008e2:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxConfig);
 80008e4:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <APP_CANFDSPI_Init+0x138>)
 80008e6:	2101      	movs	r1, #1
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fcd3 	bl	8002294 <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <APP_CANFDSPI_Init+0x13c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
    fObj.bF.SID = 0xda;
 80008f4:	4a28      	ldr	r2, [pc, #160]	; (8000998 <APP_CANFDSPI_Init+0x13c>)
 80008f6:	8813      	ldrh	r3, [r2, #0]
 80008f8:	21da      	movs	r1, #218	; 0xda
 80008fa:	f361 030a 	bfi	r3, r1, #0, #11
 80008fe:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <APP_CANFDSPI_Init+0x13c>)
 8000902:	78d3      	ldrb	r3, [r2, #3]
 8000904:	f36f 1386 	bfc	r3, #6, #1
 8000908:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 800090a:	4a23      	ldr	r2, [pc, #140]	; (8000998 <APP_CANFDSPI_Init+0x13c>)
 800090c:	6813      	ldr	r3, [r2, #0]
 800090e:	f36f 23dc 	bfc	r3, #11, #18
 8000912:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &fObj.bF);
 8000914:	4a20      	ldr	r2, [pc, #128]	; (8000998 <APP_CANFDSPI_Init+0x13c>)
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fc3d 	bl	8002198 <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <APP_CANFDSPI_Init+0x140>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x0;
 8000924:	4a1d      	ldr	r2, [pc, #116]	; (800099c <APP_CANFDSPI_Init+0x140>)
 8000926:	8813      	ldrh	r3, [r2, #0]
 8000928:	f36f 030a 	bfc	r3, #0, #11
 800092c:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 1; // Only allow standard IDs
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <APP_CANFDSPI_Init+0x140>)
 8000930:	78d3      	ldrb	r3, [r2, #3]
 8000932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000936:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <APP_CANFDSPI_Init+0x140>)
 800093a:	6813      	ldr	r3, [r2, #0]
 800093c:	f36f 23dc 	bfc	r3, #11, #18
 8000940:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &mObj.bF);
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <APP_CANFDSPI_Init+0x140>)
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f001 fc48 	bl	80021dc <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, APP_RX_FIFO, true);
 800094c:	2301      	movs	r3, #1
 800094e:	2201      	movs	r2, #1
 8000950:	2100      	movs	r1, #0
 8000952:	2000      	movs	r0, #0
 8000954:	f001 fc66 	bl	8002224 <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8000958:	2300      	movs	r3, #0
 800095a:	2202      	movs	r2, #2
 800095c:	2101      	movs	r1, #1
 800095e:	2000      	movs	r0, #0
 8000960:	f001 ff9e 	bl	80028a0 <DRV_CANFDSPI_BitTimeConfigure>

    // Setup Transmit and Receive Interrupts
    DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_0, GPIO_MODE_INT, GPIO_MODE_INT);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2000      	movs	r0, #0
 800096a:	f002 feb7 	bl	80036dc <DRV_CANFDSPI_GpioModeConfigure>
	#ifdef APP_USE_TX_INT
    DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
	#endif
    DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 800096e:	2201      	movs	r2, #1
 8000970:	2101      	movs	r1, #1
 8000972:	2000      	movs	r0, #0
 8000974:	f001 fea0 	bl	80026b8 <DRV_CANFDSPI_ReceiveChannelEventEnable>
    DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_0, CAN_TX_EVENT | CAN_RX_EVENT);
 8000978:	2103      	movs	r1, #3
 800097a:	2000      	movs	r0, #0
 800097c:	f001 fe29 	bl	80025d2 <DRV_CANFDSPI_ModuleEventEnable>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f001 fa10 	bl	8001da8 <DRV_CANFDSPI_OperationModeSelect>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000098c 	.word	0x2000098c
 8000990:	20000990 	.word	0x20000990
 8000994:	200009e4 	.word	0x200009e4
 8000998:	200009e8 	.word	0x200009e8
 800099c:	200009ec 	.word	0x200009ec

080009a0 <APP_ReceiveMessage_Tasks>:

APP_STATES APP_ReceiveMessage_Tasks(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af02      	add	r7, sp, #8
    APP_STATES nextState;

    // Normally we go to APP_STATE_PAYLOAD
    Nop();
 80009a6:	bf00      	nop
    Nop();
 80009a8:	bf00      	nop
    nextState = APP_STATE_PAYLOAD;
 80009aa:	2305      	movs	r3, #5
 80009ac:	71fb      	strb	r3, [r7, #7]

    // Check if FIFO is not empty
#ifdef APP_USE_RX_INT
    if (APP_RX_INT()) {
 80009ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b2:	485e      	ldr	r0, [pc, #376]	; (8000b2c <APP_ReceiveMessage_Tasks+0x18c>)
 80009b4:	f004 feb2 	bl	800571c <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 80b0 	beq.w	8000b20 <APP_ReceiveMessage_Tasks+0x180>
    if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
#endif
        //        APP_LED_Set(APP_RX_LED);

        // Get message
        DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	4b5a      	ldr	r3, [pc, #360]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 80009c6:	4a5b      	ldr	r2, [pc, #364]	; (8000b34 <APP_ReceiveMessage_Tasks+0x194>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	2000      	movs	r0, #0
 80009cc:	f001 fcd8 	bl	8002380 <DRV_CANFDSPI_ReceiveMessageGet>

        switch (rxObj.bF.id.SID) {
 80009d0:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <APP_ReceiveMessage_Tasks+0x194>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80009de:	d014      	beq.n	8000a0a <APP_ReceiveMessage_Tasks+0x6a>
 80009e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80009e4:	f300 809d 	bgt.w	8000b22 <APP_ReceiveMessage_Tasks+0x182>
 80009e8:	f240 2201 	movw	r2, #513	; 0x201
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d05e      	beq.n	8000aae <APP_ReceiveMessage_Tasks+0x10e>
 80009f0:	f240 2201 	movw	r2, #513	; 0x201
 80009f4:	4293      	cmp	r3, r2
 80009f6:	f300 8094 	bgt.w	8000b22 <APP_ReceiveMessage_Tasks+0x182>
 80009fa:	f240 1201 	movw	r2, #257	; 0x101
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d063      	beq.n	8000aca <APP_ReceiveMessage_Tasks+0x12a>
 8000a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a06:	d04c      	beq.n	8000aa2 <APP_ReceiveMessage_Tasks+0x102>
 8000a08:	e08b      	b.n	8000b22 <APP_ReceiveMessage_Tasks+0x182>
            case TX_REQUEST_ID:

                // Check for TX request command
                Nop();
 8000a0a:	bf00      	nop
                Nop();
 8000a0c:	bf00      	nop
                txObj.bF.id.SID = TX_RESPONSE_ID;
 8000a0e:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <APP_ReceiveMessage_Tasks+0x198>)
 8000a10:	8813      	ldrh	r3, [r2, #0]
 8000a12:	f240 3101 	movw	r1, #769	; 0x301
 8000a16:	f361 030a 	bfi	r3, r1, #0, #11
 8000a1a:	8013      	strh	r3, [r2, #0]

                txObj.bF.ctrl.DLC = rxObj.bF.ctrl.DLC;
 8000a1c:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <APP_ReceiveMessage_Tasks+0x194>)
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000a24:	b2d9      	uxtb	r1, r3
 8000a26:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <APP_ReceiveMessage_Tasks+0x198>)
 8000a28:	7913      	ldrb	r3, [r2, #4]
 8000a2a:	f361 0303 	bfi	r3, r1, #0, #4
 8000a2e:	7113      	strb	r3, [r2, #4]
                txObj.bF.ctrl.IDE = rxObj.bF.ctrl.IDE;
 8000a30:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <APP_ReceiveMessage_Tasks+0x194>)
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a38:	b2d9      	uxtb	r1, r3
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <APP_ReceiveMessage_Tasks+0x198>)
 8000a3c:	7913      	ldrb	r3, [r2, #4]
 8000a3e:	f361 1304 	bfi	r3, r1, #4, #1
 8000a42:	7113      	strb	r3, [r2, #4]
                txObj.bF.ctrl.BRS = rxObj.bF.ctrl.BRS;
 8000a44:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <APP_ReceiveMessage_Tasks+0x194>)
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a4c:	b2d9      	uxtb	r1, r3
 8000a4e:	4a3a      	ldr	r2, [pc, #232]	; (8000b38 <APP_ReceiveMessage_Tasks+0x198>)
 8000a50:	7913      	ldrb	r3, [r2, #4]
 8000a52:	f361 1386 	bfi	r3, r1, #6, #1
 8000a56:	7113      	strb	r3, [r2, #4]
                txObj.bF.ctrl.FDF = rxObj.bF.ctrl.FDF;
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <APP_ReceiveMessage_Tasks+0x194>)
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a60:	b2d9      	uxtb	r1, r3
 8000a62:	4a35      	ldr	r2, [pc, #212]	; (8000b38 <APP_ReceiveMessage_Tasks+0x198>)
 8000a64:	7913      	ldrb	r3, [r2, #4]
 8000a66:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a6a:	7113      	strb	r3, [r2, #4]

                for (i = 0; i < MAX_DATA_BYTES; i++) txd[i] = rxd[i];
 8000a6c:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <APP_ReceiveMessage_Tasks+0x19c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e00f      	b.n	8000a94 <APP_ReceiveMessage_Tasks+0xf4>
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <APP_ReceiveMessage_Tasks+0x19c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <APP_ReceiveMessage_Tasks+0x19c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000a82:	5c59      	ldrb	r1, [r3, r1]
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <APP_ReceiveMessage_Tasks+0x1a0>)
 8000a86:	5499      	strb	r1, [r3, r2]
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <APP_ReceiveMessage_Tasks+0x19c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <APP_ReceiveMessage_Tasks+0x19c>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <APP_ReceiveMessage_Tasks+0x19c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b3f      	cmp	r3, #63	; 0x3f
 8000a9a:	d9eb      	bls.n	8000a74 <APP_ReceiveMessage_Tasks+0xd4>

                APP_TransmitMessageQueue();
 8000a9c:	f000 f854 	bl	8000b48 <APP_TransmitMessageQueue>
                break;
 8000aa0:	e03f      	b.n	8000b22 <APP_ReceiveMessage_Tasks+0x182>

            case LED_STATUS_ID:
                // Check for LED command
                APP_LED_Write(rxd[0]);
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd94 	bl	80005d4 <APP_LED_Write>
                break;
 8000aac:	e039      	b.n	8000b22 <APP_ReceiveMessage_Tasks+0x182>
            case BUTTON_STATUS_ID:
                // Check for Button Status command
                // This can be used to test two EVBs without a CAN tool

                // S1 turns on D1
                if (rxd[0] & 0x01) {
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <APP_ReceiveMessage_Tasks+0x122>
                    APP_LED_Set(APP_LED_D1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fd62 	bl	8000584 <APP_LED_Set>
                } else {
                    APP_LED_Clear(APP_LED_D1);
                }

                break;
 8000ac0:	e02f      	b.n	8000b22 <APP_ReceiveMessage_Tasks+0x182>
                    APP_LED_Clear(APP_LED_D1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff fd36 	bl	8000534 <APP_LED_Clear>
                break;
 8000ac8:	e02b      	b.n	8000b22 <APP_ReceiveMessage_Tasks+0x182>

            case PAYLOAD_ID:
                // Check for Payload command
                Nop();
 8000aca:	bf00      	nop
                Nop();
 8000acc:	bf00      	nop
                payload.On = rxd[0];
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000ade:	701a      	strb	r2, [r3, #0]
                payload.Dlc = rxd[1];
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000ae2:	785a      	ldrb	r2, [r3, #1]
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000ae6:	705a      	strb	r2, [r3, #1]
                if (rxd[2] == 0) payload.Mode = true;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d103      	bne.n	8000af8 <APP_ReceiveMessage_Tasks+0x158>
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	709a      	strb	r2, [r3, #2]
 8000af6:	e002      	b.n	8000afe <APP_ReceiveMessage_Tasks+0x15e>
                else payload.Mode = false;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	709a      	strb	r2, [r3, #2]
                payload.Counter = 0;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	70da      	strb	r2, [r3, #3]
                payload.Delay = rxd[3];
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000b06:	78da      	ldrb	r2, [r3, #3]
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000b0a:	711a      	strb	r2, [r3, #4]
                payload.BRS = rxd[4];
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <APP_ReceiveMessage_Tasks+0x190>)
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <APP_ReceiveMessage_Tasks+0x1a4>)
 8000b1c:	715a      	strb	r2, [r3, #5]

                break;
 8000b1e:	e000      	b.n	8000b22 <APP_ReceiveMessage_Tasks+0x182>

        }
    }
 8000b20:	bf00      	nop

    //    APP_LED_Clear(APP_RX_LED);

    return nextState;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	200009fc 	.word	0x200009fc
 8000b34:	200009f0 	.word	0x200009f0
 8000b38:	20000998 	.word	0x20000998
 8000b3c:	20000a48 	.word	0x20000a48
 8000b40:	200009a4 	.word	0x200009a4
 8000b44:	20000a40 	.word	0x20000a40

08000b48 <APP_TransmitMessageQueue>:

void APP_TransmitMessageQueue(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
    APP_LED_Set(APP_TX_LED);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff fd18 	bl	8000584 <APP_LED_Set>

    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8000b54:	2332      	movs	r3, #50	; 0x32
 8000b56:	71fb      	strb	r3, [r7, #7]

    // Check if FIFO is not full
    do {
        DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <APP_TransmitMessageQueue+0x78>)
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 fd78 	bl	8002652 <DRV_CANFDSPI_TransmitChannelEventGet>
        if (attempts == 0) {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d108      	bne.n	8000b7a <APP_TransmitMessageQueue+0x32>
            Nop();
 8000b68:	bf00      	nop
            Nop();
 8000b6a:	bf00      	nop
            DRV_CANFDSPI_ErrorCountStateGet(DRV_CANFDSPI_INDEX_0, &tec, &rec, &errorFlags);
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <APP_TransmitMessageQueue+0x7c>)
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <APP_TransmitMessageQueue+0x80>)
 8000b70:	4916      	ldr	r1, [pc, #88]	; (8000bcc <APP_TransmitMessageQueue+0x84>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f001 fdee 	bl	8002754 <DRV_CANFDSPI_ErrorCountStateGet>
            return;
 8000b78:	e01f      	b.n	8000bba <APP_TransmitMessageQueue+0x72>
        }
        attempts--;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <APP_TransmitMessageQueue+0x78>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0e5      	beq.n	8000b58 <APP_TransmitMessageQueue+0x10>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <APP_TransmitMessageQueue+0x88>)
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fde8 	bl	800376c <DRV_CANFDSPI_DlcToDataBytes>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71bb      	strb	r3, [r7, #6]

    DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, true);
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	9201      	str	r2, [sp, #4]
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <APP_TransmitMessageQueue+0x8c>)
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <APP_TransmitMessageQueue+0x88>)
 8000bac:	2102      	movs	r1, #2
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f001 f9ca 	bl	8001f48 <DRV_CANFDSPI_TransmitChannelLoad>

    APP_LED_Clear(APP_TX_LED);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff fcbd 	bl	8000534 <APP_LED_Clear>
}
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000994 	.word	0x20000994
 8000bc4:	20000a4b 	.word	0x20000a4b
 8000bc8:	20000a4a 	.word	0x20000a4a
 8000bcc:	20000a49 	.word	0x20000a49
 8000bd0:	20000998 	.word	0x20000998
 8000bd4:	200009a4 	.word	0x200009a4

08000bd8 <APP_TransmitSwitchState>:

void APP_TransmitSwitchState(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
    APP_SwitchState newSwitchState;

    // Check if switch has changed
    Nop();
 8000bde:	bf00      	nop
    newSwitchState.S1 = APP_S1_READ();
 8000be0:	2110      	movs	r1, #16
 8000be2:	4824      	ldr	r0, [pc, #144]	; (8000c74 <APP_TransmitSwitchState+0x9c>)
 8000be4:	f004 fd9a 	bl	800571c <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	713b      	strb	r3, [r7, #4]

    bool switchChanged = newSwitchState.S1 != lastSwitchState.S1;
 8000bf6:	793a      	ldrb	r2, [r7, #4]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <APP_TransmitSwitchState+0xa0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]

    if (switchChanged) {
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d02c      	beq.n	8000c66 <APP_TransmitSwitchState+0x8e>
        // Transmit new state
        txObj.bF.id.SID = BUTTON_STATUS_ID;
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <APP_TransmitSwitchState+0xa4>)
 8000c0e:	8813      	ldrh	r3, [r2, #0]
 8000c10:	f240 2101 	movw	r1, #513	; 0x201
 8000c14:	f361 030a 	bfi	r3, r1, #0, #11
 8000c18:	8013      	strh	r3, [r2, #0]

        txObj.bF.ctrl.DLC = CAN_DLC_1;
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <APP_TransmitSwitchState+0xa4>)
 8000c1c:	7913      	ldrb	r3, [r2, #4]
 8000c1e:	2101      	movs	r1, #1
 8000c20:	f361 0303 	bfi	r3, r1, #0, #4
 8000c24:	7113      	strb	r3, [r2, #4]
        txObj.bF.ctrl.IDE = 0;
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <APP_TransmitSwitchState+0xa4>)
 8000c28:	7913      	ldrb	r3, [r2, #4]
 8000c2a:	f36f 1304 	bfc	r3, #4, #1
 8000c2e:	7113      	strb	r3, [r2, #4]
        txObj.bF.ctrl.BRS = 1;
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <APP_TransmitSwitchState+0xa4>)
 8000c32:	7913      	ldrb	r3, [r2, #4]
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	7113      	strb	r3, [r2, #4]
        txObj.bF.ctrl.FDF = 1;
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <APP_TransmitSwitchState+0xa4>)
 8000c3c:	7913      	ldrb	r3, [r2, #4]
 8000c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c42:	7113      	strb	r3, [r2, #4]

        txd[0] = 0;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <APP_TransmitSwitchState+0xa8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
        if (newSwitchState.S1 == APP_SWITCH_PRESSED) txd[0] += 0x1;
 8000c4a:	793b      	ldrb	r3, [r7, #4]
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <APP_TransmitSwitchState+0x8a>
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <APP_TransmitSwitchState+0xa8>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <APP_TransmitSwitchState+0xa8>)
 8000c60:	701a      	strb	r2, [r3, #0]

        APP_TransmitMessageQueue();
 8000c62:	f7ff ff71 	bl	8000b48 <APP_TransmitMessageQueue>
    }

    lastSwitchState.S1 = newSwitchState.S1;
 8000c66:	793a      	ldrb	r2, [r7, #4]
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <APP_TransmitSwitchState+0xa0>)
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	48000800 	.word	0x48000800
 8000c78:	20000a3c 	.word	0x20000a3c
 8000c7c:	20000998 	.word	0x20000998
 8000c80:	200009a4 	.word	0x200009a4

08000c84 <APP_PayLoad_Tasks>:

void APP_PayLoad_Tasks(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
    uint8_t n;

    // Send payload?
    if (payload.On) {
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d075      	beq.n	8000d7e <APP_PayLoad_Tasks+0xfa>
        // Delay transmission
        if (delayCount == 0) {
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <APP_PayLoad_Tasks+0x10c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d16b      	bne.n	8000d72 <APP_PayLoad_Tasks+0xee>
            delayCount = payload.Delay;
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <APP_PayLoad_Tasks+0x10c>)
 8000ca2:	601a      	str	r2, [r3, #0]

            // Prepare data
            Nop();
 8000ca4:	bf00      	nop
            Nop();
 8000ca6:	bf00      	nop
            txObj.bF.id.SID = TX_RESPONSE_ID;
 8000ca8:	4a3a      	ldr	r2, [pc, #232]	; (8000d94 <APP_PayLoad_Tasks+0x110>)
 8000caa:	8813      	ldrh	r3, [r2, #0]
 8000cac:	f240 3101 	movw	r1, #769	; 0x301
 8000cb0:	f361 030a 	bfi	r3, r1, #0, #11
 8000cb4:	8013      	strh	r3, [r2, #0]

            txObj.bF.ctrl.DLC = payload.Dlc;
 8000cb6:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000cb8:	785b      	ldrb	r3, [r3, #1]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	b2d9      	uxtb	r1, r3
 8000cc0:	4a34      	ldr	r2, [pc, #208]	; (8000d94 <APP_PayLoad_Tasks+0x110>)
 8000cc2:	7913      	ldrb	r3, [r2, #4]
 8000cc4:	f361 0303 	bfi	r3, r1, #0, #4
 8000cc8:	7113      	strb	r3, [r2, #4]
            txObj.bF.ctrl.IDE = 0;
 8000cca:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <APP_PayLoad_Tasks+0x110>)
 8000ccc:	7913      	ldrb	r3, [r2, #4]
 8000cce:	f36f 1304 	bfc	r3, #4, #1
 8000cd2:	7113      	strb	r3, [r2, #4]
            txObj.bF.ctrl.BRS = payload.BRS;
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000cd6:	7959      	ldrb	r1, [r3, #5]
 8000cd8:	4a2e      	ldr	r2, [pc, #184]	; (8000d94 <APP_PayLoad_Tasks+0x110>)
 8000cda:	7913      	ldrb	r3, [r2, #4]
 8000cdc:	f361 1386 	bfi	r3, r1, #6, #1
 8000ce0:	7113      	strb	r3, [r2, #4]
            txObj.bF.ctrl.FDF = 1;
 8000ce2:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <APP_PayLoad_Tasks+0x110>)
 8000ce4:	7913      	ldrb	r3, [r2, #4]
 8000ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cea:	7113      	strb	r3, [r2, #4]

            n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) payload.Dlc);
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fd3b 	bl	800376c <DRV_CANFDSPI_DlcToDataBytes>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]

            if (payload.Mode) {
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d018      	beq.n	8000d34 <APP_PayLoad_Tasks+0xb0>
                // Random data
                for (i = 0; i < n; i++) txd[i] = rand() & 0xff;
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e00e      	b.n	8000d28 <APP_PayLoad_Tasks+0xa4>
 8000d0a:	f00b fa57 	bl	800c1bc <rand>
 8000d0e:	4601      	mov	r1, r0
 8000d10:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	b2c9      	uxtb	r1, r1
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <APP_PayLoad_Tasks+0x118>)
 8000d1a:	5499      	strb	r1, [r3, r2]
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d8eb      	bhi.n	8000d0a <APP_PayLoad_Tasks+0x86>
 8000d32:	e01b      	b.n	8000d6c <APP_PayLoad_Tasks+0xe8>
            } else {
                // Counter
                for (i = 0; i < n; i++) txd[i] = payload.Counter;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e00c      	b.n	8000d56 <APP_PayLoad_Tasks+0xd2>
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000d44:	78d9      	ldrb	r1, [r3, #3]
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <APP_PayLoad_Tasks+0x118>)
 8000d48:	5499      	strb	r1, [r3, r2]
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <APP_PayLoad_Tasks+0x114>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8ed      	bhi.n	8000d3c <APP_PayLoad_Tasks+0xb8>
                payload.Counter++;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000d62:	78db      	ldrb	r3, [r3, #3]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <APP_PayLoad_Tasks+0x108>)
 8000d6a:	70da      	strb	r2, [r3, #3]
            }

            APP_TransmitMessageQueue();
 8000d6c:	f7ff feec 	bl	8000b48 <APP_TransmitMessageQueue>
            delayCount--;
        }
    } else {
        delayCount = 0;
    }
}
 8000d70:	e008      	b.n	8000d84 <APP_PayLoad_Tasks+0x100>
            delayCount--;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <APP_PayLoad_Tasks+0x10c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <APP_PayLoad_Tasks+0x10c>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	e002      	b.n	8000d84 <APP_PayLoad_Tasks+0x100>
        delayCount = 0;
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <APP_PayLoad_Tasks+0x10c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000a40 	.word	0x20000a40
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000998 	.word	0x20000998
 8000d98:	20000a48 	.word	0x20000a48
 8000d9c:	200009a4 	.word	0x200009a4

08000da0 <APP_TestRegisterAccess>:

bool APP_TestRegisterAccess(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71bb      	strb	r3, [r7, #6]

    Nop();
 8000daa:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8000dac:	2301      	movs	r3, #1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	e05d      	b.n	8000e6e <APP_TestRegisterAccess+0xce>
        for (i = 0; i < length; i++) {
 8000db2:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e016      	b.n	8000de8 <APP_TestRegisterAccess+0x48>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 8000dba:	f00b f9ff 	bl	800c1bc <rand>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <APP_TestRegisterAccess+0xe8>)
 8000dce:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <APP_TestRegisterAccess+0xec>)
 8000dd8:	21ff      	movs	r1, #255	; 0xff
 8000dda:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8e3      	bhi.n	8000dba <APP_TestRegisterAccess+0x1a>
        }

        Nop();
 8000df2:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, txd, length);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <APP_TestRegisterAccess+0xe8>)
 8000dfa:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 fe04 	bl	8001a0c <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, rxd, length);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <APP_TestRegisterAccess+0xec>)
 8000e0a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 fda2 	bl	8001958 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8000e14:	2300      	movs	r3, #0
 8000e16:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e01e      	b.n	8000e5e <APP_TestRegisterAccess+0xbe>
            good = txd[i] == rxd[i];
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <APP_TestRegisterAccess+0xe8>)
 8000e28:	5c9a      	ldrb	r2, [r3, r2]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <APP_TestRegisterAccess+0xec>)
 8000e32:	5c5b      	ldrb	r3, [r3, r1]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	bf0c      	ite	eq
 8000e38:	2301      	moveq	r3, #1
 8000e3a:	2300      	movne	r3, #0
 8000e3c:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	f083 0301 	eor.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <APP_TestRegisterAccess+0xb2>
                Nop();
 8000e4a:	bf00      	nop
                Nop();
 8000e4c:	bf00      	nop

                // Data mismatch
                return false;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e013      	b.n	8000e7a <APP_TestRegisterAccess+0xda>
        for (i = 0; i < length; i++) {
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <APP_TestRegisterAccess+0xe4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8db      	bhi.n	8000e20 <APP_TestRegisterAccess+0x80>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b40      	cmp	r3, #64	; 0x40
 8000e72:	d99e      	bls.n	8000db2 <APP_TestRegisterAccess+0x12>
            }
        }
    }

    Nop();
 8000e74:	bf00      	nop
    Nop();
 8000e76:	bf00      	nop

    return true;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000a48 	.word	0x20000a48
 8000e88:	200009a4 	.word	0x200009a4
 8000e8c:	200009fc 	.word	0x200009fc

08000e90 <APP_TestRamAccess>:

//! Test RAM access

bool APP_TestRamAccess(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71bb      	strb	r3, [r7, #6]

    Nop();
 8000e9a:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	e05b      	b.n	8000f5a <APP_TestRamAccess+0xca>
        for (i = 0; i < length; i++) {
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e014      	b.n	8000ed4 <APP_TestRamAccess+0x44>
            txd[i] = rand() & 0xff;
 8000eaa:	f00b f987 	bl	800c1bc <rand>
 8000eae:	4601      	mov	r1, r0
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	b2c9      	uxtb	r1, r1
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <APP_TestRamAccess+0xe0>)
 8000eba:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <APP_TestRamAccess+0xe4>)
 8000ec4:	21ff      	movs	r1, #255	; 0xff
 8000ec6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d8e5      	bhi.n	8000eaa <APP_TestRamAccess+0x1a>
        }

        Nop();
 8000ede:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, txd, length);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <APP_TestRamAccess+0xe0>)
 8000ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fd8e 	bl	8001a0c <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, rxd, length);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <APP_TestRamAccess+0xe4>)
 8000ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fd2c 	bl	8001958 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8000f00:	2300      	movs	r3, #0
 8000f02:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e01e      	b.n	8000f4a <APP_TestRamAccess+0xba>
            good = txd[i] == rxd[i];
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <APP_TestRamAccess+0xe0>)
 8000f14:	5c9a      	ldrb	r2, [r3, r2]
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <APP_TestRamAccess+0xe4>)
 8000f1e:	5c5b      	ldrb	r3, [r3, r1]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	f083 0301 	eor.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <APP_TestRamAccess+0xae>
                Nop();
 8000f36:	bf00      	nop
                Nop();
 8000f38:	bf00      	nop

                // Data mismatch
                return false;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e011      	b.n	8000f62 <APP_TestRamAccess+0xd2>
        for (i = 0; i < length; i++) {
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <APP_TestRamAccess+0xdc>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8db      	bhi.n	8000f0c <APP_TestRamAccess+0x7c>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	3304      	adds	r3, #4
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b40      	cmp	r3, #64	; 0x40
 8000f5e:	d9a0      	bls.n	8000ea2 <APP_TestRamAccess+0x12>
            }
        }
    }

    return true;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000a48 	.word	0x20000a48
 8000f70:	200009a4 	.word	0x200009a4
 8000f74:	200009fc 	.word	0x200009fc

08000f78 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <APPD_EnableCPU2+0x34>)
 8000f80:	1d3c      	adds	r4, r7, #4
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8c:	c403      	stmia	r4!, {r0, r1}
 8000f8e:	8022      	strh	r2, [r4, #0]
 8000f90:	3402      	adds	r4, #2
 8000f92:	0c13      	lsrs	r3, r2, #16
 8000f94:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f96:	f00a f817 	bl	800afc8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fb24 	bl	800a5ea <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fa2:	bf00      	nop
}
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0800d244 	.word	0x0800d244

08000fb0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fbe:	f023 0207 	bic.w	r2, r3, #7
 8000fc2:	4905      	ldr	r1, [pc, #20]	; (8000fd8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58000400 	.word	0x58000400

08000fdc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fe6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fea:	4905      	ldr	r1, [pc, #20]	; (8001000 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58000800 	.word	0x58000800

08001004 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001012:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800101e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800102a:	4313      	orrs	r3, r2
 800102c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	cafecafe 	.word	0xcafecafe

08001040 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010c0:	d101      	bne.n	80010c6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e6:	d101      	bne.n	80010ec <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <LL_DBGMCU_GetDeviceID+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e0042000 	.word	0xe0042000

08001148 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <LL_DBGMCU_GetRevisionID+0x18>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0c1b      	lsrs	r3, r3, #16
 8001152:	b29b      	uxth	r3, r3
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e0042000 	.word	0xe0042000

08001164 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	605a      	str	r2, [r3, #4]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	615a      	str	r2, [r3, #20]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	615a      	str	r2, [r3, #20]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	609a      	str	r2, [r3, #8]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	619a      	str	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	22ff      	movs	r2, #255	; 0xff
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	22ca      	movs	r2, #202	; 0xca
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 0207 	bic.w	r2, r3, #7
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <MX_APPE_Config+0x18>)
 800128e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001292:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001294:	f000 f824 	bl	80012e0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001298:	f000 f864 	bl	8001364 <Config_HSE>

  return;
 800129c:	bf00      	nop
}
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58004000 	.word	0x58004000

080012a4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80012a8:	f000 f870 	bl	800138c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80012ac:	f000 f888 	bl	80013c0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80012b0:	4903      	ldr	r1, [pc, #12]	; (80012c0 <MX_APPE_Init+0x1c>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f002 fde6 	bl	8003e84 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80012b8:	f000 f890 	bl	80013dc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80012bc:	bf00      	nop
}
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000bf4 	.word	0x20000bf4

080012c4 <Init_Smps>:

void Init_Smps(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80012c8:	bf00      	nop
}
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <Init_Exti>:

void Init_Exti(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80012d6:	2050      	movs	r0, #80	; 0x50
 80012d8:	f7ff fe80 	bl	8000fdc <LL_EXTI_EnableIT_32_63>

  return;
 80012dc:	bf00      	nop
}
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80012e4:	f000 f804 	bl	80012f0 <Reset_BackupDomain>

  Reset_IPCC();
 80012e8:	f000 f81a 	bl	8001320 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80012ec:	bf00      	nop
}
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80012f4:	f7ff feda 	bl	80010ac <LL_RCC_IsActiveFlag_PINRST>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <Reset_BackupDomain+0x2a>
 80012fe:	f7ff fee8 	bl	80010d2 <LL_RCC_IsActiveFlag_SFTRST>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d108      	bne.n	800131a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001308:	f004 fc14 	bl	8005b34 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800130c:	f004 fc12 	bl	8005b34 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001310:	f7ff feaa 	bl	8001068 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001314:	f7ff feb9 	bl	800108a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001318:	bf00      	nop
 800131a:	bf00      	nop
}
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001324:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001328:	f7ff fee6 	bl	80010f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800132c:	213f      	movs	r1, #63	; 0x3f
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <Reset_IPCC+0x40>)
 8001330:	f7ff ff5e 	bl	80011f0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001334:	213f      	movs	r1, #63	; 0x3f
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <Reset_IPCC+0x40>)
 8001338:	f7ff ff68 	bl	800120c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800133c:	213f      	movs	r1, #63	; 0x3f
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <Reset_IPCC+0x40>)
 8001340:	f7ff ff10 	bl	8001164 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001344:	213f      	movs	r1, #63	; 0x3f
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <Reset_IPCC+0x40>)
 8001348:	f7ff ff2f 	bl	80011aa <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800134c:	213f      	movs	r1, #63	; 0x3f
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <Reset_IPCC+0x40>)
 8001350:	f7ff ff1a 	bl	8001188 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001354:	213f      	movs	r1, #63	; 0x3f
 8001356:	4802      	ldr	r0, [pc, #8]	; (8001360 <Reset_IPCC+0x40>)
 8001358:	f7ff ff39 	bl	80011ce <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800135c:	bf00      	nop
}
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58000c00 	.word	0x58000c00

08001364 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800136a:	2000      	movs	r0, #0
 800136c:	f009 fe94 	bl	800b098 <OTP_Read>
 8001370:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	799b      	ldrb	r3, [r3, #6]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe41 	bl	8001004 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001382:	bf00      	nop
 8001384:	bf00      	nop
}
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <System_Init>:

static void System_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001390:	f7ff ff98 	bl	80012c4 <Init_Smps>

  Init_Exti();
 8001394:	f7ff ff9d 	bl	80012d2 <Init_Exti>

  Init_Rtc();
 8001398:	f000 f802 	bl	80013a0 <Init_Rtc>

  return;
 800139c:	bf00      	nop
}
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <Init_Rtc+0x1c>)
 80013a6:	f7ff ff4c 	bl	8001242 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <Init_Rtc+0x1c>)
 80013ae:	f7ff ff58 	bl	8001262 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80013b2:	4802      	ldr	r0, [pc, #8]	; (80013bc <Init_Rtc+0x1c>)
 80013b4:	f7ff ff38 	bl	8001228 <LL_RTC_EnableWriteProtection>

  return;
 80013b8:	bf00      	nop
}
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40002800 	.word	0x40002800

080013c0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80013c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013c8:	f7ff fe3a 	bl	8001040 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80013cc:	f00a fc36 	bl	800bc3c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80013d0:	2004      	movs	r0, #4
 80013d2:	f7ff fded 	bl	8000fb0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80013d6:	bf00      	nop
}
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80013e2:	f009 fcad 	bl	800ad40 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <appe_Tl_Init+0x50>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	2004      	movs	r0, #4
 80013ec:	f00a fd64 	bl	800beb8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <appe_Tl_Init+0x54>)
 80013f2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <appe_Tl_Init+0x58>)
 80013f6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	480e      	ldr	r0, [pc, #56]	; (8001438 <appe_Tl_Init+0x5c>)
 80013fe:	f009 fb65 	bl	800aacc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <appe_Tl_Init+0x60>)
 8001404:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <appe_Tl_Init+0x64>)
 8001408:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <appe_Tl_Init+0x68>)
 800140c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800140e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001412:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f009 fd61 	bl	800aee0 <TL_MM_Init>

  TL_Enable();
 800141e:	f009 fc89 	bl	800ad34 <TL_Enable>

  return;
 8001422:	bf00      	nop
}
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800ab05 	.word	0x0800ab05
 8001430:	200005e4 	.word	0x200005e4
 8001434:	08001449 	.word	0x08001449
 8001438:	08001461 	.word	0x08001461
 800143c:	200007fc 	.word	0x200007fc
 8001440:	200006f0 	.word	0x200006f0
 8001444:	200000a8 	.word	0x200000a8

08001448 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001452:	bf00      	nop
}
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	330b      	adds	r3, #11
 800146e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800147a:	2b07      	cmp	r3, #7
 800147c:	d81f      	bhi.n	80014be <APPE_SysUserEvtRx+0x5e>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <APPE_SysUserEvtRx+0x24>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014a5 	.word	0x080014a5
 8001488:	080014b7 	.word	0x080014b7
 800148c:	080014bf 	.word	0x080014bf
 8001490:	080014bf 	.word	0x080014bf
 8001494:	080014bf 	.word	0x080014bf
 8001498:	080014bf 	.word	0x080014bf
 800149c:	080014bf 	.word	0x080014bf
 80014a0:	080014bf 	.word	0x080014bf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4618      	mov	r0, r3
 80014aa:	f009 f8cb 	bl	800a644 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f81b 	bl	80014ea <APPE_SysEvtReadyProcessing>
    break;
 80014b4:	e004      	b.n	80014c0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f806 	bl	80014c8 <APPE_SysEvtError>
    break;
 80014bc:	e000      	b.n	80014c0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80014be:	bf00      	nop
  }

  return;
 80014c0:	bf00      	nop
}
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	330b      	adds	r3, #11
 80014d6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3302      	adds	r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014de:	bf00      	nop
}
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b08a      	sub	sp, #40	; 0x28
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	330b      	adds	r3, #11
 800150e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3302      	adds	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d11d      	bne.n	800155a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800151e:	f7ff fd2b 	bl	8000f78 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001522:	230f      	movs	r3, #15
 8001524:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001526:	237f      	movs	r3, #127	; 0x7f
 8001528:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800152a:	f7ff fe0d 	bl	8001148 <LL_DBGMCU_GetRevisionID>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	b29b      	uxth	r3, r3
 8001534:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001536:	f7ff fdf9 	bl	800112c <LL_DBGMCU_GetDeviceID>
 800153a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	b29b      	uxth	r3, r3
 8001540:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4618      	mov	r0, r3
 8001548:	f009 f866 	bl	800a618 <SHCI_C2_Config>

    APP_BLE_Init();
 800154c:	f009 feae 	bl	800b2ac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001550:	2100      	movs	r1, #0
 8001552:	2001      	movs	r0, #1
 8001554:	f00a fb84 	bl	800bc60 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001558:	e007      	b.n	800156a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d103      	bne.n	800156a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
  return;
 8001568:	bf00      	nop
 800156a:	bf00      	nop
}
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001576:	f04f 30ff 	mov.w	r0, #4294967295
 800157a:	f00a fba1 	bl	800bcc0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001586:	bf00      	nop
}
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800159a:	f04f 30ff 	mov.w	r0, #4294967295
 800159e:	f00a fb8f 	bl	800bcc0 <UTIL_SEQ_Run>

  return;
 80015a2:	bf00      	nop
}
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	2004      	movs	r0, #4
 80015b6:	f00a fca1 	bl	800befc <UTIL_SEQ_SetTask>
  return;
 80015ba:	bf00      	nop
}
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015ca:	2002      	movs	r0, #2
 80015cc:	f00a fd02 	bl	800bfd4 <UTIL_SEQ_SetEvt>
  return;
 80015d0:	bf00      	nop
}
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015e0:	2002      	movs	r0, #2
 80015e2:	f00a fd17 	bl	800c014 <UTIL_SEQ_WaitEvt>
  return;
 80015e6:	bf00      	nop
}
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <DRV_CANFDSPI_Reset+0x3c>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <DRV_CANFDSPI_Reset+0x3c>)
 8001606:	2200      	movs	r2, #0
 8001608:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	2264      	movs	r2, #100	; 0x64
 800160e:	9200      	str	r2, [sp, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <DRV_CANFDSPI_Reset+0x40>)
 8001612:	4906      	ldr	r1, [pc, #24]	; (800162c <DRV_CANFDSPI_Reset+0x3c>)
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <DRV_CANFDSPI_Reset+0x44>)
 8001616:	f006 fba4 	bl	8007d62 <HAL_SPI_TransmitReceive>
 800161a:	4603      	mov	r3, r0
 800161c:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800161e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000a4c 	.word	0x20000a4c
 8001630:	20000aac 	.word	0x20000aac
 8001634:	20000c18 	.word	0x20000c18

08001638 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	4603      	mov	r3, r0
 8001640:	603a      	str	r2, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	460b      	mov	r3, r1
 8001646:	80bb      	strh	r3, [r7, #4]
    uint16_t spiTransferSize = 3;
 8001648:	2303      	movs	r3, #3
 800164a:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3330      	adds	r3, #48	; 0x30
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <DRV_CANFDSPI_ReadByte+0x60>)
 8001660:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <DRV_CANFDSPI_ReadByte+0x60>)
 8001668:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = 0;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <DRV_CANFDSPI_ReadByte+0x60>)
 800166c:	2200      	movs	r2, #0
 800166e:	709a      	strb	r2, [r3, #2]

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	2264      	movs	r2, #100	; 0x64
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <DRV_CANFDSPI_ReadByte+0x64>)
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <DRV_CANFDSPI_ReadByte+0x60>)
 800167a:	4809      	ldr	r0, [pc, #36]	; (80016a0 <DRV_CANFDSPI_ReadByte+0x68>)
 800167c:	f006 fb71 	bl	8007d62 <HAL_SPI_TransmitReceive>
 8001680:	4603      	mov	r3, r0
 8001682:	737b      	strb	r3, [r7, #13]

    // Update data
    *rxd = spiReceiveBuffer[2];
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <DRV_CANFDSPI_ReadByte+0x64>)
 8001686:	789a      	ldrb	r2, [r3, #2]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800168c:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000a4c 	.word	0x20000a4c
 800169c:	20000aac 	.word	0x20000aac
 80016a0:	20000c18 	.word	0x20000c18

080016a4 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	460b      	mov	r3, r1
 80016b0:	80bb      	strh	r3, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	71bb      	strb	r3, [r7, #6]
    uint16_t spiTransferSize = 3;
 80016b6:	2303      	movs	r3, #3
 80016b8:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3320      	adds	r3, #32
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <DRV_CANFDSPI_WriteByte+0x5c>)
 80016ce:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <DRV_CANFDSPI_WriteByte+0x5c>)
 80016d6:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = txd;
 80016d8:	4a09      	ldr	r2, [pc, #36]	; (8001700 <DRV_CANFDSPI_WriteByte+0x5c>)
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	7093      	strb	r3, [r2, #2]

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	2264      	movs	r2, #100	; 0x64
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <DRV_CANFDSPI_WriteByte+0x60>)
 80016e6:	4906      	ldr	r1, [pc, #24]	; (8001700 <DRV_CANFDSPI_WriteByte+0x5c>)
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <DRV_CANFDSPI_WriteByte+0x64>)
 80016ea:	f006 fb3a 	bl	8007d62 <HAL_SPI_TransmitReceive>
 80016ee:	4603      	mov	r3, r0
 80016f0:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80016f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000a4c 	.word	0x20000a4c
 8001704:	20000aac 	.word	0x20000aac
 8001708:	20000c18 	.word	0x20000c18

0800170c <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	4603      	mov	r3, r0
 8001714:	603a      	str	r2, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	460b      	mov	r3, r1
 800171a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 6;
 800171c:	2306      	movs	r3, #6
 800171e:	82bb      	strh	r3, [r7, #20]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3330      	adds	r3, #48	; 0x30
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <DRV_CANFDSPI_ReadWord+0x94>)
 8001734:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <DRV_CANFDSPI_ReadWord+0x94>)
 800173c:	705a      	strb	r2, [r3, #1]

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800173e:	8abb      	ldrh	r3, [r7, #20]
 8001740:	2264      	movs	r2, #100	; 0x64
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <DRV_CANFDSPI_ReadWord+0x98>)
 8001746:	4916      	ldr	r1, [pc, #88]	; (80017a0 <DRV_CANFDSPI_ReadWord+0x94>)
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <DRV_CANFDSPI_ReadWord+0x9c>)
 800174a:	f006 fb0a 	bl	8007d62 <HAL_SPI_TransmitReceive>
 800174e:	4603      	mov	r3, r0
 8001750:	74fb      	strb	r3, [r7, #19]
    if (spiTransferError != HAL_OK) {
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <DRV_CANFDSPI_ReadWord+0x52>
        return spiTransferError;
 8001758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800175c:	e01c      	b.n	8001798 <DRV_CANFDSPI_ReadWord+0x8c>
    }

    // Update data
    *rxd = 0;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
    for (i = 2; i < 6; i++) {
 8001764:	2302      	movs	r3, #2
 8001766:	75fb      	strb	r3, [r7, #23]
 8001768:	e011      	b.n	800178e <DRV_CANFDSPI_ReadWord+0x82>
        x = (uint32_t) spiReceiveBuffer[i];
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <DRV_CANFDSPI_ReadWord+0x98>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	60fb      	str	r3, [r7, #12]
        *rxd += x << ((i - 2)*8);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	3b02      	subs	r3, #2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	441a      	add	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]
    for (i = 2; i < 6; i++) {
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	3301      	adds	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d9ea      	bls.n	800176a <DRV_CANFDSPI_ReadWord+0x5e>
    }

    return spiTransferError;
 8001794:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000a4c 	.word	0x20000a4c
 80017a4:	20000aac 	.word	0x20000aac
 80017a8:	20000c18 	.word	0x20000c18

080017ac <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	4603      	mov	r3, r0
 80017b4:	603a      	str	r2, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	460b      	mov	r3, r1
 80017ba:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 80017bc:	2306      	movs	r3, #6
 80017be:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3320      	adds	r3, #32
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <DRV_CANFDSPI_WriteWord+0x78>)
 80017d4:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <DRV_CANFDSPI_WriteWord+0x78>)
 80017dc:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e00b      	b.n	80017fc <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3302      	adds	r3, #2
 80017f0:	b2d1      	uxtb	r1, r2
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <DRV_CANFDSPI_WriteWord+0x78>)
 80017f4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	3301      	adds	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d9f0      	bls.n	80017e4 <DRV_CANFDSPI_WriteWord+0x38>
    }

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001802:	89bb      	ldrh	r3, [r7, #12]
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <DRV_CANFDSPI_WriteWord+0x7c>)
 800180a:	4906      	ldr	r1, [pc, #24]	; (8001824 <DRV_CANFDSPI_WriteWord+0x78>)
 800180c:	4807      	ldr	r0, [pc, #28]	; (800182c <DRV_CANFDSPI_WriteWord+0x80>)
 800180e:	f006 faa8 	bl	8007d62 <HAL_SPI_TransmitReceive>
 8001812:	4603      	mov	r3, r0
 8001814:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8001816:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000a4c 	.word	0x20000a4c
 8001828:	20000aac 	.word	0x20000aac
 800182c:	20000c18 	.word	0x20000c18

08001830 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	603a      	str	r2, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	460b      	mov	r3, r1
 800183e:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 8001840:	2304      	movs	r3, #4
 8001842:	82bb      	strh	r3, [r7, #20]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001844:	88bb      	ldrh	r3, [r7, #4]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29b      	uxth	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3330      	adds	r3, #48	; 0x30
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <DRV_CANFDSPI_ReadHalfWord+0x98>)
 8001858:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <DRV_CANFDSPI_ReadHalfWord+0x98>)
 8001860:	705a      	strb	r2, [r3, #1]

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001862:	8abb      	ldrh	r3, [r7, #20]
 8001864:	2264      	movs	r2, #100	; 0x64
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <DRV_CANFDSPI_ReadHalfWord+0x9c>)
 800186a:	4917      	ldr	r1, [pc, #92]	; (80018c8 <DRV_CANFDSPI_ReadHalfWord+0x98>)
 800186c:	4818      	ldr	r0, [pc, #96]	; (80018d0 <DRV_CANFDSPI_ReadHalfWord+0xa0>)
 800186e:	f006 fa78 	bl	8007d62 <HAL_SPI_TransmitReceive>
 8001872:	4603      	mov	r3, r0
 8001874:	74fb      	strb	r3, [r7, #19]
    if (spiTransferError != HAL_OK) {
 8001876:	7cfb      	ldrb	r3, [r7, #19]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <DRV_CANFDSPI_ReadHalfWord+0x52>
        return spiTransferError;
 800187c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001880:	e01e      	b.n	80018c0 <DRV_CANFDSPI_ReadHalfWord+0x90>
    }

    // Update data
    *rxd = 0;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001888:	2302      	movs	r3, #2
 800188a:	75fb      	strb	r3, [r7, #23]
 800188c:	e013      	b.n	80018b6 <DRV_CANFDSPI_ReadHalfWord+0x86>
        x = (uint32_t) spiReceiveBuffer[i];
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <DRV_CANFDSPI_ReadHalfWord+0x9c>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	60fb      	str	r3, [r7, #12]
        *rxd += x << ((i - 2)*8);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	3b02      	subs	r3, #2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	3301      	adds	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d9e8      	bls.n	800188e <DRV_CANFDSPI_ReadHalfWord+0x5e>
    }

    return spiTransferError;
 80018bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000a4c 	.word	0x20000a4c
 80018cc:	20000aac 	.word	0x20000aac
 80018d0:	20000c18 	.word	0x20000c18

080018d4 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	460b      	mov	r3, r1
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 80018e6:	2304      	movs	r3, #4
 80018e8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3320      	adds	r3, #32
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <DRV_CANFDSPI_WriteHalfWord+0x78>)
 80018fe:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <DRV_CANFDSPI_WriteHalfWord+0x78>)
 8001906:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e00b      	b.n	8001926 <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	411a      	asrs	r2, r3
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	3302      	adds	r3, #2
 800191a:	b2d1      	uxtb	r1, r2
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <DRV_CANFDSPI_WriteHalfWord+0x78>)
 800191e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	3301      	adds	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d9f0      	bls.n	800190e <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	2264      	movs	r2, #100	; 0x64
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	4a07      	ldr	r2, [pc, #28]	; (8001950 <DRV_CANFDSPI_WriteHalfWord+0x7c>)
 8001934:	4905      	ldr	r1, [pc, #20]	; (800194c <DRV_CANFDSPI_WriteHalfWord+0x78>)
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <DRV_CANFDSPI_WriteHalfWord+0x80>)
 8001938:	f006 fa13 	bl	8007d62 <HAL_SPI_TransmitReceive>
 800193c:	4603      	mov	r3, r0
 800193e:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8001940:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000a4c 	.word	0x20000a4c
 8001950:	20000aac 	.word	0x20000aac
 8001954:	20000c18 	.word	0x20000c18

08001958 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af02      	add	r7, sp, #8
 800195e:	60ba      	str	r2, [r7, #8]
 8001960:	461a      	mov	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	460b      	mov	r3, r1
 8001968:	81bb      	strh	r3, [r7, #12]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	3302      	adds	r3, #2
 8001972:	82bb      	strh	r3, [r7, #20]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001974:	8abb      	ldrh	r3, [r7, #20]
 8001976:	2b60      	cmp	r3, #96	; 0x60
 8001978:	d902      	bls.n	8001980 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e03a      	b.n	80019f6 <DRV_CANFDSPI_ReadByteArray+0x9e>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001980:	89bb      	ldrh	r3, [r7, #12]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	b29b      	uxth	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3330      	adds	r3, #48	; 0x30
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <DRV_CANFDSPI_ReadByteArray+0xa8>)
 8001994:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001996:	89bb      	ldrh	r3, [r7, #12]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <DRV_CANFDSPI_ReadByteArray+0xa8>)
 800199c:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800199e:	2302      	movs	r3, #2
 80019a0:	82fb      	strh	r3, [r7, #22]
 80019a2:	e006      	b.n	80019b2 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 80019a4:	8afb      	ldrh	r3, [r7, #22]
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <DRV_CANFDSPI_ReadByteArray+0xa8>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80019ac:	8afb      	ldrh	r3, [r7, #22]
 80019ae:	3301      	adds	r3, #1
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	8afa      	ldrh	r2, [r7, #22]
 80019b4:	8abb      	ldrh	r3, [r7, #20]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3f4      	bcc.n	80019a4 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80019ba:	8abb      	ldrh	r3, [r7, #20]
 80019bc:	2264      	movs	r2, #100	; 0x64
 80019be:	9200      	str	r2, [sp, #0]
 80019c0:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <DRV_CANFDSPI_ReadByteArray+0xac>)
 80019c2:	490f      	ldr	r1, [pc, #60]	; (8001a00 <DRV_CANFDSPI_ReadByteArray+0xa8>)
 80019c4:	4810      	ldr	r0, [pc, #64]	; (8001a08 <DRV_CANFDSPI_ReadByteArray+0xb0>)
 80019c6:	f006 f9cc 	bl	8007d62 <HAL_SPI_TransmitReceive>
 80019ca:	4603      	mov	r3, r0
 80019cc:	74fb      	strb	r3, [r7, #19]

    // Update data
    for (i = 0; i < nBytes; i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	82fb      	strh	r3, [r7, #22]
 80019d2:	e00a      	b.n	80019ea <DRV_CANFDSPI_ReadByteArray+0x92>
        rxd[i] = spiReceiveBuffer[i + 2];
 80019d4:	8afb      	ldrh	r3, [r7, #22]
 80019d6:	1c9a      	adds	r2, r3, #2
 80019d8:	8afb      	ldrh	r3, [r7, #22]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	440b      	add	r3, r1
 80019de:	4909      	ldr	r1, [pc, #36]	; (8001a04 <DRV_CANFDSPI_ReadByteArray+0xac>)
 80019e0:	5c8a      	ldrb	r2, [r1, r2]
 80019e2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 80019e4:	8afb      	ldrh	r3, [r7, #22]
 80019e6:	3301      	adds	r3, #1
 80019e8:	82fb      	strh	r3, [r7, #22]
 80019ea:	8afa      	ldrh	r2, [r7, #22]
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3f0      	bcc.n	80019d4 <DRV_CANFDSPI_ReadByteArray+0x7c>
    }

    return spiTransferError;
 80019f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000a4c 	.word	0x20000a4c
 8001a04:	20000aac 	.word	0x20000aac
 8001a08:	20000c18 	.word	0x20000c18

08001a0c <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	81bb      	strh	r3, [r7, #12]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	3302      	adds	r3, #2
 8001a26:	82bb      	strh	r3, [r7, #20]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001a28:	8abb      	ldrh	r3, [r7, #20]
 8001a2a:	2b60      	cmp	r3, #96	; 0x60
 8001a2c:	d902      	bls.n	8001a34 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e02c      	b.n	8001a8e <DRV_CANFDSPI_WriteByteArray+0x82>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3320      	adds	r3, #32
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <DRV_CANFDSPI_WriteByteArray+0x8c>)
 8001a48:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <DRV_CANFDSPI_WriteByteArray+0x8c>)
 8001a50:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	82fb      	strh	r3, [r7, #22]
 8001a56:	e00a      	b.n	8001a6e <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 8001a58:	8afb      	ldrh	r3, [r7, #22]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	441a      	add	r2, r3
 8001a5e:	8afb      	ldrh	r3, [r7, #22]
 8001a60:	3302      	adds	r3, #2
 8001a62:	7811      	ldrb	r1, [r2, #0]
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <DRV_CANFDSPI_WriteByteArray+0x8c>)
 8001a66:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	82fb      	strh	r3, [r7, #22]
 8001a6e:	8afa      	ldrh	r2, [r7, #22]
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3f0      	bcc.n	8001a58 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a76:	8abb      	ldrh	r3, [r7, #20]
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <DRV_CANFDSPI_WriteByteArray+0x90>)
 8001a7e:	4906      	ldr	r1, [pc, #24]	; (8001a98 <DRV_CANFDSPI_WriteByteArray+0x8c>)
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <DRV_CANFDSPI_WriteByteArray+0x94>)
 8001a82:	f006 f96e 	bl	8007d62 <HAL_SPI_TransmitReceive>
 8001a86:	4603      	mov	r3, r0
 8001a88:	74fb      	strb	r3, [r7, #19]

    return spiTransferError;
 8001a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000a4c 	.word	0x20000a4c
 8001a9c:	20000aac 	.word	0x20000aac
 8001aa0:	20000c18 	.word	0x20000c18

08001aa4 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	81bb      	strh	r3, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	833b      	strh	r3, [r7, #24]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001ac4:	8b3b      	ldrh	r3, [r7, #24]
 8001ac6:	2b60      	cmp	r3, #96	; 0x60
 8001ac8:	d902      	bls.n	8001ad0 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e056      	b.n	8001b7e <DRV_CANFDSPI_ReadWordArray+0xda>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001ad0:	89bb      	ldrh	r3, [r7, #12]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3330      	adds	r3, #48	; 0x30
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <DRV_CANFDSPI_ReadWordArray+0xe4>)
 8001ae4:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <DRV_CANFDSPI_ReadWordArray+0xe4>)
 8001aec:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001aee:	2302      	movs	r3, #2
 8001af0:	83fb      	strh	r3, [r7, #30]
 8001af2:	e006      	b.n	8001b02 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <DRV_CANFDSPI_ReadWordArray+0xe4>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001afc:	8bfb      	ldrh	r3, [r7, #30]
 8001afe:	3301      	adds	r3, #1
 8001b00:	83fb      	strh	r3, [r7, #30]
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	8b3b      	ldrh	r3, [r7, #24]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3f4      	bcc.n	8001af4 <DRV_CANFDSPI_ReadWordArray+0x50>
    }

    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b0a:	8b3b      	ldrh	r3, [r7, #24]
 8001b0c:	2264      	movs	r2, #100	; 0x64
 8001b0e:	9200      	str	r2, [sp, #0]
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <DRV_CANFDSPI_ReadWordArray+0xe8>)
 8001b12:	491d      	ldr	r1, [pc, #116]	; (8001b88 <DRV_CANFDSPI_ReadWordArray+0xe4>)
 8001b14:	481e      	ldr	r0, [pc, #120]	; (8001b90 <DRV_CANFDSPI_ReadWordArray+0xec>)
 8001b16:	f006 f924 	bl	8007d62 <HAL_SPI_TransmitReceive>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <DRV_CANFDSPI_ReadWordArray+0x86>
        return spiTransferError;
 8001b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b28:	e029      	b.n	8001b7e <DRV_CANFDSPI_ReadWordArray+0xda>
    }

    // Convert Byte array to Word array
    n = 2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	83fb      	strh	r3, [r7, #30]
 8001b32:	e01e      	b.n	8001b72 <DRV_CANFDSPI_ReadWordArray+0xce>
        w.word = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	83bb      	strh	r3, [r7, #28]
 8001b3c:	e00d      	b.n	8001b5a <DRV_CANFDSPI_ReadWordArray+0xb6>
            w.byte[j] = spiReceiveBuffer[n];
 8001b3e:	8b7a      	ldrh	r2, [r7, #26]
 8001b40:	8bbb      	ldrh	r3, [r7, #28]
 8001b42:	4912      	ldr	r1, [pc, #72]	; (8001b8c <DRV_CANFDSPI_ReadWordArray+0xe8>)
 8001b44:	5c8a      	ldrb	r2, [r1, r2]
 8001b46:	3320      	adds	r3, #32
 8001b48:	443b      	add	r3, r7
 8001b4a:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001b4e:	8bbb      	ldrh	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	83bb      	strh	r3, [r7, #28]
 8001b54:	8b7b      	ldrh	r3, [r7, #26]
 8001b56:	3301      	adds	r3, #1
 8001b58:	837b      	strh	r3, [r7, #26]
 8001b5a:	8bbb      	ldrh	r3, [r7, #28]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d9ee      	bls.n	8001b3e <DRV_CANFDSPI_ReadWordArray+0x9a>
        }
        rxd[i] = w.word;
 8001b60:	8bfb      	ldrh	r3, [r7, #30]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	4413      	add	r3, r2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001b6c:	8bfb      	ldrh	r3, [r7, #30]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	83fb      	strh	r3, [r7, #30]
 8001b72:	8bfa      	ldrh	r2, [r7, #30]
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3dc      	bcc.n	8001b34 <DRV_CANFDSPI_ReadWordArray+0x90>
    }

    return spiTransferError;
 8001b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000a4c 	.word	0x20000a4c
 8001b8c:	20000aac 	.word	0x20000aac
 8001b90:	20000c18 	.word	0x20000c18

08001b94 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <DRV_CANFDSPI_Configure+0x118>)
 8001ba6:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	7a3b      	ldrb	r3, [r7, #8]
 8001bb4:	f362 0304 	bfi	r3, r2, #0, #5
 8001bb8:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	7a3b      	ldrb	r3, [r7, #8]
 8001bc6:	f362 1345 	bfi	r3, r2, #5, #1
 8001bca:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	7a3b      	ldrb	r3, [r7, #8]
 8001bd8:	f362 1386 	bfi	r3, r2, #6, #1
 8001bdc:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	7a7b      	ldrb	r3, [r7, #9]
 8001bea:	f362 0300 	bfi	r3, r2, #0, #1
 8001bee:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	7a7b      	ldrb	r3, [r7, #9]
 8001bfc:	f362 0342 	bfi	r3, r2, #1, #2
 8001c00:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	f362 1304 	bfi	r3, r2, #4, #1
 8001c12:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	785b      	ldrb	r3, [r3, #1]
 8001c18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7abb      	ldrb	r3, [r7, #10]
 8001c20:	f362 0300 	bfi	r3, r2, #0, #1
 8001c24:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	7abb      	ldrb	r3, [r7, #10]
 8001c32:	f362 0341 	bfi	r3, r2, #1, #1
 8001c36:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	7abb      	ldrb	r3, [r7, #10]
 8001c44:	f362 0382 	bfi	r3, r2, #2, #1
 8001c48:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	7abb      	ldrb	r3, [r7, #10]
 8001c56:	f362 03c3 	bfi	r3, r2, #3, #1
 8001c5a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	7abb      	ldrb	r3, [r7, #10]
 8001c68:	f362 1304 	bfi	r3, r2, #4, #1
 8001c6c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	789b      	ldrb	r3, [r3, #2]
 8001c72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f362 1307 	bfi	r3, r2, #4, #4
 8001c7e:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fd90 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	e001      	b.n	8001ca2 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	04980760 	.word	0x04980760

08001cb0 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001cba:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001cc2:	b2d9      	uxtb	r1, r3
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	7813      	ldrb	r3, [r2, #0]
 8001cc8:	f361 0304 	bfi	r3, r1, #0, #5
 8001ccc:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001cce:	7b3b      	ldrb	r3, [r7, #12]
 8001cd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cd4:	b2d9      	uxtb	r1, r3
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	7813      	ldrb	r3, [r2, #0]
 8001cda:	f361 1345 	bfi	r3, r1, #5, #1
 8001cde:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001ce0:	7b3b      	ldrb	r3, [r7, #12]
 8001ce2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ce6:	b2d9      	uxtb	r1, r3
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	7813      	ldrb	r3, [r2, #0]
 8001cec:	f361 1386 	bfi	r3, r1, #6, #1
 8001cf0:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cf8:	b2d9      	uxtb	r1, r3
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	7813      	ldrb	r3, [r2, #0]
 8001cfe:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d02:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001d0a:	b2d9      	uxtb	r1, r3
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	7853      	ldrb	r3, [r2, #1]
 8001d10:	f361 0301 	bfi	r3, r1, #0, #2
 8001d14:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001d16:	7b7b      	ldrb	r3, [r7, #13]
 8001d18:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d1c:	b2d9      	uxtb	r1, r3
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	7853      	ldrb	r3, [r2, #1]
 8001d22:	f361 0382 	bfi	r3, r1, #2, #1
 8001d26:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d2e:	b2d9      	uxtb	r1, r3
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	7853      	ldrb	r3, [r2, #1]
 8001d34:	f361 03c3 	bfi	r3, r1, #3, #1
 8001d38:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001d3a:	7bbb      	ldrb	r3, [r7, #14]
 8001d3c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d40:	b2d9      	uxtb	r1, r3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7853      	ldrb	r3, [r2, #1]
 8001d46:	f361 1304 	bfi	r3, r1, #4, #1
 8001d4a:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	7853      	ldrb	r3, [r2, #1]
 8001d58:	f361 1345 	bfi	r3, r1, #5, #1
 8001d5c:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	7853      	ldrb	r3, [r2, #1]
 8001d6a:	f361 1386 	bfi	r3, r1, #6, #1
 8001d6e:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d76:	b2d9      	uxtb	r1, r3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	7853      	ldrb	r3, [r2, #1]
 8001d7c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d80:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d88:	b2d9      	uxtb	r1, r3
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	7893      	ldrb	r3, [r2, #2]
 8001d8e:	f361 0303 	bfi	r3, r1, #0, #4
 8001d92:	7093      	strb	r3, [r2, #2]

    return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	04980760 	.word	0x04980760

08001da8 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001dc0:	f107 020e 	add.w	r2, r7, #14
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fc35 	bl	8001638 <DRV_CANFDSPI_ReadByte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e01a      	b.n	8001e16 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001dea:	7bba      	ldrb	r2, [r7, #14]
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001df4:	7bba      	ldrb	r2, [r7, #14]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2103      	movs	r1, #3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fc52 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001e0c:	f06f 0301 	mvn.w	r3, #1
 8001e10:	e001      	b.n	8001e16 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	603a      	str	r2, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001e3a:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001e3c:	7a3b      	ldrb	r3, [r7, #8]
 8001e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e42:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	f362 0304 	bfi	r3, r2, #0, #5
 8001e54:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	f362 1347 	bfi	r3, r2, #5, #3
 8001e66:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	7abb      	ldrb	r3, [r7, #10]
 8001e74:	f362 1346 	bfi	r3, r2, #5, #2
 8001e78:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	7abb      	ldrb	r3, [r7, #10]
 8001e86:	f362 0304 	bfi	r3, r2, #0, #5
 8001e8a:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	7a3b      	ldrb	r3, [r7, #8]
 8001e98:	f362 1386 	bfi	r3, r2, #6, #1
 8001e9c:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	0052      	lsls	r2, r2, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3350      	adds	r3, #80	; 0x50
 8001eae:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	89b9      	ldrh	r1, [r7, #12]
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc78 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	00600400 	.word	0x00600400

08001ed0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001eda:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ee2:	b2d9      	uxtb	r1, r3
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	7813      	ldrb	r3, [r2, #0]
 8001ee8:	f361 0300 	bfi	r3, r1, #0, #1
 8001eec:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001eee:	7bbb      	ldrb	r3, [r7, #14]
 8001ef0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ef4:	b2d9      	uxtb	r1, r3
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	7813      	ldrb	r3, [r2, #0]
 8001efa:	f361 0345 	bfi	r3, r1, #1, #5
 8001efe:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	7813      	ldrb	r3, [r2, #0]
 8001f0c:	f361 1387 	bfi	r3, r1, #6, #2
 8001f10:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f18:	b2d9      	uxtb	r1, r3
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	7853      	ldrb	r3, [r2, #1]
 8001f1e:	f361 0304 	bfi	r3, r1, #0, #5
 8001f22:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	7853      	ldrb	r3, [r2, #1]
 8001f30:	f361 1347 	bfi	r3, r1, #5, #3
 8001f34:	7053      	strb	r3, [r2, #1]

    return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	00600400 	.word	0x00600400

08001f48 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0a0      	sub	sp, #128	; 0x80
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60ba      	str	r2, [r7, #8]
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4603      	mov	r3, r0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	460b      	mov	r3, r1
 8001f58:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3350      	adds	r3, #80	; 0x50
 8001f70:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001f74:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f78:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001f7c:	7bf8      	ldrb	r0, [r7, #15]
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f7ff fd90 	bl	8001aa4 <DRV_CANFDSPI_ReadWordArray>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f8a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e0c5      	b.n	8002124 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8001f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8001f9c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8001faa:	f06f 0301 	mvn.w	r3, #1
 8001fae:	e0b9      	b.n	8002124 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	791b      	ldrb	r3, [r3, #4]
 8001fb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fbd6 	bl	800376c <DRV_CANFDSPI_DlcToDataBytes>
 8001fc0:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8001fc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d202      	bcs.n	8001fd2 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8001fcc:	f06f 0302 	mvn.w	r3, #2
 8001fd0:	e0a8      	b.n	8002124 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8001fda:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8001fe8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	789b      	ldrb	r3, [r3, #2]
 8002004:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	78db      	ldrb	r3, [r3, #3]
 800200a:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	791b      	ldrb	r3, [r3, #4]
 8002010:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	795b      	ldrb	r3, [r3, #5]
 8002016:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	799b      	ldrb	r3, [r3, #6]
 800201c:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	79db      	ldrb	r3, [r3, #7]
 8002022:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8002024:	2300      	movs	r3, #0
 8002026:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800202a:	e010      	b.n	800204e <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 800202c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	441a      	add	r2, r3
 8002034:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002038:	3308      	adds	r3, #8
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	3380      	adds	r3, #128	; 0x80
 800203e:	443b      	add	r3, r7
 8002040:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8002044:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002048:	3301      	adds	r3, #1
 800204a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800204e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002052:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002056:	429a      	cmp	r2, r3
 8002058:	d8e8      	bhi.n	800202c <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8002066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02b      	beq.n	80020ca <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8002072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002076:	b29b      	uxth	r3, r3
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	b29b      	uxth	r3, r3
 800207e:	f1c3 0304 	rsb	r3, r3, #4
 8002082:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8002086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3308      	adds	r3, #8
 800208e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8002092:	2300      	movs	r3, #0
 8002094:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002098:	e010      	b.n	80020bc <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 800209a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800209e:	f103 0208 	add.w	r2, r3, #8
 80020a2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80020a6:	4413      	add	r3, r2
 80020a8:	3380      	adds	r3, #128	; 0x80
 80020aa:	443b      	add	r3, r7
 80020ac:	2200      	movs	r2, #0
 80020ae:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 80020b2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80020b6:	3301      	adds	r3, #1
 80020b8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020bc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d8e7      	bhi.n	800209a <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80020ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80020d4:	4413      	add	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3308      	adds	r3, #8
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f107 0210 	add.w	r2, r7, #16
 80020e0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80020e4:	7bf8      	ldrb	r0, [r7, #15]
 80020e6:	f7ff fc91 	bl	8001a0c <DRV_CANFDSPI_WriteByteArray>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 80020f0:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 80020f8:	f06f 0303 	mvn.w	r3, #3
 80020fc:	e012      	b.n	8002124 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 80020fe:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8002102:	7bb9      	ldrb	r1, [r7, #14]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f810 	bl	800212c <DRV_CANFDSPI_TransmitChannelUpdate>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8002112:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 800211a:	f06f 0304 	mvn.w	r3, #4
 800211e:	e001      	b.n	8002124 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8002120:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8002124:	4618      	mov	r0, r3
 8002126:	3780      	adds	r7, #128	; 0x80
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	460b      	mov	r3, r1
 8002138:	71bb      	strb	r3, [r7, #6]
 800213a:	4613      	mov	r3, r2
 800213c:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	0052      	lsls	r2, r2, #1
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	b29b      	uxth	r3, r3
 8002150:	3351      	adds	r3, #81	; 0x51
 8002152:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8002158:	7a7b      	ldrb	r3, [r7, #9]
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8002160:	797b      	ldrb	r3, [r7, #5]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8002166:	7a7b      	ldrb	r3, [r7, #9]
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800216e:	7a7a      	ldrb	r2, [r7, #9]
 8002170:	89b9      	ldrh	r1, [r7, #12]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fa95 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e001      	b.n	8002190 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 800218c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	603a      	str	r2, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	460b      	mov	r3, r1
 80021a6:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	333e      	adds	r3, #62	; 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	89b9      	ldrh	r1, [r7, #12]
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff faf0 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80021d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	603a      	str	r2, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
 80021e8:	460b      	mov	r3, r1
 80021ea:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	b29b      	uxth	r3, r3
 8002202:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002206:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	89b9      	ldrh	r1, [r7, #12]
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff facc 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	4604      	mov	r4, r0
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4623      	mov	r3, r4
 8002234:	71fb      	strb	r3, [r7, #7]
 8002236:	4603      	mov	r3, r0
 8002238:	71bb      	strb	r3, [r7, #6]
 800223a:	460b      	mov	r3, r1
 800223c:	717b      	strb	r3, [r7, #5]
 800223e:	4613      	mov	r3, r2
 8002240:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 8002246:	793b      	ldrb	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 800224c:	7a3b      	ldrb	r3, [r7, #8]
 800224e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002252:	723b      	strb	r3, [r7, #8]
 8002254:	e003      	b.n	800225e <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 8002256:	7a3b      	ldrb	r3, [r7, #8]
 8002258:	f36f 13c7 	bfc	r3, #7, #1
 800225c:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 800225e:	797b      	ldrb	r3, [r7, #5]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	b2da      	uxtb	r2, r3
 8002266:	7a3b      	ldrb	r3, [r7, #8]
 8002268:	f362 0304 	bfi	r3, r2, #0, #5
 800226c:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	b29b      	uxth	r3, r3
 8002272:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002276:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8002278:	7a3a      	ldrb	r2, [r7, #8]
 800227a:	89b9      	ldrh	r1, [r7, #12]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fa10 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 8002284:	4603      	mov	r3, r0
 8002286:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	603a      	str	r2, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	460b      	mov	r3, r1
 80022a2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 80022ac:	79bb      	ldrb	r3, [r7, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 80022b2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80022b6:	e033      	b.n	8002320 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 80022ba:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 80022bc:	7a3b      	ldrb	r3, [r7, #8]
 80022be:	f36f 13c7 	bfc	r3, #7, #1
 80022c2:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	f362 0304 	bfi	r3, r2, #0, #5
 80022d4:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	f362 1347 	bfi	r3, r2, #5, #3
 80022e6:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	7a3b      	ldrb	r3, [r7, #8]
 80022f4:	f362 1345 	bfi	r3, r2, #5, #1
 80022f8:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	0052      	lsls	r2, r2, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	b29b      	uxth	r3, r3
 8002308:	3350      	adds	r3, #80	; 0x50
 800230a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	89b9      	ldrh	r1, [r7, #12]
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fa4a 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	00600400 	.word	0x00600400

0800232c <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 8002336:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800233e:	b2d9      	uxtb	r1, r3
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	7813      	ldrb	r3, [r2, #0]
 8002344:	f361 0345 	bfi	r3, r1, #1, #5
 8002348:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002350:	b2d9      	uxtb	r1, r3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	8813      	ldrh	r3, [r2, #0]
 8002356:	f361 1388 	bfi	r3, r1, #6, #3
 800235a:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 800235c:	7b3b      	ldrb	r3, [r7, #12]
 800235e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002362:	b2d9      	uxtb	r1, r3
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	7813      	ldrb	r3, [r2, #0]
 8002368:	f361 0300 	bfi	r3, r1, #0, #1
 800236c:	7013      	strb	r3, [r2, #0]

    return 0;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	00600400 	.word	0x00600400

08002380 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0a0      	sub	sp, #128	; 0x80
 8002384:	af00      	add	r7, sp, #0
 8002386:	60ba      	str	r2, [r7, #8]
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	4603      	mov	r3, r0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	460b      	mov	r3, r1
 8002390:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80023a4:	7bbb      	ldrb	r3, [r7, #14]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	0052      	lsls	r2, r2, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3350      	adds	r3, #80	; 0x50
 80023b4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 80023b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80023bc:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80023c0:	7bf8      	ldrb	r0, [r7, #15]
 80023c2:	2303      	movs	r3, #3
 80023c4:	f7ff fb6e 	bl	8001aa4 <DRV_CANFDSPI_ReadWordArray>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80023ce:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e0cd      	b.n	8002578 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 80023dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023de:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 80023e0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80023e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 80023ee:	f06f 0301 	mvn.w	r3, #1
 80023f2:	e0c1      	b.n	8002578 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 80023f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f6:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 80023f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fa:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80023fc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	b29b      	uxth	r3, r3
 8002406:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 800240a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800240e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002412:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 8002416:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800241a:	3308      	adds	r3, #8
 800241c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002420:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 800242e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002432:	3304      	adds	r3, #4
 8002434:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 8002438:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 8002446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3304      	adds	r3, #4
 8002452:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 8002456:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800245a:	2b4c      	cmp	r3, #76	; 0x4c
 800245c:	d902      	bls.n	8002464 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 800245e:	234c      	movs	r3, #76	; 0x4c
 8002460:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8002464:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002468:	b29b      	uxth	r3, r3
 800246a:	f107 0214 	add.w	r2, r7, #20
 800246e:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8002472:	7bf8      	ldrb	r0, [r7, #15]
 8002474:	f7ff fa70 	bl	8001958 <DRV_CANFDSPI_ReadByteArray>
 8002478:	4603      	mov	r3, r0
 800247a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800247e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 8002486:	f06f 0302 	mvn.w	r3, #2
 800248a:	e075      	b.n	8002578 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 800248c:	7d3b      	ldrb	r3, [r7, #20]
 800248e:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 8002490:	7d7b      	ldrb	r3, [r7, #21]
 8002492:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8002494:	7dbb      	ldrb	r3, [r7, #22]
 8002496:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 80024a2:	7e3b      	ldrb	r3, [r7, #24]
 80024a4:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 80024a6:	7e7b      	ldrb	r3, [r7, #25]
 80024a8:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 80024aa:	7ebb      	ldrb	r3, [r7, #26]
 80024ac:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 80024ae:	7efb      	ldrb	r3, [r7, #27]
 80024b0:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80024b8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d027      	beq.n	8002516 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 80024c6:	7f3b      	ldrb	r3, [r7, #28]
 80024c8:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 80024ca:	7f7b      	ldrb	r3, [r7, #29]
 80024cc:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 80024ce:	7fbb      	ldrb	r3, [r7, #30]
 80024d0:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80024e2:	e011      	b.n	8002508 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 80024e4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80024e8:	f103 020c 	add.w	r2, r3, #12
 80024ec:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	440b      	add	r3, r1
 80024f4:	3280      	adds	r2, #128	; 0x80
 80024f6:	443a      	add	r2, r7
 80024f8:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80024fc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80024fe:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002502:	3301      	adds	r3, #1
 8002504:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002508:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800250c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002510:	429a      	cmp	r2, r3
 8002512:	d3e7      	bcc.n	80024e4 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8002514:	e01e      	b.n	8002554 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 800251c:	2300      	movs	r3, #0
 800251e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002522:	e011      	b.n	8002548 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8002524:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002528:	f103 0208 	add.w	r2, r3, #8
 800252c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	440b      	add	r3, r1
 8002534:	3280      	adds	r2, #128	; 0x80
 8002536:	443a      	add	r2, r7
 8002538:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 800253c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800253e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002542:	3301      	adds	r3, #1
 8002544:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002548:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800254c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002550:	429a      	cmp	r2, r3
 8002552:	d3e7      	bcc.n	8002524 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8002554:	7bba      	ldrb	r2, [r7, #14]
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f810 	bl	8002580 <DRV_CANFDSPI_ReceiveChannelUpdate>
 8002560:	4603      	mov	r3, r0
 8002562:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8002566:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 800256e:	f06f 0303 	mvn.w	r3, #3
 8002572:	e001      	b.n	8002578 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 8002574:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002578:	4618      	mov	r0, r3
 800257a:	3780      	adds	r7, #128	; 0x80
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	460a      	mov	r2, r1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	4613      	mov	r3, r2
 800258e:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	0052      	lsls	r2, r2, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3351      	adds	r3, #81	; 0x51
 80025ac:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 80025ae:	7a7b      	ldrb	r3, [r7, #9]
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80025b6:	7a7a      	ldrb	r2, [r7, #9]
 80025b8:	89f9      	ldrh	r1, [r7, #14]
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f871 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 80025c2:	4603      	mov	r3, r0
 80025c4:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80025c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	460a      	mov	r2, r1
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	4613      	mov	r3, r2
 80025e0:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 80025ea:	231e      	movs	r3, #30
 80025ec:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	89b9      	ldrh	r1, [r7, #12]
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f918 	bl	8001830 <DRV_CANFDSPI_ReadHalfWord>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	e01b      	b.n	800264a <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	b21a      	sxth	r2, r3
 8002616:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800261a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800261e:	b21b      	sxth	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b21b      	sxth	r3, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002628:	893a      	ldrh	r2, [r7, #8]
 800262a:	89b9      	ldrh	r1, [r7, #12]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f950 	bl	80018d4 <DRV_CANFDSPI_WriteHalfWord>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 8002640:	f06f 0301 	mvn.w	r3, #1
 8002644:	e001      	b.n	800264a <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	603a      	str	r2, [r7, #0]
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	460b      	mov	r3, r1
 8002660:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	0052      	lsls	r2, r2, #1
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	b29b      	uxth	r3, r3
 800267c:	3354      	adds	r3, #84	; 0x54
 800267e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002680:	f107 0208 	add.w	r2, r7, #8
 8002684:	89b9      	ldrh	r1, [r7, #12]
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe ffd5 	bl	8001638 <DRV_CANFDSPI_ReadByte>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e007      	b.n	80026b0 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 80026a0:	7a3b      	ldrb	r3, [r7, #8]
 80026a2:	f003 0317 	and.w	r3, r3, #23
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	460b      	mov	r3, r1
 80026c4:	71bb      	strb	r3, [r7, #6]
 80026c6:	4613      	mov	r3, r2
 80026c8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80026d8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80026dc:	e036      	b.n	800274c <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	0052      	lsls	r2, r2, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3350      	adds	r3, #80	; 0x50
 80026ee:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80026f4:	f107 0208 	add.w	r2, r7, #8
 80026f8:	89b9      	ldrh	r1, [r7, #12]
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe ff9b 	bl	8001638 <DRV_CANFDSPI_ReadByte>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e01b      	b.n	800274c <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8002714:	7a3b      	ldrb	r3, [r7, #8]
 8002716:	b25a      	sxtb	r2, r3
 8002718:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	b25b      	sxtb	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b25b      	sxtb	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 800272a:	7a3a      	ldrb	r2, [r7, #8]
 800272c:	89b9      	ldrh	r1, [r7, #12]
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ffb7 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8002742:	f06f 0301 	mvn.w	r3, #1
 8002746:	e001      	b.n	800274c <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800276c:	2334      	movs	r3, #52	; 0x34
 800276e:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002774:	f107 0210 	add.w	r2, r7, #16
 8002778:	8ab9      	ldrh	r1, [r7, #20]
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe ffc5 	bl	800170c <DRV_CANFDSPI_ReadWord>
 8002782:	4603      	mov	r3, r0
 8002784:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e00d      	b.n	80027b0 <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002794:	7c7a      	ldrb	r2, [r7, #17]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 800279a:	7c3a      	ldrb	r2, [r7, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 80027a0:	7cbb      	ldrb	r3, [r7, #18]
 80027a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80027ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80027ca:	f107 020e 	add.w	r2, r7, #14
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f640 610c 	movw	r1, #3596	; 0xe0c
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe ff2f 	bl	8001638 <DRV_CANFDSPI_ReadByte>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e015      	b.n	8002818 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80027f6:	7bba      	ldrb	r2, [r7, #14]
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f640 610c 	movw	r1, #3596	; 0xe0c
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe ff50 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 8002804:	4603      	mov	r3, r0
 8002806:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8002810:	f06f 0301 	mvn.w	r3, #1
 8002814:	e000      	b.n	8002818 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b090      	sub	sp, #64	; 0x40
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	460a      	mov	r2, r1
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	4613      	mov	r3, r2
 800282e:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002836:	2300      	movs	r3, #0
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283a:	e008      	b.n	800284e <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 800283c:	f107 0208 	add.w	r2, r7, #8
 8002840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002842:	4413      	add	r3, r2
 8002844:	79ba      	ldrb	r2, [r7, #6]
 8002846:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	3301      	adds	r3, #1
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002850:	2b2f      	cmp	r3, #47	; 0x2f
 8002852:	d9f3      	bls.n	800283c <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002858:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 800285a:	2300      	movs	r3, #0
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285e:	e016      	b.n	800288e <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002860:	f107 0208 	add.w	r2, r7, #8
 8002864:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002866:	79f8      	ldrb	r0, [r7, #7]
 8002868:	2330      	movs	r3, #48	; 0x30
 800286a:	f7ff f8cf 	bl	8001a0c <DRV_CANFDSPI_WriteByteArray>
 800286e:	4603      	mov	r3, r0
 8002870:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8002874:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	e00a      	b.n	8002898 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002882:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002884:	3330      	adds	r3, #48	; 0x30
 8002886:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288a:	3301      	adds	r3, #1
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002890:	2b29      	cmp	r3, #41	; 0x29
 8002892:	d9e5      	bls.n	8002860 <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002894:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002898:	4618      	mov	r0, r3
 800289a:	3740      	adds	r7, #64	; 0x40
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4623      	mov	r3, r4
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	4603      	mov	r3, r0
 80028b4:	71bb      	strb	r3, [r7, #6]
 80028b6:	460b      	mov	r3, r1
 80028b8:	717b      	strb	r3, [r7, #5]
 80028ba:	4613      	mov	r3, r2
 80028bc:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80028c2:	793b      	ldrb	r3, [r7, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d036      	beq.n	8002936 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	dc4c      	bgt.n	8002966 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d018      	beq.n	8002906 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80028d4:	e047      	b.n	8002966 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80028d6:	79ba      	ldrb	r2, [r7, #6]
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f84b 	bl	8002978 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80028e2:	4603      	mov	r3, r0
 80028e4:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	e03d      	b.n	8002970 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80028f4:	797a      	ldrb	r2, [r7, #5]
 80028f6:	79b9      	ldrb	r1, [r7, #6]
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f8c2 	bl	8002a84 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
            break;
 8002904:	e032      	b.n	800296c <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002906:	79ba      	ldrb	r2, [r7, #6]
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f000 faf1 	bl	8002ef4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	e025      	b.n	8002970 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002924:	797a      	ldrb	r2, [r7, #5]
 8002926:	79b9      	ldrb	r1, [r7, #6]
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fb6e 	bl	800300c <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002930:	4603      	mov	r3, r0
 8002932:	73fb      	strb	r3, [r7, #15]
            break;
 8002934:	e01a      	b.n	800296c <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002936:	79ba      	ldrb	r2, [r7, #6]
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fd0f 	bl	8003360 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	e00d      	b.n	8002970 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002954:	797a      	ldrb	r2, [r7, #5]
 8002956:	79b9      	ldrb	r1, [r7, #6]
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fd8c 	bl	8003478 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
            break;
 8002964:	e002      	b.n	800296c <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002966:	23ff      	movs	r3, #255	; 0xff
 8002968:	73fb      	strb	r3, [r7, #15]
            break;
 800296a:	bf00      	nop
    }

    return spiTransferError;
 800296c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	460a      	mov	r2, r1
 8002982:	71fb      	strb	r3, [r7, #7]
 8002984:	4613      	mov	r3, r2
 8002986:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800298c:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 800298e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	2b11      	cmp	r3, #17
 8002994:	d862      	bhi.n	8002a5c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002996:	a201      	add	r2, pc, #4	; (adr r2, 800299c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029e5 	.word	0x080029e5
 80029a0:	080029e5 	.word	0x080029e5
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	080029e5 	.word	0x080029e5
 80029ac:	080029e5 	.word	0x080029e5
 80029b0:	080029e5 	.word	0x080029e5
 80029b4:	080029e5 	.word	0x080029e5
 80029b8:	080029e5 	.word	0x080029e5
 80029bc:	08002a03 	.word	0x08002a03
 80029c0:	08002a03 	.word	0x08002a03
 80029c4:	08002a03 	.word	0x08002a03
 80029c8:	08002a03 	.word	0x08002a03
 80029cc:	08002a03 	.word	0x08002a03
 80029d0:	08002a03 	.word	0x08002a03
 80029d4:	08002a03 	.word	0x08002a03
 80029d8:	08002a21 	.word	0x08002a21
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a3f 	.word	0x08002a3f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80029e8:	233e      	movs	r3, #62	; 0x3e
 80029ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80029ec:	7a7b      	ldrb	r3, [r7, #9]
 80029ee:	220f      	movs	r2, #15
 80029f0:	f362 0306 	bfi	r3, r2, #0, #7
 80029f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80029f6:	7a3b      	ldrb	r3, [r7, #8]
 80029f8:	220f      	movs	r2, #15
 80029fa:	f362 0306 	bfi	r3, r2, #0, #7
 80029fe:	723b      	strb	r3, [r7, #8]
            break;
 8002a00:	e02f      	b.n	8002a62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002a06:	237e      	movs	r3, #126	; 0x7e
 8002a08:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002a0a:	7a7b      	ldrb	r3, [r7, #9]
 8002a0c:	221f      	movs	r2, #31
 8002a0e:	f362 0306 	bfi	r3, r2, #0, #7
 8002a12:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002a14:	7a3b      	ldrb	r3, [r7, #8]
 8002a16:	221f      	movs	r2, #31
 8002a18:	f362 0306 	bfi	r3, r2, #0, #7
 8002a1c:	723b      	strb	r3, [r7, #8]
            break;
 8002a1e:	e020      	b.n	8002a62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002a24:	231e      	movs	r3, #30
 8002a26:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	f362 0306 	bfi	r3, r2, #0, #7
 8002a30:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002a32:	7a3b      	ldrb	r3, [r7, #8]
 8002a34:	2207      	movs	r2, #7
 8002a36:	f362 0306 	bfi	r3, r2, #0, #7
 8002a3a:	723b      	strb	r3, [r7, #8]
            break;
 8002a3c:	e011      	b.n	8002a62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002a42:	23fe      	movs	r3, #254	; 0xfe
 8002a44:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002a46:	7a7b      	ldrb	r3, [r7, #9]
 8002a48:	223f      	movs	r2, #63	; 0x3f
 8002a4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002a4e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002a50:	7a3b      	ldrb	r3, [r7, #8]
 8002a52:	223f      	movs	r2, #63	; 0x3f
 8002a54:	f362 0306 	bfi	r3, r2, #0, #7
 8002a58:	723b      	strb	r3, [r7, #8]
            break;
 8002a5a:	e002      	b.n	8002a62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	e009      	b.n	8002a76 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2104      	movs	r1, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fe9f 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	003e0f0f 	.word	0x003e0f0f

08002a84 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	71bb      	strb	r3, [r7, #6]
 8002a92:	4613      	mov	r3, r2
 8002a94:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002a9a:	4be2      	ldr	r3, [pc, #904]	; (8002e24 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002a9c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002aa2:	7abb      	ldrb	r3, [r7, #10]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f362 0301 	bfi	r3, r2, #0, #2
 8002aaa:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002ab0:	79bb      	ldrb	r3, [r7, #6]
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	f200 81f6 	bhi.w	8002ea4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002b09 	.word	0x08002b09
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b85 	.word	0x08002b85
 8002acc:	08002bc3 	.word	0x08002bc3
 8002ad0:	08002c01 	.word	0x08002c01
 8002ad4:	08002c3f 	.word	0x08002c3f
 8002ad8:	08002c79 	.word	0x08002c79
 8002adc:	08002cad 	.word	0x08002cad
 8002ae0:	08002cdf 	.word	0x08002cdf
 8002ae4:	08002d25 	.word	0x08002d25
 8002ae8:	08002d6b 	.word	0x08002d6b
 8002aec:	08002da9 	.word	0x08002da9
 8002af0:	08002de7 	.word	0x08002de7
 8002af4:	08002e29 	.word	0x08002e29
 8002af8:	08002e67 	.word	0x08002e67
 8002afc:	08002bc3 	.word	0x08002bc3
 8002b00:	08002c79 	.word	0x08002c79
 8002b04:	08002cdf 	.word	0x08002cdf
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002b0c:	7bbb      	ldrb	r3, [r7, #14]
 8002b0e:	221e      	movs	r2, #30
 8002b10:	f362 0304 	bfi	r3, r2, #0, #5
 8002b14:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002b16:	7b7b      	ldrb	r3, [r7, #13]
 8002b18:	2207      	movs	r2, #7
 8002b1a:	f362 0303 	bfi	r3, r2, #0, #4
 8002b1e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002b20:	7b3b      	ldrb	r3, [r7, #12]
 8002b22:	2207      	movs	r2, #7
 8002b24:	f362 0303 	bfi	r3, r2, #0, #4
 8002b28:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002b2a:	7a7b      	ldrb	r3, [r7, #9]
 8002b2c:	221f      	movs	r2, #31
 8002b2e:	f362 0306 	bfi	r3, r2, #0, #7
 8002b32:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	7a3b      	ldrb	r3, [r7, #8]
 8002b3e:	f362 0305 	bfi	r3, r2, #0, #6
 8002b42:	723b      	strb	r3, [r7, #8]
            break;
 8002b44:	e1b1      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
 8002b4c:	220e      	movs	r2, #14
 8002b4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002b52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002b54:	7b7b      	ldrb	r3, [r7, #13]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f362 0303 	bfi	r3, r2, #0, #4
 8002b5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002b5e:	7b3b      	ldrb	r3, [r7, #12]
 8002b60:	2203      	movs	r2, #3
 8002b62:	f362 0303 	bfi	r3, r2, #0, #4
 8002b66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002b68:	7a7b      	ldrb	r3, [r7, #9]
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002b70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	7a3b      	ldrb	r3, [r7, #8]
 8002b7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002b80:	723b      	strb	r3, [r7, #8]
            break;
 8002b82:	e192      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002b90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002b92:	7b7b      	ldrb	r3, [r7, #13]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f362 0303 	bfi	r3, r2, #0, #4
 8002b9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002b9c:	7b3b      	ldrb	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f362 0303 	bfi	r3, r2, #0, #4
 8002ba4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002ba6:	7a7b      	ldrb	r3, [r7, #9]
 8002ba8:	2209      	movs	r2, #9
 8002baa:	f362 0306 	bfi	r3, r2, #0, #7
 8002bae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	7a3b      	ldrb	r3, [r7, #8]
 8002bba:	f362 0305 	bfi	r3, r2, #0, #6
 8002bbe:	723b      	strb	r3, [r7, #8]
            break;
 8002bc0:	e173      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002bc6:	7bbb      	ldrb	r3, [r7, #14]
 8002bc8:	2206      	movs	r2, #6
 8002bca:	f362 0304 	bfi	r3, r2, #0, #5
 8002bce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002bd0:	7b7b      	ldrb	r3, [r7, #13]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f362 0303 	bfi	r3, r2, #0, #4
 8002bd8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002bda:	7b3b      	ldrb	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f362 0303 	bfi	r3, r2, #0, #4
 8002be2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002be4:	7a7b      	ldrb	r3, [r7, #9]
 8002be6:	2207      	movs	r2, #7
 8002be8:	f362 0306 	bfi	r3, r2, #0, #7
 8002bec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	7a3b      	ldrb	r3, [r7, #8]
 8002bf8:	f362 0305 	bfi	r3, r2, #0, #6
 8002bfc:	723b      	strb	r3, [r7, #8]
            break;
 8002bfe:	e154      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002c04:	7bbb      	ldrb	r3, [r7, #14]
 8002c06:	2204      	movs	r2, #4
 8002c08:	f362 0304 	bfi	r3, r2, #0, #5
 8002c0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002c0e:	7b7b      	ldrb	r3, [r7, #13]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f362 0303 	bfi	r3, r2, #0, #4
 8002c16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002c18:	7b3b      	ldrb	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002c20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002c22:	7a7b      	ldrb	r3, [r7, #9]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f362 0306 	bfi	r3, r2, #0, #7
 8002c2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	7a3b      	ldrb	r3, [r7, #8]
 8002c36:	f362 0305 	bfi	r3, r2, #0, #6
 8002c3a:	723b      	strb	r3, [r7, #8]
            break;
 8002c3c:	e135      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f362 0304 	bfi	r3, r2, #0, #5
 8002c4a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002c4c:	7b7b      	ldrb	r3, [r7, #13]
 8002c4e:	f36f 0303 	bfc	r3, #0, #4
 8002c52:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002c54:	7b3b      	ldrb	r3, [r7, #12]
 8002c56:	f36f 0303 	bfc	r3, #0, #4
 8002c5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002c5c:	7a7b      	ldrb	r3, [r7, #9]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	f362 0306 	bfi	r3, r2, #0, #7
 8002c64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	7a3b      	ldrb	r3, [r7, #8]
 8002c70:	f362 0305 	bfi	r3, r2, #0, #6
 8002c74:	723b      	strb	r3, [r7, #8]
            break;
 8002c76:	e118      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002c7c:	7bbb      	ldrb	r3, [r7, #14]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f362 0304 	bfi	r3, r2, #0, #5
 8002c84:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002c86:	7b7b      	ldrb	r3, [r7, #13]
 8002c88:	f36f 0303 	bfc	r3, #0, #4
 8002c8c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002c8e:	7b3b      	ldrb	r3, [r7, #12]
 8002c90:	f36f 0303 	bfc	r3, #0, #4
 8002c94:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002c96:	7a7b      	ldrb	r3, [r7, #9]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002c9e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002ca0:	7a3b      	ldrb	r3, [r7, #8]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f362 0305 	bfi	r3, r2, #0, #6
 8002ca8:	723b      	strb	r3, [r7, #8]
            break;
 8002caa:	e0fe      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f362 0304 	bfi	r3, r2, #0, #5
 8002cb8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002cba:	7b7b      	ldrb	r3, [r7, #13]
 8002cbc:	f36f 0303 	bfc	r3, #0, #4
 8002cc0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002cc2:	7b3b      	ldrb	r3, [r7, #12]
 8002cc4:	f36f 0303 	bfc	r3, #0, #4
 8002cc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f362 0306 	bfi	r3, r2, #0, #7
 8002cd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002cd4:	7a3b      	ldrb	r3, [r7, #8]
 8002cd6:	f36f 0305 	bfc	r3, #0, #6
 8002cda:	723b      	strb	r3, [r7, #8]
            break;
 8002cdc:	e0e5      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ce2:	7bbb      	ldrb	r3, [r7, #14]
 8002ce4:	221e      	movs	r2, #30
 8002ce6:	f362 0304 	bfi	r3, r2, #0, #5
 8002cea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cec:	7b7b      	ldrb	r3, [r7, #13]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	f362 0303 	bfi	r3, r2, #0, #4
 8002cf4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cf6:	7b3b      	ldrb	r3, [r7, #12]
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002d00:	7a7b      	ldrb	r3, [r7, #9]
 8002d02:	221f      	movs	r2, #31
 8002d04:	f362 0306 	bfi	r3, r2, #0, #7
 8002d08:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	7a3b      	ldrb	r3, [r7, #8]
 8002d14:	f362 0305 	bfi	r3, r2, #0, #6
 8002d18:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002d1a:	7abb      	ldrb	r3, [r7, #10]
 8002d1c:	f36f 0301 	bfc	r3, #0, #2
 8002d20:	72bb      	strb	r3, [r7, #10]
            break;
 8002d22:	e0c2      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2211      	movs	r2, #17
 8002d2c:	f362 0304 	bfi	r3, r2, #0, #5
 8002d30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	2204      	movs	r2, #4
 8002d36:	f362 0303 	bfi	r3, r2, #0, #4
 8002d3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002d3c:	7b3b      	ldrb	r3, [r7, #12]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	f362 0303 	bfi	r3, r2, #0, #4
 8002d44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002d46:	7a7b      	ldrb	r3, [r7, #9]
 8002d48:	2212      	movs	r2, #18
 8002d4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	7a3b      	ldrb	r3, [r7, #8]
 8002d5a:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002d60:	7abb      	ldrb	r3, [r7, #10]
 8002d62:	f36f 0301 	bfc	r3, #0, #2
 8002d66:	72bb      	strb	r3, [r7, #10]
            break;
 8002d68:	e09f      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002d6e:	7bbb      	ldrb	r3, [r7, #14]
 8002d70:	221e      	movs	r2, #30
 8002d72:	f362 0304 	bfi	r3, r2, #0, #5
 8002d76:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002d78:	7b7b      	ldrb	r3, [r7, #13]
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002d80:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002d82:	7b3b      	ldrb	r3, [r7, #12]
 8002d84:	2207      	movs	r2, #7
 8002d86:	f362 0303 	bfi	r3, r2, #0, #4
 8002d8a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002d8c:	7a7b      	ldrb	r3, [r7, #9]
 8002d8e:	221f      	movs	r2, #31
 8002d90:	f362 0306 	bfi	r3, r2, #0, #7
 8002d94:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	7a3b      	ldrb	r3, [r7, #8]
 8002da0:	f362 0305 	bfi	r3, r2, #0, #6
 8002da4:	723b      	strb	r3, [r7, #8]
            break;
 8002da6:	e080      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	2212      	movs	r2, #18
 8002db0:	f362 0304 	bfi	r3, r2, #0, #5
 8002db4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	2205      	movs	r2, #5
 8002dba:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002dc0:	7b3b      	ldrb	r3, [r7, #12]
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002dc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002dca:	7a7b      	ldrb	r3, [r7, #9]
 8002dcc:	2213      	movs	r2, #19
 8002dce:	f362 0306 	bfi	r3, r2, #0, #7
 8002dd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	7a3b      	ldrb	r3, [r7, #8]
 8002dde:	f362 0305 	bfi	r3, r2, #0, #6
 8002de2:	723b      	strb	r3, [r7, #8]
            break;
 8002de4:	e061      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002dea:	7bbb      	ldrb	r3, [r7, #14]
 8002dec:	220e      	movs	r2, #14
 8002dee:	f362 0304 	bfi	r3, r2, #0, #5
 8002df2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002df4:	7b7b      	ldrb	r3, [r7, #13]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f362 0303 	bfi	r3, r2, #0, #4
 8002dfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002dfe:	7b3b      	ldrb	r3, [r7, #12]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f362 0303 	bfi	r3, r2, #0, #4
 8002e06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002e08:	7a7b      	ldrb	r3, [r7, #9]
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	7a3b      	ldrb	r3, [r7, #8]
 8002e1c:	f362 0305 	bfi	r3, r2, #0, #6
 8002e20:	723b      	strb	r3, [r7, #8]
            break;
 8002e22:	e042      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002e24:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002e2c:	7bbb      	ldrb	r3, [r7, #14]
 8002e2e:	2208      	movs	r2, #8
 8002e30:	f362 0304 	bfi	r3, r2, #0, #5
 8002e34:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002e36:	7b7b      	ldrb	r3, [r7, #13]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f362 0303 	bfi	r3, r2, #0, #4
 8002e3e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002e40:	7b3b      	ldrb	r3, [r7, #12]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f362 0303 	bfi	r3, r2, #0, #4
 8002e48:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002e4a:	7a7b      	ldrb	r3, [r7, #9]
 8002e4c:	2209      	movs	r2, #9
 8002e4e:	f362 0306 	bfi	r3, r2, #0, #7
 8002e52:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	7a3b      	ldrb	r3, [r7, #8]
 8002e5e:	f362 0305 	bfi	r3, r2, #0, #6
 8002e62:	723b      	strb	r3, [r7, #8]
            break;
 8002e64:	e021      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002e6a:	7bbb      	ldrb	r3, [r7, #14]
 8002e6c:	2206      	movs	r2, #6
 8002e6e:	f362 0304 	bfi	r3, r2, #0, #5
 8002e72:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002e74:	7b7b      	ldrb	r3, [r7, #13]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f362 0303 	bfi	r3, r2, #0, #4
 8002e7c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002e7e:	7b3b      	ldrb	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f362 0303 	bfi	r3, r2, #0, #4
 8002e86:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002e88:	7a7b      	ldrb	r3, [r7, #9]
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e90:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	7a3b      	ldrb	r3, [r7, #8]
 8002e9c:	f362 0305 	bfi	r3, r2, #0, #6
 8002ea0:	723b      	strb	r3, [r7, #8]
            break;
 8002ea2:	e002      	b.n	8002eaa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	e01f      	b.n	8002eea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2108      	movs	r1, #8
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fc7b 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8002ec2:	f06f 0301 	mvn.w	r3, #1
 8002ec6:	e010      	b.n	8002eea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	210c      	movs	r1, #12
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fc6c 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8002ee0:	f06f 0302 	mvn.w	r3, #2
 8002ee4:	e001      	b.n	8002eea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	460a      	mov	r2, r1
 8002efe:	71fb      	strb	r3, [r7, #7]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8002f0a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002f0c:	79bb      	ldrb	r3, [r7, #6]
 8002f0e:	2b11      	cmp	r3, #17
 8002f10:	d862      	bhi.n	8002fd8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f61 	.word	0x08002f61
 8002f1c:	08002f61 	.word	0x08002f61
 8002f20:	08002fd9 	.word	0x08002fd9
 8002f24:	08002f61 	.word	0x08002f61
 8002f28:	08002f61 	.word	0x08002f61
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08002f61 	.word	0x08002f61
 8002f34:	08002f61 	.word	0x08002f61
 8002f38:	08002f7f 	.word	0x08002f7f
 8002f3c:	08002f7f 	.word	0x08002f7f
 8002f40:	08002f7f 	.word	0x08002f7f
 8002f44:	08002f7f 	.word	0x08002f7f
 8002f48:	08002f7f 	.word	0x08002f7f
 8002f4c:	08002f7f 	.word	0x08002f7f
 8002f50:	08002f7f 	.word	0x08002f7f
 8002f54:	08002f9d 	.word	0x08002f9d
 8002f58:	08002f9d 	.word	0x08002f9d
 8002f5c:	08002fbb 	.word	0x08002fbb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002f64:	231e      	movs	r3, #30
 8002f66:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002f70:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002f72:	7a3b      	ldrb	r3, [r7, #8]
 8002f74:	2207      	movs	r2, #7
 8002f76:	f362 0306 	bfi	r3, r2, #0, #7
 8002f7a:	723b      	strb	r3, [r7, #8]
            break;
 8002f7c:	e02f      	b.n	8002fde <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002f82:	233e      	movs	r3, #62	; 0x3e
 8002f84:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002f86:	7a7b      	ldrb	r3, [r7, #9]
 8002f88:	220f      	movs	r2, #15
 8002f8a:	f362 0306 	bfi	r3, r2, #0, #7
 8002f8e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002f90:	7a3b      	ldrb	r3, [r7, #8]
 8002f92:	220f      	movs	r2, #15
 8002f94:	f362 0306 	bfi	r3, r2, #0, #7
 8002f98:	723b      	strb	r3, [r7, #8]
            break;
 8002f9a:	e020      	b.n	8002fde <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002fa0:	230e      	movs	r3, #14
 8002fa2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002fa4:	7a7b      	ldrb	r3, [r7, #9]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	f362 0306 	bfi	r3, r2, #0, #7
 8002fac:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002fae:	7a3b      	ldrb	r3, [r7, #8]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f362 0306 	bfi	r3, r2, #0, #7
 8002fb6:	723b      	strb	r3, [r7, #8]
            break;
 8002fb8:	e011      	b.n	8002fde <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002fbe:	237e      	movs	r3, #126	; 0x7e
 8002fc0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002fc2:	7a7b      	ldrb	r3, [r7, #9]
 8002fc4:	221f      	movs	r2, #31
 8002fc6:	f362 0306 	bfi	r3, r2, #0, #7
 8002fca:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002fcc:	7a3b      	ldrb	r3, [r7, #8]
 8002fce:	221f      	movs	r2, #31
 8002fd0:	f362 0306 	bfi	r3, r2, #0, #7
 8002fd4:	723b      	strb	r3, [r7, #8]
            break;
 8002fd6:	e002      	b.n	8002fde <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	e010      	b.n	8003000 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fbe1 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8002ff6:	f06f 0301 	mvn.w	r3, #1
 8002ffa:	e001      	b.n	8003000 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8002ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	003e0f0f 	.word	0x003e0f0f

0800300c <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	460b      	mov	r3, r1
 8003018:	71bb      	strb	r3, [r7, #6]
 800301a:	4613      	mov	r3, r2
 800301c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003022:	4bce      	ldr	r3, [pc, #824]	; (800335c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8003024:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800302a:	7abb      	ldrb	r3, [r7, #10]
 800302c:	2202      	movs	r2, #2
 800302e:	f362 0301 	bfi	r3, r2, #0, #2
 8003032:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	2b11      	cmp	r3, #17
 800303c:	f200 8166 	bhi.w	800330c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003091 	.word	0x08003091
 800304c:	080030cf 	.word	0x080030cf
 8003050:	0800330d 	.word	0x0800330d
 8003054:	0800310d 	.word	0x0800310d
 8003058:	08003147 	.word	0x08003147
 800305c:	08003181 	.word	0x08003181
 8003060:	08003181 	.word	0x08003181
 8003064:	08003181 	.word	0x08003181
 8003068:	08003187 	.word	0x08003187
 800306c:	080031cd 	.word	0x080031cd
 8003070:	08003213 	.word	0x08003213
 8003074:	08003251 	.word	0x08003251
 8003078:	0800328f 	.word	0x0800328f
 800307c:	080032cd 	.word	0x080032cd
 8003080:	080032d3 	.word	0x080032d3
 8003084:	0800310d 	.word	0x0800310d
 8003088:	08003181 	.word	0x08003181
 800308c:	08003187 	.word	0x08003187
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003094:	7bbb      	ldrb	r3, [r7, #14]
 8003096:	220e      	movs	r2, #14
 8003098:	f362 0304 	bfi	r3, r2, #0, #5
 800309c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800309e:	7b7b      	ldrb	r3, [r7, #13]
 80030a0:	2203      	movs	r2, #3
 80030a2:	f362 0303 	bfi	r3, r2, #0, #4
 80030a6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80030a8:	7b3b      	ldrb	r3, [r7, #12]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f362 0303 	bfi	r3, r2, #0, #4
 80030b0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80030b2:	7a7b      	ldrb	r3, [r7, #9]
 80030b4:	220f      	movs	r2, #15
 80030b6:	f362 0306 	bfi	r3, r2, #0, #7
 80030ba:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	7a3b      	ldrb	r3, [r7, #8]
 80030c6:	f362 0305 	bfi	r3, r2, #0, #6
 80030ca:	723b      	strb	r3, [r7, #8]
            break;
 80030cc:	e121      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	2206      	movs	r2, #6
 80030d6:	f362 0304 	bfi	r3, r2, #0, #5
 80030da:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80030dc:	7b7b      	ldrb	r3, [r7, #13]
 80030de:	2201      	movs	r2, #1
 80030e0:	f362 0303 	bfi	r3, r2, #0, #4
 80030e4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80030e6:	7b3b      	ldrb	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f362 0303 	bfi	r3, r2, #0, #4
 80030ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80030f0:	7a7b      	ldrb	r3, [r7, #9]
 80030f2:	2207      	movs	r2, #7
 80030f4:	f362 0306 	bfi	r3, r2, #0, #7
 80030f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003100:	b2da      	uxtb	r2, r3
 8003102:	7a3b      	ldrb	r3, [r7, #8]
 8003104:	f362 0305 	bfi	r3, r2, #0, #6
 8003108:	723b      	strb	r3, [r7, #8]
            break;
 800310a:	e102      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	2202      	movs	r2, #2
 8003114:	f362 0304 	bfi	r3, r2, #0, #5
 8003118:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800311a:	7b7b      	ldrb	r3, [r7, #13]
 800311c:	f36f 0303 	bfc	r3, #0, #4
 8003120:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003122:	7b3b      	ldrb	r3, [r7, #12]
 8003124:	f36f 0303 	bfc	r3, #0, #4
 8003128:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800312a:	7a7b      	ldrb	r3, [r7, #9]
 800312c:	2203      	movs	r2, #3
 800312e:	f362 0306 	bfi	r3, r2, #0, #7
 8003132:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7a3b      	ldrb	r3, [r7, #8]
 800313e:	f362 0305 	bfi	r3, r2, #0, #6
 8003142:	723b      	strb	r3, [r7, #8]
            break;
 8003144:	e0e5      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800314a:	7bbb      	ldrb	r3, [r7, #14]
 800314c:	2201      	movs	r2, #1
 800314e:	f362 0304 	bfi	r3, r2, #0, #5
 8003152:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003154:	7b7b      	ldrb	r3, [r7, #13]
 8003156:	f36f 0303 	bfc	r3, #0, #4
 800315a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800315c:	7b3b      	ldrb	r3, [r7, #12]
 800315e:	f36f 0303 	bfc	r3, #0, #4
 8003162:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003164:	7a7b      	ldrb	r3, [r7, #9]
 8003166:	2202      	movs	r2, #2
 8003168:	f362 0306 	bfi	r3, r2, #0, #7
 800316c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003174:	b2da      	uxtb	r2, r3
 8003176:	7a3b      	ldrb	r3, [r7, #8]
 8003178:	f362 0305 	bfi	r3, r2, #0, #6
 800317c:	723b      	strb	r3, [r7, #8]
            break;
 800317e:	e0c8      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	e0e5      	b.n	8003352 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800318a:	7bbb      	ldrb	r3, [r7, #14]
 800318c:	221e      	movs	r2, #30
 800318e:	f362 0304 	bfi	r3, r2, #0, #5
 8003192:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003194:	7b7b      	ldrb	r3, [r7, #13]
 8003196:	2207      	movs	r2, #7
 8003198:	f362 0303 	bfi	r3, r2, #0, #4
 800319c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800319e:	7b3b      	ldrb	r3, [r7, #12]
 80031a0:	2207      	movs	r2, #7
 80031a2:	f362 0303 	bfi	r3, r2, #0, #4
 80031a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80031a8:	7a7b      	ldrb	r3, [r7, #9]
 80031aa:	221f      	movs	r2, #31
 80031ac:	f362 0306 	bfi	r3, r2, #0, #7
 80031b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	7a3b      	ldrb	r3, [r7, #8]
 80031bc:	f362 0305 	bfi	r3, r2, #0, #6
 80031c0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80031c2:	7abb      	ldrb	r3, [r7, #10]
 80031c4:	f36f 0301 	bfc	r3, #0, #2
 80031c8:	72bb      	strb	r3, [r7, #10]
            break;
 80031ca:	e0a2      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80031d0:	7bbb      	ldrb	r3, [r7, #14]
 80031d2:	2211      	movs	r2, #17
 80031d4:	f362 0304 	bfi	r3, r2, #0, #5
 80031d8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80031da:	7b7b      	ldrb	r3, [r7, #13]
 80031dc:	2204      	movs	r2, #4
 80031de:	f362 0303 	bfi	r3, r2, #0, #4
 80031e2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80031e4:	7b3b      	ldrb	r3, [r7, #12]
 80031e6:	2204      	movs	r2, #4
 80031e8:	f362 0303 	bfi	r3, r2, #0, #4
 80031ec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80031ee:	7a7b      	ldrb	r3, [r7, #9]
 80031f0:	2212      	movs	r2, #18
 80031f2:	f362 0306 	bfi	r3, r2, #0, #7
 80031f6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	7a3b      	ldrb	r3, [r7, #8]
 8003202:	f362 0305 	bfi	r3, r2, #0, #6
 8003206:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003208:	7abb      	ldrb	r3, [r7, #10]
 800320a:	f36f 0301 	bfc	r3, #0, #2
 800320e:	72bb      	strb	r3, [r7, #10]
            break;
 8003210:	e07f      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	220e      	movs	r2, #14
 800321a:	f362 0304 	bfi	r3, r2, #0, #5
 800321e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003220:	7b7b      	ldrb	r3, [r7, #13]
 8003222:	2203      	movs	r2, #3
 8003224:	f362 0303 	bfi	r3, r2, #0, #4
 8003228:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800322a:	7b3b      	ldrb	r3, [r7, #12]
 800322c:	2203      	movs	r2, #3
 800322e:	f362 0303 	bfi	r3, r2, #0, #4
 8003232:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003234:	7a7b      	ldrb	r3, [r7, #9]
 8003236:	220f      	movs	r2, #15
 8003238:	f362 0306 	bfi	r3, r2, #0, #7
 800323c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003244:	b2da      	uxtb	r2, r3
 8003246:	7a3b      	ldrb	r3, [r7, #8]
 8003248:	f362 0305 	bfi	r3, r2, #0, #6
 800324c:	723b      	strb	r3, [r7, #8]
            break;
 800324e:	e060      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	2208      	movs	r2, #8
 8003258:	f362 0304 	bfi	r3, r2, #0, #5
 800325c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800325e:	7b7b      	ldrb	r3, [r7, #13]
 8003260:	2202      	movs	r2, #2
 8003262:	f362 0303 	bfi	r3, r2, #0, #4
 8003266:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003268:	7b3b      	ldrb	r3, [r7, #12]
 800326a:	2202      	movs	r2, #2
 800326c:	f362 0303 	bfi	r3, r2, #0, #4
 8003270:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003272:	7a7b      	ldrb	r3, [r7, #9]
 8003274:	2209      	movs	r2, #9
 8003276:	f362 0306 	bfi	r3, r2, #0, #7
 800327a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003282:	b2da      	uxtb	r2, r3
 8003284:	7a3b      	ldrb	r3, [r7, #8]
 8003286:	f362 0305 	bfi	r3, r2, #0, #6
 800328a:	723b      	strb	r3, [r7, #8]
            break;
 800328c:	e041      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003292:	7bbb      	ldrb	r3, [r7, #14]
 8003294:	2206      	movs	r2, #6
 8003296:	f362 0304 	bfi	r3, r2, #0, #5
 800329a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	2201      	movs	r2, #1
 80032a0:	f362 0303 	bfi	r3, r2, #0, #4
 80032a4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80032a6:	7b3b      	ldrb	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f362 0303 	bfi	r3, r2, #0, #4
 80032ae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80032b0:	7a7b      	ldrb	r3, [r7, #9]
 80032b2:	2207      	movs	r2, #7
 80032b4:	f362 0306 	bfi	r3, r2, #0, #7
 80032b8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	7a3b      	ldrb	r3, [r7, #8]
 80032c4:	f362 0305 	bfi	r3, r2, #0, #6
 80032c8:	723b      	strb	r3, [r7, #8]
            break;
 80032ca:	e022      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	e03f      	b.n	8003352 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	2202      	movs	r2, #2
 80032da:	f362 0304 	bfi	r3, r2, #0, #5
 80032de:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032e0:	7b7b      	ldrb	r3, [r7, #13]
 80032e2:	f36f 0303 	bfc	r3, #0, #4
 80032e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032e8:	7b3b      	ldrb	r3, [r7, #12]
 80032ea:	f36f 0303 	bfc	r3, #0, #4
 80032ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80032f0:	7a7b      	ldrb	r3, [r7, #9]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f362 0306 	bfi	r3, r2, #0, #7
 80032f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	b2da      	uxtb	r2, r3
 8003302:	7a3b      	ldrb	r3, [r7, #8]
 8003304:	f362 0305 	bfi	r3, r2, #0, #6
 8003308:	723b      	strb	r3, [r7, #8]
            break;
 800330a:	e002      	b.n	8003312 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	e01f      	b.n	8003352 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2108      	movs	r1, #8
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fa47 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 800331e:	4603      	mov	r3, r0
 8003320:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 800332a:	f06f 0301 	mvn.w	r3, #1
 800332e:	e010      	b.n	8003352 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	210c      	movs	r1, #12
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fa38 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 800333c:	4603      	mov	r3, r0
 800333e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003348:	f06f 0302 	mvn.w	r3, #2
 800334c:	e001      	b.n	8003352 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	000e0303 	.word	0x000e0303

08003360 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	460a      	mov	r2, r1
 800336a:	71fb      	strb	r3, [r7, #7]
 800336c:	4613      	mov	r3, r2
 800336e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003374:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003376:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003378:	79bb      	ldrb	r3, [r7, #6]
 800337a:	2b11      	cmp	r3, #17
 800337c:	d862      	bhi.n	8003444 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033cd 	.word	0x080033cd
 8003388:	080033cd 	.word	0x080033cd
 800338c:	08003445 	.word	0x08003445
 8003390:	080033cd 	.word	0x080033cd
 8003394:	080033cd 	.word	0x080033cd
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033cd 	.word	0x080033cd
 80033a0:	080033cd 	.word	0x080033cd
 80033a4:	080033eb 	.word	0x080033eb
 80033a8:	080033eb 	.word	0x080033eb
 80033ac:	080033eb 	.word	0x080033eb
 80033b0:	080033eb 	.word	0x080033eb
 80033b4:	080033eb 	.word	0x080033eb
 80033b8:	080033eb 	.word	0x080033eb
 80033bc:	080033eb 	.word	0x080033eb
 80033c0:	08003409 	.word	0x08003409
 80033c4:	08003409 	.word	0x08003409
 80033c8:	08003427 	.word	0x08003427
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80033d0:	230e      	movs	r3, #14
 80033d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80033d4:	7a7b      	ldrb	r3, [r7, #9]
 80033d6:	2203      	movs	r2, #3
 80033d8:	f362 0306 	bfi	r3, r2, #0, #7
 80033dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80033de:	7a3b      	ldrb	r3, [r7, #8]
 80033e0:	2203      	movs	r2, #3
 80033e2:	f362 0306 	bfi	r3, r2, #0, #7
 80033e6:	723b      	strb	r3, [r7, #8]
            break;
 80033e8:	e02f      	b.n	800344a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80033ee:	231e      	movs	r3, #30
 80033f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80033f2:	7a7b      	ldrb	r3, [r7, #9]
 80033f4:	2207      	movs	r2, #7
 80033f6:	f362 0306 	bfi	r3, r2, #0, #7
 80033fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80033fc:	7a3b      	ldrb	r3, [r7, #8]
 80033fe:	2207      	movs	r2, #7
 8003400:	f362 0306 	bfi	r3, r2, #0, #7
 8003404:	723b      	strb	r3, [r7, #8]
            break;
 8003406:	e020      	b.n	800344a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 800340c:	2307      	movs	r3, #7
 800340e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003410:	7a7b      	ldrb	r3, [r7, #9]
 8003412:	2202      	movs	r2, #2
 8003414:	f362 0306 	bfi	r3, r2, #0, #7
 8003418:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 800341a:	7a3b      	ldrb	r3, [r7, #8]
 800341c:	2202      	movs	r2, #2
 800341e:	f362 0306 	bfi	r3, r2, #0, #7
 8003422:	723b      	strb	r3, [r7, #8]
            break;
 8003424:	e011      	b.n	800344a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800342a:	233e      	movs	r3, #62	; 0x3e
 800342c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800342e:	7a7b      	ldrb	r3, [r7, #9]
 8003430:	220f      	movs	r2, #15
 8003432:	f362 0306 	bfi	r3, r2, #0, #7
 8003436:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003438:	7a3b      	ldrb	r3, [r7, #8]
 800343a:	220f      	movs	r2, #15
 800343c:	f362 0306 	bfi	r3, r2, #0, #7
 8003440:	723b      	strb	r3, [r7, #8]
            break;
 8003442:	e002      	b.n	800344a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
 8003448:	e010      	b.n	800346c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2104      	movs	r1, #4
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe f9ab 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003462:	f06f 0301 	mvn.w	r3, #1
 8003466:	e001      	b.n	800346c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003468:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	003e0f0f 	.word	0x003e0f0f

08003478 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
 8003482:	460b      	mov	r3, r1
 8003484:	71bb      	strb	r3, [r7, #6]
 8003486:	4613      	mov	r3, r2
 8003488:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800348e:	4b92      	ldr	r3, [pc, #584]	; (80036d8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003490:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003496:	7abb      	ldrb	r3, [r7, #10]
 8003498:	2202      	movs	r2, #2
 800349a:	f362 0301 	bfi	r3, r2, #0, #2
 800349e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80034a4:	79bb      	ldrb	r3, [r7, #6]
 80034a6:	2b11      	cmp	r3, #17
 80034a8:	f200 80ef 	bhi.w	800368a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034fd 	.word	0x080034fd
 80034b8:	0800353b 	.word	0x0800353b
 80034bc:	0800368b 	.word	0x0800368b
 80034c0:	08003575 	.word	0x08003575
 80034c4:	08003575 	.word	0x08003575
 80034c8:	08003575 	.word	0x08003575
 80034cc:	08003575 	.word	0x08003575
 80034d0:	08003575 	.word	0x08003575
 80034d4:	0800357b 	.word	0x0800357b
 80034d8:	080035c1 	.word	0x080035c1
 80034dc:	08003607 	.word	0x08003607
 80034e0:	08003645 	.word	0x08003645
 80034e4:	0800364b 	.word	0x0800364b
 80034e8:	08003685 	.word	0x08003685
 80034ec:	08003685 	.word	0x08003685
 80034f0:	08003575 	.word	0x08003575
 80034f4:	08003575 	.word	0x08003575
 80034f8:	0800357b 	.word	0x0800357b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	2206      	movs	r2, #6
 8003504:	f362 0304 	bfi	r3, r2, #0, #5
 8003508:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800350a:	7b7b      	ldrb	r3, [r7, #13]
 800350c:	2201      	movs	r2, #1
 800350e:	f362 0303 	bfi	r3, r2, #0, #4
 8003512:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003514:	7b3b      	ldrb	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f362 0303 	bfi	r3, r2, #0, #4
 800351c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800351e:	7a7b      	ldrb	r3, [r7, #9]
 8003520:	2207      	movs	r2, #7
 8003522:	f362 0306 	bfi	r3, r2, #0, #7
 8003526:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352e:	b2da      	uxtb	r2, r3
 8003530:	7a3b      	ldrb	r3, [r7, #8]
 8003532:	f362 0305 	bfi	r3, r2, #0, #6
 8003536:	723b      	strb	r3, [r7, #8]
            break;
 8003538:	e0aa      	b.n	8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	2202      	movs	r2, #2
 8003542:	f362 0304 	bfi	r3, r2, #0, #5
 8003546:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003548:	7b7b      	ldrb	r3, [r7, #13]
 800354a:	f36f 0303 	bfc	r3, #0, #4
 800354e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003550:	7b3b      	ldrb	r3, [r7, #12]
 8003552:	f36f 0303 	bfc	r3, #0, #4
 8003556:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003558:	7a7b      	ldrb	r3, [r7, #9]
 800355a:	2203      	movs	r2, #3
 800355c:	f362 0306 	bfi	r3, r2, #0, #7
 8003560:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003568:	b2da      	uxtb	r2, r3
 800356a:	7a3b      	ldrb	r3, [r7, #8]
 800356c:	f362 0305 	bfi	r3, r2, #0, #6
 8003570:	723b      	strb	r3, [r7, #8]
            break;
 8003572:	e08d      	b.n	8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	e0aa      	b.n	80036d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800357e:	7bbb      	ldrb	r3, [r7, #14]
 8003580:	220e      	movs	r2, #14
 8003582:	f362 0304 	bfi	r3, r2, #0, #5
 8003586:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003588:	7b7b      	ldrb	r3, [r7, #13]
 800358a:	2203      	movs	r2, #3
 800358c:	f362 0303 	bfi	r3, r2, #0, #4
 8003590:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003592:	7b3b      	ldrb	r3, [r7, #12]
 8003594:	2203      	movs	r2, #3
 8003596:	f362 0303 	bfi	r3, r2, #0, #4
 800359a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800359c:	7a7b      	ldrb	r3, [r7, #9]
 800359e:	220f      	movs	r2, #15
 80035a0:	f362 0306 	bfi	r3, r2, #0, #7
 80035a4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	7a3b      	ldrb	r3, [r7, #8]
 80035b0:	f362 0305 	bfi	r3, r2, #0, #6
 80035b4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80035b6:	7abb      	ldrb	r3, [r7, #10]
 80035b8:	f36f 0301 	bfc	r3, #0, #2
 80035bc:	72bb      	strb	r3, [r7, #10]
            break;
 80035be:	e067      	b.n	8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80035c4:	7bbb      	ldrb	r3, [r7, #14]
 80035c6:	2207      	movs	r2, #7
 80035c8:	f362 0304 	bfi	r3, r2, #0, #5
 80035cc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80035ce:	7b7b      	ldrb	r3, [r7, #13]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f362 0303 	bfi	r3, r2, #0, #4
 80035d6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80035d8:	7b3b      	ldrb	r3, [r7, #12]
 80035da:	2202      	movs	r2, #2
 80035dc:	f362 0303 	bfi	r3, r2, #0, #4
 80035e0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80035e2:	7a7b      	ldrb	r3, [r7, #9]
 80035e4:	2208      	movs	r2, #8
 80035e6:	f362 0306 	bfi	r3, r2, #0, #7
 80035ea:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	7a3b      	ldrb	r3, [r7, #8]
 80035f6:	f362 0305 	bfi	r3, r2, #0, #6
 80035fa:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80035fc:	7abb      	ldrb	r3, [r7, #10]
 80035fe:	f36f 0301 	bfc	r3, #0, #2
 8003602:	72bb      	strb	r3, [r7, #10]
            break;
 8003604:	e044      	b.n	8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800360a:	7bbb      	ldrb	r3, [r7, #14]
 800360c:	2206      	movs	r2, #6
 800360e:	f362 0304 	bfi	r3, r2, #0, #5
 8003612:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003614:	7b7b      	ldrb	r3, [r7, #13]
 8003616:	2201      	movs	r2, #1
 8003618:	f362 0303 	bfi	r3, r2, #0, #4
 800361c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800361e:	7b3b      	ldrb	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f362 0303 	bfi	r3, r2, #0, #4
 8003626:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003628:	7a7b      	ldrb	r3, [r7, #9]
 800362a:	2207      	movs	r2, #7
 800362c:	f362 0306 	bfi	r3, r2, #0, #7
 8003630:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	b2da      	uxtb	r2, r3
 800363a:	7a3b      	ldrb	r3, [r7, #8]
 800363c:	f362 0305 	bfi	r3, r2, #0, #6
 8003640:	723b      	strb	r3, [r7, #8]
            break;
 8003642:	e025      	b.n	8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	e042      	b.n	80036d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	2202      	movs	r2, #2
 8003652:	f362 0304 	bfi	r3, r2, #0, #5
 8003656:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003658:	7b7b      	ldrb	r3, [r7, #13]
 800365a:	f36f 0303 	bfc	r3, #0, #4
 800365e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003660:	7b3b      	ldrb	r3, [r7, #12]
 8003662:	f36f 0303 	bfc	r3, #0, #4
 8003666:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003668:	7a7b      	ldrb	r3, [r7, #9]
 800366a:	2203      	movs	r2, #3
 800366c:	f362 0306 	bfi	r3, r2, #0, #7
 8003670:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003678:	b2da      	uxtb	r2, r3
 800367a:	7a3b      	ldrb	r3, [r7, #8]
 800367c:	f362 0305 	bfi	r3, r2, #0, #6
 8003680:	723b      	strb	r3, [r7, #8]
            break;
 8003682:	e005      	b.n	8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	e022      	b.n	80036d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e01f      	b.n	80036d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2108      	movs	r1, #8
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe f888 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80036a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80036a8:	f06f 0301 	mvn.w	r3, #1
 80036ac:	e010      	b.n	80036d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	210c      	movs	r1, #12
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe f879 	bl	80017ac <DRV_CANFDSPI_WriteWord>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80036be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80036c6:	f06f 0302 	mvn.w	r3, #2
 80036ca:	e001      	b.n	80036d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80036cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	000e0303 	.word	0x000e0303

080036dc <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
 80036e6:	460b      	mov	r3, r1
 80036e8:	71bb      	strb	r3, [r7, #6]
 80036ea:	4613      	mov	r3, r2
 80036ec:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80036f6:	f640 6307 	movw	r3, #3591	; 0xe07
 80036fa:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	1cda      	adds	r2, r3, #3
 8003706:	89b9      	ldrh	r1, [r7, #12]
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd ff94 	bl	8001638 <DRV_CANFDSPI_ReadByte>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	e020      	b.n	8003764 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8003722:	79bb      	ldrb	r3, [r7, #6]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	b2da      	uxtb	r2, r3
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	f362 0300 	bfi	r3, r2, #0, #1
 8003730:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8003732:	797b      	ldrb	r3, [r7, #5]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f362 0341 	bfi	r3, r2, #1, #1
 8003740:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8003742:	7afa      	ldrb	r2, [r7, #11]
 8003744:	89b9      	ldrh	r1, [r7, #12]
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd ffab 	bl	80016a4 <DRV_CANFDSPI_WriteByte>
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 800375a:	f06f 0301 	mvn.w	r3, #1
 800375e:	e001      	b.n	8003764 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d802      	bhi.n	8003786 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e02a      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	3b09      	subs	r3, #9
 800378a:	2b06      	cmp	r3, #6
 800378c:	d825      	bhi.n	80037da <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037b1 	.word	0x080037b1
 8003798:	080037b7 	.word	0x080037b7
 800379c:	080037bd 	.word	0x080037bd
 80037a0:	080037c3 	.word	0x080037c3
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037cf 	.word	0x080037cf
 80037ac:	080037d5 	.word	0x080037d5
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80037b0:	230c      	movs	r3, #12
 80037b2:	60fb      	str	r3, [r7, #12]
                break;
 80037b4:	e012      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 80037b6:	2310      	movs	r3, #16
 80037b8:	60fb      	str	r3, [r7, #12]
                break;
 80037ba:	e00f      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80037bc:	2314      	movs	r3, #20
 80037be:	60fb      	str	r3, [r7, #12]
                break;
 80037c0:	e00c      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80037c2:	2318      	movs	r3, #24
 80037c4:	60fb      	str	r3, [r7, #12]
                break;
 80037c6:	e009      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80037c8:	2320      	movs	r3, #32
 80037ca:	60fb      	str	r3, [r7, #12]
                break;
 80037cc:	e006      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80037ce:	2330      	movs	r3, #48	; 0x30
 80037d0:	60fb      	str	r3, [r7, #12]
                break;
 80037d2:	e003      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80037d4:	2340      	movs	r3, #64	; 0x40
 80037d6:	60fb      	str	r3, [r7, #12]
                break;
 80037d8:	e000      	b.n	80037dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80037da:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80037dc:	68fb      	ldr	r3, [r7, #12]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop

080037ec <LL_EXTI_EnableIT_0_31>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <LL_EXTI_EnableIT_0_31+0x24>)
 80037f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80037fa:	4905      	ldr	r1, [pc, #20]	; (8003810 <LL_EXTI_EnableIT_0_31+0x24>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	58000800 	.word	0x58000800

08003814 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]

}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	58000800 	.word	0x58000800

08003838 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <ReadRtcSsrValue+0x3c>)
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	b29b      	uxth	r3, r3
 8003844:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <ReadRtcSsrValue+0x3c>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	b29b      	uxth	r3, r3
 800384c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800384e:	e005      	b.n	800385c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <ReadRtcSsrValue+0x3c>)
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	b29b      	uxth	r3, r3
 800385a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d1f5      	bne.n	8003850 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8003864:	683b      	ldr	r3, [r7, #0]
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40002800 	.word	0x40002800

08003878 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	460a      	mov	r2, r1
 8003882:	71fb      	strb	r3, [r7, #7]
 8003884:	4613      	mov	r3, r2
 8003886:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8003888:	79ba      	ldrb	r2, [r7, #6]
 800388a:	491d      	ldr	r1, [pc, #116]	; (8003900 <LinkTimerAfter+0x88>)
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	440b      	add	r3, r1
 8003896:	3315      	adds	r3, #21
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d009      	beq.n	80038b6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	4916      	ldr	r1, [pc, #88]	; (8003900 <LinkTimerAfter+0x88>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	3314      	adds	r3, #20
 80038b2:	79fa      	ldrb	r2, [r7, #7]
 80038b4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80038b6:	79fa      	ldrb	r2, [r7, #7]
 80038b8:	4911      	ldr	r1, [pc, #68]	; (8003900 <LinkTimerAfter+0x88>)
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	3315      	adds	r3, #21
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80038ca:	79fa      	ldrb	r2, [r7, #7]
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <LinkTimerAfter+0x88>)
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	440b      	add	r3, r1
 80038d8:	3314      	adds	r3, #20
 80038da:	79ba      	ldrb	r2, [r7, #6]
 80038dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80038de:	79ba      	ldrb	r2, [r7, #6]
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <LinkTimerAfter+0x88>)
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3315      	adds	r3, #21
 80038ee:	79fa      	ldrb	r2, [r7, #7]
 80038f0:	701a      	strb	r2, [r3, #0]

  return;
 80038f2:	bf00      	nop
}
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000b0c 	.word	0x20000b0c

08003904 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	460a      	mov	r2, r1
 800390e:	71fb      	strb	r3, [r7, #7]
 8003910:	4613      	mov	r3, r2
 8003912:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <LinkTimerBefore+0xb8>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	79ba      	ldrb	r2, [r7, #6]
 800391c:	429a      	cmp	r2, r3
 800391e:	d032      	beq.n	8003986 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8003920:	79ba      	ldrb	r2, [r7, #6]
 8003922:	4927      	ldr	r1, [pc, #156]	; (80039c0 <LinkTimerBefore+0xbc>)
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	3314      	adds	r3, #20
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	4922      	ldr	r1, [pc, #136]	; (80039c0 <LinkTimerBefore+0xbc>)
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3315      	adds	r3, #21
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8003948:	79fa      	ldrb	r2, [r7, #7]
 800394a:	491d      	ldr	r1, [pc, #116]	; (80039c0 <LinkTimerBefore+0xbc>)
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	3315      	adds	r3, #21
 8003958:	79ba      	ldrb	r2, [r7, #6]
 800395a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800395c:	79fa      	ldrb	r2, [r7, #7]
 800395e:	4918      	ldr	r1, [pc, #96]	; (80039c0 <LinkTimerBefore+0xbc>)
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	3314      	adds	r3, #20
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8003970:	79ba      	ldrb	r2, [r7, #6]
 8003972:	4913      	ldr	r1, [pc, #76]	; (80039c0 <LinkTimerBefore+0xbc>)
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	440b      	add	r3, r1
 800397e:	3314      	adds	r3, #20
 8003980:	79fa      	ldrb	r2, [r7, #7]
 8003982:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8003984:	e014      	b.n	80039b0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8003986:	79fa      	ldrb	r2, [r7, #7]
 8003988:	490d      	ldr	r1, [pc, #52]	; (80039c0 <LinkTimerBefore+0xbc>)
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	440b      	add	r3, r1
 8003994:	3315      	adds	r3, #21
 8003996:	79ba      	ldrb	r2, [r7, #6]
 8003998:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800399a:	79ba      	ldrb	r2, [r7, #6]
 800399c:	4908      	ldr	r1, [pc, #32]	; (80039c0 <LinkTimerBefore+0xbc>)
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	440b      	add	r3, r1
 80039a8:	3314      	adds	r3, #20
 80039aa:	79fa      	ldrb	r2, [r7, #7]
 80039ac:	701a      	strb	r2, [r3, #0]
  return;
 80039ae:	bf00      	nop
}
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000b9c 	.word	0x20000b9c
 80039c0:	20000b0c 	.word	0x20000b0c

080039c4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80039ce:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <linkTimer+0x144>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d118      	bne.n	8003a0a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80039d8:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <linkTimer+0x144>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <linkTimer+0x148>)
 80039e0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80039e2:	4a49      	ldr	r2, [pc, #292]	; (8003b08 <linkTimer+0x144>)
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80039e8:	79fa      	ldrb	r2, [r7, #7]
 80039ea:	4949      	ldr	r1, [pc, #292]	; (8003b10 <linkTimer+0x14c>)
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	3315      	adds	r3, #21
 80039f8:	2206      	movs	r2, #6
 80039fa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80039fc:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <linkTimer+0x150>)
 80039fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003a02:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	81fb      	strh	r3, [r7, #14]
 8003a08:	e078      	b.n	8003afc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8003a0a:	f000 f909 	bl	8003c20 <ReturnTimeElapsed>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8003a12:	79fa      	ldrb	r2, [r7, #7]
 8003a14:	493e      	ldr	r1, [pc, #248]	; (8003b10 <linkTimer+0x14c>)
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	3308      	adds	r3, #8
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	89fb      	ldrh	r3, [r7, #14]
 8003a26:	79fa      	ldrb	r2, [r7, #7]
 8003a28:	4419      	add	r1, r3
 8003a2a:	4839      	ldr	r0, [pc, #228]	; (8003b10 <linkTimer+0x14c>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4403      	add	r3, r0
 8003a36:	3308      	adds	r3, #8
 8003a38:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8003a3a:	79fa      	ldrb	r2, [r7, #7]
 8003a3c:	4934      	ldr	r1, [pc, #208]	; (8003b10 <linkTimer+0x14c>)
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	3308      	adds	r3, #8
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <linkTimer+0x144>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	4619      	mov	r1, r3
 8003a56:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <linkTimer+0x14c>)
 8003a58:	460b      	mov	r3, r1
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	3308      	adds	r3, #8
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d337      	bcc.n	8003adc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003a6c:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <linkTimer+0x144>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8003a72:	7b7a      	ldrb	r2, [r7, #13]
 8003a74:	4926      	ldr	r1, [pc, #152]	; (8003b10 <linkTimer+0x14c>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3315      	adds	r3, #21
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003a86:	e013      	b.n	8003ab0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003a88:	7b7a      	ldrb	r2, [r7, #13]
 8003a8a:	4921      	ldr	r1, [pc, #132]	; (8003b10 <linkTimer+0x14c>)
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	440b      	add	r3, r1
 8003a96:	3315      	adds	r3, #21
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003a9c:	7b7a      	ldrb	r2, [r7, #13]
 8003a9e:	491c      	ldr	r1, [pc, #112]	; (8003b10 <linkTimer+0x14c>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3315      	adds	r3, #21
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003ab0:	7b3b      	ldrb	r3, [r7, #12]
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d00b      	beq.n	8003ace <linkTimer+0x10a>
 8003ab6:	7b3a      	ldrb	r2, [r7, #12]
 8003ab8:	4915      	ldr	r1, [pc, #84]	; (8003b10 <linkTimer+0x14c>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d2dc      	bcs.n	8003a88 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003ace:	7b7a      	ldrb	r2, [r7, #13]
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fecf 	bl	8003878 <LinkTimerAfter>
 8003ada:	e00f      	b.n	8003afc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <linkTimer+0x144>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ff0c 	bl	8003904 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <linkTimer+0x144>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <linkTimer+0x148>)
 8003af4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <linkTimer+0x144>)
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003afc:	89fb      	ldrh	r3, [r7, #14]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000b9c 	.word	0x20000b9c
 8003b0c:	20000b9d 	.word	0x20000b9d
 8003b10:	20000b0c 	.word	0x20000b0c
 8003b14:	20000ba0 	.word	0x20000ba0

08003b18 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460a      	mov	r2, r1
 8003b22:	71fb      	strb	r3, [r7, #7]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003b28:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <UnlinkTimer+0xf8>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	79fa      	ldrb	r2, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d111      	bne.n	8003b58 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <UnlinkTimer+0xf8>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <UnlinkTimer+0xfc>)
 8003b3c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003b3e:	79fa      	ldrb	r2, [r7, #7]
 8003b40:	4935      	ldr	r1, [pc, #212]	; (8003c18 <UnlinkTimer+0x100>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	440b      	add	r3, r1
 8003b4c:	3315      	adds	r3, #21
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <UnlinkTimer+0xf8>)
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e03e      	b.n	8003bd6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003b58:	79fa      	ldrb	r2, [r7, #7]
 8003b5a:	492f      	ldr	r1, [pc, #188]	; (8003c18 <UnlinkTimer+0x100>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	3314      	adds	r3, #20
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003b6c:	79fa      	ldrb	r2, [r7, #7]
 8003b6e:	492a      	ldr	r1, [pc, #168]	; (8003c18 <UnlinkTimer+0x100>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	3315      	adds	r3, #21
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003b80:	79f9      	ldrb	r1, [r7, #7]
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	4824      	ldr	r0, [pc, #144]	; (8003c18 <UnlinkTimer+0x100>)
 8003b86:	460b      	mov	r3, r1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	440b      	add	r3, r1
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4403      	add	r3, r0
 8003b90:	3315      	adds	r3, #21
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2d8      	uxtb	r0, r3
 8003b96:	4920      	ldr	r1, [pc, #128]	; (8003c18 <UnlinkTimer+0x100>)
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3315      	adds	r3, #21
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003ba8:	7bbb      	ldrb	r3, [r7, #14]
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d013      	beq.n	8003bd6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8003bae:	79f9      	ldrb	r1, [r7, #7]
 8003bb0:	7bba      	ldrb	r2, [r7, #14]
 8003bb2:	4819      	ldr	r0, [pc, #100]	; (8003c18 <UnlinkTimer+0x100>)
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	440b      	add	r3, r1
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4403      	add	r3, r0
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b2d8      	uxtb	r0, r3
 8003bc4:	4914      	ldr	r1, [pc, #80]	; (8003c18 <UnlinkTimer+0x100>)
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8003bd6:	79fa      	ldrb	r2, [r7, #7]
 8003bd8:	490f      	ldr	r1, [pc, #60]	; (8003c18 <UnlinkTimer+0x100>)
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	330c      	adds	r3, #12
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <UnlinkTimer+0xf8>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d107      	bne.n	8003c04 <UnlinkTimer+0xec>
 8003bf4:	79bb      	ldrb	r3, [r7, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <UnlinkTimer+0x104>)
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	601a      	str	r2, [r3, #0]
  }

  return;
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
}
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000b9c 	.word	0x20000b9c
 8003c14:	20000b9d 	.word	0x20000b9d
 8003c18:	20000b0c 	.word	0x20000b0c
 8003c1c:	20000ba0 	.word	0x20000ba0

08003c20 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <ReturnTimeElapsed+0x70>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d026      	beq.n	8003c7e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003c30:	f7ff fe02 	bl	8003838 <ReadRtcSsrValue>
 8003c34:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <ReturnTimeElapsed+0x70>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d805      	bhi.n	8003c4c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <ReturnTimeElapsed+0x70>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	e00a      	b.n	8003c62 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <ReturnTimeElapsed+0x74>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <ReturnTimeElapsed+0x70>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <ReturnTimeElapsed+0x78>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <ReturnTimeElapsed+0x7c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	40d3      	lsrs	r3, r2
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e001      	b.n	8003c82 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	b29b      	uxth	r3, r3
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000ba0 	.word	0x20000ba0
 8003c94:	20000ba8 	.word	0x20000ba8
 8003c98:	20000ba6 	.word	0x20000ba6
 8003c9c:	20000ba5 	.word	0x20000ba5

08003ca0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d108      	bne.n	8003cc2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003cb0:	f7ff fdc2 	bl	8003838 <ReadRtcSsrValue>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <RestartWakeupCounter+0x9c>)
 8003cb8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f001 fba1 	bl	8005402 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003cc0:	e039      	b.n	8003d36 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d803      	bhi.n	8003cd0 <RestartWakeupCounter+0x30>
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <RestartWakeupCounter+0xa0>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d002      	beq.n	8003cd6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003cd6:	bf00      	nop
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <RestartWakeupCounter+0xa4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f8      	beq.n	8003cd8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <RestartWakeupCounter+0xa4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <RestartWakeupCounter+0xa4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003cf6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <RestartWakeupCounter+0xa8>)
 8003cfa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cfe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003d00:	2003      	movs	r0, #3
 8003d02:	f001 fb8c 	bl	800541e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <RestartWakeupCounter+0xac>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	490e      	ldr	r1, [pc, #56]	; (8003d4c <RestartWakeupCounter+0xac>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003d16:	f7ff fd8f 	bl	8003838 <ReadRtcSsrValue>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <RestartWakeupCounter+0x9c>)
 8003d1e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <RestartWakeupCounter+0xa4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <RestartWakeupCounter+0xa4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d2e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003d30:	f3af 8000 	nop.w
  return ;
 8003d34:	bf00      	nop
}
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000ba0 	.word	0x20000ba0
 8003d40:	20000ba5 	.word	0x20000ba5
 8003d44:	20000bf4 	.word	0x20000bf4
 8003d48:	58000800 	.word	0x58000800
 8003d4c:	40002800 	.word	0x40002800

08003d50 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003d56:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <RescheduleTimerList+0x11c>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d107      	bne.n	8003d74 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003d64:	bf00      	nop
 8003d66:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <RescheduleTimerList+0x120>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f8      	bne.n	8003d66 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003d74:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <RescheduleTimerList+0x120>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <RescheduleTimerList+0x120>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d82:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <RescheduleTimerList+0x124>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	493a      	ldr	r1, [pc, #232]	; (8003e78 <RescheduleTimerList+0x128>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	440b      	add	r3, r1
 8003d98:	3308      	adds	r3, #8
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003d9e:	f7ff ff3f 	bl	8003c20 <ReturnTimeElapsed>
 8003da2:	4603      	mov	r3, r0
 8003da4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d205      	bcs.n	8003dba <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003db2:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <RescheduleTimerList+0x12c>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e04d      	b.n	8003e56 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <RescheduleTimerList+0x130>)
 8003dbe:	8812      	ldrh	r2, [r2, #0]
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d906      	bls.n	8003dda <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003dcc:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <RescheduleTimerList+0x130>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <RescheduleTimerList+0x12c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e03d      	b.n	8003e56 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <RescheduleTimerList+0x12c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003dea:	e034      	b.n	8003e56 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	4922      	ldr	r1, [pc, #136]	; (8003e78 <RescheduleTimerList+0x128>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	440b      	add	r3, r1
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d20a      	bcs.n	8003e1a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	491c      	ldr	r1, [pc, #112]	; (8003e78 <RescheduleTimerList+0x128>)
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	440b      	add	r3, r1
 8003e12:	3308      	adds	r3, #8
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e013      	b.n	8003e42 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	4916      	ldr	r1, [pc, #88]	; (8003e78 <RescheduleTimerList+0x128>)
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	3308      	adds	r3, #8
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	1ac9      	subs	r1, r1, r3
 8003e32:	4811      	ldr	r0, [pc, #68]	; (8003e78 <RescheduleTimerList+0x128>)
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4403      	add	r3, r0
 8003e3e:	3308      	adds	r3, #8
 8003e40:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <RescheduleTimerList+0x128>)
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	3315      	adds	r3, #21
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d1c7      	bne.n	8003dec <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003e5c:	89bb      	ldrh	r3, [r7, #12]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff ff1e 	bl	8003ca0 <RestartWakeupCounter>

  return ;
 8003e64:	bf00      	nop
}
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40002800 	.word	0x40002800
 8003e70:	20000bf4 	.word	0x20000bf4
 8003e74:	20000b9c 	.word	0x20000b9c
 8003e78:	20000b0c 	.word	0x20000b0c
 8003e7c:	20000ba4 	.word	0x20000ba4
 8003e80:	20000baa 	.word	0x20000baa

08003e84 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003e90:	4b5e      	ldr	r3, [pc, #376]	; (800400c <HW_TS_Init+0x188>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	22ca      	movs	r2, #202	; 0xca
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
 8003e98:	4b5c      	ldr	r3, [pc, #368]	; (800400c <HW_TS_Init+0x188>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2253      	movs	r2, #83	; 0x53
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ea0:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <HW_TS_Init+0x18c>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <HW_TS_Init+0x18c>)
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003eac:	4b58      	ldr	r3, [pc, #352]	; (8004010 <HW_TS_Init+0x18c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f1c3 0304 	rsb	r3, r3, #4
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b55      	ldr	r3, [pc, #340]	; (8004014 <HW_TS_Init+0x190>)
 8003ec0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003ec2:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HW_TS_Init+0x18c>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eca:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003ece:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	fa92 f2a2 	rbit	r2, r2
 8003ed6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d101      	bne.n	8003ee6 <HW_TS_Init+0x62>
  {
    return 32U;
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	e003      	b.n	8003eee <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	40d3      	lsrs	r3, r2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	4b48      	ldr	r3, [pc, #288]	; (8004018 <HW_TS_Init+0x194>)
 8003ef8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003efa:	4b45      	ldr	r3, [pc, #276]	; (8004010 <HW_TS_Init+0x18c>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HW_TS_Init+0x198>)
 8003f0c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HW_TS_Init+0x198>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	4a40      	ldr	r2, [pc, #256]	; (8004018 <HW_TS_Init+0x194>)
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f20:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <HW_TS_Init+0x190>)
 8003f22:	7812      	ldrb	r2, [r2, #0]
 8003f24:	40d3      	lsrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d904      	bls.n	8003f3c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HW_TS_Init+0x19c>)
 8003f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	e003      	b.n	8003f44 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HW_TS_Init+0x19c>)
 8003f42:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003f44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f48:	f7ff fc64 	bl	8003814 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003f4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f50:	f7ff fc4c 	bl	80037ec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d13d      	bne.n	8003fd6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003f5a:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HW_TS_Init+0x1a0>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003f60:	4b31      	ldr	r3, [pc, #196]	; (8004028 <HW_TS_Init+0x1a4>)
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e00c      	b.n	8003f88 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003f6e:	7ffa      	ldrb	r2, [r7, #31]
 8003f70:	492e      	ldr	r1, [pc, #184]	; (800402c <HW_TS_Init+0x1a8>)
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	3301      	adds	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d9ef      	bls.n	8003f6e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HW_TS_Init+0x1ac>)
 8003f90:	2206      	movs	r2, #6
 8003f92:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HW_TS_Init+0x188>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HW_TS_Init+0x188>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HW_TS_Init+0x188>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <HW_TS_Init+0x188>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003fb4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003fb6:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <HW_TS_Init+0x1b0>)
 8003fb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003fbc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	f001 fa2d 	bl	800541e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HW_TS_Init+0x188>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <HW_TS_Init+0x188>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	e009      	b.n	8003fea <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <HW_TS_Init+0x188>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003fe4:	2003      	movs	r0, #3
 8003fe6:	f001 fa0c 	bl	8005402 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HW_TS_Init+0x188>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	22ff      	movs	r2, #255	; 0xff
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2103      	movs	r1, #3
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f001 f9c1 	bl	800537e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	f001 f9d8 	bl	80053b2 <HAL_NVIC_EnableIRQ>

  return;
 8004002:	bf00      	nop
}
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000bf4 	.word	0x20000bf4
 8004010:	40002800 	.word	0x40002800
 8004014:	20000ba5 	.word	0x20000ba5
 8004018:	20000ba6 	.word	0x20000ba6
 800401c:	20000ba8 	.word	0x20000ba8
 8004020:	20000baa 	.word	0x20000baa
 8004024:	20000ba4 	.word	0x20000ba4
 8004028:	20000ba0 	.word	0x20000ba0
 800402c:	20000b0c 	.word	0x20000b0c
 8004030:	20000b9c 	.word	0x20000b9c
 8004034:	58000800 	.word	0x58000800

08004038 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8004038:	b480      	push	{r7}
 800403a:	b08b      	sub	sp, #44	; 0x2c
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404e:	f3ef 8310 	mrs	r3, PRIMASK
 8004052:	61fb      	str	r3, [r7, #28]
  return(result);
 8004054:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004056:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8004058:	b672      	cpsid	i
}
 800405a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800405c:	e004      	b.n	8004068 <HW_TS_Create+0x30>
  {
    loop++;
 800405e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004062:	3301      	adds	r3, #1
 8004064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8004068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800406c:	2b05      	cmp	r3, #5
 800406e:	d80c      	bhi.n	800408a <HW_TS_Create+0x52>
 8004070:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004074:	492c      	ldr	r1, [pc, #176]	; (8004128 <HW_TS_Create+0xf0>)
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	330c      	adds	r3, #12
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e9      	bne.n	800405e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800408a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800408e:	2b06      	cmp	r3, #6
 8004090:	d038      	beq.n	8004104 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8004092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004096:	4924      	ldr	r1, [pc, #144]	; (8004128 <HW_TS_Create+0xf0>)
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	330c      	adds	r3, #12
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80040b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040b8:	491b      	ldr	r1, [pc, #108]	; (8004128 <HW_TS_Create+0xf0>)
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	440b      	add	r3, r1
 80040c4:	3310      	adds	r3, #16
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80040ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040ce:	4916      	ldr	r1, [pc, #88]	; (8004128 <HW_TS_Create+0xf0>)
 80040d0:	4613      	mov	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	440b      	add	r3, r1
 80040da:	330d      	adds	r3, #13
 80040dc:	79fa      	ldrb	r2, [r7, #7]
 80040de:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80040e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040e4:	4910      	ldr	r1, [pc, #64]	; (8004128 <HW_TS_Create+0xf0>)
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	440b      	add	r3, r1
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040fa:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004102:	e008      	b.n	8004116 <HW_TS_Create+0xde>
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f383 8810 	msr	PRIMASK, r3
}
 800410e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8004116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800411a:	4618      	mov	r0, r3
 800411c:	372c      	adds	r7, #44	; 0x2c
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000b0c 	.word	0x20000b0c

0800412c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	60fb      	str	r3, [r7, #12]
  return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800413e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004140:	b672      	cpsid	i
}
 8004142:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8004144:	2003      	movs	r0, #3
 8004146:	f001 f942 	bl	80053ce <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800414a:	4b34      	ldr	r3, [pc, #208]	; (800421c <HW_TS_Stop+0xf0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	22ca      	movs	r2, #202	; 0xca
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
 8004152:	4b32      	ldr	r3, [pc, #200]	; (800421c <HW_TS_Stop+0xf0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2253      	movs	r2, #83	; 0x53
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800415a:	79fa      	ldrb	r2, [r7, #7]
 800415c:	4930      	ldr	r1, [pc, #192]	; (8004220 <HW_TS_Stop+0xf4>)
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	440b      	add	r3, r1
 8004168:	330c      	adds	r3, #12
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d142      	bne.n	80041f8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fcce 	bl	8003b18 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HW_TS_Stop+0xf8>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d12f      	bne.n	80041e8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HW_TS_Stop+0xfc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d107      	bne.n	80041a6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8004196:	bf00      	nop
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <HW_TS_Stop+0xf0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f8      	bne.n	8004198 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HW_TS_Stop+0xf0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HW_TS_Stop+0xf0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80041b6:	bf00      	nop
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <HW_TS_Stop+0xf0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f8      	beq.n	80041b8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HW_TS_Stop+0xf0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <HW_TS_Stop+0xf0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80041d6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <HW_TS_Stop+0x100>)
 80041da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041de:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80041e0:	2003      	movs	r0, #3
 80041e2:	f001 f91c 	bl	800541e <HAL_NVIC_ClearPendingIRQ>
 80041e6:	e007      	b.n	80041f8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HW_TS_Stop+0x104>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	7cfa      	ldrb	r2, [r7, #19]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80041f4:	f7ff fdac 	bl	8003d50 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <HW_TS_Stop+0xf0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004200:	2003      	movs	r0, #3
 8004202:	f001 f8d6 	bl	80053b2 <HAL_NVIC_EnableIRQ>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8004212:	bf00      	nop
}
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000bf4 	.word	0x20000bf4
 8004220:	20000b0c 	.word	0x20000b0c
 8004224:	20000b9c 	.word	0x20000b9c
 8004228:	40002800 	.word	0x40002800
 800422c:	58000800 	.word	0x58000800
 8004230:	20000b9d 	.word	0x20000b9d

08004234 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	6039      	str	r1, [r7, #0]
 800423e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004240:	79fa      	ldrb	r2, [r7, #7]
 8004242:	493b      	ldr	r1, [pc, #236]	; (8004330 <HW_TS_Start+0xfc>)
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	440b      	add	r3, r1
 800424e:	330c      	adds	r3, #12
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d103      	bne.n	8004260 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff66 	bl	800412c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004260:	f3ef 8310 	mrs	r3, PRIMASK
 8004264:	60fb      	str	r3, [r7, #12]
  return(result);
 8004266:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800426a:	b672      	cpsid	i
}
 800426c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800426e:	2003      	movs	r0, #3
 8004270:	f001 f8ad 	bl	80053ce <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004274:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HW_TS_Start+0x100>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	22ca      	movs	r2, #202	; 0xca
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
 800427c:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <HW_TS_Start+0x100>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2253      	movs	r2, #83	; 0x53
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8004284:	79fa      	ldrb	r2, [r7, #7]
 8004286:	492a      	ldr	r1, [pc, #168]	; (8004330 <HW_TS_Start+0xfc>)
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	330c      	adds	r3, #12
 8004294:	2202      	movs	r2, #2
 8004296:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8004298:	79fa      	ldrb	r2, [r7, #7]
 800429a:	4925      	ldr	r1, [pc, #148]	; (8004330 <HW_TS_Start+0xfc>)
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3308      	adds	r3, #8
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80042ac:	79fa      	ldrb	r2, [r7, #7]
 80042ae:	4920      	ldr	r1, [pc, #128]	; (8004330 <HW_TS_Start+0xfc>)
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	440b      	add	r3, r1
 80042ba:	3304      	adds	r3, #4
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fb7e 	bl	80039c4 <linkTimer>
 80042c8:	4603      	mov	r3, r0
 80042ca:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HW_TS_Start+0x104>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HW_TS_Start+0x108>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	7c7a      	ldrb	r2, [r7, #17]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d002      	beq.n	80042e4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80042de:	f7ff fd37 	bl	8003d50 <RescheduleTimerList>
 80042e2:	e013      	b.n	800430c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80042e4:	79fa      	ldrb	r2, [r7, #7]
 80042e6:	4912      	ldr	r1, [pc, #72]	; (8004330 <HW_TS_Start+0xfc>)
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	3308      	adds	r3, #8
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	8a7b      	ldrh	r3, [r7, #18]
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	1ac9      	subs	r1, r1, r3
 80042fc:	480c      	ldr	r0, [pc, #48]	; (8004330 <HW_TS_Start+0xfc>)
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4403      	add	r3, r0
 8004308:	3308      	adds	r3, #8
 800430a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HW_TS_Start+0x100>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004314:	2003      	movs	r0, #3
 8004316:	f001 f84c 	bl	80053b2 <HAL_NVIC_EnableIRQ>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8004326:	bf00      	nop
}
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000b0c 	.word	0x20000b0c
 8004334:	20000bf4 	.word	0x20000bf4
 8004338:	20000b9c 	.word	0x20000b9c
 800433c:	20000b9d 	.word	0x20000b9d

08004340 <LL_RCC_LSE_SetDriveCapability>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f023 0218 	bic.w	r2, r3, #24
 8004354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_AHB2_GRP1_EnableClock>:
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800437a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004390:	68fb      	ldr	r3, [r7, #12]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043a2:	f000 fe2b 	bl	8004ffc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80043a6:	f7fc ff6f 	bl	8001288 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043aa:	f000 f821 	bl	80043f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80043ae:	f000 f895 	bl	80044dc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80043b2:	f000 f8b3 	bl	800451c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043b6:	f000 fa31 	bl	800481c <MX_GPIO_Init>
  MX_SPI1_Init();
 80043ba:	f000 f93f 	bl	800463c <MX_SPI1_Init>
  MX_SPI2_Init();
 80043be:	f000 f97b 	bl	80046b8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80043c2:	f000 f9b7 	bl	8004734 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80043c6:	f000 fa01 	bl	80047cc <MX_USB_PCD_Init>
  MX_PKA_Init();
 80043ca:	f000 f8bb 	bl	8004544 <MX_PKA_Init>
  MX_RTC_Init();
 80043ce:	f000 f8d5 	bl	800457c <MX_RTC_Init>
  MX_RF_Init();
 80043d2:	f000 f8cb 	bl	800456c <MX_RF_Init>


  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fd f90a 	bl	80015f0 <DRV_CANFDSPI_Reset>
  APP_Initialize();
 80043dc:	f7fc f92e 	bl	800063c <APP_Initialize>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80043e0:	f7fc ff60 	bl	80012a4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80043e4:	f7fd f8c5 	bl	8001572 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    APP_Tasks();
 80043e8:	f7fc f93a 	bl	8000660 <APP_Tasks>
    MX_APPE_Process();
 80043ec:	e7fa      	b.n	80043e4 <main+0x46>
	...

080043f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b09a      	sub	sp, #104	; 0x68
 80043f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043f6:	f107 0320 	add.w	r3, r7, #32
 80043fa:	2248      	movs	r2, #72	; 0x48
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f007 fed4 	bl	800c1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	611a      	str	r2, [r3, #16]
 8004412:	615a      	str	r2, [r3, #20]
 8004414:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004416:	f001 fb8d 	bl	8005b34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800441a:	2010      	movs	r0, #16
 800441c:	f7ff ff90 	bl	8004340 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <SystemClock_Config+0xe8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <SystemClock_Config+0xe8>)
 800442a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <SystemClock_Config+0xe8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800443c:	232f      	movs	r3, #47	; 0x2f
 800443e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004446:	2301      	movs	r3, #1
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800444a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004450:	2301      	movs	r3, #1
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004458:	2300      	movs	r3, #0
 800445a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800445c:	2360      	movs	r3, #96	; 0x60
 800445e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004460:	2305      	movs	r3, #5
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004464:	2302      	movs	r3, #2
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004468:	2301      	movs	r3, #1
 800446a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800446c:	2300      	movs	r3, #0
 800446e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8004470:	2320      	movs	r3, #32
 8004472:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004478:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800447a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800447e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004484:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004486:	f107 0320 	add.w	r3, r7, #32
 800448a:	4618      	mov	r0, r3
 800448c:	f001 fee6 	bl	800625c <HAL_RCC_OscConfig>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004496:	f000 fa2b 	bl	80048f0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800449a:	236f      	movs	r3, #111	; 0x6f
 800449c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800449e:	2303      	movs	r3, #3
 80044a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2103      	movs	r1, #3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 fa42 	bl	8006944 <HAL_RCC_ClockConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 80044c6:	f000 fa13 	bl	80048f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80044ca:	f002 fffd 	bl	80074c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80044ce:	bf00      	nop
 80044d0:	3768      	adds	r7, #104	; 0x68
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	58000400 	.word	0x58000400

080044dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b094      	sub	sp, #80	; 0x50
 80044e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044e2:	463b      	mov	r3, r7
 80044e4:	2250      	movs	r2, #80	; 0x50
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f007 fe5f 	bl	800c1ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80044ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80044f2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80044f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80044fa:	2300      	movs	r3, #0
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80044fe:	2310      	movs	r3, #16
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004502:	463b      	mov	r3, r7
 8004504:	4618      	mov	r0, r3
 8004506:	f002 fe69 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8004510:	f000 f9ee 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004514:	bf00      	nop
 8004516:	3750      	adds	r7, #80	; 0x50
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <MX_IPCC_Init+0x20>)
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <MX_IPCC_Init+0x24>)
 8004524:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8004526:	4805      	ldr	r0, [pc, #20]	; (800453c <MX_IPCC_Init+0x20>)
 8004528:	f001 f94c 	bl	80057c4 <HAL_IPCC_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8004532:	f000 f9dd 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000bac 	.word	0x20000bac
 8004540:	58000c00 	.word	0x58000c00

08004544 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <MX_PKA_Init+0x20>)
 800454a:	4a07      	ldr	r2, [pc, #28]	; (8004568 <MX_PKA_Init+0x24>)
 800454c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 800454e:	4805      	ldr	r0, [pc, #20]	; (8004564 <MX_PKA_Init+0x20>)
 8004550:	f001 fac1 	bl	8005ad6 <HAL_PKA_Init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 800455a:	f000 f9c9 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000be8 	.word	0x20000be8
 8004568:	58002000 	.word	0x58002000

0800456c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004590:	2300      	movs	r3, #0
 8004592:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <MX_RTC_Init+0xb8>)
 8004596:	4a28      	ldr	r2, [pc, #160]	; (8004638 <MX_RTC_Init+0xbc>)
 8004598:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800459a:	4b26      	ldr	r3, [pc, #152]	; (8004634 <MX_RTC_Init+0xb8>)
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80045a0:	4b24      	ldr	r3, [pc, #144]	; (8004634 <MX_RTC_Init+0xb8>)
 80045a2:	220f      	movs	r2, #15
 80045a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <MX_RTC_Init+0xb8>)
 80045a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80045ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <MX_RTC_Init+0xb8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80045b4:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <MX_RTC_Init+0xb8>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80045ba:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <MX_RTC_Init+0xb8>)
 80045bc:	2200      	movs	r2, #0
 80045be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80045c0:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <MX_RTC_Init+0xb8>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80045c6:	481b      	ldr	r0, [pc, #108]	; (8004634 <MX_RTC_Init+0xb8>)
 80045c8:	f003 f896 	bl	80076f8 <HAL_RTC_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80045d2:	f000 f98d 	bl	80048f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80045da:	2300      	movs	r3, #0
 80045dc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80045de:	2300      	movs	r3, #0
 80045e0:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	2201      	movs	r2, #1
 80045f2:	4619      	mov	r1, r3
 80045f4:	480f      	ldr	r0, [pc, #60]	; (8004634 <MX_RTC_Init+0xb8>)
 80045f6:	f003 f92f 	bl	8007858 <HAL_RTC_SetTime>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8004600:	f000 f976 	bl	80048f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004604:	2301      	movs	r3, #1
 8004606:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004608:	2301      	movs	r3, #1
 800460a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800460c:	2301      	movs	r3, #1
 800460e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004610:	2300      	movs	r3, #0
 8004612:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004614:	463b      	mov	r3, r7
 8004616:	2201      	movs	r2, #1
 8004618:	4619      	mov	r1, r3
 800461a:	4806      	ldr	r0, [pc, #24]	; (8004634 <MX_RTC_Init+0xb8>)
 800461c:	f003 f9e0 	bl	80079e0 <HAL_RTC_SetDate>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8004626:	f000 f963 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000bf4 	.word	0x20000bf4
 8004638:	40002800 	.word	0x40002800

0800463c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004642:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <MX_SPI1_Init+0x78>)
 8004644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800464c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800464e:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004654:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004656:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800465a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800465c:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <MX_SPI1_Init+0x74>)
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004664:	2200      	movs	r2, #0
 8004666:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004668:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <MX_SPI1_Init+0x74>)
 800466a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004672:	2208      	movs	r2, #8
 8004674:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004678:	2200      	movs	r2, #0
 800467a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <MX_SPI1_Init+0x74>)
 800467e:	2200      	movs	r2, #0
 8004680:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004684:	2200      	movs	r2, #0
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <MX_SPI1_Init+0x74>)
 800468a:	2207      	movs	r2, #7
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <MX_SPI1_Init+0x74>)
 8004696:	2208      	movs	r2, #8
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800469a:	4805      	ldr	r0, [pc, #20]	; (80046b0 <MX_SPI1_Init+0x74>)
 800469c:	f003 fabe 	bl	8007c1c <HAL_SPI_Init>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80046a6:	f000 f923 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000c18 	.word	0x20000c18
 80046b4:	40013000 	.word	0x40013000

080046b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <MX_SPI2_Init+0x74>)
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <MX_SPI2_Init+0x78>)
 80046c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <MX_SPI2_Init+0x74>)
 80046c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <MX_SPI2_Init+0x74>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <MX_SPI2_Init+0x74>)
 80046d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80046d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <MX_SPI2_Init+0x74>)
 80046da:	2200      	movs	r2, #0
 80046dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <MX_SPI2_Init+0x74>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <MX_SPI2_Init+0x74>)
 80046e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <MX_SPI2_Init+0x74>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <MX_SPI2_Init+0x74>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <MX_SPI2_Init+0x74>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <MX_SPI2_Init+0x74>)
 8004700:	2200      	movs	r2, #0
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <MX_SPI2_Init+0x74>)
 8004706:	2207      	movs	r2, #7
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <MX_SPI2_Init+0x74>)
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <MX_SPI2_Init+0x74>)
 8004712:	2208      	movs	r2, #8
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004716:	4805      	ldr	r0, [pc, #20]	; (800472c <MX_SPI2_Init+0x74>)
 8004718:	f003 fa80 	bl	8007c1c <HAL_SPI_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004722:	f000 f8e5 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000c7c 	.word	0x20000c7c
 8004730:	40003800 	.word	0x40003800

08004734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004738:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 800473a:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <MX_USART1_UART_Init+0x94>)
 800473c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004746:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 800474e:	2200      	movs	r2, #0
 8004750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 800475a:	220c      	movs	r2, #12
 800475c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800475e:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 800476c:	2200      	movs	r2, #0
 800476e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004772:	2200      	movs	r2, #0
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004778:	2200      	movs	r2, #0
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800477c:	4811      	ldr	r0, [pc, #68]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 800477e:	f003 fe87 	bl	8008490 <HAL_UART_Init>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004788:	f000 f8b2 	bl	80048f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800478c:	2100      	movs	r1, #0
 800478e:	480d      	ldr	r0, [pc, #52]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 8004790:	f004 fb48 	bl	8008e24 <HAL_UARTEx_SetTxFifoThreshold>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800479a:	f000 f8a9 	bl	80048f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800479e:	2100      	movs	r1, #0
 80047a0:	4808      	ldr	r0, [pc, #32]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 80047a2:	f004 fb7d 	bl	8008ea0 <HAL_UARTEx_SetRxFifoThreshold>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80047ac:	f000 f8a0 	bl	80048f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80047b0:	4804      	ldr	r0, [pc, #16]	; (80047c4 <MX_USART1_UART_Init+0x90>)
 80047b2:	f004 fafe 	bl	8008db2 <HAL_UARTEx_DisableFifoMode>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80047bc:	f000 f898 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000ce0 	.word	0x20000ce0
 80047c8:	40013800 	.word	0x40013800

080047cc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047d2:	4a11      	ldr	r2, [pc, #68]	; (8004818 <MX_USB_PCD_Init+0x4c>)
 80047d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80047d6:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047d8:	2208      	movs	r2, #8
 80047da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047de:	2202      	movs	r2, #2
 80047e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047e4:	2202      	movs	r2, #2
 80047e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <MX_USB_PCD_Init+0x48>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004800:	4804      	ldr	r0, [pc, #16]	; (8004814 <MX_USB_PCD_Init+0x48>)
 8004802:	f001 f865 	bl	80058d0 <HAL_PCD_Init>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800480c:	f000 f870 	bl	80048f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000d74 	.word	0x20000d74
 8004818:	40006800 	.word	0x40006800

0800481c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004822:	1d3b      	adds	r3, r7, #4
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004830:	2004      	movs	r0, #4
 8004832:	f7ff fd9b 	bl	800436c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004836:	2001      	movs	r0, #1
 8004838:	f7ff fd98 	bl	800436c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800483c:	2002      	movs	r0, #2
 800483e:	f7ff fd95 	bl	800436c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004842:	2008      	movs	r0, #8
 8004844:	f7ff fd92 	bl	800436c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN_CS_Pin, GPIO_PIN_RESET);
 8004848:	2200      	movs	r2, #0
 800484a:	2129      	movs	r1, #41	; 0x29
 800484c:	4825      	ldr	r0, [pc, #148]	; (80048e4 <MX_GPIO_Init+0xc8>)
 800484e:	f000 ff7d 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8004852:	2200      	movs	r2, #0
 8004854:	2123      	movs	r1, #35	; 0x23
 8004856:	4824      	ldr	r0, [pc, #144]	; (80048e8 <MX_GPIO_Init+0xcc>)
 8004858:	f000 ff78 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN_CS_Pin;
 800485c:	2329      	movs	r3, #41	; 0x29
 800485e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004860:	2301      	movs	r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	4619      	mov	r1, r3
 8004870:	481c      	ldr	r0, [pc, #112]	; (80048e4 <MX_GPIO_Init+0xc8>)
 8004872:	f000 fde3 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 8004876:	2310      	movs	r3, #16
 8004878:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800487a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800487e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004880:	2301      	movs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4816      	ldr	r0, [pc, #88]	; (80048e4 <MX_GPIO_Init+0xc8>)
 800488a:	f000 fdd7 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800488e:	2323      	movs	r3, #35	; 0x23
 8004890:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004892:	2301      	movs	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489e:	1d3b      	adds	r3, r7, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4811      	ldr	r0, [pc, #68]	; (80048e8 <MX_GPIO_Init+0xcc>)
 80048a4:	f000 fdca 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_INT_Pin CAN_INT0_Pin CAN_INT1_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin|CAN_INT0_Pin|CAN_INT1_Pin;
 80048a8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80048ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b4:	2301      	movs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	480a      	ldr	r0, [pc, #40]	; (80048e8 <MX_GPIO_Init+0xcc>)
 80048be:	f000 fdbd 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_SW2_Pin BUTTON_SW3_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin|BUTTON_SW3_Pin;
 80048c2:	2303      	movs	r3, #3
 80048c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048cc:	2301      	movs	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048d0:	1d3b      	adds	r3, r7, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4805      	ldr	r0, [pc, #20]	; (80048ec <MX_GPIO_Init+0xd0>)
 80048d6:	f000 fdb1 	bl	800543c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	48000800 	.word	0x48000800
 80048e8:	48000400 	.word	0x48000400
 80048ec:	48000c00 	.word	0x48000c00

080048f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80048f4:	b672      	cpsid	i
}
 80048f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <Error_Handler+0x8>

080048fa <LL_RCC_EnableRTC>:
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_AHB2_GRP1_EnableClock>:
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800492a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4313      	orrs	r3, r2
 8004932:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4013      	ands	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <LL_AHB3_GRP1_EnableClock>:
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800495c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4313      	orrs	r3, r2
 8004964:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4013      	ands	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004972:	68fb      	ldr	r3, [r7, #12]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800498e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4313      	orrs	r3, r2
 8004996:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049a4:	68fb      	ldr	r3, [r7, #12]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4013      	ands	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80049e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80049ec:	f7ff ffaf 	bl	800494e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2100      	movs	r1, #0
 80049f4:	202e      	movs	r0, #46	; 0x2e
 80049f6:	f000 fcc2 	bl	800537e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80049fa:	202e      	movs	r0, #46	; 0x2e
 80049fc:	f000 fcd9 	bl	80053b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <HAL_IPCC_MspInit+0x24>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d103      	bne.n	8004a1e <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8004a16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a1a:	f7ff ff98 	bl	800494e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	58000c00 	.word	0x58000c00

08004a2c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <HAL_PKA_MspInit+0x24>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d103      	bne.n	8004a46 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 8004a3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a42:	f7ff ff84 	bl	800494e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	58002000 	.word	0x58002000

08004a54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b096      	sub	sp, #88	; 0x58
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a5c:	f107 0308 	add.w	r3, r7, #8
 8004a60:	2250      	movs	r2, #80	; 0x50
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f007 fba1 	bl	800c1ac <memset>
  if(hrtc->Instance==RTC)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <HAL_RTC_MspInit+0x54>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d115      	bne.n	8004aa0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a78:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a80:	f107 0308 	add.w	r3, r7, #8
 8004a84:	4618      	mov	r0, r3
 8004a86:	f002 fba9 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004a90:	f7ff ff2e 	bl	80048f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a94:	f7ff ff31 	bl	80048fa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004a98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004a9c:	f7ff ff70 	bl	8004980 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004aa0:	bf00      	nop
 8004aa2:	3758      	adds	r7, #88	; 0x58
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40002800 	.word	0x40002800

08004aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_SPI_MspInit+0xe0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d118      	bne.n	8004b00 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ace:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ad2:	f7ff ff6e 	bl	80049b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f7ff ff20 	bl	800491c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004adc:	23c2      	movs	r3, #194	; 0xc2
 8004ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004aec:	2305      	movs	r3, #5
 8004aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	4619      	mov	r1, r3
 8004af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004afa:	f000 fc9f 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004afe:	e040      	b.n	8004b82 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_SPI_MspInit+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d13b      	bne.n	8004b82 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004b0e:	f7ff ff37 	bl	8004980 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b12:	2004      	movs	r0, #4
 8004b14:	f7ff ff02 	bl	800491c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f7ff feff 	bl	800491c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b22:	2302      	movs	r3, #2
 8004b24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4619      	mov	r1, r3
 8004b38:	4816      	ldr	r0, [pc, #88]	; (8004b94 <HAL_SPI_MspInit+0xe8>)
 8004b3a:	f000 fc7f 	bl	800543c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b3e:	2304      	movs	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b42:	2302      	movs	r3, #2
 8004b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b4e:	2305      	movs	r3, #5
 8004b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b52:	f107 030c 	add.w	r3, r7, #12
 8004b56:	4619      	mov	r1, r3
 8004b58:	480e      	ldr	r0, [pc, #56]	; (8004b94 <HAL_SPI_MspInit+0xe8>)
 8004b5a:	f000 fc6f 	bl	800543c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b64:	2302      	movs	r3, #2
 8004b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b70:	2305      	movs	r3, #5
 8004b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b7e:	f000 fc5d 	bl	800543c <HAL_GPIO_Init>
}
 8004b82:	bf00      	nop
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40013000 	.word	0x40013000
 8004b90:	40003800 	.word	0x40003800
 8004b94:	48000800 	.word	0x48000800

08004b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b09c      	sub	sp, #112	; 0x70
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	2250      	movs	r2, #80	; 0x50
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f007 faf7 	bl	800c1ac <memset>
  if(huart->Instance==USART1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <HAL_UART_MspInit+0xac>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d139      	bne.n	8004c3c <HAL_UART_MspInit+0xa4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bd0:	f107 030c 	add.w	r3, r7, #12
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f002 fb01 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004be0:	f7ff fe86 	bl	80048f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004be4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004be8:	f7ff fee3 	bl	80049b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7ff fe95 	bl	800491c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf2:	2002      	movs	r0, #2
 8004bf4:	f7ff fe92 	bl	800491c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c06:	2300      	movs	r3, #0
 8004c08:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c0a:	2307      	movs	r3, #7
 8004c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c12:	4619      	mov	r1, r3
 8004c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c18:	f000 fc10 	bl	800543c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c20:	2302      	movs	r3, #2
 8004c22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c2c:	2307      	movs	r3, #7
 8004c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c34:	4619      	mov	r1, r3
 8004c36:	4804      	ldr	r0, [pc, #16]	; (8004c48 <HAL_UART_MspInit+0xb0>)
 8004c38:	f000 fc00 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c3c:	bf00      	nop
 8004c3e:	3770      	adds	r7, #112	; 0x70
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40013800 	.word	0x40013800
 8004c48:	48000400 	.word	0x48000400

08004c4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b09c      	sub	sp, #112	; 0x70
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	2250      	movs	r2, #80	; 0x50
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f007 fa9d 	bl	800c1ac <memset>
  if(hpcd->Instance==USB)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <HAL_PCD_MspInit+0xa8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d136      	bne.n	8004cea <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004c82:	2318      	movs	r3, #24
 8004c84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004c92:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c96:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8004c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c9c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ca2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f002 fa97 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8004cb4:	f7ff fe1c 	bl	80048f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f7ff fe2f 	bl	800491c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004cbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004cd0:	230a      	movs	r3, #10
 8004cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cde:	f000 fbad 	bl	800543c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004ce2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004ce6:	f7ff fe4b 	bl	8004980 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004cea:	bf00      	nop
 8004cec:	3770      	adds	r7, #112	; 0x70
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40006800 	.word	0x40006800

08004cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cfc:	e7fe      	b.n	8004cfc <NMI_Handler+0x4>

08004cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d02:	e7fe      	b.n	8004d02 <HardFault_Handler+0x4>

08004d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d08:	e7fe      	b.n	8004d08 <MemManage_Handler+0x4>

08004d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d0e:	e7fe      	b.n	8004d0e <BusFault_Handler+0x4>

08004d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d14:	e7fe      	b.n	8004d14 <UsageFault_Handler+0x4>

08004d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d16:	b480      	push	{r7}
 8004d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d44:	f000 f9b4 	bl	80050b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004d50:	f000 fd14 	bl	800577c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return 1;
 8004d5c:	2301      	movs	r3, #1
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <_kill>:

int _kill(int pid, int sig)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d72:	f007 f9e3 	bl	800c13c <__errno>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2216      	movs	r2, #22
 8004d7a:	601a      	str	r2, [r3, #0]
  return -1;
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_exit>:

void _exit (int status)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d90:	f04f 31ff 	mov.w	r1, #4294967295
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ffe7 	bl	8004d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d9a:	e7fe      	b.n	8004d9a <_exit+0x12>

08004d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e00a      	b.n	8004dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dae:	f3af 8000 	nop.w
 8004db2:	4601      	mov	r1, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	60ba      	str	r2, [r7, #8]
 8004dba:	b2ca      	uxtb	r2, r1
 8004dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	dbf0      	blt.n	8004dae <_read+0x12>
  }

  return len;
 8004dcc:	687b      	ldr	r3, [r7, #4]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e009      	b.n	8004dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	60ba      	str	r2, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dbf1      	blt.n	8004de8 <_write+0x12>
  }
  return len;
 8004e04:	687b      	ldr	r3, [r7, #4]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_close>:

int _close(int file)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e36:	605a      	str	r2, [r3, #4]
  return 0;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <_isatty>:

int _isatty(int file)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e4e:	2301      	movs	r3, #1
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <_sbrk+0x5c>)
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <_sbrk+0x60>)
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <_sbrk+0x64>)
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <_sbrk+0x68>)
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <_sbrk+0x64>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d207      	bcs.n	8004eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ea8:	f007 f948 	bl	800c13c <__errno>
 8004eac:	4603      	mov	r3, r0
 8004eae:	220c      	movs	r2, #12
 8004eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	e009      	b.n	8004ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <_sbrk+0x64>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <_sbrk+0x64>)
 8004ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20030000 	.word	0x20030000
 8004ed8:	00000400 	.word	0x00000400
 8004edc:	20001068 	.word	0x20001068
 8004ee0:	20001230 	.word	0x20001230

08004ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <SystemInit+0x98>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	4a23      	ldr	r2, [pc, #140]	; (8004f7c <SystemInit+0x98>)
 8004ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004f10:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <SystemInit+0x9c>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2e:	f023 0305 	bic.w	r3, r3, #5
 8004f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <SystemInit+0xa0>)
 8004f50:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <SystemInit+0xa0>)
 8004f58:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	2200      	movs	r2, #0
 8004f70:	619a      	str	r2, [r3, #24]
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000ed00 	.word	0xe000ed00
 8004f80:	faf6fefb 	.word	0xfaf6fefb
 8004f84:	22041000 	.word	0x22041000

08004f88 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004f88:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f8a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f8c:	3304      	adds	r3, #4

08004f8e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f8e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f90:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004f92:	d3f9      	bcc.n	8004f88 <CopyDataInit>
  bx lr
 8004f94:	4770      	bx	lr

08004f96 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004f96:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004f98:	3004      	adds	r0, #4

08004f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004f9a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004f9c:	d3fb      	bcc.n	8004f96 <FillZerobss>
  bx lr
 8004f9e:	4770      	bx	lr

08004fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004fa0:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004fa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004fa4:	f7ff ff9e 	bl	8004ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004fa8:	480b      	ldr	r0, [pc, #44]	; (8004fd8 <LoopForever+0x6>)
 8004faa:	490c      	ldr	r1, [pc, #48]	; (8004fdc <LoopForever+0xa>)
 8004fac:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <LoopForever+0xe>)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f7ff ffed 	bl	8004f8e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004fb4:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <LoopForever+0x12>)
 8004fb6:	490c      	ldr	r1, [pc, #48]	; (8004fe8 <LoopForever+0x16>)
 8004fb8:	4a0c      	ldr	r2, [pc, #48]	; (8004fec <LoopForever+0x1a>)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f7ff ffe7 	bl	8004f8e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004fc0:	480b      	ldr	r0, [pc, #44]	; (8004ff0 <LoopForever+0x1e>)
 8004fc2:	490c      	ldr	r1, [pc, #48]	; (8004ff4 <LoopForever+0x22>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f7ff ffe8 	bl	8004f9a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004fca:	f007 f8bd 	bl	800c148 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004fce:	f7ff f9e6 	bl	800439e <main>

08004fd2 <LoopForever>:

LoopForever:
  b LoopForever
 8004fd2:	e7fe      	b.n	8004fd2 <LoopForever>
  ldr   r0, =_estack
 8004fd4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	20000094 	.word	0x20000094
 8004fe0:	0800d660 	.word	0x0800d660
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004fe4:	200301e3 	.word	0x200301e3
 8004fe8:	200301e3 	.word	0x200301e3
 8004fec:	0800dfbd 	.word	0x0800dfbd
  INIT_BSS _sbss, _ebss
 8004ff0:	2000096c 	.word	0x2000096c
 8004ff4:	2000122c 	.word	0x2000122c

08004ff8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ff8:	e7fe      	b.n	8004ff8 <ADC1_IRQHandler>
	...

08004ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <HAL_Init+0x3c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <HAL_Init+0x3c>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005012:	2003      	movs	r0, #3
 8005014:	f000 f9a8 	bl	8005368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005018:	200f      	movs	r0, #15
 800501a:	f000 f80f 	bl	800503c <HAL_InitTick>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	71fb      	strb	r3, [r7, #7]
 8005028:	e001      	b.n	800502e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800502a:	f7ff fcdb 	bl	80049e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800502e:	79fb      	ldrb	r3, [r7, #7]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	58004000 	.word	0x58004000

0800503c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_InitTick+0x6c>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d024      	beq.n	800509a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005050:	f001 fe24 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <HAL_InitTick+0x6c>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005060:	fbb3 f3f1 	udiv	r3, r3, r1
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	4618      	mov	r0, r3
 800506a:	f000 f9be 	bl	80053ea <HAL_SYSTICK_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10f      	bne.n	8005094 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d809      	bhi.n	800508e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800507a:	2200      	movs	r2, #0
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
 8005082:	f000 f97c 	bl	800537e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <HAL_InitTick+0x70>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e007      	b.n	800509e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e004      	b.n	800509e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e001      	b.n	800509e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000014 	.word	0x20000014
 80050ac:	20000010 	.word	0x20000010

080050b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <HAL_IncTick+0x20>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_IncTick+0x24>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4413      	add	r3, r2
 80050c0:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_IncTick+0x24>)
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000014 	.word	0x20000014
 80050d4:	2000106c 	.word	0x2000106c

080050d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return uwTick;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <HAL_GetTick+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	2000106c 	.word	0x2000106c

080050f0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <HAL_GetTickPrio+0x14>)
 80050f6:	681b      	ldr	r3, [r3, #0]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000010 	.word	0x20000010

08005108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <__NVIC_SetPriorityGrouping+0x44>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005124:	4013      	ands	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800513a:	4a04      	ldr	r2, [pc, #16]	; (800514c <__NVIC_SetPriorityGrouping+0x44>)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	60d3      	str	r3, [r2, #12]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <__NVIC_GetPriorityGrouping+0x18>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	f003 0307 	and.w	r3, r3, #7
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	2b00      	cmp	r3, #0
 800517c:	db0b      	blt.n	8005196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	f003 021f 	and.w	r2, r3, #31
 8005184:	4907      	ldr	r1, [pc, #28]	; (80051a4 <__NVIC_EnableIRQ+0x38>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	2001      	movs	r0, #1
 800518e:	fa00 f202 	lsl.w	r2, r0, r2
 8005192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	e000e100 	.word	0xe000e100

080051a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db12      	blt.n	80051e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	490a      	ldr	r1, [pc, #40]	; (80051ec <__NVIC_DisableIRQ+0x44>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2001      	movs	r0, #1
 80051ca:	fa00 f202 	lsl.w	r2, r0, r2
 80051ce:	3320      	adds	r3, #32
 80051d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80051d4:	f3bf 8f4f 	dsb	sy
}
 80051d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051da:	f3bf 8f6f 	isb	sy
}
 80051de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	e000e100 	.word	0xe000e100

080051f0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	db0c      	blt.n	800521c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	f003 021f 	and.w	r2, r3, #31
 8005208:	4907      	ldr	r1, [pc, #28]	; (8005228 <__NVIC_SetPendingIRQ+0x38>)
 800520a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	2001      	movs	r0, #1
 8005212:	fa00 f202 	lsl.w	r2, r0, r2
 8005216:	3340      	adds	r3, #64	; 0x40
 8005218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100

0800522c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db0c      	blt.n	8005258 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	f003 021f 	and.w	r2, r3, #31
 8005244:	4907      	ldr	r1, [pc, #28]	; (8005264 <__NVIC_ClearPendingIRQ+0x38>)
 8005246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2001      	movs	r0, #1
 800524e:	fa00 f202 	lsl.w	r2, r0, r2
 8005252:	3360      	adds	r3, #96	; 0x60
 8005254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000e100 	.word	0xe000e100

08005268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	6039      	str	r1, [r7, #0]
 8005272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db0a      	blt.n	8005292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	490c      	ldr	r1, [pc, #48]	; (80052b4 <__NVIC_SetPriority+0x4c>)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	0112      	lsls	r2, r2, #4
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	440b      	add	r3, r1
 800528c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005290:	e00a      	b.n	80052a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	4908      	ldr	r1, [pc, #32]	; (80052b8 <__NVIC_SetPriority+0x50>)
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	3b04      	subs	r3, #4
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	440b      	add	r3, r1
 80052a6:	761a      	strb	r2, [r3, #24]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	e000e100 	.word	0xe000e100
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f1c3 0307 	rsb	r3, r3, #7
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	bf28      	it	cs
 80052da:	2304      	movcs	r3, #4
 80052dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3304      	adds	r3, #4
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d902      	bls.n	80052ec <NVIC_EncodePriority+0x30>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3b03      	subs	r3, #3
 80052ea:	e000      	b.n	80052ee <NVIC_EncodePriority+0x32>
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43da      	mvns	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	401a      	ands	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005304:	f04f 31ff 	mov.w	r1, #4294967295
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	43d9      	mvns	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005314:	4313      	orrs	r3, r2
         );
}
 8005316:	4618      	mov	r0, r3
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3b01      	subs	r3, #1
 8005330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005334:	d301      	bcc.n	800533a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005336:	2301      	movs	r3, #1
 8005338:	e00f      	b.n	800535a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <SysTick_Config+0x40>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3b01      	subs	r3, #1
 8005340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005342:	210f      	movs	r1, #15
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	f7ff ff8e 	bl	8005268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <SysTick_Config+0x40>)
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005352:	4b04      	ldr	r3, [pc, #16]	; (8005364 <SysTick_Config+0x40>)
 8005354:	2207      	movs	r2, #7
 8005356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	e000e010 	.word	0xe000e010

08005368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fec9 	bl	8005108 <__NVIC_SetPriorityGrouping>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
 800538a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800538c:	f7ff fee0 	bl	8005150 <__NVIC_GetPriorityGrouping>
 8005390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	6978      	ldr	r0, [r7, #20]
 8005398:	f7ff ff90 	bl	80052bc <NVIC_EncodePriority>
 800539c:	4602      	mov	r2, r0
 800539e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff5f 	bl	8005268 <__NVIC_SetPriority>
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4603      	mov	r3, r0
 80053ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fed3 	bl	800516c <__NVIC_EnableIRQ>
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fee3 	bl	80051a8 <__NVIC_DisableIRQ>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff96 	bl	8005324 <SysTick_Config>
 80053f8:	4603      	mov	r3, r0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff feed 	bl	80051f0 <__NVIC_SetPendingIRQ>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	4603      	mov	r3, r0
 8005426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fefd 	bl	800522c <__NVIC_ClearPendingIRQ>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800544a:	e14c      	b.n	80056e6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 813e 	beq.w	80056e0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d005      	beq.n	800547c <HAL_GPIO_Init+0x40>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d130      	bne.n	80054de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	2203      	movs	r2, #3
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4013      	ands	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054b2:	2201      	movs	r2, #1
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4013      	ands	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0201 	and.w	r2, r3, #1
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d017      	beq.n	800551a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d123      	bne.n	800556e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	08da      	lsrs	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3208      	adds	r2, #8
 800552e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	220f      	movs	r2, #15
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4013      	ands	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	08da      	lsrs	r2, r3, #3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3208      	adds	r2, #8
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	2203      	movs	r2, #3
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4013      	ands	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 0203 	and.w	r2, r3, #3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8098 	beq.w	80056e0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80055b0:	4a54      	ldr	r2, [pc, #336]	; (8005704 <HAL_GPIO_Init+0x2c8>)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	3302      	adds	r3, #2
 80055b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	220f      	movs	r2, #15
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055da:	d019      	beq.n	8005610 <HAL_GPIO_Init+0x1d4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a4a      	ldr	r2, [pc, #296]	; (8005708 <HAL_GPIO_Init+0x2cc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_GPIO_Init+0x1d0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a49      	ldr	r2, [pc, #292]	; (800570c <HAL_GPIO_Init+0x2d0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00d      	beq.n	8005608 <HAL_GPIO_Init+0x1cc>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a48      	ldr	r2, [pc, #288]	; (8005710 <HAL_GPIO_Init+0x2d4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <HAL_GPIO_Init+0x1c8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a47      	ldr	r2, [pc, #284]	; (8005714 <HAL_GPIO_Init+0x2d8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_GPIO_Init+0x1c4>
 80055fc:	2304      	movs	r3, #4
 80055fe:	e008      	b.n	8005612 <HAL_GPIO_Init+0x1d6>
 8005600:	2307      	movs	r3, #7
 8005602:	e006      	b.n	8005612 <HAL_GPIO_Init+0x1d6>
 8005604:	2303      	movs	r3, #3
 8005606:	e004      	b.n	8005612 <HAL_GPIO_Init+0x1d6>
 8005608:	2302      	movs	r3, #2
 800560a:	e002      	b.n	8005612 <HAL_GPIO_Init+0x1d6>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_GPIO_Init+0x1d6>
 8005610:	2300      	movs	r3, #0
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	f002 0203 	and.w	r2, r2, #3
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	4093      	lsls	r3, r2
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005622:	4938      	ldr	r1, [pc, #224]	; (8005704 <HAL_GPIO_Init+0x2c8>)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005630:	4b39      	ldr	r3, [pc, #228]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	43db      	mvns	r3, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4013      	ands	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800565a:	4b2f      	ldr	r3, [pc, #188]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800567e:	4a26      	ldr	r2, [pc, #152]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	43db      	mvns	r3, r3
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4013      	ands	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 80056b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	43db      	mvns	r3, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056d8:	4a0f      	ldr	r2, [pc, #60]	; (8005718 <HAL_GPIO_Init+0x2dc>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3301      	adds	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f aeab 	bne.w	800544c <HAL_GPIO_Init+0x10>
  }
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40010000 	.word	0x40010000
 8005708:	48000400 	.word	0x48000400
 800570c:	48000800 	.word	0x48000800
 8005710:	48000c00 	.word	0x48000c00
 8005714:	48001000 	.word	0x48001000
 8005718:	58000800 	.word	0x58000800

0800571c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	e001      	b.n	800573e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
 8005758:	4613      	mov	r3, r2
 800575a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005768:	e002      	b.n	8005770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <HAL_HSEM_IRQHandler+0x30>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <HAL_HSEM_IRQHandler+0x30>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	43db      	mvns	r3, r3
 8005790:	4906      	ldr	r1, [pc, #24]	; (80057ac <HAL_HSEM_IRQHandler+0x30>)
 8005792:	4013      	ands	r3, r2
 8005794:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005796:	4a05      	ldr	r2, [pc, #20]	; (80057ac <HAL_HSEM_IRQHandler+0x30>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f807 	bl	80057b0 <HAL_HSEM_FreeCallback>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	58001500 	.word	0x58001500

080057b0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01e      	beq.n	8005814 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_IPCC_Init+0x60>)
 80057d8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff f90c 	bl	8004a04 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80057ec:	68b8      	ldr	r0, [r7, #8]
 80057ee:	f000 f85b 	bl	80058a8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f82c 	bl	800585c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005812:	e001      	b.n	8005818 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	58000c00 	.word	0x58000c00

08005828 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e00f      	b.n	800588a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <IPCC_SetDefaultCallbacks+0x44>)
 8005874:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3306      	adds	r3, #6
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <IPCC_SetDefaultCallbacks+0x48>)
 8005882:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b05      	cmp	r3, #5
 800588e:	d9ec      	bls.n	800586a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	08005829 	.word	0x08005829
 80058a4:	08005843 	.word	0x08005843

080058a8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80058bc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	223f      	movs	r2, #63	; 0x3f
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d2:	b08b      	sub	sp, #44	; 0x2c
 80058d4:	af06      	add	r7, sp, #24
 80058d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0cb      	b.n	8005a7a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff f9a8 	bl	8004c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2203      	movs	r2, #3
 8005900:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fb55 	bl	8008fb8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
 8005912:	e040      	b.n	8005996 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	440b      	add	r3, r1
 8005924:	3301      	adds	r3, #1
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	440b      	add	r3, r1
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	440b      	add	r3, r1
 800594e:	3303      	adds	r3, #3
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005954:	7bfa      	ldrb	r2, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	440b      	add	r3, r1
 8005962:	3338      	adds	r3, #56	; 0x38
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005968:	7bfa      	ldrb	r2, [r7, #15]
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	440b      	add	r3, r1
 8005976:	333c      	adds	r3, #60	; 0x3c
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800597c:	7bfa      	ldrb	r2, [r7, #15]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	440b      	add	r3, r1
 800598a:	3340      	adds	r3, #64	; 0x40
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	3301      	adds	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d3b9      	bcc.n	8005914 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e044      	b.n	8005a30 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059a6:	7bfa      	ldrb	r2, [r7, #15]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	440b      	add	r3, r1
 80059b4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059ce:	7bfa      	ldrb	r2, [r7, #15]
 80059d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	7bfa      	ldrb	r2, [r7, #15]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3b5      	bcc.n	80059a6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	687e      	ldr	r6, [r7, #4]
 8005a42:	466d      	mov	r5, sp
 8005a44:	f106 0410 	add.w	r4, r6, #16
 8005a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	1d33      	adds	r3, r6, #4
 8005a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a54:	6838      	ldr	r0, [r7, #0]
 8005a56:	f003 faca 	bl	8008fee <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d102      	bne.n	8005a78 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f805 	bl	8005a82 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01d      	beq.n	8005b24 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fe ff9a 	bl	8004a2c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 8005b14:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	711a      	strb	r2, [r3, #4]
 8005b22:	e001      	b.n	8005b28 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	58000400 	.word	0x58000400

08005b54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <HAL_PWREx_GetVoltageRange+0x18>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	58000400 	.word	0x58000400

08005b70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b82:	d101      	bne.n	8005b88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_HSE_Enable>:
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba6:	6013      	str	r3, [r2, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_HSE_Disable>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <LL_RCC_HSE_IsReady>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be2:	d101      	bne.n	8005be8 <LL_RCC_HSE_IsReady+0x18>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <LL_RCC_HSE_IsReady+0x1a>
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_RCC_HSI_Enable>:
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c06:	6013      	str	r3, [r2, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_HSI_Disable>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c24:	6013      	str	r3, [r2, #0]
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <LL_RCC_HSI_IsReady>:
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c42:	d101      	bne.n	8005c48 <LL_RCC_HSI_IsReady+0x18>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <LL_RCC_HSI_IsReady+0x1a>
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	061b      	lsls	r3, r3, #24
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <LL_RCC_HSI48_Enable>:
{
 8005c7e:	b480      	push	{r7}
 8005c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005c96:	bf00      	nop
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <LL_RCC_HSI48_Disable>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <LL_RCC_HSI48_IsReady>:
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d101      	bne.n	8005cda <LL_RCC_HSI48_IsReady+0x18>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <LL_RCC_HSI48_IsReady+0x1a>
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <LL_RCC_LSE_Enable>:
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <LL_RCC_LSE_Disable>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <LL_RCC_LSE_EnableBypass>:
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d42:	bf00      	nop
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <LL_RCC_LSE_DisableBypass>:
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <LL_RCC_LSE_IsReady>:
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d101      	bne.n	8005d86 <LL_RCC_LSE_IsReady+0x18>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <LL_RCC_LSE_IsReady+0x1a>
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <LL_RCC_LSI1_Enable>:
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005daa:	bf00      	nop
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_LSI1_Disable>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <LL_RCC_LSI1_IsReady>:
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d101      	bne.n	8005dee <LL_RCC_LSI1_IsReady+0x18>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <LL_RCC_LSI1_IsReady+0x1a>
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_LSI2_Enable>:
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0a:	f043 0304 	orr.w	r3, r3, #4
 8005e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e12:	bf00      	nop
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <LL_RCC_LSI2_Disable>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2c:	f023 0304 	bic.w	r3, r3, #4
 8005e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <LL_RCC_LSI2_IsReady>:
{
 8005e3e:	b480      	push	{r7}
 8005e40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d101      	bne.n	8005e56 <LL_RCC_LSI2_IsReady+0x18>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <LL_RCC_LSI2_IsReady+0x1a>
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_RCC_LSI2_SetTrimming>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_RCC_MSI_Enable>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <LL_RCC_MSI_Disable>:
{
 8005eae:	b480      	push	{r7}
 8005eb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	6013      	str	r3, [r2, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <LL_RCC_MSI_IsReady>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d101      	bne.n	8005ee2 <LL_RCC_MSI_IsReady+0x16>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <LL_RCC_MSI_IsReady+0x18>
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <LL_RCC_MSI_SetRange>:
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <LL_RCC_MSI_GetRange>:
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f26:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2bb0      	cmp	r3, #176	; 0xb0
 8005f2c:	d901      	bls.n	8005f32 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005f2e:	23b0      	movs	r3, #176	; 0xb0
 8005f30:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005f32:	687b      	ldr	r3, [r7, #4]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	604b      	str	r3, [r1, #4]
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_RCC_SetSysClkSource>:
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 0203 	bic.w	r2, r3, #3
 8005f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_RCC_GetSysClkSource>:
{
 8005f92:	b480      	push	{r7}
 8005f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <LL_RCC_SetAHBPrescaler>:
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	608b      	str	r3, [r1, #8]
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <LL_RCC_SetAHB4Prescaler>:
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800600e:	f023 020f 	bic.w	r2, r3, #15
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <LL_RCC_SetAPB1Prescaler>:
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800603e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4313      	orrs	r3, r2
 8006046:	608b      	str	r3, [r1, #8]
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <LL_RCC_SetAPB2Prescaler>:
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4313      	orrs	r3, r2
 800606e:	608b      	str	r3, [r1, #8]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_RCC_GetAHBPrescaler>:
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800608a:	4618      	mov	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_RCC_GetAHB4Prescaler>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_RCC_GetAPB1Prescaler>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80060be:	4618      	mov	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <LL_RCC_GetAPB2Prescaler>:
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <LL_RCC_PLL_Enable>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <LL_RCC_PLL_Disable>:
{
 80060fe:	b480      	push	{r7}
 8006100:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_RCC_PLL_IsReady>:
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800612e:	d101      	bne.n	8006134 <LL_RCC_PLL_IsReady+0x18>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <LL_RCC_PLL_IsReady+0x1a>
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <LL_RCC_PLL_GetN>:
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_RCC_PLL_GetR>:
{
 800615a:	b480      	push	{r7}
 800615c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800615e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <LL_RCC_PLL_GetDivider>:
{
 8006172:	b480      	push	{r7}
 8006174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006180:	4618      	mov	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_RCC_PLL_GetMainSource>:
{
 800618a:	b480      	push	{r7}
 800618c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0303 	and.w	r3, r3, #3
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80061a2:	b480      	push	{r7}
 80061a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b4:	d101      	bne.n	80061ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80061c6:	b480      	push	{r7}
 80061c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061da:	d101      	bne.n	80061e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006200:	d101      	bne.n	8006206 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006224:	d101      	bne.n	800622a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800623a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006248:	d101      	bne.n	800624e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b08d      	sub	sp, #52	; 0x34
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e363      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 808d 	beq.w	8006396 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800627c:	f7ff fe89 	bl	8005f92 <LL_RCC_GetSysClkSource>
 8006280:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006282:	f7ff ff82 	bl	800618a <LL_RCC_PLL_GetMainSource>
 8006286:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_RCC_OscConfig+0x3e>
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d147      	bne.n	8006324 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	2b01      	cmp	r3, #1
 8006298:	d144      	bne.n	8006324 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e347      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80062aa:	f7ff fe34 	bl	8005f16 <LL_RCC_MSI_GetRange>
 80062ae:	4603      	mov	r3, r0
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d914      	bls.n	80062de <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fd2f 	bl	8006d1c <RCC_SetFlashLatencyFromMSIRange>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e336      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fe0e 	bl	8005eee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fe32 	bl	8005f40 <LL_RCC_MSI_SetCalibTrimming>
 80062dc:	e013      	b.n	8006306 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fe03 	bl	8005eee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fe27 	bl	8005f40 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fd10 	bl	8006d1c <RCC_SetFlashLatencyFromMSIRange>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e317      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006306:	f000 fcc9 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 800630a:	4603      	mov	r3, r0
 800630c:	4aa4      	ldr	r2, [pc, #656]	; (80065a0 <HAL_RCC_OscConfig+0x344>)
 800630e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006310:	4ba4      	ldr	r3, [pc, #656]	; (80065a4 <HAL_RCC_OscConfig+0x348>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fe91 	bl	800503c <HAL_InitTick>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d039      	beq.n	8006394 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e308      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01e      	beq.n	800636a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800632c:	f7ff fdb0 	bl	8005e90 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006330:	f7fe fed2 	bl	80050d8 <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006338:	f7fe fece 	bl	80050d8 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e2f5      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800634a:	f7ff fdbf 	bl	8005ecc <LL_RCC_MSI_IsReady>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f1      	beq.n	8006338 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fdc8 	bl	8005eee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fdec 	bl	8005f40 <LL_RCC_MSI_SetCalibTrimming>
 8006368:	e015      	b.n	8006396 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800636a:	f7ff fda0 	bl	8005eae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800636e:	f7fe feb3 	bl	80050d8 <HAL_GetTick>
 8006372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006376:	f7fe feaf 	bl	80050d8 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e2d6      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006388:	f7ff fda0 	bl	8005ecc <LL_RCC_MSI_IsReady>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f1      	bne.n	8006376 <HAL_RCC_OscConfig+0x11a>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006394:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d047      	beq.n	8006432 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063a2:	f7ff fdf6 	bl	8005f92 <LL_RCC_GetSysClkSource>
 80063a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063a8:	f7ff feef 	bl	800618a <LL_RCC_PLL_GetMainSource>
 80063ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_OscConfig+0x164>
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d108      	bne.n	80063cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d105      	bne.n	80063cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d134      	bne.n	8006432 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e2b4      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d102      	bne.n	80063dc <HAL_RCC_OscConfig+0x180>
 80063d6:	f7ff fbdd 	bl	8005b94 <LL_RCC_HSE_Enable>
 80063da:	e001      	b.n	80063e0 <HAL_RCC_OscConfig+0x184>
 80063dc:	f7ff fbe9 	bl	8005bb2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d012      	beq.n	800640e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fe fe76 	bl	80050d8 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fe fe72 	bl	80050d8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e299      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006402:	f7ff fbe5 	bl	8005bd0 <LL_RCC_HSE_IsReady>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0f1      	beq.n	80063f0 <HAL_RCC_OscConfig+0x194>
 800640c:	e011      	b.n	8006432 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fe fe63 	bl	80050d8 <HAL_GetTick>
 8006412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006416:	f7fe fe5f 	bl	80050d8 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b64      	cmp	r3, #100	; 0x64
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e286      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006428:	f7ff fbd2 	bl	8005bd0 <LL_RCC_HSE_IsReady>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f1      	bne.n	8006416 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d04c      	beq.n	80064d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643e:	f7ff fda8 	bl	8005f92 <LL_RCC_GetSysClkSource>
 8006442:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006444:	f7ff fea1 	bl	800618a <LL_RCC_PLL_GetMainSource>
 8006448:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b04      	cmp	r3, #4
 800644e:	d005      	beq.n	800645c <HAL_RCC_OscConfig+0x200>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b0c      	cmp	r3, #12
 8006454:	d10e      	bne.n	8006474 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d10b      	bne.n	8006474 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e266      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fbf1 	bl	8005c54 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006472:	e031      	b.n	80064d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d019      	beq.n	80064b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800647c:	f7ff fbba 	bl	8005bf4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006480:	f7fe fe2a 	bl	80050d8 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006488:	f7fe fe26 	bl	80050d8 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e24d      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800649a:	f7ff fbc9 	bl	8005c30 <LL_RCC_HSI_IsReady>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f1      	beq.n	8006488 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fbd3 	bl	8005c54 <LL_RCC_HSI_SetCalibTrimming>
 80064ae:	e013      	b.n	80064d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064b0:	f7ff fbaf 	bl	8005c12 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fe fe10 	bl	80050d8 <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064bc:	f7fe fe0c 	bl	80050d8 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e233      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80064ce:	f7ff fbaf 	bl	8005c30 <LL_RCC_HSI_IsReady>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f1      	bne.n	80064bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80a3 	beq.w	8006638 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d076      	beq.n	80065e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b00      	cmp	r3, #0
 8006504:	d046      	beq.n	8006594 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006506:	f7ff fc66 	bl	8005dd6 <LL_RCC_LSI1_IsReady>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d113      	bne.n	8006538 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006510:	f7ff fc3f 	bl	8005d92 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006514:	f7fe fde0 	bl	80050d8 <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800651c:	f7fe fddc 	bl	80050d8 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e203      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800652e:	f7ff fc52 	bl	8005dd6 <LL_RCC_LSI1_IsReady>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f1      	beq.n	800651c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006538:	f7ff fc5f 	bl	8005dfa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fe fdcc 	bl	80050d8 <HAL_GetTick>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006544:	f7fe fdc8 	bl	80050d8 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b03      	cmp	r3, #3
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e1ef      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006556:	f7ff fc72 	bl	8005e3e <LL_RCC_LSI2_IsReady>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f1      	beq.n	8006544 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fc7c 	bl	8005e62 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800656a:	f7ff fc23 	bl	8005db4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7fe fdb3 	bl	80050d8 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006576:	f7fe fdaf 	bl	80050d8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1d6      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006588:	f7ff fc25 	bl	8005dd6 <LL_RCC_LSI1_IsReady>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f1      	bne.n	8006576 <HAL_RCC_OscConfig+0x31a>
 8006592:	e051      	b.n	8006638 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006594:	f7ff fbfd 	bl	8005d92 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fe fd9e 	bl	80050d8 <HAL_GetTick>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800659e:	e00c      	b.n	80065ba <HAL_RCC_OscConfig+0x35e>
 80065a0:	2000000c 	.word	0x2000000c
 80065a4:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065a8:	f7fe fd96 	bl	80050d8 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e1bd      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80065ba:	f7ff fc0c 	bl	8005dd6 <LL_RCC_LSI1_IsReady>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f1      	beq.n	80065a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80065c4:	f7ff fc2a 	bl	8005e1c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065ca:	f7fe fd85 	bl	80050d8 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e1ac      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80065dc:	f7ff fc2f 	bl	8005e3e <LL_RCC_LSI2_IsReady>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f1      	bne.n	80065ca <HAL_RCC_OscConfig+0x36e>
 80065e6:	e027      	b.n	8006638 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80065e8:	f7ff fc18 	bl	8005e1c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ec:	f7fe fd74 	bl	80050d8 <HAL_GetTick>
 80065f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065f4:	f7fe fd70 	bl	80050d8 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e197      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006606:	f7ff fc1a 	bl	8005e3e <LL_RCC_LSI2_IsReady>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f1      	bne.n	80065f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006610:	f7ff fbd0 	bl	8005db4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fe fd60 	bl	80050d8 <HAL_GetTick>
 8006618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800661c:	f7fe fd5c 	bl	80050d8 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e183      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800662e:	f7ff fbd2 	bl	8005dd6 <LL_RCC_LSI1_IsReady>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f1      	bne.n	800661c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05b      	beq.n	80066fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006644:	4ba7      	ldr	r3, [pc, #668]	; (80068e4 <HAL_RCC_OscConfig+0x688>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d114      	bne.n	800667a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006650:	f7ff fa70 	bl	8005b34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006654:	f7fe fd40 	bl	80050d8 <HAL_GetTick>
 8006658:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665c:	f7fe fd3c 	bl	80050d8 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e163      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800666e:	4b9d      	ldr	r3, [pc, #628]	; (80068e4 <HAL_RCC_OscConfig+0x688>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d102      	bne.n	8006688 <HAL_RCC_OscConfig+0x42c>
 8006682:	f7ff fb30 	bl	8005ce6 <LL_RCC_LSE_Enable>
 8006686:	e00c      	b.n	80066a2 <HAL_RCC_OscConfig+0x446>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b05      	cmp	r3, #5
 800668e:	d104      	bne.n	800669a <HAL_RCC_OscConfig+0x43e>
 8006690:	f7ff fb4b 	bl	8005d2a <LL_RCC_LSE_EnableBypass>
 8006694:	f7ff fb27 	bl	8005ce6 <LL_RCC_LSE_Enable>
 8006698:	e003      	b.n	80066a2 <HAL_RCC_OscConfig+0x446>
 800669a:	f7ff fb35 	bl	8005d08 <LL_RCC_LSE_Disable>
 800669e:	f7ff fb55 	bl	8005d4c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066aa:	f7fe fd15 	bl	80050d8 <HAL_GetTick>
 80066ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fe fd11 	bl	80050d8 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e136      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80066c8:	f7ff fb51 	bl	8005d6e <LL_RCC_LSE_IsReady>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0ef      	beq.n	80066b2 <HAL_RCC_OscConfig+0x456>
 80066d2:	e013      	b.n	80066fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d4:	f7fe fd00 	bl	80050d8 <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80066da:	e00a      	b.n	80066f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066dc:	f7fe fcfc 	bl	80050d8 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e121      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80066f2:	f7ff fb3c 	bl	8005d6e <LL_RCC_LSE_IsReady>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1ef      	bne.n	80066dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02c      	beq.n	8006762 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	d014      	beq.n	800673a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006710:	f7ff fab5 	bl	8005c7e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fe fce0 	bl	80050d8 <HAL_GetTick>
 8006718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800671c:	f7fe fcdc 	bl	80050d8 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e103      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800672e:	f7ff fac8 	bl	8005cc2 <LL_RCC_HSI48_IsReady>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f1      	beq.n	800671c <HAL_RCC_OscConfig+0x4c0>
 8006738:	e013      	b.n	8006762 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800673a:	f7ff fab1 	bl	8005ca0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fe fccb 	bl	80050d8 <HAL_GetTick>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006746:	f7fe fcc7 	bl	80050d8 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e0ee      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006758:	f7ff fab3 	bl	8005cc2 <LL_RCC_HSI48_IsReady>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f1      	bne.n	8006746 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80e4 	beq.w	8006934 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800676c:	f7ff fc11 	bl	8005f92 <LL_RCC_GetSysClkSource>
 8006770:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	2b02      	cmp	r3, #2
 8006780:	f040 80b4 	bne.w	80068ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0203 	and.w	r2, r3, #3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	429a      	cmp	r2, r3
 8006790:	d123      	bne.n	80067da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d11c      	bne.n	80067da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d114      	bne.n	80067da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d10d      	bne.n	80067da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d106      	bne.n	80067da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d05d      	beq.n	8006896 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d058      	beq.n	8006892 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e0a1      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067f2:	f7ff fc84 	bl	80060fe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067f6:	f7fe fc6f 	bl	80050d8 <HAL_GetTick>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fe:	f7fe fc6b 	bl	80050d8 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e092      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1ef      	bne.n	80067fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800681e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	4b30      	ldr	r3, [pc, #192]	; (80068e8 <HAL_RCC_OscConfig+0x68c>)
 8006826:	4013      	ands	r3, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006830:	4311      	orrs	r1, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006836:	0212      	lsls	r2, r2, #8
 8006838:	4311      	orrs	r1, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800683e:	4311      	orrs	r1, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006844:	4311      	orrs	r1, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800684a:	430a      	orrs	r2, r1
 800684c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006850:	4313      	orrs	r3, r2
 8006852:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006854:	f7ff fc44 	bl	80060e0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006868:	f7fe fc36 	bl	80050d8 <HAL_GetTick>
 800686c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006870:	f7fe fc32 	bl	80050d8 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e059      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ef      	beq.n	8006870 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006890:	e050      	b.n	8006934 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e04f      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d147      	bne.n	8006934 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068a4:	f7ff fc1c 	bl	80060e0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068b8:	f7fe fc0e 	bl	80050d8 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fe fc0a 	bl	80050d8 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e031      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCC_OscConfig+0x664>
 80068e0:	e028      	b.n	8006934 <HAL_RCC_OscConfig+0x6d8>
 80068e2:	bf00      	nop
 80068e4:	58000400 	.word	0x58000400
 80068e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b0c      	cmp	r3, #12
 80068f0:	d01e      	beq.n	8006930 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f2:	f7ff fc04 	bl	80060fe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fe fbef 	bl	80050d8 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fe:	f7fe fbeb 	bl	80050d8 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e012      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1ef      	bne.n	80068fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800691e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_RCC_OscConfig+0x6e4>)
 800692a:	4013      	ands	r3, r2
 800692c:	60cb      	str	r3, [r1, #12]
 800692e:	e001      	b.n	8006934 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3734      	adds	r7, #52	; 0x34
 800693a:	46bd      	mov	sp, r7
 800693c:	bd90      	pop	{r4, r7, pc}
 800693e:	bf00      	nop
 8006940:	eefefffc 	.word	0xeefefffc

08006944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e12d      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006958:	4b98      	ldr	r3, [pc, #608]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d91b      	bls.n	800699e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b95      	ldr	r3, [pc, #596]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 0207 	bic.w	r2, r3, #7
 800696e:	4993      	ldr	r1, [pc, #588]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006976:	f7fe fbaf 	bl	80050d8 <HAL_GetTick>
 800697a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697c:	e008      	b.n	8006990 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800697e:	f7fe fbab 	bl	80050d8 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e111      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006990:	4b8a      	ldr	r3, [pc, #552]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d1ef      	bne.n	800697e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fafb 	bl	8005faa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069b4:	f7fe fb90 	bl	80050d8 <HAL_GetTick>
 80069b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069bc:	f7fe fb8c 	bl	80050d8 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e0f2      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069ce:	f7ff fbe8 	bl	80061a2 <LL_RCC_IsActiveFlag_HPRE>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f1      	beq.n	80069bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d016      	beq.n	8006a12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff faf2 	bl	8005fd2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069ee:	f7fe fb73 	bl	80050d8 <HAL_GetTick>
 80069f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069f6:	f7fe fb6f 	bl	80050d8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e0d5      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a08:	f7ff fbdd 	bl	80061c6 <LL_RCC_IsActiveFlag_C2HPRE>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f1      	beq.n	80069f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff faeb 	bl	8005ffe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a28:	f7fe fb56 	bl	80050d8 <HAL_GetTick>
 8006a2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a30:	f7fe fb52 	bl	80050d8 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e0b8      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a42:	f7ff fbd3 	bl	80061ec <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f1      	beq.n	8006a30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d016      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fae5 	bl	800602c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a62:	f7fe fb39 	bl	80050d8 <HAL_GetTick>
 8006a66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a68:	e008      	b.n	8006a7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a6a:	f7fe fb35 	bl	80050d8 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e09b      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a7c:	f7ff fbc9 	bl	8006212 <LL_RCC_IsActiveFlag_PPRE1>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f1      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d017      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fadb 	bl	8006054 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a9e:	f7fe fb1b 	bl	80050d8 <HAL_GetTick>
 8006aa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006aa6:	f7fe fb17 	bl	80050d8 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e07d      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006ab8:	f7ff fbbd 	bl	8006236 <LL_RCC_IsActiveFlag_PPRE2>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0f1      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d043      	beq.n	8006b56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d106      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006ad6:	f7ff f87b 	bl	8005bd0 <LL_RCC_HSE_IsReady>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11e      	bne.n	8006b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e067      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006aec:	f7ff fb16 	bl	800611c <LL_RCC_PLL_IsReady>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d113      	bne.n	8006b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e05c      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b02:	f7ff f9e3 	bl	8005ecc <LL_RCC_MSI_IsReady>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d108      	bne.n	8006b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e051      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b10:	f7ff f88e 	bl	8005c30 <LL_RCC_HSI_IsReady>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e04a      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fa21 	bl	8005f6a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b28:	f7fe fad6 	bl	80050d8 <HAL_GetTick>
 8006b2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b30:	f7fe fad2 	bl	80050d8 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e036      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	f7ff fa24 	bl	8005f92 <LL_RCC_GetSysClkSource>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d1ec      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d21b      	bcs.n	8006b9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b64:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f023 0207 	bic.w	r2, r3, #7
 8006b6c:	4913      	ldr	r1, [pc, #76]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b74:	f7fe fab0 	bl	80050d8 <HAL_GetTick>
 8006b78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b7c:	f7fe faac 	bl	80050d8 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e012      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_RCC_ClockConfig+0x278>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d1ef      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006b9c:	f000 f87e 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4a07      	ldr	r2, [pc, #28]	; (8006bc0 <HAL_RCC_ClockConfig+0x27c>)
 8006ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006ba6:	f7fe faa3 	bl	80050f0 <HAL_GetTickPrio>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe fa45 	bl	800503c <HAL_InitTick>
 8006bb2:	4603      	mov	r3, r0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	58004000 	.word	0x58004000
 8006bc0:	2000000c 	.word	0x2000000c

08006bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc4:	b590      	push	{r4, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bca:	f7ff f9e2 	bl	8005f92 <LL_RCC_GetSysClkSource>
 8006bce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006bd6:	f7ff f99e 	bl	8005f16 <LL_RCC_MSI_GetRange>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	4a2b      	ldr	r2, [pc, #172]	; (8006c90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e04b      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d102      	bne.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e045      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d10a      	bne.n	8006c14 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006bfe:	f7fe ffb7 	bl	8005b70 <LL_RCC_HSE_IsEnabledDiv2>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d102      	bne.n	8006c0e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c08:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e03a      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c0e:	4b22      	ldr	r3, [pc, #136]	; (8006c98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e037      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c14:	f7ff fab9 	bl	800618a <LL_RCC_PLL_GetMainSource>
 8006c18:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCC_GetSysClockFreq+0x64>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d003      	beq.n	8006c2e <HAL_RCC_GetSysClockFreq+0x6a>
 8006c26:	e00d      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c2a:	60bb      	str	r3, [r7, #8]
        break;
 8006c2c:	e015      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c2e:	f7fe ff9f 	bl	8005b70 <LL_RCC_HSE_IsEnabledDiv2>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d102      	bne.n	8006c3e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006c38:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c3a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006c3c:	e00d      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006c3e:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c40:	60bb      	str	r3, [r7, #8]
        break;
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c44:	f7ff f967 	bl	8005f16 <LL_RCC_MSI_GetRange>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c56:	60bb      	str	r3, [r7, #8]
        break;
 8006c58:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006c5a:	f7ff fa71 	bl	8006140 <LL_RCC_PLL_GetN>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	fb03 f402 	mul.w	r4, r3, r2
 8006c66:	f7ff fa84 	bl	8006172 <LL_RCC_PLL_GetDivider>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	3301      	adds	r3, #1
 8006c70:	fbb4 f4f3 	udiv	r4, r4, r3
 8006c74:	f7ff fa71 	bl	800615a <LL_RCC_PLL_GetR>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	0f5b      	lsrs	r3, r3, #29
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006c82:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006c84:	68fb      	ldr	r3, [r7, #12]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd90      	pop	{r4, r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	0800d460 	.word	0x0800d460
 8006c94:	00f42400 	.word	0x00f42400
 8006c98:	01e84800 	.word	0x01e84800

08006c9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c9c:	b598      	push	{r3, r4, r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006ca0:	f7ff ff90 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	f7ff f9e9 	bl	800607c <LL_RCC_GetAHBPrescaler>
 8006caa:	4603      	mov	r3, r0
 8006cac:	091b      	lsrs	r3, r3, #4
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	4a03      	ldr	r2, [pc, #12]	; (8006cc0 <HAL_RCC_GetHCLKFreq+0x24>)
 8006cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd98      	pop	{r3, r4, r7, pc}
 8006cc0:	0800d400 	.word	0x0800d400

08006cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cc4:	b598      	push	{r3, r4, r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006cc8:	f7ff ffe8 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	f7ff f9ef 	bl	80060b0 <LL_RCC_GetAPB1Prescaler>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	4a04      	ldr	r2, [pc, #16]	; (8006cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd98      	pop	{r3, r4, r7, pc}
 8006cec:	0800d440 	.word	0x0800d440

08006cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf0:	b598      	push	{r3, r4, r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006cf4:	f7ff ffd2 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	f7ff f9e5 	bl	80060c8 <LL_RCC_GetAPB2Prescaler>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	0adb      	lsrs	r3, r3, #11
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd98      	pop	{r3, r4, r7, pc}
 8006d18:	0800d440 	.word	0x0800d440

08006d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2bb0      	cmp	r3, #176	; 0xb0
 8006d28:	d903      	bls.n	8006d32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006d2a:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e007      	b.n	8006d42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006d42:	f7ff f9a7 	bl	8006094 <LL_RCC_GetAHB4Prescaler>
 8006d46:	4603      	mov	r3, r0
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	4a0d      	ldr	r2, [pc, #52]	; (8006d84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	0c9c      	lsrs	r4, r3, #18
 8006d66:	f7fe fef5 	bl	8005b54 <HAL_PWREx_GetVoltageRange>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 f80c 	bl	8006d8c <RCC_SetFlashLatency>
 8006d74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd90      	pop	{r4, r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	0800d460 	.word	0x0800d460
 8006d84:	0800d400 	.word	0x0800d400
 8006d88:	431bde83 	.word	0x431bde83

08006d8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b093      	sub	sp, #76	; 0x4c
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <RCC_SetFlashLatency+0xe8>)
 8006d98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006da2:	4a35      	ldr	r2, [pc, #212]	; (8006e78 <RCC_SetFlashLatency+0xec>)
 8006da4:	f107 031c 	add.w	r3, r7, #28
 8006da8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006daa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006dae:	4b33      	ldr	r3, [pc, #204]	; (8006e7c <RCC_SetFlashLatency+0xf0>)
 8006db0:	f107 040c 	add.w	r4, r7, #12
 8006db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006dba:	2300      	movs	r3, #0
 8006dbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc4:	d11a      	bne.n	8006dfc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dca:	e013      	b.n	8006df4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	3348      	adds	r3, #72	; 0x48
 8006dd2:	443b      	add	r3, r7
 8006dd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d807      	bhi.n	8006dee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	3348      	adds	r3, #72	; 0x48
 8006de4:	443b      	add	r3, r7
 8006de6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006dea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006dec:	e020      	b.n	8006e30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df0:	3301      	adds	r3, #1
 8006df2:	643b      	str	r3, [r7, #64]	; 0x40
 8006df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d9e8      	bls.n	8006dcc <RCC_SetFlashLatency+0x40>
 8006dfa:	e019      	b.n	8006e30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e00:	e013      	b.n	8006e2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	3348      	adds	r3, #72	; 0x48
 8006e08:	443b      	add	r3, r7
 8006e0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d807      	bhi.n	8006e24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	3348      	adds	r3, #72	; 0x48
 8006e1a:	443b      	add	r3, r7
 8006e1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e22:	e005      	b.n	8006e30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e26:	3301      	adds	r3, #1
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d9e8      	bls.n	8006e02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006e30:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <RCC_SetFlashLatency+0xf4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f023 0207 	bic.w	r2, r3, #7
 8006e38:	4911      	ldr	r1, [pc, #68]	; (8006e80 <RCC_SetFlashLatency+0xf4>)
 8006e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e40:	f7fe f94a 	bl	80050d8 <HAL_GetTick>
 8006e44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e46:	e008      	b.n	8006e5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e48:	f7fe f946 	bl	80050d8 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e007      	b.n	8006e6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <RCC_SetFlashLatency+0xf4>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d1ef      	bne.n	8006e48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	374c      	adds	r7, #76	; 0x4c
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	0800d260 	.word	0x0800d260
 8006e78:	0800d270 	.word	0x0800d270
 8006e7c:	0800d27c 	.word	0x0800d27c
 8006e80:	58004000 	.word	0x58004000

08006e84 <LL_RCC_LSE_IsEnabled>:
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <LL_RCC_LSE_IsEnabled+0x18>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <LL_RCC_LSE_IsEnabled+0x1a>
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <LL_RCC_LSE_IsReady>:
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d101      	bne.n	8006ec0 <LL_RCC_LSE_IsReady+0x18>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <LL_RCC_LSE_IsReady+0x1a>
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <LL_RCC_MSI_EnablePLLMode>:
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eda:	f043 0304 	orr.w	r3, r3, #4
 8006ede:	6013      	str	r3, [r2, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_RCC_SetRFWKPClockSource>:
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <LL_RCC_SetSMPSClockSource>:
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	f023 0203 	bic.w	r2, r3, #3
 8006f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <LL_RCC_SetSMPSPrescaler>:
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <LL_RCC_SetUSARTClockSource>:
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f76:	f023 0203 	bic.w	r2, r3, #3
 8006f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <LL_RCC_SetLPUARTClockSource>:
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <LL_RCC_SetI2CClockSource>:
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	401a      	ands	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <LL_RCC_SetLPTIMClockSource>:
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007004:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	43db      	mvns	r3, r3
 8007010:	401a      	ands	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	041b      	lsls	r3, r3, #16
 8007016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <LL_RCC_SetSAIClockSource>:
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <LL_RCC_SetRNGClockSource>:
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007068:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800706c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <LL_RCC_SetCLK48ClockSource>:
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800708c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007094:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <LL_RCC_SetUSBClockSource>:
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ffe3 	bl	8007084 <LL_RCC_SetCLK48ClockSource>
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <LL_RCC_SetADCClockSource>:
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80070ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <LL_RCC_SetRTCClockSource>:
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80070fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <LL_RCC_GetRTCClockSource>:
{
 800711e:	b480      	push	{r7}
 8007120:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800712e:	4618      	mov	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <LL_RCC_ForceBackupDomainReset>:
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800713c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800714c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <LL_RCC_ReleaseBackupDomainReset>:
{
 800715a:	b480      	push	{r7}
 800715c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800715e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800716a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007172:	bf00      	nop
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_RCC_PLLSAI1_Enable>:
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800718a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <LL_RCC_PLLSAI1_Disable>:
{
 800719a:	b480      	push	{r7}
 800719c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800719e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071ac:	6013      	str	r3, [r2, #0]
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <LL_RCC_PLLSAI1_IsReady>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ca:	d101      	bne.n	80071d0 <LL_RCC_PLLSAI1_IsReady+0x18>
 80071cc:	2301      	movs	r3, #1
 80071ce:	e000      	b.n	80071d2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80071e4:	2300      	movs	r3, #0
 80071e6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80071e8:	2300      	movs	r3, #0
 80071ea:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d034      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007200:	d021      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007206:	d81b      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800720c:	d01d      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800720e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007212:	d815      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721c:	d110      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800721e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800722e:	e00d      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f94d 	bl	80074d4 <RCCEx_PLLSAI1_ConfigNP>
 800723a:	4603      	mov	r3, r0
 800723c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800723e:	e005      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
        break;
 8007244:	e002      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800724a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724c:	7ffb      	ldrb	r3, [r7, #31]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d105      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fee8 	bl	800702c <LL_RCC_SetSAIClockSource>
 800725c:	e001      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725e:	7ffb      	ldrb	r3, [r7, #31]
 8007260:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800726a:	2b00      	cmp	r3, #0
 800726c:	d046      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800726e:	f7ff ff56 	bl	800711e <LL_RCC_GetRTCClockSource>
 8007272:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	429a      	cmp	r2, r3
 800727c:	d03c      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800727e:	f7fe fc59 	bl	8005b34 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff30 	bl	80070f2 <LL_RCC_SetRTCClockSource>
 8007292:	e02e      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800729e:	f7ff ff4b 	bl	8007138 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80072a2:	f7ff ff5a 	bl	800715a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80072b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80072be:	f7ff fde1 	bl	8006e84 <LL_RCC_LSE_IsEnabled>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d114      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072c8:	f7fd ff06 	bl	80050d8 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80072ce:	e00b      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d0:	f7fd ff02 	bl	80050d8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	; 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d902      	bls.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	77fb      	strb	r3, [r7, #31]
              break;
 80072e6:	e004      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80072e8:	f7ff fdde 	bl	8006ea8 <LL_RCC_LSE_IsReady>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d1ee      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80072f2:	7ffb      	ldrb	r3, [r7, #31]
 80072f4:	77bb      	strb	r3, [r7, #30]
 80072f6:	e001      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	7ffb      	ldrb	r3, [r7, #31]
 80072fa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fe2a 	bl	8006f66 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fe35 	bl	8006f92 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fe5d 	bl	8006ff8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fe52 	bl	8006ff8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fe2a 	bl	8006fbe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fe1f 	bl	8006fbe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d022      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fe8d 	bl	80070b0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800739e:	d107      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80073a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ae:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073b8:	d10b      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f8e3 	bl	800758a <RCCEx_PLLSAI1_ConfigNQ>
 80073c4:	4603      	mov	r3, r0
 80073c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80073ce:	7ffb      	ldrb	r3, [r7, #31]
 80073d0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d02b      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d008      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f0:	d003      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fe2a 	bl	8007058 <LL_RCC_SetRNGClockSource>
 8007404:	e00a      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	2000      	movs	r0, #0
 8007412:	f7ff fe21 	bl	8007058 <LL_RCC_SetRNGClockSource>
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff fe34 	bl	8007084 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007424:	d107      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007434:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743e:	2b00      	cmp	r3, #0
 8007440:	d022      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fe3d 	bl	80070c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007464:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800746e:	d10b      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f8e3 	bl	8007640 <RCCEx_PLLSAI1_ConfigNR>
 800747a:	4603      	mov	r3, r0
 800747c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800747e:	7ffb      	ldrb	r3, [r7, #31]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007484:	7ffb      	ldrb	r3, [r7, #31]
 8007486:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fd26 	bl	8006eea <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fd45 	bl	8006f3e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fd2c 	bl	8006f16 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80074be:	7fbb      	ldrb	r3, [r7, #30]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80074cc:	f7ff fcfe 	bl	8006ecc <LL_RCC_MSI_EnablePLLMode>
}
 80074d0:	bf00      	nop
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80074e0:	f7ff fe5b 	bl	800719a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074e4:	f7fd fdf8 	bl	80050d8 <HAL_GetTick>
 80074e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80074ea:	e009      	b.n	8007500 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074ec:	f7fd fdf4 	bl	80050d8 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d902      	bls.n	8007500 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	73fb      	strb	r3, [r7, #15]
      break;
 80074fe:	e004      	b.n	800750a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007500:	f7ff fe5a 	bl	80071b8 <LL_RCC_PLLSAI1_IsReady>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f0      	bne.n	80074ec <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d137      	bne.n	8007580 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007524:	4313      	orrs	r3, r2
 8007526:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800753a:	4313      	orrs	r3, r2
 800753c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800753e:	f7ff fe1d 	bl	800717c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007542:	f7fd fdc9 	bl	80050d8 <HAL_GetTick>
 8007546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007548:	e009      	b.n	800755e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800754a:	f7fd fdc5 	bl	80050d8 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d902      	bls.n	800755e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	73fb      	strb	r3, [r7, #15]
        break;
 800755c:	e004      	b.n	8007568 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800755e:	f7ff fe2b 	bl	80071b8 <LL_RCC_PLLSAI1_IsReady>
 8007562:	4603      	mov	r3, r0
 8007564:	2b01      	cmp	r3, #1
 8007566:	d1f0      	bne.n	800754a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d108      	bne.n	8007580 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800756e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800757c:	4313      	orrs	r3, r2
 800757e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007596:	f7ff fe00 	bl	800719a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800759a:	f7fd fd9d 	bl	80050d8 <HAL_GetTick>
 800759e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075a0:	e009      	b.n	80075b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075a2:	f7fd fd99 	bl	80050d8 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d902      	bls.n	80075b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	73fb      	strb	r3, [r7, #15]
      break;
 80075b4:	e004      	b.n	80075c0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075b6:	f7ff fdff 	bl	80071b8 <LL_RCC_PLLSAI1_IsReady>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1f0      	bne.n	80075a2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d137      	bne.n	8007636 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80075de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80075f4:	f7ff fdc2 	bl	800717c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f8:	f7fd fd6e 	bl	80050d8 <HAL_GetTick>
 80075fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075fe:	e009      	b.n	8007614 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007600:	f7fd fd6a 	bl	80050d8 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d902      	bls.n	8007614 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	73fb      	strb	r3, [r7, #15]
        break;
 8007612:	e004      	b.n	800761e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007614:	f7ff fdd0 	bl	80071b8 <LL_RCC_PLLSAI1_IsReady>
 8007618:	4603      	mov	r3, r0
 800761a:	2b01      	cmp	r3, #1
 800761c:	d1f0      	bne.n	8007600 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d108      	bne.n	8007636 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007632:	4313      	orrs	r3, r2
 8007634:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800764c:	f7ff fda5 	bl	800719a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007650:	f7fd fd42 	bl	80050d8 <HAL_GetTick>
 8007654:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007656:	e009      	b.n	800766c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007658:	f7fd fd3e 	bl	80050d8 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d902      	bls.n	800766c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	73fb      	strb	r3, [r7, #15]
      break;
 800766a:	e004      	b.n	8007676 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800766c:	f7ff fda4 	bl	80071b8 <LL_RCC_PLLSAI1_IsReady>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d137      	bne.n	80076ec <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800767c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007690:	4313      	orrs	r3, r2
 8007692:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076a6:	4313      	orrs	r3, r2
 80076a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80076aa:	f7ff fd67 	bl	800717c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ae:	f7fd fd13 	bl	80050d8 <HAL_GetTick>
 80076b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076b4:	e009      	b.n	80076ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076b6:	f7fd fd0f 	bl	80050d8 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d902      	bls.n	80076ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	73fb      	strb	r3, [r7, #15]
        break;
 80076c8:	e004      	b.n	80076d4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076ca:	f7ff fd75 	bl	80071b8 <LL_RCC_PLLSAI1_IsReady>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d1f0      	bne.n	80076b6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d108      	bne.n	80076ec <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80076da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076e8:	4313      	orrs	r3, r2
 80076ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e09f      	b.n	800784a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fd f998 	bl	8004a54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800772c:	4b49      	ldr	r3, [pc, #292]	; (8007854 <HAL_RTC_Init+0x15c>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d07e      	beq.n	8007836 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	22ca      	movs	r2, #202	; 0xca
 800773e:	625a      	str	r2, [r3, #36]	; 0x24
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2253      	movs	r2, #83	; 0x53
 8007746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa1d 	bl	8007b88 <RTC_EnterInitMode>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2204      	movs	r2, #4
 8007760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
 8007768:	e067      	b.n	800783a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6899      	ldr	r1, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68d2      	ldr	r2, [r2, #12]
 80077a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6919      	ldr	r1, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	041a      	lsls	r2, r3, #16
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0203 	bic.w	r2, r2, #3
 80077d8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d113      	bne.n	8007828 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f99b 	bl	8007b3c <HAL_RTC_WaitForSynchro>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	22ff      	movs	r2, #255	; 0xff
 8007812:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2204      	movs	r2, #4
 8007818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e010      	b.n	800784a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	22ff      	movs	r2, #255	; 0xff
 800782e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	e001      	b.n	800783a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d103      	bne.n	8007848 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40002800 	.word	0x40002800

08007858 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007858:	b590      	push	{r4, r7, lr}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_RTC_SetTime+0x1a>
 800786e:	2302      	movs	r3, #2
 8007870:	e0b2      	b.n	80079d8 <HAL_RTC_SetTime+0x180>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d126      	bne.n	80078d6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d102      	bne.n	800789c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2200      	movs	r2, #0
 800789a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 f99b 	bl	8007bdc <RTC_ByteToBcd2>
 80078a6:	4603      	mov	r3, r0
 80078a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 f994 	bl	8007bdc <RTC_ByteToBcd2>
 80078b4:	4603      	mov	r3, r0
 80078b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80078b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	789b      	ldrb	r3, [r3, #2]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f98c 	bl	8007bdc <RTC_ByteToBcd2>
 80078c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80078c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	78db      	ldrb	r3, [r3, #3]
 80078ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	e018      	b.n	8007908 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2200      	movs	r2, #0
 80078e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80078f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80078fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	78db      	ldrb	r3, [r3, #3]
 8007902:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	22ca      	movs	r2, #202	; 0xca
 800790e:	625a      	str	r2, [r3, #36]	; 0x24
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2253      	movs	r2, #83	; 0x53
 8007916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f935 	bl	8007b88 <RTC_EnterInitMode>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00d      	beq.n	8007940 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	22ff      	movs	r2, #255	; 0xff
 800792a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2204      	movs	r2, #4
 8007930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e04b      	b.n	80079d8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800794a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800794e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800795e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6899      	ldr	r1, [r3, #8]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	431a      	orrs	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007986:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d113      	bne.n	80079be <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f8d0 	bl	8007b3c <HAL_RTC_WaitForSynchro>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	22ff      	movs	r2, #255	; 0xff
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2204      	movs	r2, #4
 80079ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e00c      	b.n	80079d8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	22ff      	movs	r2, #255	; 0xff
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80079d6:	2300      	movs	r3, #0
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd90      	pop	{r4, r7, pc}

080079e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_RTC_SetDate+0x1a>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e09c      	b.n	8007b34 <HAL_RTC_SetDate+0x154>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10e      	bne.n	8007a2e <HAL_RTC_SetDate+0x4e>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	f023 0310 	bic.w	r3, r3, #16
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	330a      	adds	r3, #10
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11c      	bne.n	8007a6e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	78db      	ldrb	r3, [r3, #3]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 f8cf 	bl	8007bdc <RTC_ByteToBcd2>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f8c8 	bl	8007bdc <RTC_ByteToBcd2>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a50:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	789b      	ldrb	r3, [r3, #2]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f8c0 	bl	8007bdc <RTC_ByteToBcd2>
 8007a5c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a5e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e00e      	b.n	8007a8c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	78db      	ldrb	r3, [r3, #3]
 8007a72:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a7a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a80:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	22ca      	movs	r2, #202	; 0xca
 8007a92:	625a      	str	r2, [r3, #36]	; 0x24
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2253      	movs	r2, #83	; 0x53
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f873 	bl	8007b88 <RTC_EnterInitMode>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00d      	beq.n	8007ac4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e037      	b.n	8007b34 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ace:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ad2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d113      	bne.n	8007b1a <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f822 	bl	8007b3c <HAL_RTC_WaitForSynchro>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	22ff      	movs	r2, #255	; 0xff
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e00c      	b.n	8007b34 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	22ff      	movs	r2, #255	; 0xff
 8007b20:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007b32:	2300      	movs	r3, #0
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007b54:	f7fd fac0 	bl	80050d8 <HAL_GetTick>
 8007b58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b5a:	e009      	b.n	8007b70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b5c:	f7fd fabc 	bl	80050d8 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b6a:	d901      	bls.n	8007b70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e007      	b.n	8007b80 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0ee      	beq.n	8007b5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d119      	bne.n	8007bd2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ba8:	f7fd fa96 	bl	80050d8 <HAL_GetTick>
 8007bac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bae:	e009      	b.n	8007bc4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007bb0:	f7fd fa92 	bl	80050d8 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bbe:	d901      	bls.n	8007bc4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e007      	b.n	8007bd4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0ee      	beq.n	8007bb0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8007bee:	e005      	b.n	8007bfc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	3b0a      	subs	r3, #10
 8007bfa:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d8f6      	bhi.n	8007bf0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b2db      	uxtb	r3, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e095      	b.n	8007d5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3e:	d009      	beq.n	8007c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	61da      	str	r2, [r3, #28]
 8007c46:	e005      	b.n	8007c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fc ff1c 	bl	8004aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c94:	d902      	bls.n	8007c9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	e002      	b.n	8007ca2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ca0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007caa:	d007      	beq.n	8007cbc <HAL_SPI_Init+0xa0>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cb4:	d002      	beq.n	8007cbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfe:	ea42 0103 	orr.w	r1, r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	0c1b      	lsrs	r3, r3, #16
 8007d18:	f003 0204 	and.w	r2, r3, #4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d38:	ea42 0103 	orr.w	r1, r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b08a      	sub	sp, #40	; 0x28
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d70:	2301      	movs	r3, #1
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x26>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e1fb      	b.n	8008180 <HAL_SPI_TransmitReceive+0x41e>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d90:	f7fd f9a2 	bl	80050d8 <HAL_GetTick>
 8007d94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007da4:	887b      	ldrh	r3, [r7, #2]
 8007da6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007da8:	887b      	ldrh	r3, [r7, #2]
 8007daa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dac:	7efb      	ldrb	r3, [r7, #27]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d00e      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x6e>
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db8:	d106      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x66>
 8007dc2:	7efb      	ldrb	r3, [r7, #27]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d003      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007dce:	e1cd      	b.n	800816c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <HAL_SPI_TransmitReceive+0x80>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_SPI_TransmitReceive+0x80>
 8007ddc:	887b      	ldrh	r3, [r7, #2]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007de8:	e1c0      	b.n	800816c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d003      	beq.n	8007dfe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2205      	movs	r2, #5
 8007dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	887a      	ldrh	r2, [r7, #2]
 8007e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	887a      	ldrh	r2, [r7, #2]
 8007e24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	887a      	ldrh	r2, [r7, #2]
 8007e2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e40:	d802      	bhi.n	8007e48 <HAL_SPI_TransmitReceive+0xe6>
 8007e42:	8a3b      	ldrh	r3, [r7, #16]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d908      	bls.n	8007e5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e56:	605a      	str	r2, [r3, #4]
 8007e58:	e007      	b.n	8007e6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b40      	cmp	r3, #64	; 0x40
 8007e76:	d007      	beq.n	8007e88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e90:	d97c      	bls.n	8007f8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_SPI_TransmitReceive+0x13e>
 8007e9a:	8a7b      	ldrh	r3, [r7, #18]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d169      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	881a      	ldrh	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	1c9a      	adds	r2, r3, #2
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ec4:	e056      	b.n	8007f74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d11b      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x1aa>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d016      	beq.n	8007f0c <HAL_SPI_TransmitReceive+0x1aa>
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d113      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee8:	881a      	ldrh	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	1c9a      	adds	r2, r3, #2
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d11c      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x1f2>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	b292      	uxth	r2, r2
 8007f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	1c9a      	adds	r2, r3, #2
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f50:	2301      	movs	r3, #1
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f54:	f7fd f8c0 	bl	80050d8 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d807      	bhi.n	8007f74 <HAL_SPI_TransmitReceive+0x212>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d003      	beq.n	8007f74 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f72:	e0fb      	b.n	800816c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1a3      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x164>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d19d      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x164>
 8007f8a:	e0df      	b.n	800814c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_SPI_TransmitReceive+0x23a>
 8007f94:	8a7b      	ldrh	r3, [r7, #18]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	f040 80cb 	bne.w	8008132 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d912      	bls.n	8007fcc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	881a      	ldrh	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	1c9a      	adds	r2, r3, #2
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b02      	subs	r3, #2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fca:	e0b2      	b.n	8008132 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	7812      	ldrb	r2, [r2, #0]
 8007fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ff2:	e09e      	b.n	8008132 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d134      	bne.n	800806c <HAL_SPI_TransmitReceive+0x30a>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d02f      	beq.n	800806c <HAL_SPI_TransmitReceive+0x30a>
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	2b01      	cmp	r3, #1
 8008010:	d12c      	bne.n	800806c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	d912      	bls.n	8008042 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	881a      	ldrh	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	1c9a      	adds	r2, r3, #2
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008036:	b29b      	uxth	r3, r3
 8008038:	3b02      	subs	r3, #2
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008040:	e012      	b.n	8008068 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b01      	cmp	r3, #1
 8008078:	d148      	bne.n	800810c <HAL_SPI_TransmitReceive+0x3aa>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d042      	beq.n	800810c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d923      	bls.n	80080da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	b292      	uxth	r2, r2
 800809e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	1c9a      	adds	r2, r3, #2
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b02      	subs	r3, #2
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d81f      	bhi.n	8008108 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	e016      	b.n	8008108 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f103 020c 	add.w	r2, r3, #12
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	7812      	ldrb	r2, [r2, #0]
 80080e8:	b2d2      	uxtb	r2, r2
 80080ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008108:	2301      	movs	r3, #1
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800810c:	f7fc ffe4 	bl	80050d8 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008118:	429a      	cmp	r2, r3
 800811a:	d803      	bhi.n	8008124 <HAL_SPI_TransmitReceive+0x3c2>
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008122:	d102      	bne.n	800812a <HAL_SPI_TransmitReceive+0x3c8>
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008130:	e01c      	b.n	800816c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	f47f af5b 	bne.w	8007ff4 <HAL_SPI_TransmitReceive+0x292>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	f47f af54 	bne.w	8007ff4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f937 	bl	80083c4 <SPI_EndRxTxTransaction>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2220      	movs	r2, #32
 8008166:	661a      	str	r2, [r3, #96]	; 0x60
 8008168:	e000      	b.n	800816c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800816a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800817c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008180:	4618      	mov	r0, r3
 8008182:	3728      	adds	r7, #40	; 0x28
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	4613      	mov	r3, r2
 8008196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008198:	f7fc ff9e 	bl	80050d8 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	1a9b      	subs	r3, r3, r2
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081a8:	f7fc ff96 	bl	80050d8 <HAL_GetTick>
 80081ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081ae:	4b39      	ldr	r3, [pc, #228]	; (8008294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	015b      	lsls	r3, r3, #5
 80081b4:	0d1b      	lsrs	r3, r3, #20
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	fb02 f303 	mul.w	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081be:	e054      	b.n	800826a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d050      	beq.n	800826a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081c8:	f7fc ff86 	bl	80050d8 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d902      	bls.n	80081de <SPI_WaitFlagStateUntilTimeout+0x56>
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d13d      	bne.n	800825a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081f6:	d111      	bne.n	800821c <SPI_WaitFlagStateUntilTimeout+0x94>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008200:	d004      	beq.n	800820c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820a:	d107      	bne.n	800821c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800821a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008224:	d10f      	bne.n	8008246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e017      	b.n	800828a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	3b01      	subs	r3, #1
 8008268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4013      	ands	r3, r2
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	429a      	cmp	r2, r3
 8008286:	d19b      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	2000000c 	.word	0x2000000c

08008298 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80082aa:	f7fc ff15 	bl	80050d8 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	1a9b      	subs	r3, r3, r2
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	4413      	add	r3, r2
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80082ba:	f7fc ff0d 	bl	80050d8 <HAL_GetTick>
 80082be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	330c      	adds	r3, #12
 80082c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80082c8:	4b3d      	ldr	r3, [pc, #244]	; (80083c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	00da      	lsls	r2, r3, #3
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	0d1b      	lsrs	r3, r3, #20
 80082d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80082e0:	e060      	b.n	80083a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082e8:	d107      	bne.n	80082fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d050      	beq.n	80083a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008302:	f7fc fee9 	bl	80050d8 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830e:	429a      	cmp	r2, r3
 8008310:	d902      	bls.n	8008318 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d13d      	bne.n	8008394 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008330:	d111      	bne.n	8008356 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800833a:	d004      	beq.n	8008346 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008344:	d107      	bne.n	8008356 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835e:	d10f      	bne.n	8008380 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800837e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e010      	b.n	80083b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4013      	ands	r3, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d196      	bne.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3728      	adds	r7, #40	; 0x28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	2000000c 	.word	0x2000000c

080083c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff ff5b 	bl	8008298 <SPI_WaitFifoStateUntilTimeout>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ec:	f043 0220 	orr.w	r2, r3, #32
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e027      	b.n	8008448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	2180      	movs	r1, #128	; 0x80
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fec0 	bl	8008188 <SPI_WaitFlagStateUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008412:	f043 0220 	orr.w	r2, r3, #32
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e014      	b.n	8008448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff ff34 	bl	8008298 <SPI_WaitFifoStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e000      	b.n	8008448 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <LL_RCC_GetUSARTClockSource>:
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4013      	ands	r3, r2
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <LL_RCC_GetLPUARTClockSource>:
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800847c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4013      	ands	r3, r2
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e042      	b.n	8008528 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fc fb6f 	bl	8004b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2224      	movs	r2, #36	; 0x24
 80084be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0201 	bic.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f82c 	bl	8008530 <UART_SetConfig>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e022      	b.n	8008528 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa48 	bl	8008980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800850e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 facf 	bl	8008ac4 <UART_CheckIdleState>
 8008526:	4603      	mov	r3, r0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008534:	b08c      	sub	sp, #48	; 0x30
 8008536:	af00      	add	r7, sp, #0
 8008538:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	431a      	orrs	r2, r3
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	431a      	orrs	r2, r3
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	4313      	orrs	r3, r2
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4baf      	ldr	r3, [pc, #700]	; (800881c <UART_SetConfig+0x2ec>)
 8008560:	4013      	ands	r3, r2
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	6812      	ldr	r2, [r2, #0]
 8008566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008568:	430b      	orrs	r3, r1
 800856a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4aa4      	ldr	r2, [pc, #656]	; (8008820 <UART_SetConfig+0x2f0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008598:	4313      	orrs	r3, r2
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	f023 010f 	bic.w	r1, r3, #15
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a95      	ldr	r2, [pc, #596]	; (8008824 <UART_SetConfig+0x2f4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d125      	bne.n	8008620 <UART_SetConfig+0xf0>
 80085d4:	2003      	movs	r0, #3
 80085d6:	f7ff ff3b 	bl	8008450 <LL_RCC_GetUSARTClockSource>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d81b      	bhi.n	8008618 <UART_SetConfig+0xe8>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <UART_SetConfig+0xb8>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	08008609 	.word	0x08008609
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008611 	.word	0x08008611
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e042      	b.n	8008686 <UART_SetConfig+0x156>
 8008600:	2302      	movs	r3, #2
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e03e      	b.n	8008686 <UART_SetConfig+0x156>
 8008608:	2304      	movs	r3, #4
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e03a      	b.n	8008686 <UART_SetConfig+0x156>
 8008610:	2308      	movs	r3, #8
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e036      	b.n	8008686 <UART_SetConfig+0x156>
 8008618:	2310      	movs	r3, #16
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e032      	b.n	8008686 <UART_SetConfig+0x156>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a7e      	ldr	r2, [pc, #504]	; (8008820 <UART_SetConfig+0x2f0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d12a      	bne.n	8008680 <UART_SetConfig+0x150>
 800862a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800862e:	f7ff ff1f 	bl	8008470 <LL_RCC_GetLPUARTClockSource>
 8008632:	4603      	mov	r3, r0
 8008634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008638:	d01a      	beq.n	8008670 <UART_SetConfig+0x140>
 800863a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800863e:	d81b      	bhi.n	8008678 <UART_SetConfig+0x148>
 8008640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008644:	d00c      	beq.n	8008660 <UART_SetConfig+0x130>
 8008646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864a:	d815      	bhi.n	8008678 <UART_SetConfig+0x148>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <UART_SetConfig+0x128>
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008654:	d008      	beq.n	8008668 <UART_SetConfig+0x138>
 8008656:	e00f      	b.n	8008678 <UART_SetConfig+0x148>
 8008658:	2300      	movs	r3, #0
 800865a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865e:	e012      	b.n	8008686 <UART_SetConfig+0x156>
 8008660:	2302      	movs	r3, #2
 8008662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008666:	e00e      	b.n	8008686 <UART_SetConfig+0x156>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866e:	e00a      	b.n	8008686 <UART_SetConfig+0x156>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008676:	e006      	b.n	8008686 <UART_SetConfig+0x156>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867e:	e002      	b.n	8008686 <UART_SetConfig+0x156>
 8008680:	2310      	movs	r3, #16
 8008682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a65      	ldr	r2, [pc, #404]	; (8008820 <UART_SetConfig+0x2f0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	f040 8097 	bne.w	80087c0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008696:	2b08      	cmp	r3, #8
 8008698:	d823      	bhi.n	80086e2 <UART_SetConfig+0x1b2>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <UART_SetConfig+0x170>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086e3 	.word	0x080086e3
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086e3 	.word	0x080086e3
 80086b0:	080086d3 	.word	0x080086d3
 80086b4:	080086e3 	.word	0x080086e3
 80086b8:	080086e3 	.word	0x080086e3
 80086bc:	080086e3 	.word	0x080086e3
 80086c0:	080086db 	.word	0x080086db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086c4:	f7fe fafe 	bl	8006cc4 <HAL_RCC_GetPCLK1Freq>
 80086c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086ca:	e010      	b.n	80086ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086cc:	4b56      	ldr	r3, [pc, #344]	; (8008828 <UART_SetConfig+0x2f8>)
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086d0:	e00d      	b.n	80086ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086d2:	f7fe fa77 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 80086d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086d8:	e009      	b.n	80086ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086e0:	e005      	b.n	80086ee <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 812b 	beq.w	800894c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	4a4c      	ldr	r2, [pc, #304]	; (800882c <UART_SetConfig+0x2fc>)
 80086fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008700:	461a      	mov	r2, r3
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	fbb3 f3f2 	udiv	r3, r3, r2
 8008708:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	429a      	cmp	r2, r3
 8008718:	d305      	bcc.n	8008726 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	429a      	cmp	r2, r3
 8008724:	d903      	bls.n	800872e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800872c:	e10e      	b.n	800894c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	2200      	movs	r2, #0
 8008732:	60bb      	str	r3, [r7, #8]
 8008734:	60fa      	str	r2, [r7, #12]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	4a3c      	ldr	r2, [pc, #240]	; (800882c <UART_SetConfig+0x2fc>)
 800873c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008740:	b29b      	uxth	r3, r3
 8008742:	2200      	movs	r2, #0
 8008744:	603b      	str	r3, [r7, #0]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008750:	f7f7 fd6e 	bl	8000230 <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4610      	mov	r0, r2
 800875a:	4619      	mov	r1, r3
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	020b      	lsls	r3, r1, #8
 8008766:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800876a:	0202      	lsls	r2, r0, #8
 800876c:	6979      	ldr	r1, [r7, #20]
 800876e:	6849      	ldr	r1, [r1, #4]
 8008770:	0849      	lsrs	r1, r1, #1
 8008772:	2000      	movs	r0, #0
 8008774:	460c      	mov	r4, r1
 8008776:	4605      	mov	r5, r0
 8008778:	eb12 0804 	adds.w	r8, r2, r4
 800877c:	eb43 0905 	adc.w	r9, r3, r5
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	469a      	mov	sl, r3
 8008788:	4693      	mov	fp, r2
 800878a:	4652      	mov	r2, sl
 800878c:	465b      	mov	r3, fp
 800878e:	4640      	mov	r0, r8
 8008790:	4649      	mov	r1, r9
 8008792:	f7f7 fd4d 	bl	8000230 <__aeabi_uldivmod>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4613      	mov	r3, r2
 800879c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087a4:	d308      	bcc.n	80087b8 <UART_SetConfig+0x288>
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ac:	d204      	bcs.n	80087b8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6a3a      	ldr	r2, [r7, #32]
 80087b4:	60da      	str	r2, [r3, #12]
 80087b6:	e0c9      	b.n	800894c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087be:	e0c5      	b.n	800894c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087c8:	d16d      	bne.n	80088a6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80087ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	d82d      	bhi.n	8008830 <UART_SetConfig+0x300>
 80087d4:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <UART_SetConfig+0x2ac>)
 80087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087da:	bf00      	nop
 80087dc:	080087fd 	.word	0x080087fd
 80087e0:	08008805 	.word	0x08008805
 80087e4:	08008831 	.word	0x08008831
 80087e8:	0800880b 	.word	0x0800880b
 80087ec:	08008831 	.word	0x08008831
 80087f0:	08008831 	.word	0x08008831
 80087f4:	08008831 	.word	0x08008831
 80087f8:	08008813 	.word	0x08008813
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fe fa78 	bl	8006cf0 <HAL_RCC_GetPCLK2Freq>
 8008800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008802:	e01b      	b.n	800883c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008804:	4b08      	ldr	r3, [pc, #32]	; (8008828 <UART_SetConfig+0x2f8>)
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008808:	e018      	b.n	800883c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880a:	f7fe f9db 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 800880e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008810:	e014      	b.n	800883c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008818:	e010      	b.n	800883c <UART_SetConfig+0x30c>
 800881a:	bf00      	nop
 800881c:	cfff69f3 	.word	0xcfff69f3
 8008820:	40008000 	.word	0x40008000
 8008824:	40013800 	.word	0x40013800
 8008828:	00f42400 	.word	0x00f42400
 800882c:	0800d4a0 	.word	0x0800d4a0
      default:
        pclk = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800883a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 8084 	beq.w	800894c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	4a4b      	ldr	r2, [pc, #300]	; (8008978 <UART_SetConfig+0x448>)
 800884a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884e:	461a      	mov	r2, r3
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	fbb3 f3f2 	udiv	r3, r3, r2
 8008856:	005a      	lsls	r2, r3, #1
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	441a      	add	r2, r3
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d916      	bls.n	800889e <UART_SetConfig+0x36e>
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008876:	d212      	bcs.n	800889e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f023 030f 	bic.w	r3, r3, #15
 8008880:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	085b      	lsrs	r3, r3, #1
 8008886:	b29b      	uxth	r3, r3
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	b29a      	uxth	r2, r3
 800888e:	8bfb      	ldrh	r3, [r7, #30]
 8008890:	4313      	orrs	r3, r2
 8008892:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	8bfa      	ldrh	r2, [r7, #30]
 800889a:	60da      	str	r2, [r3, #12]
 800889c:	e056      	b.n	800894c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088a4:	e052      	b.n	800894c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b07      	cmp	r3, #7
 80088ae:	d822      	bhi.n	80088f6 <UART_SetConfig+0x3c6>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <UART_SetConfig+0x388>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088f7 	.word	0x080088f7
 80088c4:	080088e7 	.word	0x080088e7
 80088c8:	080088f7 	.word	0x080088f7
 80088cc:	080088f7 	.word	0x080088f7
 80088d0:	080088f7 	.word	0x080088f7
 80088d4:	080088ef 	.word	0x080088ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d8:	f7fe fa0a 	bl	8006cf0 <HAL_RCC_GetPCLK2Freq>
 80088dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088de:	e010      	b.n	8008902 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e0:	4b26      	ldr	r3, [pc, #152]	; (800897c <UART_SetConfig+0x44c>)
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e4:	e00d      	b.n	8008902 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088e6:	f7fe f96d 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 80088ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ec:	e009      	b.n	8008902 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088f4:	e005      	b.n	8008902 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008900:	bf00      	nop
    }

    if (pclk != 0U)
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d021      	beq.n	800894c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	4a1a      	ldr	r2, [pc, #104]	; (8008978 <UART_SetConfig+0x448>)
 800890e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008912:	461a      	mov	r2, r3
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	fbb3 f2f2 	udiv	r2, r3, r2
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	441a      	add	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	fbb2 f3f3 	udiv	r3, r2, r3
 800892a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	2b0f      	cmp	r3, #15
 8008930:	d909      	bls.n	8008946 <UART_SetConfig+0x416>
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008938:	d205      	bcs.n	8008946 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	b29a      	uxth	r2, r3
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60da      	str	r2, [r3, #12]
 8008944:	e002      	b.n	800894c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2201      	movs	r2, #1
 8008958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2200      	movs	r2, #0
 8008960:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2200      	movs	r2, #0
 8008966:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008968:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800896c:	4618      	mov	r0, r3
 800896e:	3730      	adds	r7, #48	; 0x30
 8008970:	46bd      	mov	sp, r7
 8008972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008976:	bf00      	nop
 8008978:	0800d4a0 	.word	0x0800d4a0
 800897c:	00f42400 	.word	0x00f42400

08008980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01a      	beq.n	8008a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a7e:	d10a      	bne.n	8008a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	605a      	str	r2, [r3, #4]
  }
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b098      	sub	sp, #96	; 0x60
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ad4:	f7fc fb00 	bl	80050d8 <HAL_GetTick>
 8008ad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d12f      	bne.n	8008b48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af0:	2200      	movs	r2, #0
 8008af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f88e 	bl	8008c18 <UART_WaitOnFlagUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d022      	beq.n	8008b48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b16:	653b      	str	r3, [r7, #80]	; 0x50
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	647b      	str	r3, [r7, #68]	; 0x44
 8008b22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e063      	b.n	8008c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d149      	bne.n	8008bea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f857 	bl	8008c18 <UART_WaitOnFlagUntilTimeout>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d03c      	beq.n	8008bea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e6      	bne.n	8008b70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc2:	61fa      	str	r2, [r7, #28]
 8008bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	69b9      	ldr	r1, [r7, #24]
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e012      	b.n	8008c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3758      	adds	r7, #88	; 0x58
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	4613      	mov	r3, r2
 8008c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c28:	e049      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d045      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c32:	f7fc fa51 	bl	80050d8 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d302      	bcc.n	8008c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e048      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d031      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d110      	bne.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f838 	bl	8008ce6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e029      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c98:	d111      	bne.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f81e 	bl	8008ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e00f      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d0a6      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b095      	sub	sp, #84	; 0x54
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e6      	bne.n	8008cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d36:	f023 0301 	bic.w	r3, r3, #1
 8008d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e3      	bne.n	8008d20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d118      	bne.n	8008d92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f023 0310 	bic.w	r3, r3, #16
 8008d74:	647b      	str	r3, [r7, #68]	; 0x44
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6979      	ldr	r1, [r7, #20]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e6      	bne.n	8008d60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008da6:	bf00      	nop
 8008da8:	3754      	adds	r7, #84	; 0x54
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e027      	b.n	8008e18 <HAL_UARTEx_DisableFifoMode+0x66>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2224      	movs	r2, #36	; 0x24
 8008dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 0201 	bic.w	r2, r2, #1
 8008dee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008df6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e02d      	b.n	8008e98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2224      	movs	r2, #36	; 0x24
 8008e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0201 	bic.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f84f 	bl	8008f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e02d      	b.n	8008f14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2224      	movs	r2, #36	; 0x24
 8008ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0201 	bic.w	r2, r2, #1
 8008ede:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f811 	bl	8008f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d108      	bne.n	8008f3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f3c:	e031      	b.n	8008fa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f3e:	2308      	movs	r3, #8
 8008f40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f42:	2308      	movs	r3, #8
 8008f44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	0e5b      	lsrs	r3, r3, #25
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	0f5b      	lsrs	r3, r3, #29
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	7b3a      	ldrb	r2, [r7, #12]
 8008f6a:	4911      	ldr	r1, [pc, #68]	; (8008fb0 <UARTEx_SetNbDataToProcess+0x94>)
 8008f6c:	5c8a      	ldrb	r2, [r1, r2]
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f72:	7b3a      	ldrb	r2, [r7, #12]
 8008f74:	490f      	ldr	r1, [pc, #60]	; (8008fb4 <UARTEx_SetNbDataToProcess+0x98>)
 8008f76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f78:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	7b7a      	ldrb	r2, [r7, #13]
 8008f88:	4909      	ldr	r1, [pc, #36]	; (8008fb0 <UARTEx_SetNbDataToProcess+0x94>)
 8008f8a:	5c8a      	ldrb	r2, [r1, r2]
 8008f8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f90:	7b7a      	ldrb	r2, [r7, #13]
 8008f92:	4908      	ldr	r1, [pc, #32]	; (8008fb4 <UARTEx_SetNbDataToProcess+0x98>)
 8008f94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f96:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008fa2:	bf00      	nop
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	0800d4b8 	.word	0x0800d4b8
 8008fb4:	0800d4c0 	.word	0x0800d4c0

08008fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008fc0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008fc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fee:	b084      	sub	sp, #16
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	f107 0014 	add.w	r0, r7, #20
 8008ffc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	b004      	add	sp, #16
 800902e:	4770      	bx	lr

08009030 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800903a:	f107 0308 	add.w	r3, r7, #8
 800903e:	2218      	movs	r2, #24
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f001 f888 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009048:	233f      	movs	r3, #63	; 0x3f
 800904a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800904c:	2381      	movs	r3, #129	; 0x81
 800904e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009050:	1dfb      	adds	r3, r7, #7
 8009052:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009054:	2301      	movs	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009058:	f107 0308 	add.w	r3, r7, #8
 800905c:	2100      	movs	r1, #0
 800905e:	4618      	mov	r0, r3
 8009060:	f001 fc08 	bl	800a874 <hci_send_req>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	da01      	bge.n	800906e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800906a:	23ff      	movs	r3, #255	; 0xff
 800906c:	e000      	b.n	8009070 <aci_gap_set_non_discoverable+0x40>
  return status;
 800906e:	79fb      	ldrb	r3, [r7, #7]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3720      	adds	r7, #32
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8009078:	b5b0      	push	{r4, r5, r7, lr}
 800907a:	b0ce      	sub	sp, #312	; 0x138
 800907c:	af00      	add	r7, sp, #0
 800907e:	4605      	mov	r5, r0
 8009080:	460c      	mov	r4, r1
 8009082:	4610      	mov	r0, r2
 8009084:	4619      	mov	r1, r3
 8009086:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800908a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800908e:	462a      	mov	r2, r5
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009096:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800909a:	4622      	mov	r2, r4
 800909c:	801a      	strh	r2, [r3, #0]
 800909e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090a2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80090a6:	4602      	mov	r2, r0
 80090a8:	801a      	strh	r2, [r3, #0]
 80090aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090ae:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80090b2:	460a      	mov	r2, r1
 80090b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80090b6:	f107 0310 	add.w	r3, r7, #16
 80090ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80090be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80090c2:	3308      	adds	r3, #8
 80090c4:	f107 0210 	add.w	r2, r7, #16
 80090c8:	4413      	add	r3, r2
 80090ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80090ce:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80090d2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80090d6:	4413      	add	r3, r2
 80090d8:	3309      	adds	r3, #9
 80090da:	f107 0210 	add.w	r2, r7, #16
 80090de:	4413      	add	r3, r2
 80090e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80090ec:	2200      	movs	r2, #0
 80090ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80090f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090fa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80090fe:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009102:	7812      	ldrb	r2, [r2, #0]
 8009104:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800910a:	3301      	adds	r3, #1
 800910c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009110:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009114:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009118:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800911c:	8812      	ldrh	r2, [r2, #0]
 800911e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009126:	3302      	adds	r3, #2
 8009128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800912c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009130:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009134:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8009138:	8812      	ldrh	r2, [r2, #0]
 800913a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800913e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009142:	3302      	adds	r3, #2
 8009144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009148:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800914c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009150:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009154:	7812      	ldrb	r2, [r2, #0]
 8009156:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800915c:	3301      	adds	r3, #1
 800915e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009162:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009166:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800916a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800916c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009170:	3301      	adds	r3, #1
 8009172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800917a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800917e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009180:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009184:	3301      	adds	r3, #1
 8009186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800918a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800918e:	3308      	adds	r3, #8
 8009190:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009194:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009198:	4618      	mov	r0, r3
 800919a:	f000 ffcd 	bl	800a138 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800919e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80091a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091a6:	4413      	add	r3, r2
 80091a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80091ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091b0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80091b4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80091b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ba:	3301      	adds	r3, #1
 80091bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80091c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091c4:	3301      	adds	r3, #1
 80091c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80091ca:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 ffb2 	bl	800a138 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80091d4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80091d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091dc:	4413      	add	r3, r2
 80091de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80091e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091e6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80091ea:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80091ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091f0:	3302      	adds	r3, #2
 80091f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80091f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091fa:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80091fe:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009200:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009204:	3302      	adds	r3, #2
 8009206:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800920a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800920e:	2218      	movs	r2, #24
 8009210:	2100      	movs	r1, #0
 8009212:	4618      	mov	r0, r3
 8009214:	f000 ffa0 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009218:	233f      	movs	r3, #63	; 0x3f
 800921a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800921e:	2383      	movs	r3, #131	; 0x83
 8009220:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009224:	f107 0310 	add.w	r3, r7, #16
 8009228:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800922c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009230:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009234:	f107 030f 	add.w	r3, r7, #15
 8009238:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800923c:	2301      	movs	r3, #1
 800923e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009242:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f001 fb13 	bl	800a874 <hci_send_req>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	da01      	bge.n	8009258 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009254:	23ff      	movs	r3, #255	; 0xff
 8009256:	e004      	b.n	8009262 <aci_gap_set_discoverable+0x1ea>
  return status;
 8009258:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800925c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009260:	781b      	ldrb	r3, [r3, #0]
}
 8009262:	4618      	mov	r0, r3
 8009264:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009268:	46bd      	mov	sp, r7
 800926a:	bdb0      	pop	{r4, r5, r7, pc}

0800926c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b0cc      	sub	sp, #304	; 0x130
 8009270:	af00      	add	r7, sp, #0
 8009272:	4602      	mov	r2, r0
 8009274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009278:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800927c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800927e:	f107 0310 	add.w	r3, r7, #16
 8009282:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ac:	3301      	adds	r3, #1
 80092ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092b6:	2218      	movs	r2, #24
 80092b8:	2100      	movs	r1, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 ff4c 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092c0:	233f      	movs	r3, #63	; 0x3f
 80092c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80092c6:	2385      	movs	r3, #133	; 0x85
 80092c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092dc:	f107 030f 	add.w	r3, r7, #15
 80092e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 fabf 	bl	800a874 <hci_send_req>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	da01      	bge.n	8009300 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80092fc:	23ff      	movs	r3, #255	; 0xff
 80092fe:	e004      	b.n	800930a <aci_gap_set_io_capability+0x9e>
  return status;
 8009300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009304:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009308:	781b      	ldrb	r3, [r3, #0]
}
 800930a:	4618      	mov	r0, r3
 800930c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009314:	b5b0      	push	{r4, r5, r7, lr}
 8009316:	b0cc      	sub	sp, #304	; 0x130
 8009318:	af00      	add	r7, sp, #0
 800931a:	4605      	mov	r5, r0
 800931c:	460c      	mov	r4, r1
 800931e:	4610      	mov	r0, r2
 8009320:	4619      	mov	r1, r3
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800932a:	462a      	mov	r2, r5
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009332:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009336:	4622      	mov	r2, r4
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009342:	4602      	mov	r2, r0
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800934e:	460a      	mov	r2, r1
 8009350:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009352:	f107 0310 	add.w	r3, r7, #16
 8009356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800935a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009362:	2200      	movs	r2, #0
 8009364:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800936c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009370:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009374:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009378:	7812      	ldrb	r2, [r2, #0]
 800937a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800937c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009380:	3301      	adds	r3, #1
 8009382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800938e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939a:	3301      	adds	r3, #1
 800939c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80093a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093a8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80093ac:	7812      	ldrb	r2, [r2, #0]
 80093ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80093b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b4:	3301      	adds	r3, #1
 80093b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80093ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80093ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093ce:	3301      	adds	r3, #1
 80093d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80093dc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80093de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093e2:	3301      	adds	r3, #1
 80093e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80093e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ec:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80093f0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80093f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093f6:	3301      	adds	r3, #1
 80093f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80093fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009400:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009404:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009406:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800940a:	3301      	adds	r3, #1
 800940c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009414:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009418:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800941c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009420:	3304      	adds	r3, #4
 8009422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800942e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009434:	3301      	adds	r3, #1
 8009436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800943a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800943e:	2218      	movs	r2, #24
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fe88 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009448:	233f      	movs	r3, #63	; 0x3f
 800944a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800944e:	2386      	movs	r3, #134	; 0x86
 8009450:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009454:	f107 0310 	add.w	r3, r7, #16
 8009458:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800945c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009460:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009464:	f107 030f 	add.w	r3, r7, #15
 8009468:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800946c:	2301      	movs	r3, #1
 800946e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009476:	2100      	movs	r1, #0
 8009478:	4618      	mov	r0, r3
 800947a:	f001 f9fb 	bl	800a874 <hci_send_req>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	da01      	bge.n	8009488 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009484:	23ff      	movs	r3, #255	; 0xff
 8009486:	e004      	b.n	8009492 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009490:	781b      	ldrb	r3, [r3, #0]
}
 8009492:	4618      	mov	r0, r3
 8009494:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009498:	46bd      	mov	sp, r7
 800949a:	bdb0      	pop	{r4, r5, r7, pc}

0800949c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b0cd      	sub	sp, #308	; 0x134
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	4611      	mov	r1, r2
 80094a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094ac:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094ba:	4622      	mov	r2, r4
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094c6:	4602      	mov	r2, r0
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ce:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80094d2:	460a      	mov	r2, r1
 80094d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80094d6:	f107 0310 	add.w	r3, r7, #16
 80094da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80094de:	f107 0308 	add.w	r3, r7, #8
 80094e2:	2207      	movs	r2, #7
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fe36 	bl	800a158 <Osal_MemSet>
  int index_input = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80094f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094fa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80094fe:	7812      	ldrb	r2, [r2, #0]
 8009500:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009506:	3301      	adds	r3, #1
 8009508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800950c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009510:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009514:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009518:	7812      	ldrb	r2, [r2, #0]
 800951a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800951c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009520:	3301      	adds	r3, #1
 8009522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800952e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009532:	7812      	ldrb	r2, [r2, #0]
 8009534:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800953a:	3301      	adds	r3, #1
 800953c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009540:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009544:	2218      	movs	r2, #24
 8009546:	2100      	movs	r1, #0
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fe05 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 800954e:	233f      	movs	r3, #63	; 0x3f
 8009550:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009554:	238a      	movs	r3, #138	; 0x8a
 8009556:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800955a:	f107 0310 	add.w	r3, r7, #16
 800955e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009566:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800956a:	f107 0308 	add.w	r3, r7, #8
 800956e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009572:	2307      	movs	r3, #7
 8009574:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f978 	bl	800a874 <hci_send_req>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	da01      	bge.n	800958e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800958a:	23ff      	movs	r3, #255	; 0xff
 800958c:	e02e      	b.n	80095ec <aci_gap_init+0x150>
  if ( resp.Status )
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <aci_gap_init+0x10c>
    return resp.Status;
 800959c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	e021      	b.n	80095ec <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80095a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80095c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80095d4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80095d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095de:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80095e8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd90      	pop	{r4, r7, pc}

080095f6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b0cc      	sub	sp, #304	; 0x130
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	4602      	mov	r2, r0
 80095fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009606:	6019      	str	r1, [r3, #0]
 8009608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009610:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009612:	f107 0310 	add.w	r3, r7, #16
 8009616:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800961a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800962c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009630:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009634:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800963c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009640:	3301      	adds	r3, #1
 8009642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800964a:	1c58      	adds	r0, r3, #1
 800964c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009650:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800965e:	6819      	ldr	r1, [r3, #0]
 8009660:	f000 fd6a 	bl	800a138 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009668:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009672:	4413      	add	r3, r2
 8009674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800967c:	2218      	movs	r2, #24
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fd69 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009686:	233f      	movs	r3, #63	; 0x3f
 8009688:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800968c:	238e      	movs	r3, #142	; 0x8e
 800968e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009692:	f107 0310 	add.w	r3, r7, #16
 8009696:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800969a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800969e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096a2:	f107 030f 	add.w	r3, r7, #15
 80096a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 f8dc 	bl	800a874 <hci_send_req>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da01      	bge.n	80096c6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80096c2:	23ff      	movs	r3, #255	; 0xff
 80096c4:	e004      	b.n	80096d0 <aci_gap_update_adv_data+0xda>
  return status;
 80096c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096ce:	781b      	ldrb	r3, [r3, #0]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b088      	sub	sp, #32
 80096de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	2218      	movs	r2, #24
 80096ea:	2100      	movs	r1, #0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 fd33 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096f2:	233f      	movs	r3, #63	; 0x3f
 80096f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80096f6:	2392      	movs	r3, #146	; 0x92
 80096f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80096fa:	1dfb      	adds	r3, r7, #7
 80096fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	2100      	movs	r1, #0
 8009708:	4618      	mov	r0, r3
 800970a:	f001 f8b3 	bl	800a874 <hci_send_req>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	da01      	bge.n	8009718 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009714:	23ff      	movs	r3, #255	; 0xff
 8009716:	e000      	b.n	800971a <aci_gap_configure_whitelist+0x40>
  return status;
 8009718:	79fb      	ldrb	r3, [r7, #7]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b088      	sub	sp, #32
 8009726:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	2218      	movs	r2, #24
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fd0f 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 800973a:	233f      	movs	r3, #63	; 0x3f
 800973c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800973e:	f240 1301 	movw	r3, #257	; 0x101
 8009742:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009744:	1dfb      	adds	r3, r7, #7
 8009746:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009748:	2301      	movs	r3, #1
 800974a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800974c:	f107 0308 	add.w	r3, r7, #8
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f001 f88e 	bl	800a874 <hci_send_req>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	da01      	bge.n	8009762 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800975e:	23ff      	movs	r3, #255	; 0xff
 8009760:	e000      	b.n	8009764 <aci_gatt_init+0x42>
  return status;
 8009762:	79fb      	ldrb	r3, [r7, #7]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800976c:	b590      	push	{r4, r7, lr}
 800976e:	b0cf      	sub	sp, #316	; 0x13c
 8009770:	af00      	add	r7, sp, #0
 8009772:	4604      	mov	r4, r0
 8009774:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009778:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800977c:	6001      	str	r1, [r0, #0]
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009786:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800978a:	4622      	mov	r2, r4
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009792:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009796:	4602      	mov	r2, r0
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800979e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80097a2:	460a      	mov	r2, r1
 80097a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80097a6:	f107 0310 	add.w	r3, r7, #16
 80097aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80097ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80097b2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d00a      	beq.n	80097d2 <aci_gatt_add_service+0x66>
 80097bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80097c0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d101      	bne.n	80097ce <aci_gatt_add_service+0x62>
 80097ca:	2311      	movs	r3, #17
 80097cc:	e002      	b.n	80097d4 <aci_gatt_add_service+0x68>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <aci_gatt_add_service+0x68>
 80097d2:	2303      	movs	r3, #3
 80097d4:	f107 0210 	add.w	r2, r7, #16
 80097d8:	4413      	add	r3, r2
 80097da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80097de:	f107 030c 	add.w	r3, r7, #12
 80097e2:	2203      	movs	r2, #3
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fcb6 	bl	800a158 <Osal_MemSet>
  int index_input = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80097f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80097fa:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80097fe:	7812      	ldrb	r2, [r2, #0]
 8009800:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009806:	3301      	adds	r3, #1
 8009808:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800980c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009810:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d002      	beq.n	8009820 <aci_gatt_add_service+0xb4>
 800981a:	2b02      	cmp	r3, #2
 800981c:	d004      	beq.n	8009828 <aci_gatt_add_service+0xbc>
 800981e:	e007      	b.n	8009830 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009820:	2302      	movs	r3, #2
 8009822:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009826:	e005      	b.n	8009834 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009828:	2310      	movs	r3, #16
 800982a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800982e:	e001      	b.n	8009834 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009830:	2397      	movs	r3, #151	; 0x97
 8009832:	e06c      	b.n	800990e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009838:	1c58      	adds	r0, r3, #1
 800983a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800983e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009846:	6819      	ldr	r1, [r3, #0]
 8009848:	f000 fc76 	bl	800a138 <Osal_MemCpy>
    index_input += size;
 800984c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009850:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009854:	4413      	add	r3, r2
 8009856:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800985a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009862:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009866:	7812      	ldrb	r2, [r2, #0]
 8009868:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800986a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800986e:	3301      	adds	r3, #1
 8009870:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009878:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800987c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009880:	7812      	ldrb	r2, [r2, #0]
 8009882:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009888:	3301      	adds	r3, #1
 800988a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800988e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009892:	2218      	movs	r2, #24
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fc5e 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 800989c:	233f      	movs	r3, #63	; 0x3f
 800989e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80098a2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80098a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098aa:	f107 0310 	add.w	r3, r7, #16
 80098ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80098ba:	f107 030c 	add.w	r3, r7, #12
 80098be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80098c2:	2303      	movs	r3, #3
 80098c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098cc:	2100      	movs	r1, #0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 ffd0 	bl	800a874 <hci_send_req>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	da01      	bge.n	80098de <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80098da:	23ff      	movs	r3, #255	; 0xff
 80098dc:	e017      	b.n	800990e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80098de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80098ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	e00a      	b.n	800990e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80098f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009900:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009904:	b29a      	uxth	r2, r3
 8009906:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800990a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009914:	46bd      	mov	sp, r7
 8009916:	bd90      	pop	{r4, r7, pc}

08009918 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b0d1      	sub	sp, #324	; 0x144
 800991c:	af00      	add	r7, sp, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009926:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800992a:	600a      	str	r2, [r1, #0]
 800992c:	4619      	mov	r1, r3
 800992e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009932:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009936:	4622      	mov	r2, r4
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800993e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009942:	4602      	mov	r2, r0
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800994a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800994e:	460a      	mov	r2, r1
 8009950:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009952:	f107 0318 	add.w	r3, r7, #24
 8009956:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800995a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800995e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d00a      	beq.n	800997e <aci_gatt_add_char+0x66>
 8009968:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800996c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d101      	bne.n	800997a <aci_gatt_add_char+0x62>
 8009976:	2313      	movs	r3, #19
 8009978:	e002      	b.n	8009980 <aci_gatt_add_char+0x68>
 800997a:	2303      	movs	r3, #3
 800997c:	e000      	b.n	8009980 <aci_gatt_add_char+0x68>
 800997e:	2305      	movs	r3, #5
 8009980:	f107 0218 	add.w	r2, r7, #24
 8009984:	4413      	add	r3, r2
 8009986:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800998a:	f107 0314 	add.w	r3, r7, #20
 800998e:	2203      	movs	r2, #3
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fbe0 	bl	800a158 <Osal_MemSet>
  int index_input = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800999e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80099a2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80099a6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80099aa:	8812      	ldrh	r2, [r2, #0]
 80099ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80099ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099b2:	3302      	adds	r3, #2
 80099b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80099b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80099bc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80099c0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80099c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099cc:	3301      	adds	r3, #1
 80099ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80099d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80099d6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d002      	beq.n	80099e6 <aci_gatt_add_char+0xce>
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d004      	beq.n	80099ee <aci_gatt_add_char+0xd6>
 80099e4:	e007      	b.n	80099f6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80099e6:	2302      	movs	r3, #2
 80099e8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80099ec:	e005      	b.n	80099fa <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80099ee:	2310      	movs	r3, #16
 80099f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80099f4:	e001      	b.n	80099fa <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80099f6:	2397      	movs	r3, #151	; 0x97
 80099f8:	e091      	b.n	8009b1e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80099fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80099fe:	1cd8      	adds	r0, r3, #3
 8009a00:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009a04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a08:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009a0c:	6819      	ldr	r1, [r3, #0]
 8009a0e:	f000 fb93 	bl	800a138 <Osal_MemCpy>
    index_input += size;
 8009a12:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009a16:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009a20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a24:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009a28:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009a2c:	8812      	ldrh	r2, [r2, #0]
 8009a2e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009a30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a34:	3302      	adds	r3, #2
 8009a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009a3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a3e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009a42:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009a44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a48:	3301      	adds	r3, #1
 8009a4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a52:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009a56:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a66:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009a6a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009a6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a70:	3301      	adds	r3, #1
 8009a72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009a76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a7a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009a7e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009a80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a84:	3301      	adds	r3, #1
 8009a86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009a8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a8e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009a92:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009a94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a98:	3301      	adds	r3, #1
 8009a9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009aa2:	2218      	movs	r2, #24
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fb56 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009aac:	233f      	movs	r3, #63	; 0x3f
 8009aae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009ab2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009ab6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009aba:	f107 0318 	add.w	r3, r7, #24
 8009abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009ac2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ac6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009aca:	f107 0314 	add.w	r3, r7, #20
 8009ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ad8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fec8 	bl	800a874 <hci_send_req>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da01      	bge.n	8009aee <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009aea:	23ff      	movs	r3, #255	; 0xff
 8009aec:	e017      	b.n	8009b1e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009aee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009afc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	e00a      	b.n	8009b1e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009b08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009b1a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd90      	pop	{r4, r7, pc}

08009b28 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009b28:	b5b0      	push	{r4, r5, r7, lr}
 8009b2a:	b0cc      	sub	sp, #304	; 0x130
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4605      	mov	r5, r0
 8009b30:	460c      	mov	r4, r1
 8009b32:	4610      	mov	r0, r2
 8009b34:	4619      	mov	r1, r3
 8009b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009b3e:	462a      	mov	r2, r5
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	801a      	strh	r2, [r3, #0]
 8009b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b52:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009b56:	4602      	mov	r2, r0
 8009b58:	701a      	strb	r2, [r3, #0]
 8009b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b5e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009b62:	460a      	mov	r2, r1
 8009b64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009b66:	f107 0310 	add.w	r3, r7, #16
 8009b6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b72:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b88:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009b8c:	8812      	ldrh	r2, [r2, #0]
 8009b8e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b94:	3302      	adds	r3, #2
 8009b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ba2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009ba6:	8812      	ldrh	r2, [r2, #0]
 8009ba8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bae:	3302      	adds	r3, #2
 8009bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bbc:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bd6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009bda:	7812      	ldrb	r2, [r2, #0]
 8009bdc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009be2:	3301      	adds	r3, #1
 8009be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bec:	1d98      	adds	r0, r3, #6
 8009bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009bfe:	f000 fa9b 	bl	800a138 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c06:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009c10:	4413      	add	r3, r2
 8009c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c1a:	2218      	movs	r2, #24
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fa9a 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c24:	233f      	movs	r3, #63	; 0x3f
 8009c26:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009c2a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009c2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c42:	f107 030f 	add.w	r3, r7, #15
 8009c46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fe0c 	bl	800a874 <hci_send_req>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da01      	bge.n	8009c66 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009c62:	23ff      	movs	r3, #255	; 0xff
 8009c64:	e004      	b.n	8009c70 <aci_gatt_update_char_value+0x148>
  return status;
 8009c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c6e:	781b      	ldrb	r3, [r3, #0]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bdb0      	pop	{r4, r5, r7, pc}

08009c7a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b0cc      	sub	sp, #304	; 0x130
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009c92:	4602      	mov	r2, r0
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c9e:	460a      	mov	r2, r1
 8009ca0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009ca2:	f107 0310 	add.w	r3, r7, #16
 8009ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cc4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009cc8:	7812      	ldrb	r2, [r2, #0]
 8009cca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cde:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ce2:	7812      	ldrb	r2, [r2, #0]
 8009ce4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cea:	3301      	adds	r3, #1
 8009cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf4:	1c98      	adds	r0, r3, #2
 8009cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009cfe:	781a      	ldrb	r2, [r3, #0]
 8009d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d08:	6819      	ldr	r1, [r3, #0]
 8009d0a:	f000 fa15 	bl	800a138 <Osal_MemCpy>
  index_input += Length;
 8009d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d26:	2218      	movs	r2, #24
 8009d28:	2100      	movs	r1, #0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fa14 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d30:	233f      	movs	r3, #63	; 0x3f
 8009d32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009d36:	230c      	movs	r3, #12
 8009d38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d3c:	f107 0310 	add.w	r3, r7, #16
 8009d40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d4c:	f107 030f 	add.w	r3, r7, #15
 8009d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fd87 	bl	800a874 <hci_send_req>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da01      	bge.n	8009d70 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009d6c:	23ff      	movs	r3, #255	; 0xff
 8009d6e:	e004      	b.n	8009d7a <aci_hal_write_config_data+0x100>
  return status;
 8009d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d74:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d78:	781b      	ldrb	r3, [r3, #0]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b0cc      	sub	sp, #304	; 0x130
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d9e:	460a      	mov	r2, r1
 8009da0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009da2:	f107 0310 	add.w	r3, r7, #16
 8009da6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dc4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dde:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dea:	3301      	adds	r3, #1
 8009dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009df4:	2218      	movs	r2, #24
 8009df6:	2100      	movs	r1, #0
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 f9ad 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dfe:	233f      	movs	r3, #63	; 0x3f
 8009e00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009e04:	230f      	movs	r3, #15
 8009e06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e0a:	f107 0310 	add.w	r3, r7, #16
 8009e0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e1a:	f107 030f 	add.w	r3, r7, #15
 8009e1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fd20 	bl	800a874 <hci_send_req>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da01      	bge.n	8009e3e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009e3a:	23ff      	movs	r3, #255	; 0xff
 8009e3c:	e004      	b.n	8009e48 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e46:	781b      	ldrb	r3, [r3, #0]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b0cc      	sub	sp, #304	; 0x130
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	4602      	mov	r2, r0
 8009e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e62:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009e64:	f107 0310 	add.w	r3, r7, #16
 8009e68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e70:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e74:	2200      	movs	r2, #0
 8009e76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e86:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009e8a:	8812      	ldrh	r2, [r2, #0]
 8009e8c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e92:	3302      	adds	r3, #2
 8009e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e9c:	2218      	movs	r2, #24
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 f959 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ea6:	233f      	movs	r3, #63	; 0x3f
 8009ea8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009eac:	2318      	movs	r3, #24
 8009eae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009eb2:	f107 0310 	add.w	r3, r7, #16
 8009eb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ebe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ec2:	f107 030f 	add.w	r3, r7, #15
 8009ec6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fccc 	bl	800a874 <hci_send_req>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da01      	bge.n	8009ee6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009ee2:	23ff      	movs	r3, #255	; 0xff
 8009ee4:	e004      	b.n	8009ef0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009eee:	781b      	ldrb	r3, [r3, #0]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b088      	sub	sp, #32
 8009efe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f04:	f107 0308 	add.w	r3, r7, #8
 8009f08:	2218      	movs	r2, #24
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 f923 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x03;
 8009f12:	2303      	movs	r3, #3
 8009f14:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009f16:	2303      	movs	r3, #3
 8009f18:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009f1a:	1dfb      	adds	r3, r7, #7
 8009f1c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f22:	f107 0308 	add.w	r3, r7, #8
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fca3 	bl	800a874 <hci_send_req>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	da01      	bge.n	8009f38 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009f34:	23ff      	movs	r3, #255	; 0xff
 8009f36:	e000      	b.n	8009f3a <hci_reset+0x40>
  return status;
 8009f38:	79fb      	ldrb	r3, [r7, #7]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b0ce      	sub	sp, #312	; 0x138
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f50:	6019      	str	r1, [r3, #0]
 8009f52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f60:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009f64:	4602      	mov	r2, r0
 8009f66:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8009f68:	f107 0318 	add.w	r3, r7, #24
 8009f6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009f70:	f107 0310 	add.w	r3, r7, #16
 8009f74:	2205      	movs	r2, #5
 8009f76:	2100      	movs	r1, #0
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 f8ed 	bl	800a158 <Osal_MemSet>
  int index_input = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f88:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f8c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009f90:	8812      	ldrh	r2, [r2, #0]
 8009f92:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f98:	3302      	adds	r3, #2
 8009f9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009fa2:	2218      	movs	r2, #24
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f8d6 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x08;
 8009fac:	2308      	movs	r3, #8
 8009fae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009fb2:	2330      	movs	r3, #48	; 0x30
 8009fb4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009fb8:	f107 0318 	add.w	r3, r7, #24
 8009fbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009fc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009fc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009fd0:	2305      	movs	r3, #5
 8009fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009fda:	2100      	movs	r1, #0
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 fc49 	bl	800a874 <hci_send_req>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da01      	bge.n	8009fec <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8009fe8:	23ff      	movs	r3, #255	; 0xff
 8009fea:	e023      	b.n	800a034 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8009fec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ff0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <hci_le_read_phy+0xc4>
    return resp.Status;
 8009ffa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ffe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	e016      	b.n	800a034 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a006:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a00a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a00e:	78da      	ldrb	r2, [r3, #3]
 800a010:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a01c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a020:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a024:	791a      	ldrb	r2, [r3, #4]
 800a026:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a02a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a03e:	b590      	push	{r4, r7, lr}
 800a040:	b0cd      	sub	sp, #308	; 0x134
 800a042:	af00      	add	r7, sp, #0
 800a044:	4604      	mov	r4, r0
 800a046:	4608      	mov	r0, r1
 800a048:	4611      	mov	r1, r2
 800a04a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a052:	4622      	mov	r2, r4
 800a054:	701a      	strb	r2, [r3, #0]
 800a056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a05e:	4602      	mov	r2, r0
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a066:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a06a:	460a      	mov	r2, r1
 800a06c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a06e:	f107 0310 	add.w	r3, r7, #16
 800a072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a07e:	2200      	movs	r2, #0
 800a080:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a08c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a090:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a09c:	3301      	adds	r3, #1
 800a09e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a0a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a0ae:	7812      	ldrb	r2, [r2, #0]
 800a0b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a0b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a0bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0c4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a0c8:	7812      	ldrb	r2, [r2, #0]
 800a0ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a0cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0da:	2218      	movs	r2, #24
 800a0dc:	2100      	movs	r1, #0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 f83a 	bl	800a158 <Osal_MemSet>
  rq.ogf = 0x08;
 800a0e4:	2308      	movs	r3, #8
 800a0e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a0ea:	2331      	movs	r3, #49	; 0x31
 800a0ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a0f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a100:	f107 030f 	add.w	r3, r7, #15
 800a104:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a108:	2301      	movs	r3, #1
 800a10a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a10e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fbad 	bl	800a874 <hci_send_req>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	da01      	bge.n	800a124 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a120:	23ff      	movs	r3, #255	; 0xff
 800a122:	e004      	b.n	800a12e <hci_le_set_default_phy+0xf0>
  return status;
 800a124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a128:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a12c:	781b      	ldrb	r3, [r3, #0]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a134:	46bd      	mov	sp, r7
 800a136:	bd90      	pop	{r4, r7, pc}

0800a138 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f002 f821 	bl	800c190 <memcpy>
 800a14e:	4603      	mov	r3, r0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f002 f81f 	bl	800c1ac <memset>
 800a16e:	4603      	mov	r3, r0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	; 0x28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800a180:	2300      	movs	r3, #0
 800a182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3301      	adds	r3, #1
 800a18a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2bff      	cmp	r3, #255	; 0xff
 800a192:	d14c      	bne.n	800a22e <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	3302      	adds	r3, #2
 800a198:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f640 4301 	movw	r3, #3073	; 0xc01
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d13d      	bne.n	800a226 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	885b      	ldrh	r3, [r3, #2]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4b20      	ldr	r3, [pc, #128]	; (800a23c <PeerToPeer_Event_Handler+0xc4>)
 800a1ba:	889b      	ldrh	r3, [r3, #4]
 800a1bc:	3302      	adds	r3, #2
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d118      	bne.n	800a1f4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	7a1b      	ldrb	r3, [r3, #8]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 fb9f 	bl	800b920 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800a1e2:	e022      	b.n	800a22a <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a1e8:	f107 0308 	add.w	r3, r7, #8
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f001 fb97 	bl	800b920 <P2PS_STM_App_Notification>
        break;
 800a1f2:	e01a      	b.n	800a22a <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	885b      	ldrh	r3, [r3, #2]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <PeerToPeer_Event_Handler+0xc4>)
 800a1fe:	885b      	ldrh	r3, [r3, #2]
 800a200:	3301      	adds	r3, #1
 800a202:	429a      	cmp	r2, r3
 800a204:	d111      	bne.n	800a22a <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a206:	2303      	movs	r3, #3
 800a208:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	88db      	ldrh	r3, [r3, #6]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	b2db      	uxtb	r3, r3
 800a212:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	3308      	adds	r3, #8
 800a218:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800a21a:	f107 0308 	add.w	r3, r7, #8
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 fb7e 	bl	800b920 <P2PS_STM_App_Notification>
        break;
 800a224:	e001      	b.n	800a22a <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800a226:	bf00      	nop
 800a228:	e002      	b.n	800a230 <PeerToPeer_Event_Handler+0xb8>
        break;
 800a22a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a22c:	e000      	b.n	800a230 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 800a22e:	bf00      	nop
  }

  return(return_value);
 800a230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a234:	4618      	mov	r0, r3
 800a236:	3728      	adds	r7, #40	; 0x28
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000918 	.word	0x20000918

0800a240 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a246:	484a      	ldr	r0, [pc, #296]	; (800a370 <P2PS_STM_Init+0x130>)
 800a248:	f000 f94a 	bl	800a4e0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a24c:	238f      	movs	r3, #143	; 0x8f
 800a24e:	703b      	strb	r3, [r7, #0]
 800a250:	23e5      	movs	r3, #229	; 0xe5
 800a252:	707b      	strb	r3, [r7, #1]
 800a254:	23b3      	movs	r3, #179	; 0xb3
 800a256:	70bb      	strb	r3, [r7, #2]
 800a258:	23d5      	movs	r3, #213	; 0xd5
 800a25a:	70fb      	strb	r3, [r7, #3]
 800a25c:	232e      	movs	r3, #46	; 0x2e
 800a25e:	713b      	strb	r3, [r7, #4]
 800a260:	237f      	movs	r3, #127	; 0x7f
 800a262:	717b      	strb	r3, [r7, #5]
 800a264:	234a      	movs	r3, #74	; 0x4a
 800a266:	71bb      	strb	r3, [r7, #6]
 800a268:	2398      	movs	r3, #152	; 0x98
 800a26a:	71fb      	strb	r3, [r7, #7]
 800a26c:	232a      	movs	r3, #42	; 0x2a
 800a26e:	723b      	strb	r3, [r7, #8]
 800a270:	2348      	movs	r3, #72	; 0x48
 800a272:	727b      	strb	r3, [r7, #9]
 800a274:	237a      	movs	r3, #122	; 0x7a
 800a276:	72bb      	strb	r3, [r7, #10]
 800a278:	23cc      	movs	r3, #204	; 0xcc
 800a27a:	72fb      	strb	r3, [r7, #11]
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	733b      	strb	r3, [r7, #12]
 800a280:	23fe      	movs	r3, #254	; 0xfe
 800a282:	737b      	strb	r3, [r7, #13]
 800a284:	2300      	movs	r3, #0
 800a286:	73bb      	strb	r3, [r7, #14]
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a28c:	4639      	mov	r1, r7
 800a28e:	4b39      	ldr	r3, [pc, #228]	; (800a374 <P2PS_STM_Init+0x134>)
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	2308      	movs	r3, #8
 800a294:	2201      	movs	r2, #1
 800a296:	2002      	movs	r0, #2
 800a298:	f7ff fa68 	bl	800976c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800a29c:	2319      	movs	r3, #25
 800a29e:	703b      	strb	r3, [r7, #0]
 800a2a0:	23ed      	movs	r3, #237	; 0xed
 800a2a2:	707b      	strb	r3, [r7, #1]
 800a2a4:	2382      	movs	r3, #130	; 0x82
 800a2a6:	70bb      	strb	r3, [r7, #2]
 800a2a8:	23ae      	movs	r3, #174	; 0xae
 800a2aa:	70fb      	strb	r3, [r7, #3]
 800a2ac:	23ed      	movs	r3, #237	; 0xed
 800a2ae:	713b      	strb	r3, [r7, #4]
 800a2b0:	2321      	movs	r3, #33	; 0x21
 800a2b2:	717b      	strb	r3, [r7, #5]
 800a2b4:	234c      	movs	r3, #76	; 0x4c
 800a2b6:	71bb      	strb	r3, [r7, #6]
 800a2b8:	239d      	movs	r3, #157	; 0x9d
 800a2ba:	71fb      	strb	r3, [r7, #7]
 800a2bc:	2341      	movs	r3, #65	; 0x41
 800a2be:	723b      	strb	r3, [r7, #8]
 800a2c0:	2345      	movs	r3, #69	; 0x45
 800a2c2:	727b      	strb	r3, [r7, #9]
 800a2c4:	2322      	movs	r3, #34	; 0x22
 800a2c6:	72bb      	strb	r3, [r7, #10]
 800a2c8:	238e      	movs	r3, #142	; 0x8e
 800a2ca:	72fb      	strb	r3, [r7, #11]
 800a2cc:	2341      	movs	r3, #65	; 0x41
 800a2ce:	733b      	strb	r3, [r7, #12]
 800a2d0:	23fe      	movs	r3, #254	; 0xfe
 800a2d2:	737b      	strb	r3, [r7, #13]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73bb      	strb	r3, [r7, #14]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <P2PS_STM_Init+0x134>)
 800a2de:	8818      	ldrh	r0, [r3, #0]
 800a2e0:	463a      	mov	r2, r7
 800a2e2:	4b25      	ldr	r3, [pc, #148]	; (800a378 <P2PS_STM_Init+0x138>)
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	230a      	movs	r3, #10
 800a2ec:	9303      	str	r3, [sp, #12]
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	2306      	movs	r3, #6
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	f7ff fb0b 	bl	8009918 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800a302:	2319      	movs	r3, #25
 800a304:	703b      	strb	r3, [r7, #0]
 800a306:	23ed      	movs	r3, #237	; 0xed
 800a308:	707b      	strb	r3, [r7, #1]
 800a30a:	2382      	movs	r3, #130	; 0x82
 800a30c:	70bb      	strb	r3, [r7, #2]
 800a30e:	23ae      	movs	r3, #174	; 0xae
 800a310:	70fb      	strb	r3, [r7, #3]
 800a312:	23ed      	movs	r3, #237	; 0xed
 800a314:	713b      	strb	r3, [r7, #4]
 800a316:	2321      	movs	r3, #33	; 0x21
 800a318:	717b      	strb	r3, [r7, #5]
 800a31a:	234c      	movs	r3, #76	; 0x4c
 800a31c:	71bb      	strb	r3, [r7, #6]
 800a31e:	239d      	movs	r3, #157	; 0x9d
 800a320:	71fb      	strb	r3, [r7, #7]
 800a322:	2341      	movs	r3, #65	; 0x41
 800a324:	723b      	strb	r3, [r7, #8]
 800a326:	2345      	movs	r3, #69	; 0x45
 800a328:	727b      	strb	r3, [r7, #9]
 800a32a:	2322      	movs	r3, #34	; 0x22
 800a32c:	72bb      	strb	r3, [r7, #10]
 800a32e:	238e      	movs	r3, #142	; 0x8e
 800a330:	72fb      	strb	r3, [r7, #11]
 800a332:	2342      	movs	r3, #66	; 0x42
 800a334:	733b      	strb	r3, [r7, #12]
 800a336:	23fe      	movs	r3, #254	; 0xfe
 800a338:	737b      	strb	r3, [r7, #13]
 800a33a:	2300      	movs	r3, #0
 800a33c:	73bb      	strb	r3, [r7, #14]
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a342:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <P2PS_STM_Init+0x134>)
 800a344:	8818      	ldrh	r0, [r3, #0]
 800a346:	463a      	mov	r2, r7
 800a348:	4b0c      	ldr	r3, [pc, #48]	; (800a37c <P2PS_STM_Init+0x13c>)
 800a34a:	9305      	str	r3, [sp, #20]
 800a34c:	2301      	movs	r3, #1
 800a34e:	9304      	str	r3, [sp, #16]
 800a350:	230a      	movs	r3, #10
 800a352:	9303      	str	r3, [sp, #12]
 800a354:	2301      	movs	r3, #1
 800a356:	9302      	str	r3, [sp, #8]
 800a358:	2300      	movs	r3, #0
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	2310      	movs	r3, #16
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	2302      	movs	r3, #2
 800a362:	2102      	movs	r1, #2
 800a364:	f7ff fad8 	bl	8009918 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800a368:	bf00      	nop
}
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	0800a179 	.word	0x0800a179
 800a374:	20000918 	.word	0x20000918
 800a378:	2000091a 	.word	0x2000091a
 800a37c:	2000091c 	.word	0x2000091c

0800a380 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  return;
 800a384:	bf00      	nop
}
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a38e:	b480      	push	{r7}
 800a390:	af00      	add	r7, sp, #0
  return;
 800a392:	bf00      	nop
}
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
  return;
 800a3a0:	bf00      	nop
}
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	af00      	add	r7, sp, #0
  return;
 800a3ae:	bf00      	nop
}
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  return;
 800a3bc:	bf00      	nop
}
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	af00      	add	r7, sp, #0
  return;
 800a3ca:	bf00      	nop
}
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  return;
 800a3d8:	bf00      	nop
}
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	af00      	add	r7, sp, #0
  return;
 800a3e6:	bf00      	nop
}
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0
  return;
 800a3f4:	bf00      	nop
}
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a3fe:	b480      	push	{r7}
 800a400:	af00      	add	r7, sp, #0
  return;
 800a402:	bf00      	nop
}
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
  return;
 800a410:	bf00      	nop
}
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a41a:	b480      	push	{r7}
 800a41c:	af00      	add	r7, sp, #0
  return;
 800a41e:	bf00      	nop
}
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
  return;
 800a42c:	bf00      	nop
}
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a436:	b480      	push	{r7}
 800a438:	af00      	add	r7, sp, #0
  return;
 800a43a:	bf00      	nop
}
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a444:	b480      	push	{r7}
 800a446:	af00      	add	r7, sp, #0
  return;
 800a448:	bf00      	nop
}
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a452:	b480      	push	{r7}
 800a454:	af00      	add	r7, sp, #0
  return;
 800a456:	bf00      	nop
}
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800a460:	b480      	push	{r7}
 800a462:	af00      	add	r7, sp, #0
  return;
 800a464:	bf00      	nop
}
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
	...

0800a470 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <SVCCTL_Init+0x18>)
 800a476:	2200      	movs	r2, #0
 800a478:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a47a:	4b04      	ldr	r3, [pc, #16]	; (800a48c <SVCCTL_Init+0x1c>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a480:	f000 f806 	bl	800a490 <SVCCTL_SvcInit>

  return;
 800a484:	bf00      	nop
}
 800a486:	bd80      	pop	{r7, pc}
 800a488:	20000920 	.word	0x20000920
 800a48c:	20000940 	.word	0x20000940

0800a490 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  BAS_Init();
 800a494:	f7ff ff74 	bl	800a380 <BAS_Init>

  BLS_Init();
 800a498:	f7ff ff79 	bl	800a38e <BLS_Init>

  CRS_STM_Init();
 800a49c:	f7ff ff7e 	bl	800a39c <CRS_STM_Init>

  DIS_Init();
 800a4a0:	f7ff ff83 	bl	800a3aa <DIS_Init>

  EDS_STM_Init();
 800a4a4:	f7ff ff88 	bl	800a3b8 <EDS_STM_Init>

  HIDS_Init();
 800a4a8:	f7ff ff8d 	bl	800a3c6 <HIDS_Init>

  HRS_Init();
 800a4ac:	f7ff ff92 	bl	800a3d4 <HRS_Init>

  HTS_Init();
 800a4b0:	f7ff ff97 	bl	800a3e2 <HTS_Init>

  IAS_Init();
 800a4b4:	f7ff ff9c 	bl	800a3f0 <IAS_Init>

  LLS_Init();
 800a4b8:	f7ff ffa1 	bl	800a3fe <LLS_Init>

  TPS_Init();
 800a4bc:	f7ff ffa6 	bl	800a40c <TPS_Init>

  MOTENV_STM_Init();
 800a4c0:	f7ff ffab 	bl	800a41a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a4c4:	f7ff febc 	bl	800a240 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a4c8:	f7ff ffae 	bl	800a428 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a4cc:	f7ff ffb3 	bl	800a436 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a4d0:	f7ff ffbf 	bl	800a452 <BVOPUS_STM_Init>

  MESH_Init();
 800a4d4:	f7ff ffb6 	bl	800a444 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a4d8:	f7ff ffc2 	bl	800a460 <SVCCTL_InitCustomSvc>
  
  return;
 800a4dc:	bf00      	nop
}
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a4e8:	4b09      	ldr	r3, [pc, #36]	; (800a510 <SVCCTL_RegisterSvcHandler+0x30>)
 800a4ea:	7f1b      	ldrb	r3, [r3, #28]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4a08      	ldr	r2, [pc, #32]	; (800a510 <SVCCTL_RegisterSvcHandler+0x30>)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a4f6:	4b06      	ldr	r3, [pc, #24]	; (800a510 <SVCCTL_RegisterSvcHandler+0x30>)
 800a4f8:	7f1b      	ldrb	r3, [r3, #28]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	4b04      	ldr	r3, [pc, #16]	; (800a510 <SVCCTL_RegisterSvcHandler+0x30>)
 800a500:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a502:	bf00      	nop
}
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	20000920 	.word	0x20000920

0800a514 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3301      	adds	r3, #1
 800a520:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2bff      	cmp	r3, #255	; 0xff
 800a52c:	d125      	bne.n	800a57a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3302      	adds	r3, #2
 800a532:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a53e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a542:	d118      	bne.n	800a576 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a544:	2300      	movs	r3, #0
 800a546:	757b      	strb	r3, [r7, #21]
 800a548:	e00d      	b.n	800a566 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a54a:	7d7b      	ldrb	r3, [r7, #21]
 800a54c:	4a1a      	ldr	r2, [pc, #104]	; (800a5b8 <SVCCTL_UserEvtRx+0xa4>)
 800a54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d108      	bne.n	800a572 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a560:	7d7b      	ldrb	r3, [r7, #21]
 800a562:	3301      	adds	r3, #1
 800a564:	757b      	strb	r3, [r7, #21]
 800a566:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <SVCCTL_UserEvtRx+0xa4>)
 800a568:	7f1b      	ldrb	r3, [r3, #28]
 800a56a:	7d7a      	ldrb	r2, [r7, #21]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d3ec      	bcc.n	800a54a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a570:	e002      	b.n	800a578 <SVCCTL_UserEvtRx+0x64>
              break;
 800a572:	bf00      	nop
          break;
 800a574:	e000      	b.n	800a578 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a576:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a578:	e000      	b.n	800a57c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a57a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d00f      	beq.n	800a5a2 <SVCCTL_UserEvtRx+0x8e>
 800a582:	2b02      	cmp	r3, #2
 800a584:	dc10      	bgt.n	800a5a8 <SVCCTL_UserEvtRx+0x94>
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <SVCCTL_UserEvtRx+0x7c>
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d006      	beq.n	800a59c <SVCCTL_UserEvtRx+0x88>
 800a58e:	e00b      	b.n	800a5a8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 ff03 	bl	800b39c <SVCCTL_App_Notification>
 800a596:	4603      	mov	r3, r0
 800a598:	75bb      	strb	r3, [r7, #22]
      break;
 800a59a:	e008      	b.n	800a5ae <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a59c:	2301      	movs	r3, #1
 800a59e:	75bb      	strb	r3, [r7, #22]
      break;
 800a5a0:	e005      	b.n	800a5ae <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75bb      	strb	r3, [r7, #22]
      break;
 800a5a6:	e002      	b.n	800a5ae <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	75bb      	strb	r3, [r7, #22]
      break;
 800a5ac:	bf00      	nop
  }

  return (return_status);
 800a5ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20000920 	.word	0x20000920

0800a5bc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	212e      	movs	r1, #46	; 0x2e
 800a5d4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a5d8:	f000 fae2 	bl	800aba0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	330b      	adds	r3, #11
 800a5e0:	78db      	ldrb	r3, [r3, #3]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3720      	adds	r7, #32
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b088      	sub	sp, #32
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	210f      	movs	r1, #15
 800a602:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a606:	f000 facb 	bl	800aba0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	330b      	adds	r3, #11
 800a60e:	78db      	ldrb	r3, [r3, #3]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a620:	f107 030c 	add.w	r3, r7, #12
 800a624:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	2110      	movs	r1, #16
 800a62c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a630:	f000 fab6 	bl	800aba0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	330b      	adds	r3, #11
 800a638:	78db      	ldrb	r3, [r3, #3]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3720      	adds	r7, #32
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a644:	b480      	push	{r7}
 800a646:	b08b      	sub	sp, #44	; 0x2c
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a660:	2300      	movs	r3, #0
 800a662:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a66c:	4b4a      	ldr	r3, [pc, #296]	; (800a798 <SHCI_GetWirelessFwInfo+0x154>)
 800a66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a670:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a674:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a67e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a44      	ldr	r2, [pc, #272]	; (800a79c <SHCI_GetWirelessFwInfo+0x158>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d10f      	bne.n	800a6b0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e01a      	b.n	800a6e6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a6b8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a6bc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	0e1b      	lsrs	r3, r3, #24
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	0c1b      	lsrs	r3, r3, #16
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	0a1b      	lsrs	r3, r3, #8
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	091b      	lsrs	r3, r3, #4
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f003 030f 	and.w	r3, r3, #15
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	0e1b      	lsrs	r3, r3, #24
 800a726:	b2da      	uxtb	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	0c1b      	lsrs	r3, r3, #16
 800a730:	b2da      	uxtb	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	0a1b      	lsrs	r3, r3, #8
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	0e1b      	lsrs	r3, r3, #24
 800a754:	b2da      	uxtb	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	0c1b      	lsrs	r3, r3, #16
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	0e1b      	lsrs	r3, r3, #24
 800a772:	b2da      	uxtb	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	b2da      	uxtb	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	372c      	adds	r7, #44	; 0x2c
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	58004000 	.word	0x58004000
 800a79c:	a94656b9 	.word	0xa94656b9

0800a7a0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <hci_init+0x30>)
 800a7b0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a7b2:	4a08      	ldr	r2, [pc, #32]	; (800a7d4 <hci_init+0x34>)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a7b8:	4806      	ldr	r0, [pc, #24]	; (800a7d4 <hci_init+0x34>)
 800a7ba:	f000 f973 	bl	800aaa4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f8d4 	bl	800a970 <TlInit>

  return;
 800a7c8:	bf00      	nop
}
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20001098 	.word	0x20001098
 800a7d4:	20001070 	.word	0x20001070

0800a7d8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a7de:	4822      	ldr	r0, [pc, #136]	; (800a868 <hci_user_evt_proc+0x90>)
 800a7e0:	f000 fc92 	bl	800b108 <LST_is_empty>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d12b      	bne.n	800a842 <hci_user_evt_proc+0x6a>
 800a7ea:	4b20      	ldr	r3, [pc, #128]	; (800a86c <hci_user_evt_proc+0x94>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d027      	beq.n	800a842 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a7f2:	f107 030c 	add.w	r3, r7, #12
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	481b      	ldr	r0, [pc, #108]	; (800a868 <hci_user_evt_proc+0x90>)
 800a7fa:	f000 fd14 	bl	800b226 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <hci_user_evt_proc+0x98>)
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00c      	beq.n	800a820 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a80a:	2301      	movs	r3, #1
 800a80c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a80e:	4b18      	ldr	r3, [pc, #96]	; (800a870 <hci_user_evt_proc+0x98>)
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	1d3a      	adds	r2, r7, #4
 800a814:	4610      	mov	r0, r2
 800a816:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a818:	793a      	ldrb	r2, [r7, #4]
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <hci_user_evt_proc+0x94>)
 800a81c:	701a      	strb	r2, [r3, #0]
 800a81e:	e002      	b.n	800a826 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a820:	4b12      	ldr	r3, [pc, #72]	; (800a86c <hci_user_evt_proc+0x94>)
 800a822:	2201      	movs	r2, #1
 800a824:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a826:	4b11      	ldr	r3, [pc, #68]	; (800a86c <hci_user_evt_proc+0x94>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d004      	beq.n	800a838 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fb91 	bl	800af58 <TL_MM_EvtDone>
 800a836:	e004      	b.n	800a842 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4619      	mov	r1, r3
 800a83c:	480a      	ldr	r0, [pc, #40]	; (800a868 <hci_user_evt_proc+0x90>)
 800a83e:	f000 fc85 	bl	800b14c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a842:	4809      	ldr	r0, [pc, #36]	; (800a868 <hci_user_evt_proc+0x90>)
 800a844:	f000 fc60 	bl	800b108 <LST_is_empty>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <hci_user_evt_proc+0x86>
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <hci_user_evt_proc+0x94>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a856:	4804      	ldr	r0, [pc, #16]	; (800a868 <hci_user_evt_proc+0x90>)
 800a858:	f001 f809 	bl	800b86e <hci_notify_asynch_evt>
  }


  return;
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
}
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20000948 	.word	0x20000948
 800a86c:	20000954 	.word	0x20000954
 800a870:	20001070 	.word	0x20001070

0800a874 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a880:	2000      	movs	r0, #0
 800a882:	f000 f8cb 	bl	800aa1c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a886:	2300      	movs	r3, #0
 800a888:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	885b      	ldrh	r3, [r3, #2]
 800a88e:	b21b      	sxth	r3, r3
 800a890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a894:	b21a      	sxth	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	029b      	lsls	r3, r3, #10
 800a89c:	b21b      	sxth	r3, r3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	b21b      	sxth	r3, r3
 800a8a2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	b2d9      	uxtb	r1, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	8bbb      	ldrh	r3, [r7, #28]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 f88d 	bl	800a9d0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a8b6:	e04e      	b.n	800a956 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a8b8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a8bc:	f000 ffee 	bl	800b89c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a8c0:	e043      	b.n	800a94a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4828      	ldr	r0, [pc, #160]	; (800a96c <hci_send_req+0xf8>)
 800a8ca:	f000 fcac 	bl	800b226 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	7a5b      	ldrb	r3, [r3, #9]
 800a8d2:	2b0f      	cmp	r3, #15
 800a8d4:	d114      	bne.n	800a900 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	330b      	adds	r3, #11
 800a8da:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	885b      	ldrh	r3, [r3, #2]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	8bba      	ldrh	r2, [r7, #28]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d104      	bne.n	800a8f2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	7812      	ldrb	r2, [r2, #0]
 800a8f0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d027      	beq.n	800a94a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	77fb      	strb	r3, [r7, #31]
 800a8fe:	e024      	b.n	800a94a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	330b      	adds	r3, #11
 800a904:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	8bba      	ldrh	r2, [r7, #28]
 800a910:	429a      	cmp	r2, r3
 800a912:	d114      	bne.n	800a93e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	7a9b      	ldrb	r3, [r3, #10]
 800a918:	3b03      	subs	r3, #3
 800a91a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	429a      	cmp	r2, r3
 800a924:	bfa8      	it	ge
 800a926:	461a      	movge	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6918      	ldr	r0, [r3, #16]
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	1cd9      	adds	r1, r3, #3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	461a      	mov	r2, r3
 800a93a:	f001 fc29 	bl	800c190 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a946:	2301      	movs	r3, #1
 800a948:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a94a:	4808      	ldr	r0, [pc, #32]	; (800a96c <hci_send_req+0xf8>)
 800a94c:	f000 fbdc 	bl	800b108 <LST_is_empty>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0b5      	beq.n	800a8c2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a956:	7ffb      	ldrb	r3, [r7, #31]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d0ad      	beq.n	800a8b8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a95c:	2001      	movs	r0, #1
 800a95e:	f000 f85d 	bl	800aa1c <NotifyCmdStatus>

  return 0;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3720      	adds	r7, #32
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	20001090 	.word	0x20001090

0800a970 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a978:	480f      	ldr	r0, [pc, #60]	; (800a9b8 <TlInit+0x48>)
 800a97a:	f000 fbb5 	bl	800b0e8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a97e:	4a0f      	ldr	r2, [pc, #60]	; (800a9bc <TlInit+0x4c>)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a984:	480e      	ldr	r0, [pc, #56]	; (800a9c0 <TlInit+0x50>)
 800a986:	f000 fbaf 	bl	800b0e8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a98a:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <TlInit+0x54>)
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a990:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <TlInit+0x58>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00a      	beq.n	800a9ae <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <TlInit+0x5c>)
 800a99e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a9a0:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <TlInit+0x58>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f107 0208 	add.w	r2, r7, #8
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	4798      	blx	r3
  }

  return;
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
}
 800a9b0:	3718      	adds	r7, #24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20001090 	.word	0x20001090
 800a9bc:	20000950 	.word	0x20000950
 800a9c0:	20000948 	.word	0x20000948
 800a9c4:	20000954 	.word	0x20000954
 800a9c8:	20001070 	.word	0x20001070
 800a9cc:	0800aa5d 	.word	0x0800aa5d

0800a9d0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	603a      	str	r2, [r7, #0]
 800a9da:	80fb      	strh	r3, [r7, #6]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a9e0:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <SendCmd+0x44>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	88fa      	ldrh	r2, [r7, #6]
 800a9e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a9ea:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <SendCmd+0x44>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	797a      	ldrb	r2, [r7, #5]
 800a9f0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a9f2:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <SendCmd+0x44>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	330c      	adds	r3, #12
 800a9f8:	797a      	ldrb	r2, [r7, #5]
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fbc7 	bl	800c190 <memcpy>

  hciContext.io.Send(0,0);
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <SendCmd+0x48>)
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2100      	movs	r1, #0
 800aa08:	2000      	movs	r0, #0
 800aa0a:	4798      	blx	r3

  return;
 800aa0c:	bf00      	nop
}
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20000950 	.word	0x20000950
 800aa18:	20001070 	.word	0x20001070

0800aa1c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d108      	bne.n	800aa3e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <NotifyCmdStatus+0x3c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00d      	beq.n	800aa50 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800aa34:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <NotifyCmdStatus+0x3c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2000      	movs	r0, #0
 800aa3a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800aa3c:	e008      	b.n	800aa50 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <NotifyCmdStatus+0x3c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d004      	beq.n	800aa50 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800aa46:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <NotifyCmdStatus+0x3c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	4798      	blx	r3
  return;
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
}
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20001098 	.word	0x20001098

0800aa5c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7a5b      	ldrb	r3, [r3, #9]
 800aa68:	2b0f      	cmp	r3, #15
 800aa6a:	d003      	beq.n	800aa74 <TlEvtReceived+0x18>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	7a5b      	ldrb	r3, [r3, #9]
 800aa70:	2b0e      	cmp	r3, #14
 800aa72:	d107      	bne.n	800aa84 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	4809      	ldr	r0, [pc, #36]	; (800aa9c <TlEvtReceived+0x40>)
 800aa78:	f000 fb8e 	bl	800b198 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	f000 ff02 	bl	800b886 <hci_cmd_resp_release>
 800aa82:	e006      	b.n	800aa92 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	4806      	ldr	r0, [pc, #24]	; (800aaa0 <TlEvtReceived+0x44>)
 800aa88:	f000 fb86 	bl	800b198 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800aa8c:	4804      	ldr	r0, [pc, #16]	; (800aaa0 <TlEvtReceived+0x44>)
 800aa8e:	f000 feee 	bl	800b86e <hci_notify_asynch_evt>
  }

  return;
 800aa92:	bf00      	nop
}
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20001090 	.word	0x20001090
 800aaa0:	20000948 	.word	0x20000948

0800aaa4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a05      	ldr	r2, [pc, #20]	; (800aac4 <hci_register_io_bus+0x20>)
 800aab0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <hci_register_io_bus+0x24>)
 800aab6:	611a      	str	r2, [r3, #16]

  return;
 800aab8:	bf00      	nop
}
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	0800adb5 	.word	0x0800adb5
 800aac8:	0800ae1d 	.word	0x0800ae1d

0800aacc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4a08      	ldr	r2, [pc, #32]	; (800aafc <shci_init+0x30>)
 800aadc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800aade:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <shci_init+0x34>)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800aae4:	4806      	ldr	r0, [pc, #24]	; (800ab00 <shci_init+0x34>)
 800aae6:	f000 f911 	bl	800ad0c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f894 	bl	800ac1c <TlInit>

  return;
 800aaf4:	bf00      	nop
}
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	200010bc 	.word	0x200010bc
 800ab00:	2000109c 	.word	0x2000109c

0800ab04 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ab0a:	4822      	ldr	r0, [pc, #136]	; (800ab94 <shci_user_evt_proc+0x90>)
 800ab0c:	f000 fafc 	bl	800b108 <LST_is_empty>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d12b      	bne.n	800ab6e <shci_user_evt_proc+0x6a>
 800ab16:	4b20      	ldr	r3, [pc, #128]	; (800ab98 <shci_user_evt_proc+0x94>)
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d027      	beq.n	800ab6e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ab1e:	f107 030c 	add.w	r3, r7, #12
 800ab22:	4619      	mov	r1, r3
 800ab24:	481b      	ldr	r0, [pc, #108]	; (800ab94 <shci_user_evt_proc+0x90>)
 800ab26:	f000 fb7e 	bl	800b226 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800ab2a:	4b1c      	ldr	r3, [pc, #112]	; (800ab9c <shci_user_evt_proc+0x98>)
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00c      	beq.n	800ab4c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800ab36:	2301      	movs	r3, #1
 800ab38:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ab3a:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <shci_user_evt_proc+0x98>)
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	1d3a      	adds	r2, r7, #4
 800ab40:	4610      	mov	r0, r2
 800ab42:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800ab44:	793a      	ldrb	r2, [r7, #4]
 800ab46:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <shci_user_evt_proc+0x94>)
 800ab48:	701a      	strb	r2, [r3, #0]
 800ab4a:	e002      	b.n	800ab52 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ab4c:	4b12      	ldr	r3, [pc, #72]	; (800ab98 <shci_user_evt_proc+0x94>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800ab52:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <shci_user_evt_proc+0x94>)
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d004      	beq.n	800ab64 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f9fb 	bl	800af58 <TL_MM_EvtDone>
 800ab62:	e004      	b.n	800ab6e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4619      	mov	r1, r3
 800ab68:	480a      	ldr	r0, [pc, #40]	; (800ab94 <shci_user_evt_proc+0x90>)
 800ab6a:	f000 faef 	bl	800b14c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ab6e:	4809      	ldr	r0, [pc, #36]	; (800ab94 <shci_user_evt_proc+0x90>)
 800ab70:	f000 faca 	bl	800b108 <LST_is_empty>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d107      	bne.n	800ab8a <shci_user_evt_proc+0x86>
 800ab7a:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <shci_user_evt_proc+0x94>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800ab82:	4804      	ldr	r0, [pc, #16]	; (800ab94 <shci_user_evt_proc+0x90>)
 800ab84:	f7f6 fd11 	bl	80015aa <shci_notify_asynch_evt>
  }


  return;
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
}
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20000958 	.word	0x20000958
 800ab98:	20000968 	.word	0x20000968
 800ab9c:	2000109c 	.word	0x2000109c

0800aba0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60ba      	str	r2, [r7, #8]
 800aba8:	607b      	str	r3, [r7, #4]
 800abaa:	4603      	mov	r3, r0
 800abac:	81fb      	strh	r3, [r7, #14]
 800abae:	460b      	mov	r3, r1
 800abb0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800abb2:	2000      	movs	r0, #0
 800abb4:	f000 f864 	bl	800ac80 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800abb8:	4b16      	ldr	r3, [pc, #88]	; (800ac14 <shci_send+0x74>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	89fa      	ldrh	r2, [r7, #14]
 800abbe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <shci_send+0x74>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	7b7a      	ldrb	r2, [r7, #13]
 800abc8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <shci_send+0x74>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	330c      	adds	r3, #12
 800abd0:	7b7a      	ldrb	r2, [r7, #13]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fadb 	bl	800c190 <memcpy>

  shciContext.io.Send(0,0);
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <shci_send+0x78>)
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2100      	movs	r1, #0
 800abe0:	2000      	movs	r0, #0
 800abe2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800abe4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800abe8:	f7f6 fcf6 	bl	80015d8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f103 0008 	add.w	r0, r3, #8
 800abf2:	4b08      	ldr	r3, [pc, #32]	; (800ac14 <shci_send+0x74>)
 800abf4:	6819      	ldr	r1, [r3, #0]
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <shci_send+0x74>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	789b      	ldrb	r3, [r3, #2]
 800abfc:	3303      	adds	r3, #3
 800abfe:	461a      	mov	r2, r3
 800ac00:	f001 fac6 	bl	800c190 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ac04:	2001      	movs	r0, #1
 800ac06:	f000 f83b 	bl	800ac80 <Cmd_SetStatus>

  return;
 800ac0a:	bf00      	nop
}
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000964 	.word	0x20000964
 800ac18:	2000109c 	.word	0x2000109c

0800ac1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ac24:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <TlInit+0x4c>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ac2a:	4810      	ldr	r0, [pc, #64]	; (800ac6c <TlInit+0x50>)
 800ac2c:	f000 fa5c 	bl	800b0e8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ac30:	2001      	movs	r0, #1
 800ac32:	f000 f825 	bl	800ac80 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ac36:	4b0e      	ldr	r3, [pc, #56]	; (800ac70 <TlInit+0x54>)
 800ac38:	2201      	movs	r2, #1
 800ac3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ac3c:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <TlInit+0x58>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00c      	beq.n	800ac5e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ac48:	4b0b      	ldr	r3, [pc, #44]	; (800ac78 <TlInit+0x5c>)
 800ac4a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ac4c:	4b0b      	ldr	r3, [pc, #44]	; (800ac7c <TlInit+0x60>)
 800ac4e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ac50:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <TlInit+0x58>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f107 020c 	add.w	r2, r7, #12
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4798      	blx	r3
  }

  return;
 800ac5c:	bf00      	nop
 800ac5e:	bf00      	nop
}
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20000964 	.word	0x20000964
 800ac6c:	20000958 	.word	0x20000958
 800ac70:	20000968 	.word	0x20000968
 800ac74:	2000109c 	.word	0x2000109c
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800ace9 	.word	0x0800ace9

0800ac80 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10b      	bne.n	800aca8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ac90:	4b0d      	ldr	r3, [pc, #52]	; (800acc8 <Cmd_SetStatus+0x48>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d003      	beq.n	800aca0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ac98:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <Cmd_SetStatus+0x48>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <Cmd_SetStatus+0x4c>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800aca6:	e00b      	b.n	800acc0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800aca8:	4b08      	ldr	r3, [pc, #32]	; (800accc <Cmd_SetStatus+0x4c>)
 800acaa:	2201      	movs	r2, #1
 800acac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <Cmd_SetStatus+0x48>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800acb6:	4b04      	ldr	r3, [pc, #16]	; (800acc8 <Cmd_SetStatus+0x48>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2001      	movs	r0, #1
 800acbc:	4798      	blx	r3
  return;
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
}
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	200010bc 	.word	0x200010bc
 800accc:	20000960 	.word	0x20000960

0800acd0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800acd8:	2000      	movs	r0, #0
 800acda:	f7f6 fc72 	bl	80015c2 <shci_cmd_resp_release>

  return;
 800acde:	bf00      	nop
}
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	4805      	ldr	r0, [pc, #20]	; (800ad08 <TlUserEvtReceived+0x20>)
 800acf4:	f000 fa50 	bl	800b198 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800acf8:	4803      	ldr	r0, [pc, #12]	; (800ad08 <TlUserEvtReceived+0x20>)
 800acfa:	f7f6 fc56 	bl	80015aa <shci_notify_asynch_evt>

  return;
 800acfe:	bf00      	nop
}
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000958 	.word	0x20000958

0800ad0c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a05      	ldr	r2, [pc, #20]	; (800ad2c <shci_register_io_bus+0x20>)
 800ad18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a04      	ldr	r2, [pc, #16]	; (800ad30 <shci_register_io_bus+0x24>)
 800ad1e:	611a      	str	r2, [r3, #16]

  return;
 800ad20:	bf00      	nop
}
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	0800ae55 	.word	0x0800ae55
 800ad30:	0800aea9 	.word	0x0800aea9

0800ad34 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ad38:	f000 fefe 	bl	800bb38 <HW_IPCC_Enable>

  return;
 800ad3c:	bf00      	nop
}
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <TL_Init>:


void TL_Init( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ad44:	4b10      	ldr	r3, [pc, #64]	; (800ad88 <TL_Init+0x48>)
 800ad46:	4a11      	ldr	r2, [pc, #68]	; (800ad8c <TL_Init+0x4c>)
 800ad48:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ad4a:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <TL_Init+0x48>)
 800ad4c:	4a10      	ldr	r2, [pc, #64]	; (800ad90 <TL_Init+0x50>)
 800ad4e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ad50:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <TL_Init+0x48>)
 800ad52:	4a10      	ldr	r2, [pc, #64]	; (800ad94 <TL_Init+0x54>)
 800ad54:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ad56:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <TL_Init+0x48>)
 800ad58:	4a0f      	ldr	r2, [pc, #60]	; (800ad98 <TL_Init+0x58>)
 800ad5a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <TL_Init+0x48>)
 800ad5e:	4a0f      	ldr	r2, [pc, #60]	; (800ad9c <TL_Init+0x5c>)
 800ad60:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <TL_Init+0x48>)
 800ad64:	4a0e      	ldr	r2, [pc, #56]	; (800ada0 <TL_Init+0x60>)
 800ad66:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ad68:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <TL_Init+0x48>)
 800ad6a:	4a0e      	ldr	r2, [pc, #56]	; (800ada4 <TL_Init+0x64>)
 800ad6c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <TL_Init+0x48>)
 800ad70:	4a0d      	ldr	r2, [pc, #52]	; (800ada8 <TL_Init+0x68>)
 800ad72:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ad74:	4b04      	ldr	r3, [pc, #16]	; (800ad88 <TL_Init+0x48>)
 800ad76:	4a0d      	ldr	r2, [pc, #52]	; (800adac <TL_Init+0x6c>)
 800ad78:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ad7a:	4b03      	ldr	r3, [pc, #12]	; (800ad88 <TL_Init+0x48>)
 800ad7c:	4a0c      	ldr	r2, [pc, #48]	; (800adb0 <TL_Init+0x70>)
 800ad7e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ad80:	f000 feee 	bl	800bb60 <HW_IPCC_Init>

  return;
 800ad84:	bf00      	nop
}
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20030000 	.word	0x20030000
 800ad8c:	20030028 	.word	0x20030028
 800ad90:	20030048 	.word	0x20030048
 800ad94:	20030058 	.word	0x20030058
 800ad98:	20030068 	.word	0x20030068
 800ad9c:	20030070 	.word	0x20030070
 800ada0:	20030078 	.word	0x20030078
 800ada4:	20030080 	.word	0x20030080
 800ada8:	2003009c 	.word	0x2003009c
 800adac:	200300a0 	.word	0x200300a0
 800adb0:	200300ac 	.word	0x200300ac

0800adb4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800adc0:	4811      	ldr	r0, [pc, #68]	; (800ae08 <TL_BLE_Init+0x54>)
 800adc2:	f000 f991 	bl	800b0e8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800adc6:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <TL_BLE_Init+0x58>)
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	4a0c      	ldr	r2, [pc, #48]	; (800ae10 <TL_BLE_Init+0x5c>)
 800ade0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <TL_BLE_Init+0x54>)
 800ade6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ade8:	f000 fed0 	bl	800bb8c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a08      	ldr	r2, [pc, #32]	; (800ae14 <TL_BLE_Init+0x60>)
 800adf2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	4a07      	ldr	r2, [pc, #28]	; (800ae18 <TL_BLE_Init+0x64>)
 800adfa:	6013      	str	r3, [r2, #0]

  return 0;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	200300c8 	.word	0x200300c8
 800ae0c:	20030000 	.word	0x20030000
 800ae10:	20000908 	.word	0x20000908
 800ae14:	200010c8 	.word	0x200010c8
 800ae18:	200010cc 	.word	0x200010cc

0800ae1c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ae28:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <TL_BLE_SendCmd+0x34>)
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ae32:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <TL_BLE_SendCmd+0x34>)
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	f000 f8d6 	bl	800afec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ae40:	f000 feae 	bl	800bba0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20030000 	.word	0x20030000

0800ae54 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ae60:	480d      	ldr	r0, [pc, #52]	; (800ae98 <TL_SYS_Init+0x44>)
 800ae62:	f000 f941 	bl	800b0e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ae66:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <TL_SYS_Init+0x48>)
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	689a      	ldr	r2, [r3, #8]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <TL_SYS_Init+0x44>)
 800ae78:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ae7a:	f000 fe9b 	bl	800bbb4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a07      	ldr	r2, [pc, #28]	; (800aea0 <TL_SYS_Init+0x4c>)
 800ae84:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	4a06      	ldr	r2, [pc, #24]	; (800aea4 <TL_SYS_Init+0x50>)
 800ae8c:	6013      	str	r3, [r2, #0]

  return 0;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	200300d0 	.word	0x200300d0
 800ae9c:	20030000 	.word	0x20030000
 800aea0:	200010d0 	.word	0x200010d0
 800aea4:	200010d4 	.word	0x200010d4

0800aea8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aeb4:	4b09      	ldr	r3, [pc, #36]	; (800aedc <TL_SYS_SendCmd+0x34>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2210      	movs	r2, #16
 800aebc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aebe:	4b07      	ldr	r3, [pc, #28]	; (800aedc <TL_SYS_SendCmd+0x34>)
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4619      	mov	r1, r3
 800aec6:	2004      	movs	r0, #4
 800aec8:	f000 f890 	bl	800afec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800aecc:	f000 fe7c 	bl	800bbc8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20030000 	.word	0x20030000

0800aee0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aee8:	4817      	ldr	r0, [pc, #92]	; (800af48 <TL_MM_Init+0x68>)
 800aeea:	f000 f8fd 	bl	800b0e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aeee:	4817      	ldr	r0, [pc, #92]	; (800af4c <TL_MM_Init+0x6c>)
 800aef0:	f000 f8fa 	bl	800b0e8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aef4:	4b16      	ldr	r3, [pc, #88]	; (800af50 <TL_MM_Init+0x70>)
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	4a16      	ldr	r2, [pc, #88]	; (800af54 <TL_MM_Init+0x74>)
 800aefa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aefc:	4b15      	ldr	r3, [pc, #84]	; (800af54 <TL_MM_Init+0x74>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6892      	ldr	r2, [r2, #8]
 800af04:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800af06:	4b13      	ldr	r3, [pc, #76]	; (800af54 <TL_MM_Init+0x74>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	68d2      	ldr	r2, [r2, #12]
 800af0e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800af10:	4b10      	ldr	r3, [pc, #64]	; (800af54 <TL_MM_Init+0x74>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a0c      	ldr	r2, [pc, #48]	; (800af48 <TL_MM_Init+0x68>)
 800af16:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800af18:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <TL_MM_Init+0x74>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6812      	ldr	r2, [r2, #0]
 800af20:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800af22:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <TL_MM_Init+0x74>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	6852      	ldr	r2, [r2, #4]
 800af2a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <TL_MM_Init+0x74>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	6912      	ldr	r2, [r2, #16]
 800af34:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800af36:	4b07      	ldr	r3, [pc, #28]	; (800af54 <TL_MM_Init+0x74>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6952      	ldr	r2, [r2, #20]
 800af3e:	619a      	str	r2, [r3, #24]

  return;
 800af40:	bf00      	nop
}
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	200300b8 	.word	0x200300b8
 800af4c:	200010c0 	.word	0x200010c0
 800af50:	20030000 	.word	0x20030000
 800af54:	200010d8 	.word	0x200010d8

0800af58 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	4807      	ldr	r0, [pc, #28]	; (800af80 <TL_MM_EvtDone+0x28>)
 800af64:	f000 f918 	bl	800b198 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	2000      	movs	r0, #0
 800af6c:	f000 f83e 	bl	800afec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800af70:	4804      	ldr	r0, [pc, #16]	; (800af84 <TL_MM_EvtDone+0x2c>)
 800af72:	f000 fe37 	bl	800bbe4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800af76:	bf00      	nop
}
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200010c0 	.word	0x200010c0
 800af84:	0800af89 	.word	0x0800af89

0800af88 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af8e:	e00c      	b.n	800afaa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800af90:	1d3b      	adds	r3, r7, #4
 800af92:	4619      	mov	r1, r3
 800af94:	480a      	ldr	r0, [pc, #40]	; (800afc0 <SendFreeBuf+0x38>)
 800af96:	f000 f946 	bl	800b226 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800af9a:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <SendFreeBuf+0x3c>)
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	4611      	mov	r1, r2
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 f8f7 	bl	800b198 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800afaa:	4805      	ldr	r0, [pc, #20]	; (800afc0 <SendFreeBuf+0x38>)
 800afac:	f000 f8ac 	bl	800b108 <LST_is_empty>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0ec      	beq.n	800af90 <SendFreeBuf+0x8>
  }

  return;
 800afb6:	bf00      	nop
}
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	200010c0 	.word	0x200010c0
 800afc4:	20030000 	.word	0x20030000

0800afc8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800afcc:	4805      	ldr	r0, [pc, #20]	; (800afe4 <TL_TRACES_Init+0x1c>)
 800afce:	f000 f88b 	bl	800b0e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <TL_TRACES_Init+0x20>)
 800afd4:	695b      	ldr	r3, [r3, #20]
 800afd6:	4a03      	ldr	r2, [pc, #12]	; (800afe4 <TL_TRACES_Init+0x1c>)
 800afd8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800afda:	f000 fe25 	bl	800bc28 <HW_IPCC_TRACES_Init>

  return;
 800afde:	bf00      	nop
}
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200300c0 	.word	0x200300c0
 800afe8:	20030000 	.word	0x20030000

0800afec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b06      	cmp	r3, #6
 800affc:	d845      	bhi.n	800b08a <OutputDbgTrace+0x9e>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <OutputDbgTrace+0x18>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b021 	.word	0x0800b021
 800b008:	0800b045 	.word	0x0800b045
 800b00c:	0800b04b 	.word	0x0800b04b
 800b010:	0800b05f 	.word	0x0800b05f
 800b014:	0800b06b 	.word	0x0800b06b
 800b018:	0800b071 	.word	0x0800b071
 800b01c:	0800b07f 	.word	0x0800b07f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	7a5b      	ldrb	r3, [r3, #9]
 800b028:	2bff      	cmp	r3, #255	; 0xff
 800b02a:	d005      	beq.n	800b038 <OutputDbgTrace+0x4c>
 800b02c:	2bff      	cmp	r3, #255	; 0xff
 800b02e:	dc05      	bgt.n	800b03c <OutputDbgTrace+0x50>
 800b030:	2b0e      	cmp	r3, #14
 800b032:	d005      	beq.n	800b040 <OutputDbgTrace+0x54>
 800b034:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b036:	e001      	b.n	800b03c <OutputDbgTrace+0x50>
          break;
 800b038:	bf00      	nop
 800b03a:	e027      	b.n	800b08c <OutputDbgTrace+0xa0>
          break;
 800b03c:	bf00      	nop
 800b03e:	e025      	b.n	800b08c <OutputDbgTrace+0xa0>
          break;
 800b040:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b042:	e023      	b.n	800b08c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b048:	e020      	b.n	800b08c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	7a5b      	ldrb	r3, [r3, #9]
 800b052:	2b0e      	cmp	r3, #14
 800b054:	d001      	beq.n	800b05a <OutputDbgTrace+0x6e>
 800b056:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b058:	e000      	b.n	800b05c <OutputDbgTrace+0x70>
          break;
 800b05a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b05c:	e016      	b.n	800b08c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	7a5b      	ldrb	r3, [r3, #9]
 800b066:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b068:	e010      	b.n	800b08c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b06e:	e00d      	b.n	800b08c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	7a5b      	ldrb	r3, [r3, #9]
 800b078:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b07a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b07c:	e006      	b.n	800b08c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	7a5b      	ldrb	r3, [r3, #9]
 800b086:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b088:	e000      	b.n	800b08c <OutputDbgTrace+0xa0>

    default:
      break;
 800b08a:	bf00      	nop
  }

  return;
 800b08c:	bf00      	nop
}
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b0a2:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <OTP_Read+0x48>)
 800b0a4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b0a6:	e002      	b.n	800b0ae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3b08      	subs	r3, #8
 800b0ac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3307      	adds	r3, #7
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	79fa      	ldrb	r2, [r7, #7]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d003      	beq.n	800b0c2 <OTP_Read+0x2a>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <OTP_Read+0x4c>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d1f2      	bne.n	800b0a8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3307      	adds	r3, #7
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	79fa      	ldrb	r2, [r7, #7]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d001      	beq.n	800b0d2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	1fff73f8 	.word	0x1fff73f8
 800b0e4:	1fff7000 	.word	0x1fff7000

0800b0e8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	605a      	str	r2, [r3, #4]
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b108:	b480      	push	{r7}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b110:	f3ef 8310 	mrs	r3, PRIMASK
 800b114:	60fb      	str	r3, [r7, #12]
  return(result);
 800b116:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b11a:	b672      	cpsid	i
}
 800b11c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d102      	bne.n	800b12e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b128:	2301      	movs	r3, #1
 800b12a:	75fb      	strb	r3, [r7, #23]
 800b12c:	e001      	b.n	800b132 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b12e:	2300      	movs	r3, #0
 800b130:	75fb      	strb	r3, [r7, #23]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f383 8810 	msr	PRIMASK, r3
}
 800b13c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b140:	4618      	mov	r0, r3
 800b142:	371c      	adds	r7, #28
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b087      	sub	sp, #28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b156:	f3ef 8310 	mrs	r3, PRIMASK
 800b15a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b15c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b15e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b160:	b672      	cpsid	i
}
 800b162:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	605a      	str	r2, [r3, #4]
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f383 8810 	msr	PRIMASK, r3
}
 800b18a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b18c:	bf00      	nop
 800b18e:	371c      	adds	r7, #28
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1ac:	b672      	cpsid	i
}
 800b1ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f383 8810 	msr	PRIMASK, r3
}
 800b1d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b1d8:	bf00      	nop
 800b1da:	371c      	adds	r7, #28
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1f6:	b672      	cpsid	i
}
 800b1f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	6812      	ldr	r2, [r2, #0]
 800b202:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6852      	ldr	r2, [r2, #4]
 800b20c:	605a      	str	r2, [r3, #4]
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f383 8810 	msr	PRIMASK, r3
}
 800b218:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b230:	f3ef 8310 	mrs	r3, PRIMASK
 800b234:	60fb      	str	r3, [r7, #12]
  return(result);
 800b236:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b23a:	b672      	cpsid	i
}
 800b23c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff ffca 	bl	800b1e4 <LST_remove_node>
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f383 8810 	msr	PRIMASK, r3
}
 800b25a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b25c:	bf00      	nop
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b268:	4b03      	ldr	r3, [pc, #12]	; (800b278 <LL_FLASH_GetUDN+0x14>)
 800b26a:	681b      	ldr	r3, [r3, #0]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	1fff7580 	.word	0x1fff7580

0800b27c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b280:	4b03      	ldr	r3, [pc, #12]	; (800b290 <LL_FLASH_GetDeviceID+0x14>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	b2db      	uxtb	r3, r3
}
 800b286:	4618      	mov	r0, r3
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	1fff7584 	.word	0x1fff7584

0800b294 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b298:	4b03      	ldr	r3, [pc, #12]	; (800b2a8 <LL_FLASH_GetSTCompanyID+0x14>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	0a1b      	lsrs	r3, r3, #8
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	1fff7584 	.word	0x1fff7584

0800b2ac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b2ac:	b5b0      	push	{r4, r5, r7, lr}
 800b2ae:	b090      	sub	sp, #64	; 0x40
 800b2b0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b2b2:	2392      	movs	r3, #146	; 0x92
 800b2b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b2b8:	4b2e      	ldr	r3, [pc, #184]	; (800b374 <APP_BLE_Init+0xc8>)
 800b2ba:	1d3c      	adds	r4, r7, #4
 800b2bc:	461d      	mov	r5, r3
 800b2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b2ce:	c403      	stmia	r4!, {r0, r1}
 800b2d0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b2d2:	f000 f90b 	bl	800b4ec <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	2002      	movs	r0, #2
 800b2da:	f000 fcc1 	bl	800bc60 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b2de:	4a26      	ldr	r2, [pc, #152]	; (800b378 <APP_BLE_Init+0xcc>)
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	2002      	movs	r0, #2
 800b2e4:	f000 fde8 	bl	800beb8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b2e8:	1d3b      	adds	r3, r7, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff f966 	bl	800a5bc <SHCI_C2_BLE_Init>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b2f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b2fe:	f7f9 faf7 	bl	80048f0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b302:	f000 f909 	bl	800b518 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b306:	f7ff f8b3 	bl	800a470 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b30a:	4b1c      	ldr	r3, [pc, #112]	; (800b37c <APP_BLE_Init+0xd0>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b312:	4b1a      	ldr	r3, [pc, #104]	; (800b37c <APP_BLE_Init+0xd0>)
 800b314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b318:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b31a:	4a19      	ldr	r2, [pc, #100]	; (800b380 <APP_BLE_Init+0xd4>)
 800b31c:	2100      	movs	r1, #0
 800b31e:	2001      	movs	r0, #1
 800b320:	f000 fdca 	bl	800beb8 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b324:	2006      	movs	r0, #6
 800b326:	f7fe fd94 	bl	8009e52 <aci_hal_set_radio_activity_mask>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800b330:	f000 fb26 	bl	800b980 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800b334:	4b13      	ldr	r3, [pc, #76]	; (800b384 <APP_BLE_Init+0xd8>)
 800b336:	2200      	movs	r2, #0
 800b338:	4913      	ldr	r1, [pc, #76]	; (800b388 <APP_BLE_Init+0xdc>)
 800b33a:	2000      	movs	r0, #0
 800b33c:	f7f8 fe7c 	bl	8004038 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800b340:	4b12      	ldr	r3, [pc, #72]	; (800b38c <APP_BLE_Init+0xe0>)
 800b342:	2200      	movs	r2, #0
 800b344:	4912      	ldr	r1, [pc, #72]	; (800b390 <APP_BLE_Init+0xe4>)
 800b346:	2000      	movs	r0, #0
 800b348:	f7f8 fe76 	bl	8004038 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <APP_BLE_Init+0xd0>)
 800b34e:	2200      	movs	r2, #0
 800b350:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b352:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <APP_BLE_Init+0xd0>)
 800b354:	2200      	movs	r2, #0
 800b356:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800b358:	4b0e      	ldr	r3, [pc, #56]	; (800b394 <APP_BLE_Init+0xe8>)
 800b35a:	2280      	movs	r2, #128	; 0x80
 800b35c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800b35e:	4b0e      	ldr	r3, [pc, #56]	; (800b398 <APP_BLE_Init+0xec>)
 800b360:	22a0      	movs	r2, #160	; 0xa0
 800b362:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b364:	2001      	movs	r0, #1
 800b366:	f000 f9a5 	bl	800b6b4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b36a:	bf00      	nop
}
 800b36c:	3740      	adds	r7, #64	; 0x40
 800b36e:	46bd      	mov	sp, r7
 800b370:	bdb0      	pop	{r4, r5, r7, pc}
 800b372:	bf00      	nop
 800b374:	0800d28c 	.word	0x0800d28c
 800b378:	0800a7d9 	.word	0x0800a7d9
 800b37c:	200010e4 	.word	0x200010e4
 800b380:	0800b81d 	.word	0x0800b81d
 800b384:	0800b851 	.word	0x0800b851
 800b388:	20001165 	.word	0x20001165
 800b38c:	0800b861 	.word	0x0800b861
 800b390:	20001166 	.word	0x20001166
 800b394:	20001168 	.word	0x20001168
 800b398:	2000116a 	.word	0x2000116a

0800b39c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	; 0x28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b3a4:	2392      	movs	r3, #146	; 0x92
 800b3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2bff      	cmp	r3, #255	; 0xff
 800b3b6:	d076      	beq.n	800b4a6 <SVCCTL_App_Notification+0x10a>
 800b3b8:	2bff      	cmp	r3, #255	; 0xff
 800b3ba:	f300 808b 	bgt.w	800b4d4 <SVCCTL_App_Notification+0x138>
 800b3be:	2b05      	cmp	r3, #5
 800b3c0:	d002      	beq.n	800b3c8 <SVCCTL_App_Notification+0x2c>
 800b3c2:	2b3e      	cmp	r3, #62	; 0x3e
 800b3c4:	d020      	beq.n	800b408 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b3c6:	e085      	b.n	800b4d4 <SVCCTL_App_Notification+0x138>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	3302      	adds	r3, #2
 800b3cc:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	4b43      	ldr	r3, [pc, #268]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b3d8:	8adb      	ldrh	r3, [r3, #22]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d106      	bne.n	800b3ec <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b3de:	4b41      	ldr	r3, [pc, #260]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b3e4:	4b3f      	ldr	r3, [pc, #252]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	f000 f961 	bl	800b6b4 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800b3f2:	4b3d      	ldr	r3, [pc, #244]	; (800b4e8 <SVCCTL_App_Notification+0x14c>)
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b3f8:	4b3a      	ldr	r3, [pc, #232]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b3fa:	8ada      	ldrh	r2, [r3, #22]
 800b3fc:	4b3a      	ldr	r3, [pc, #232]	; (800b4e8 <SVCCTL_App_Notification+0x14c>)
 800b3fe:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800b400:	4839      	ldr	r0, [pc, #228]	; (800b4e8 <SVCCTL_App_Notification+0x14c>)
 800b402:	f000 faa9 	bl	800b958 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b406:	e068      	b.n	800b4da <SVCCTL_App_Notification+0x13e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	3302      	adds	r3, #2
 800b40c:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b0c      	cmp	r3, #12
 800b414:	d005      	beq.n	800b422 <SVCCTL_App_Notification+0x86>
 800b416:	2b0c      	cmp	r3, #12
 800b418:	dc41      	bgt.n	800b49e <SVCCTL_App_Notification+0x102>
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d017      	beq.n	800b44e <SVCCTL_App_Notification+0xb2>
 800b41e:	2b03      	cmp	r3, #3
          break;
 800b420:	e03d      	b.n	800b49e <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	3301      	adds	r3, #1
 800b426:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800b428:	4b2e      	ldr	r3, [pc, #184]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b42a:	8adb      	ldrh	r3, [r3, #22]
 800b42c:	f107 020a 	add.w	r2, r7, #10
 800b430:	f107 010b 	add.w	r1, r7, #11
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fd84 	bl	8009f42 <hci_le_read_phy>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b444:	2b00      	cmp	r3, #0
 800b446:	d12c      	bne.n	800b4a2 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800b448:	7afb      	ldrb	r3, [r7, #11]
 800b44a:	2b02      	cmp	r3, #2
          break;
 800b44c:	e029      	b.n	800b4a2 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	3301      	adds	r3, #1
 800b452:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800b454:	4b23      	ldr	r3, [pc, #140]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b456:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f8 fe66 	bl	800412c <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b460:	4b20      	ldr	r3, [pc, #128]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b462:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b466:	2b04      	cmp	r3, #4
 800b468:	d104      	bne.n	800b474 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b46a:	4b1e      	ldr	r3, [pc, #120]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b46c:	2206      	movs	r2, #6
 800b46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b472:	e003      	b.n	800b47c <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b474:	4b1b      	ldr	r3, [pc, #108]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b476:	2205      	movs	r2, #5
 800b478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b482:	b29a      	uxth	r2, r3
 800b484:	4b17      	ldr	r3, [pc, #92]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b486:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800b488:	4b17      	ldr	r3, [pc, #92]	; (800b4e8 <SVCCTL_App_Notification+0x14c>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b48e:	4b15      	ldr	r3, [pc, #84]	; (800b4e4 <SVCCTL_App_Notification+0x148>)
 800b490:	8ada      	ldrh	r2, [r3, #22]
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <SVCCTL_App_Notification+0x14c>)
 800b494:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800b496:	4814      	ldr	r0, [pc, #80]	; (800b4e8 <SVCCTL_App_Notification+0x14c>)
 800b498:	f000 fa5e 	bl	800b958 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b49c:	e002      	b.n	800b4a4 <SVCCTL_App_Notification+0x108>
          break;
 800b49e:	bf00      	nop
 800b4a0:	e01b      	b.n	800b4da <SVCCTL_App_Notification+0x13e>
          break;
 800b4a2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b4a4:	e019      	b.n	800b4da <SVCCTL_App_Notification+0x13e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	3302      	adds	r3, #2
 800b4aa:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4b6:	d009      	beq.n	800b4cc <SVCCTL_App_Notification+0x130>
 800b4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4bc:	dc0c      	bgt.n	800b4d8 <SVCCTL_App_Notification+0x13c>
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d006      	beq.n	800b4d0 <SVCCTL_App_Notification+0x134>
 800b4c2:	f240 4207 	movw	r2, #1031	; 0x407
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d106      	bne.n	800b4d8 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b4ca:	e002      	b.n	800b4d2 <SVCCTL_App_Notification+0x136>
          break;
 800b4cc:	bf00      	nop
 800b4ce:	e003      	b.n	800b4d8 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b4d0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b4d2:	e001      	b.n	800b4d8 <SVCCTL_App_Notification+0x13c>
      break;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b4d8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b4da:	2301      	movs	r3, #1
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3728      	adds	r7, #40	; 0x28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200010e4 	.word	0x200010e4
 800b4e8:	2000116c 	.word	0x2000116c

0800b4ec <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b4f2:	4b06      	ldr	r3, [pc, #24]	; (800b50c <Ble_Tl_Init+0x20>)
 800b4f4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b4f6:	4b06      	ldr	r3, [pc, #24]	; (800b510 <Ble_Tl_Init+0x24>)
 800b4f8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4805      	ldr	r0, [pc, #20]	; (800b514 <Ble_Tl_Init+0x28>)
 800b500:	f7ff f94e 	bl	800a7a0 <hci_init>

  return;
 800b504:	bf00      	nop
}
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	200300d8 	.word	0x200300d8
 800b510:	0800b8eb 	.word	0x0800b8eb
 800b514:	0800b8b3 	.word	0x0800b8b3

0800b518 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51a:	b08d      	sub	sp, #52	; 0x34
 800b51c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b51e:	2300      	movs	r3, #0
 800b520:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b522:	2392      	movs	r3, #146	; 0x92
 800b524:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b526:	f7fe fce8 	bl	8009efa <hci_reset>
 800b52a:	4603      	mov	r3, r0
 800b52c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b52e:	f000 f931 	bl	800b794 <BleGetBdAddress>
 800b532:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	2106      	movs	r1, #6
 800b538:	2000      	movs	r0, #0
 800b53a:	f7fe fb9e 	bl	8009c7a <aci_hal_write_config_data>
 800b53e:	4603      	mov	r3, r0
 800b540:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	795a      	ldrb	r2, [r3, #5]
 800b546:	4b55      	ldr	r3, [pc, #340]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x184>)
 800b548:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	791a      	ldrb	r2, [r3, #4]
 800b54e:	4b53      	ldr	r3, [pc, #332]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x184>)
 800b550:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	78da      	ldrb	r2, [r3, #3]
 800b556:	4b51      	ldr	r3, [pc, #324]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x184>)
 800b558:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	789a      	ldrb	r2, [r3, #2]
 800b55e:	4b4f      	ldr	r3, [pc, #316]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x184>)
 800b560:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	785a      	ldrb	r2, [r3, #1]
 800b566:	4b4d      	ldr	r3, [pc, #308]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x184>)
 800b568:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	4b4b      	ldr	r3, [pc, #300]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x184>)
 800b570:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b572:	4a4b      	ldr	r2, [pc, #300]	; (800b6a0 <Ble_Hci_Gap_Gatt_Init+0x188>)
 800b574:	2110      	movs	r1, #16
 800b576:	2018      	movs	r0, #24
 800b578:	f7fe fb7f 	bl	8009c7a <aci_hal_write_config_data>
 800b57c:	4603      	mov	r3, r0
 800b57e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b580:	4a48      	ldr	r2, [pc, #288]	; (800b6a4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800b582:	2110      	movs	r1, #16
 800b584:	2008      	movs	r0, #8
 800b586:	f7fe fb78 	bl	8009c7a <aci_hal_write_config_data>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b58e:	2118      	movs	r1, #24
 800b590:	2001      	movs	r0, #1
 800b592:	f7fe fbf7 	bl	8009d84 <aci_hal_set_tx_power_level>
 800b596:	4603      	mov	r3, r0
 800b598:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b59a:	f7fe f8c2 	bl	8009722 <aci_gatt_init>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	f043 0301 	orr.w	r3, r3, #1
 800b5ac:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01f      	beq.n	800b5f4 <Ble_Hci_Gap_Gatt_Init+0xdc>
  {
    const char *name = "PACKCTL";
 800b5b4:	4b3c      	ldr	r3, [pc, #240]	; (800b6a8 <Ble_Hci_Gap_Gatt_Init+0x190>)
 800b5b6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b5b8:	1dba      	adds	r2, r7, #6
 800b5ba:	7bf8      	ldrb	r0, [r7, #15]
 800b5bc:	1cbb      	adds	r3, r7, #2
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	1d3b      	adds	r3, r7, #4
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	2207      	movs	r2, #7
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f7fd ff67 	bl	800949c <aci_gap_init>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b5d2:	88fc      	ldrh	r4, [r7, #6]
 800b5d4:	88bd      	ldrh	r5, [r7, #4]
 800b5d6:	68b8      	ldr	r0, [r7, #8]
 800b5d8:	f7f4 fdd2 	bl	8000180 <strlen>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	b2da      	uxtb	r2, r3
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f7fe fa9c 	bl	8009b28 <aci_gatt_update_char_value>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b5f4:	88f8      	ldrh	r0, [r7, #6]
 800b5f6:	8879      	ldrh	r1, [r7, #2]
 800b5f8:	463b      	mov	r3, r7
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	2200      	movs	r2, #0
 800b600:	f7fe fa92 	bl	8009b28 <aci_gatt_update_char_value>
 800b604:	4603      	mov	r3, r0
 800b606:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b608:	2202      	movs	r2, #2
 800b60a:	2102      	movs	r1, #2
 800b60c:	2000      	movs	r0, #0
 800b60e:	f7fe fd16 	bl	800a03e <hci_le_set_default_phy>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b616:	4b25      	ldr	r3, [pc, #148]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b618:	2201      	movs	r2, #1
 800b61a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b61c:	4b23      	ldr	r3, [pc, #140]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f7fd fe23 	bl	800926c <aci_gap_set_io_capability>
 800b626:	4603      	mov	r3, r0
 800b628:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b62a:	4b20      	ldr	r3, [pc, #128]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b62c:	2201      	movs	r2, #1
 800b62e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b630:	4b1e      	ldr	r3, [pc, #120]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b632:	2208      	movs	r2, #8
 800b634:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b636:	4b1d      	ldr	r3, [pc, #116]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b638:	2210      	movs	r2, #16
 800b63a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b63c:	4b1b      	ldr	r3, [pc, #108]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b63e:	2200      	movs	r2, #0
 800b640:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b642:	4b1a      	ldr	r3, [pc, #104]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b644:	4a1a      	ldr	r2, [pc, #104]	; (800b6b0 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800b646:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b648:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b64a:	2201      	movs	r2, #1
 800b64c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b64e:	4b17      	ldr	r3, [pc, #92]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b650:	789c      	ldrb	r4, [r3, #2]
 800b652:	4b16      	ldr	r3, [pc, #88]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b654:	785d      	ldrb	r5, [r3, #1]
 800b656:	4b15      	ldr	r3, [pc, #84]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b658:	791b      	ldrb	r3, [r3, #4]
 800b65a:	4a14      	ldr	r2, [pc, #80]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b65c:	7952      	ldrb	r2, [r2, #5]
 800b65e:	4913      	ldr	r1, [pc, #76]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b660:	78c9      	ldrb	r1, [r1, #3]
 800b662:	4812      	ldr	r0, [pc, #72]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b664:	6880      	ldr	r0, [r0, #8]
 800b666:	2600      	movs	r6, #0
 800b668:	9604      	str	r6, [sp, #16]
 800b66a:	9003      	str	r0, [sp, #12]
 800b66c:	9102      	str	r1, [sp, #8]
 800b66e:	9201      	str	r2, [sp, #4]
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	2300      	movs	r3, #0
 800b674:	2201      	movs	r2, #1
 800b676:	4629      	mov	r1, r5
 800b678:	4620      	mov	r0, r4
 800b67a:	f7fd fe4b 	bl	8009314 <aci_gap_set_authentication_requirement>
 800b67e:	4603      	mov	r3, r0
 800b680:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x194>)
 800b684:	789b      	ldrb	r3, [r3, #2]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <Ble_Hci_Gap_Gatt_Init+0x17a>
  {
    ret = aci_gap_configure_whitelist();
 800b68a:	f7fe f826 	bl	80096da <aci_gap_configure_whitelist>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b692:	bf00      	nop
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b69a:	bf00      	nop
 800b69c:	20000018 	.word	0x20000018
 800b6a0:	0800d4d0 	.word	0x0800d4d0
 800b6a4:	0800d4e0 	.word	0x0800d4e0
 800b6a8:	0800d2c8 	.word	0x0800d2c8
 800b6ac:	200010e4 	.word	0x200010e4
 800b6b0:	0001b207 	.word	0x0001b207

0800b6b4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08c      	sub	sp, #48	; 0x30
 800b6b8:	af08      	add	r7, sp, #32
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b6be:	2392      	movs	r3, #146	; 0x92
 800b6c0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d106      	bne.n	800b6d6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800b6c8:	4b2b      	ldr	r3, [pc, #172]	; (800b778 <Adv_Request+0xc4>)
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800b6ce:	4b2b      	ldr	r3, [pc, #172]	; (800b77c <Adv_Request+0xc8>)
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	81bb      	strh	r3, [r7, #12]
 800b6d4:	e005      	b.n	800b6e2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800b6d6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800b6da:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800b6dc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b6e0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800b6e2:	4b27      	ldr	r3, [pc, #156]	; (800b780 <Adv_Request+0xcc>)
 800b6e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7f8 fd1f 	bl	800412c <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d10d      	bne.n	800b710 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800b6f4:	4b22      	ldr	r3, [pc, #136]	; (800b780 <Adv_Request+0xcc>)
 800b6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d004      	beq.n	800b708 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800b6fe:	4b20      	ldr	r3, [pc, #128]	; (800b780 <Adv_Request+0xcc>)
 800b700:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b704:	2b02      	cmp	r3, #2
 800b706:	d103      	bne.n	800b710 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800b708:	f7fd fc92 	bl	8009030 <aci_gap_set_non_discoverable>
 800b70c:	4603      	mov	r3, r0
 800b70e:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b710:	4a1b      	ldr	r2, [pc, #108]	; (800b780 <Adv_Request+0xcc>)
 800b712:	79fb      	ldrb	r3, [r7, #7]
 800b714:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800b718:	4b19      	ldr	r3, [pc, #100]	; (800b780 <Adv_Request+0xcc>)
 800b71a:	7e1b      	ldrb	r3, [r3, #24]
 800b71c:	89ba      	ldrh	r2, [r7, #12]
 800b71e:	89f9      	ldrh	r1, [r7, #14]
 800b720:	2000      	movs	r0, #0
 800b722:	9006      	str	r0, [sp, #24]
 800b724:	2000      	movs	r0, #0
 800b726:	9005      	str	r0, [sp, #20]
 800b728:	4816      	ldr	r0, [pc, #88]	; (800b784 <Adv_Request+0xd0>)
 800b72a:	9004      	str	r0, [sp, #16]
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <Adv_Request+0xd4>)
 800b730:	9302      	str	r3, [sp, #8]
 800b732:	2308      	movs	r3, #8
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	2300      	movs	r3, #0
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	2300      	movs	r3, #0
 800b73c:	2000      	movs	r0, #0
 800b73e:	f7fd fc9b 	bl	8009078 <aci_gap_set_discoverable>
 800b742:	4603      	mov	r3, r0
 800b744:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800b746:	4911      	ldr	r1, [pc, #68]	; (800b78c <Adv_Request+0xd8>)
 800b748:	200e      	movs	r0, #14
 800b74a:	f7fd ff54 	bl	80095f6 <aci_gap_update_adv_data>
 800b74e:	4603      	mov	r3, r0
 800b750:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800b752:	7afb      	ldrb	r3, [r7, #11]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d107      	bne.n	800b76e <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800b75e:	4b08      	ldr	r3, [pc, #32]	; (800b780 <Adv_Request+0xcc>)
 800b760:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b764:	490a      	ldr	r1, [pc, #40]	; (800b790 <Adv_Request+0xdc>)
 800b766:	4618      	mov	r0, r3
 800b768:	f7f8 fd64 	bl	8004234 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800b76c:	bf00      	nop
 800b76e:	bf00      	nop
}
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20001168 	.word	0x20001168
 800b77c:	2000116a 	.word	0x2000116a
 800b780:	200010e4 	.word	0x200010e4
 800b784:	200010fd 	.word	0x200010fd
 800b788:	0800d4f0 	.word	0x0800d4f0
 800b78c:	20000018 	.word	0x20000018
 800b790:	0001e046 	.word	0x0001e046

0800b794 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b79a:	f7ff fd63 	bl	800b264 <LL_FLASH_GetUDN>
 800b79e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a6:	d023      	beq.n	800b7f0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b7a8:	f7ff fd74 	bl	800b294 <LL_FLASH_GetSTCompanyID>
 800b7ac:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b7ae:	f7ff fd65 	bl	800b27c <LL_FLASH_GetDeviceID>
 800b7b2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	4b16      	ldr	r3, [pc, #88]	; (800b814 <BleGetBdAddress+0x80>)
 800b7ba:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	4b14      	ldr	r3, [pc, #80]	; (800b814 <BleGetBdAddress+0x80>)
 800b7c4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	4b12      	ldr	r3, [pc, #72]	; (800b814 <BleGetBdAddress+0x80>)
 800b7cc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	4b10      	ldr	r3, [pc, #64]	; (800b814 <BleGetBdAddress+0x80>)
 800b7d4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	0a1b      	lsrs	r3, r3, #8
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <BleGetBdAddress+0x80>)
 800b7de:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	0c1b      	lsrs	r3, r3, #16
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	4b0b      	ldr	r3, [pc, #44]	; (800b814 <BleGetBdAddress+0x80>)
 800b7e8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <BleGetBdAddress+0x80>)
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	e00b      	b.n	800b808 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f7ff fc51 	bl	800b098 <OTP_Read>
 800b7f6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	e001      	b.n	800b808 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b804:	4b04      	ldr	r3, [pc, #16]	; (800b818 <BleGetBdAddress+0x84>)
 800b806:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b808:	697b      	ldr	r3, [r7, #20]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	200010dc 	.word	0x200010dc
 800b818:	0800d4c8 	.word	0x0800d4c8

0800b81c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b822:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <Adv_Cancel+0x30>)
 800b824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b828:	2b05      	cmp	r3, #5
 800b82a:	d00a      	beq.n	800b842 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b82c:	2392      	movs	r3, #146	; 0x92
 800b82e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b830:	f7fd fbfe 	bl	8009030 <aci_gap_set_non_discoverable>
 800b834:	4603      	mov	r3, r0
 800b836:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b838:	4b04      	ldr	r3, [pc, #16]	; (800b84c <Adv_Cancel+0x30>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b840:	bf00      	nop
 800b842:	bf00      	nop
}
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200010e4 	.word	0x200010e4

0800b850 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800b854:	2100      	movs	r1, #0
 800b856:	2001      	movs	r0, #1
 800b858:	f000 fb50 	bl	800befc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800b85c:	bf00      	nop
}
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800b860:	b480      	push	{r7}
 800b862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800b864:	bf00      	nop
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b876:	2100      	movs	r1, #0
 800b878:	2002      	movs	r0, #2
 800b87a:	f000 fb3f 	bl	800befc <UTIL_SEQ_SetTask>

  return;
 800b87e:	bf00      	nop
}
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b88e:	2001      	movs	r0, #1
 800b890:	f000 fba0 	bl	800bfd4 <UTIL_SEQ_SetEvt>

  return;
 800b894:	bf00      	nop
}
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	f000 fbb5 	bl	800c014 <UTIL_SEQ_WaitEvt>

  return;
 800b8aa:	bf00      	nop
}
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe fe25 	bl	800a514 <SVCCTL_UserEvtRx>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b8da:	e003      	b.n	800b8e4 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]
  return;
 800b8e2:	bf00      	nop
}
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b8f4:	79fb      	ldrb	r3, [r7, #7]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <BLE_StatusNot+0x16>
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d006      	beq.n	800b90c <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b8fe:	e00b      	b.n	800b918 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b900:	2303      	movs	r3, #3
 800b902:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f000 fb25 	bl	800bf54 <UTIL_SEQ_PauseTask>
      break;
 800b90a:	e005      	b.n	800b918 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b90c:	2303      	movs	r3, #3
 800b90e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 fb3f 	bl	800bf94 <UTIL_SEQ_ResumeTask>
      break;
 800b916:	bf00      	nop
  }

  return;
 800b918:	bf00      	nop
}
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d006      	beq.n	800b93e <P2PS_STM_App_Notification+0x1e>
 800b930:	2b03      	cmp	r3, #3
 800b932:	dc06      	bgt.n	800b942 <P2PS_STM_App_Notification+0x22>
 800b934:	2b00      	cmp	r3, #0
 800b936:	d006      	beq.n	800b946 <P2PS_STM_App_Notification+0x26>
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d006      	beq.n	800b94a <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800b93c:	e001      	b.n	800b942 <P2PS_STM_App_Notification+0x22>
      break;
 800b93e:	bf00      	nop
 800b940:	e004      	b.n	800b94c <P2PS_STM_App_Notification+0x2c>
      break;
 800b942:	bf00      	nop
 800b944:	e002      	b.n	800b94c <P2PS_STM_App_Notification+0x2c>
      break;
 800b946:	bf00      	nop
 800b948:	e000      	b.n	800b94c <P2PS_STM_App_Notification+0x2c>
      break;
 800b94a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800b94c:	bf00      	nop
}
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <P2PS_APP_Notification+0x16>
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d002      	beq.n	800b972 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800b96c:	e002      	b.n	800b974 <P2PS_APP_Notification+0x1c>
    break;
 800b96e:	bf00      	nop
 800b970:	e000      	b.n	800b974 <P2PS_APP_Notification+0x1c>
    break;
 800b972:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800b974:	bf00      	nop
}
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800b980:	b480      	push	{r7}
 800b982:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800b984:	bf00      	nop
}
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
	...

0800b990 <LL_PWR_EnableBootC2>:
{
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b994:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <LL_PWR_EnableBootC2+0x1c>)
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	4a04      	ldr	r2, [pc, #16]	; (800b9ac <LL_PWR_EnableBootC2+0x1c>)
 800b99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b99e:	60d3      	str	r3, [r2, #12]
}
 800b9a0:	bf00      	nop
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	58000400 	.word	0x58000400

0800b9b0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b9b8:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b9ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b9be:	4905      	ldr	r1, [pc, #20]	; (800b9d4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	58000800 	.word	0x58000800

0800b9d8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b9e0:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b9e2:	6a1a      	ldr	r2, [r3, #32]
 800b9e4:	4904      	ldr	r1, [pc, #16]	; (800b9f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	620b      	str	r3, [r1, #32]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	58000800 	.word	0x58000800

0800b9fc <LL_AHB3_GRP1_EnableClock>:
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800ba04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ba14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba20:	68fb      	ldr	r3, [r7, #12]
}
 800ba22:	bf00      	nop
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ba36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ba3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ba4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba4e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4013      	ands	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba58:	68fb      	ldr	r3, [r7, #12]
}
 800ba5a:	bf00      	nop
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <LL_C1_IPCC_EnableIT_TXF>:
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <LL_C1_IPCC_EnableIT_RXO>:
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f043 0201 	orr.w	r2, r3, #1
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
}
 800ba9a:	bf00      	nop
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800baa6:	b480      	push	{r7}
 800baa8:	b083      	sub	sp, #12
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	041b      	lsls	r3, r3, #16
 800bab8:	43db      	mvns	r3, r3
 800baba:	401a      	ands	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	605a      	str	r2, [r3, #4]
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	43db      	mvns	r3, r3
 800bade:	401a      	ands	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	605a      	str	r2, [r3, #4]
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <LL_C1_IPCC_SetFlag_CHx>:
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	041a      	lsls	r2, r3, #16
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	609a      	str	r2, [r3, #8]
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68da      	ldr	r2, [r3, #12]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	4013      	ands	r3, r2
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d101      	bne.n	800bb2a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e000      	b.n	800bb2c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bb3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bb40:	f7ff ff75 	bl	800ba2e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bb44:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb48:	f7ff ff46 	bl	800b9d8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bb4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb50:	f7ff ff2e 	bl	800b9b0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bb54:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bb56:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bb58:	f7ff ff1a 	bl	800b990 <LL_PWR_EnableBootC2>

  return;
 800bb5c:	bf00      	nop
}
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bb64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bb68:	f7ff ff48 	bl	800b9fc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bb6c:	4806      	ldr	r0, [pc, #24]	; (800bb88 <HW_IPCC_Init+0x28>)
 800bb6e:	f7ff ff8a 	bl	800ba86 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bb72:	4805      	ldr	r0, [pc, #20]	; (800bb88 <HW_IPCC_Init+0x28>)
 800bb74:	f7ff ff77 	bl	800ba66 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bb78:	202c      	movs	r0, #44	; 0x2c
 800bb7a:	f7f9 fc1a 	bl	80053b2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bb7e:	202d      	movs	r0, #45	; 0x2d
 800bb80:	f7f9 fc17 	bl	80053b2 <HAL_NVIC_EnableIRQ>

  return;
 800bb84:	bf00      	nop
}
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	58000c00 	.word	0x58000c00

0800bb8c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bb90:	2101      	movs	r1, #1
 800bb92:	4802      	ldr	r0, [pc, #8]	; (800bb9c <HW_IPCC_BLE_Init+0x10>)
 800bb94:	f7ff ff9a 	bl	800bacc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bb98:	bf00      	nop
}
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	58000c00 	.word	0x58000c00

0800bba0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800bba4:	2101      	movs	r1, #1
 800bba6:	4802      	ldr	r0, [pc, #8]	; (800bbb0 <HW_IPCC_BLE_SendCmd+0x10>)
 800bba8:	f7ff ffa2 	bl	800baf0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bbac:	bf00      	nop
}
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	58000c00 	.word	0x58000c00

0800bbb4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bbb8:	2102      	movs	r1, #2
 800bbba:	4802      	ldr	r0, [pc, #8]	; (800bbc4 <HW_IPCC_SYS_Init+0x10>)
 800bbbc:	f7ff ff86 	bl	800bacc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bbc0:	bf00      	nop
}
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	58000c00 	.word	0x58000c00

0800bbc8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bbcc:	2102      	movs	r1, #2
 800bbce:	4804      	ldr	r0, [pc, #16]	; (800bbe0 <HW_IPCC_SYS_SendCmd+0x18>)
 800bbd0:	f7ff ff8e 	bl	800baf0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bbd4:	2102      	movs	r1, #2
 800bbd6:	4802      	ldr	r0, [pc, #8]	; (800bbe0 <HW_IPCC_SYS_SendCmd+0x18>)
 800bbd8:	f7ff ff65 	bl	800baa6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bbdc:	bf00      	nop
}
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	58000c00 	.word	0x58000c00

0800bbe4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bbec:	2108      	movs	r1, #8
 800bbee:	480c      	ldr	r0, [pc, #48]	; (800bc20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bbf0:	f7ff ff8d 	bl	800bb0e <LL_C1_IPCC_IsActiveFlag_CHx>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d007      	beq.n	800bc0a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bbfa:	4a0a      	ldr	r2, [pc, #40]	; (800bc24 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bc00:	2108      	movs	r1, #8
 800bc02:	4807      	ldr	r0, [pc, #28]	; (800bc20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bc04:	f7ff ff4f 	bl	800baa6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bc08:	e006      	b.n	800bc18 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bc0e:	2108      	movs	r1, #8
 800bc10:	4803      	ldr	r0, [pc, #12]	; (800bc20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bc12:	f7ff ff6d 	bl	800baf0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800bc16:	bf00      	nop
}
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	58000c00 	.word	0x58000c00
 800bc24:	20001170 	.word	0x20001170

0800bc28 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bc2c:	2108      	movs	r1, #8
 800bc2e:	4802      	ldr	r0, [pc, #8]	; (800bc38 <HW_IPCC_TRACES_Init+0x10>)
 800bc30:	f7ff ff4c 	bl	800bacc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bc34:	bf00      	nop
}
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	58000c00 	.word	0x58000c00

0800bc3c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <UTIL_LPM_Init+0x1c>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bc46:	4b05      	ldr	r3, [pc, #20]	; (800bc5c <UTIL_LPM_Init+0x20>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bc4c:	bf00      	nop
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20001174 	.word	0x20001174
 800bc5c:	20001178 	.word	0x20001178

0800bc60 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bc60:	b480      	push	{r7}
 800bc62:	b087      	sub	sp, #28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc70:	613b      	str	r3, [r7, #16]
  return(result);
 800bc72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bc74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc76:	b672      	cpsid	i
}
 800bc78:	bf00      	nop
  
  switch(state)
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d008      	beq.n	800bc92 <UTIL_LPM_SetOffMode+0x32>
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d10e      	bne.n	800bca2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <UTIL_LPM_SetOffMode+0x5c>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	4a0b      	ldr	r2, [pc, #44]	; (800bcbc <UTIL_LPM_SetOffMode+0x5c>)
 800bc8e:	6013      	str	r3, [r2, #0]
      break;
 800bc90:	e008      	b.n	800bca4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	43da      	mvns	r2, r3
 800bc96:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <UTIL_LPM_SetOffMode+0x5c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	4a07      	ldr	r2, [pc, #28]	; (800bcbc <UTIL_LPM_SetOffMode+0x5c>)
 800bc9e:	6013      	str	r3, [r2, #0]
      break;
 800bca0:	e000      	b.n	800bca4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bca2:	bf00      	nop
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f383 8810 	msr	PRIMASK, r3
}
 800bcae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	20001178 	.word	0x20001178

0800bcc0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b090      	sub	sp, #64	; 0x40
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bcc8:	4b73      	ldr	r3, [pc, #460]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bcce:	4b72      	ldr	r3, [pc, #456]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	4a70      	ldr	r2, [pc, #448]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800bcd8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bcda:	4b70      	ldr	r3, [pc, #448]	; (800be9c <UTIL_SEQ_Run+0x1dc>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bce0:	4b6f      	ldr	r3, [pc, #444]	; (800bea0 <UTIL_SEQ_Run+0x1e0>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bce6:	4b6f      	ldr	r3, [pc, #444]	; (800bea4 <UTIL_SEQ_Run+0x1e4>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bcec:	4b6e      	ldr	r3, [pc, #440]	; (800bea8 <UTIL_SEQ_Run+0x1e8>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bcf2:	e08d      	b.n	800be10 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bcf8:	e002      	b.n	800bd00 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bd00:	4a6a      	ldr	r2, [pc, #424]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	401a      	ands	r2, r3
 800bd0c:	4b62      	ldr	r3, [pc, #392]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4013      	ands	r3, r2
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d0f1      	beq.n	800bcfa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bd16:	4a65      	ldr	r2, [pc, #404]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	401a      	ands	r2, r3
 800bd22:	4b5d      	ldr	r3, [pc, #372]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4013      	ands	r3, r2
 800bd28:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bd2a:	4a60      	ldr	r2, [pc, #384]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	4413      	add	r3, r2
 800bd32:	685a      	ldr	r2, [r3, #4]
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d106      	bne.n	800bd4a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bd3c:	4a5b      	ldr	r2, [pc, #364]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd40:	00db      	lsls	r3, r3, #3
 800bd42:	4413      	add	r3, r2
 800bd44:	f04f 32ff 	mov.w	r2, #4294967295
 800bd48:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bd4a:	4a58      	ldr	r2, [pc, #352]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	4413      	add	r3, r2
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	4013      	ands	r3, r2
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 f9b3 	bl	800c0c4 <SEQ_BitPosition>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	4b53      	ldr	r3, [pc, #332]	; (800beb0 <UTIL_SEQ_Run+0x1f0>)
 800bd64:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bd66:	4a51      	ldr	r2, [pc, #324]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	4b4f      	ldr	r3, [pc, #316]	; (800beb0 <UTIL_SEQ_Run+0x1f0>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2101      	movs	r1, #1
 800bd76:	fa01 f303 	lsl.w	r3, r1, r3
 800bd7a:	43db      	mvns	r3, r3
 800bd7c:	401a      	ands	r2, r3
 800bd7e:	494b      	ldr	r1, [pc, #300]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	440b      	add	r3, r1
 800bd86:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd88:	f3ef 8310 	mrs	r3, PRIMASK
 800bd8c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd8e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd92:	b672      	cpsid	i
}
 800bd94:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bd96:	4b46      	ldr	r3, [pc, #280]	; (800beb0 <UTIL_SEQ_Run+0x1f0>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	43da      	mvns	r2, r3
 800bda2:	4b3e      	ldr	r3, [pc, #248]	; (800be9c <UTIL_SEQ_Run+0x1dc>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4013      	ands	r3, r2
 800bda8:	4a3c      	ldr	r2, [pc, #240]	; (800be9c <UTIL_SEQ_Run+0x1dc>)
 800bdaa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bdac:	2302      	movs	r3, #2
 800bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb0:	e013      	b.n	800bdda <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4a3d      	ldr	r2, [pc, #244]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bdb8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bdbc:	4b3c      	ldr	r3, [pc, #240]	; (800beb0 <UTIL_SEQ_Run+0x1f0>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc6:	43da      	mvns	r2, r3
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	400a      	ands	r2, r1
 800bdce:	4937      	ldr	r1, [pc, #220]	; (800beac <UTIL_SEQ_Run+0x1ec>)
 800bdd0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e8      	bne.n	800bdb2 <UTIL_SEQ_Run+0xf2>
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f383 8810 	msr	PRIMASK, r3
}
 800bdea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bdec:	4b30      	ldr	r3, [pc, #192]	; (800beb0 <UTIL_SEQ_Run+0x1f0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a30      	ldr	r2, [pc, #192]	; (800beb4 <UTIL_SEQ_Run+0x1f4>)
 800bdf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf6:	4798      	blx	r3

    local_taskset = TaskSet;
 800bdf8:	4b28      	ldr	r3, [pc, #160]	; (800be9c <UTIL_SEQ_Run+0x1dc>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800bdfe:	4b28      	ldr	r3, [pc, #160]	; (800bea0 <UTIL_SEQ_Run+0x1e0>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800be04:	4b27      	ldr	r3, [pc, #156]	; (800bea4 <UTIL_SEQ_Run+0x1e4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800be0a:	4b27      	ldr	r3, [pc, #156]	; (800bea8 <UTIL_SEQ_Run+0x1e8>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800be10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	401a      	ands	r2, r3
 800be16:	4b20      	ldr	r3, [pc, #128]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4013      	ands	r3, r2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d005      	beq.n	800be2c <UTIL_SEQ_Run+0x16c>
 800be20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	4013      	ands	r3, r2
 800be26:	2b00      	cmp	r3, #0
 800be28:	f43f af64 	beq.w	800bcf4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800be2c:	4b20      	ldr	r3, [pc, #128]	; (800beb0 <UTIL_SEQ_Run+0x1f0>)
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295
 800be32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800be34:	f000 f938 	bl	800c0a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be38:	f3ef 8310 	mrs	r3, PRIMASK
 800be3c:	613b      	str	r3, [r7, #16]
  return(result);
 800be3e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800be40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800be42:	b672      	cpsid	i
}
 800be44:	bf00      	nop
  local_taskset = TaskSet;
 800be46:	4b15      	ldr	r3, [pc, #84]	; (800be9c <UTIL_SEQ_Run+0x1dc>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800be4c:	4b14      	ldr	r3, [pc, #80]	; (800bea0 <UTIL_SEQ_Run+0x1e0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800be52:	4b14      	ldr	r3, [pc, #80]	; (800bea4 <UTIL_SEQ_Run+0x1e4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800be58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	401a      	ands	r2, r3
 800be5e:	4b0e      	ldr	r3, [pc, #56]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4013      	ands	r3, r2
 800be64:	2b00      	cmp	r3, #0
 800be66:	d107      	bne.n	800be78 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800be68:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <UTIL_SEQ_Run+0x1e8>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	4013      	ands	r3, r2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800be74:	f7f5 fb85 	bl	8001582 <UTIL_SEQ_Idle>
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f383 8810 	msr	PRIMASK, r3
}
 800be82:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800be84:	f000 f917 	bl	800c0b6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800be88:	4a03      	ldr	r2, [pc, #12]	; (800be98 <UTIL_SEQ_Run+0x1d8>)
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	6013      	str	r3, [r2, #0]

  return;
 800be8e:	bf00      	nop
}
 800be90:	3740      	adds	r7, #64	; 0x40
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	2000002c 	.word	0x2000002c
 800be9c:	2000117c 	.word	0x2000117c
 800bea0:	20001180 	.word	0x20001180
 800bea4:	20000028 	.word	0x20000028
 800bea8:	20001184 	.word	0x20001184
 800beac:	2000120c 	.word	0x2000120c
 800beb0:	20001188 	.word	0x20001188
 800beb4:	2000118c 	.word	0x2000118c

0800beb8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bec4:	f3ef 8310 	mrs	r3, PRIMASK
 800bec8:	617b      	str	r3, [r7, #20]
  return(result);
 800beca:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800becc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bece:	b672      	cpsid	i
}
 800bed0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f000 f8f6 	bl	800c0c4 <SEQ_BitPosition>
 800bed8:	4603      	mov	r3, r0
 800beda:	4619      	mov	r1, r3
 800bedc:	4a06      	ldr	r2, [pc, #24]	; (800bef8 <UTIL_SEQ_RegTask+0x40>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	f383 8810 	msr	PRIMASK, r3
}
 800beee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bef0:	bf00      	nop
}
 800bef2:	3720      	adds	r7, #32
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	2000118c 	.word	0x2000118c

0800befc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800befc:	b480      	push	{r7}
 800befe:	b087      	sub	sp, #28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf06:	f3ef 8310 	mrs	r3, PRIMASK
 800bf0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf10:	b672      	cpsid	i
}
 800bf12:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bf14:	4b0d      	ldr	r3, [pc, #52]	; (800bf4c <UTIL_SEQ_SetTask+0x50>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	4a0b      	ldr	r2, [pc, #44]	; (800bf4c <UTIL_SEQ_SetTask+0x50>)
 800bf1e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bf20:	4a0b      	ldr	r2, [pc, #44]	; (800bf50 <UTIL_SEQ_SetTask+0x54>)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	4908      	ldr	r1, [pc, #32]	; (800bf50 <UTIL_SEQ_SetTask+0x54>)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f383 8810 	msr	PRIMASK, r3
}
 800bf3e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bf40:	bf00      	nop
}
 800bf42:	371c      	adds	r7, #28
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	2000117c 	.word	0x2000117c
 800bf50:	2000120c 	.word	0x2000120c

0800bf54 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf5c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf60:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf62:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf66:	b672      	cpsid	i
}
 800bf68:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	43da      	mvns	r2, r3
 800bf6e:	4b08      	ldr	r3, [pc, #32]	; (800bf90 <UTIL_SEQ_PauseTask+0x3c>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4013      	ands	r3, r2
 800bf74:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <UTIL_SEQ_PauseTask+0x3c>)
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f383 8810 	msr	PRIMASK, r3
}
 800bf82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bf84:	bf00      	nop
}
 800bf86:	371c      	adds	r7, #28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	20000028 	.word	0x20000028

0800bf94 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf9c:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bfa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfa6:	b672      	cpsid	i
}
 800bfa8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <UTIL_SEQ_ResumeTask+0x3c>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	4a07      	ldr	r2, [pc, #28]	; (800bfd0 <UTIL_SEQ_ResumeTask+0x3c>)
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f383 8810 	msr	PRIMASK, r3
}
 800bfc0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bfc2:	bf00      	nop
}
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	20000028 	.word	0x20000028

0800bfd4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfdc:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bfe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfe6:	b672      	cpsid	i
}
 800bfe8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800bfea:	4b09      	ldr	r3, [pc, #36]	; (800c010 <UTIL_SEQ_SetEvt+0x3c>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	4a07      	ldr	r2, [pc, #28]	; (800c010 <UTIL_SEQ_SetEvt+0x3c>)
 800bff4:	6013      	str	r3, [r2, #0]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f383 8810 	msr	PRIMASK, r3
}
 800c000:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c002:	bf00      	nop
}
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20001180 	.word	0x20001180

0800c014 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c01c:	4b1f      	ldr	r3, [pc, #124]	; (800c09c <UTIL_SEQ_WaitEvt+0x88>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c022:	4b1e      	ldr	r3, [pc, #120]	; (800c09c <UTIL_SEQ_WaitEvt+0x88>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d102      	bne.n	800c032 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c02c:	2300      	movs	r3, #0
 800c02e:	61fb      	str	r3, [r7, #28]
 800c030:	e005      	b.n	800c03e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c032:	4b1a      	ldr	r3, [pc, #104]	; (800c09c <UTIL_SEQ_WaitEvt+0x88>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2201      	movs	r2, #1
 800c038:	fa02 f303 	lsl.w	r3, r2, r3
 800c03c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c03e:	4b18      	ldr	r3, [pc, #96]	; (800c0a0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c044:	4a16      	ldr	r2, [pc, #88]	; (800c0a0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c04a:	e003      	b.n	800c054 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	69f8      	ldr	r0, [r7, #28]
 800c050:	f7f5 fa9e 	bl	8001590 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c054:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <UTIL_SEQ_WaitEvt+0x90>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4013      	ands	r3, r2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0f5      	beq.n	800c04c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c060:	4a0e      	ldr	r2, [pc, #56]	; (800c09c <UTIL_SEQ_WaitEvt+0x88>)
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c066:	f3ef 8310 	mrs	r3, PRIMASK
 800c06a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c06c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c06e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c070:	b672      	cpsid	i
}
 800c072:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	43da      	mvns	r2, r3
 800c078:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <UTIL_SEQ_WaitEvt+0x90>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4013      	ands	r3, r2
 800c07e:	4a09      	ldr	r2, [pc, #36]	; (800c0a4 <UTIL_SEQ_WaitEvt+0x90>)
 800c080:	6013      	str	r3, [r2, #0]
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f383 8810 	msr	PRIMASK, r3
}
 800c08c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c08e:	4a04      	ldr	r2, [pc, #16]	; (800c0a0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	6013      	str	r3, [r2, #0]
  return;
 800c094:	bf00      	nop
}
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	20001188 	.word	0x20001188
 800c0a0:	20001184 	.word	0x20001184
 800c0a4:	20001180 	.word	0x20001180

0800c0a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c0ac:	bf00      	nop
}
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c0ba:	bf00      	nop
}
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	0c1b      	lsrs	r3, r3, #16
 800c0d8:	041b      	lsls	r3, r3, #16
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <SEQ_BitPosition+0x24>
 800c0de:	2310      	movs	r3, #16
 800c0e0:	73fb      	strb	r3, [r7, #15]
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	041b      	lsls	r3, r3, #16
 800c0e6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d105      	bne.n	800c0fe <SEQ_BitPosition+0x3a>
 800c0f2:	7bfb      	ldrb	r3, [r7, #15]
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	73fb      	strb	r3, [r7, #15]
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	021b      	lsls	r3, r3, #8
 800c0fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d105      	bne.n	800c114 <SEQ_BitPosition+0x50>
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	3304      	adds	r3, #4
 800c10c:	73fb      	strb	r3, [r7, #15]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	011b      	lsls	r3, r3, #4
 800c112:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	0f1b      	lsrs	r3, r3, #28
 800c118:	4a07      	ldr	r2, [pc, #28]	; (800c138 <SEQ_BitPosition+0x74>)
 800c11a:	5cd2      	ldrb	r2, [r2, r3]
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	4413      	add	r3, r2
 800c120:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c122:	7bfb      	ldrb	r3, [r7, #15]
 800c124:	f1c3 031f 	rsb	r3, r3, #31
 800c128:	b2db      	uxtb	r3, r3
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	0800d4f8 	.word	0x0800d4f8

0800c13c <__errno>:
 800c13c:	4b01      	ldr	r3, [pc, #4]	; (800c144 <__errno+0x8>)
 800c13e:	6818      	ldr	r0, [r3, #0]
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	20000030 	.word	0x20000030

0800c148 <__libc_init_array>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	4d0d      	ldr	r5, [pc, #52]	; (800c180 <__libc_init_array+0x38>)
 800c14c:	4c0d      	ldr	r4, [pc, #52]	; (800c184 <__libc_init_array+0x3c>)
 800c14e:	1b64      	subs	r4, r4, r5
 800c150:	10a4      	asrs	r4, r4, #2
 800c152:	2600      	movs	r6, #0
 800c154:	42a6      	cmp	r6, r4
 800c156:	d109      	bne.n	800c16c <__libc_init_array+0x24>
 800c158:	4d0b      	ldr	r5, [pc, #44]	; (800c188 <__libc_init_array+0x40>)
 800c15a:	4c0c      	ldr	r4, [pc, #48]	; (800c18c <__libc_init_array+0x44>)
 800c15c:	f001 f866 	bl	800d22c <_init>
 800c160:	1b64      	subs	r4, r4, r5
 800c162:	10a4      	asrs	r4, r4, #2
 800c164:	2600      	movs	r6, #0
 800c166:	42a6      	cmp	r6, r4
 800c168:	d105      	bne.n	800c176 <__libc_init_array+0x2e>
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c170:	4798      	blx	r3
 800c172:	3601      	adds	r6, #1
 800c174:	e7ee      	b.n	800c154 <__libc_init_array+0xc>
 800c176:	f855 3b04 	ldr.w	r3, [r5], #4
 800c17a:	4798      	blx	r3
 800c17c:	3601      	adds	r6, #1
 800c17e:	e7f2      	b.n	800c166 <__libc_init_array+0x1e>
 800c180:	0800d658 	.word	0x0800d658
 800c184:	0800d658 	.word	0x0800d658
 800c188:	0800d658 	.word	0x0800d658
 800c18c:	0800d65c 	.word	0x0800d65c

0800c190 <memcpy>:
 800c190:	440a      	add	r2, r1
 800c192:	4291      	cmp	r1, r2
 800c194:	f100 33ff 	add.w	r3, r0, #4294967295
 800c198:	d100      	bne.n	800c19c <memcpy+0xc>
 800c19a:	4770      	bx	lr
 800c19c:	b510      	push	{r4, lr}
 800c19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a6:	4291      	cmp	r1, r2
 800c1a8:	d1f9      	bne.n	800c19e <memcpy+0xe>
 800c1aa:	bd10      	pop	{r4, pc}

0800c1ac <memset>:
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memset+0xa>
 800c1b4:	4770      	bx	lr
 800c1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ba:	e7f9      	b.n	800c1b0 <memset+0x4>

0800c1bc <rand>:
 800c1bc:	4b16      	ldr	r3, [pc, #88]	; (800c218 <rand+0x5c>)
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	681c      	ldr	r4, [r3, #0]
 800c1c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1c4:	b9b3      	cbnz	r3, 800c1f4 <rand+0x38>
 800c1c6:	2018      	movs	r0, #24
 800c1c8:	f000 f95e 	bl	800c488 <malloc>
 800c1cc:	63a0      	str	r0, [r4, #56]	; 0x38
 800c1ce:	b928      	cbnz	r0, 800c1dc <rand+0x20>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	4b12      	ldr	r3, [pc, #72]	; (800c21c <rand+0x60>)
 800c1d4:	4812      	ldr	r0, [pc, #72]	; (800c220 <rand+0x64>)
 800c1d6:	214e      	movs	r1, #78	; 0x4e
 800c1d8:	f000 f82e 	bl	800c238 <__assert_func>
 800c1dc:	4a11      	ldr	r2, [pc, #68]	; (800c224 <rand+0x68>)
 800c1de:	4b12      	ldr	r3, [pc, #72]	; (800c228 <rand+0x6c>)
 800c1e0:	e9c0 2300 	strd	r2, r3, [r0]
 800c1e4:	4b11      	ldr	r3, [pc, #68]	; (800c22c <rand+0x70>)
 800c1e6:	6083      	str	r3, [r0, #8]
 800c1e8:	230b      	movs	r3, #11
 800c1ea:	8183      	strh	r3, [r0, #12]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c1f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c1f6:	4a0e      	ldr	r2, [pc, #56]	; (800c230 <rand+0x74>)
 800c1f8:	6920      	ldr	r0, [r4, #16]
 800c1fa:	6963      	ldr	r3, [r4, #20]
 800c1fc:	490d      	ldr	r1, [pc, #52]	; (800c234 <rand+0x78>)
 800c1fe:	4342      	muls	r2, r0
 800c200:	fb01 2203 	mla	r2, r1, r3, r2
 800c204:	fba0 0101 	umull	r0, r1, r0, r1
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	eb42 0001 	adc.w	r0, r2, r1
 800c20e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800c212:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c216:	bd10      	pop	{r4, pc}
 800c218:	20000030 	.word	0x20000030
 800c21c:	0800d50c 	.word	0x0800d50c
 800c220:	0800d523 	.word	0x0800d523
 800c224:	abcd330e 	.word	0xabcd330e
 800c228:	e66d1234 	.word	0xe66d1234
 800c22c:	0005deec 	.word	0x0005deec
 800c230:	5851f42d 	.word	0x5851f42d
 800c234:	4c957f2d 	.word	0x4c957f2d

0800c238 <__assert_func>:
 800c238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c23a:	4614      	mov	r4, r2
 800c23c:	461a      	mov	r2, r3
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <__assert_func+0x2c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4605      	mov	r5, r0
 800c244:	68d8      	ldr	r0, [r3, #12]
 800c246:	b14c      	cbz	r4, 800c25c <__assert_func+0x24>
 800c248:	4b07      	ldr	r3, [pc, #28]	; (800c268 <__assert_func+0x30>)
 800c24a:	9100      	str	r1, [sp, #0]
 800c24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c250:	4906      	ldr	r1, [pc, #24]	; (800c26c <__assert_func+0x34>)
 800c252:	462b      	mov	r3, r5
 800c254:	f000 f8e4 	bl	800c420 <fiprintf>
 800c258:	f000 fe12 	bl	800ce80 <abort>
 800c25c:	4b04      	ldr	r3, [pc, #16]	; (800c270 <__assert_func+0x38>)
 800c25e:	461c      	mov	r4, r3
 800c260:	e7f3      	b.n	800c24a <__assert_func+0x12>
 800c262:	bf00      	nop
 800c264:	20000030 	.word	0x20000030
 800c268:	0800d57e 	.word	0x0800d57e
 800c26c:	0800d58b 	.word	0x0800d58b
 800c270:	0800d5b9 	.word	0x0800d5b9

0800c274 <std>:
 800c274:	2300      	movs	r3, #0
 800c276:	b510      	push	{r4, lr}
 800c278:	4604      	mov	r4, r0
 800c27a:	e9c0 3300 	strd	r3, r3, [r0]
 800c27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c282:	6083      	str	r3, [r0, #8]
 800c284:	8181      	strh	r1, [r0, #12]
 800c286:	6643      	str	r3, [r0, #100]	; 0x64
 800c288:	81c2      	strh	r2, [r0, #14]
 800c28a:	6183      	str	r3, [r0, #24]
 800c28c:	4619      	mov	r1, r3
 800c28e:	2208      	movs	r2, #8
 800c290:	305c      	adds	r0, #92	; 0x5c
 800c292:	f7ff ff8b 	bl	800c1ac <memset>
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <std+0x38>)
 800c298:	6263      	str	r3, [r4, #36]	; 0x24
 800c29a:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <std+0x3c>)
 800c29c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c29e:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <std+0x40>)
 800c2a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2a2:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <std+0x44>)
 800c2a4:	6224      	str	r4, [r4, #32]
 800c2a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c2a8:	bd10      	pop	{r4, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800cc55 	.word	0x0800cc55
 800c2b0:	0800cc77 	.word	0x0800cc77
 800c2b4:	0800ccaf 	.word	0x0800ccaf
 800c2b8:	0800ccd3 	.word	0x0800ccd3

0800c2bc <_cleanup_r>:
 800c2bc:	4901      	ldr	r1, [pc, #4]	; (800c2c4 <_cleanup_r+0x8>)
 800c2be:	f000 b8c1 	b.w	800c444 <_fwalk_reent>
 800c2c2:	bf00      	nop
 800c2c4:	0800cfbd 	.word	0x0800cfbd

0800c2c8 <__sfmoreglue>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	2268      	movs	r2, #104	; 0x68
 800c2cc:	1e4d      	subs	r5, r1, #1
 800c2ce:	4355      	muls	r5, r2
 800c2d0:	460e      	mov	r6, r1
 800c2d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2d6:	f000 f94b 	bl	800c570 <_malloc_r>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	b140      	cbz	r0, 800c2f0 <__sfmoreglue+0x28>
 800c2de:	2100      	movs	r1, #0
 800c2e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c2e4:	300c      	adds	r0, #12
 800c2e6:	60a0      	str	r0, [r4, #8]
 800c2e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2ec:	f7ff ff5e 	bl	800c1ac <memset>
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}

0800c2f4 <__sfp_lock_acquire>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	; (800c2fc <__sfp_lock_acquire+0x8>)
 800c2f6:	f000 b8c5 	b.w	800c484 <__retarget_lock_acquire_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	2000121d 	.word	0x2000121d

0800c300 <__sfp_lock_release>:
 800c300:	4801      	ldr	r0, [pc, #4]	; (800c308 <__sfp_lock_release+0x8>)
 800c302:	f000 b8c0 	b.w	800c486 <__retarget_lock_release_recursive>
 800c306:	bf00      	nop
 800c308:	2000121d 	.word	0x2000121d

0800c30c <__sinit_lock_acquire>:
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__sinit_lock_acquire+0x8>)
 800c30e:	f000 b8b9 	b.w	800c484 <__retarget_lock_acquire_recursive>
 800c312:	bf00      	nop
 800c314:	2000121e 	.word	0x2000121e

0800c318 <__sinit_lock_release>:
 800c318:	4801      	ldr	r0, [pc, #4]	; (800c320 <__sinit_lock_release+0x8>)
 800c31a:	f000 b8b4 	b.w	800c486 <__retarget_lock_release_recursive>
 800c31e:	bf00      	nop
 800c320:	2000121e 	.word	0x2000121e

0800c324 <__sinit>:
 800c324:	b510      	push	{r4, lr}
 800c326:	4604      	mov	r4, r0
 800c328:	f7ff fff0 	bl	800c30c <__sinit_lock_acquire>
 800c32c:	69a3      	ldr	r3, [r4, #24]
 800c32e:	b11b      	cbz	r3, 800c338 <__sinit+0x14>
 800c330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c334:	f7ff bff0 	b.w	800c318 <__sinit_lock_release>
 800c338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c33c:	6523      	str	r3, [r4, #80]	; 0x50
 800c33e:	4b13      	ldr	r3, [pc, #76]	; (800c38c <__sinit+0x68>)
 800c340:	4a13      	ldr	r2, [pc, #76]	; (800c390 <__sinit+0x6c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	62a2      	str	r2, [r4, #40]	; 0x28
 800c346:	42a3      	cmp	r3, r4
 800c348:	bf04      	itt	eq
 800c34a:	2301      	moveq	r3, #1
 800c34c:	61a3      	streq	r3, [r4, #24]
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 f820 	bl	800c394 <__sfp>
 800c354:	6060      	str	r0, [r4, #4]
 800c356:	4620      	mov	r0, r4
 800c358:	f000 f81c 	bl	800c394 <__sfp>
 800c35c:	60a0      	str	r0, [r4, #8]
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 f818 	bl	800c394 <__sfp>
 800c364:	2200      	movs	r2, #0
 800c366:	60e0      	str	r0, [r4, #12]
 800c368:	2104      	movs	r1, #4
 800c36a:	6860      	ldr	r0, [r4, #4]
 800c36c:	f7ff ff82 	bl	800c274 <std>
 800c370:	68a0      	ldr	r0, [r4, #8]
 800c372:	2201      	movs	r2, #1
 800c374:	2109      	movs	r1, #9
 800c376:	f7ff ff7d 	bl	800c274 <std>
 800c37a:	68e0      	ldr	r0, [r4, #12]
 800c37c:	2202      	movs	r2, #2
 800c37e:	2112      	movs	r1, #18
 800c380:	f7ff ff78 	bl	800c274 <std>
 800c384:	2301      	movs	r3, #1
 800c386:	61a3      	str	r3, [r4, #24]
 800c388:	e7d2      	b.n	800c330 <__sinit+0xc>
 800c38a:	bf00      	nop
 800c38c:	0800d508 	.word	0x0800d508
 800c390:	0800c2bd 	.word	0x0800c2bd

0800c394 <__sfp>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	4607      	mov	r7, r0
 800c398:	f7ff ffac 	bl	800c2f4 <__sfp_lock_acquire>
 800c39c:	4b1e      	ldr	r3, [pc, #120]	; (800c418 <__sfp+0x84>)
 800c39e:	681e      	ldr	r6, [r3, #0]
 800c3a0:	69b3      	ldr	r3, [r6, #24]
 800c3a2:	b913      	cbnz	r3, 800c3aa <__sfp+0x16>
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff ffbd 	bl	800c324 <__sinit>
 800c3aa:	3648      	adds	r6, #72	; 0x48
 800c3ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	d503      	bpl.n	800c3bc <__sfp+0x28>
 800c3b4:	6833      	ldr	r3, [r6, #0]
 800c3b6:	b30b      	cbz	r3, 800c3fc <__sfp+0x68>
 800c3b8:	6836      	ldr	r6, [r6, #0]
 800c3ba:	e7f7      	b.n	800c3ac <__sfp+0x18>
 800c3bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3c0:	b9d5      	cbnz	r5, 800c3f8 <__sfp+0x64>
 800c3c2:	4b16      	ldr	r3, [pc, #88]	; (800c41c <__sfp+0x88>)
 800c3c4:	60e3      	str	r3, [r4, #12]
 800c3c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c3cc:	f000 f859 	bl	800c482 <__retarget_lock_init_recursive>
 800c3d0:	f7ff ff96 	bl	800c300 <__sfp_lock_release>
 800c3d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3dc:	6025      	str	r5, [r4, #0]
 800c3de:	61a5      	str	r5, [r4, #24]
 800c3e0:	2208      	movs	r2, #8
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3e8:	f7ff fee0 	bl	800c1ac <memset>
 800c3ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f8:	3468      	adds	r4, #104	; 0x68
 800c3fa:	e7d9      	b.n	800c3b0 <__sfp+0x1c>
 800c3fc:	2104      	movs	r1, #4
 800c3fe:	4638      	mov	r0, r7
 800c400:	f7ff ff62 	bl	800c2c8 <__sfmoreglue>
 800c404:	4604      	mov	r4, r0
 800c406:	6030      	str	r0, [r6, #0]
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1d5      	bne.n	800c3b8 <__sfp+0x24>
 800c40c:	f7ff ff78 	bl	800c300 <__sfp_lock_release>
 800c410:	230c      	movs	r3, #12
 800c412:	603b      	str	r3, [r7, #0]
 800c414:	e7ee      	b.n	800c3f4 <__sfp+0x60>
 800c416:	bf00      	nop
 800c418:	0800d508 	.word	0x0800d508
 800c41c:	ffff0001 	.word	0xffff0001

0800c420 <fiprintf>:
 800c420:	b40e      	push	{r1, r2, r3}
 800c422:	b503      	push	{r0, r1, lr}
 800c424:	4601      	mov	r1, r0
 800c426:	ab03      	add	r3, sp, #12
 800c428:	4805      	ldr	r0, [pc, #20]	; (800c440 <fiprintf+0x20>)
 800c42a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c42e:	6800      	ldr	r0, [r0, #0]
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	f000 f93b 	bl	800c6ac <_vfiprintf_r>
 800c436:	b002      	add	sp, #8
 800c438:	f85d eb04 	ldr.w	lr, [sp], #4
 800c43c:	b003      	add	sp, #12
 800c43e:	4770      	bx	lr
 800c440:	20000030 	.word	0x20000030

0800c444 <_fwalk_reent>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	4606      	mov	r6, r0
 800c44a:	4688      	mov	r8, r1
 800c44c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c450:	2700      	movs	r7, #0
 800c452:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c456:	f1b9 0901 	subs.w	r9, r9, #1
 800c45a:	d505      	bpl.n	800c468 <_fwalk_reent+0x24>
 800c45c:	6824      	ldr	r4, [r4, #0]
 800c45e:	2c00      	cmp	r4, #0
 800c460:	d1f7      	bne.n	800c452 <_fwalk_reent+0xe>
 800c462:	4638      	mov	r0, r7
 800c464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c468:	89ab      	ldrh	r3, [r5, #12]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d907      	bls.n	800c47e <_fwalk_reent+0x3a>
 800c46e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c472:	3301      	adds	r3, #1
 800c474:	d003      	beq.n	800c47e <_fwalk_reent+0x3a>
 800c476:	4629      	mov	r1, r5
 800c478:	4630      	mov	r0, r6
 800c47a:	47c0      	blx	r8
 800c47c:	4307      	orrs	r7, r0
 800c47e:	3568      	adds	r5, #104	; 0x68
 800c480:	e7e9      	b.n	800c456 <_fwalk_reent+0x12>

0800c482 <__retarget_lock_init_recursive>:
 800c482:	4770      	bx	lr

0800c484 <__retarget_lock_acquire_recursive>:
 800c484:	4770      	bx	lr

0800c486 <__retarget_lock_release_recursive>:
 800c486:	4770      	bx	lr

0800c488 <malloc>:
 800c488:	4b02      	ldr	r3, [pc, #8]	; (800c494 <malloc+0xc>)
 800c48a:	4601      	mov	r1, r0
 800c48c:	6818      	ldr	r0, [r3, #0]
 800c48e:	f000 b86f 	b.w	800c570 <_malloc_r>
 800c492:	bf00      	nop
 800c494:	20000030 	.word	0x20000030

0800c498 <_free_r>:
 800c498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c49a:	2900      	cmp	r1, #0
 800c49c:	d044      	beq.n	800c528 <_free_r+0x90>
 800c49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4a2:	9001      	str	r0, [sp, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c4aa:	bfb8      	it	lt
 800c4ac:	18e4      	addlt	r4, r4, r3
 800c4ae:	f000 fe39 	bl	800d124 <__malloc_lock>
 800c4b2:	4a1e      	ldr	r2, [pc, #120]	; (800c52c <_free_r+0x94>)
 800c4b4:	9801      	ldr	r0, [sp, #4]
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	b933      	cbnz	r3, 800c4c8 <_free_r+0x30>
 800c4ba:	6063      	str	r3, [r4, #4]
 800c4bc:	6014      	str	r4, [r2, #0]
 800c4be:	b003      	add	sp, #12
 800c4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4c4:	f000 be34 	b.w	800d130 <__malloc_unlock>
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d908      	bls.n	800c4de <_free_r+0x46>
 800c4cc:	6825      	ldr	r5, [r4, #0]
 800c4ce:	1961      	adds	r1, r4, r5
 800c4d0:	428b      	cmp	r3, r1
 800c4d2:	bf01      	itttt	eq
 800c4d4:	6819      	ldreq	r1, [r3, #0]
 800c4d6:	685b      	ldreq	r3, [r3, #4]
 800c4d8:	1949      	addeq	r1, r1, r5
 800c4da:	6021      	streq	r1, [r4, #0]
 800c4dc:	e7ed      	b.n	800c4ba <_free_r+0x22>
 800c4de:	461a      	mov	r2, r3
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	b10b      	cbz	r3, 800c4e8 <_free_r+0x50>
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	d9fa      	bls.n	800c4de <_free_r+0x46>
 800c4e8:	6811      	ldr	r1, [r2, #0]
 800c4ea:	1855      	adds	r5, r2, r1
 800c4ec:	42a5      	cmp	r5, r4
 800c4ee:	d10b      	bne.n	800c508 <_free_r+0x70>
 800c4f0:	6824      	ldr	r4, [r4, #0]
 800c4f2:	4421      	add	r1, r4
 800c4f4:	1854      	adds	r4, r2, r1
 800c4f6:	42a3      	cmp	r3, r4
 800c4f8:	6011      	str	r1, [r2, #0]
 800c4fa:	d1e0      	bne.n	800c4be <_free_r+0x26>
 800c4fc:	681c      	ldr	r4, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	6053      	str	r3, [r2, #4]
 800c502:	4421      	add	r1, r4
 800c504:	6011      	str	r1, [r2, #0]
 800c506:	e7da      	b.n	800c4be <_free_r+0x26>
 800c508:	d902      	bls.n	800c510 <_free_r+0x78>
 800c50a:	230c      	movs	r3, #12
 800c50c:	6003      	str	r3, [r0, #0]
 800c50e:	e7d6      	b.n	800c4be <_free_r+0x26>
 800c510:	6825      	ldr	r5, [r4, #0]
 800c512:	1961      	adds	r1, r4, r5
 800c514:	428b      	cmp	r3, r1
 800c516:	bf04      	itt	eq
 800c518:	6819      	ldreq	r1, [r3, #0]
 800c51a:	685b      	ldreq	r3, [r3, #4]
 800c51c:	6063      	str	r3, [r4, #4]
 800c51e:	bf04      	itt	eq
 800c520:	1949      	addeq	r1, r1, r5
 800c522:	6021      	streq	r1, [r4, #0]
 800c524:	6054      	str	r4, [r2, #4]
 800c526:	e7ca      	b.n	800c4be <_free_r+0x26>
 800c528:	b003      	add	sp, #12
 800c52a:	bd30      	pop	{r4, r5, pc}
 800c52c:	20001220 	.word	0x20001220

0800c530 <sbrk_aligned>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	4e0e      	ldr	r6, [pc, #56]	; (800c56c <sbrk_aligned+0x3c>)
 800c534:	460c      	mov	r4, r1
 800c536:	6831      	ldr	r1, [r6, #0]
 800c538:	4605      	mov	r5, r0
 800c53a:	b911      	cbnz	r1, 800c542 <sbrk_aligned+0x12>
 800c53c:	f000 fb7a 	bl	800cc34 <_sbrk_r>
 800c540:	6030      	str	r0, [r6, #0]
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 fb75 	bl	800cc34 <_sbrk_r>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d00a      	beq.n	800c564 <sbrk_aligned+0x34>
 800c54e:	1cc4      	adds	r4, r0, #3
 800c550:	f024 0403 	bic.w	r4, r4, #3
 800c554:	42a0      	cmp	r0, r4
 800c556:	d007      	beq.n	800c568 <sbrk_aligned+0x38>
 800c558:	1a21      	subs	r1, r4, r0
 800c55a:	4628      	mov	r0, r5
 800c55c:	f000 fb6a 	bl	800cc34 <_sbrk_r>
 800c560:	3001      	adds	r0, #1
 800c562:	d101      	bne.n	800c568 <sbrk_aligned+0x38>
 800c564:	f04f 34ff 	mov.w	r4, #4294967295
 800c568:	4620      	mov	r0, r4
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	20001224 	.word	0x20001224

0800c570 <_malloc_r>:
 800c570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c574:	1ccd      	adds	r5, r1, #3
 800c576:	f025 0503 	bic.w	r5, r5, #3
 800c57a:	3508      	adds	r5, #8
 800c57c:	2d0c      	cmp	r5, #12
 800c57e:	bf38      	it	cc
 800c580:	250c      	movcc	r5, #12
 800c582:	2d00      	cmp	r5, #0
 800c584:	4607      	mov	r7, r0
 800c586:	db01      	blt.n	800c58c <_malloc_r+0x1c>
 800c588:	42a9      	cmp	r1, r5
 800c58a:	d905      	bls.n	800c598 <_malloc_r+0x28>
 800c58c:	230c      	movs	r3, #12
 800c58e:	603b      	str	r3, [r7, #0]
 800c590:	2600      	movs	r6, #0
 800c592:	4630      	mov	r0, r6
 800c594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c598:	4e2e      	ldr	r6, [pc, #184]	; (800c654 <_malloc_r+0xe4>)
 800c59a:	f000 fdc3 	bl	800d124 <__malloc_lock>
 800c59e:	6833      	ldr	r3, [r6, #0]
 800c5a0:	461c      	mov	r4, r3
 800c5a2:	bb34      	cbnz	r4, 800c5f2 <_malloc_r+0x82>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	f7ff ffc2 	bl	800c530 <sbrk_aligned>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	d14d      	bne.n	800c64e <_malloc_r+0xde>
 800c5b2:	6834      	ldr	r4, [r6, #0]
 800c5b4:	4626      	mov	r6, r4
 800c5b6:	2e00      	cmp	r6, #0
 800c5b8:	d140      	bne.n	800c63c <_malloc_r+0xcc>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4638      	mov	r0, r7
 800c5c0:	eb04 0803 	add.w	r8, r4, r3
 800c5c4:	f000 fb36 	bl	800cc34 <_sbrk_r>
 800c5c8:	4580      	cmp	r8, r0
 800c5ca:	d13a      	bne.n	800c642 <_malloc_r+0xd2>
 800c5cc:	6821      	ldr	r1, [r4, #0]
 800c5ce:	3503      	adds	r5, #3
 800c5d0:	1a6d      	subs	r5, r5, r1
 800c5d2:	f025 0503 	bic.w	r5, r5, #3
 800c5d6:	3508      	adds	r5, #8
 800c5d8:	2d0c      	cmp	r5, #12
 800c5da:	bf38      	it	cc
 800c5dc:	250c      	movcc	r5, #12
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ffa5 	bl	800c530 <sbrk_aligned>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	d02b      	beq.n	800c642 <_malloc_r+0xd2>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	442b      	add	r3, r5
 800c5ee:	6023      	str	r3, [r4, #0]
 800c5f0:	e00e      	b.n	800c610 <_malloc_r+0xa0>
 800c5f2:	6822      	ldr	r2, [r4, #0]
 800c5f4:	1b52      	subs	r2, r2, r5
 800c5f6:	d41e      	bmi.n	800c636 <_malloc_r+0xc6>
 800c5f8:	2a0b      	cmp	r2, #11
 800c5fa:	d916      	bls.n	800c62a <_malloc_r+0xba>
 800c5fc:	1961      	adds	r1, r4, r5
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	6025      	str	r5, [r4, #0]
 800c602:	bf18      	it	ne
 800c604:	6059      	strne	r1, [r3, #4]
 800c606:	6863      	ldr	r3, [r4, #4]
 800c608:	bf08      	it	eq
 800c60a:	6031      	streq	r1, [r6, #0]
 800c60c:	5162      	str	r2, [r4, r5]
 800c60e:	604b      	str	r3, [r1, #4]
 800c610:	4638      	mov	r0, r7
 800c612:	f104 060b 	add.w	r6, r4, #11
 800c616:	f000 fd8b 	bl	800d130 <__malloc_unlock>
 800c61a:	f026 0607 	bic.w	r6, r6, #7
 800c61e:	1d23      	adds	r3, r4, #4
 800c620:	1af2      	subs	r2, r6, r3
 800c622:	d0b6      	beq.n	800c592 <_malloc_r+0x22>
 800c624:	1b9b      	subs	r3, r3, r6
 800c626:	50a3      	str	r3, [r4, r2]
 800c628:	e7b3      	b.n	800c592 <_malloc_r+0x22>
 800c62a:	6862      	ldr	r2, [r4, #4]
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	bf0c      	ite	eq
 800c630:	6032      	streq	r2, [r6, #0]
 800c632:	605a      	strne	r2, [r3, #4]
 800c634:	e7ec      	b.n	800c610 <_malloc_r+0xa0>
 800c636:	4623      	mov	r3, r4
 800c638:	6864      	ldr	r4, [r4, #4]
 800c63a:	e7b2      	b.n	800c5a2 <_malloc_r+0x32>
 800c63c:	4634      	mov	r4, r6
 800c63e:	6876      	ldr	r6, [r6, #4]
 800c640:	e7b9      	b.n	800c5b6 <_malloc_r+0x46>
 800c642:	230c      	movs	r3, #12
 800c644:	603b      	str	r3, [r7, #0]
 800c646:	4638      	mov	r0, r7
 800c648:	f000 fd72 	bl	800d130 <__malloc_unlock>
 800c64c:	e7a1      	b.n	800c592 <_malloc_r+0x22>
 800c64e:	6025      	str	r5, [r4, #0]
 800c650:	e7de      	b.n	800c610 <_malloc_r+0xa0>
 800c652:	bf00      	nop
 800c654:	20001220 	.word	0x20001220

0800c658 <__sfputc_r>:
 800c658:	6893      	ldr	r3, [r2, #8]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	b410      	push	{r4}
 800c660:	6093      	str	r3, [r2, #8]
 800c662:	da08      	bge.n	800c676 <__sfputc_r+0x1e>
 800c664:	6994      	ldr	r4, [r2, #24]
 800c666:	42a3      	cmp	r3, r4
 800c668:	db01      	blt.n	800c66e <__sfputc_r+0x16>
 800c66a:	290a      	cmp	r1, #10
 800c66c:	d103      	bne.n	800c676 <__sfputc_r+0x1e>
 800c66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c672:	f000 bb33 	b.w	800ccdc <__swbuf_r>
 800c676:	6813      	ldr	r3, [r2, #0]
 800c678:	1c58      	adds	r0, r3, #1
 800c67a:	6010      	str	r0, [r2, #0]
 800c67c:	7019      	strb	r1, [r3, #0]
 800c67e:	4608      	mov	r0, r1
 800c680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <__sfputs_r>:
 800c686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c688:	4606      	mov	r6, r0
 800c68a:	460f      	mov	r7, r1
 800c68c:	4614      	mov	r4, r2
 800c68e:	18d5      	adds	r5, r2, r3
 800c690:	42ac      	cmp	r4, r5
 800c692:	d101      	bne.n	800c698 <__sfputs_r+0x12>
 800c694:	2000      	movs	r0, #0
 800c696:	e007      	b.n	800c6a8 <__sfputs_r+0x22>
 800c698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69c:	463a      	mov	r2, r7
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7ff ffda 	bl	800c658 <__sfputc_r>
 800c6a4:	1c43      	adds	r3, r0, #1
 800c6a6:	d1f3      	bne.n	800c690 <__sfputs_r+0xa>
 800c6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6ac <_vfiprintf_r>:
 800c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	b09d      	sub	sp, #116	; 0x74
 800c6b4:	4614      	mov	r4, r2
 800c6b6:	4698      	mov	r8, r3
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	b118      	cbz	r0, 800c6c4 <_vfiprintf_r+0x18>
 800c6bc:	6983      	ldr	r3, [r0, #24]
 800c6be:	b90b      	cbnz	r3, 800c6c4 <_vfiprintf_r+0x18>
 800c6c0:	f7ff fe30 	bl	800c324 <__sinit>
 800c6c4:	4b89      	ldr	r3, [pc, #548]	; (800c8ec <_vfiprintf_r+0x240>)
 800c6c6:	429d      	cmp	r5, r3
 800c6c8:	d11b      	bne.n	800c702 <_vfiprintf_r+0x56>
 800c6ca:	6875      	ldr	r5, [r6, #4]
 800c6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ce:	07d9      	lsls	r1, r3, #31
 800c6d0:	d405      	bmi.n	800c6de <_vfiprintf_r+0x32>
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	059a      	lsls	r2, r3, #22
 800c6d6:	d402      	bmi.n	800c6de <_vfiprintf_r+0x32>
 800c6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6da:	f7ff fed3 	bl	800c484 <__retarget_lock_acquire_recursive>
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	071b      	lsls	r3, r3, #28
 800c6e2:	d501      	bpl.n	800c6e8 <_vfiprintf_r+0x3c>
 800c6e4:	692b      	ldr	r3, [r5, #16]
 800c6e6:	b9eb      	cbnz	r3, 800c724 <_vfiprintf_r+0x78>
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f000 fb5a 	bl	800cda4 <__swsetup_r>
 800c6f0:	b1c0      	cbz	r0, 800c724 <_vfiprintf_r+0x78>
 800c6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f4:	07dc      	lsls	r4, r3, #31
 800c6f6:	d50e      	bpl.n	800c716 <_vfiprintf_r+0x6a>
 800c6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fc:	b01d      	add	sp, #116	; 0x74
 800c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c702:	4b7b      	ldr	r3, [pc, #492]	; (800c8f0 <_vfiprintf_r+0x244>)
 800c704:	429d      	cmp	r5, r3
 800c706:	d101      	bne.n	800c70c <_vfiprintf_r+0x60>
 800c708:	68b5      	ldr	r5, [r6, #8]
 800c70a:	e7df      	b.n	800c6cc <_vfiprintf_r+0x20>
 800c70c:	4b79      	ldr	r3, [pc, #484]	; (800c8f4 <_vfiprintf_r+0x248>)
 800c70e:	429d      	cmp	r5, r3
 800c710:	bf08      	it	eq
 800c712:	68f5      	ldreq	r5, [r6, #12]
 800c714:	e7da      	b.n	800c6cc <_vfiprintf_r+0x20>
 800c716:	89ab      	ldrh	r3, [r5, #12]
 800c718:	0598      	lsls	r0, r3, #22
 800c71a:	d4ed      	bmi.n	800c6f8 <_vfiprintf_r+0x4c>
 800c71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71e:	f7ff feb2 	bl	800c486 <__retarget_lock_release_recursive>
 800c722:	e7e9      	b.n	800c6f8 <_vfiprintf_r+0x4c>
 800c724:	2300      	movs	r3, #0
 800c726:	9309      	str	r3, [sp, #36]	; 0x24
 800c728:	2320      	movs	r3, #32
 800c72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c732:	2330      	movs	r3, #48	; 0x30
 800c734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8f8 <_vfiprintf_r+0x24c>
 800c738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c73c:	f04f 0901 	mov.w	r9, #1
 800c740:	4623      	mov	r3, r4
 800c742:	469a      	mov	sl, r3
 800c744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c748:	b10a      	cbz	r2, 800c74e <_vfiprintf_r+0xa2>
 800c74a:	2a25      	cmp	r2, #37	; 0x25
 800c74c:	d1f9      	bne.n	800c742 <_vfiprintf_r+0x96>
 800c74e:	ebba 0b04 	subs.w	fp, sl, r4
 800c752:	d00b      	beq.n	800c76c <_vfiprintf_r+0xc0>
 800c754:	465b      	mov	r3, fp
 800c756:	4622      	mov	r2, r4
 800c758:	4629      	mov	r1, r5
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff ff93 	bl	800c686 <__sfputs_r>
 800c760:	3001      	adds	r0, #1
 800c762:	f000 80aa 	beq.w	800c8ba <_vfiprintf_r+0x20e>
 800c766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c768:	445a      	add	r2, fp
 800c76a:	9209      	str	r2, [sp, #36]	; 0x24
 800c76c:	f89a 3000 	ldrb.w	r3, [sl]
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 80a2 	beq.w	800c8ba <_vfiprintf_r+0x20e>
 800c776:	2300      	movs	r3, #0
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c780:	f10a 0a01 	add.w	sl, sl, #1
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c78c:	931a      	str	r3, [sp, #104]	; 0x68
 800c78e:	4654      	mov	r4, sl
 800c790:	2205      	movs	r2, #5
 800c792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c796:	4858      	ldr	r0, [pc, #352]	; (800c8f8 <_vfiprintf_r+0x24c>)
 800c798:	f7f3 fcfa 	bl	8000190 <memchr>
 800c79c:	9a04      	ldr	r2, [sp, #16]
 800c79e:	b9d8      	cbnz	r0, 800c7d8 <_vfiprintf_r+0x12c>
 800c7a0:	06d1      	lsls	r1, r2, #27
 800c7a2:	bf44      	itt	mi
 800c7a4:	2320      	movmi	r3, #32
 800c7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7aa:	0713      	lsls	r3, r2, #28
 800c7ac:	bf44      	itt	mi
 800c7ae:	232b      	movmi	r3, #43	; 0x2b
 800c7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ba:	d015      	beq.n	800c7e8 <_vfiprintf_r+0x13c>
 800c7bc:	9a07      	ldr	r2, [sp, #28]
 800c7be:	4654      	mov	r4, sl
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	f04f 0c0a 	mov.w	ip, #10
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7cc:	3b30      	subs	r3, #48	; 0x30
 800c7ce:	2b09      	cmp	r3, #9
 800c7d0:	d94e      	bls.n	800c870 <_vfiprintf_r+0x1c4>
 800c7d2:	b1b0      	cbz	r0, 800c802 <_vfiprintf_r+0x156>
 800c7d4:	9207      	str	r2, [sp, #28]
 800c7d6:	e014      	b.n	800c802 <_vfiprintf_r+0x156>
 800c7d8:	eba0 0308 	sub.w	r3, r0, r8
 800c7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	9304      	str	r3, [sp, #16]
 800c7e4:	46a2      	mov	sl, r4
 800c7e6:	e7d2      	b.n	800c78e <_vfiprintf_r+0xe2>
 800c7e8:	9b03      	ldr	r3, [sp, #12]
 800c7ea:	1d19      	adds	r1, r3, #4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	9103      	str	r1, [sp, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	bfbb      	ittet	lt
 800c7f4:	425b      	neglt	r3, r3
 800c7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7fa:	9307      	strge	r3, [sp, #28]
 800c7fc:	9307      	strlt	r3, [sp, #28]
 800c7fe:	bfb8      	it	lt
 800c800:	9204      	strlt	r2, [sp, #16]
 800c802:	7823      	ldrb	r3, [r4, #0]
 800c804:	2b2e      	cmp	r3, #46	; 0x2e
 800c806:	d10c      	bne.n	800c822 <_vfiprintf_r+0x176>
 800c808:	7863      	ldrb	r3, [r4, #1]
 800c80a:	2b2a      	cmp	r3, #42	; 0x2a
 800c80c:	d135      	bne.n	800c87a <_vfiprintf_r+0x1ce>
 800c80e:	9b03      	ldr	r3, [sp, #12]
 800c810:	1d1a      	adds	r2, r3, #4
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	9203      	str	r2, [sp, #12]
 800c816:	2b00      	cmp	r3, #0
 800c818:	bfb8      	it	lt
 800c81a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c81e:	3402      	adds	r4, #2
 800c820:	9305      	str	r3, [sp, #20]
 800c822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c908 <_vfiprintf_r+0x25c>
 800c826:	7821      	ldrb	r1, [r4, #0]
 800c828:	2203      	movs	r2, #3
 800c82a:	4650      	mov	r0, sl
 800c82c:	f7f3 fcb0 	bl	8000190 <memchr>
 800c830:	b140      	cbz	r0, 800c844 <_vfiprintf_r+0x198>
 800c832:	2340      	movs	r3, #64	; 0x40
 800c834:	eba0 000a 	sub.w	r0, r0, sl
 800c838:	fa03 f000 	lsl.w	r0, r3, r0
 800c83c:	9b04      	ldr	r3, [sp, #16]
 800c83e:	4303      	orrs	r3, r0
 800c840:	3401      	adds	r4, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c848:	482c      	ldr	r0, [pc, #176]	; (800c8fc <_vfiprintf_r+0x250>)
 800c84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c84e:	2206      	movs	r2, #6
 800c850:	f7f3 fc9e 	bl	8000190 <memchr>
 800c854:	2800      	cmp	r0, #0
 800c856:	d03f      	beq.n	800c8d8 <_vfiprintf_r+0x22c>
 800c858:	4b29      	ldr	r3, [pc, #164]	; (800c900 <_vfiprintf_r+0x254>)
 800c85a:	bb1b      	cbnz	r3, 800c8a4 <_vfiprintf_r+0x1f8>
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	3307      	adds	r3, #7
 800c860:	f023 0307 	bic.w	r3, r3, #7
 800c864:	3308      	adds	r3, #8
 800c866:	9303      	str	r3, [sp, #12]
 800c868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86a:	443b      	add	r3, r7
 800c86c:	9309      	str	r3, [sp, #36]	; 0x24
 800c86e:	e767      	b.n	800c740 <_vfiprintf_r+0x94>
 800c870:	fb0c 3202 	mla	r2, ip, r2, r3
 800c874:	460c      	mov	r4, r1
 800c876:	2001      	movs	r0, #1
 800c878:	e7a5      	b.n	800c7c6 <_vfiprintf_r+0x11a>
 800c87a:	2300      	movs	r3, #0
 800c87c:	3401      	adds	r4, #1
 800c87e:	9305      	str	r3, [sp, #20]
 800c880:	4619      	mov	r1, r3
 800c882:	f04f 0c0a 	mov.w	ip, #10
 800c886:	4620      	mov	r0, r4
 800c888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c88c:	3a30      	subs	r2, #48	; 0x30
 800c88e:	2a09      	cmp	r2, #9
 800c890:	d903      	bls.n	800c89a <_vfiprintf_r+0x1ee>
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0c5      	beq.n	800c822 <_vfiprintf_r+0x176>
 800c896:	9105      	str	r1, [sp, #20]
 800c898:	e7c3      	b.n	800c822 <_vfiprintf_r+0x176>
 800c89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c89e:	4604      	mov	r4, r0
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e7f0      	b.n	800c886 <_vfiprintf_r+0x1da>
 800c8a4:	ab03      	add	r3, sp, #12
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	4b16      	ldr	r3, [pc, #88]	; (800c904 <_vfiprintf_r+0x258>)
 800c8ac:	a904      	add	r1, sp, #16
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f3af 8000 	nop.w
 800c8b4:	4607      	mov	r7, r0
 800c8b6:	1c78      	adds	r0, r7, #1
 800c8b8:	d1d6      	bne.n	800c868 <_vfiprintf_r+0x1bc>
 800c8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8bc:	07d9      	lsls	r1, r3, #31
 800c8be:	d405      	bmi.n	800c8cc <_vfiprintf_r+0x220>
 800c8c0:	89ab      	ldrh	r3, [r5, #12]
 800c8c2:	059a      	lsls	r2, r3, #22
 800c8c4:	d402      	bmi.n	800c8cc <_vfiprintf_r+0x220>
 800c8c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8c8:	f7ff fddd 	bl	800c486 <__retarget_lock_release_recursive>
 800c8cc:	89ab      	ldrh	r3, [r5, #12]
 800c8ce:	065b      	lsls	r3, r3, #25
 800c8d0:	f53f af12 	bmi.w	800c6f8 <_vfiprintf_r+0x4c>
 800c8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8d6:	e711      	b.n	800c6fc <_vfiprintf_r+0x50>
 800c8d8:	ab03      	add	r3, sp, #12
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	462a      	mov	r2, r5
 800c8de:	4b09      	ldr	r3, [pc, #36]	; (800c904 <_vfiprintf_r+0x258>)
 800c8e0:	a904      	add	r1, sp, #16
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f000 f880 	bl	800c9e8 <_printf_i>
 800c8e8:	e7e4      	b.n	800c8b4 <_vfiprintf_r+0x208>
 800c8ea:	bf00      	nop
 800c8ec:	0800d5dc 	.word	0x0800d5dc
 800c8f0:	0800d5fc 	.word	0x0800d5fc
 800c8f4:	0800d5bc 	.word	0x0800d5bc
 800c8f8:	0800d61c 	.word	0x0800d61c
 800c8fc:	0800d626 	.word	0x0800d626
 800c900:	00000000 	.word	0x00000000
 800c904:	0800c687 	.word	0x0800c687
 800c908:	0800d622 	.word	0x0800d622

0800c90c <_printf_common>:
 800c90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c910:	4616      	mov	r6, r2
 800c912:	4699      	mov	r9, r3
 800c914:	688a      	ldr	r2, [r1, #8]
 800c916:	690b      	ldr	r3, [r1, #16]
 800c918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c91c:	4293      	cmp	r3, r2
 800c91e:	bfb8      	it	lt
 800c920:	4613      	movlt	r3, r2
 800c922:	6033      	str	r3, [r6, #0]
 800c924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c928:	4607      	mov	r7, r0
 800c92a:	460c      	mov	r4, r1
 800c92c:	b10a      	cbz	r2, 800c932 <_printf_common+0x26>
 800c92e:	3301      	adds	r3, #1
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	0699      	lsls	r1, r3, #26
 800c936:	bf42      	ittt	mi
 800c938:	6833      	ldrmi	r3, [r6, #0]
 800c93a:	3302      	addmi	r3, #2
 800c93c:	6033      	strmi	r3, [r6, #0]
 800c93e:	6825      	ldr	r5, [r4, #0]
 800c940:	f015 0506 	ands.w	r5, r5, #6
 800c944:	d106      	bne.n	800c954 <_printf_common+0x48>
 800c946:	f104 0a19 	add.w	sl, r4, #25
 800c94a:	68e3      	ldr	r3, [r4, #12]
 800c94c:	6832      	ldr	r2, [r6, #0]
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	42ab      	cmp	r3, r5
 800c952:	dc26      	bgt.n	800c9a2 <_printf_common+0x96>
 800c954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c958:	1e13      	subs	r3, r2, #0
 800c95a:	6822      	ldr	r2, [r4, #0]
 800c95c:	bf18      	it	ne
 800c95e:	2301      	movne	r3, #1
 800c960:	0692      	lsls	r2, r2, #26
 800c962:	d42b      	bmi.n	800c9bc <_printf_common+0xb0>
 800c964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c968:	4649      	mov	r1, r9
 800c96a:	4638      	mov	r0, r7
 800c96c:	47c0      	blx	r8
 800c96e:	3001      	adds	r0, #1
 800c970:	d01e      	beq.n	800c9b0 <_printf_common+0xa4>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	68e5      	ldr	r5, [r4, #12]
 800c976:	6832      	ldr	r2, [r6, #0]
 800c978:	f003 0306 	and.w	r3, r3, #6
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	bf08      	it	eq
 800c980:	1aad      	subeq	r5, r5, r2
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	6922      	ldr	r2, [r4, #16]
 800c986:	bf0c      	ite	eq
 800c988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c98c:	2500      	movne	r5, #0
 800c98e:	4293      	cmp	r3, r2
 800c990:	bfc4      	itt	gt
 800c992:	1a9b      	subgt	r3, r3, r2
 800c994:	18ed      	addgt	r5, r5, r3
 800c996:	2600      	movs	r6, #0
 800c998:	341a      	adds	r4, #26
 800c99a:	42b5      	cmp	r5, r6
 800c99c:	d11a      	bne.n	800c9d4 <_printf_common+0xc8>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e008      	b.n	800c9b4 <_printf_common+0xa8>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	4652      	mov	r2, sl
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	47c0      	blx	r8
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d103      	bne.n	800c9b8 <_printf_common+0xac>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b8:	3501      	adds	r5, #1
 800c9ba:	e7c6      	b.n	800c94a <_printf_common+0x3e>
 800c9bc:	18e1      	adds	r1, r4, r3
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	2030      	movs	r0, #48	; 0x30
 800c9c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9c6:	4422      	add	r2, r4
 800c9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9d0:	3302      	adds	r3, #2
 800c9d2:	e7c7      	b.n	800c964 <_printf_common+0x58>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4638      	mov	r0, r7
 800c9dc:	47c0      	blx	r8
 800c9de:	3001      	adds	r0, #1
 800c9e0:	d0e6      	beq.n	800c9b0 <_printf_common+0xa4>
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7d9      	b.n	800c99a <_printf_common+0x8e>
	...

0800c9e8 <_printf_i>:
 800c9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	7e0f      	ldrb	r7, [r1, #24]
 800c9ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9f0:	2f78      	cmp	r7, #120	; 0x78
 800c9f2:	4691      	mov	r9, r2
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	469a      	mov	sl, r3
 800c9fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9fe:	d807      	bhi.n	800ca10 <_printf_i+0x28>
 800ca00:	2f62      	cmp	r7, #98	; 0x62
 800ca02:	d80a      	bhi.n	800ca1a <_printf_i+0x32>
 800ca04:	2f00      	cmp	r7, #0
 800ca06:	f000 80d8 	beq.w	800cbba <_printf_i+0x1d2>
 800ca0a:	2f58      	cmp	r7, #88	; 0x58
 800ca0c:	f000 80a3 	beq.w	800cb56 <_printf_i+0x16e>
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca18:	e03a      	b.n	800ca90 <_printf_i+0xa8>
 800ca1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca1e:	2b15      	cmp	r3, #21
 800ca20:	d8f6      	bhi.n	800ca10 <_printf_i+0x28>
 800ca22:	a101      	add	r1, pc, #4	; (adr r1, 800ca28 <_printf_i+0x40>)
 800ca24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca28:	0800ca81 	.word	0x0800ca81
 800ca2c:	0800ca95 	.word	0x0800ca95
 800ca30:	0800ca11 	.word	0x0800ca11
 800ca34:	0800ca11 	.word	0x0800ca11
 800ca38:	0800ca11 	.word	0x0800ca11
 800ca3c:	0800ca11 	.word	0x0800ca11
 800ca40:	0800ca95 	.word	0x0800ca95
 800ca44:	0800ca11 	.word	0x0800ca11
 800ca48:	0800ca11 	.word	0x0800ca11
 800ca4c:	0800ca11 	.word	0x0800ca11
 800ca50:	0800ca11 	.word	0x0800ca11
 800ca54:	0800cba1 	.word	0x0800cba1
 800ca58:	0800cac5 	.word	0x0800cac5
 800ca5c:	0800cb83 	.word	0x0800cb83
 800ca60:	0800ca11 	.word	0x0800ca11
 800ca64:	0800ca11 	.word	0x0800ca11
 800ca68:	0800cbc3 	.word	0x0800cbc3
 800ca6c:	0800ca11 	.word	0x0800ca11
 800ca70:	0800cac5 	.word	0x0800cac5
 800ca74:	0800ca11 	.word	0x0800ca11
 800ca78:	0800ca11 	.word	0x0800ca11
 800ca7c:	0800cb8b 	.word	0x0800cb8b
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	602a      	str	r2, [r5, #0]
 800ca88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca90:	2301      	movs	r3, #1
 800ca92:	e0a3      	b.n	800cbdc <_printf_i+0x1f4>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	6829      	ldr	r1, [r5, #0]
 800ca98:	0606      	lsls	r6, r0, #24
 800ca9a:	f101 0304 	add.w	r3, r1, #4
 800ca9e:	d50a      	bpl.n	800cab6 <_printf_i+0xce>
 800caa0:	680e      	ldr	r6, [r1, #0]
 800caa2:	602b      	str	r3, [r5, #0]
 800caa4:	2e00      	cmp	r6, #0
 800caa6:	da03      	bge.n	800cab0 <_printf_i+0xc8>
 800caa8:	232d      	movs	r3, #45	; 0x2d
 800caaa:	4276      	negs	r6, r6
 800caac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab0:	485e      	ldr	r0, [pc, #376]	; (800cc2c <_printf_i+0x244>)
 800cab2:	230a      	movs	r3, #10
 800cab4:	e019      	b.n	800caea <_printf_i+0x102>
 800cab6:	680e      	ldr	r6, [r1, #0]
 800cab8:	602b      	str	r3, [r5, #0]
 800caba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cabe:	bf18      	it	ne
 800cac0:	b236      	sxthne	r6, r6
 800cac2:	e7ef      	b.n	800caa4 <_printf_i+0xbc>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	6029      	str	r1, [r5, #0]
 800cacc:	0601      	lsls	r1, r0, #24
 800cace:	d501      	bpl.n	800cad4 <_printf_i+0xec>
 800cad0:	681e      	ldr	r6, [r3, #0]
 800cad2:	e002      	b.n	800cada <_printf_i+0xf2>
 800cad4:	0646      	lsls	r6, r0, #25
 800cad6:	d5fb      	bpl.n	800cad0 <_printf_i+0xe8>
 800cad8:	881e      	ldrh	r6, [r3, #0]
 800cada:	4854      	ldr	r0, [pc, #336]	; (800cc2c <_printf_i+0x244>)
 800cadc:	2f6f      	cmp	r7, #111	; 0x6f
 800cade:	bf0c      	ite	eq
 800cae0:	2308      	moveq	r3, #8
 800cae2:	230a      	movne	r3, #10
 800cae4:	2100      	movs	r1, #0
 800cae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caea:	6865      	ldr	r5, [r4, #4]
 800caec:	60a5      	str	r5, [r4, #8]
 800caee:	2d00      	cmp	r5, #0
 800caf0:	bfa2      	ittt	ge
 800caf2:	6821      	ldrge	r1, [r4, #0]
 800caf4:	f021 0104 	bicge.w	r1, r1, #4
 800caf8:	6021      	strge	r1, [r4, #0]
 800cafa:	b90e      	cbnz	r6, 800cb00 <_printf_i+0x118>
 800cafc:	2d00      	cmp	r5, #0
 800cafe:	d04d      	beq.n	800cb9c <_printf_i+0x1b4>
 800cb00:	4615      	mov	r5, r2
 800cb02:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb06:	fb03 6711 	mls	r7, r3, r1, r6
 800cb0a:	5dc7      	ldrb	r7, [r0, r7]
 800cb0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb10:	4637      	mov	r7, r6
 800cb12:	42bb      	cmp	r3, r7
 800cb14:	460e      	mov	r6, r1
 800cb16:	d9f4      	bls.n	800cb02 <_printf_i+0x11a>
 800cb18:	2b08      	cmp	r3, #8
 800cb1a:	d10b      	bne.n	800cb34 <_printf_i+0x14c>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	07de      	lsls	r6, r3, #31
 800cb20:	d508      	bpl.n	800cb34 <_printf_i+0x14c>
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	6861      	ldr	r1, [r4, #4]
 800cb26:	4299      	cmp	r1, r3
 800cb28:	bfde      	ittt	le
 800cb2a:	2330      	movle	r3, #48	; 0x30
 800cb2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb34:	1b52      	subs	r2, r2, r5
 800cb36:	6122      	str	r2, [r4, #16]
 800cb38:	f8cd a000 	str.w	sl, [sp]
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	aa03      	add	r2, sp, #12
 800cb40:	4621      	mov	r1, r4
 800cb42:	4640      	mov	r0, r8
 800cb44:	f7ff fee2 	bl	800c90c <_printf_common>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	d14c      	bne.n	800cbe6 <_printf_i+0x1fe>
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	b004      	add	sp, #16
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	4835      	ldr	r0, [pc, #212]	; (800cc2c <_printf_i+0x244>)
 800cb58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb5c:	6829      	ldr	r1, [r5, #0]
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb64:	6029      	str	r1, [r5, #0]
 800cb66:	061d      	lsls	r5, r3, #24
 800cb68:	d514      	bpl.n	800cb94 <_printf_i+0x1ac>
 800cb6a:	07df      	lsls	r7, r3, #31
 800cb6c:	bf44      	itt	mi
 800cb6e:	f043 0320 	orrmi.w	r3, r3, #32
 800cb72:	6023      	strmi	r3, [r4, #0]
 800cb74:	b91e      	cbnz	r6, 800cb7e <_printf_i+0x196>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	f023 0320 	bic.w	r3, r3, #32
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	2310      	movs	r3, #16
 800cb80:	e7b0      	b.n	800cae4 <_printf_i+0xfc>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	f043 0320 	orr.w	r3, r3, #32
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	2378      	movs	r3, #120	; 0x78
 800cb8c:	4828      	ldr	r0, [pc, #160]	; (800cc30 <_printf_i+0x248>)
 800cb8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb92:	e7e3      	b.n	800cb5c <_printf_i+0x174>
 800cb94:	0659      	lsls	r1, r3, #25
 800cb96:	bf48      	it	mi
 800cb98:	b2b6      	uxthmi	r6, r6
 800cb9a:	e7e6      	b.n	800cb6a <_printf_i+0x182>
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	e7bb      	b.n	800cb18 <_printf_i+0x130>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	6826      	ldr	r6, [r4, #0]
 800cba4:	6961      	ldr	r1, [r4, #20]
 800cba6:	1d18      	adds	r0, r3, #4
 800cba8:	6028      	str	r0, [r5, #0]
 800cbaa:	0635      	lsls	r5, r6, #24
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	d501      	bpl.n	800cbb4 <_printf_i+0x1cc>
 800cbb0:	6019      	str	r1, [r3, #0]
 800cbb2:	e002      	b.n	800cbba <_printf_i+0x1d2>
 800cbb4:	0670      	lsls	r0, r6, #25
 800cbb6:	d5fb      	bpl.n	800cbb0 <_printf_i+0x1c8>
 800cbb8:	8019      	strh	r1, [r3, #0]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	6123      	str	r3, [r4, #16]
 800cbbe:	4615      	mov	r5, r2
 800cbc0:	e7ba      	b.n	800cb38 <_printf_i+0x150>
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	1d1a      	adds	r2, r3, #4
 800cbc6:	602a      	str	r2, [r5, #0]
 800cbc8:	681d      	ldr	r5, [r3, #0]
 800cbca:	6862      	ldr	r2, [r4, #4]
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f7f3 fade 	bl	8000190 <memchr>
 800cbd4:	b108      	cbz	r0, 800cbda <_printf_i+0x1f2>
 800cbd6:	1b40      	subs	r0, r0, r5
 800cbd8:	6060      	str	r0, [r4, #4]
 800cbda:	6863      	ldr	r3, [r4, #4]
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe4:	e7a8      	b.n	800cb38 <_printf_i+0x150>
 800cbe6:	6923      	ldr	r3, [r4, #16]
 800cbe8:	462a      	mov	r2, r5
 800cbea:	4649      	mov	r1, r9
 800cbec:	4640      	mov	r0, r8
 800cbee:	47d0      	blx	sl
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d0ab      	beq.n	800cb4c <_printf_i+0x164>
 800cbf4:	6823      	ldr	r3, [r4, #0]
 800cbf6:	079b      	lsls	r3, r3, #30
 800cbf8:	d413      	bmi.n	800cc22 <_printf_i+0x23a>
 800cbfa:	68e0      	ldr	r0, [r4, #12]
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	4298      	cmp	r0, r3
 800cc00:	bfb8      	it	lt
 800cc02:	4618      	movlt	r0, r3
 800cc04:	e7a4      	b.n	800cb50 <_printf_i+0x168>
 800cc06:	2301      	movs	r3, #1
 800cc08:	4632      	mov	r2, r6
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	47d0      	blx	sl
 800cc10:	3001      	adds	r0, #1
 800cc12:	d09b      	beq.n	800cb4c <_printf_i+0x164>
 800cc14:	3501      	adds	r5, #1
 800cc16:	68e3      	ldr	r3, [r4, #12]
 800cc18:	9903      	ldr	r1, [sp, #12]
 800cc1a:	1a5b      	subs	r3, r3, r1
 800cc1c:	42ab      	cmp	r3, r5
 800cc1e:	dcf2      	bgt.n	800cc06 <_printf_i+0x21e>
 800cc20:	e7eb      	b.n	800cbfa <_printf_i+0x212>
 800cc22:	2500      	movs	r5, #0
 800cc24:	f104 0619 	add.w	r6, r4, #25
 800cc28:	e7f5      	b.n	800cc16 <_printf_i+0x22e>
 800cc2a:	bf00      	nop
 800cc2c:	0800d62d 	.word	0x0800d62d
 800cc30:	0800d63e 	.word	0x0800d63e

0800cc34 <_sbrk_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4d06      	ldr	r5, [pc, #24]	; (800cc50 <_sbrk_r+0x1c>)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	f7f8 f91a 	bl	8004e78 <_sbrk>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_sbrk_r+0x1a>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_sbrk_r+0x1a>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	20001228 	.word	0x20001228

0800cc54 <__sread>:
 800cc54:	b510      	push	{r4, lr}
 800cc56:	460c      	mov	r4, r1
 800cc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5c:	f000 fa6e 	bl	800d13c <_read_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	bfab      	itete	ge
 800cc64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc66:	89a3      	ldrhlt	r3, [r4, #12]
 800cc68:	181b      	addge	r3, r3, r0
 800cc6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc6e:	bfac      	ite	ge
 800cc70:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc72:	81a3      	strhlt	r3, [r4, #12]
 800cc74:	bd10      	pop	{r4, pc}

0800cc76 <__swrite>:
 800cc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7a:	461f      	mov	r7, r3
 800cc7c:	898b      	ldrh	r3, [r1, #12]
 800cc7e:	05db      	lsls	r3, r3, #23
 800cc80:	4605      	mov	r5, r0
 800cc82:	460c      	mov	r4, r1
 800cc84:	4616      	mov	r6, r2
 800cc86:	d505      	bpl.n	800cc94 <__swrite+0x1e>
 800cc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f000 f9d0 	bl	800d034 <_lseek_r>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	4632      	mov	r2, r6
 800cca2:	463b      	mov	r3, r7
 800cca4:	4628      	mov	r0, r5
 800cca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccaa:	f000 b869 	b.w	800cd80 <_write_r>

0800ccae <__sseek>:
 800ccae:	b510      	push	{r4, lr}
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb6:	f000 f9bd 	bl	800d034 <_lseek_r>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	bf15      	itete	ne
 800ccc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccca:	81a3      	strheq	r3, [r4, #12]
 800cccc:	bf18      	it	ne
 800ccce:	81a3      	strhne	r3, [r4, #12]
 800ccd0:	bd10      	pop	{r4, pc}

0800ccd2 <__sclose>:
 800ccd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd6:	f000 b8db 	b.w	800ce90 <_close_r>
	...

0800ccdc <__swbuf_r>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	460e      	mov	r6, r1
 800cce0:	4614      	mov	r4, r2
 800cce2:	4605      	mov	r5, r0
 800cce4:	b118      	cbz	r0, 800ccee <__swbuf_r+0x12>
 800cce6:	6983      	ldr	r3, [r0, #24]
 800cce8:	b90b      	cbnz	r3, 800ccee <__swbuf_r+0x12>
 800ccea:	f7ff fb1b 	bl	800c324 <__sinit>
 800ccee:	4b21      	ldr	r3, [pc, #132]	; (800cd74 <__swbuf_r+0x98>)
 800ccf0:	429c      	cmp	r4, r3
 800ccf2:	d12b      	bne.n	800cd4c <__swbuf_r+0x70>
 800ccf4:	686c      	ldr	r4, [r5, #4]
 800ccf6:	69a3      	ldr	r3, [r4, #24]
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	071a      	lsls	r2, r3, #28
 800ccfe:	d52f      	bpl.n	800cd60 <__swbuf_r+0x84>
 800cd00:	6923      	ldr	r3, [r4, #16]
 800cd02:	b36b      	cbz	r3, 800cd60 <__swbuf_r+0x84>
 800cd04:	6923      	ldr	r3, [r4, #16]
 800cd06:	6820      	ldr	r0, [r4, #0]
 800cd08:	1ac0      	subs	r0, r0, r3
 800cd0a:	6963      	ldr	r3, [r4, #20]
 800cd0c:	b2f6      	uxtb	r6, r6
 800cd0e:	4283      	cmp	r3, r0
 800cd10:	4637      	mov	r7, r6
 800cd12:	dc04      	bgt.n	800cd1e <__swbuf_r+0x42>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f950 	bl	800cfbc <_fflush_r>
 800cd1c:	bb30      	cbnz	r0, 800cd6c <__swbuf_r+0x90>
 800cd1e:	68a3      	ldr	r3, [r4, #8]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	60a3      	str	r3, [r4, #8]
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	6022      	str	r2, [r4, #0]
 800cd2a:	701e      	strb	r6, [r3, #0]
 800cd2c:	6963      	ldr	r3, [r4, #20]
 800cd2e:	3001      	adds	r0, #1
 800cd30:	4283      	cmp	r3, r0
 800cd32:	d004      	beq.n	800cd3e <__swbuf_r+0x62>
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	07db      	lsls	r3, r3, #31
 800cd38:	d506      	bpl.n	800cd48 <__swbuf_r+0x6c>
 800cd3a:	2e0a      	cmp	r6, #10
 800cd3c:	d104      	bne.n	800cd48 <__swbuf_r+0x6c>
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4628      	mov	r0, r5
 800cd42:	f000 f93b 	bl	800cfbc <_fflush_r>
 800cd46:	b988      	cbnz	r0, 800cd6c <__swbuf_r+0x90>
 800cd48:	4638      	mov	r0, r7
 800cd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd4c:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <__swbuf_r+0x9c>)
 800cd4e:	429c      	cmp	r4, r3
 800cd50:	d101      	bne.n	800cd56 <__swbuf_r+0x7a>
 800cd52:	68ac      	ldr	r4, [r5, #8]
 800cd54:	e7cf      	b.n	800ccf6 <__swbuf_r+0x1a>
 800cd56:	4b09      	ldr	r3, [pc, #36]	; (800cd7c <__swbuf_r+0xa0>)
 800cd58:	429c      	cmp	r4, r3
 800cd5a:	bf08      	it	eq
 800cd5c:	68ec      	ldreq	r4, [r5, #12]
 800cd5e:	e7ca      	b.n	800ccf6 <__swbuf_r+0x1a>
 800cd60:	4621      	mov	r1, r4
 800cd62:	4628      	mov	r0, r5
 800cd64:	f000 f81e 	bl	800cda4 <__swsetup_r>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0cb      	beq.n	800cd04 <__swbuf_r+0x28>
 800cd6c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd70:	e7ea      	b.n	800cd48 <__swbuf_r+0x6c>
 800cd72:	bf00      	nop
 800cd74:	0800d5dc 	.word	0x0800d5dc
 800cd78:	0800d5fc 	.word	0x0800d5fc
 800cd7c:	0800d5bc 	.word	0x0800d5bc

0800cd80 <_write_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d07      	ldr	r5, [pc, #28]	; (800cda0 <_write_r+0x20>)
 800cd84:	4604      	mov	r4, r0
 800cd86:	4608      	mov	r0, r1
 800cd88:	4611      	mov	r1, r2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	602a      	str	r2, [r5, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f7f8 f821 	bl	8004dd6 <_write>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_write_r+0x1e>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_write_r+0x1e>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	20001228 	.word	0x20001228

0800cda4 <__swsetup_r>:
 800cda4:	4b32      	ldr	r3, [pc, #200]	; (800ce70 <__swsetup_r+0xcc>)
 800cda6:	b570      	push	{r4, r5, r6, lr}
 800cda8:	681d      	ldr	r5, [r3, #0]
 800cdaa:	4606      	mov	r6, r0
 800cdac:	460c      	mov	r4, r1
 800cdae:	b125      	cbz	r5, 800cdba <__swsetup_r+0x16>
 800cdb0:	69ab      	ldr	r3, [r5, #24]
 800cdb2:	b913      	cbnz	r3, 800cdba <__swsetup_r+0x16>
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f7ff fab5 	bl	800c324 <__sinit>
 800cdba:	4b2e      	ldr	r3, [pc, #184]	; (800ce74 <__swsetup_r+0xd0>)
 800cdbc:	429c      	cmp	r4, r3
 800cdbe:	d10f      	bne.n	800cde0 <__swsetup_r+0x3c>
 800cdc0:	686c      	ldr	r4, [r5, #4]
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdc8:	0719      	lsls	r1, r3, #28
 800cdca:	d42c      	bmi.n	800ce26 <__swsetup_r+0x82>
 800cdcc:	06dd      	lsls	r5, r3, #27
 800cdce:	d411      	bmi.n	800cdf4 <__swsetup_r+0x50>
 800cdd0:	2309      	movs	r3, #9
 800cdd2:	6033      	str	r3, [r6, #0]
 800cdd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdd8:	81a3      	strh	r3, [r4, #12]
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295
 800cdde:	e03e      	b.n	800ce5e <__swsetup_r+0xba>
 800cde0:	4b25      	ldr	r3, [pc, #148]	; (800ce78 <__swsetup_r+0xd4>)
 800cde2:	429c      	cmp	r4, r3
 800cde4:	d101      	bne.n	800cdea <__swsetup_r+0x46>
 800cde6:	68ac      	ldr	r4, [r5, #8]
 800cde8:	e7eb      	b.n	800cdc2 <__swsetup_r+0x1e>
 800cdea:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <__swsetup_r+0xd8>)
 800cdec:	429c      	cmp	r4, r3
 800cdee:	bf08      	it	eq
 800cdf0:	68ec      	ldreq	r4, [r5, #12]
 800cdf2:	e7e6      	b.n	800cdc2 <__swsetup_r+0x1e>
 800cdf4:	0758      	lsls	r0, r3, #29
 800cdf6:	d512      	bpl.n	800ce1e <__swsetup_r+0x7a>
 800cdf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdfa:	b141      	cbz	r1, 800ce0e <__swsetup_r+0x6a>
 800cdfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce00:	4299      	cmp	r1, r3
 800ce02:	d002      	beq.n	800ce0a <__swsetup_r+0x66>
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7ff fb47 	bl	800c498 <_free_r>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce14:	81a3      	strh	r3, [r4, #12]
 800ce16:	2300      	movs	r3, #0
 800ce18:	6063      	str	r3, [r4, #4]
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	89a3      	ldrh	r3, [r4, #12]
 800ce20:	f043 0308 	orr.w	r3, r3, #8
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	b94b      	cbnz	r3, 800ce3e <__swsetup_r+0x9a>
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce34:	d003      	beq.n	800ce3e <__swsetup_r+0x9a>
 800ce36:	4621      	mov	r1, r4
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f000 f933 	bl	800d0a4 <__smakebuf_r>
 800ce3e:	89a0      	ldrh	r0, [r4, #12]
 800ce40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce44:	f010 0301 	ands.w	r3, r0, #1
 800ce48:	d00a      	beq.n	800ce60 <__swsetup_r+0xbc>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60a3      	str	r3, [r4, #8]
 800ce4e:	6963      	ldr	r3, [r4, #20]
 800ce50:	425b      	negs	r3, r3
 800ce52:	61a3      	str	r3, [r4, #24]
 800ce54:	6923      	ldr	r3, [r4, #16]
 800ce56:	b943      	cbnz	r3, 800ce6a <__swsetup_r+0xc6>
 800ce58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce5c:	d1ba      	bne.n	800cdd4 <__swsetup_r+0x30>
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	0781      	lsls	r1, r0, #30
 800ce62:	bf58      	it	pl
 800ce64:	6963      	ldrpl	r3, [r4, #20]
 800ce66:	60a3      	str	r3, [r4, #8]
 800ce68:	e7f4      	b.n	800ce54 <__swsetup_r+0xb0>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e7f7      	b.n	800ce5e <__swsetup_r+0xba>
 800ce6e:	bf00      	nop
 800ce70:	20000030 	.word	0x20000030
 800ce74:	0800d5dc 	.word	0x0800d5dc
 800ce78:	0800d5fc 	.word	0x0800d5fc
 800ce7c:	0800d5bc 	.word	0x0800d5bc

0800ce80 <abort>:
 800ce80:	b508      	push	{r3, lr}
 800ce82:	2006      	movs	r0, #6
 800ce84:	f000 f994 	bl	800d1b0 <raise>
 800ce88:	2001      	movs	r0, #1
 800ce8a:	f7f7 ff7d 	bl	8004d88 <_exit>
	...

0800ce90 <_close_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d06      	ldr	r5, [pc, #24]	; (800ceac <_close_r+0x1c>)
 800ce94:	2300      	movs	r3, #0
 800ce96:	4604      	mov	r4, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	602b      	str	r3, [r5, #0]
 800ce9c:	f7f7 ffb7 	bl	8004e0e <_close>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d102      	bne.n	800ceaa <_close_r+0x1a>
 800cea4:	682b      	ldr	r3, [r5, #0]
 800cea6:	b103      	cbz	r3, 800ceaa <_close_r+0x1a>
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	bd38      	pop	{r3, r4, r5, pc}
 800ceac:	20001228 	.word	0x20001228

0800ceb0 <__sflush_r>:
 800ceb0:	898a      	ldrh	r2, [r1, #12]
 800ceb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	0710      	lsls	r0, r2, #28
 800ceba:	460c      	mov	r4, r1
 800cebc:	d458      	bmi.n	800cf70 <__sflush_r+0xc0>
 800cebe:	684b      	ldr	r3, [r1, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	dc05      	bgt.n	800ced0 <__sflush_r+0x20>
 800cec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	dc02      	bgt.n	800ced0 <__sflush_r+0x20>
 800ceca:	2000      	movs	r0, #0
 800cecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ced2:	2e00      	cmp	r6, #0
 800ced4:	d0f9      	beq.n	800ceca <__sflush_r+0x1a>
 800ced6:	2300      	movs	r3, #0
 800ced8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cedc:	682f      	ldr	r7, [r5, #0]
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	d032      	beq.n	800cf48 <__sflush_r+0x98>
 800cee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	075a      	lsls	r2, r3, #29
 800cee8:	d505      	bpl.n	800cef6 <__sflush_r+0x46>
 800ceea:	6863      	ldr	r3, [r4, #4]
 800ceec:	1ac0      	subs	r0, r0, r3
 800ceee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cef0:	b10b      	cbz	r3, 800cef6 <__sflush_r+0x46>
 800cef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cef4:	1ac0      	subs	r0, r0, r3
 800cef6:	2300      	movs	r3, #0
 800cef8:	4602      	mov	r2, r0
 800cefa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cefc:	6a21      	ldr	r1, [r4, #32]
 800cefe:	4628      	mov	r0, r5
 800cf00:	47b0      	blx	r6
 800cf02:	1c43      	adds	r3, r0, #1
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	d106      	bne.n	800cf16 <__sflush_r+0x66>
 800cf08:	6829      	ldr	r1, [r5, #0]
 800cf0a:	291d      	cmp	r1, #29
 800cf0c:	d82c      	bhi.n	800cf68 <__sflush_r+0xb8>
 800cf0e:	4a2a      	ldr	r2, [pc, #168]	; (800cfb8 <__sflush_r+0x108>)
 800cf10:	40ca      	lsrs	r2, r1
 800cf12:	07d6      	lsls	r6, r2, #31
 800cf14:	d528      	bpl.n	800cf68 <__sflush_r+0xb8>
 800cf16:	2200      	movs	r2, #0
 800cf18:	6062      	str	r2, [r4, #4]
 800cf1a:	04d9      	lsls	r1, r3, #19
 800cf1c:	6922      	ldr	r2, [r4, #16]
 800cf1e:	6022      	str	r2, [r4, #0]
 800cf20:	d504      	bpl.n	800cf2c <__sflush_r+0x7c>
 800cf22:	1c42      	adds	r2, r0, #1
 800cf24:	d101      	bne.n	800cf2a <__sflush_r+0x7a>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	b903      	cbnz	r3, 800cf2c <__sflush_r+0x7c>
 800cf2a:	6560      	str	r0, [r4, #84]	; 0x54
 800cf2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf2e:	602f      	str	r7, [r5, #0]
 800cf30:	2900      	cmp	r1, #0
 800cf32:	d0ca      	beq.n	800ceca <__sflush_r+0x1a>
 800cf34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	d002      	beq.n	800cf42 <__sflush_r+0x92>
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f7ff faab 	bl	800c498 <_free_r>
 800cf42:	2000      	movs	r0, #0
 800cf44:	6360      	str	r0, [r4, #52]	; 0x34
 800cf46:	e7c1      	b.n	800cecc <__sflush_r+0x1c>
 800cf48:	6a21      	ldr	r1, [r4, #32]
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b0      	blx	r6
 800cf50:	1c41      	adds	r1, r0, #1
 800cf52:	d1c7      	bne.n	800cee4 <__sflush_r+0x34>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d0c4      	beq.n	800cee4 <__sflush_r+0x34>
 800cf5a:	2b1d      	cmp	r3, #29
 800cf5c:	d001      	beq.n	800cf62 <__sflush_r+0xb2>
 800cf5e:	2b16      	cmp	r3, #22
 800cf60:	d101      	bne.n	800cf66 <__sflush_r+0xb6>
 800cf62:	602f      	str	r7, [r5, #0]
 800cf64:	e7b1      	b.n	800ceca <__sflush_r+0x1a>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	e7ad      	b.n	800cecc <__sflush_r+0x1c>
 800cf70:	690f      	ldr	r7, [r1, #16]
 800cf72:	2f00      	cmp	r7, #0
 800cf74:	d0a9      	beq.n	800ceca <__sflush_r+0x1a>
 800cf76:	0793      	lsls	r3, r2, #30
 800cf78:	680e      	ldr	r6, [r1, #0]
 800cf7a:	bf08      	it	eq
 800cf7c:	694b      	ldreq	r3, [r1, #20]
 800cf7e:	600f      	str	r7, [r1, #0]
 800cf80:	bf18      	it	ne
 800cf82:	2300      	movne	r3, #0
 800cf84:	eba6 0807 	sub.w	r8, r6, r7
 800cf88:	608b      	str	r3, [r1, #8]
 800cf8a:	f1b8 0f00 	cmp.w	r8, #0
 800cf8e:	dd9c      	ble.n	800ceca <__sflush_r+0x1a>
 800cf90:	6a21      	ldr	r1, [r4, #32]
 800cf92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf94:	4643      	mov	r3, r8
 800cf96:	463a      	mov	r2, r7
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b0      	blx	r6
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	dc06      	bgt.n	800cfae <__sflush_r+0xfe>
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa6:	81a3      	strh	r3, [r4, #12]
 800cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfac:	e78e      	b.n	800cecc <__sflush_r+0x1c>
 800cfae:	4407      	add	r7, r0
 800cfb0:	eba8 0800 	sub.w	r8, r8, r0
 800cfb4:	e7e9      	b.n	800cf8a <__sflush_r+0xda>
 800cfb6:	bf00      	nop
 800cfb8:	20400001 	.word	0x20400001

0800cfbc <_fflush_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	690b      	ldr	r3, [r1, #16]
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	b913      	cbnz	r3, 800cfcc <_fflush_r+0x10>
 800cfc6:	2500      	movs	r5, #0
 800cfc8:	4628      	mov	r0, r5
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	b118      	cbz	r0, 800cfd6 <_fflush_r+0x1a>
 800cfce:	6983      	ldr	r3, [r0, #24]
 800cfd0:	b90b      	cbnz	r3, 800cfd6 <_fflush_r+0x1a>
 800cfd2:	f7ff f9a7 	bl	800c324 <__sinit>
 800cfd6:	4b14      	ldr	r3, [pc, #80]	; (800d028 <_fflush_r+0x6c>)
 800cfd8:	429c      	cmp	r4, r3
 800cfda:	d11b      	bne.n	800d014 <_fflush_r+0x58>
 800cfdc:	686c      	ldr	r4, [r5, #4]
 800cfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0ef      	beq.n	800cfc6 <_fflush_r+0xa>
 800cfe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfe8:	07d0      	lsls	r0, r2, #31
 800cfea:	d404      	bmi.n	800cff6 <_fflush_r+0x3a>
 800cfec:	0599      	lsls	r1, r3, #22
 800cfee:	d402      	bmi.n	800cff6 <_fflush_r+0x3a>
 800cff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cff2:	f7ff fa47 	bl	800c484 <__retarget_lock_acquire_recursive>
 800cff6:	4628      	mov	r0, r5
 800cff8:	4621      	mov	r1, r4
 800cffa:	f7ff ff59 	bl	800ceb0 <__sflush_r>
 800cffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d000:	07da      	lsls	r2, r3, #31
 800d002:	4605      	mov	r5, r0
 800d004:	d4e0      	bmi.n	800cfc8 <_fflush_r+0xc>
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	059b      	lsls	r3, r3, #22
 800d00a:	d4dd      	bmi.n	800cfc8 <_fflush_r+0xc>
 800d00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d00e:	f7ff fa3a 	bl	800c486 <__retarget_lock_release_recursive>
 800d012:	e7d9      	b.n	800cfc8 <_fflush_r+0xc>
 800d014:	4b05      	ldr	r3, [pc, #20]	; (800d02c <_fflush_r+0x70>)
 800d016:	429c      	cmp	r4, r3
 800d018:	d101      	bne.n	800d01e <_fflush_r+0x62>
 800d01a:	68ac      	ldr	r4, [r5, #8]
 800d01c:	e7df      	b.n	800cfde <_fflush_r+0x22>
 800d01e:	4b04      	ldr	r3, [pc, #16]	; (800d030 <_fflush_r+0x74>)
 800d020:	429c      	cmp	r4, r3
 800d022:	bf08      	it	eq
 800d024:	68ec      	ldreq	r4, [r5, #12]
 800d026:	e7da      	b.n	800cfde <_fflush_r+0x22>
 800d028:	0800d5dc 	.word	0x0800d5dc
 800d02c:	0800d5fc 	.word	0x0800d5fc
 800d030:	0800d5bc 	.word	0x0800d5bc

0800d034 <_lseek_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d07      	ldr	r5, [pc, #28]	; (800d054 <_lseek_r+0x20>)
 800d038:	4604      	mov	r4, r0
 800d03a:	4608      	mov	r0, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	2200      	movs	r2, #0
 800d040:	602a      	str	r2, [r5, #0]
 800d042:	461a      	mov	r2, r3
 800d044:	f7f7 ff0a 	bl	8004e5c <_lseek>
 800d048:	1c43      	adds	r3, r0, #1
 800d04a:	d102      	bne.n	800d052 <_lseek_r+0x1e>
 800d04c:	682b      	ldr	r3, [r5, #0]
 800d04e:	b103      	cbz	r3, 800d052 <_lseek_r+0x1e>
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	bd38      	pop	{r3, r4, r5, pc}
 800d054:	20001228 	.word	0x20001228

0800d058 <__swhatbuf_r>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	460e      	mov	r6, r1
 800d05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d060:	2900      	cmp	r1, #0
 800d062:	b096      	sub	sp, #88	; 0x58
 800d064:	4614      	mov	r4, r2
 800d066:	461d      	mov	r5, r3
 800d068:	da08      	bge.n	800d07c <__swhatbuf_r+0x24>
 800d06a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	602a      	str	r2, [r5, #0]
 800d072:	061a      	lsls	r2, r3, #24
 800d074:	d410      	bmi.n	800d098 <__swhatbuf_r+0x40>
 800d076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d07a:	e00e      	b.n	800d09a <__swhatbuf_r+0x42>
 800d07c:	466a      	mov	r2, sp
 800d07e:	f000 f8b3 	bl	800d1e8 <_fstat_r>
 800d082:	2800      	cmp	r0, #0
 800d084:	dbf1      	blt.n	800d06a <__swhatbuf_r+0x12>
 800d086:	9a01      	ldr	r2, [sp, #4]
 800d088:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d08c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d090:	425a      	negs	r2, r3
 800d092:	415a      	adcs	r2, r3
 800d094:	602a      	str	r2, [r5, #0]
 800d096:	e7ee      	b.n	800d076 <__swhatbuf_r+0x1e>
 800d098:	2340      	movs	r3, #64	; 0x40
 800d09a:	2000      	movs	r0, #0
 800d09c:	6023      	str	r3, [r4, #0]
 800d09e:	b016      	add	sp, #88	; 0x58
 800d0a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0a4 <__smakebuf_r>:
 800d0a4:	898b      	ldrh	r3, [r1, #12]
 800d0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0a8:	079d      	lsls	r5, r3, #30
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	d507      	bpl.n	800d0c0 <__smakebuf_r+0x1c>
 800d0b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	6123      	str	r3, [r4, #16]
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	6163      	str	r3, [r4, #20]
 800d0bc:	b002      	add	sp, #8
 800d0be:	bd70      	pop	{r4, r5, r6, pc}
 800d0c0:	ab01      	add	r3, sp, #4
 800d0c2:	466a      	mov	r2, sp
 800d0c4:	f7ff ffc8 	bl	800d058 <__swhatbuf_r>
 800d0c8:	9900      	ldr	r1, [sp, #0]
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7ff fa4f 	bl	800c570 <_malloc_r>
 800d0d2:	b948      	cbnz	r0, 800d0e8 <__smakebuf_r+0x44>
 800d0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d8:	059a      	lsls	r2, r3, #22
 800d0da:	d4ef      	bmi.n	800d0bc <__smakebuf_r+0x18>
 800d0dc:	f023 0303 	bic.w	r3, r3, #3
 800d0e0:	f043 0302 	orr.w	r3, r3, #2
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	e7e3      	b.n	800d0b0 <__smakebuf_r+0xc>
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <__smakebuf_r+0x7c>)
 800d0ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0ec:	89a3      	ldrh	r3, [r4, #12]
 800d0ee:	6020      	str	r0, [r4, #0]
 800d0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	6163      	str	r3, [r4, #20]
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	6120      	str	r0, [r4, #16]
 800d0fe:	b15b      	cbz	r3, 800d118 <__smakebuf_r+0x74>
 800d100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d104:	4630      	mov	r0, r6
 800d106:	f000 f881 	bl	800d20c <_isatty_r>
 800d10a:	b128      	cbz	r0, 800d118 <__smakebuf_r+0x74>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f023 0303 	bic.w	r3, r3, #3
 800d112:	f043 0301 	orr.w	r3, r3, #1
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	89a0      	ldrh	r0, [r4, #12]
 800d11a:	4305      	orrs	r5, r0
 800d11c:	81a5      	strh	r5, [r4, #12]
 800d11e:	e7cd      	b.n	800d0bc <__smakebuf_r+0x18>
 800d120:	0800c2bd 	.word	0x0800c2bd

0800d124 <__malloc_lock>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__malloc_lock+0x8>)
 800d126:	f7ff b9ad 	b.w	800c484 <__retarget_lock_acquire_recursive>
 800d12a:	bf00      	nop
 800d12c:	2000121c 	.word	0x2000121c

0800d130 <__malloc_unlock>:
 800d130:	4801      	ldr	r0, [pc, #4]	; (800d138 <__malloc_unlock+0x8>)
 800d132:	f7ff b9a8 	b.w	800c486 <__retarget_lock_release_recursive>
 800d136:	bf00      	nop
 800d138:	2000121c 	.word	0x2000121c

0800d13c <_read_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4d07      	ldr	r5, [pc, #28]	; (800d15c <_read_r+0x20>)
 800d140:	4604      	mov	r4, r0
 800d142:	4608      	mov	r0, r1
 800d144:	4611      	mov	r1, r2
 800d146:	2200      	movs	r2, #0
 800d148:	602a      	str	r2, [r5, #0]
 800d14a:	461a      	mov	r2, r3
 800d14c:	f7f7 fe26 	bl	8004d9c <_read>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	d102      	bne.n	800d15a <_read_r+0x1e>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b103      	cbz	r3, 800d15a <_read_r+0x1e>
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	bd38      	pop	{r3, r4, r5, pc}
 800d15c:	20001228 	.word	0x20001228

0800d160 <_raise_r>:
 800d160:	291f      	cmp	r1, #31
 800d162:	b538      	push	{r3, r4, r5, lr}
 800d164:	4604      	mov	r4, r0
 800d166:	460d      	mov	r5, r1
 800d168:	d904      	bls.n	800d174 <_raise_r+0x14>
 800d16a:	2316      	movs	r3, #22
 800d16c:	6003      	str	r3, [r0, #0]
 800d16e:	f04f 30ff 	mov.w	r0, #4294967295
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d176:	b112      	cbz	r2, 800d17e <_raise_r+0x1e>
 800d178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d17c:	b94b      	cbnz	r3, 800d192 <_raise_r+0x32>
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 f830 	bl	800d1e4 <_getpid_r>
 800d184:	462a      	mov	r2, r5
 800d186:	4601      	mov	r1, r0
 800d188:	4620      	mov	r0, r4
 800d18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d18e:	f000 b817 	b.w	800d1c0 <_kill_r>
 800d192:	2b01      	cmp	r3, #1
 800d194:	d00a      	beq.n	800d1ac <_raise_r+0x4c>
 800d196:	1c59      	adds	r1, r3, #1
 800d198:	d103      	bne.n	800d1a2 <_raise_r+0x42>
 800d19a:	2316      	movs	r3, #22
 800d19c:	6003      	str	r3, [r0, #0]
 800d19e:	2001      	movs	r0, #1
 800d1a0:	e7e7      	b.n	800d172 <_raise_r+0x12>
 800d1a2:	2400      	movs	r4, #0
 800d1a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	4798      	blx	r3
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	e7e0      	b.n	800d172 <_raise_r+0x12>

0800d1b0 <raise>:
 800d1b0:	4b02      	ldr	r3, [pc, #8]	; (800d1bc <raise+0xc>)
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	f7ff bfd3 	b.w	800d160 <_raise_r>
 800d1ba:	bf00      	nop
 800d1bc:	20000030 	.word	0x20000030

0800d1c0 <_kill_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d07      	ldr	r5, [pc, #28]	; (800d1e0 <_kill_r+0x20>)
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	602b      	str	r3, [r5, #0]
 800d1ce:	f7f7 fdcb 	bl	8004d68 <_kill>
 800d1d2:	1c43      	adds	r3, r0, #1
 800d1d4:	d102      	bne.n	800d1dc <_kill_r+0x1c>
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	b103      	cbz	r3, 800d1dc <_kill_r+0x1c>
 800d1da:	6023      	str	r3, [r4, #0]
 800d1dc:	bd38      	pop	{r3, r4, r5, pc}
 800d1de:	bf00      	nop
 800d1e0:	20001228 	.word	0x20001228

0800d1e4 <_getpid_r>:
 800d1e4:	f7f7 bdb8 	b.w	8004d58 <_getpid>

0800d1e8 <_fstat_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d07      	ldr	r5, [pc, #28]	; (800d208 <_fstat_r+0x20>)
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	602b      	str	r3, [r5, #0]
 800d1f6:	f7f7 fe16 	bl	8004e26 <_fstat>
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	d102      	bne.n	800d204 <_fstat_r+0x1c>
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	b103      	cbz	r3, 800d204 <_fstat_r+0x1c>
 800d202:	6023      	str	r3, [r4, #0]
 800d204:	bd38      	pop	{r3, r4, r5, pc}
 800d206:	bf00      	nop
 800d208:	20001228 	.word	0x20001228

0800d20c <_isatty_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4d06      	ldr	r5, [pc, #24]	; (800d228 <_isatty_r+0x1c>)
 800d210:	2300      	movs	r3, #0
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	f7f7 fe15 	bl	8004e46 <_isatty>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_isatty_r+0x1a>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_isatty_r+0x1a>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	20001228 	.word	0x20001228

0800d22c <_init>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	bf00      	nop
 800d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d232:	bc08      	pop	{r3}
 800d234:	469e      	mov	lr, r3
 800d236:	4770      	bx	lr

0800d238 <_fini>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	bf00      	nop
 800d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23e:	bc08      	pop	{r3}
 800d240:	469e      	mov	lr, r3
 800d242:	4770      	bx	lr
