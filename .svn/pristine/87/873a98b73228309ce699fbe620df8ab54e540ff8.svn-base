
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ec0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af0  08017000  08017000  00027000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018af0  08018af0  00028af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018af8  08018af8  00028af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018afc  08018afc  00028afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000008  08018b00  00030008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a4e8  200002d0  08018dc8  000302d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a7b8  08018dc8  0003a7b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003294c  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005259  00000000  00000000  00062c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002be8  00000000  00000000  00067ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002a40  00000000  00000000  0006aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002852a  00000000  00000000  0006d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c428  00000000  00000000  000959fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f9519  00000000  00000000  000c1e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bb33b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d630  00000000  00000000  001bb38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08016fe0 	.word	0x08016fe0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	08016fe0 	.word	0x08016fe0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bf 	b.w	8000fec <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b974 	b.w	8000fec <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468e      	mov	lr, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d14d      	bne.n	8000dc6 <__udivmoddi4+0xaa>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d969      	bls.n	8000e04 <__udivmoddi4+0xe8>
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	b152      	cbz	r2, 8000d4c <__udivmoddi4+0x30>
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	f1c2 0120 	rsb	r1, r2, #32
 8000d3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d46:	ea41 0e03 	orr.w	lr, r1, r3
 8000d4a:	4094      	lsls	r4, r2
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	0c21      	lsrs	r1, r4, #16
 8000d52:	fbbe f6f8 	udiv	r6, lr, r8
 8000d56:	fa1f f78c 	uxth.w	r7, ip
 8000d5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d62:	fb06 f107 	mul.w	r1, r6, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x64>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d72:	f080 811f 	bcs.w	8000fb4 <__udivmoddi4+0x298>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 811c 	bls.w	8000fb4 <__udivmoddi4+0x298>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb00 f707 	mul.w	r7, r0, r7
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x92>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	f080 810a 	bcs.w	8000fb8 <__udivmoddi4+0x29c>
 8000da4:	42a7      	cmp	r7, r4
 8000da6:	f240 8107 	bls.w	8000fb8 <__udivmoddi4+0x29c>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db2:	1be4      	subs	r4, r4, r7
 8000db4:	2600      	movs	r6, #0
 8000db6:	b11d      	cbz	r5, 8000dc0 <__udivmoddi4+0xa4>
 8000db8:	40d4      	lsrs	r4, r2
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d909      	bls.n	8000dde <__udivmoddi4+0xc2>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	f000 80ef 	beq.w	8000fae <__udivmoddi4+0x292>
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	fab3 f683 	clz	r6, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d14a      	bne.n	8000e7c <__udivmoddi4+0x160>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xd4>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 80f9 	bhi.w	8000fe2 <__udivmoddi4+0x2c6>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	469e      	mov	lr, r3
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e0      	beq.n	8000dc0 <__udivmoddi4+0xa4>
 8000dfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e02:	e7dd      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xec>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	f040 8092 	bne.w	8000f36 <__udivmoddi4+0x21a>
 8000e12:	eba1 010c 	sub.w	r1, r1, ip
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2601      	movs	r6, #1
 8000e20:	0c20      	lsrs	r0, r4, #16
 8000e22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e26:	fb07 1113 	mls	r1, r7, r3, r1
 8000e2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2e:	fb0e f003 	mul.w	r0, lr, r3
 8000e32:	4288      	cmp	r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x12c>
 8000e36:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x12a>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2c0>
 8000e46:	4643      	mov	r3, r8
 8000e48:	1a09      	subs	r1, r1, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1110 	mls	r1, r7, r0, r1
 8000e54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x156>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x154>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2ca>
 8000e70:	4608      	mov	r0, r1
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000e7c:	f1c6 0720 	rsb	r7, r6, #32
 8000e80:	40b3      	lsls	r3, r6
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e92:	431c      	orrs	r4, r3
 8000e94:	40f9      	lsrs	r1, r7
 8000e96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	0c20      	lsrs	r0, r4, #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fb09 1118 	mls	r1, r9, r8, r1
 8000eac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b8>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000edc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee8:	458e      	cmp	lr, r1
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1e2>
 8000eec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2b4>
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2b4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4461      	add	r1, ip
 8000efe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f02:	fba0 9402 	umull	r9, r4, r0, r2
 8000f06:	eba1 010e 	sub.w	r1, r1, lr
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x2a4>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x2a0>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x212>
 8000f16:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f22:	fa22 f306 	lsr.w	r3, r2, r6
 8000f26:	40f1      	lsrs	r1, r6
 8000f28:	431f      	orrs	r7, r3
 8000f2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	f1c2 0320 	rsb	r3, r2, #32
 8000f3a:	40d8      	lsrs	r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
 8000f44:	4091      	lsls	r1, r2
 8000f46:	4301      	orrs	r1, r0
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f54:	fb07 3610 	mls	r6, r7, r0, r3
 8000f58:	0c0b      	lsrs	r3, r1, #16
 8000f5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f62:	429e      	cmp	r6, r3
 8000f64:	fa04 f402 	lsl.w	r4, r4, r2
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x260>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f74:	429e      	cmp	r6, r3
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1b9b      	subs	r3, r3, r6
 8000f7e:	b289      	uxth	r1, r1
 8000f80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f84:	fb07 3316 	mls	r3, r7, r6, r3
 8000f88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x28a>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2b0>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2b0>
 8000fa2:	3e02      	subs	r6, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0x104>
 8000fae:	462e      	mov	r6, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e705      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	e6e3      	b.n	8000d80 <__udivmoddi4+0x64>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6f8      	b.n	8000dae <__udivmoddi4+0x92>
 8000fbc:	454b      	cmp	r3, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f8>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc8:	3801      	subs	r0, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f8>
 8000fcc:	4646      	mov	r6, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x28a>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1e2>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b8>
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	4461      	add	r1, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x12c>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e709      	b.n	8000dfa <__udivmoddi4+0xde>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x156>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);

	if(index==CAN2){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d11a      	bne.n	8001046 <DRV_CANFDSPI_Reset+0x56>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <DRV_CANFDSPI_Reset+0x9c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <DRV_CANFDSPI_Reset+0xa0>)
 8001016:	8811      	ldrh	r1, [r2, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00c fabe 	bl	800d59c <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001020:	89bb      	ldrh	r3, [r7, #12]
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <DRV_CANFDSPI_Reset+0xa4>)
 8001028:	4917      	ldr	r1, [pc, #92]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <DRV_CANFDSPI_Reset+0xa8>)
 800102c:	f00e fe34 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <DRV_CANFDSPI_Reset+0x9c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a15      	ldr	r2, [pc, #84]	; (8001090 <DRV_CANFDSPI_Reset+0xa0>)
 800103a:	8811      	ldrh	r1, [r2, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f00c faac 	bl	800d59c <HAL_GPIO_WritePin>
 8001044:	e019      	b.n	800107a <DRV_CANFDSPI_Reset+0x8a>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <DRV_CANFDSPI_Reset+0xac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <DRV_CANFDSPI_Reset+0xb0>)
 800104c:	8811      	ldrh	r1, [r2, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00c faa3 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	2264      	movs	r2, #100	; 0x64
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <DRV_CANFDSPI_Reset+0xa4>)
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <DRV_CANFDSPI_Reset+0xa8>)
 8001062:	f00e fe19 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <DRV_CANFDSPI_Reset+0xac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <DRV_CANFDSPI_Reset+0xb0>)
 8001070:	8811      	ldrh	r1, [r2, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f00c fa91 	bl	800d59c <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002ec 	.word	0x200002ec
 800108c:	20000c98 	.word	0x20000c98
 8001090:	20000c96 	.word	0x20000c96
 8001094:	2000034c 	.word	0x2000034c
 8001098:	20000510 	.word	0x20000510
 800109c:	20000c78 	.word	0x20000c78
 80010a0:	20000c76 	.word	0x20000c76

080010a4 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	603a      	str	r2, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	460b      	mov	r3, r1
 80010b2:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010b4:	2303      	movs	r3, #3
 80010b6:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3330      	adds	r3, #48	; 0x30
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010cc:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d4:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	709a      	strb	r2, [r3, #2]

  if(index==CAN2){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d11a      	bne.n	8001118 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <DRV_CANFDSPI_ReadByte+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <DRV_CANFDSPI_ReadByte+0xc4>)
 80010e8:	8811      	ldrh	r1, [r2, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00c fa55 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 80010fa:	4919      	ldr	r1, [pc, #100]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <DRV_CANFDSPI_ReadByte+0xcc>)
 80010fe:	f00e fdcb 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001102:	4603      	mov	r3, r0
 8001104:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <DRV_CANFDSPI_ReadByte+0xc0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <DRV_CANFDSPI_ReadByte+0xc4>)
 800110c:	8811      	ldrh	r1, [r2, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f00c fa43 	bl	800d59c <HAL_GPIO_WritePin>
 8001116:	e019      	b.n	800114c <DRV_CANFDSPI_ReadByte+0xa8>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <DRV_CANFDSPI_ReadByte+0xd0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <DRV_CANFDSPI_ReadByte+0xd4>)
 800111e:	8811      	ldrh	r1, [r2, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fa3a 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001128:	89bb      	ldrh	r3, [r7, #12]
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 8001130:	490b      	ldr	r1, [pc, #44]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <DRV_CANFDSPI_ReadByte+0xcc>)
 8001134:	f00e fdb0 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <DRV_CANFDSPI_ReadByte+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <DRV_CANFDSPI_ReadByte+0xd4>)
 8001142:	8811      	ldrh	r1, [r2, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f00c fa28 	bl	800d59c <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 800114e:	789a      	ldrb	r2, [r3, #2]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200002ec 	.word	0x200002ec
 8001164:	20000c98 	.word	0x20000c98
 8001168:	20000c96 	.word	0x20000c96
 800116c:	2000034c 	.word	0x2000034c
 8001170:	20000510 	.word	0x20000510
 8001174:	20000c78 	.word	0x20000c78
 8001178:	20000c76 	.word	0x20000c76

0800117c <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	80bb      	strh	r3, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800118e:	2303      	movs	r3, #3
 8001190:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3320      	adds	r3, #32
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011a6:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011ae:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	7093      	strb	r3, [r2, #2]

  if(index==CAN2){
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d11a      	bne.n	80011f2 <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <DRV_CANFDSPI_WriteByte+0xc0>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00c f9e8 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	2264      	movs	r2, #100	; 0x64
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <DRV_CANFDSPI_WriteByte+0xc4>)
 80011d4:	4917      	ldr	r1, [pc, #92]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <DRV_CANFDSPI_WriteByte+0xc8>)
 80011d8:	f00e fd5e 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <DRV_CANFDSPI_WriteByte+0xc0>)
 80011e6:	8811      	ldrh	r1, [r2, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00c f9d6 	bl	800d59c <HAL_GPIO_WritePin>
 80011f0:	e019      	b.n	8001226 <DRV_CANFDSPI_WriteByte+0xaa>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <DRV_CANFDSPI_WriteByte+0xcc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <DRV_CANFDSPI_WriteByte+0xd0>)
 80011f8:	8811      	ldrh	r1, [r2, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00c f9cd 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <DRV_CANFDSPI_WriteByte+0xc4>)
 800120a:	490a      	ldr	r1, [pc, #40]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <DRV_CANFDSPI_WriteByte+0xc8>)
 800120e:	f00e fd43 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <DRV_CANFDSPI_WriteByte+0xcc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <DRV_CANFDSPI_WriteByte+0xd0>)
 800121c:	8811      	ldrh	r1, [r2, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f00c f9bb 	bl	800d59c <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002ec 	.word	0x200002ec
 8001238:	20000c98 	.word	0x20000c98
 800123c:	20000c96 	.word	0x20000c96
 8001240:	2000034c 	.word	0x2000034c
 8001244:	20000510 	.word	0x20000510
 8001248:	20000c78 	.word	0x20000c78
 800124c:	20000c76 	.word	0x20000c76

08001250 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	603a      	str	r2, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	460b      	mov	r3, r1
 800125e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001260:	2306      	movs	r3, #6
 8001262:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b29b      	uxth	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3330      	adds	r3, #48	; 0x30
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001278:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001280:	705a      	strb	r2, [r3, #1]

  if(index==CAN2){
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d11a      	bne.n	80012be <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <DRV_CANFDSPI_ReadWord+0xf4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <DRV_CANFDSPI_ReadWord+0xf8>)
 800128e:	8811      	ldrh	r1, [r2, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f00c f982 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001298:	89bb      	ldrh	r3, [r7, #12]
 800129a:	2264      	movs	r2, #100	; 0x64
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 80012a0:	4927      	ldr	r1, [pc, #156]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012a2:	482b      	ldr	r0, [pc, #172]	; (8001350 <DRV_CANFDSPI_ReadWord+0x100>)
 80012a4:	f00e fcf8 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <DRV_CANFDSPI_ReadWord+0xf4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a25      	ldr	r2, [pc, #148]	; (8001348 <DRV_CANFDSPI_ReadWord+0xf8>)
 80012b2:	8811      	ldrh	r1, [r2, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00c f970 	bl	800d59c <HAL_GPIO_WritePin>
 80012bc:	e019      	b.n	80012f2 <DRV_CANFDSPI_ReadWord+0xa2>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <DRV_CANFDSPI_ReadWord+0x104>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <DRV_CANFDSPI_ReadWord+0x108>)
 80012c4:	8811      	ldrh	r1, [r2, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c f967 	bl	800d59c <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2264      	movs	r2, #100	; 0x64
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 80012d6:	491a      	ldr	r1, [pc, #104]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <DRV_CANFDSPI_ReadWord+0x100>)
 80012da:	f00e fcdd 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80012de:	4603      	mov	r3, r0
 80012e0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <DRV_CANFDSPI_ReadWord+0x104>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <DRV_CANFDSPI_ReadWord+0x108>)
 80012e8:	8811      	ldrh	r1, [r2, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00c f955 	bl	800d59c <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <DRV_CANFDSPI_ReadWord+0xae>
      return spiTransferError;
 80012f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012fc:	e01c      	b.n	8001338 <DRV_CANFDSPI_ReadWord+0xe8>
  }

  // Update data
  *rxd = 0;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001304:	2302      	movs	r3, #2
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e011      	b.n	800132e <DRV_CANFDSPI_ReadWord+0xde>
      x = (uint32_t) spiReceiveBuffer[i];
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3b02      	subs	r3, #2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	441a      	add	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d9ea      	bls.n	800130a <DRV_CANFDSPI_ReadWord+0xba>
  }

  return spiTransferError;
 8001334:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200002ec 	.word	0x200002ec
 8001344:	20000c98 	.word	0x20000c98
 8001348:	20000c96 	.word	0x20000c96
 800134c:	2000034c 	.word	0x2000034c
 8001350:	20000510 	.word	0x20000510
 8001354:	20000c78 	.word	0x20000c78
 8001358:	20000c76 	.word	0x20000c76

0800135c <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	4603      	mov	r3, r0
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	460b      	mov	r3, r1
 800136a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 800136c:	2306      	movs	r3, #6
 800136e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3320      	adds	r3, #32
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001384:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 800138c:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00b      	b.n	80013ac <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	40da      	lsrs	r2, r3
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d1      	uxtb	r1, r2
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013a4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9f0      	bls.n	8001394 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN2){
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11a      	bne.n	80013ee <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <DRV_CANFDSPI_WriteWord+0xd8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013be:	8811      	ldrh	r1, [r2, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00c f8ea 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	2264      	movs	r2, #100	; 0x64
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <DRV_CANFDSPI_WriteWord+0xe0>)
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <DRV_CANFDSPI_WriteWord+0xe4>)
 80013d4:	f00e fc60 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80013d8:	4603      	mov	r3, r0
 80013da:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <DRV_CANFDSPI_WriteWord+0xd8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013e2:	8811      	ldrh	r1, [r2, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00c f8d8 	bl	800d59c <HAL_GPIO_WritePin>
 80013ec:	e019      	b.n	8001422 <DRV_CANFDSPI_WriteWord+0xc6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <DRV_CANFDSPI_WriteWord+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <DRV_CANFDSPI_WriteWord+0xec>)
 80013f4:	8811      	ldrh	r1, [r2, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c f8cf 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013fe:	89bb      	ldrh	r3, [r7, #12]
 8001400:	2264      	movs	r2, #100	; 0x64
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <DRV_CANFDSPI_WriteWord+0xe0>)
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <DRV_CANFDSPI_WriteWord+0xe4>)
 800140a:	f00e fc45 	bl	800fc98 <HAL_SPI_TransmitReceive>
 800140e:	4603      	mov	r3, r0
 8001410:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <DRV_CANFDSPI_WriteWord+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <DRV_CANFDSPI_WriteWord+0xec>)
 8001418:	8811      	ldrh	r1, [r2, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f00c f8bd 	bl	800d59c <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8001422:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200002ec 	.word	0x200002ec
 8001434:	20000c98 	.word	0x20000c98
 8001438:	20000c96 	.word	0x20000c96
 800143c:	2000034c 	.word	0x2000034c
 8001440:	20000510 	.word	0x20000510
 8001444:	20000c78 	.word	0x20000c78
 8001448:	20000c76 	.word	0x20000c76

0800144c <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	603a      	str	r2, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	460b      	mov	r3, r1
 800145a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3330      	adds	r3, #48	; 0x30
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 8001474:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800147c:	705a      	strb	r2, [r3, #1]

    if(index==CAN2){
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11a      	bne.n	80014ba <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 800148a:	8811      	ldrh	r1, [r2, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00c f884 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	2264      	movs	r2, #100	; 0x64
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	4a2c      	ldr	r2, [pc, #176]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 800149c:	4928      	ldr	r1, [pc, #160]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800149e:	482c      	ldr	r0, [pc, #176]	; (8001550 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014a0:	f00e fbfa 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 80014ae:	8811      	ldrh	r1, [r2, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00c f872 	bl	800d59c <HAL_GPIO_WritePin>
 80014b8:	e019      	b.n	80014ee <DRV_CANFDSPI_ReadHalfWord+0xa2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a26      	ldr	r2, [pc, #152]	; (8001558 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014c0:	8811      	ldrh	r1, [r2, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00c f869 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014ca:	89bb      	ldrh	r3, [r7, #12]
 80014cc:	2264      	movs	r2, #100	; 0x64
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 80014d2:	491b      	ldr	r1, [pc, #108]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014d6:	f00e fbdf 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80014da:	4603      	mov	r3, r0
 80014dc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014e4:	8811      	ldrh	r1, [r2, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00c f857 	bl	800d59c <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <DRV_CANFDSPI_ReadHalfWord+0xae>
        return spiTransferError;
 80014f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014f8:	e01e      	b.n	8001538 <DRV_CANFDSPI_ReadHalfWord+0xec>
    }

    // Update data
    *rxd = 0;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001500:	2302      	movs	r3, #2
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e013      	b.n	800152e <DRV_CANFDSPI_ReadHalfWord+0xe2>
        x = (uint32_t) spiReceiveBuffer[i];
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3b02      	subs	r3, #2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	b29b      	uxth	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b29a      	uxth	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9e8      	bls.n	8001506 <DRV_CANFDSPI_ReadHalfWord+0xba>
    }

    return spiTransferError;
 8001534:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002ec 	.word	0x200002ec
 8001544:	20000c98 	.word	0x20000c98
 8001548:	20000c96 	.word	0x20000c96
 800154c:	2000034c 	.word	0x2000034c
 8001550:	20000510 	.word	0x20000510
 8001554:	20000c78 	.word	0x20000c78
 8001558:	20000c76 	.word	0x20000c76

0800155c <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	460b      	mov	r3, r1
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3320      	adds	r3, #32
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 8001586:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800158e:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e00b      	b.n	80015ae <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	411a      	asrs	r2, r3
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3302      	adds	r3, #2
 80015a2:	b2d1      	uxtb	r1, r2
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015a6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d9f0      	bls.n	8001596 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN2){
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11a      	bne.n	80015f0 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015c0:	8811      	ldrh	r1, [r2, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00b ffe9 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015ca:	89bb      	ldrh	r3, [r7, #12]
 80015cc:	2264      	movs	r2, #100	; 0x64
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 80015d6:	f00e fb5f 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80015da:	4603      	mov	r3, r0
 80015dc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015e4:	8811      	ldrh	r1, [r2, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00b ffd7 	bl	800d59c <HAL_GPIO_WritePin>
 80015ee:	e019      	b.n	8001624 <DRV_CANFDSPI_WriteHalfWord+0xc8>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 80015f6:	8811      	ldrh	r1, [r2, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00b ffce 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001600:	89bb      	ldrh	r3, [r7, #12]
 8001602:	2264      	movs	r2, #100	; 0x64
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 800160c:	f00e fb44 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001610:	4603      	mov	r3, r0
 8001612:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 800161a:	8811      	ldrh	r1, [r2, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f00b ffbc 	bl	800d59c <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001624:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200002ec 	.word	0x200002ec
 8001634:	20000c98 	.word	0x20000c98
 8001638:	20000c96 	.word	0x20000c96
 800163c:	2000034c 	.word	0x2000034c
 8001640:	20000510 	.word	0x20000510
 8001644:	20000c78 	.word	0x20000c78
 8001648:	20000c76 	.word	0x20000c76

0800164c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	60ba      	str	r2, [r7, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	460b      	mov	r3, r1
 800165c:	81bb      	strh	r3, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3302      	adds	r3, #2
 8001666:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001668:	8a7b      	ldrh	r3, [r7, #18]
 800166a:	2b60      	cmp	r3, #96	; 0x60
 800166c:	d902      	bls.n	8001674 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e068      	b.n	8001746 <DRV_CANFDSPI_ReadByteArray+0xfa>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001674:	89bb      	ldrh	r3, [r7, #12]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3330      	adds	r3, #48	; 0x30
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001688:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001690:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001692:	2302      	movs	r3, #2
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	e006      	b.n	80016a6 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 800169c:	2100      	movs	r1, #0
 800169e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	3301      	adds	r3, #1
 80016a4:	82fb      	strh	r3, [r7, #22]
 80016a6:	8afa      	ldrh	r2, [r7, #22]
 80016a8:	8a7b      	ldrh	r3, [r7, #18]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3f4      	bcc.n	8001698 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN2){
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11a      	bne.n	80016ea <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016ba:	8811      	ldrh	r1, [r2, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b ff6c 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016c4:	8a7b      	ldrh	r3, [r7, #18]
 80016c6:	2264      	movs	r2, #100	; 0x64
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 80016cc:	4920      	ldr	r1, [pc, #128]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <DRV_CANFDSPI_ReadByteArray+0x114>)
 80016d0:	f00e fae2 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80016d4:	4603      	mov	r3, r0
 80016d6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016de:	8811      	ldrh	r1, [r2, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00b ff5a 	bl	800d59c <HAL_GPIO_WritePin>
 80016e8:	e019      	b.n	800171e <DRV_CANFDSPI_ReadByteArray+0xd2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <DRV_CANFDSPI_ReadByteArray+0x118>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 80016f0:	8811      	ldrh	r1, [r2, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b ff51 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016fa:	8a7b      	ldrh	r3, [r7, #18]
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <DRV_CANFDSPI_ReadByteArray+0x114>)
 8001706:	f00e fac7 	bl	800fc98 <HAL_SPI_TransmitReceive>
 800170a:	4603      	mov	r3, r0
 800170c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <DRV_CANFDSPI_ReadByteArray+0x118>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 8001714:	8811      	ldrh	r1, [r2, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f00b ff3f 	bl	800d59c <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	82fb      	strh	r3, [r7, #22]
 8001722:	e00a      	b.n	800173a <DRV_CANFDSPI_ReadByteArray+0xee>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001724:	8afb      	ldrh	r3, [r7, #22]
 8001726:	1c9a      	adds	r2, r3, #2
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	440b      	add	r3, r1
 800172e:	490b      	ldr	r1, [pc, #44]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001730:	5c8a      	ldrb	r2, [r1, r2]
 8001732:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001734:	8afb      	ldrh	r3, [r7, #22]
 8001736:	3301      	adds	r3, #1
 8001738:	82fb      	strh	r3, [r7, #22]
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3f0      	bcc.n	8001724 <DRV_CANFDSPI_ReadByteArray+0xd8>
    }

    return spiTransferError;
 8001742:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002ec 	.word	0x200002ec
 8001754:	20000c98 	.word	0x20000c98
 8001758:	20000c96 	.word	0x20000c96
 800175c:	2000034c 	.word	0x2000034c
 8001760:	20000510 	.word	0x20000510
 8001764:	20000c78 	.word	0x20000c78
 8001768:	20000c76 	.word	0x20000c76

0800176c <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	3302      	adds	r3, #2
 8001786:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001788:	8a7b      	ldrh	r3, [r7, #18]
 800178a:	2b60      	cmp	r3, #96	; 0x60
 800178c:	d902      	bls.n	8001794 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e05a      	b.n	800184a <DRV_CANFDSPI_WriteByteArray+0xde>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3320      	adds	r3, #32
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017a8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80017aa:	89bb      	ldrh	r3, [r7, #12]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017b0:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	82fb      	strh	r3, [r7, #22]
 80017b6:	e00a      	b.n	80017ce <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	441a      	add	r2, r3
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	3302      	adds	r3, #2
 80017c2:	7811      	ldrb	r1, [r2, #0]
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017c6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80017c8:	8afb      	ldrh	r3, [r7, #22]
 80017ca:	3301      	adds	r3, #1
 80017cc:	82fb      	strh	r3, [r7, #22]
 80017ce:	8afa      	ldrh	r2, [r7, #22]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3f0      	bcc.n	80017b8 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN2){
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d11a      	bne.n	8001812 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <DRV_CANFDSPI_WriteByteArray+0xec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <DRV_CANFDSPI_WriteByteArray+0xf0>)
 80017e2:	8811      	ldrh	r1, [r2, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00b fed8 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017ec:	8a7b      	ldrh	r3, [r7, #18]
 80017ee:	2264      	movs	r2, #100	; 0x64
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 80017f4:	4917      	ldr	r1, [pc, #92]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017f6:	481b      	ldr	r0, [pc, #108]	; (8001864 <DRV_CANFDSPI_WriteByteArray+0xf8>)
 80017f8:	f00e fa4e 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80017fc:	4603      	mov	r3, r0
 80017fe:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <DRV_CANFDSPI_WriteByteArray+0xec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <DRV_CANFDSPI_WriteByteArray+0xf0>)
 8001806:	8811      	ldrh	r1, [r2, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f00b fec6 	bl	800d59c <HAL_GPIO_WritePin>
 8001810:	e019      	b.n	8001846 <DRV_CANFDSPI_WriteByteArray+0xda>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <DRV_CANFDSPI_WriteByteArray+0x100>)
 8001818:	8811      	ldrh	r1, [r2, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f00b febd 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <DRV_CANFDSPI_WriteByteArray+0xf8>)
 800182e:	f00e fa33 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001832:	4603      	mov	r3, r0
 8001834:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <DRV_CANFDSPI_WriteByteArray+0x100>)
 800183c:	8811      	ldrh	r1, [r2, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f00b feab 	bl	800d59c <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001846:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002ec 	.word	0x200002ec
 8001858:	20000c98 	.word	0x20000c98
 800185c:	20000c96 	.word	0x20000c96
 8001860:	2000034c 	.word	0x2000034c
 8001864:	20000510 	.word	0x20000510
 8001868:	20000c78 	.word	0x20000c78
 800186c:	20000c76 	.word	0x20000c76

08001870 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	460b      	mov	r3, r1
 8001880:	81bb      	strh	r3, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	3302      	adds	r3, #2
 800188e:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	2b60      	cmp	r3, #96	; 0x60
 8001894:	d902      	bls.n	800189c <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e084      	b.n	80019a6 <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3330      	adds	r3, #48	; 0x30
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b8:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018ba:	2302      	movs	r3, #2
 80018bc:	83fb      	strh	r3, [r7, #30]
 80018be:	e006      	b.n	80018ce <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 80018c0:	8bfb      	ldrh	r3, [r7, #30]
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018c8:	8bfb      	ldrh	r3, [r7, #30]
 80018ca:	3301      	adds	r3, #1
 80018cc:	83fb      	strh	r3, [r7, #30]
 80018ce:	8bfa      	ldrh	r2, [r7, #30]
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3f4      	bcc.n	80018c0 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN2){
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11a      	bne.n	8001912 <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <DRV_CANFDSPI_ReadWordArray+0x144>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <DRV_CANFDSPI_ReadWordArray+0x148>)
 80018e2:	8811      	ldrh	r1, [r2, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00b fe58 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018ec:	8afb      	ldrh	r3, [r7, #22]
 80018ee:	2264      	movs	r2, #100	; 0x64
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	4a32      	ldr	r2, [pc, #200]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 80018f4:	492e      	ldr	r1, [pc, #184]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018f6:	4832      	ldr	r0, [pc, #200]	; (80019c0 <DRV_CANFDSPI_ReadWordArray+0x150>)
 80018f8:	f00e f9ce 	bl	800fc98 <HAL_SPI_TransmitReceive>
 80018fc:	4603      	mov	r3, r0
 80018fe:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <DRV_CANFDSPI_ReadWordArray+0x144>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <DRV_CANFDSPI_ReadWordArray+0x148>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f00b fe46 	bl	800d59c <HAL_GPIO_WritePin>
 8001910:	e019      	b.n	8001946 <DRV_CANFDSPI_ReadWordArray+0xd6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <DRV_CANFDSPI_ReadWordArray+0x158>)
 8001918:	8811      	ldrh	r1, [r2, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f00b fe3d 	bl	800d59c <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001922:	8afb      	ldrh	r3, [r7, #22]
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 800192a:	4921      	ldr	r1, [pc, #132]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 800192c:	4824      	ldr	r0, [pc, #144]	; (80019c0 <DRV_CANFDSPI_ReadWordArray+0x150>)
 800192e:	f00e f9b3 	bl	800fc98 <HAL_SPI_TransmitReceive>
 8001932:	4603      	mov	r3, r0
 8001934:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <DRV_CANFDSPI_ReadWordArray+0x158>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f00b fe2b 	bl	800d59c <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001946:	7e7b      	ldrb	r3, [r7, #25]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <DRV_CANFDSPI_ReadWordArray+0xe2>
        return spiTransferError;
 800194c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001950:	e029      	b.n	80019a6 <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Convert Byte array to Word array
    n = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001956:	2300      	movs	r3, #0
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	e01e      	b.n	800199a <DRV_CANFDSPI_ReadWordArray+0x12a>
        w.word = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001960:	2300      	movs	r3, #0
 8001962:	83bb      	strh	r3, [r7, #28]
 8001964:	e00d      	b.n	8001982 <DRV_CANFDSPI_ReadWordArray+0x112>
            w.byte[j] = spiReceiveBuffer[n];
 8001966:	8b7a      	ldrh	r2, [r7, #26]
 8001968:	8bbb      	ldrh	r3, [r7, #28]
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 800196c:	5c8a      	ldrb	r2, [r1, r2]
 800196e:	3320      	adds	r3, #32
 8001970:	443b      	add	r3, r7
 8001972:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	83bb      	strh	r3, [r7, #28]
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	3301      	adds	r3, #1
 8001980:	837b      	strh	r3, [r7, #26]
 8001982:	8bbb      	ldrh	r3, [r7, #28]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d9ee      	bls.n	8001966 <DRV_CANFDSPI_ReadWordArray+0xf6>
        }
        rxd[i] = w.word;
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001994:	8bfb      	ldrh	r3, [r7, #30]
 8001996:	3301      	adds	r3, #1
 8001998:	83fb      	strh	r3, [r7, #30]
 800199a:	8bfa      	ldrh	r2, [r7, #30]
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3dc      	bcc.n	800195c <DRV_CANFDSPI_ReadWordArray+0xec>
    }

    return spiTransferError;
 80019a2:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002ec 	.word	0x200002ec
 80019b4:	20000c98 	.word	0x20000c98
 80019b8:	20000c96 	.word	0x20000c96
 80019bc:	2000034c 	.word	0x2000034c
 80019c0:	20000510 	.word	0x20000510
 80019c4:	20000c78 	.word	0x20000c78
 80019c8:	20000c76 	.word	0x20000c76

080019cc <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <DRV_CANFDSPI_Configure+0x118>)
 80019de:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	7a3b      	ldrb	r3, [r7, #8]
 80019ec:	f362 0304 	bfi	r3, r2, #0, #5
 80019f0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
 80019fe:	f362 1345 	bfi	r3, r2, #5, #1
 8001a02:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	7a3b      	ldrb	r3, [r7, #8]
 8001a10:	f362 1386 	bfi	r3, r2, #6, #1
 8001a14:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	7a7b      	ldrb	r3, [r7, #9]
 8001a22:	f362 0300 	bfi	r3, r2, #0, #1
 8001a26:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	7a7b      	ldrb	r3, [r7, #9]
 8001a34:	f362 0342 	bfi	r3, r2, #1, #2
 8001a38:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	f362 1304 	bfi	r3, r2, #4, #1
 8001a4a:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	785b      	ldrb	r3, [r3, #1]
 8001a50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	7abb      	ldrb	r3, [r7, #10]
 8001a58:	f362 0300 	bfi	r3, r2, #0, #1
 8001a5c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	f362 0341 	bfi	r3, r2, #1, #1
 8001a6e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7abb      	ldrb	r3, [r7, #10]
 8001a7c:	f362 0382 	bfi	r3, r2, #2, #1
 8001a80:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	7abb      	ldrb	r3, [r7, #10]
 8001a8e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001a92:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7abb      	ldrb	r3, [r7, #10]
 8001aa0:	f362 1304 	bfi	r3, r2, #4, #1
 8001aa4:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	f362 1307 	bfi	r3, r2, #4, #4
 8001ab6:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc4c 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e001      	b.n	8001ada <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	04980760 	.word	0x04980760

08001ae8 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001af2:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001afa:	b2d9      	uxtb	r1, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	7813      	ldrb	r3, [r2, #0]
 8001b00:	f361 0304 	bfi	r3, r1, #0, #5
 8001b04:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001b06:	7b3b      	ldrb	r3, [r7, #12]
 8001b08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b0c:	b2d9      	uxtb	r1, r3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	7813      	ldrb	r3, [r2, #0]
 8001b12:	f361 1345 	bfi	r3, r1, #5, #1
 8001b16:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b1e:	b2d9      	uxtb	r1, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	7813      	ldrb	r3, [r2, #0]
 8001b24:	f361 1386 	bfi	r3, r1, #6, #1
 8001b28:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
 8001b2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	7813      	ldrb	r3, [r2, #0]
 8001b36:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b3a:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001b42:	b2d9      	uxtb	r1, r3
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	7853      	ldrb	r3, [r2, #1]
 8001b48:	f361 0301 	bfi	r3, r1, #0, #2
 8001b4c:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	7853      	ldrb	r3, [r2, #1]
 8001b5a:	f361 0382 	bfi	r3, r1, #2, #1
 8001b5e:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	7853      	ldrb	r3, [r2, #1]
 8001b6c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b70:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001b72:	7bbb      	ldrb	r3, [r7, #14]
 8001b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	7853      	ldrb	r3, [r2, #1]
 8001b7e:	f361 1304 	bfi	r3, r1, #4, #1
 8001b82:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	7853      	ldrb	r3, [r2, #1]
 8001b90:	f361 1345 	bfi	r3, r1, #5, #1
 8001b94:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b9c:	b2d9      	uxtb	r1, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	7853      	ldrb	r3, [r2, #1]
 8001ba2:	f361 1386 	bfi	r3, r1, #6, #1
 8001ba6:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	7853      	ldrb	r3, [r2, #1]
 8001bb4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bb8:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	7893      	ldrb	r3, [r2, #2]
 8001bc6:	f361 0303 	bfi	r3, r1, #0, #4
 8001bca:	7093      	strb	r3, [r2, #2]

    return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	04980760 	.word	0x04980760

08001be0 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001bf8:	f107 020e 	add.w	r2, r7, #14
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa4f 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e01a      	b.n	8001c4e <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001c22:	7bba      	ldrb	r2, [r7, #14]
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001c2c:	7bba      	ldrb	r2, [r7, #14]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2103      	movs	r1, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff faa2 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001c44:	f06f 0301 	mvn.w	r3, #1
 8001c48:	e001      	b.n	8001c4e <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	603a      	str	r2, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	460b      	mov	r3, r1
 8001c66:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001c72:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001c74:	7a3b      	ldrb	r3, [r7, #8]
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f362 0304 	bfi	r3, r2, #0, #5
 8001c8c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	f362 1347 	bfi	r3, r2, #5, #3
 8001c9e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	7abb      	ldrb	r3, [r7, #10]
 8001cac:	f362 1346 	bfi	r3, r2, #5, #2
 8001cb0:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7abb      	ldrb	r3, [r7, #10]
 8001cbe:	f362 0304 	bfi	r3, r2, #0, #5
 8001cc2:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	7a3b      	ldrb	r3, [r7, #8]
 8001cd0:	f362 1386 	bfi	r3, r2, #6, #1
 8001cd4:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	89b9      	ldrh	r1, [r7, #12]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb34 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	00600400 	.word	0x00600400

08001d08 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001d12:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d1a:	b2d9      	uxtb	r1, r3
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	7813      	ldrb	r3, [r2, #0]
 8001d20:	f361 0300 	bfi	r3, r1, #0, #1
 8001d24:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	7813      	ldrb	r3, [r2, #0]
 8001d32:	f361 0345 	bfi	r3, r1, #1, #5
 8001d36:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001d3e:	b2d9      	uxtb	r1, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	7813      	ldrb	r3, [r2, #0]
 8001d44:	f361 1387 	bfi	r3, r1, #6, #2
 8001d48:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	7853      	ldrb	r3, [r2, #1]
 8001d56:	f361 0304 	bfi	r3, r1, #0, #5
 8001d5a:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001d62:	b2d9      	uxtb	r1, r3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	7853      	ldrb	r3, [r2, #1]
 8001d68:	f361 1347 	bfi	r3, r1, #5, #3
 8001d6c:	7053      	strb	r3, [r2, #1]

    return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	00600400 	.word	0x00600400

08001d80 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0a0      	sub	sp, #128	; 0x80
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3350      	adds	r3, #80	; 0x50
 8001da8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001dac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001db0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001db4:	7bf8      	ldrb	r0, [r7, #15]
 8001db6:	2303      	movs	r3, #3
 8001db8:	f7ff fd5a 	bl	8001870 <DRV_CANFDSPI_ReadWordArray>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001dc2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e0c5      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8001dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd2:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8001dd4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8001de2:	f06f 0301 	mvn.w	r3, #1
 8001de6:	e0b9      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fc3a 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 8001df8:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8001dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d202      	bcs.n	8001e0a <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8001e04:	f06f 0302 	mvn.w	r3, #2
 8001e08:	e0a8      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8001e12:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8001e20:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e28:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	791b      	ldrb	r3, [r3, #4]
 8001e48:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	795b      	ldrb	r3, [r3, #5]
 8001e4e:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	799b      	ldrb	r3, [r3, #6]
 8001e54:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	79db      	ldrb	r3, [r3, #7]
 8001e5a:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e62:	e010      	b.n	8001e86 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8001e64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e70:	3308      	adds	r3, #8
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	3380      	adds	r3, #128	; 0x80
 8001e76:	443b      	add	r3, r7
 8001e78:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8001e7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e80:	3301      	adds	r3, #1
 8001e82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d8e8      	bhi.n	8001e64 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8001e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02b      	beq.n	8001f02 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8001eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f1c3 0304 	rsb	r3, r3, #4
 8001eba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8001ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ed0:	e010      	b.n	8001ef4 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8001ed2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ed6:	f103 0208 	add.w	r2, r3, #8
 8001eda:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ede:	4413      	add	r3, r2
 8001ee0:	3380      	adds	r3, #128	; 0x80
 8001ee2:	443b      	add	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8001eea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ef4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d8e7      	bhi.n	8001ed2 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8001f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3308      	adds	r3, #8
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f107 0210 	add.w	r2, r7, #16
 8001f18:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001f1c:	7bf8      	ldrb	r0, [r7, #15]
 8001f1e:	f7ff fc25 	bl	800176c <DRV_CANFDSPI_WriteByteArray>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f28:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8001f30:	f06f 0303 	mvn.w	r3, #3
 8001f34:	e012      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8001f36:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8001f3a:	7bb9      	ldrb	r1, [r7, #14]
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f83a 	bl	8001fb8 <DRV_CANFDSPI_TransmitChannelUpdate>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f4a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 8001f52:	f06f 0304 	mvn.w	r3, #4
 8001f56:	e001      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8001f58:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3780      	adds	r7, #128	; 0x80
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	0052      	lsls	r2, r2, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3350      	adds	r3, #80	; 0x50
 8001f90:	81bb      	strh	r3, [r7, #12]
    a += 1;
 8001f92:	89bb      	ldrh	r3, [r7, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	89b9      	ldrh	r1, [r7, #12]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8ea 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8001fac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	0052      	lsls	r2, r2, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3351      	adds	r3, #81	; 0x51
 8001fde:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8001fec:	797b      	ldrb	r3, [r7, #5]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8001ff2:	7a7b      	ldrb	r3, [r7, #9]
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8001ffa:	7a7a      	ldrb	r2, [r7, #9]
 8001ffc:	89b9      	ldrh	r1, [r7, #12]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f8bb 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e001      	b.n	800201c <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	603a      	str	r2, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	460b      	mov	r3, r1
 8002032:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	333e      	adds	r3, #62	; 0x3e
 8002046:	b29b      	uxth	r3, r3
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	89b9      	ldrh	r1, [r7, #12]
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f982 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	603a      	str	r2, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	460b      	mov	r3, r1
 8002076:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	b29b      	uxth	r3, r3
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	b29b      	uxth	r3, r3
 800208e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002092:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	89b9      	ldrh	r1, [r7, #12]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f95e 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	4603      	mov	r3, r0
 80020c4:	71bb      	strb	r3, [r7, #6]
 80020c6:	460b      	mov	r3, r1
 80020c8:	717b      	strb	r3, [r7, #5]
 80020ca:	4613      	mov	r3, r2
 80020cc:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80020d8:	7a3b      	ldrb	r3, [r7, #8]
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	723b      	strb	r3, [r7, #8]
 80020e0:	e003      	b.n	80020ea <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	f36f 13c7 	bfc	r3, #7, #1
 80020e8:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	f362 0304 	bfi	r3, r2, #0, #5
 80020f8:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002102:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8002104:	7a3a      	ldrb	r2, [r7, #8]
 8002106:	89b9      	ldrh	r1, [r7, #12]
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f836 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	603a      	str	r2, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	460b      	mov	r3, r1
 800212e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800213e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002142:	e033      	b.n	80021ac <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002146:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002148:	7a3b      	ldrb	r3, [r7, #8]
 800214a:	f36f 13c7 	bfc	r3, #7, #1
 800214e:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002158:	b2da      	uxtb	r2, r3
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f362 0304 	bfi	r3, r2, #0, #5
 8002160:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f362 1347 	bfi	r3, r2, #5, #3
 8002172:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7a3b      	ldrb	r3, [r7, #8]
 8002180:	f362 1345 	bfi	r3, r2, #5, #1
 8002184:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002186:	79bb      	ldrb	r3, [r7, #6]
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	0052      	lsls	r2, r2, #1
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	3350      	adds	r3, #80	; 0x50
 8002196:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f8dc 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	00600400 	.word	0x00600400

080021b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 80021c2:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80021ca:	b2d9      	uxtb	r1, r3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	7813      	ldrb	r3, [r2, #0]
 80021d0:	f361 0345 	bfi	r3, r1, #1, #5
 80021d4:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80021dc:	b2d9      	uxtb	r1, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	8813      	ldrh	r3, [r2, #0]
 80021e2:	f361 1388 	bfi	r3, r1, #6, #3
 80021e6:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80021e8:	7b3b      	ldrb	r3, [r7, #12]
 80021ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	7813      	ldrb	r3, [r2, #0]
 80021f4:	f361 0300 	bfi	r3, r1, #0, #1
 80021f8:	7013      	strb	r3, [r2, #0]

    return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	00600400 	.word	0x00600400

0800220c <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0a0      	sub	sp, #128	; 0x80
 8002210:	af00      	add	r7, sp, #0
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	460b      	mov	r3, r1
 800221c:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	0052      	lsls	r2, r2, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	b29b      	uxth	r3, r3
 800223e:	3350      	adds	r3, #80	; 0x50
 8002240:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002244:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002248:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800224c:	7bf8      	ldrb	r0, [r7, #15]
 800224e:	2303      	movs	r3, #3
 8002250:	f7ff fb0e 	bl	8001870 <DRV_CANFDSPI_ReadWordArray>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800225a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e0cd      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 800226c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800227a:	f06f 0301 	mvn.w	r3, #1
 800227e:	e0c1      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002282:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002286:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002288:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	b29b      	uxth	r3, r3
 8002292:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 8002296:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800229a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 80022a2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80022a6:	3308      	adds	r3, #8
 80022a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80022ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 80022ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022be:	3304      	adds	r3, #4
 80022c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80022c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80022d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3304      	adds	r3, #4
 80022de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80022e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022e6:	2b4c      	cmp	r3, #76	; 0x4c
 80022e8:	d902      	bls.n	80022f0 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80022ea:	234c      	movs	r3, #76	; 0x4c
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80022f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f107 0214 	add.w	r2, r7, #20
 80022fa:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80022fe:	7bf8      	ldrb	r0, [r7, #15]
 8002300:	f7ff f9a4 	bl	800164c <DRV_CANFDSPI_ReadByteArray>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800230a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 8002312:	f06f 0302 	mvn.w	r3, #2
 8002316:	e075      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 8002318:	7d3b      	ldrb	r3, [r7, #20]
 800231a:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 800231c:	7d7b      	ldrb	r3, [r7, #21]
 800231e:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8002320:	7dbb      	ldrb	r3, [r7, #22]
 8002322:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 800232e:	7e3b      	ldrb	r3, [r7, #24]
 8002330:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 8002332:	7e7b      	ldrb	r3, [r7, #25]
 8002334:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8002336:	7ebb      	ldrb	r3, [r7, #26]
 8002338:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 800233a:	7efb      	ldrb	r3, [r7, #27]
 800233c:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002344:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d027      	beq.n	80023a2 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 8002352:	7f3b      	ldrb	r3, [r7, #28]
 8002354:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8002356:	7f7b      	ldrb	r3, [r7, #29]
 8002358:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 800235a:	7fbb      	ldrb	r3, [r7, #30]
 800235c:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002368:	2300      	movs	r3, #0
 800236a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800236e:	e011      	b.n	8002394 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002370:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002374:	f103 020c 	add.w	r2, r3, #12
 8002378:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	440b      	add	r3, r1
 8002380:	3280      	adds	r2, #128	; 0x80
 8002382:	443a      	add	r2, r7
 8002384:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002388:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800238a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800238e:	3301      	adds	r3, #1
 8002390:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002394:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002398:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800239c:	429a      	cmp	r2, r3
 800239e:	d3e7      	bcc.n	8002370 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 80023a0:	e01e      	b.n	80023e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023ae:	e011      	b.n	80023d4 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 80023b0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023b4:	f103 0208 	add.w	r2, r3, #8
 80023b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	440b      	add	r3, r1
 80023c0:	3280      	adds	r2, #128	; 0x80
 80023c2:	443a      	add	r2, r7
 80023c4:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80023c8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80023ca:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023ce:	3301      	adds	r3, #1
 80023d0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023d4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80023d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3e7      	bcc.n	80023b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80023e0:	7bba      	ldrb	r2, [r7, #14]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f810 	bl	800240c <DRV_CANFDSPI_ReceiveChannelUpdate>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80023f2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80023fa:	f06f 0303 	mvn.w	r3, #3
 80023fe:	e001      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 8002400:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002404:	4618      	mov	r0, r3
 8002406:	3780      	adds	r7, #128	; 0x80
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	460a      	mov	r2, r1
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	4613      	mov	r3, r2
 800241a:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	b29b      	uxth	r3, r3
 8002436:	3351      	adds	r3, #81	; 0x51
 8002438:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 800243a:	7a7b      	ldrb	r3, [r7, #9]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002442:	7a7a      	ldrb	r2, [r7, #9]
 8002444:	89f9      	ldrh	r1, [r7, #14]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe97 	bl	800117c <DRV_CANFDSPI_WriteByte>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8002452:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	460a      	mov	r2, r1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	4613      	mov	r3, r2
 800246c:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002476:	231e      	movs	r3, #30
 8002478:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800247e:	f107 0208 	add.w	r2, r7, #8
 8002482:	89b9      	ldrh	r1, [r7, #12]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ffe0 	bl	800144c <DRV_CANFDSPI_ReadHalfWord>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	e01b      	b.n	80024d6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024a6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 80024b4:	893a      	ldrh	r2, [r7, #8]
 80024b6:	89b9      	ldrh	r1, [r7, #12]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f84e 	bl	800155c <DRV_CANFDSPI_WriteHalfWord>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80024c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	e001      	b.n	80024d6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	603a      	str	r2, [r7, #0]
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	460b      	mov	r3, r1
 80024ec:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	0052      	lsls	r2, r2, #1
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	b29b      	uxth	r3, r3
 8002508:	3354      	adds	r3, #84	; 0x54
 800250a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800250c:	f107 0208 	add.w	r2, r7, #8
 8002510:	89b9      	ldrh	r1, [r7, #12]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fdc5 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e007      	b.n	800253c <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 800252c:	7a3b      	ldrb	r3, [r7, #8]
 800252e:	f003 0317 	and.w	r3, r3, #23
 8002532:	b2da      	uxtb	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	603a      	str	r2, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	460b      	mov	r3, r1
 8002552:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8002562:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002566:	e022      	b.n	80025ae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800256c:	79bb      	ldrb	r3, [r7, #6]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	0052      	lsls	r2, r2, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	b29b      	uxth	r3, r3
 800257a:	3354      	adds	r3, #84	; 0x54
 800257c:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800257e:	f107 0208 	add.w	r2, r7, #8
 8002582:	89b9      	ldrh	r1, [r7, #12]
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fd8c 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	e007      	b.n	80025ae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	460b      	mov	r3, r1
 80025c2:	71bb      	strb	r3, [r7, #6]
 80025c4:	4613      	mov	r3, r2
 80025c6:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d102      	bne.n	80025dc <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80025d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80025da:	e036      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	0052      	lsls	r2, r2, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3350      	adds	r3, #80	; 0x50
 80025ec:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	89b9      	ldrh	r1, [r7, #12]
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd52 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	e01b      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b25b      	sxtb	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002628:	7a3a      	ldrb	r2, [r7, #8]
 800262a:	89b9      	ldrh	r1, [r7, #12]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fda4 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8002640:	f06f 0301 	mvn.w	r3, #1
 8002644:	e001      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800266a:	2334      	movs	r3, #52	; 0x34
 800266c:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002672:	f107 0210 	add.w	r2, r7, #16
 8002676:	8ab9      	ldrh	r1, [r7, #20]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fde8 	bl	8001250 <DRV_CANFDSPI_ReadWord>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	e00d      	b.n	80026ae <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002692:	7c7a      	ldrb	r2, [r7, #17]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002698:	7c3a      	ldrb	r2, [r7, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800269e:	7cbb      	ldrb	r3, [r7, #18]
 80026a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80026aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80026c8:	f107 020e 	add.w	r2, r7, #14
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f640 610c 	movw	r1, #3596	; 0xe0c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fce6 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80026dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	e015      	b.n	8002716 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80026f4:	7bba      	ldrb	r2, [r7, #14]
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f640 610c 	movw	r1, #3596	; 0xe0c
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fd3d 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 800270e:	f06f 0301 	mvn.w	r3, #1
 8002712:	e000      	b.n	8002716 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b090      	sub	sp, #64	; 0x40
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	460a      	mov	r2, r1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	4613      	mov	r3, r2
 800272c:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002738:	e008      	b.n	800274c <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 800273a:	f107 0208 	add.w	r2, r7, #8
 800273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002740:	4413      	add	r3, r2
 8002742:	79ba      	ldrb	r2, [r7, #6]
 8002744:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3301      	adds	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	2b2f      	cmp	r3, #47	; 0x2f
 8002750:	d9f3      	bls.n	800273a <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002756:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	e016      	b.n	800278c <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 800275e:	f107 0208 	add.w	r2, r7, #8
 8002762:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002764:	79f8      	ldrb	r0, [r7, #7]
 8002766:	2330      	movs	r3, #48	; 0x30
 8002768:	f7ff f800 	bl	800176c <DRV_CANFDSPI_WriteByteArray>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8002772:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e00a      	b.n	8002796 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002780:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002782:	3330      	adds	r3, #48	; 0x30
 8002784:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	3301      	adds	r3, #1
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	2b29      	cmp	r3, #41	; 0x29
 8002790:	d9e5      	bls.n	800275e <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002792:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002796:	4618      	mov	r0, r3
 8002798:	3740      	adds	r7, #64	; 0x40
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4604      	mov	r4, r0
 80027a6:	4608      	mov	r0, r1
 80027a8:	4611      	mov	r1, r2
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	4603      	mov	r3, r0
 80027b2:	71bb      	strb	r3, [r7, #6]
 80027b4:	460b      	mov	r3, r1
 80027b6:	717b      	strb	r3, [r7, #5]
 80027b8:	4613      	mov	r3, r2
 80027ba:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80027c0:	793b      	ldrb	r3, [r7, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d036      	beq.n	8002834 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	dc4c      	bgt.n	8002864 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d018      	beq.n	8002804 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80027d2:	e047      	b.n	8002864 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80027d4:	79ba      	ldrb	r2, [r7, #6]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f84c 	bl	8002878 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80027ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f0:	e03d      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80027f2:	797a      	ldrb	r2, [r7, #5]
 80027f4:	79b9      	ldrb	r1, [r7, #6]
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f8c3 	bl	8002984 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
            break;
 8002802:	e032      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002804:	79ba      	ldrb	r2, [r7, #6]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 faf2 	bl	8002df4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 800281c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002820:	e025      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002822:	797a      	ldrb	r2, [r7, #5]
 8002824:	79b9      	ldrb	r1, [r7, #6]
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fb6f 	bl	8002f0c <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
            break;
 8002832:	e01a      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002834:	79ba      	ldrb	r2, [r7, #6]
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fd10 	bl	8003260 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	e00d      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002852:	797a      	ldrb	r2, [r7, #5]
 8002854:	79b9      	ldrb	r1, [r7, #6]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd8d 	bl	8003378 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
            break;
 8002862:	e002      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002864:	23ff      	movs	r3, #255	; 0xff
 8002866:	73fb      	strb	r3, [r7, #15]
            break;
 8002868:	bf00      	nop
    }

    return spiTransferError;
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
	...

08002878 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 800288e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d862      	bhi.n	800295c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028e5 	.word	0x080028e5
 80028a0:	080028e5 	.word	0x080028e5
 80028a4:	080028e5 	.word	0x080028e5
 80028a8:	080028e5 	.word	0x080028e5
 80028ac:	080028e5 	.word	0x080028e5
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	080028e5 	.word	0x080028e5
 80028b8:	080028e5 	.word	0x080028e5
 80028bc:	08002903 	.word	0x08002903
 80028c0:	08002903 	.word	0x08002903
 80028c4:	08002903 	.word	0x08002903
 80028c8:	08002903 	.word	0x08002903
 80028cc:	08002903 	.word	0x08002903
 80028d0:	08002903 	.word	0x08002903
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002921 	.word	0x08002921
 80028dc:	08002921 	.word	0x08002921
 80028e0:	0800293f 	.word	0x0800293f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80028e8:	233e      	movs	r3, #62	; 0x3e
 80028ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80028ec:	7a7b      	ldrb	r3, [r7, #9]
 80028ee:	220f      	movs	r2, #15
 80028f0:	f362 0306 	bfi	r3, r2, #0, #7
 80028f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80028f6:	7a3b      	ldrb	r3, [r7, #8]
 80028f8:	220f      	movs	r2, #15
 80028fa:	f362 0306 	bfi	r3, r2, #0, #7
 80028fe:	723b      	strb	r3, [r7, #8]
            break;
 8002900:	e02f      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002906:	237e      	movs	r3, #126	; 0x7e
 8002908:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800290a:	7a7b      	ldrb	r3, [r7, #9]
 800290c:	221f      	movs	r2, #31
 800290e:	f362 0306 	bfi	r3, r2, #0, #7
 8002912:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002914:	7a3b      	ldrb	r3, [r7, #8]
 8002916:	221f      	movs	r2, #31
 8002918:	f362 0306 	bfi	r3, r2, #0, #7
 800291c:	723b      	strb	r3, [r7, #8]
            break;
 800291e:	e020      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002924:	231e      	movs	r3, #30
 8002926:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002928:	7a7b      	ldrb	r3, [r7, #9]
 800292a:	2207      	movs	r2, #7
 800292c:	f362 0306 	bfi	r3, r2, #0, #7
 8002930:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002932:	7a3b      	ldrb	r3, [r7, #8]
 8002934:	2207      	movs	r2, #7
 8002936:	f362 0306 	bfi	r3, r2, #0, #7
 800293a:	723b      	strb	r3, [r7, #8]
            break;
 800293c:	e011      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002942:	23fe      	movs	r3, #254	; 0xfe
 8002944:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	f362 0306 	bfi	r3, r2, #0, #7
 800294e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002950:	7a3b      	ldrb	r3, [r7, #8]
 8002952:	223f      	movs	r2, #63	; 0x3f
 8002954:	f362 0306 	bfi	r3, r2, #0, #7
 8002958:	723b      	strb	r3, [r7, #8]
            break;
 800295a:	e002      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	e009      	b.n	8002976 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2104      	movs	r1, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fcf7 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	003e0f0f 	.word	0x003e0f0f

08002984 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	460b      	mov	r3, r1
 8002990:	71bb      	strb	r3, [r7, #6]
 8002992:	4613      	mov	r3, r2
 8002994:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800299a:	4be2      	ldr	r3, [pc, #904]	; (8002d24 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 800299c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80029a2:	7abb      	ldrb	r3, [r7, #10]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f362 0301 	bfi	r3, r2, #0, #2
 80029aa:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	2b11      	cmp	r3, #17
 80029b4:	f200 81f6 	bhi.w	8002da4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	08002a09 	.word	0x08002a09
 80029c4:	08002a47 	.word	0x08002a47
 80029c8:	08002a85 	.word	0x08002a85
 80029cc:	08002ac3 	.word	0x08002ac3
 80029d0:	08002b01 	.word	0x08002b01
 80029d4:	08002b3f 	.word	0x08002b3f
 80029d8:	08002b79 	.word	0x08002b79
 80029dc:	08002bad 	.word	0x08002bad
 80029e0:	08002bdf 	.word	0x08002bdf
 80029e4:	08002c25 	.word	0x08002c25
 80029e8:	08002c6b 	.word	0x08002c6b
 80029ec:	08002ca9 	.word	0x08002ca9
 80029f0:	08002ce7 	.word	0x08002ce7
 80029f4:	08002d29 	.word	0x08002d29
 80029f8:	08002d67 	.word	0x08002d67
 80029fc:	08002ac3 	.word	0x08002ac3
 8002a00:	08002b79 	.word	0x08002b79
 8002a04:	08002bdf 	.word	0x08002bdf
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	221e      	movs	r2, #30
 8002a10:	f362 0304 	bfi	r3, r2, #0, #5
 8002a14:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	2207      	movs	r2, #7
 8002a1a:	f362 0303 	bfi	r3, r2, #0, #4
 8002a1e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002a20:	7b3b      	ldrb	r3, [r7, #12]
 8002a22:	2207      	movs	r2, #7
 8002a24:	f362 0303 	bfi	r3, r2, #0, #4
 8002a28:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002a2a:	7a7b      	ldrb	r3, [r7, #9]
 8002a2c:	221f      	movs	r2, #31
 8002a2e:	f362 0306 	bfi	r3, r2, #0, #7
 8002a32:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	7a3b      	ldrb	r3, [r7, #8]
 8002a3e:	f362 0305 	bfi	r3, r2, #0, #6
 8002a42:	723b      	strb	r3, [r7, #8]
            break;
 8002a44:	e1b1      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	220e      	movs	r2, #14
 8002a4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002a52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002a54:	7b7b      	ldrb	r3, [r7, #13]
 8002a56:	2203      	movs	r2, #3
 8002a58:	f362 0303 	bfi	r3, r2, #0, #4
 8002a5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002a5e:	7b3b      	ldrb	r3, [r7, #12]
 8002a60:	2203      	movs	r2, #3
 8002a62:	f362 0303 	bfi	r3, r2, #0, #4
 8002a66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002a68:	7a7b      	ldrb	r3, [r7, #9]
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002a70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	7a3b      	ldrb	r3, [r7, #8]
 8002a7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002a80:	723b      	strb	r3, [r7, #8]
            break;
 8002a82:	e192      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002a90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002a92:	7b7b      	ldrb	r3, [r7, #13]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f362 0303 	bfi	r3, r2, #0, #4
 8002a9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002a9c:	7b3b      	ldrb	r3, [r7, #12]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002aa4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002aa6:	7a7b      	ldrb	r3, [r7, #9]
 8002aa8:	2209      	movs	r2, #9
 8002aaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002aae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	7a3b      	ldrb	r3, [r7, #8]
 8002aba:	f362 0305 	bfi	r3, r2, #0, #6
 8002abe:	723b      	strb	r3, [r7, #8]
            break;
 8002ac0:	e173      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002ac6:	7bbb      	ldrb	r3, [r7, #14]
 8002ac8:	2206      	movs	r2, #6
 8002aca:	f362 0304 	bfi	r3, r2, #0, #5
 8002ace:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002ad0:	7b7b      	ldrb	r3, [r7, #13]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ad8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002ada:	7b3b      	ldrb	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f362 0303 	bfi	r3, r2, #0, #4
 8002ae2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ae4:	7a7b      	ldrb	r3, [r7, #9]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	f362 0306 	bfi	r3, r2, #0, #7
 8002aec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	7a3b      	ldrb	r3, [r7, #8]
 8002af8:	f362 0305 	bfi	r3, r2, #0, #6
 8002afc:	723b      	strb	r3, [r7, #8]
            break;
 8002afe:	e154      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f362 0304 	bfi	r3, r2, #0, #5
 8002b0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f362 0303 	bfi	r3, r2, #0, #4
 8002b16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002b18:	7b3b      	ldrb	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002b20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002b22:	7a7b      	ldrb	r3, [r7, #9]
 8002b24:	2205      	movs	r2, #5
 8002b26:	f362 0306 	bfi	r3, r2, #0, #7
 8002b2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	7a3b      	ldrb	r3, [r7, #8]
 8002b36:	f362 0305 	bfi	r3, r2, #0, #6
 8002b3a:	723b      	strb	r3, [r7, #8]
            break;
 8002b3c:	e135      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f362 0304 	bfi	r3, r2, #0, #5
 8002b4a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	f36f 0303 	bfc	r3, #0, #4
 8002b52:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b54:	7b3b      	ldrb	r3, [r7, #12]
 8002b56:	f36f 0303 	bfc	r3, #0, #4
 8002b5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	f362 0306 	bfi	r3, r2, #0, #7
 8002b64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	7a3b      	ldrb	r3, [r7, #8]
 8002b70:	f362 0305 	bfi	r3, r2, #0, #6
 8002b74:	723b      	strb	r3, [r7, #8]
            break;
 8002b76:	e118      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f362 0304 	bfi	r3, r2, #0, #5
 8002b84:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	f36f 0303 	bfc	r3, #0, #4
 8002b8c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b8e:	7b3b      	ldrb	r3, [r7, #12]
 8002b90:	f36f 0303 	bfc	r3, #0, #4
 8002b94:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002b96:	7a7b      	ldrb	r3, [r7, #9]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002ba0:	7a3b      	ldrb	r3, [r7, #8]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f362 0305 	bfi	r3, r2, #0, #6
 8002ba8:	723b      	strb	r3, [r7, #8]
            break;
 8002baa:	e0fe      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f362 0304 	bfi	r3, r2, #0, #5
 8002bb8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002bba:	7b7b      	ldrb	r3, [r7, #13]
 8002bbc:	f36f 0303 	bfc	r3, #0, #4
 8002bc0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	f36f 0303 	bfc	r3, #0, #4
 8002bc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002bca:	7a7b      	ldrb	r3, [r7, #9]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002bd4:	7a3b      	ldrb	r3, [r7, #8]
 8002bd6:	f36f 0305 	bfc	r3, #0, #6
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e0e5      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	221e      	movs	r2, #30
 8002be6:	f362 0304 	bfi	r3, r2, #0, #5
 8002bea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002bec:	7b7b      	ldrb	r3, [r7, #13]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	f362 0303 	bfi	r3, r2, #0, #4
 8002bf4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002bf6:	7b3b      	ldrb	r3, [r7, #12]
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	f362 0303 	bfi	r3, r2, #0, #4
 8002bfe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c00:	7a7b      	ldrb	r3, [r7, #9]
 8002c02:	221f      	movs	r2, #31
 8002c04:	f362 0306 	bfi	r3, r2, #0, #7
 8002c08:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	7a3b      	ldrb	r3, [r7, #8]
 8002c14:	f362 0305 	bfi	r3, r2, #0, #6
 8002c18:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c1a:	7abb      	ldrb	r3, [r7, #10]
 8002c1c:	f36f 0301 	bfc	r3, #0, #2
 8002c20:	72bb      	strb	r3, [r7, #10]
            break;
 8002c22:	e0c2      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	2211      	movs	r2, #17
 8002c2c:	f362 0304 	bfi	r3, r2, #0, #5
 8002c30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002c32:	7b7b      	ldrb	r3, [r7, #13]
 8002c34:	2204      	movs	r2, #4
 8002c36:	f362 0303 	bfi	r3, r2, #0, #4
 8002c3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	f362 0303 	bfi	r3, r2, #0, #4
 8002c44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002c46:	7a7b      	ldrb	r3, [r7, #9]
 8002c48:	2212      	movs	r2, #18
 8002c4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002c4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	7a3b      	ldrb	r3, [r7, #8]
 8002c5a:	f362 0305 	bfi	r3, r2, #0, #6
 8002c5e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	f36f 0301 	bfc	r3, #0, #2
 8002c66:	72bb      	strb	r3, [r7, #10]
            break;
 8002c68:	e09f      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002c6e:	7bbb      	ldrb	r3, [r7, #14]
 8002c70:	221e      	movs	r2, #30
 8002c72:	f362 0304 	bfi	r3, r2, #0, #5
 8002c76:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002c78:	7b7b      	ldrb	r3, [r7, #13]
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002c80:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002c82:	7b3b      	ldrb	r3, [r7, #12]
 8002c84:	2207      	movs	r2, #7
 8002c86:	f362 0303 	bfi	r3, r2, #0, #4
 8002c8a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c8c:	7a7b      	ldrb	r3, [r7, #9]
 8002c8e:	221f      	movs	r2, #31
 8002c90:	f362 0306 	bfi	r3, r2, #0, #7
 8002c94:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ca0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ca4:	723b      	strb	r3, [r7, #8]
            break;
 8002ca6:	e080      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	2212      	movs	r2, #18
 8002cb0:	f362 0304 	bfi	r3, r2, #0, #5
 8002cb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	2205      	movs	r2, #5
 8002cba:	f362 0303 	bfi	r3, r2, #0, #4
 8002cbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	2213      	movs	r2, #19
 8002cce:	f362 0306 	bfi	r3, r2, #0, #7
 8002cd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	f362 0305 	bfi	r3, r2, #0, #6
 8002ce2:	723b      	strb	r3, [r7, #8]
            break;
 8002ce4:	e061      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	220e      	movs	r2, #14
 8002cee:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f362 0303 	bfi	r3, r2, #0, #4
 8002d06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	7a3b      	ldrb	r3, [r7, #8]
 8002d1c:	f362 0305 	bfi	r3, r2, #0, #6
 8002d20:	723b      	strb	r3, [r7, #8]
            break;
 8002d22:	e042      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002d24:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	f362 0304 	bfi	r3, r2, #0, #5
 8002d34:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f362 0303 	bfi	r3, r2, #0, #4
 8002d3e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d40:	7b3b      	ldrb	r3, [r7, #12]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f362 0303 	bfi	r3, r2, #0, #4
 8002d48:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d4a:	7a7b      	ldrb	r3, [r7, #9]
 8002d4c:	2209      	movs	r2, #9
 8002d4e:	f362 0306 	bfi	r3, r2, #0, #7
 8002d52:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	f362 0305 	bfi	r3, r2, #0, #6
 8002d62:	723b      	strb	r3, [r7, #8]
            break;
 8002d64:	e021      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	2206      	movs	r2, #6
 8002d6e:	f362 0304 	bfi	r3, r2, #0, #5
 8002d72:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f362 0303 	bfi	r3, r2, #0, #4
 8002d7c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d7e:	7b3b      	ldrb	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f362 0303 	bfi	r3, r2, #0, #4
 8002d86:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d88:	7a7b      	ldrb	r3, [r7, #9]
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d90:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	7a3b      	ldrb	r3, [r7, #8]
 8002d9c:	f362 0305 	bfi	r3, r2, #0, #6
 8002da0:	723b      	strb	r3, [r7, #8]
            break;
 8002da2:	e002      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	e01f      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2108      	movs	r1, #8
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fad3 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8002dc2:	f06f 0301 	mvn.w	r3, #1
 8002dc6:	e010      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	210c      	movs	r1, #12
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fac4 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8002de0:	f06f 0302 	mvn.w	r3, #2
 8002de4:	e001      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8002e0a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	2b11      	cmp	r3, #17
 8002e10:	d862      	bhi.n	8002ed8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e61 	.word	0x08002e61
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002ed9 	.word	0x08002ed9
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e7f 	.word	0x08002e7f
 8002e3c:	08002e7f 	.word	0x08002e7f
 8002e40:	08002e7f 	.word	0x08002e7f
 8002e44:	08002e7f 	.word	0x08002e7f
 8002e48:	08002e7f 	.word	0x08002e7f
 8002e4c:	08002e7f 	.word	0x08002e7f
 8002e50:	08002e7f 	.word	0x08002e7f
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e9d 	.word	0x08002e9d
 8002e5c:	08002ebb 	.word	0x08002ebb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002e64:	231e      	movs	r3, #30
 8002e66:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002e68:	7a7b      	ldrb	r3, [r7, #9]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e70:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002e72:	7a3b      	ldrb	r3, [r7, #8]
 8002e74:	2207      	movs	r2, #7
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	723b      	strb	r3, [r7, #8]
            break;
 8002e7c:	e02f      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002e82:	233e      	movs	r3, #62	; 0x3e
 8002e84:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002e86:	7a7b      	ldrb	r3, [r7, #9]
 8002e88:	220f      	movs	r2, #15
 8002e8a:	f362 0306 	bfi	r3, r2, #0, #7
 8002e8e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002e90:	7a3b      	ldrb	r3, [r7, #8]
 8002e92:	220f      	movs	r2, #15
 8002e94:	f362 0306 	bfi	r3, r2, #0, #7
 8002e98:	723b      	strb	r3, [r7, #8]
            break;
 8002e9a:	e020      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002ea0:	230e      	movs	r3, #14
 8002ea2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002ea4:	7a7b      	ldrb	r3, [r7, #9]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	f362 0306 	bfi	r3, r2, #0, #7
 8002eac:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002eae:	7a3b      	ldrb	r3, [r7, #8]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	f362 0306 	bfi	r3, r2, #0, #7
 8002eb6:	723b      	strb	r3, [r7, #8]
            break;
 8002eb8:	e011      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002ebe:	237e      	movs	r3, #126	; 0x7e
 8002ec0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002ec2:	7a7b      	ldrb	r3, [r7, #9]
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	f362 0306 	bfi	r3, r2, #0, #7
 8002eca:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002ecc:	7a3b      	ldrb	r3, [r7, #8]
 8002ece:	221f      	movs	r2, #31
 8002ed0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ed4:	723b      	strb	r3, [r7, #8]
            break;
 8002ed6:	e002      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e010      	b.n	8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fa39 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8002ef6:	f06f 0301 	mvn.w	r3, #1
 8002efa:	e001      	b.n	8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	003e0f0f 	.word	0x003e0f0f

08002f0c <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	460b      	mov	r3, r1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002f22:	4bce      	ldr	r3, [pc, #824]	; (800325c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8002f24:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002f2a:	7abb      	ldrb	r3, [r7, #10]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f362 0301 	bfi	r3, r2, #0, #2
 8002f32:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	f200 8166 	bhi.w	800320c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002fcf 	.word	0x08002fcf
 8002f50:	0800320d 	.word	0x0800320d
 8002f54:	0800300d 	.word	0x0800300d
 8002f58:	08003047 	.word	0x08003047
 8002f5c:	08003081 	.word	0x08003081
 8002f60:	08003081 	.word	0x08003081
 8002f64:	08003081 	.word	0x08003081
 8002f68:	08003087 	.word	0x08003087
 8002f6c:	080030cd 	.word	0x080030cd
 8002f70:	08003113 	.word	0x08003113
 8002f74:	08003151 	.word	0x08003151
 8002f78:	0800318f 	.word	0x0800318f
 8002f7c:	080031cd 	.word	0x080031cd
 8002f80:	080031d3 	.word	0x080031d3
 8002f84:	0800300d 	.word	0x0800300d
 8002f88:	08003081 	.word	0x08003081
 8002f8c:	08003087 	.word	0x08003087
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	220e      	movs	r2, #14
 8002f98:	f362 0304 	bfi	r3, r2, #0, #5
 8002f9c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f9e:	7b7b      	ldrb	r3, [r7, #13]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fa8:	7b3b      	ldrb	r3, [r7, #12]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f362 0303 	bfi	r3, r2, #0, #4
 8002fb0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fb2:	7a7b      	ldrb	r3, [r7, #9]
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	f362 0306 	bfi	r3, r2, #0, #7
 8002fba:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	7a3b      	ldrb	r3, [r7, #8]
 8002fc6:	f362 0305 	bfi	r3, r2, #0, #6
 8002fca:	723b      	strb	r3, [r7, #8]
            break;
 8002fcc:	e121      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002fd2:	7bbb      	ldrb	r3, [r7, #14]
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	f362 0304 	bfi	r3, r2, #0, #5
 8002fda:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002fe6:	7b3b      	ldrb	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f362 0303 	bfi	r3, r2, #0, #4
 8002fee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ff0:	7a7b      	ldrb	r3, [r7, #9]
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	f362 0306 	bfi	r3, r2, #0, #7
 8002ff8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003000:	b2da      	uxtb	r2, r3
 8003002:	7a3b      	ldrb	r3, [r7, #8]
 8003004:	f362 0305 	bfi	r3, r2, #0, #6
 8003008:	723b      	strb	r3, [r7, #8]
            break;
 800300a:	e102      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	2202      	movs	r2, #2
 8003014:	f362 0304 	bfi	r3, r2, #0, #5
 8003018:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800301a:	7b7b      	ldrb	r3, [r7, #13]
 800301c:	f36f 0303 	bfc	r3, #0, #4
 8003020:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003022:	7b3b      	ldrb	r3, [r7, #12]
 8003024:	f36f 0303 	bfc	r3, #0, #4
 8003028:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	2203      	movs	r2, #3
 800302e:	f362 0306 	bfi	r3, r2, #0, #7
 8003032:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303a:	b2da      	uxtb	r2, r3
 800303c:	7a3b      	ldrb	r3, [r7, #8]
 800303e:	f362 0305 	bfi	r3, r2, #0, #6
 8003042:	723b      	strb	r3, [r7, #8]
            break;
 8003044:	e0e5      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	2201      	movs	r2, #1
 800304e:	f362 0304 	bfi	r3, r2, #0, #5
 8003052:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003054:	7b7b      	ldrb	r3, [r7, #13]
 8003056:	f36f 0303 	bfc	r3, #0, #4
 800305a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	f36f 0303 	bfc	r3, #0, #4
 8003062:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2202      	movs	r2, #2
 8003068:	f362 0306 	bfi	r3, r2, #0, #7
 800306c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f362 0305 	bfi	r3, r2, #0, #6
 800307c:	723b      	strb	r3, [r7, #8]
            break;
 800307e:	e0c8      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e0e5      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	221e      	movs	r2, #30
 800308e:	f362 0304 	bfi	r3, r2, #0, #5
 8003092:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003094:	7b7b      	ldrb	r3, [r7, #13]
 8003096:	2207      	movs	r2, #7
 8003098:	f362 0303 	bfi	r3, r2, #0, #4
 800309c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	2207      	movs	r2, #7
 80030a2:	f362 0303 	bfi	r3, r2, #0, #4
 80030a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	221f      	movs	r2, #31
 80030ac:	f362 0306 	bfi	r3, r2, #0, #7
 80030b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	7a3b      	ldrb	r3, [r7, #8]
 80030bc:	f362 0305 	bfi	r3, r2, #0, #6
 80030c0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80030c2:	7abb      	ldrb	r3, [r7, #10]
 80030c4:	f36f 0301 	bfc	r3, #0, #2
 80030c8:	72bb      	strb	r3, [r7, #10]
            break;
 80030ca:	e0a2      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80030d0:	7bbb      	ldrb	r3, [r7, #14]
 80030d2:	2211      	movs	r2, #17
 80030d4:	f362 0304 	bfi	r3, r2, #0, #5
 80030d8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80030da:	7b7b      	ldrb	r3, [r7, #13]
 80030dc:	2204      	movs	r2, #4
 80030de:	f362 0303 	bfi	r3, r2, #0, #4
 80030e2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80030e4:	7b3b      	ldrb	r3, [r7, #12]
 80030e6:	2204      	movs	r2, #4
 80030e8:	f362 0303 	bfi	r3, r2, #0, #4
 80030ec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80030ee:	7a7b      	ldrb	r3, [r7, #9]
 80030f0:	2212      	movs	r2, #18
 80030f2:	f362 0306 	bfi	r3, r2, #0, #7
 80030f6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	7a3b      	ldrb	r3, [r7, #8]
 8003102:	f362 0305 	bfi	r3, r2, #0, #6
 8003106:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003108:	7abb      	ldrb	r3, [r7, #10]
 800310a:	f36f 0301 	bfc	r3, #0, #2
 800310e:	72bb      	strb	r3, [r7, #10]
            break;
 8003110:	e07f      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003116:	7bbb      	ldrb	r3, [r7, #14]
 8003118:	220e      	movs	r2, #14
 800311a:	f362 0304 	bfi	r3, r2, #0, #5
 800311e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003120:	7b7b      	ldrb	r3, [r7, #13]
 8003122:	2203      	movs	r2, #3
 8003124:	f362 0303 	bfi	r3, r2, #0, #4
 8003128:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800312a:	7b3b      	ldrb	r3, [r7, #12]
 800312c:	2203      	movs	r2, #3
 800312e:	f362 0303 	bfi	r3, r2, #0, #4
 8003132:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003134:	7a7b      	ldrb	r3, [r7, #9]
 8003136:	220f      	movs	r2, #15
 8003138:	f362 0306 	bfi	r3, r2, #0, #7
 800313c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	b2da      	uxtb	r2, r3
 8003146:	7a3b      	ldrb	r3, [r7, #8]
 8003148:	f362 0305 	bfi	r3, r2, #0, #6
 800314c:	723b      	strb	r3, [r7, #8]
            break;
 800314e:	e060      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	2208      	movs	r2, #8
 8003158:	f362 0304 	bfi	r3, r2, #0, #5
 800315c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800315e:	7b7b      	ldrb	r3, [r7, #13]
 8003160:	2202      	movs	r2, #2
 8003162:	f362 0303 	bfi	r3, r2, #0, #4
 8003166:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003168:	7b3b      	ldrb	r3, [r7, #12]
 800316a:	2202      	movs	r2, #2
 800316c:	f362 0303 	bfi	r3, r2, #0, #4
 8003170:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003172:	7a7b      	ldrb	r3, [r7, #9]
 8003174:	2209      	movs	r2, #9
 8003176:	f362 0306 	bfi	r3, r2, #0, #7
 800317a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003182:	b2da      	uxtb	r2, r3
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	f362 0305 	bfi	r3, r2, #0, #6
 800318a:	723b      	strb	r3, [r7, #8]
            break;
 800318c:	e041      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	2206      	movs	r2, #6
 8003196:	f362 0304 	bfi	r3, r2, #0, #5
 800319a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800319c:	7b7b      	ldrb	r3, [r7, #13]
 800319e:	2201      	movs	r2, #1
 80031a0:	f362 0303 	bfi	r3, r2, #0, #4
 80031a4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80031a6:	7b3b      	ldrb	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f362 0303 	bfi	r3, r2, #0, #4
 80031ae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80031b0:	7a7b      	ldrb	r3, [r7, #9]
 80031b2:	2207      	movs	r2, #7
 80031b4:	f362 0306 	bfi	r3, r2, #0, #7
 80031b8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	7a3b      	ldrb	r3, [r7, #8]
 80031c4:	f362 0305 	bfi	r3, r2, #0, #6
 80031c8:	723b      	strb	r3, [r7, #8]
            break;
 80031ca:	e022      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e03f      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	2202      	movs	r2, #2
 80031da:	f362 0304 	bfi	r3, r2, #0, #5
 80031de:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80031e0:	7b7b      	ldrb	r3, [r7, #13]
 80031e2:	f36f 0303 	bfc	r3, #0, #4
 80031e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80031e8:	7b3b      	ldrb	r3, [r7, #12]
 80031ea:	f36f 0303 	bfc	r3, #0, #4
 80031ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80031f0:	7a7b      	ldrb	r3, [r7, #9]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f362 0306 	bfi	r3, r2, #0, #7
 80031f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	b2da      	uxtb	r2, r3
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	f362 0305 	bfi	r3, r2, #0, #6
 8003208:	723b      	strb	r3, [r7, #8]
            break;
 800320a:	e002      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	e01f      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2108      	movs	r1, #8
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f89f 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 800322a:	f06f 0301 	mvn.w	r3, #1
 800322e:	e010      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	210c      	movs	r1, #12
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe f890 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003248:	f06f 0302 	mvn.w	r3, #2
 800324c:	e001      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800324e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000e0303 	.word	0x000e0303

08003260 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	71fb      	strb	r3, [r7, #7]
 800326c:	4613      	mov	r3, r2
 800326e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003276:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003278:	79bb      	ldrb	r3, [r7, #6]
 800327a:	2b11      	cmp	r3, #17
 800327c:	d862      	bhi.n	8003344 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032cd 	.word	0x080032cd
 8003288:	080032cd 	.word	0x080032cd
 800328c:	08003345 	.word	0x08003345
 8003290:	080032cd 	.word	0x080032cd
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032cd 	.word	0x080032cd
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	080032eb 	.word	0x080032eb
 80032a8:	080032eb 	.word	0x080032eb
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032eb 	.word	0x080032eb
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	08003309 	.word	0x08003309
 80032c4:	08003309 	.word	0x08003309
 80032c8:	08003327 	.word	0x08003327
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80032d0:	230e      	movs	r3, #14
 80032d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80032d4:	7a7b      	ldrb	r3, [r7, #9]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f362 0306 	bfi	r3, r2, #0, #7
 80032dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80032de:	7a3b      	ldrb	r3, [r7, #8]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f362 0306 	bfi	r3, r2, #0, #7
 80032e6:	723b      	strb	r3, [r7, #8]
            break;
 80032e8:	e02f      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80032ee:	231e      	movs	r3, #30
 80032f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80032f2:	7a7b      	ldrb	r3, [r7, #9]
 80032f4:	2207      	movs	r2, #7
 80032f6:	f362 0306 	bfi	r3, r2, #0, #7
 80032fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	2207      	movs	r2, #7
 8003300:	f362 0306 	bfi	r3, r2, #0, #7
 8003304:	723b      	strb	r3, [r7, #8]
            break;
 8003306:	e020      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 800330c:	2307      	movs	r3, #7
 800330e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003310:	7a7b      	ldrb	r3, [r7, #9]
 8003312:	2202      	movs	r2, #2
 8003314:	f362 0306 	bfi	r3, r2, #0, #7
 8003318:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 800331a:	7a3b      	ldrb	r3, [r7, #8]
 800331c:	2202      	movs	r2, #2
 800331e:	f362 0306 	bfi	r3, r2, #0, #7
 8003322:	723b      	strb	r3, [r7, #8]
            break;
 8003324:	e011      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800332a:	233e      	movs	r3, #62	; 0x3e
 800332c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800332e:	7a7b      	ldrb	r3, [r7, #9]
 8003330:	220f      	movs	r2, #15
 8003332:	f362 0306 	bfi	r3, r2, #0, #7
 8003336:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003338:	7a3b      	ldrb	r3, [r7, #8]
 800333a:	220f      	movs	r2, #15
 800333c:	f362 0306 	bfi	r3, r2, #0, #7
 8003340:	723b      	strb	r3, [r7, #8]
            break;
 8003342:	e002      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	e010      	b.n	800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2104      	movs	r1, #4
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe f803 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003362:	f06f 0301 	mvn.w	r3, #1
 8003366:	e001      	b.n	800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	003e0f0f 	.word	0x003e0f0f

08003378 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	460b      	mov	r3, r1
 8003384:	71bb      	strb	r3, [r7, #6]
 8003386:	4613      	mov	r3, r2
 8003388:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003390:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003396:	7abb      	ldrb	r3, [r7, #10]
 8003398:	2202      	movs	r2, #2
 800339a:	f362 0301 	bfi	r3, r2, #0, #2
 800339e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	2b11      	cmp	r3, #17
 80033a8:	f200 80ef 	bhi.w	800358a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033fd 	.word	0x080033fd
 80033b8:	0800343b 	.word	0x0800343b
 80033bc:	0800358b 	.word	0x0800358b
 80033c0:	08003475 	.word	0x08003475
 80033c4:	08003475 	.word	0x08003475
 80033c8:	08003475 	.word	0x08003475
 80033cc:	08003475 	.word	0x08003475
 80033d0:	08003475 	.word	0x08003475
 80033d4:	0800347b 	.word	0x0800347b
 80033d8:	080034c1 	.word	0x080034c1
 80033dc:	08003507 	.word	0x08003507
 80033e0:	08003545 	.word	0x08003545
 80033e4:	0800354b 	.word	0x0800354b
 80033e8:	08003585 	.word	0x08003585
 80033ec:	08003585 	.word	0x08003585
 80033f0:	08003475 	.word	0x08003475
 80033f4:	08003475 	.word	0x08003475
 80033f8:	0800347b 	.word	0x0800347b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	2206      	movs	r2, #6
 8003404:	f362 0304 	bfi	r3, r2, #0, #5
 8003408:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	2201      	movs	r2, #1
 800340e:	f362 0303 	bfi	r3, r2, #0, #4
 8003412:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003414:	7b3b      	ldrb	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f362 0303 	bfi	r3, r2, #0, #4
 800341c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800341e:	7a7b      	ldrb	r3, [r7, #9]
 8003420:	2207      	movs	r2, #7
 8003422:	f362 0306 	bfi	r3, r2, #0, #7
 8003426:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342e:	b2da      	uxtb	r2, r3
 8003430:	7a3b      	ldrb	r3, [r7, #8]
 8003432:	f362 0305 	bfi	r3, r2, #0, #6
 8003436:	723b      	strb	r3, [r7, #8]
            break;
 8003438:	e0aa      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	2202      	movs	r2, #2
 8003442:	f362 0304 	bfi	r3, r2, #0, #5
 8003446:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	f36f 0303 	bfc	r3, #0, #4
 800344e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	f36f 0303 	bfc	r3, #0, #4
 8003456:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003458:	7a7b      	ldrb	r3, [r7, #9]
 800345a:	2203      	movs	r2, #3
 800345c:	f362 0306 	bfi	r3, r2, #0, #7
 8003460:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	b2da      	uxtb	r2, r3
 800346a:	7a3b      	ldrb	r3, [r7, #8]
 800346c:	f362 0305 	bfi	r3, r2, #0, #6
 8003470:	723b      	strb	r3, [r7, #8]
            break;
 8003472:	e08d      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	e0aa      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	220e      	movs	r2, #14
 8003482:	f362 0304 	bfi	r3, r2, #0, #5
 8003486:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003488:	7b7b      	ldrb	r3, [r7, #13]
 800348a:	2203      	movs	r2, #3
 800348c:	f362 0303 	bfi	r3, r2, #0, #4
 8003490:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003492:	7b3b      	ldrb	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	f362 0303 	bfi	r3, r2, #0, #4
 800349a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800349c:	7a7b      	ldrb	r3, [r7, #9]
 800349e:	220f      	movs	r2, #15
 80034a0:	f362 0306 	bfi	r3, r2, #0, #7
 80034a4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	7a3b      	ldrb	r3, [r7, #8]
 80034b0:	f362 0305 	bfi	r3, r2, #0, #6
 80034b4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034b6:	7abb      	ldrb	r3, [r7, #10]
 80034b8:	f36f 0301 	bfc	r3, #0, #2
 80034bc:	72bb      	strb	r3, [r7, #10]
            break;
 80034be:	e067      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2207      	movs	r2, #7
 80034c8:	f362 0304 	bfi	r3, r2, #0, #5
 80034cc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80034ce:	7b7b      	ldrb	r3, [r7, #13]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f362 0303 	bfi	r3, r2, #0, #4
 80034d6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80034d8:	7b3b      	ldrb	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f362 0303 	bfi	r3, r2, #0, #4
 80034e0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80034e2:	7a7b      	ldrb	r3, [r7, #9]
 80034e4:	2208      	movs	r2, #8
 80034e6:	f362 0306 	bfi	r3, r2, #0, #7
 80034ea:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	7a3b      	ldrb	r3, [r7, #8]
 80034f6:	f362 0305 	bfi	r3, r2, #0, #6
 80034fa:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034fc:	7abb      	ldrb	r3, [r7, #10]
 80034fe:	f36f 0301 	bfc	r3, #0, #2
 8003502:	72bb      	strb	r3, [r7, #10]
            break;
 8003504:	e044      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2206      	movs	r2, #6
 800350e:	f362 0304 	bfi	r3, r2, #0, #5
 8003512:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003514:	7b7b      	ldrb	r3, [r7, #13]
 8003516:	2201      	movs	r2, #1
 8003518:	f362 0303 	bfi	r3, r2, #0, #4
 800351c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800351e:	7b3b      	ldrb	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f362 0303 	bfi	r3, r2, #0, #4
 8003526:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003528:	7a7b      	ldrb	r3, [r7, #9]
 800352a:	2207      	movs	r2, #7
 800352c:	f362 0306 	bfi	r3, r2, #0, #7
 8003530:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	7a3b      	ldrb	r3, [r7, #8]
 800353c:	f362 0305 	bfi	r3, r2, #0, #6
 8003540:	723b      	strb	r3, [r7, #8]
            break;
 8003542:	e025      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e042      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800354e:	7bbb      	ldrb	r3, [r7, #14]
 8003550:	2202      	movs	r2, #2
 8003552:	f362 0304 	bfi	r3, r2, #0, #5
 8003556:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003558:	7b7b      	ldrb	r3, [r7, #13]
 800355a:	f36f 0303 	bfc	r3, #0, #4
 800355e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003560:	7b3b      	ldrb	r3, [r7, #12]
 8003562:	f36f 0303 	bfc	r3, #0, #4
 8003566:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003568:	7a7b      	ldrb	r3, [r7, #9]
 800356a:	2203      	movs	r2, #3
 800356c:	f362 0306 	bfi	r3, r2, #0, #7
 8003570:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	b2da      	uxtb	r2, r3
 800357a:	7a3b      	ldrb	r3, [r7, #8]
 800357c:	f362 0305 	bfi	r3, r2, #0, #6
 8003580:	723b      	strb	r3, [r7, #8]
            break;
 8003582:	e005      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	e022      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e01f      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2108      	movs	r1, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fee0 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80035a8:	f06f 0301 	mvn.w	r3, #1
 80035ac:	e010      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	210c      	movs	r1, #12
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fed1 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80035c6:	f06f 0302 	mvn.w	r3, #2
 80035ca:	e001      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80035cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	000e0303 	.word	0x000e0303

080035dc <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	460b      	mov	r3, r1
 80035e8:	71bb      	strb	r3, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80035f6:	f640 6307 	movw	r3, #3591	; 0xe07
 80035fa:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	1cda      	adds	r2, r3, #3
 8003606:	89b9      	ldrh	r1, [r7, #12]
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fd4a 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	e020      	b.n	8003664 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8003622:	79bb      	ldrb	r3, [r7, #6]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f362 0300 	bfi	r3, r2, #0, #1
 8003630:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8003632:	797b      	ldrb	r3, [r7, #5]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	f362 0341 	bfi	r3, r2, #1, #1
 8003640:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8003642:	7afa      	ldrb	r2, [r7, #11]
 8003644:	89b9      	ldrh	r1, [r7, #12]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fd97 	bl	800117c <DRV_CANFDSPI_WriteByte>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 800365a:	f06f 0301 	mvn.w	r3, #1
 800365e:	e001      	b.n	8003664 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d802      	bhi.n	8003686 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e02a      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	3b09      	subs	r3, #9
 800368a:	2b06      	cmp	r3, #6
 800368c:	d825      	bhi.n	80036da <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036b1 	.word	0x080036b1
 8003698:	080036b7 	.word	0x080036b7
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	080036c3 	.word	0x080036c3
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036cf 	.word	0x080036cf
 80036ac:	080036d5 	.word	0x080036d5
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80036b0:	230c      	movs	r3, #12
 80036b2:	60fb      	str	r3, [r7, #12]
                break;
 80036b4:	e012      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 80036b6:	2310      	movs	r3, #16
 80036b8:	60fb      	str	r3, [r7, #12]
                break;
 80036ba:	e00f      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80036bc:	2314      	movs	r3, #20
 80036be:	60fb      	str	r3, [r7, #12]
                break;
 80036c0:	e00c      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80036c2:	2318      	movs	r3, #24
 80036c4:	60fb      	str	r3, [r7, #12]
                break;
 80036c6:	e009      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80036c8:	2320      	movs	r3, #32
 80036ca:	60fb      	str	r3, [r7, #12]
                break;
 80036cc:	e006      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80036ce:	2330      	movs	r3, #48	; 0x30
 80036d0:	60fb      	str	r3, [r7, #12]
                break;
 80036d2:	e003      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	60fb      	str	r3, [r7, #12]
                break;
 80036d8:	e000      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80036da:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4313      	orrs	r3, r2
 8003702:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 0218 	bic.w	r2, r3, #24
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	615a      	str	r2, [r3, #20]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	801a      	strh	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	; 0x40
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 80037e2:	2305      	movs	r3, #5
 80037e4:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 80037e6:	2300      	movs	r3, #0
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ea:	2300      	movs	r3, #0
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800381e:	f001 fd67 	bl	80052f0 <FI_CheckBankConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003828:	230e      	movs	r3, #14
 800382a:	f000 bcb4 	b.w	8004196 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 800382e:	f001 fcbd 	bl	80051ac <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003832:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <EE_Init+0x2a8>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003838:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <EE_Init+0x2ac>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	029a      	lsls	r2, r3, #10
 800383e:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <EE_Init+0x2b0>)
 8003840:	4013      	ands	r3, r2
 8003842:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003846:	fbb2 f1f3 	udiv	r1, r2, r3
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	0b1b      	lsrs	r3, r3, #12
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	e02e      	b.n	80038b4 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800385c:	031a      	lsls	r2, r3, #12
 800385e:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <EE_Init+0x2ac>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	0299      	lsls	r1, r3, #10
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <EE_Init+0x2b0>)
 8003866:	400b      	ands	r3, r1
 8003868:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800386c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003870:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <EE_Init+0x2ac>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	0298      	lsls	r0, r3, #10
 8003876:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <EE_Init+0x2b0>)
 8003878:	4003      	ands	r3, r0
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
 8003886:	e00e      	b.n	80038a6 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	4413      	add	r3, r2
 800388e:	4a7f      	ldr	r2, [pc, #508]	; (8003a8c <EE_Init+0x2b4>)
 8003890:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	4413      	add	r3, r2
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	3308      	adds	r3, #8
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d3ec      	bcc.n	8003888 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	3301      	adds	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <EE_Init+0x2ac>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	029a      	lsls	r2, r3, #10
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <EE_Init+0x2b0>)
 80038bc:	4013      	ands	r3, r2
 80038be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	0b1b      	lsrs	r3, r3, #12
 80038ce:	3304      	adds	r3, #4
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3bf      	bcc.n	8003856 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <EE_Init+0x2a8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80038dc:	4b69      	ldr	r3, [pc, #420]	; (8003a84 <EE_Init+0x2ac>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	029a      	lsls	r2, r3, #10
 80038e2:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <EE_Init+0x2b0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	0b1b      	lsrs	r3, r3, #12
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f8:	e034      	b.n	8003964 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003900:	031a      	lsls	r2, r3, #12
 8003902:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <EE_Init+0x2ac>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	0299      	lsls	r1, r3, #10
 8003908:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <EE_Init+0x2b0>)
 800390a:	400b      	ands	r3, r1
 800390c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003910:	fbb1 f1f3 	udiv	r1, r1, r3
 8003914:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <EE_Init+0x2ac>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	0298      	lsls	r0, r3, #10
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <EE_Init+0x2b0>)
 800391c:	4003      	ands	r3, r0
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003928:	f001 fbde 	bl	80050e8 <GetPageState>
 800392c:	4603      	mov	r3, r0
 800392e:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003930:	7ebb      	ldrb	r3, [r7, #26]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d002      	beq.n	800393c <EE_Init+0x164>
 8003936:	7ebb      	ldrb	r3, [r7, #26]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d103      	bne.n	8003944 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	3301      	adds	r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	e00c      	b.n	800395e <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003944:	7ebb      	ldrb	r3, [r7, #26]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d109      	bne.n	800395e <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	3301      	adds	r3, #1
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	3301      	adds	r3, #1
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <EE_Init+0x2ac>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	029a      	lsls	r2, r3, #10
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <EE_Init+0x2b0>)
 800396c:	4013      	ands	r3, r2
 800396e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003972:	fbb2 f1f3 	udiv	r1, r2, r3
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	0b1b      	lsrs	r3, r3, #12
 800397e:	3304      	adds	r3, #4
 8003980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003982:	429a      	cmp	r2, r3
 8003984:	d3b9      	bcc.n	80038fa <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d16a      	bne.n	8003a62 <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d062      	beq.n	8003a58 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003992:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <EE_Init+0x2ac>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	029a      	lsls	r2, r3, #10
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <EE_Init+0x2b0>)
 800399a:	4013      	ands	r3, r2
 800399c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	0b1b      	lsrs	r3, r3, #12
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	3303      	adds	r3, #3
 80039b2:	f003 0103 	and.w	r1, r3, #3
 80039b6:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <EE_Init+0x2ac>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	029a      	lsls	r2, r3, #10
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <EE_Init+0x2b0>)
 80039be:	4013      	ands	r3, r2
 80039c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039c4:	fbb2 f0f3 	udiv	r0, r2, r3
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	0b1b      	lsrs	r3, r3, #12
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80039d6:	031a      	lsls	r2, r3, #12
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <EE_Init+0x2ac>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	0299      	lsls	r1, r3, #10
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <EE_Init+0x2b0>)
 80039e0:	400b      	ands	r3, r1
 80039e2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80039e6:	fbb1 f1f3 	udiv	r1, r1, r3
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <EE_Init+0x2ac>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	0298      	lsls	r0, r3, #10
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <EE_Init+0x2b0>)
 80039f2:	4003      	ands	r3, r0
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fb74 	bl	80050e8 <GetPageState>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d12d      	bne.n	8003a62 <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <EE_Init+0x2ac>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	029a      	lsls	r2, r3, #10
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <EE_Init+0x2b0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	0b1b      	lsrs	r3, r3, #12
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 0103 	and.w	r1, r3, #3
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <EE_Init+0x2ac>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	029a      	lsls	r2, r3, #10
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <EE_Init+0x2b0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a38:	fbb2 f0f3 	udiv	r0, r2, r3
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	440b      	add	r3, r1
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fa8b 	bl	8004f64 <SetPageState>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003a54:	2302      	movs	r3, #2
 8003a56:	e39e      	b.n	8004196 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f000 fba7 	bl	80041ac <EE_Format>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	e399      	b.n	8004196 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <EE_Init+0x2ac>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	029a      	lsls	r2, r3, #10
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <EE_Init+0x2b0>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	0b1b      	lsrs	r3, r3, #12
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7e:	e0de      	b.n	8003c3e <EE_Init+0x466>
 8003a80:	200003b4 	.word	0x200003b4
 8003a84:	1fff75e0 	.word	0x1fff75e0
 8003a88:	001ffc00 	.word	0x001ffc00
 8003a8c:	200003b0 	.word	0x200003b0
  {
    pageaddress = PAGE_ADDRESS(page);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a96:	031a      	lsls	r2, r3, #12
 8003a98:	4bba      	ldr	r3, [pc, #744]	; (8003d84 <EE_Init+0x5ac>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	0299      	lsls	r1, r3, #10
 8003a9e:	4bba      	ldr	r3, [pc, #744]	; (8003d88 <EE_Init+0x5b0>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003aa6:	fbb1 f1f3 	udiv	r1, r1, r3
 8003aaa:	4bb6      	ldr	r3, [pc, #728]	; (8003d84 <EE_Init+0x5ac>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	0298      	lsls	r0, r3, #10
 8003ab0:	4bb5      	ldr	r3, [pc, #724]	; (8003d88 <EE_Init+0x5b0>)
 8003ab2:	4003      	ands	r3, r0
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003abe:	f001 fb13 	bl	80050e8 <GetPageState>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003ac6:	7ebb      	ldrb	r3, [r7, #26]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 80b5 	bne.w	8003c38 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003ace:	4bad      	ldr	r3, [pc, #692]	; (8003d84 <EE_Init+0x5ac>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	029a      	lsls	r2, r3, #10
 8003ad4:	4bac      	ldr	r3, [pc, #688]	; (8003d88 <EE_Init+0x5b0>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003adc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	0b1b      	lsrs	r3, r3, #12
 8003ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d050      	beq.n	8003b90 <EE_Init+0x3b8>
 8003aee:	4ba5      	ldr	r3, [pc, #660]	; (8003d84 <EE_Init+0x5ac>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	029a      	lsls	r2, r3, #10
 8003af4:	4ba4      	ldr	r3, [pc, #656]	; (8003d88 <EE_Init+0x5b0>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003afc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	0b1b      	lsrs	r3, r3, #12
 8003b08:	3302      	adds	r3, #2
 8003b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d03f      	beq.n	8003b90 <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b10:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <EE_Init+0x5ac>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	029a      	lsls	r2, r3, #10
 8003b16:	4b9c      	ldr	r3, [pc, #624]	; (8003d88 <EE_Init+0x5b0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	0b1b      	lsrs	r3, r3, #12
 8003b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	3303      	adds	r3, #3
 8003b30:	f003 0103 	and.w	r1, r3, #3
 8003b34:	4b93      	ldr	r3, [pc, #588]	; (8003d84 <EE_Init+0x5ac>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	029a      	lsls	r2, r3, #10
 8003b3a:	4b93      	ldr	r3, [pc, #588]	; (8003d88 <EE_Init+0x5b0>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b42:	fbb2 f0f3 	udiv	r0, r2, r3
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	0b1b      	lsrs	r3, r3, #12
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003b54:	031a      	lsls	r2, r3, #12
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <EE_Init+0x5ac>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	0299      	lsls	r1, r3, #10
 8003b5c:	4b8a      	ldr	r3, [pc, #552]	; (8003d88 <EE_Init+0x5b0>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003b64:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b68:	4b86      	ldr	r3, [pc, #536]	; (8003d84 <EE_Init+0x5ac>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	0298      	lsls	r0, r3, #10
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <EE_Init+0x5b0>)
 8003b70:	4003      	ands	r3, r0
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fab5 	bl	80050e8 <GetPageState>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d102      	bne.n	8003b8a <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b88:	e041      	b.n	8003c0e <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b8e:	e03e      	b.n	8003c0e <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003b90:	4b7c      	ldr	r3, [pc, #496]	; (8003d84 <EE_Init+0x5ac>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	029a      	lsls	r2, r3, #10
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <EE_Init+0x5b0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 0103 	and.w	r1, r3, #3
 8003bb4:	4b73      	ldr	r3, [pc, #460]	; (8003d84 <EE_Init+0x5ac>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	029a      	lsls	r2, r3, #10
 8003bba:	4b73      	ldr	r3, [pc, #460]	; (8003d88 <EE_Init+0x5b0>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bc2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	0b1b      	lsrs	r3, r3, #12
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003bd4:	031a      	lsls	r2, r3, #12
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <EE_Init+0x5ac>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	0299      	lsls	r1, r3, #10
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <EE_Init+0x5b0>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003be4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003be8:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <EE_Init+0x5ac>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	0298      	lsls	r0, r3, #10
 8003bee:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <EE_Init+0x5b0>)
 8003bf0:	4003      	ands	r3, r0
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fa75 	bl	80050e8 <GetPageState>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	e001      	b.n	8003c0e <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003c0e:	7efb      	ldrb	r3, [r7, #27]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <EE_Init+0x5b4>)
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2000      	movs	r0, #0
 8003c22:	f000 fef3 	bl	8004a0c <PagesTransfer>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d001      	beq.n	8003c32 <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003c2e:	230c      	movs	r3, #12
 8003c30:	e2b1      	b.n	8004196 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003c36:	e014      	b.n	8003c62 <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <EE_Init+0x5ac>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	029a      	lsls	r2, r3, #10
 8003c44:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <EE_Init+0x5b0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	0b1b      	lsrs	r3, r3, #12
 8003c58:	3304      	adds	r3, #4
 8003c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f4ff af17 	bcc.w	8003a90 <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <EE_Init+0x5ac>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	029a      	lsls	r2, r3, #10
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <EE_Init+0x5b0>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c74:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	0b1b      	lsrs	r3, r3, #12
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	e0dc      	b.n	8003e3e <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003c8a:	031a      	lsls	r2, r3, #12
 8003c8c:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <EE_Init+0x5ac>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0299      	lsls	r1, r3, #10
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <EE_Init+0x5b0>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003c9a:	fbb1 f1f3 	udiv	r1, r1, r3
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <EE_Init+0x5ac>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	0298      	lsls	r0, r3, #10
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <EE_Init+0x5b0>)
 8003ca6:	4003      	ands	r3, r0
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cb2:	f001 fa19 	bl	80050e8 <GetPageState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003cba:	7ebb      	ldrb	r3, [r7, #26]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f040 80b6 	bne.w	8003e2e <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <EE_Init+0x5ac>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	029a      	lsls	r2, r3, #10
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <EE_Init+0x5b0>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	0b1b      	lsrs	r3, r3, #12
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d056      	beq.n	8003d90 <EE_Init+0x5b8>
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <EE_Init+0x5ac>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <EE_Init+0x5b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d045      	beq.n	8003d90 <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <EE_Init+0x5ac>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	029a      	lsls	r2, r3, #10
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <EE_Init+0x5b0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d12:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	0b1b      	lsrs	r3, r3, #12
 8003d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	3303      	adds	r3, #3
 8003d24:	f003 0103 	and.w	r1, r3, #3
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <EE_Init+0x5ac>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	029a      	lsls	r2, r3, #10
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <EE_Init+0x5b0>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d36:	fbb2 f0f3 	udiv	r0, r2, r3
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	0b1b      	lsrs	r3, r3, #12
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003d48:	031a      	lsls	r2, r3, #12
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <EE_Init+0x5ac>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	0299      	lsls	r1, r3, #10
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <EE_Init+0x5b0>)
 8003d52:	400b      	ands	r3, r1
 8003d54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003d58:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <EE_Init+0x5ac>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	0298      	lsls	r0, r3, #10
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <EE_Init+0x5b0>)
 8003d64:	4003      	ands	r3, r0
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f9bb 	bl	80050e8 <GetPageState>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d102      	bne.n	8003d7e <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d7c:	e047      	b.n	8003e0e <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d82:	e044      	b.n	8003e0e <EE_Init+0x636>
 8003d84:	1fff75e0 	.word	0x1fff75e0
 8003d88:	001ffc00 	.word	0x001ffc00
 8003d8c:	200003ae 	.word	0x200003ae
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003d90:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <EE_Init+0x81c>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	029a      	lsls	r2, r3, #10
 8003d96:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <EE_Init+0x820>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	0b1b      	lsrs	r3, r3, #12
 8003daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 0103 	and.w	r1, r3, #3
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <EE_Init+0x81c>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	029a      	lsls	r2, r3, #10
 8003dba:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <EE_Init+0x820>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003dc2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	0b1b      	lsrs	r3, r3, #12
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003dd4:	031a      	lsls	r2, r3, #12
 8003dd6:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <EE_Init+0x81c>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	0299      	lsls	r1, r3, #10
 8003ddc:	4b86      	ldr	r3, [pc, #536]	; (8003ff8 <EE_Init+0x820>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003de4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003de8:	4b82      	ldr	r3, [pc, #520]	; (8003ff4 <EE_Init+0x81c>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	0298      	lsls	r0, r3, #10
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <EE_Init+0x820>)
 8003df0:	4003      	ands	r3, r0
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f975 	bl	80050e8 <GetPageState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e001      	b.n	8003e0e <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 8003e0e:	7efb      	ldrb	r3, [r7, #27]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d111      	bne.n	8003e38 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b77      	ldr	r3, [pc, #476]	; (8003ffc <EE_Init+0x824>)
 8003e20:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	3301      	adds	r3, #1
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
 8003e28:	e006      	b.n	8003e38 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	e1b3      	b.n	8004196 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 8003e2e:	7ebb      	ldrb	r3, [r7, #26]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d101      	bne.n	8003e38 <EE_Init+0x660>
    {
      lastvalidpage = page;
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ff4 <EE_Init+0x81c>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	029a      	lsls	r2, r3, #10
 8003e44:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <EE_Init+0x820>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	0b1b      	lsrs	r3, r3, #12
 8003e58:	3304      	adds	r3, #4
 8003e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f4ff af11 	bcc.w	8003c84 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d133      	bne.n	8003ed0 <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	b2d9      	uxtb	r1, r3
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <EE_Init+0x81c>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	029a      	lsls	r2, r3, #10
 8003e72:	4b61      	ldr	r3, [pc, #388]	; (8003ff8 <EE_Init+0x820>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e7a:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e7e:	fb00 f303 	mul.w	r3, r0, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	0b1b      	lsrs	r3, r3, #12
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	1acb      	subs	r3, r1, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	b2d9      	uxtb	r1, r3
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <EE_Init+0x81c>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	029a      	lsls	r2, r3, #10
 8003e9c:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <EE_Init+0x820>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ea4:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ea8:	fb00 f303 	mul.w	r3, r0, r3
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	0b1b      	lsrs	r3, r3, #12
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <EE_Init+0x824>)
 8003eb8:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <EE_Init+0x824>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f84f 	bl	8004f64 <SetPageState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e162      	b.n	8004196 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <EE_Init+0x828>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <EE_Init+0x82c>)
 8003ed8:	2220      	movs	r2, #32
 8003eda:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003edc:	2320      	movs	r3, #32
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee0:	e031      	b.n	8003f46 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <EE_Init+0x824>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003eea:	031a      	lsls	r2, r3, #12
 8003eec:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <EE_Init+0x81c>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	0299      	lsls	r1, r3, #10
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <EE_Init+0x820>)
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003efa:	fbb1 f1f3 	udiv	r1, r1, r3
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <EE_Init+0x81c>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	0298      	lsls	r0, r3, #10
 8003f04:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <EE_Init+0x820>)
 8003f06:	4003      	ands	r3, r0
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	441a      	add	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	4413      	add	r3, r2
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 8003f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	bf08      	it	eq
 8003f24:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003f28:	d012      	beq.n	8003f50 <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <EE_Init+0x828>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <EE_Init+0x828>)
 8003f34:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <EE_Init+0x82c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	4a31      	ldr	r2, [pc, #196]	; (8004004 <EE_Init+0x82c>)
 8003f3e:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	3308      	adds	r3, #8
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d3c9      	bcc.n	8003ee2 <EE_Init+0x70a>
 8003f4e:	e000      	b.n	8003f52 <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 8003f50:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <EE_Init+0x824>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <EE_Init+0x824>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f5e:	e053      	b.n	8004008 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <EE_Init+0x81c>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	029a      	lsls	r2, r3, #10
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <EE_Init+0x820>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	0b1b      	lsrs	r3, r3, #12
 8003f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	3303      	adds	r3, #3
 8003f80:	f003 0103 	and.w	r1, r3, #3
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <EE_Init+0x81c>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	029a      	lsls	r2, r3, #10
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <EE_Init+0x820>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f92:	fbb2 f0f3 	udiv	r0, r2, r3
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	0b1b      	lsrs	r3, r3, #12
 8003f9e:	440b      	add	r3, r1
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003fa8:	031a      	lsls	r2, r3, #12
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <EE_Init+0x81c>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	0299      	lsls	r1, r3, #10
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <EE_Init+0x820>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003fb8:	fbb1 f1f3 	udiv	r1, r1, r3
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <EE_Init+0x81c>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	0298      	lsls	r0, r3, #10
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <EE_Init+0x820>)
 8003fc4:	4003      	ands	r3, r0
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f88b 	bl	80050e8 <GetPageState>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8003fd6:	7ebb      	ldrb	r3, [r7, #26]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d109      	bne.n	8003ff0 <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <EE_Init+0x828>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <EE_Init+0x828>)
 8003fe8:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	e00b      	b.n	8004008 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	e0d0      	b.n	8004196 <EE_Init+0x9be>
 8003ff4:	1fff75e0 	.word	0x1fff75e0
 8003ff8:	001ffc00 	.word	0x001ffc00
 8003ffc:	200003ae 	.word	0x200003ae
 8004000:	200003ac 	.word	0x200003ac
 8004004:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8004008:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <EE_Init+0x9c8>)
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	029a      	lsls	r2, r3, #10
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <EE_Init+0x9cc>)
 8004010:	4013      	ands	r3, r2
 8004012:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004016:	fbb2 f1f3 	udiv	r1, r2, r3
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	0b1b      	lsrs	r3, r3, #12
 8004022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004024:	429a      	cmp	r2, r3
 8004026:	d010      	beq.n	800404a <EE_Init+0x872>
 8004028:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <EE_Init+0x9c8>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	029a      	lsls	r2, r3, #10
 800402e:	4b5d      	ldr	r3, [pc, #372]	; (80041a4 <EE_Init+0x9cc>)
 8004030:	4013      	ands	r3, r2
 8004032:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004036:	fbb2 f1f3 	udiv	r1, r2, r3
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	0b1b      	lsrs	r3, r3, #12
 8004042:	3302      	adds	r3, #2
 8004044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d18a      	bne.n	8003f60 <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <EE_Init+0x9d0>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <EE_Init+0x9c8>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	029a      	lsls	r2, r3, #10
 8004056:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <EE_Init+0x9cc>)
 8004058:	4013      	ands	r3, r2
 800405a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800405e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	0b1b      	lsrs	r3, r3, #12
 800406a:	1ac3      	subs	r3, r0, r3
 800406c:	3301      	adds	r3, #1
 800406e:	f003 0103 	and.w	r1, r3, #3
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <EE_Init+0x9c8>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	029a      	lsls	r2, r3, #10
 8004078:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <EE_Init+0x9cc>)
 800407a:	4013      	ands	r3, r2
 800407c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004080:	fbb2 f0f3 	udiv	r0, r2, r3
 8004084:	fb00 f303 	mul.w	r3, r0, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	0b1b      	lsrs	r3, r3, #12
 800408c:	440b      	add	r3, r1
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004096:	031a      	lsls	r2, r3, #12
 8004098:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <EE_Init+0x9c8>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	0299      	lsls	r1, r3, #10
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <EE_Init+0x9cc>)
 80040a0:	400b      	ands	r3, r1
 80040a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80040a6:	fbb1 f1f3 	udiv	r1, r1, r3
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <EE_Init+0x9c8>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	0298      	lsls	r0, r3, #10
 80040b0:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <EE_Init+0x9cc>)
 80040b2:	4003      	ands	r3, r0
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 80040bc:	e053      	b.n	8004166 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d108      	bne.n	80040d6 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80040c4:	2101      	movs	r1, #1
 80040c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040c8:	f001 f8b1 	bl	800522e <FI_PageErase>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e05f      	b.n	8004196 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 80040d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040dc:	f000 fb5d 	bl	800479a <VerifyPageFullyErased>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d108      	bne.n	80040f8 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 80040e6:	2101      	movs	r1, #1
 80040e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ea:	f001 f8a0 	bl	800522e <FI_PageErase>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e04e      	b.n	8004196 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <EE_Init+0x9c8>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	029a      	lsls	r2, r3, #10
 80040fe:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <EE_Init+0x9cc>)
 8004100:	4013      	ands	r3, r2
 8004102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004106:	fbb2 f1f3 	udiv	r1, r2, r3
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	0b1b      	lsrs	r3, r3, #12
 8004112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f003 0103 	and.w	r1, r3, #3
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <EE_Init+0x9c8>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	029a      	lsls	r2, r3, #10
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <EE_Init+0x9cc>)
 8004124:	4013      	ands	r3, r2
 8004126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800412a:	fbb2 f0f3 	udiv	r0, r2, r3
 800412e:	fb00 f303 	mul.w	r3, r0, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	0b1b      	lsrs	r3, r3, #12
 8004136:	440b      	add	r3, r1
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004140:	031a      	lsls	r2, r3, #12
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <EE_Init+0x9c8>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	0299      	lsls	r1, r3, #10
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <EE_Init+0x9cc>)
 800414a:	400b      	ands	r3, r1
 800414c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004150:	fbb1 f1f3 	udiv	r1, r1, r3
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <EE_Init+0x9c8>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	0298      	lsls	r0, r3, #10
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <EE_Init+0x9cc>)
 800415c:	4003      	ands	r3, r0
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 8004166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	429a      	cmp	r2, r3
 800416c:	d1a7      	bne.n	80040be <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800416e:	f001 f89d 	bl	80052ac <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004178:	2100      	movs	r1, #0
 800417a:	2000      	movs	r0, #0
 800417c:	f000 fe6c 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004180:	4603      	mov	r3, r0
 8004182:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004184:	89fb      	ldrh	r3, [r7, #14]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <EE_Init+0x9bc>
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	2b12      	cmp	r3, #18
 800418e:	d001      	beq.n	8004194 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 8004190:	2302      	movs	r3, #2
 8004192:	e000      	b.n	8004196 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3740      	adds	r7, #64	; 0x40
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	1fff75e0 	.word	0x1fff75e0
 80041a4:	001ffc00 	.word	0x001ffc00
 80041a8:	200003ae 	.word	0x200003ae

080041ac <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 80041ba:	f001 f899 	bl	80052f0 <FI_CheckBankConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80041c4:	230e      	movs	r3, #14
 80041c6:	e083      	b.n	80042d0 <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <EE_Format+0x12c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	029a      	lsls	r2, r3, #10
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <EE_Format+0x130>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	0b1b      	lsrs	r3, r3, #12
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e034      	b.n	8004250 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80041ec:	2101      	movs	r1, #1
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f001 f81d 	bl	800522e <FI_PageErase>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d027      	beq.n	800424a <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e068      	b.n	80042d0 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004204:	031a      	lsls	r2, r3, #12
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <EE_Format+0x12c>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	0299      	lsls	r1, r3, #10
 800420c:	4b33      	ldr	r3, [pc, #204]	; (80042dc <EE_Format+0x130>)
 800420e:	400b      	ands	r3, r1
 8004210:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004214:	fbb1 f1f3 	udiv	r1, r1, r3
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <EE_Format+0x12c>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	0298      	lsls	r0, r3, #10
 800421e:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <EE_Format+0x130>)
 8004220:	4003      	ands	r3, r0
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fab4 	bl	800479a <VerifyPageFullyErased>
 8004232:	4603      	mov	r3, r0
 8004234:	2b10      	cmp	r3, #16
 8004236:	d108      	bne.n	800424a <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004238:	2101      	movs	r1, #1
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fff7 	bl	800522e <FI_PageErase>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e042      	b.n	80042d0 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <EE_Format+0x12c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	029a      	lsls	r2, r3, #10
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <EE_Format+0x130>)
 8004258:	4013      	ands	r3, r2
 800425a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800425e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	0b1b      	lsrs	r3, r3, #12
 800426a:	3304      	adds	r3, #4
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b9      	bcc.n	80041e6 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8004272:	f001 f81b 	bl	80052ac <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <EE_Format+0x12c>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	029a      	lsls	r2, r3, #10
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <EE_Format+0x130>)
 800427e:	4013      	ands	r3, r2
 8004280:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004284:	fbb2 f1f3 	udiv	r1, r2, r3
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	0b1b      	lsrs	r3, r3, #12
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fe66 	bl	8004f64 <SetPageState>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800429e:	2302      	movs	r3, #2
 80042a0:	e016      	b.n	80042d0 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <EE_Format+0x134>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <EE_Format+0x12c>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	029a      	lsls	r2, r3, #10
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <EE_Format+0x130>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	0b1b      	lsrs	r3, r3, #12
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <EE_Format+0x138>)
 80042c6:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <EE_Format+0x13c>)
 80042ca:	2220      	movs	r2, #32
 80042cc:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	1fff75e0 	.word	0x1fff75e0
 80042dc:	001ffc00 	.word	0x001ffc00
 80042e0:	200003ac 	.word	0x200003ac
 80042e4:	200003ae 	.word	0x200003ae
 80042e8:	20000008 	.word	0x20000008

080042ec <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <EE_ReadVariable32bits+0x40>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	4293      	cmp	r3, r2
 8004306:	d011      	beq.n	800432c <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 8004310:	f107 0208 	add.w	r2, r7, #8
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f94b 	bl	80045b4 <ReadVariable>
 800431e:	4603      	mov	r3, r0
 8004320:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]

    return status;
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	e000      	b.n	800432e <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800432c:	2308      	movs	r3, #8
  } 
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	6039      	str	r1, [r7, #0]
 8004340:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <EE_WriteVariable32bits+0x2a>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434e:	4293      	cmp	r3, r2
 8004350:	d006      	beq.n	8004360 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa00 	bl	800475c <WriteVariable>
 800435c:	4603      	mov	r3, r0
 800435e:	e000      	b.n	8004362 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004360:	2308      	movs	r3, #8
  } 
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004382:	2305      	movs	r3, #5
 8004384:	71fb      	strb	r3, [r7, #7]
 8004386:	2305      	movs	r3, #5
 8004388:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <EE_CleanUp+0x11c>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	029a      	lsls	r2, r3, #10
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <EE_CleanUp+0x120>)
 8004392:	4013      	ands	r3, r2
 8004394:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004398:	fbb2 f1f3 	udiv	r1, r2, r3
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	0b1b      	lsrs	r3, r3, #12
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e059      	b.n	800445c <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043ae:	031a      	lsls	r2, r3, #12
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <EE_CleanUp+0x11c>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	0299      	lsls	r1, r3, #10
 80043b6:	4b35      	ldr	r3, [pc, #212]	; (800448c <EE_CleanUp+0x120>)
 80043b8:	400b      	ands	r3, r1
 80043ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80043be:	fbb1 f1f3 	udiv	r1, r1, r3
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <EE_CleanUp+0x11c>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	0298      	lsls	r0, r3, #10
 80043c8:	4b30      	ldr	r3, [pc, #192]	; (800448c <EE_CleanUp+0x120>)
 80043ca:	4003      	ands	r3, r0
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fe87 	bl	80050e8 <GetPageState>
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d138      	bne.n	8004456 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e022      	b.n	8004432 <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043f2:	031a      	lsls	r2, r3, #12
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <EE_CleanUp+0x11c>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0299      	lsls	r1, r3, #10
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <EE_CleanUp+0x120>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004402:	fbb1 f1f3 	udiv	r1, r1, r3
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <EE_CleanUp+0x11c>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	0298      	lsls	r0, r3, #10
 800440c:	4b1f      	ldr	r3, [pc, #124]	; (800448c <EE_CleanUp+0x120>)
 800440e:	4003      	ands	r3, r0
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8004418:	68b8      	ldr	r0, [r7, #8]
 800441a:	f000 fe65 	bl	80050e8 <GetPageState>
 800441e:	4603      	mov	r3, r0
 8004420:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004422:	79bb      	ldrb	r3, [r7, #6]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d001      	beq.n	800442c <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004428:	2305      	movs	r3, #5
 800442a:	e029      	b.n	8004480 <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3302      	adds	r3, #2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	d3d7      	bcc.n	80043ec <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800443c:	2102      	movs	r1, #2
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f000 fef5 	bl	800522e <FI_PageErase>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e018      	b.n	8004480 <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800444e:	f000 ff2d 	bl	80052ac <FI_CacheFlush>
        
        return EE_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e014      	b.n	8004480 <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3302      	adds	r3, #2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <EE_CleanUp+0x11c>)
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	029a      	lsls	r2, r3, #10
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <EE_CleanUp+0x120>)
 8004464:	4013      	ands	r3, r2
 8004466:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800446a:	fbb2 f1f3 	udiv	r1, r2, r3
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	0b1b      	lsrs	r3, r3, #12
 8004476:	3304      	adds	r3, #4
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d394      	bcc.n	80043a8 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800447e:	2305      	movs	r3, #5
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	1fff75e0 	.word	0x1fff75e0
 800448c:	001ffc00 	.word	0x001ffc00

08004490 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 80044a6:	2305      	movs	r3, #5
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	2305      	movs	r3, #5
 80044ac:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	029a      	lsls	r2, r3, #10
 80044b4:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	0b1b      	lsrs	r3, r3, #12
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e059      	b.n	8004580 <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80044d2:	031a      	lsls	r2, r3, #12
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	0299      	lsls	r1, r3, #10
 80044da:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044dc:	400b      	ands	r3, r1
 80044de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80044e2:	fbb1 f1f3 	udiv	r1, r1, r3
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	0298      	lsls	r0, r3, #10
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044ee:	4003      	ands	r3, r0
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fdf5 	bl	80050e8 <GetPageState>
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d138      	bne.n	800457a <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e022      	b.n	8004556 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004516:	031a      	lsls	r2, r3, #12
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <EE_CleanUp_IT+0x11c>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	0299      	lsls	r1, r3, #10
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004520:	400b      	ands	r3, r1
 8004522:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004526:	fbb1 f1f3 	udiv	r1, r1, r3
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <EE_CleanUp_IT+0x11c>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	0298      	lsls	r0, r3, #10
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004532:	4003      	ands	r3, r0
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800453c:	68b8      	ldr	r0, [r7, #8]
 800453e:	f000 fdd3 	bl	80050e8 <GetPageState>
 8004542:	4603      	mov	r3, r0
 8004544:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004546:	79bb      	ldrb	r3, [r7, #6]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d001      	beq.n	8004550 <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 800454c:	2305      	movs	r3, #5
 800454e:	e029      	b.n	80045a4 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3301      	adds	r3, #1
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	3302      	adds	r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3d7      	bcc.n	8004510 <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004560:	2102      	movs	r1, #2
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f000 fe85 	bl	8005272 <FI_PageErase_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e018      	b.n	80045a4 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8004572:	f000 fe9b 	bl	80052ac <FI_CacheFlush>
        return EE_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e014      	b.n	80045a4 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3302      	adds	r3, #2
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <EE_CleanUp_IT+0x11c>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	029a      	lsls	r2, r3, #10
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004588:	4013      	ands	r3, r2
 800458a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800458e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	0b1b      	lsrs	r3, r3, #12
 800459a:	3304      	adds	r3, #4
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d394      	bcc.n	80044cc <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 80045a2:	2305      	movs	r3, #5
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	1fff75e0 	.word	0x1fff75e0
 80045b0:	001ffc00 	.word	0x001ffc00

080045b4 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 80045dc:	2305      	movs	r3, #5
 80045de:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f000 f8ff 	bl	80047e4 <FindPage>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d101      	bne.n	80045f4 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0ab      	b.n	800474c <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80045fa:	031a      	lsls	r2, r3, #12
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <ReadVariable+0x1a0>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	0299      	lsls	r1, r3, #10
 8004602:	4b55      	ldr	r3, [pc, #340]	; (8004758 <ReadVariable+0x1a4>)
 8004604:	400b      	ands	r3, r1
 8004606:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800460a:	fbb1 f1f3 	udiv	r1, r1, r3
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <ReadVariable+0x1a0>)
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	0298      	lsls	r0, r3, #10
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <ReadVariable+0x1a4>)
 8004616:	4003      	ands	r3, r0
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 8004620:	6a38      	ldr	r0, [r7, #32]
 8004622:	f000 fd61 	bl	80050e8 <GetPageState>
 8004626:	4603      	mov	r3, r0
 8004628:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800462a:	e082      	b.n	8004732 <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800462c:	f640 73f8 	movw	r3, #4088	; 0xff8
 8004630:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 8004632:	e03f      	b.n	80046b4 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	bf08      	it	eq
 800464c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004650:	d02d      	beq.n	80046ae <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 8004652:	8a3b      	ldrh	r3, [r7, #16]
 8004654:	88fa      	ldrh	r2, [r7, #6]
 8004656:	429a      	cmp	r2, r3
 8004658:	d129      	bne.n	80046ae <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800465a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	000a      	movs	r2, r1
 8004668:	2300      	movs	r3, #0
 800466a:	8a3b      	ldrh	r3, [r7, #16]
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fdb0 	bl	80051d4 <CalculateCrc>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	0c02      	lsrs	r2, r0, #16
 8004686:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800468a:	0c0b      	lsrs	r3, r1, #16
 800468c:	b293      	uxth	r3, r2
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4293      	cmp	r3, r2
 8004694:	d10b      	bne.n	80046ae <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004696:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	000a      	movs	r2, r1
 80046a4:	2300      	movs	r3, #0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	601a      	str	r2, [r3, #0]

            return EE_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e04e      	b.n	800474c <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b08      	subs	r3, #8
 80046b2:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b1f      	cmp	r3, #31
 80046b8:	d8bc      	bhi.n	8004634 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <ReadVariable+0x1a0>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	029a      	lsls	r2, r3, #10
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <ReadVariable+0x1a4>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	0b1b      	lsrs	r3, r3, #12
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	3303      	adds	r3, #3
 80046da:	f003 0103 	and.w	r1, r3, #3
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <ReadVariable+0x1a0>)
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	029a      	lsls	r2, r3, #10
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <ReadVariable+0x1a4>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046ec:	fbb2 f0f3 	udiv	r0, r2, r3
 80046f0:	fb00 f303 	mul.w	r3, r0, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	0b1b      	lsrs	r3, r3, #12
 80046f8:	440b      	add	r3, r1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    pageaddress = PAGE_ADDRESS(page);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004702:	031a      	lsls	r2, r3, #12
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <ReadVariable+0x1a0>)
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	0299      	lsls	r1, r3, #10
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <ReadVariable+0x1a4>)
 800470c:	400b      	ands	r3, r1
 800470e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004712:	fbb1 f1f3 	udiv	r1, r1, r3
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <ReadVariable+0x1a0>)
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	0298      	lsls	r0, r3, #10
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <ReadVariable+0x1a4>)
 800471e:	4003      	ands	r3, r0
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8004728:	6a38      	ldr	r0, [r7, #32]
 800472a:	f000 fcdd 	bl	80050e8 <GetPageState>
 800472e:	4603      	mov	r3, r0
 8004730:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004732:	7efb      	ldrb	r3, [r7, #27]
 8004734:	2b02      	cmp	r3, #2
 8004736:	f43f af79 	beq.w	800462c <ReadVariable+0x78>
 800473a:	7efb      	ldrb	r3, [r7, #27]
 800473c:	2b03      	cmp	r3, #3
 800473e:	f43f af75 	beq.w	800462c <ReadVariable+0x78>
 8004742:	7efb      	ldrb	r3, [r7, #27]
 8004744:	2b04      	cmp	r3, #4
 8004746:	f43f af71 	beq.w	800462c <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800474a:	2307      	movs	r3, #7
}
 800474c:	4618      	mov	r0, r3
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	1fff75e0 	.word	0x1fff75e0
 8004758:	001ffc00 	.word	0x001ffc00

0800475c <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb71 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004776:	4603      	mov	r3, r0
 8004778:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	2b12      	cmp	r3, #18
 800477e:	d107      	bne.n	8004790 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2200      	movs	r2, #0
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f940 	bl	8004a0c <PagesTransfer>
 800478c:	4603      	mov	r3, r0
 800478e:	e000      	b.n	8004792 <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004790:	89fb      	ldrh	r3, [r7, #14]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 80047a4:	2311      	movs	r3, #17
 80047a6:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 80047ac:	e00f      	b.n	80047ce <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4413      	add	r3, r2
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	bf08      	it	eq
 80047be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80047c2:	d001      	beq.n	80047c8 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 80047c4:	2310      	movs	r3, #16
 80047c6:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3308      	adds	r3, #8
 80047cc:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3eb      	bcc.n	80047ae <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 80047d6:	89fb      	ldrh	r3, [r7, #14]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 80047ee:	2305      	movs	r3, #5
 80047f0:	75fb      	strb	r3, [r7, #23]
 80047f2:	2305      	movs	r3, #5
 80047f4:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004802:	4b7e      	ldr	r3, [pc, #504]	; (80049fc <FindPage+0x218>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800480e:	031a      	lsls	r2, r3, #12
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <FindPage+0x21c>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	0299      	lsls	r1, r3, #10
 8004816:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <FindPage+0x220>)
 8004818:	400b      	ands	r3, r1
 800481a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800481e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004822:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <FindPage+0x21c>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	0298      	lsls	r0, r3, #10
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <FindPage+0x220>)
 800482a:	4003      	ands	r3, r0
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc58 	bl	80050e8 <GetPageState>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800483c:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <FindPage+0x21c>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	029a      	lsls	r2, r3, #10
 8004842:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <FindPage+0x220>)
 8004844:	4013      	ands	r3, r2
 8004846:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800484a:	fbb2 f1f3 	udiv	r1, r2, r3
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	0b1b      	lsrs	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f003 0103 	and.w	r1, r3, #3
 8004860:	4b67      	ldr	r3, [pc, #412]	; (8004a00 <FindPage+0x21c>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	029a      	lsls	r2, r3, #10
 8004866:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <FindPage+0x220>)
 8004868:	4013      	ands	r3, r2
 800486a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800486e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	0b1b      	lsrs	r3, r3, #12
 800487a:	440b      	add	r3, r1
 800487c:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004884:	031a      	lsls	r2, r3, #12
 8004886:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <FindPage+0x21c>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	0299      	lsls	r1, r3, #10
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <FindPage+0x220>)
 800488e:	400b      	ands	r3, r1
 8004890:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004894:	fbb1 f1f3 	udiv	r1, r1, r3
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <FindPage+0x21c>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	0298      	lsls	r0, r3, #10
 800489e:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <FindPage+0x220>)
 80048a0:	4003      	ands	r3, r0
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fc1d 	bl	80050e8 <GetPageState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <FindPage+0x21c>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	029a      	lsls	r2, r3, #10
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <FindPage+0x220>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	0b1b      	lsrs	r3, r3, #12
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	3303      	adds	r3, #3
 80048d2:	f003 0103 	and.w	r1, r3, #3
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <FindPage+0x21c>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	029a      	lsls	r2, r3, #10
 80048dc:	4b49      	ldr	r3, [pc, #292]	; (8004a04 <FindPage+0x220>)
 80048de:	4013      	ands	r3, r2
 80048e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048e4:	fbb2 f0f3 	udiv	r0, r2, r3
 80048e8:	fb00 f303 	mul.w	r3, r0, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	0b1b      	lsrs	r3, r3, #12
 80048f0:	440b      	add	r3, r1
 80048f2:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d071      	beq.n	80049de <FindPage+0x1fa>
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	dc77      	bgt.n	80049ee <FindPage+0x20a>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d060      	beq.n	80049c4 <FindPage+0x1e0>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d173      	bne.n	80049ee <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d12a      	bne.n	8004962 <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <FindPage+0x224>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d201      	bcs.n	800491a <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	e06b      	b.n	80049f2 <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800491a:	7dbb      	ldrb	r3, [r7, #22]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004920:	f7ff fd24 	bl	800436c <EE_CleanUp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	e060      	b.n	80049f2 <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004930:	2103      	movs	r1, #3
 8004932:	6938      	ldr	r0, [r7, #16]
 8004934:	f000 fb16 	bl	8004f64 <SetPageState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	e056      	b.n	80049f2 <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004944:	2102      	movs	r1, #2
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb0c 	bl	8004f64 <SetPageState>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e04c      	b.n	80049f2 <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <FindPage+0x224>)
 800495a:	2220      	movs	r2, #32
 800495c:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	e047      	b.n	80049f2 <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d12a      	bne.n	80049be <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <FindPage+0x224>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d201      	bcs.n	8004976 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	e03d      	b.n	80049f2 <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004976:	7dbb      	ldrb	r3, [r7, #22]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d107      	bne.n	800498c <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800497c:	f7ff fcf6 	bl	800436c <EE_CleanUp>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e032      	b.n	80049f2 <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800498c:	2103      	movs	r1, #3
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f000 fae8 	bl	8004f64 <SetPageState>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e028      	b.n	80049f2 <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 80049a0:	2101      	movs	r1, #1
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fade 	bl	8004f64 <SetPageState>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	e01e      	b.n	80049f2 <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <FindPage+0x224>)
 80049b6:	2220      	movs	r2, #32
 80049b8:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e019      	b.n	80049f2 <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	e016      	b.n	80049f2 <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d101      	bne.n	80049ce <FindPage+0x1ea>
      {
        return currentpage;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	e011      	b.n	80049f2 <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <FindPage+0x1f4>
        {
          return previouspage;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	e00c      	b.n	80049f2 <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e009      	b.n	80049f2 <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 80049de:	7dbb      	ldrb	r3, [r7, #22]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <FindPage+0x204>
      {
        return followingpage;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e004      	b.n	80049f2 <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	e001      	b.n	80049f2 <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200003ae 	.word	0x200003ae
 8004a00:	1fff75e0 	.word	0x1fff75e0
 8004a04:	001ffc00 	.word	0x001ffc00
 8004a08:	20000008 	.word	0x20000008

08004a0c <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	80fb      	strh	r3, [r7, #6]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004a1c:	2305      	movs	r3, #5
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t pageaddress = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004a42:	797b      	ldrb	r3, [r7, #5]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <PagesTransfer+0x40>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e000      	b.n	8004a4e <PagesTransfer+0x42>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fec8 	bl	80047e4 <FindPage>
 8004a54:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d101      	bne.n	8004a62 <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004a5e:	2304      	movs	r3, #4
 8004a60:	e1ed      	b.n	8004e3e <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004a62:	4ba4      	ldr	r3, [pc, #656]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4ba2      	ldr	r3, [pc, #648]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004a6e:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004a70:	4ba2      	ldr	r3, [pc, #648]	; (8004cfc <PagesTransfer+0x2f0>)
 8004a72:	2220      	movs	r2, #32
 8004a74:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004a76:	797b      	ldrb	r3, [r7, #5]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d108      	bne.n	8004a8e <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6a38      	ldr	r0, [r7, #32]
 8004a80:	f000 fa70 	bl	8004f64 <SetPageState>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e1d7      	b.n	8004e3e <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	; (8004d00 <PagesTransfer+0x2f4>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	029a      	lsls	r2, r3, #10
 8004a94:	4b9b      	ldr	r3, [pc, #620]	; (8004d04 <PagesTransfer+0x2f8>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	0b1b      	lsrs	r3, r3, #12
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	3303      	adds	r3, #3
 8004aae:	f003 0103 	and.w	r1, r3, #3
 8004ab2:	4b93      	ldr	r3, [pc, #588]	; (8004d00 <PagesTransfer+0x2f4>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	029a      	lsls	r2, r3, #10
 8004ab8:	4b92      	ldr	r3, [pc, #584]	; (8004d04 <PagesTransfer+0x2f8>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ac0:	fbb2 f0f3 	udiv	r0, r2, r3
 8004ac4:	fb00 f303 	mul.w	r3, r0, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	0b1b      	lsrs	r3, r3, #12
 8004acc:	440b      	add	r3, r1
 8004ace:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ad6:	031a      	lsls	r2, r3, #12
 8004ad8:	4b89      	ldr	r3, [pc, #548]	; (8004d00 <PagesTransfer+0x2f4>)
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	0299      	lsls	r1, r3, #10
 8004ade:	4b89      	ldr	r3, [pc, #548]	; (8004d04 <PagesTransfer+0x2f8>)
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ae6:	fbb1 f1f3 	udiv	r1, r1, r3
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <PagesTransfer+0x2f4>)
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	0298      	lsls	r0, r3, #10
 8004af0:	4b84      	ldr	r3, [pc, #528]	; (8004d04 <PagesTransfer+0x2f8>)
 8004af2:	4003      	ands	r3, r0
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f000 faf3 	bl	80050e8 <GetPageState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d004      	beq.n	8004b1a <PagesTransfer+0x10e>
 8004b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	f040 809e 	bne.w	8004c56 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d108      	bne.n	8004b34 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004b22:	2104      	movs	r1, #4
 8004b24:	6a38      	ldr	r0, [r7, #32]
 8004b26:	f000 fa1d 	bl	8004f64 <SetPageState>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004b30:	2302      	movs	r3, #2
 8004b32:	e184      	b.n	8004e3e <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	029a      	lsls	r2, r3, #10
 8004b3a:	4b72      	ldr	r3, [pc, #456]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b42:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	0b1b      	lsrs	r3, r3, #12
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	3303      	adds	r3, #3
 8004b54:	f003 0103 	and.w	r1, r3, #3
 8004b58:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	029a      	lsls	r2, r3, #10
 8004b5e:	4b69      	ldr	r3, [pc, #420]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b66:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	0b1b      	lsrs	r3, r3, #12
 8004b72:	440b      	add	r3, r1
 8004b74:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004b7c:	031a      	lsls	r2, r3, #12
 8004b7e:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	0299      	lsls	r1, r3, #10
 8004b84:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004b8c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	0298      	lsls	r0, r3, #10
 8004b96:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b98:	4003      	ands	r3, r0
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004ba2:	69b8      	ldr	r0, [r7, #24]
 8004ba4:	f000 faa0 	bl	80050e8 <GetPageState>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004bae:	e049      	b.n	8004c44 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d108      	bne.n	8004bca <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004bb8:	2104      	movs	r1, #4
 8004bba:	6a38      	ldr	r0, [r7, #32]
 8004bbc:	f000 f9d2 	bl	8004f64 <SetPageState>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e139      	b.n	8004e3e <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004bca:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <PagesTransfer+0x2f4>)
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	029a      	lsls	r2, r3, #10
 8004bd0:	4b4c      	ldr	r3, [pc, #304]	; (8004d04 <PagesTransfer+0x2f8>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	0b1b      	lsrs	r3, r3, #12
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	3303      	adds	r3, #3
 8004bea:	f003 0103 	and.w	r1, r3, #3
 8004bee:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <PagesTransfer+0x2f4>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	029a      	lsls	r2, r3, #10
 8004bf4:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <PagesTransfer+0x2f8>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bfc:	fbb2 f0f3 	udiv	r0, r2, r3
 8004c00:	fb00 f303 	mul.w	r3, r0, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	0b1b      	lsrs	r3, r3, #12
 8004c08:	440b      	add	r3, r1
 8004c0a:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c12:	031a      	lsls	r2, r3, #12
 8004c14:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	0299      	lsls	r1, r3, #10
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004c22:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	0298      	lsls	r0, r3, #10
 8004c2c:	4b35      	ldr	r3, [pc, #212]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c2e:	4003      	ands	r3, r0
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004c38:	69b8      	ldr	r0, [r7, #24]
 8004c3a:	f000 fa55 	bl	80050e8 <GetPageState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d0b1      	beq.n	8004bb0 <PagesTransfer+0x1a4>
 8004c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d0ad      	beq.n	8004bb0 <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004c54:	e008      	b.n	8004c68 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004c56:	797b      	ldrb	r3, [r7, #5]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d103      	bne.n	8004c64 <PagesTransfer+0x258>
 8004c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d001      	beq.n	8004c68 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004c64:	230a      	movs	r3, #10
 8004c66:	e0ea      	b.n	8004e3e <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004c68:	797b      	ldrb	r3, [r7, #5]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	f040 809b 	bne.w	8004da6 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004c70:	2320      	movs	r3, #32
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e031      	b.n	8004cda <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c7e:	031a      	lsls	r2, r3, #12
 8004c80:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0299      	lsls	r1, r3, #10
 8004c86:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c88:	400b      	ands	r3, r1
 8004c8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004c8e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	0298      	lsls	r0, r3, #10
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c9a:	4003      	ands	r3, r0
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	441a      	add	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	bf08      	it	eq
 8004cb8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004cbc:	d012      	beq.n	8004ce4 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004cc8:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <PagesTransfer+0x2f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <PagesTransfer+0x2f0>)
 8004cd2:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d3c9      	bcc.n	8004c76 <PagesTransfer+0x26a>
 8004ce2:	e000      	b.n	8004ce6 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004ce4:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004ce6:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	e054      	b.n	8004d9c <PagesTransfer+0x390>
 8004cf2:	bf00      	nop
 8004cf4:	200003ac 	.word	0x200003ac
 8004cf8:	200003ae 	.word	0x200003ae
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	1fff75e0 	.word	0x1fff75e0
 8004d04:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004d08:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <PagesTransfer+0x43c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	029a      	lsls	r2, r3, #10
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	; (8004e4c <PagesTransfer+0x440>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d16:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	0b1b      	lsrs	r3, r3, #12
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	3303      	adds	r3, #3
 8004d28:	f003 0103 	and.w	r1, r3, #3
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <PagesTransfer+0x43c>)
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	029a      	lsls	r2, r3, #10
 8004d32:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <PagesTransfer+0x440>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d3a:	fbb2 f0f3 	udiv	r0, r2, r3
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	0b1b      	lsrs	r3, r3, #12
 8004d46:	440b      	add	r3, r1
 8004d48:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004d50:	031a      	lsls	r2, r3, #12
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <PagesTransfer+0x43c>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	0299      	lsls	r1, r3, #10
 8004d58:	4b3c      	ldr	r3, [pc, #240]	; (8004e4c <PagesTransfer+0x440>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004d60:	fbb1 f1f3 	udiv	r1, r1, r3
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <PagesTransfer+0x43c>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	0298      	lsls	r0, r3, #10
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <PagesTransfer+0x440>)
 8004d6c:	4003      	ands	r3, r0
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9b7 	bl	80050e8 <GetPageState>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d10d      	bne.n	8004da4 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8004d88:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <PagesTransfer+0x444>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <PagesTransfer+0x444>)
 8004d94:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d9b2      	bls.n	8004d08 <PagesTransfer+0x2fc>
 8004da2:	e000      	b.n	8004da6 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8004da4:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f854 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8004db6:	2302      	movs	r3, #2
 8004db8:	e041      	b.n	8004e3e <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8004dba:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <PagesTransfer+0x444>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d903      	bls.n	8004dca <PagesTransfer+0x3be>
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <PagesTransfer+0x444>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	3b02      	subs	r3, #2
 8004dc8:	e000      	b.n	8004dcc <PagesTransfer+0x3c0>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e026      	b.n	8004e1e <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d01f      	beq.n	8004e18 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f107 0208 	add.w	r2, r7, #8
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fbe6 	bl	80045b4 <ReadVariable>
 8004de8:	4603      	mov	r3, r0
 8004dea:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f82c 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004e00:	4603      	mov	r3, r0
 8004e02:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <PagesTransfer+0x40c>
        {
          return status;
 8004e0a:	89fb      	ldrh	r3, [r7, #14]
 8004e0c:	e017      	b.n	8004e3e <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	2b07      	cmp	r3, #7
 8004e12:	d001      	beq.n	8004e18 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	e012      	b.n	8004e3e <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b32      	cmp	r3, #50	; 0x32
 8004e22:	d9d5      	bls.n	8004dd0 <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <PagesTransfer+0x448>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f89a 	bl	8004f64 <SetPageState>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e001      	b.n	8004e3e <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8004e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3728      	adds	r7, #40	; 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	1fff75e0 	.word	0x1fff75e0
 8004e4c:	001ffc00 	.word	0x001ffc00
 8004e50:	200003ac 	.word	0x200003ac
 8004e54:	200003ae 	.word	0x200003ae

08004e58 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	b08b      	sub	sp, #44	; 0x2c
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	6139      	str	r1, [r7, #16]
 8004e64:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8004e72:	d301      	bcc.n	8004e78 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8004e74:	2312      	movs	r3, #18
 8004e76:	e068      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7ff fcb3 	bl	80047e4 <FindPage>
 8004e7e:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d101      	bne.n	8004e90 <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e05c      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e96:	0319      	lsls	r1, r3, #12
 8004e98:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <VerifyPagesFullWriteVariable+0x100>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	029a      	lsls	r2, r3, #10
 8004e9e:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <VerifyPagesFullWriteVariable+0x104>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <VerifyPagesFullWriteVariable+0x100>)
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	0298      	lsls	r0, r3, #10
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <VerifyPagesFullWriteVariable+0x104>)
 8004eb2:	4003      	ands	r3, r0
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	440b      	add	r3, r1
 8004eba:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <VerifyPagesFullWriteVariable+0x76>
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e006      	b.n	8004edc <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 8004ece:	8afb      	ldrh	r3, [r7, #22]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6938      	ldr	r0, [r7, #16]
 8004ed4:	f000 f97e 	bl	80051d4 <CalculateCrc>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	18d0      	adds	r0, r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	60fa      	str	r2, [r7, #12]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	000b      	movs	r3, r1
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efc:	0409      	lsls	r1, r1, #16
 8004efe:	2600      	movs	r6, #0
 8004f00:	468a      	mov	sl, r1
 8004f02:	46b3      	mov	fp, r6
 8004f04:	ea42 040a 	orr.w	r4, r2, sl
 8004f08:	ea43 050b 	orr.w	r5, r3, fp
 8004f0c:	8afb      	ldrh	r3, [r7, #22]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4698      	mov	r8, r3
 8004f12:	4691      	mov	r9, r2
 8004f14:	ea44 0308 	orr.w	r3, r4, r8
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	ea45 0309 	orr.w	r3, r5, r9
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	f000 f972 	bl	800520c <FI_WriteDoubleWord>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e00b      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004f3a:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004f46:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	372c      	adds	r7, #44	; 0x2c
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	200003ac 	.word	0x200003ac
 8004f58:	1fff75e0 	.word	0x1fff75e0
 8004f5c:	001ffc00 	.word	0x001ffc00
 8004f60:	20000008 	.word	0x20000008

08004f64 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f86:	031a      	lsls	r2, r3, #12
 8004f88:	4b54      	ldr	r3, [pc, #336]	; (80050dc <SetPageState+0x178>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	0299      	lsls	r1, r3, #10
 8004f8e:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <SetPageState+0x17c>)
 8004f90:	400b      	ands	r3, r1
 8004f92:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004f96:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <SetPageState+0x178>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	0298      	lsls	r0, r3, #10
 8004fa0:	4b4f      	ldr	r3, [pc, #316]	; (80050e0 <SetPageState+0x17c>)
 8004fa2:	4003      	ands	r3, r0
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fb2:	031a      	lsls	r2, r3, #12
 8004fb4:	4b49      	ldr	r3, [pc, #292]	; (80050dc <SetPageState+0x178>)
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	0299      	lsls	r1, r3, #10
 8004fba:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <SetPageState+0x17c>)
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004fc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004fc6:	4b45      	ldr	r3, [pc, #276]	; (80050dc <SetPageState+0x178>)
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	0298      	lsls	r0, r3, #10
 8004fcc:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <SetPageState+0x17c>)
 8004fce:	4003      	ands	r3, r0
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fe0:	031a      	lsls	r2, r3, #12
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <SetPageState+0x178>)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	0299      	lsls	r1, r3, #10
 8004fe8:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <SetPageState+0x17c>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ff0:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ff4:	4b39      	ldr	r3, [pc, #228]	; (80050dc <SetPageState+0x178>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	0298      	lsls	r0, r3, #10
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <SetPageState+0x17c>)
 8004ffc:	4003      	ands	r3, r0
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	3310      	adds	r3, #16
 8005006:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800500e:	031a      	lsls	r2, r3, #12
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <SetPageState+0x178>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	0299      	lsls	r1, r3, #10
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <SetPageState+0x17c>)
 8005018:	400b      	ands	r3, r1
 800501a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800501e:	fbb1 f1f3 	udiv	r1, r1, r3
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <SetPageState+0x178>)
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	0298      	lsls	r0, r3, #10
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <SetPageState+0x17c>)
 800502a:	4003      	ands	r3, r0
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	3318      	adds	r3, #24
 8005034:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	3b01      	subs	r3, #1
 800503a:	2b03      	cmp	r3, #3
 800503c:	d844      	bhi.n	80050c8 <SetPageState+0x164>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <SetPageState+0xe0>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005055 	.word	0x08005055
 8005048:	08005077 	.word	0x08005077
 800504c:	08005099 	.word	0x08005099
 8005050:	080050b1 	.word	0x080050b1
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8005054:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8005058:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800505c:	6978      	ldr	r0, [r7, #20]
 800505e:	f000 f8d5 	bl	800520c <FI_WriteDoubleWord>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005068:	2302      	movs	r3, #2
 800506a:	e033      	b.n	80050d4 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <SetPageState+0x180>)
 8005072:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005074:	e02d      	b.n	80050d2 <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005076:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800507a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f000 f8c4 	bl	800520c <FI_WriteDoubleWord>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 800508a:	2302      	movs	r3, #2
 800508c:	e022      	b.n	80050d4 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <SetPageState+0x180>)
 8005094:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005096:	e01c      	b.n	80050d2 <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005098:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800509c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8b3 	bl	800520c <FI_WriteDoubleWord>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 80050ac:	2302      	movs	r3, #2
 80050ae:	e011      	b.n	80050d4 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 80050b0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80050b4:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f000 f8a7 	bl	800520c <FI_WriteDoubleWord>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 80050c4:	2302      	movs	r3, #2
 80050c6:	e005      	b.n	80050d4 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <SetPageState+0x16e>
    break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <SetPageState+0x16e>
    break;
 80050d0:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	1fff75e0 	.word	0x1fff75e0
 80050e0:	001ffc00 	.word	0x001ffc00
 80050e4:	200003ae 	.word	0x200003ae

080050e8 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3308      	adds	r3, #8
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3310      	adds	r3, #16
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3318      	adds	r3, #24
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800514e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	bf08      	it	eq
 8005158:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800515c:	d001      	beq.n	8005162 <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800515e:	2304      	movs	r3, #4
 8005160:	e01e      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 8005162:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	bf08      	it	eq
 800516c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005170:	d001      	beq.n	8005176 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 8005172:	2303      	movs	r3, #3
 8005174:	e014      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	bf08      	it	eq
 8005180:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005184:	d001      	beq.n	800518a <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005186:	2302      	movs	r3, #2
 8005188:	e00a      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800518a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	bf08      	it	eq
 8005194:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005198:	d001      	beq.n	800519e <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	372c      	adds	r7, #44	; 0x2c
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80051b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051b4:	f7fe fa9a 	bl	80036ec <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 80051b8:	f248 0105 	movw	r1, #32773	; 0x8005
 80051bc:	4804      	ldr	r0, [pc, #16]	; (80051d0 <ConfigureCrc+0x24>)
 80051be:	f7fe fad1 	bl	8003764 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 80051c2:	2108      	movs	r1, #8
 80051c4:	4802      	ldr	r0, [pc, #8]	; (80051d0 <ConfigureCrc+0x24>)
 80051c6:	f7fe faba 	bl	800373e <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023000 	.word	0x40023000

080051d4 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <CalculateCrc+0x34>)
 80051e2:	f7fe fa9c 	bl	800371e <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4807      	ldr	r0, [pc, #28]	; (8005208 <CalculateCrc+0x34>)
 80051ea:	f7fe fac9 	bl	8003780 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	4619      	mov	r1, r3
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <CalculateCrc+0x34>)
 80051f4:	f7fe fad2 	bl	800379c <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80051f8:	4803      	ldr	r0, [pc, #12]	; (8005208 <CalculateCrc+0x34>)
 80051fa:	f7fe fae0 	bl	80037be <LL_CRC_ReadData16>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023000 	.word	0x40023000

0800520c <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 8005218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	2001      	movs	r0, #1
 8005220:	f007 fe18 	bl	800ce54 <HAL_FLASH_Program>
 8005224:	4603      	mov	r3, r0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005242:	2302      	movs	r3, #2
 8005244:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800524e:	f107 020c 	add.w	r2, r7, #12
 8005252:	f107 0310 	add.w	r3, r7, #16
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f007 ff11 	bl	800d080 <HAL_FLASHEx_Erase>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005268:	8bfb      	ldrh	r3, [r7, #30]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005282:	2302      	movs	r3, #2
 8005284:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005286:	887b      	ldrh	r3, [r7, #2]
 8005288:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f007 ff44 	bl	800d120 <HAL_FLASHEx_Erase_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 80052a2:	8afb      	ldrh	r3, [r7, #22]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <FI_CacheFlush+0x40>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <FI_CacheFlush+0x40>)
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ba:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <FI_CacheFlush+0x40>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <FI_CacheFlush+0x40>)
 80052c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <FI_CacheFlush+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a07      	ldr	r2, [pc, #28]	; (80052ec <FI_CacheFlush+0x40>)
 80052ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <FI_CacheFlush+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <FI_CacheFlush+0x40>)
 80052da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	58004000 	.word	0x58004000

080052f0 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80052f4:	2300      	movs	r3, #0
#endif
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f023 0218 	bic.w	r2, r3, #24
 8005314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005368:	f000 f834 	bl	80053d4 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <serialOut+0x58>)
 8005370:	4912      	ldr	r1, [pc, #72]	; (80053bc <serialOut+0x5c>)
 8005372:	4813      	ldr	r0, [pc, #76]	; (80053c0 <serialOut+0x60>)
 8005374:	f00e fc8a 	bl	8013c8c <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005378:	4811      	ldr	r0, [pc, #68]	; (80053c0 <serialOut+0x60>)
 800537a:	f7fa ff01 	bl	8000180 <strlen>
 800537e:	4603      	mov	r3, r0
 8005380:	b29a      	uxth	r2, r3
 8005382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005386:	490e      	ldr	r1, [pc, #56]	; (80053c0 <serialOut+0x60>)
 8005388:	480e      	ldr	r0, [pc, #56]	; (80053c4 <serialOut+0x64>)
 800538a:	f00c f961 	bl	8011650 <HAL_UART_Transmit>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <serialOut+0x68>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <serialOut+0x4e>
 80053a0:	490a      	ldr	r1, [pc, #40]	; (80053cc <serialOut+0x6c>)
 80053a2:	480b      	ldr	r0, [pc, #44]	; (80053d0 <serialOut+0x70>)
 80053a4:	f00e fc72 	bl	8013c8c <siprintf>
 80053a8:	4809      	ldr	r0, [pc, #36]	; (80053d0 <serialOut+0x70>)
 80053aa:	f7ff ffd9 	bl	8005360 <serialOut>
  }
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000a5c 	.word	0x20000a5c
 80053bc:	08017000 	.word	0x08017000
 80053c0:	20000a68 	.word	0x20000a68
 80053c4:	2000044c 	.word	0x2000044c
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	08017008 	.word	0x08017008
 80053d0:	20000b64 	.word	0x20000b64

080053d4 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	2201      	movs	r2, #1
 80053f4:	4619      	mov	r1, r3
 80053f6:	480e      	ldr	r0, [pc, #56]	; (8005430 <getTimeBCD+0x5c>)
 80053f8:	f00a f9b0 	bl	800f75c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	2201      	movs	r2, #1
 8005400:	4619      	mov	r1, r3
 8005402:	480b      	ldr	r0, [pc, #44]	; (8005430 <getTimeBCD+0x5c>)
 8005404:	f00a fab4 	bl	800f970 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 8005408:	7abb      	ldrb	r3, [r7, #10]
 800540a:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8005410:	7a3b      	ldrb	r3, [r7, #8]
 8005412:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 8005414:	7f7a      	ldrb	r2, [r7, #29]
 8005416:	7fb9      	ldrb	r1, [r7, #30]
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	460b      	mov	r3, r1
 800541e:	4905      	ldr	r1, [pc, #20]	; (8005434 <getTimeBCD+0x60>)
 8005420:	4805      	ldr	r0, [pc, #20]	; (8005438 <getTimeBCD+0x64>)
 8005422:	f00e fc33 	bl	8013c8c <siprintf>
}
 8005426:	bf00      	nop
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200004ec 	.word	0x200004ec
 8005434:	0801702c 	.word	0x0801702c
 8005438:	20000a5c 	.word	0x20000a5c

0800543c <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b092      	sub	sp, #72	; 0x48
 8005440:	af00      	add	r7, sp, #0
 8005442:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 8005446:	463b      	mov	r3, r7
 8005448:	4618      	mov	r0, r3
 800544a:	f00d fadd 	bl	8012a08 <localtime>
 800544e:	4603      	mov	r3, r0
 8005450:	f107 040c 	add.w	r4, r7, #12
 8005454:	461d      	mov	r5, r3
 8005456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800545c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800547a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800547e:	2200      	movs	r2, #0
 8005480:	4619      	mov	r1, r3
 8005482:	4826      	ldr	r0, [pc, #152]	; (800551c <writeRTC+0xe0>)
 8005484:	f00a f8a6 	bl	800f5d4 <HAL_RTC_SetTime>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <writeRTC+0xe4>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <writeRTC+0x6c>
 800549a:	4922      	ldr	r1, [pc, #136]	; (8005524 <writeRTC+0xe8>)
 800549c:	4822      	ldr	r0, [pc, #136]	; (8005528 <writeRTC+0xec>)
 800549e:	f00e fbf5 	bl	8013c8c <siprintf>
 80054a2:	4821      	ldr	r0, [pc, #132]	; (8005528 <writeRTC+0xec>)
 80054a4:	f7ff ff5c 	bl	8005360 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <writeRTC+0x76>
 80054ae:	2307      	movs	r3, #7
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b64      	subs	r3, #100	; 0x64
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80054da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054de:	2200      	movs	r2, #0
 80054e0:	4619      	mov	r1, r3
 80054e2:	480e      	ldr	r0, [pc, #56]	; (800551c <writeRTC+0xe0>)
 80054e4:	f00a f996 	bl	800f814 <HAL_RTC_SetDate>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <writeRTC+0xe4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <writeRTC+0xcc>
 80054fa:	490c      	ldr	r1, [pc, #48]	; (800552c <writeRTC+0xf0>)
 80054fc:	480a      	ldr	r0, [pc, #40]	; (8005528 <writeRTC+0xec>)
 80054fe:	f00e fbc5 	bl	8013c8c <siprintf>
 8005502:	4809      	ldr	r0, [pc, #36]	; (8005528 <writeRTC+0xec>)
 8005504:	f7ff ff2c 	bl	8005360 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 8005508:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800550c:	2100      	movs	r1, #0
 800550e:	4803      	ldr	r0, [pc, #12]	; (800551c <writeRTC+0xe0>)
 8005510:	f00a fb07 	bl	800fb22 <HAL_RTCEx_BKUPWrite>

}
 8005514:	bf00      	nop
 8005516:	3748      	adds	r7, #72	; 0x48
 8005518:	46bd      	mov	sp, r7
 800551a:	bdb0      	pop	{r4, r5, r7, pc}
 800551c:	200004ec 	.word	0x200004ec
 8005520:	2000000c 	.word	0x2000000c
 8005524:	0801703c 	.word	0x0801703c
 8005528:	20000b64 	.word	0x20000b64
 800552c:	08017064 	.word	0x08017064

08005530 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b094      	sub	sp, #80	; 0x50
 8005534:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  struct tm tim = {0};
 8005542:	463b      	mov	r3, r7
 8005544:	2224      	movs	r2, #36	; 0x24
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f00d fb8d 	bl	8012c68 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800554e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005552:	2200      	movs	r2, #0
 8005554:	4619      	mov	r1, r3
 8005556:	4822      	ldr	r0, [pc, #136]	; (80055e0 <readRTC+0xb0>)
 8005558:	f00a f900 	bl	800f75c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800555c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005560:	2200      	movs	r2, #0
 8005562:	4619      	mov	r1, r3
 8005564:	481e      	ldr	r0, [pc, #120]	; (80055e0 <readRTC+0xb0>)
 8005566:	f00a fa03 	bl	800f970 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 800556a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800556e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t mm  = rtcTime.Minutes;
 8005572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005576:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t ss  = rtcTime.Seconds;
 800557a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800557e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t d   = rtcDate.Date;
 8005582:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005586:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  uint8_t m   = rtcDate.Month;
 800558a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint16_t y  = rtcDate.Year;
 8005592:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005596:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 800559a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800559e:	3364      	adds	r3, #100	; 0x64
 80055a0:	87fb      	strh	r3, [r7, #62]	; 0x3e

  tim.tm_year = yr;
 80055a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055a4:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 80055a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055aa:	3b01      	subs	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 80055ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80055b2:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 80055b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80055b8:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 80055ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80055be:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 80055c0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80055c4:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80055c6:	463b      	mov	r3, r7
 80055c8:	4618      	mov	r0, r3
 80055ca:	f00d fc2d 	bl	8012e28 <mktime>
 80055ce:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

  return currentTime;
 80055d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	3750      	adds	r7, #80	; 0x50
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200004ec 	.word	0x200004ec

080055e4 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80055ee:	2301      	movs	r3, #1
 80055f0:	80fb      	strh	r3, [r7, #6]
 80055f2:	e010      	b.n	8005616 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <LoadAllEEPROM+0x44>)
 80055fa:	441a      	add	r2, r3
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fe73 	bl	80042ec <EE_ReadVariable32bits>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	88bb      	ldrh	r3, [r7, #4]
 800560c:	4313      	orrs	r3, r2
 800560e:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	3301      	adds	r3, #1
 8005614:	80fb      	strh	r3, [r7, #6]
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b32      	cmp	r3, #50	; 0x32
 800561a:	d9eb      	bls.n	80055f4 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 800561c:	88bb      	ldrh	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000098c 	.word	0x2000098c

0800562c <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 800563c:	f007 fc4e 	bl	800cedc <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005640:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <StoreEEPROM+0x88>)
 8005642:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005646:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005648:	bf00      	nop
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <StoreEEPROM+0x88>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005656:	d0f8      	beq.n	800564a <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005658:	bf00      	nop
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <StoreEEPROM+0x8c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d0fb      	beq.n	800565a <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fe64 	bl	8004336 <EE_WriteVariable32bits>
 800566e:	4603      	mov	r3, r0
 8005670:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 8005672:	463a      	mov	r2, r7
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fe37 	bl	80042ec <EE_ReadVariable32bits>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	4313      	orrs	r3, r2
 8005686:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <StoreEEPROM+0x7a>
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <StoreEEPROM+0x8c>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f7fe fefa 	bl	8004490 <EE_CleanUp_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	461a      	mov	r2, r3
 80056a0:	89fb      	ldrh	r3, [r7, #14]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 80056a6:	f007 fc3b 	bl	800cf20 <HAL_FLASH_Lock>

  return eeStatus;
 80056aa:	89fb      	ldrh	r3, [r7, #14]

    */



}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	58004000 	.word	0x58004000
 80056b8:	20000988 	.word	0x20000988

080056bc <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d018      	beq.n	80056fe <switchLedOn+0x42>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	dc1f      	bgt.n	8005710 <switchLedOn+0x54>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <switchLedOn+0x1e>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d009      	beq.n	80056ec <switchLedOn+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80056d8:	e01a      	b.n	8005710 <switchLedOn+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <switchLedOn+0x60>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <switchLedOn+0x64>)
 80056e0:	8811      	ldrh	r1, [r2, #0]
 80056e2:	2201      	movs	r2, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f007 ff59 	bl	800d59c <HAL_GPIO_WritePin>
            break;
 80056ea:	e012      	b.n	8005712 <switchLedOn+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <switchLedOn+0x68>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <switchLedOn+0x6c>)
 80056f2:	8811      	ldrh	r1, [r2, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f007 ff50 	bl	800d59c <HAL_GPIO_WritePin>
            break;
 80056fc:	e009      	b.n	8005712 <switchLedOn+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <switchLedOn+0x70>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <switchLedOn+0x74>)
 8005704:	8811      	ldrh	r1, [r2, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f007 ff47 	bl	800d59c <HAL_GPIO_WritePin>
            break;
 800570e:	e000      	b.n	8005712 <switchLedOn+0x56>
        default: break;
 8005710:	bf00      	nop
    }
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000cf0 	.word	0x20000cf0
 8005720:	20000cec 	.word	0x20000cec
 8005724:	20000ce8 	.word	0x20000ce8
 8005728:	20000ce6 	.word	0x20000ce6
 800572c:	20000cf8 	.word	0x20000cf8
 8005730:	20000cf4 	.word	0x20000cf4

08005734 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d018      	beq.n	8005776 <switchLedOff+0x42>
 8005744:	2b02      	cmp	r3, #2
 8005746:	dc1f      	bgt.n	8005788 <switchLedOff+0x54>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <switchLedOff+0x1e>
 800574c:	2b01      	cmp	r3, #1
 800574e:	d009      	beq.n	8005764 <switchLedOff+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8005750:	e01a      	b.n	8005788 <switchLedOff+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <switchLedOff+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <switchLedOff+0x64>)
 8005758:	8811      	ldrh	r1, [r2, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f007 ff1d 	bl	800d59c <HAL_GPIO_WritePin>
            break;
 8005762:	e012      	b.n	800578a <switchLedOff+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <switchLedOff+0x68>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <switchLedOff+0x6c>)
 800576a:	8811      	ldrh	r1, [r2, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f007 ff14 	bl	800d59c <HAL_GPIO_WritePin>
            break;
 8005774:	e009      	b.n	800578a <switchLedOff+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <switchLedOff+0x70>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <switchLedOff+0x74>)
 800577c:	8811      	ldrh	r1, [r2, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f007 ff0b 	bl	800d59c <HAL_GPIO_WritePin>
            break;
 8005786:	e000      	b.n	800578a <switchLedOff+0x56>
        default: break;
 8005788:	bf00      	nop
    }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000cf0 	.word	0x20000cf0
 8005798:	20000cec 	.word	0x20000cec
 800579c:	20000ce8 	.word	0x20000ce8
 80057a0:	20000ce6 	.word	0x20000ce6
 80057a4:	20000cf8 	.word	0x20000cf8
 80057a8:	20000cf4 	.word	0x20000cf4

080057ac <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN1_INT_Pin){
 80057b6:	4b36      	ldr	r3, [pc, #216]	; (8005890 <HAL_GPIO_EXTI_Callback+0xe4>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d063      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 80057c0:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_GPIO_EXTI_Callback+0xe8>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d103      	bne.n	80057d2 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 80057ca:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_GPIO_EXTI_Callback+0xec>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON2_Pin){

  }else if(GPIO_Pin == BUTTON3_Pin){

  }
}
 80057d0:	e05a      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 80057d2:	4b32      	ldr	r3, [pc, #200]	; (800589c <HAL_GPIO_EXTI_Callback+0xf0>)
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d11c      	bne.n	8005816 <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_GPIO_EXTI_Callback+0xf0>)
 80057e2:	8812      	ldrh	r2, [r2, #0]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f007 fec0 	bl	800d56c <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80057fc:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_EXTI_Callback+0x62>
 8005806:	2000      	movs	r0, #0
 8005808:	f7ff ff58 	bl	80056bc <switchLedOn>
}
 800580c:	e03c      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
     else switchLedOff(VCU_RX_LED);
 800580e:	2000      	movs	r0, #0
 8005810:	f7ff ff90 	bl	8005734 <switchLedOff>
}
 8005814:	e038      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	429a      	cmp	r2, r3
 800581e:	d033      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_GPIO_EXTI_Callback+0x100>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	429a      	cmp	r2, r3
 8005828:	d103      	bne.n	8005832 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_GPIO_EXTI_Callback+0x104>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
}
 8005830:	e02a      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	429a      	cmp	r2, r3
 800583a:	d11c      	bne.n	8005876 <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_GPIO_EXTI_Callback+0x10c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005842:	8812      	ldrh	r2, [r2, #0]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f007 fe90 	bl	800d56c <HAL_GPIO_ReadPin>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <HAL_GPIO_EXTI_Callback+0x110>)
 800585c:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_GPIO_EXTI_Callback+0x110>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_EXTI_Callback+0xc2>
 8005866:	2001      	movs	r0, #1
 8005868:	f7ff ff28 	bl	80056bc <switchLedOn>
}
 800586c:	e00c      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
    else switchLedOff(MCU_RX_LED);
 800586e:	2001      	movs	r0, #1
 8005870:	f7ff ff60 	bl	8005734 <switchLedOff>
}
 8005874:	e008      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <HAL_GPIO_EXTI_Callback+0x114>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	429a      	cmp	r2, r3
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005880:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <HAL_GPIO_EXTI_Callback+0x118>)
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	429a      	cmp	r2, r3
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000c5e 	.word	0x20000c5e
 8005894:	20000c66 	.word	0x20000c66
 8005898:	20000d1f 	.word	0x20000d1f
 800589c:	20000c6e 	.word	0x20000c6e
 80058a0:	20000c70 	.word	0x20000c70
 80058a4:	20000d1e 	.word	0x20000d1e
 80058a8:	20000c7c 	.word	0x20000c7c
 80058ac:	20000c86 	.word	0x20000c86
 80058b0:	20000d1d 	.word	0x20000d1d
 80058b4:	20000c8e 	.word	0x20000c8e
 80058b8:	20000c90 	.word	0x20000c90
 80058bc:	20000d1c 	.word	0x20000d1c
 80058c0:	20000ccc 	.word	0x20000ccc
 80058c4:	20000cd6 	.word	0x20000cd6

080058c8 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d129      	bne.n	8005930 <HAL_TIM_PeriodElapsedCallback+0x68>
    // last contact timer overflow
    etTimerOverflows++;
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80058e4:	6013      	str	r3, [r2, #0]
    decSec++;
 80058e6:	4b16      	ldr	r3, [pc, #88]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058f0:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b0a      	cmp	r3, #10
 80058f8:	d10a      	bne.n	8005910 <HAL_TIM_PeriodElapsedCallback+0x48>
      decSec = 0;
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin);
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f007 fe5e 	bl	800d5cc <HAL_GPIO_TogglePin>
    }
    if((decSec % 5) == 0) sendState = 1;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8005916:	fba3 1302 	umull	r1, r3, r3, r2
 800591a:	0899      	lsrs	r1, r3, #2
 800591c:	460b      	mov	r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_TIM_PeriodElapsedCallback+0x68>
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
  }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200005d8 	.word	0x200005d8
 800593c:	20000d20 	.word	0x20000d20
 8005940:	20000d24 	.word	0x20000d24
 8005944:	20000cf8 	.word	0x20000cf8
 8005948:	20000cf4 	.word	0x20000cf4
 800594c:	cccccccd 	.word	0xcccccccd
 8005950:	20000d25 	.word	0x20000d25

08005954 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 800595e:	f007 fabd 	bl	800cedc <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005962:	492f      	ldr	r1, [pc, #188]	; (8005a20 <eepromDefaults+0xcc>)
 8005964:	2001      	movs	r0, #1
 8005966:	f7fe fce6 	bl	8004336 <EE_WriteVariable32bits>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	4313      	orrs	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <eepromDefaults+0x3e>
 800597e:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <eepromDefaults+0xd0>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f7fe fd84 	bl	8004490 <EE_CleanUp_IT>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	4313      	orrs	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005992:	bf00      	nop
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <eepromDefaults+0xd0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1fb      	bne.n	8005994 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 800599c:	4922      	ldr	r1, [pc, #136]	; (8005a28 <eepromDefaults+0xd4>)
 800599e:	2002      	movs	r0, #2
 80059a0:	f7fe fcc9 	bl	8004336 <EE_WriteVariable32bits>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <eepromDefaults+0x78>
 80059b8:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <eepromDefaults+0xd0>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f7fe fd67 	bl	8004490 <EE_CleanUp_IT>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 80059cc:	bf00      	nop
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <eepromDefaults+0xd0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1fb      	bne.n	80059ce <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 80059d6:	2100      	movs	r1, #0
 80059d8:	2003      	movs	r0, #3
 80059da:	f7fe fcac 	bl	8004336 <EE_WriteVariable32bits>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <eepromDefaults+0xb2>
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <eepromDefaults+0xd0>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f7fe fd4a 	bl	8004490 <EE_CleanUp_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005a06:	bf00      	nop
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <eepromDefaults+0xd0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1fb      	bne.n	8005a08 <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005a10:	f007 fa86 	bl	800cf20 <HAL_FLASH_Lock>

  return eeStatus;
 8005a14:	88fb      	ldrh	r3, [r7, #6]

}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	50616c61 	.word	0x50616c61
 8005a24:	20000988 	.word	0x20000988
 8005a28:	746f7621 	.word	0x746f7621

08005a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a36:	f006 ffb9 	bl	800c9ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a3a:	f000 f881 	bl	8005b40 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005a3e:	f000 f8eb 	bl	8005c18 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Enable and set FLASH Interrupt priority */
    /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
    HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005a42:	2200      	movs	r2, #0
 8005a44:	2100      	movs	r1, #0
 8005a46:	2004      	movs	r0, #4
 8005a48:	f007 f911 	bl	800cc6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005a4c:	2004      	movs	r0, #4
 8005a4e:	f007 f928 	bl	800cca2 <HAL_NVIC_EnableIRQ>

    /* Unlock the Flash Program Erase controller */
    HAL_FLASH_Unlock();
 8005a52:	f007 fa43 	bl	800cedc <HAL_FLASH_Unlock>

    /* Clear OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <main+0xfc>)
 8005a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005a5c:	611a      	str	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005a5e:	bf00      	nop
 8005a60:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <main+0xfc>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d0f8      	beq.n	8005a60 <main+0x34>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a6e:	f000 fb17 	bl	80060a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005a72:	f000 f9c3 	bl	8005dfc <MX_SPI1_Init>
  MX_SPI2_Init();
 8005a76:	f000 f9ff 	bl	8005e78 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005a7a:	f000 f937 	bl	8005cec <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005a7e:	f000 fae7 	bl	8006050 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005a82:	f000 f97f 	bl	8005d84 <MX_PKA_Init>
  MX_RTC_Init();
 8005a86:	f000 f991 	bl	8005dac <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005a8a:	f000 f8e3 	bl	8005c54 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005a8e:	f000 fa31 	bl	8005ef4 <MX_TIM1_Init>
  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <main+0x100>)
 8005a94:	f00a fcdc 	bl	8010450 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <main+0x104>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <main+0x90>
    HAL_Delay(100);
    BSP_LED_Off(LED_OK);
    */
    /* System reset comes from a power-on reset: Forced Erase */
    /* Initialize EEPROM emulation driver (mandatory) */
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f7fd fe96 	bl	80037d8 <EE_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <main+0xbe>
 8005ab6:	f000 fde9 	bl	800668c <Error_Handler>
 8005aba:	e016      	b.n	8005aea <main+0xbe>
  }
  else
  {
    /* Clear the Standby flag */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005abc:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <main+0x104>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Check and Clear the Wakeup flag */
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <main+0x104>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <main+0xaa>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <main+0x104>)
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
    BSP_LED_Off(LED_OK);
    */
    /* System reset comes from a STANDBY wakeup: Conditional Erase*/
    /* Initialize EEPROM emulation driver (mandatory) */
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7fd fe7e 	bl	80037d8 <EE_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <main+0xbe>
 8005ae6:	f000 fdd1 	bl	800668c <Error_Handler>
  }


  LoadAllEEPROM();
 8005aea:	f7ff fd7b 	bl	80055e4 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <main+0x108>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <main+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d104      	bne.n	8005b02 <main+0xd6>
 8005af8:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <main+0x108>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <main+0x110>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d005      	beq.n	8005b0e <main+0xe2>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005b02:	f7ff ff27 	bl	8005954 <eepromDefaults>
 8005b06:	4603      	mov	r3, r0
 8005b08:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005b0a:	f7ff fd6b 	bl	80055e4 <LoadAllEEPROM>
  }
  HAL_FLASH_Lock();
 8005b0e:	f007 fa07 	bl	800cf20 <HAL_FLASH_Lock>


  // Lock the Flash Program Erase controller */
  //HAL_FLASH_Lock();

  DRV_CANFDSPI_Reset(CAN2);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fb fa6c 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN1);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7fb fa69 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  PCU_Initialize();
 8005b1e:	f000 fdc5 	bl	80066ac <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005b22:	f000 ff09 	bl	8006938 <PCU_Tasks>
 8005b26:	e7fc      	b.n	8005b22 <main+0xf6>
 8005b28:	58004000 	.word	0x58004000
 8005b2c:	200005d8 	.word	0x200005d8
 8005b30:	58000400 	.word	0x58000400
 8005b34:	2000098c 	.word	0x2000098c
 8005b38:	50616c61 	.word	0x50616c61
 8005b3c:	746f7621 	.word	0x746f7621

08005b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b09a      	sub	sp, #104	; 0x68
 8005b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b46:	f107 0320 	add.w	r3, r7, #32
 8005b4a:	2248      	movs	r2, #72	; 0x48
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f00d f88a 	bl	8012c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	615a      	str	r2, [r3, #20]
 8005b64:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005b66:	f007 feb9 	bl	800d8dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	f7ff fbc8 	bl	8005300 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b78:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005b96:	2301      	movs	r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005bac:	2310      	movs	r3, #16
 8005bae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005bba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005bbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bc6:	f107 0320 	add.w	r3, r7, #32
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f008 fa1a 	bl	800e004 <HAL_RCC_OscConfig>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005bd6:	f000 fd59 	bl	800668c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005bda:	236f      	movs	r3, #111	; 0x6f
 8005bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bde:	2303      	movs	r3, #3
 8005be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f008 fd76 	bl	800e6ec <HAL_RCC_ClockConfig>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005c06:	f000 fd41 	bl	800668c <Error_Handler>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3768      	adds	r7, #104	; 0x68
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58000400 	.word	0x58000400

08005c18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b094      	sub	sp, #80	; 0x50
 8005c1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c1e:	463b      	mov	r3, r7
 8005c20:	2250      	movs	r2, #80	; 0x50
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f00d f81f 	bl	8012c68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005c30:	2302      	movs	r3, #2
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005c34:	2310      	movs	r3, #16
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c38:	463b      	mov	r3, r7
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f009 f993 	bl	800ef66 <HAL_RCCEx_PeriphCLKConfig>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8005c46:	f000 fd21 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005c4a:	bf00      	nop
 8005c4c:	3750      	adds	r7, #80	; 0x50
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005c58:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c5a:	4a23      	ldr	r2, [pc, #140]	; (8005ce8 <MX_LPUART1_UART_Init+0x94>)
 8005c5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c64:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c7a:	220c      	movs	r2, #12
 8005c7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c90:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005c9c:	4811      	ldr	r0, [pc, #68]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c9e:	f00b fc87 	bl	80115b0 <HAL_UART_Init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8005ca8:	f000 fcf0 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cac:	2100      	movs	r1, #0
 8005cae:	480d      	ldr	r0, [pc, #52]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cb0:	f00c fd79 	bl	80127a6 <HAL_UARTEx_SetTxFifoThreshold>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005cba:	f000 fce7 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4808      	ldr	r0, [pc, #32]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cc2:	f00c fdae 	bl	8012822 <HAL_UARTEx_SetRxFifoThreshold>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005ccc:	f000 fcde 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005cd0:	4804      	ldr	r0, [pc, #16]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cd2:	f00c fd2f 	bl	8012734 <HAL_UARTEx_DisableFifoMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005cdc:	f000 fcd6 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	200003b8 	.word	0x200003b8
 8005ce8:	40008000 	.word	0x40008000

08005cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005cf0:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005cf2:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <MX_USART1_UART_Init+0x94>)
 8005cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005cf6:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d12:	220c      	movs	r2, #12
 8005d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d34:	4811      	ldr	r0, [pc, #68]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d36:	f00b fc3b 	bl	80115b0 <HAL_UART_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005d40:	f000 fca4 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d44:	2100      	movs	r1, #0
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d48:	f00c fd2d 	bl	80127a6 <HAL_UARTEx_SetTxFifoThreshold>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005d52:	f000 fc9b 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d56:	2100      	movs	r1, #0
 8005d58:	4808      	ldr	r0, [pc, #32]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d5a:	f00c fd62 	bl	8012822 <HAL_UARTEx_SetRxFifoThreshold>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005d64:	f000 fc92 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005d68:	4804      	ldr	r0, [pc, #16]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d6a:	f00c fce3 	bl	8012734 <HAL_UARTEx_DisableFifoMode>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005d74:	f000 fc8a 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000044c 	.word	0x2000044c
 8005d80:	40013800 	.word	0x40013800

08005d84 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <MX_PKA_Init+0x20>)
 8005d8a:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <MX_PKA_Init+0x24>)
 8005d8c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8005d8e:	4805      	ldr	r0, [pc, #20]	; (8005da4 <MX_PKA_Init+0x20>)
 8005d90:	f007 fd75 	bl	800d87e <HAL_PKA_Init>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8005d9a:	f000 fc77 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200004e0 	.word	0x200004e0
 8005da8:	58002000 	.word	0x58002000

08005dac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <MX_RTC_Init+0x48>)
 8005db2:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <MX_RTC_Init+0x4c>)
 8005db4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <MX_RTC_Init+0x48>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dbe:	227f      	movs	r2, #127	; 0x7f
 8005dc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <MX_RTC_Init+0x48>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005de0:	4804      	ldr	r0, [pc, #16]	; (8005df4 <MX_RTC_Init+0x48>)
 8005de2:	f009 fb47 	bl	800f474 <HAL_RTC_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8005dec:	f000 fc4e 	bl	800668c <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 8005df0:	bf00      	nop
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200004ec 	.word	0x200004ec
 8005df8:	40002800 	.word	0x40002800

08005dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <MX_SPI1_Init+0x78>)
 8005e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e0e:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e32:	2208      	movs	r2, #8
 8005e34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e4a:	2207      	movs	r2, #7
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e5a:	4805      	ldr	r0, [pc, #20]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e5c:	f009 fe79 	bl	800fb52 <HAL_SPI_Init>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005e66:	f000 fc11 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000510 	.word	0x20000510
 8005e74:	40013000 	.word	0x40013000

08005e78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <MX_SPI2_Init+0x78>)
 8005e80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e82:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8005e90:	4b16      	ldr	r3, [pc, #88]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005e96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005ec4:	4b09      	ldr	r3, [pc, #36]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ed8:	f009 fe3b 	bl	800fb52 <HAL_SPI_Init>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005ee2:	f000 fbd3 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000574 	.word	0x20000574
 8005ef0:	40003800 	.word	0x40003800

08005ef4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b09c      	sub	sp, #112	; 0x70
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	2234      	movs	r2, #52	; 0x34
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f00c fe9a 	bl	8012c68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005f34:	4b44      	ldr	r3, [pc, #272]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f36:	4a45      	ldr	r2, [pc, #276]	; (800604c <MX_TIM1_Init+0x158>)
 8005f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8005f3a:	4b43      	ldr	r3, [pc, #268]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f3c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005f40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f42:	4b41      	ldr	r3, [pc, #260]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f4a:	2263      	movs	r2, #99	; 0x63
 8005f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005f54:	4b3c      	ldr	r3, [pc, #240]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005f60:	4839      	ldr	r0, [pc, #228]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f62:	f00a fa11 	bl	8010388 <HAL_TIM_Base_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005f6c:	f000 fb8e 	bl	800668c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005f76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4832      	ldr	r0, [pc, #200]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f7e:	f00a fcdf 	bl	8010940 <HAL_TIM_ConfigClockSource>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005f88:	f000 fb80 	bl	800668c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005f8c:	482e      	ldr	r0, [pc, #184]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f8e:	f00a faad 	bl	80104ec <HAL_TIM_OC_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005f98:	f000 fb78 	bl	800668c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fac:	4619      	mov	r1, r3
 8005fae:	4826      	ldr	r0, [pc, #152]	; (8006048 <MX_TIM1_Init+0x154>)
 8005fb0:	f00b f9c6 	bl	8011340 <HAL_TIMEx_MasterConfigSynchronization>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005fba:	f000 fb67 	bl	800668c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4819      	ldr	r0, [pc, #100]	; (8006048 <MX_TIM1_Init+0x154>)
 8005fe4:	f00a fc32 	bl	801084c <HAL_TIM_OC_ConfigChannel>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005fee:	f000 fb4d 	bl	800668c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800600a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006010:	2300      	movs	r3, #0
 8006012:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006022:	2300      	movs	r3, #0
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006026:	2300      	movs	r3, #0
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4806      	ldr	r0, [pc, #24]	; (8006048 <MX_TIM1_Init+0x154>)
 8006030:	f00b f9e6 	bl	8011400 <HAL_TIMEx_ConfigBreakDeadTime>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800603a:	f000 fb27 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800603e:	bf00      	nop
 8006040:	3770      	adds	r7, #112	; 0x70
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200005d8 	.word	0x200005d8
 800604c:	40012c00 	.word	0x40012c00

08006050 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006056:	4a11      	ldr	r2, [pc, #68]	; (800609c <MX_USB_PCD_Init+0x4c>)
 8006058:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800605c:	2208      	movs	r2, #8
 800605e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006062:	2202      	movs	r2, #2
 8006064:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006068:	2202      	movs	r2, #2
 800606a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800607a:	2200      	movs	r2, #0
 800607c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006080:	2200      	movs	r2, #0
 8006082:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006084:	4804      	ldr	r0, [pc, #16]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006086:	f007 faf7 	bl	800d678 <HAL_PCD_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006090:	f000 fafc 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000694 	.word	0x20000694
 800609c:	40006800 	.word	0x40006800

080060a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 80060b4:	4b9d      	ldr	r3, [pc, #628]	; (800632c <MX_GPIO_Init+0x28c>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 81c2 	bne.w	8006442 <MX_GPIO_Init+0x3a2>



CAN1_INT0_Pin         = GPIO_PIN_8;
 80060be:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <MX_GPIO_Init+0x290>)
 80060c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060c4:	801a      	strh	r2, [r3, #0]
CAN1_INT0_GPIO_Port   = GPIOB;
 80060c6:	4b9b      	ldr	r3, [pc, #620]	; (8006334 <MX_GPIO_Init+0x294>)
 80060c8:	4a9b      	ldr	r2, [pc, #620]	; (8006338 <MX_GPIO_Init+0x298>)
 80060ca:	601a      	str	r2, [r3, #0]
CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80060cc:	4b9b      	ldr	r3, [pc, #620]	; (800633c <MX_GPIO_Init+0x29c>)
 80060ce:	2217      	movs	r2, #23
 80060d0:	801a      	strh	r2, [r3, #0]
CAN1_INT1_Pin         = GPIO_PIN_9;
 80060d2:	4b9b      	ldr	r3, [pc, #620]	; (8006340 <MX_GPIO_Init+0x2a0>)
 80060d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d8:	801a      	strh	r2, [r3, #0]
CAN1_INT1_GPIO_Port   = GPIOB;
 80060da:	4b9a      	ldr	r3, [pc, #616]	; (8006344 <MX_GPIO_Init+0x2a4>)
 80060dc:	4a96      	ldr	r2, [pc, #600]	; (8006338 <MX_GPIO_Init+0x298>)
 80060de:	601a      	str	r2, [r3, #0]
CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80060e0:	4b99      	ldr	r3, [pc, #612]	; (8006348 <MX_GPIO_Init+0x2a8>)
 80060e2:	2217      	movs	r2, #23
 80060e4:	801a      	strh	r2, [r3, #0]
SPI2_CS1_Pin          = GPIO_PIN_0;
 80060e6:	4b99      	ldr	r3, [pc, #612]	; (800634c <MX_GPIO_Init+0x2ac>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	801a      	strh	r2, [r3, #0]
SPI2_CS1_GPIO_Port    = GPIOC;
 80060ec:	4b98      	ldr	r3, [pc, #608]	; (8006350 <MX_GPIO_Init+0x2b0>)
 80060ee:	4a99      	ldr	r2, [pc, #612]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80060f0:	601a      	str	r2, [r3, #0]
SPI2_CS2_Pin          = GPIO_PIN_3;
 80060f2:	4b99      	ldr	r3, [pc, #612]	; (8006358 <MX_GPIO_Init+0x2b8>)
 80060f4:	2208      	movs	r2, #8
 80060f6:	801a      	strh	r2, [r3, #0]
SPI2_CS2_GPIO_Port    = GPIOC;
 80060f8:	4b98      	ldr	r3, [pc, #608]	; (800635c <MX_GPIO_Init+0x2bc>)
 80060fa:	4a96      	ldr	r2, [pc, #600]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80060fc:	601a      	str	r2, [r3, #0]
CAN1_CS_Pin           = GPIO_PIN_5;
 80060fe:	4b98      	ldr	r3, [pc, #608]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006100:	2220      	movs	r2, #32
 8006102:	801a      	strh	r2, [r3, #0]
CAN1_CS_GPIO_Port     = GPIOA;
 8006104:	4b97      	ldr	r3, [pc, #604]	; (8006364 <MX_GPIO_Init+0x2c4>)
 8006106:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800610a:	601a      	str	r2, [r3, #0]
BUTTON1_Pin           = GPIO_PIN_4;
 800610c:	4b96      	ldr	r3, [pc, #600]	; (8006368 <MX_GPIO_Init+0x2c8>)
 800610e:	2210      	movs	r2, #16
 8006110:	801a      	strh	r2, [r3, #0]
BUTTON1_GPIO_Port     = GPIOC;
 8006112:	4b96      	ldr	r3, [pc, #600]	; (800636c <MX_GPIO_Init+0x2cc>)
 8006114:	4a8f      	ldr	r2, [pc, #572]	; (8006354 <MX_GPIO_Init+0x2b4>)
 8006116:	601a      	str	r2, [r3, #0]
BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 8006118:	4b95      	ldr	r3, [pc, #596]	; (8006370 <MX_GPIO_Init+0x2d0>)
 800611a:	220a      	movs	r2, #10
 800611c:	801a      	strh	r2, [r3, #0]
CAN2_CS_Pin           = GPIO_PIN_5;
 800611e:	4b95      	ldr	r3, [pc, #596]	; (8006374 <MX_GPIO_Init+0x2d4>)
 8006120:	2220      	movs	r2, #32
 8006122:	801a      	strh	r2, [r3, #0]
CAN2_CS_GPIO_Port     = GPIOC;
 8006124:	4b94      	ldr	r3, [pc, #592]	; (8006378 <MX_GPIO_Init+0x2d8>)
 8006126:	4a8b      	ldr	r2, [pc, #556]	; (8006354 <MX_GPIO_Init+0x2b4>)
 8006128:	601a      	str	r2, [r3, #0]
LED_GREEN_Pin         = GPIO_PIN_0;
 800612a:	4b94      	ldr	r3, [pc, #592]	; (800637c <MX_GPIO_Init+0x2dc>)
 800612c:	2201      	movs	r2, #1
 800612e:	801a      	strh	r2, [r3, #0]
LED_GREEN_GPIO_Port   = GPIOB;
 8006130:	4b93      	ldr	r3, [pc, #588]	; (8006380 <MX_GPIO_Init+0x2e0>)
 8006132:	4a81      	ldr	r2, [pc, #516]	; (8006338 <MX_GPIO_Init+0x298>)
 8006134:	601a      	str	r2, [r3, #0]
LED_RED_Pin           = GPIO_PIN_1;
 8006136:	4b93      	ldr	r3, [pc, #588]	; (8006384 <MX_GPIO_Init+0x2e4>)
 8006138:	2202      	movs	r2, #2
 800613a:	801a      	strh	r2, [r3, #0]
LED_RED_GPIO_Port     = GPIOB;
 800613c:	4b92      	ldr	r3, [pc, #584]	; (8006388 <MX_GPIO_Init+0x2e8>)
 800613e:	4a7e      	ldr	r2, [pc, #504]	; (8006338 <MX_GPIO_Init+0x298>)
 8006140:	601a      	str	r2, [r3, #0]
CAN2_INT_Pin          = GPIO_PIN_12;
 8006142:	4b92      	ldr	r3, [pc, #584]	; (800638c <MX_GPIO_Init+0x2ec>)
 8006144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006148:	801a      	strh	r2, [r3, #0]
CAN2_INT_GPIO_Port    = GPIOB;
 800614a:	4b91      	ldr	r3, [pc, #580]	; (8006390 <MX_GPIO_Init+0x2f0>)
 800614c:	4a7a      	ldr	r2, [pc, #488]	; (8006338 <MX_GPIO_Init+0x298>)
 800614e:	601a      	str	r2, [r3, #0]
CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006150:	4b90      	ldr	r3, [pc, #576]	; (8006394 <MX_GPIO_Init+0x2f4>)
 8006152:	2228      	movs	r2, #40	; 0x28
 8006154:	801a      	strh	r2, [r3, #0]
CAN2_INT0_Pin         = GPIO_PIN_13;
 8006156:	4b90      	ldr	r3, [pc, #576]	; (8006398 <MX_GPIO_Init+0x2f8>)
 8006158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800615c:	801a      	strh	r2, [r3, #0]
CAN2_INT0_GPIO_Port   = GPIOB;
 800615e:	4b8f      	ldr	r3, [pc, #572]	; (800639c <MX_GPIO_Init+0x2fc>)
 8006160:	4a75      	ldr	r2, [pc, #468]	; (8006338 <MX_GPIO_Init+0x298>)
 8006162:	601a      	str	r2, [r3, #0]
CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006164:	4b8e      	ldr	r3, [pc, #568]	; (80063a0 <MX_GPIO_Init+0x300>)
 8006166:	2228      	movs	r2, #40	; 0x28
 8006168:	801a      	strh	r2, [r3, #0]
CAN2_INT1_Pin         = GPIO_PIN_14;
 800616a:	4b8e      	ldr	r3, [pc, #568]	; (80063a4 <MX_GPIO_Init+0x304>)
 800616c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006170:	801a      	strh	r2, [r3, #0]
CAN2_INT1_GPIO_Port   = GPIOB;
 8006172:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <MX_GPIO_Init+0x308>)
 8006174:	4a70      	ldr	r2, [pc, #448]	; (8006338 <MX_GPIO_Init+0x298>)
 8006176:	601a      	str	r2, [r3, #0]
CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006178:	4b8c      	ldr	r3, [pc, #560]	; (80063ac <MX_GPIO_Init+0x30c>)
 800617a:	2228      	movs	r2, #40	; 0x28
 800617c:	801a      	strh	r2, [r3, #0]
CAN1_INT_Pin          = GPIO_PIN_10;
 800617e:	4b8c      	ldr	r3, [pc, #560]	; (80063b0 <MX_GPIO_Init+0x310>)
 8006180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006184:	801a      	strh	r2, [r3, #0]
CAN1_INT_GPIO_Port    = GPIOA;
 8006186:	4b8b      	ldr	r3, [pc, #556]	; (80063b4 <MX_GPIO_Init+0x314>)
 8006188:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800618c:	601a      	str	r2, [r3, #0]
CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800618e:	4b8a      	ldr	r3, [pc, #552]	; (80063b8 <MX_GPIO_Init+0x318>)
 8006190:	2228      	movs	r2, #40	; 0x28
 8006192:	801a      	strh	r2, [r3, #0]
BUTTON2_Pin           = GPIO_PIN_0;
 8006194:	4b89      	ldr	r3, [pc, #548]	; (80063bc <MX_GPIO_Init+0x31c>)
 8006196:	2201      	movs	r2, #1
 8006198:	801a      	strh	r2, [r3, #0]
BUTTON2_GPIO_Port     = GPIOD;
 800619a:	4b89      	ldr	r3, [pc, #548]	; (80063c0 <MX_GPIO_Init+0x320>)
 800619c:	4a89      	ldr	r2, [pc, #548]	; (80063c4 <MX_GPIO_Init+0x324>)
 800619e:	601a      	str	r2, [r3, #0]
BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 80061a0:	4b89      	ldr	r3, [pc, #548]	; (80063c8 <MX_GPIO_Init+0x328>)
 80061a2:	2206      	movs	r2, #6
 80061a4:	801a      	strh	r2, [r3, #0]
BUTTON3_Pin           = GPIO_PIN_1;
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <MX_GPIO_Init+0x32c>)
 80061a8:	2202      	movs	r2, #2
 80061aa:	801a      	strh	r2, [r3, #0]
BUTTON3_GPIO_Port     = GPIOD;
 80061ac:	4b88      	ldr	r3, [pc, #544]	; (80063d0 <MX_GPIO_Init+0x330>)
 80061ae:	4a85      	ldr	r2, [pc, #532]	; (80063c4 <MX_GPIO_Init+0x324>)
 80061b0:	601a      	str	r2, [r3, #0]
BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 80061b2:	4b88      	ldr	r3, [pc, #544]	; (80063d4 <MX_GPIO_Init+0x334>)
 80061b4:	2207      	movs	r2, #7
 80061b6:	801a      	strh	r2, [r3, #0]
LED_BLUE_Pin          = GPIO_PIN_5;
 80061b8:	4b87      	ldr	r3, [pc, #540]	; (80063d8 <MX_GPIO_Init+0x338>)
 80061ba:	2220      	movs	r2, #32
 80061bc:	801a      	strh	r2, [r3, #0]
LED_BLUE_GPIO_Port    = GPIOB;
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <MX_GPIO_Init+0x33c>)
 80061c0:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <MX_GPIO_Init+0x298>)
 80061c2:	601a      	str	r2, [r3, #0]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c4:	2004      	movs	r0, #4
 80061c6:	f7ff f8b1 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ca:	2002      	movs	r0, #2
 80061cc:	f7ff f8ae 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d0:	2001      	movs	r0, #1
 80061d2:	f7ff f8ab 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d6:	2008      	movs	r0, #8
 80061d8:	f7ff f8a8 	bl	800532c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80061dc:	4b5b      	ldr	r3, [pc, #364]	; (800634c <MX_GPIO_Init+0x2ac>)
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	4b5d      	ldr	r3, [pc, #372]	; (8006358 <MX_GPIO_Init+0x2b8>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	4b62      	ldr	r3, [pc, #392]	; (8006374 <MX_GPIO_Init+0x2d4>)
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	4619      	mov	r1, r3
 80061f4:	4857      	ldr	r0, [pc, #348]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80061f6:	f007 f9d1 	bl	800d59c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80061fa:	4b5a      	ldr	r3, [pc, #360]	; (8006364 <MX_GPIO_Init+0x2c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a58      	ldr	r2, [pc, #352]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006200:	8811      	ldrh	r1, [r2, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f007 f9c9 	bl	800d59c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800620a:	4b5c      	ldr	r3, [pc, #368]	; (800637c <MX_GPIO_Init+0x2dc>)
 800620c:	881a      	ldrh	r2, [r3, #0]
 800620e:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <MX_GPIO_Init+0x2e4>)
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	4b70      	ldr	r3, [pc, #448]	; (80063d8 <MX_GPIO_Init+0x338>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2200      	movs	r2, #0
 8006220:	4619      	mov	r1, r3
 8006222:	4845      	ldr	r0, [pc, #276]	; (8006338 <MX_GPIO_Init+0x298>)
 8006224:	f007 f9ba 	bl	800d59c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin
                           CAN2_INT1_Pin */
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                          |CAN2_INT1_Pin;
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <MX_GPIO_Init+0x290>)
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	4b44      	ldr	r3, [pc, #272]	; (8006340 <MX_GPIO_Init+0x2a0>)
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	4b55      	ldr	r3, [pc, #340]	; (800638c <MX_GPIO_Init+0x2ec>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	b29a      	uxth	r2, r3
 800623c:	4b56      	ldr	r3, [pc, #344]	; (8006398 <MX_GPIO_Init+0x2f8>)
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <MX_GPIO_Init+0x304>)
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	b29b      	uxth	r3, r3
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 800624c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800624e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006254:	2301      	movs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	4619      	mov	r1, r3
 800625c:	4836      	ldr	r0, [pc, #216]	; (8006338 <MX_GPIO_Init+0x298>)
 800625e:	f007 f815 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 8006262:	4b3a      	ldr	r3, [pc, #232]	; (800634c <MX_GPIO_Init+0x2ac>)
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <MX_GPIO_Init+0x2b8>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	4313      	orrs	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <MX_GPIO_Init+0x2d4>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006278:	2301      	movs	r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4832      	ldr	r0, [pc, #200]	; (8006354 <MX_GPIO_Init+0x2b4>)
 800628a:	f006 ffff 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006294:	2301      	movs	r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 80062a0:	4b30      	ldr	r3, [pc, #192]	; (8006364 <MX_GPIO_Init+0x2c4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	1d3a      	adds	r2, r7, #4
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f006 ffef 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <MX_GPIO_Init+0x2c8>)
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80062b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80062b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062ba:	2301      	movs	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <MX_GPIO_Init+0x2cc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1d3a      	adds	r2, r7, #4
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f006 ffe0 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <MX_GPIO_Init+0x2dc>)
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <MX_GPIO_Init+0x2e4>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	4b3f      	ldr	r3, [pc, #252]	; (80063d8 <MX_GPIO_Init+0x338>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062e2:	2301      	movs	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4811      	ldr	r0, [pc, #68]	; (8006338 <MX_GPIO_Init+0x298>)
 80062f4:	f006 ffca 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80062f8:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <MX_GPIO_Init+0x310>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 8006308:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <MX_GPIO_Init+0x314>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	1d3a      	adds	r2, r7, #4
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f006 ffbb 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <MX_GPIO_Init+0x31c>)
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <MX_GPIO_Init+0x32c>)
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006328:	e05a      	b.n	80063e0 <MX_GPIO_Init+0x340>
 800632a:	bf00      	nop
 800632c:	20000a58 	.word	0x20000a58
 8006330:	20000c66 	.word	0x20000c66
 8006334:	20000c68 	.word	0x20000c68
 8006338:	48000400 	.word	0x48000400
 800633c:	20000c6c 	.word	0x20000c6c
 8006340:	20000c6e 	.word	0x20000c6e
 8006344:	20000c70 	.word	0x20000c70
 8006348:	20000c74 	.word	0x20000c74
 800634c:	20000cbc 	.word	0x20000cbc
 8006350:	20000cc0 	.word	0x20000cc0
 8006354:	48000800 	.word	0x48000800
 8006358:	20000cc4 	.word	0x20000cc4
 800635c:	20000cc8 	.word	0x20000cc8
 8006360:	20000c76 	.word	0x20000c76
 8006364:	20000c78 	.word	0x20000c78
 8006368:	20000ccc 	.word	0x20000ccc
 800636c:	20000cd0 	.word	0x20000cd0
 8006370:	20000cd4 	.word	0x20000cd4
 8006374:	20000c96 	.word	0x20000c96
 8006378:	20000c98 	.word	0x20000c98
 800637c:	20000ce6 	.word	0x20000ce6
 8006380:	20000ce8 	.word	0x20000ce8
 8006384:	20000cec 	.word	0x20000cec
 8006388:	20000cf0 	.word	0x20000cf0
 800638c:	20000c7c 	.word	0x20000c7c
 8006390:	20000c80 	.word	0x20000c80
 8006394:	20000c84 	.word	0x20000c84
 8006398:	20000c86 	.word	0x20000c86
 800639c:	20000c88 	.word	0x20000c88
 80063a0:	20000c8c 	.word	0x20000c8c
 80063a4:	20000c8e 	.word	0x20000c8e
 80063a8:	20000c90 	.word	0x20000c90
 80063ac:	20000c94 	.word	0x20000c94
 80063b0:	20000c5e 	.word	0x20000c5e
 80063b4:	20000c60 	.word	0x20000c60
 80063b8:	20000c64 	.word	0x20000c64
 80063bc:	20000cd6 	.word	0x20000cd6
 80063c0:	20000cd8 	.word	0x20000cd8
 80063c4:	48000c00 	.word	0x48000c00
 80063c8:	20000cdc 	.word	0x20000cdc
 80063cc:	20000cde 	.word	0x20000cde
 80063d0:	20000ce0 	.word	0x20000ce0
 80063d4:	20000ce4 	.word	0x20000ce4
 80063d8:	20000cf4 	.word	0x20000cf4
 80063dc:	20000cf8 	.word	0x20000cf8
 80063e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	486e      	ldr	r0, [pc, #440]	; (80065a4 <MX_GPIO_Init+0x504>)
 80063ec:	f006 ff4e 	bl	800d28c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80063f0:	2200      	movs	r2, #0
 80063f2:	2100      	movs	r1, #0
 80063f4:	2006      	movs	r0, #6
 80063f6:	f006 fc3a 	bl	800cc6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80063fa:	2006      	movs	r0, #6
 80063fc:	f006 fc51 	bl	800cca2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006400:	2200      	movs	r2, #0
 8006402:	2100      	movs	r1, #0
 8006404:	2007      	movs	r0, #7
 8006406:	f006 fc32 	bl	800cc6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800640a:	2007      	movs	r0, #7
 800640c:	f006 fc49 	bl	800cca2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	200a      	movs	r0, #10
 8006416:	f006 fc2a 	bl	800cc6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800641a:	200a      	movs	r0, #10
 800641c:	f006 fc41 	bl	800cca2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	2017      	movs	r0, #23
 8006426:	f006 fc22 	bl	800cc6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800642a:	2017      	movs	r0, #23
 800642c:	f006 fc39 	bl	800cca2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	2028      	movs	r0, #40	; 0x28
 8006436:	f006 fc1a 	bl	800cc6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800643a:	2028      	movs	r0, #40	; 0x28
 800643c:	f006 fc31 	bl	800cca2 <HAL_NVIC_EnableIRQ>


  }
  /* USER CODE END MX_GPIO_Init_2 */

}
 8006440:	e0ac      	b.n	800659c <MX_GPIO_Init+0x4fc>
    CAN1_INT_Pin          = GPIO_PIN_15;
 8006442:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <MX_GPIO_Init+0x508>)
 8006444:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006448:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 800644a:	4b58      	ldr	r3, [pc, #352]	; (80065ac <MX_GPIO_Init+0x50c>)
 800644c:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <MX_GPIO_Init+0x510>)
 800644e:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006450:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <MX_GPIO_Init+0x514>)
 8006452:	2228      	movs	r2, #40	; 0x28
 8006454:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006456:	4b58      	ldr	r3, [pc, #352]	; (80065b8 <MX_GPIO_Init+0x518>)
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800645c:	4b57      	ldr	r3, [pc, #348]	; (80065bc <MX_GPIO_Init+0x51c>)
 800645e:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006460:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006462:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <MX_GPIO_Init+0x524>)
 8006464:	2217      	movs	r2, #23
 8006466:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006468:	4b57      	ldr	r3, [pc, #348]	; (80065c8 <MX_GPIO_Init+0x528>)
 800646a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800646e:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 8006470:	4b56      	ldr	r3, [pc, #344]	; (80065cc <MX_GPIO_Init+0x52c>)
 8006472:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006476:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 8006478:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <MX_GPIO_Init+0x530>)
 800647a:	2217      	movs	r2, #23
 800647c:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 800647e:	4b55      	ldr	r3, [pc, #340]	; (80065d4 <MX_GPIO_Init+0x534>)
 8006480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006484:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006486:	4b54      	ldr	r3, [pc, #336]	; (80065d8 <MX_GPIO_Init+0x538>)
 8006488:	4a49      	ldr	r2, [pc, #292]	; (80065b0 <MX_GPIO_Init+0x510>)
 800648a:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800648c:	4b53      	ldr	r3, [pc, #332]	; (80065dc <MX_GPIO_Init+0x53c>)
 800648e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006492:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006494:	4b52      	ldr	r3, [pc, #328]	; (80065e0 <MX_GPIO_Init+0x540>)
 8006496:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006498:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800649a:	4b52      	ldr	r3, [pc, #328]	; (80065e4 <MX_GPIO_Init+0x544>)
 800649c:	2228      	movs	r2, #40	; 0x28
 800649e:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 80064a0:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <MX_GPIO_Init+0x548>)
 80064a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064a6:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 80064a8:	4b50      	ldr	r3, [pc, #320]	; (80065ec <MX_GPIO_Init+0x54c>)
 80064aa:	4a45      	ldr	r2, [pc, #276]	; (80065c0 <MX_GPIO_Init+0x520>)
 80064ac:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 80064ae:	4b50      	ldr	r3, [pc, #320]	; (80065f0 <MX_GPIO_Init+0x550>)
 80064b0:	2228      	movs	r2, #40	; 0x28
 80064b2:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 80064b4:	4b4f      	ldr	r3, [pc, #316]	; (80065f4 <MX_GPIO_Init+0x554>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 80064ba:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <MX_GPIO_Init+0x558>)
 80064bc:	4a39      	ldr	r2, [pc, #228]	; (80065a4 <MX_GPIO_Init+0x504>)
 80064be:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 80064c0:	4b4e      	ldr	r3, [pc, #312]	; (80065fc <MX_GPIO_Init+0x55c>)
 80064c2:	2206      	movs	r2, #6
 80064c4:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 80064c6:	4b4e      	ldr	r3, [pc, #312]	; (8006600 <MX_GPIO_Init+0x560>)
 80064c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064cc:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80064ce:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <MX_GPIO_Init+0x564>)
 80064d0:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <MX_GPIO_Init+0x520>)
 80064d2:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 80064d4:	4b4c      	ldr	r3, [pc, #304]	; (8006608 <MX_GPIO_Init+0x568>)
 80064d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064da:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <MX_GPIO_Init+0x56c>)
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <MX_GPIO_Init+0x510>)
 80064e0:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <MX_GPIO_Init+0x570>)
 80064e4:	2217      	movs	r2, #23
 80064e6:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80064e8:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <MX_GPIO_Init+0x574>)
 80064ea:	2210      	movs	r2, #16
 80064ec:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <MX_GPIO_Init+0x578>)
 80064f0:	4a2f      	ldr	r2, [pc, #188]	; (80065b0 <MX_GPIO_Init+0x510>)
 80064f2:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80064f4:	4b49      	ldr	r3, [pc, #292]	; (800661c <MX_GPIO_Init+0x57c>)
 80064f6:	220a      	movs	r2, #10
 80064f8:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80064fa:	4b49      	ldr	r3, [pc, #292]	; (8006620 <MX_GPIO_Init+0x580>)
 80064fc:	2220      	movs	r2, #32
 80064fe:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 8006500:	4b48      	ldr	r3, [pc, #288]	; (8006624 <MX_GPIO_Init+0x584>)
 8006502:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006504:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 8006506:	4b48      	ldr	r3, [pc, #288]	; (8006628 <MX_GPIO_Init+0x588>)
 8006508:	2217      	movs	r2, #23
 800650a:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <MX_GPIO_Init+0x58c>)
 800650e:	2202      	movs	r2, #2
 8006510:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8006512:	4b47      	ldr	r3, [pc, #284]	; (8006630 <MX_GPIO_Init+0x590>)
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <MX_GPIO_Init+0x504>)
 8006516:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006518:	4b46      	ldr	r3, [pc, #280]	; (8006634 <MX_GPIO_Init+0x594>)
 800651a:	2201      	movs	r2, #1
 800651c:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 800651e:	4b46      	ldr	r3, [pc, #280]	; (8006638 <MX_GPIO_Init+0x598>)
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006522:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8006524:	4b45      	ldr	r3, [pc, #276]	; (800663c <MX_GPIO_Init+0x59c>)
 8006526:	2208      	movs	r2, #8
 8006528:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <MX_GPIO_Init+0x5a0>)
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <MX_GPIO_Init+0x520>)
 800652e:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <MX_GPIO_Init+0x5a4>)
 8006532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006536:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 8006538:	4b43      	ldr	r3, [pc, #268]	; (8006648 <MX_GPIO_Init+0x5a8>)
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <MX_GPIO_Init+0x510>)
 800653c:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 800653e:	4b43      	ldr	r3, [pc, #268]	; (800664c <MX_GPIO_Init+0x5ac>)
 8006540:	2228      	movs	r2, #40	; 0x28
 8006542:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;
 8006544:	4b42      	ldr	r3, [pc, #264]	; (8006650 <MX_GPIO_Init+0x5b0>)
 8006546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800654a:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 800654c:	4b41      	ldr	r3, [pc, #260]	; (8006654 <MX_GPIO_Init+0x5b4>)
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006550:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <MX_GPIO_Init+0x5b8>)
 8006554:	2206      	movs	r2, #6
 8006556:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;
 8006558:	4b40      	ldr	r3, [pc, #256]	; (800665c <MX_GPIO_Init+0x5bc>)
 800655a:	2204      	movs	r2, #4
 800655c:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 800655e:	4b40      	ldr	r3, [pc, #256]	; (8006660 <MX_GPIO_Init+0x5c0>)
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006562:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006564:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <MX_GPIO_Init+0x5c4>)
 8006566:	2208      	movs	r2, #8
 8006568:	801a      	strh	r2, [r3, #0]
    LED_CAN1_Pin         = GPIO_PIN_0;
 800656a:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <MX_GPIO_Init+0x5c8>)
 800656c:	2201      	movs	r2, #1
 800656e:	801a      	strh	r2, [r3, #0]
    LED_CAN1_GPIO_Port   = GPIOB;
 8006570:	4b3e      	ldr	r3, [pc, #248]	; (800666c <MX_GPIO_Init+0x5cc>)
 8006572:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006574:	601a      	str	r2, [r3, #0]
    LED_CAN2_Pin         = GPIO_PIN_1;
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <MX_GPIO_Init+0x5d0>)
 8006578:	2202      	movs	r2, #2
 800657a:	801a      	strh	r2, [r3, #0]
    LED_CAN2_GPIO_Port   = GPIOB;
 800657c:	4b3d      	ldr	r3, [pc, #244]	; (8006674 <MX_GPIO_Init+0x5d4>)
 800657e:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006580:	601a      	str	r2, [r3, #0]
    LED_CAN3_Pin         = GPIO_PIN_4;
 8006582:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <MX_GPIO_Init+0x5d8>)
 8006584:	2210      	movs	r2, #16
 8006586:	801a      	strh	r2, [r3, #0]
    LED_CAN3_GPIO_Port   = GPIOE;
 8006588:	4b3c      	ldr	r3, [pc, #240]	; (800667c <MX_GPIO_Init+0x5dc>)
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <MX_GPIO_Init+0x5e0>)
 800658c:	601a      	str	r2, [r3, #0]
    LED_HBEAT_Pin        = GPIO_PIN_12;
 800658e:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <MX_GPIO_Init+0x5e4>)
 8006590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006594:	801a      	strh	r2, [r3, #0]
    LED_HBEAT_GPIO_Port  = GPIOB;
 8006596:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <MX_GPIO_Init+0x5e8>)
 8006598:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <MX_GPIO_Init+0x510>)
 800659a:	601a      	str	r2, [r3, #0]
}
 800659c:	bf00      	nop
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	48000c00 	.word	0x48000c00
 80065a8:	20000c5e 	.word	0x20000c5e
 80065ac:	20000c60 	.word	0x20000c60
 80065b0:	48000400 	.word	0x48000400
 80065b4:	20000c64 	.word	0x20000c64
 80065b8:	20000c66 	.word	0x20000c66
 80065bc:	20000c68 	.word	0x20000c68
 80065c0:	48000800 	.word	0x48000800
 80065c4:	20000c6c 	.word	0x20000c6c
 80065c8:	20000c6e 	.word	0x20000c6e
 80065cc:	20000c70 	.word	0x20000c70
 80065d0:	20000c74 	.word	0x20000c74
 80065d4:	20000c76 	.word	0x20000c76
 80065d8:	20000c78 	.word	0x20000c78
 80065dc:	20000c7c 	.word	0x20000c7c
 80065e0:	20000c80 	.word	0x20000c80
 80065e4:	20000c84 	.word	0x20000c84
 80065e8:	20000c86 	.word	0x20000c86
 80065ec:	20000c88 	.word	0x20000c88
 80065f0:	20000c8c 	.word	0x20000c8c
 80065f4:	20000c8e 	.word	0x20000c8e
 80065f8:	20000c90 	.word	0x20000c90
 80065fc:	20000c94 	.word	0x20000c94
 8006600:	20000c96 	.word	0x20000c96
 8006604:	20000c98 	.word	0x20000c98
 8006608:	20000c9c 	.word	0x20000c9c
 800660c:	20000ca0 	.word	0x20000ca0
 8006610:	20000ca4 	.word	0x20000ca4
 8006614:	20000ca6 	.word	0x20000ca6
 8006618:	20000ca8 	.word	0x20000ca8
 800661c:	20000cac 	.word	0x20000cac
 8006620:	20000cae 	.word	0x20000cae
 8006624:	20000cb0 	.word	0x20000cb0
 8006628:	20000cb4 	.word	0x20000cb4
 800662c:	20000cb6 	.word	0x20000cb6
 8006630:	20000cb8 	.word	0x20000cb8
 8006634:	20000cbc 	.word	0x20000cbc
 8006638:	20000cc0 	.word	0x20000cc0
 800663c:	20000cc4 	.word	0x20000cc4
 8006640:	20000cc8 	.word	0x20000cc8
 8006644:	20000ccc 	.word	0x20000ccc
 8006648:	20000cd0 	.word	0x20000cd0
 800664c:	20000cd4 	.word	0x20000cd4
 8006650:	20000cd6 	.word	0x20000cd6
 8006654:	20000cd8 	.word	0x20000cd8
 8006658:	20000cdc 	.word	0x20000cdc
 800665c:	20000cde 	.word	0x20000cde
 8006660:	20000ce0 	.word	0x20000ce0
 8006664:	20000ce4 	.word	0x20000ce4
 8006668:	20000cfc 	.word	0x20000cfc
 800666c:	20000d00 	.word	0x20000d00
 8006670:	20000d04 	.word	0x20000d04
 8006674:	20000d08 	.word	0x20000d08
 8006678:	20000d0c 	.word	0x20000d0c
 800667c:	20000d10 	.word	0x20000d10
 8006680:	48001000 	.word	0x48001000
 8006684:	20000d14 	.word	0x20000d14
 8006688:	20000d18 	.word	0x20000d18

0800668c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006690:	4904      	ldr	r1, [pc, #16]	; (80066a4 <Error_Handler+0x18>)
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <Error_Handler+0x1c>)
 8006694:	f00d fafa 	bl	8013c8c <siprintf>
 8006698:	4803      	ldr	r0, [pc, #12]	; (80066a8 <Error_Handler+0x1c>)
 800669a:	f7fe fe61 	bl	8005360 <serialOut>
  return;
 800669e:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	0801708c 	.word	0x0801708c
 80066a8:	20000b64 	.word	0x20000b64

080066ac <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 80066b2:	f7fe ff97 	bl	80055e4 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 80066b6:	2254      	movs	r2, #84	; 0x54
 80066b8:	2100      	movs	r1, #0
 80066ba:	488a      	ldr	r0, [pc, #552]	; (80068e4 <PCU_Initialize+0x238>)
 80066bc:	f00c fad4 	bl	8012c68 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 80066c0:	4b89      	ldr	r3, [pc, #548]	; (80068e8 <PCU_Initialize+0x23c>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b87      	ldr	r3, [pc, #540]	; (80068e4 <PCU_Initialize+0x238>)
 80066c8:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 80066ca:	4b86      	ldr	r3, [pc, #536]	; (80068e4 <PCU_Initialize+0x238>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 80066d0:	4b84      	ldr	r3, [pc, #528]	; (80068e4 <PCU_Initialize+0x238>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 80066d6:	4b83      	ldr	r3, [pc, #524]	; (80068e4 <PCU_Initialize+0x238>)
 80066d8:	2200      	movs	r2, #0
 80066da:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 80066dc:	4b81      	ldr	r3, [pc, #516]	; (80068e4 <PCU_Initialize+0x238>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 80066e4:	4b7f      	ldr	r3, [pc, #508]	; (80068e4 <PCU_Initialize+0x238>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	815a      	strh	r2, [r3, #10]
 80066ea:	e007      	b.n	80066fc <PCU_Initialize+0x50>
  else if (pack.id == 1)
 80066ec:	4b7d      	ldr	r3, [pc, #500]	; (80068e4 <PCU_Initialize+0x238>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d103      	bne.n	80066fc <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 80066f4:	4b7b      	ldr	r3, [pc, #492]	; (80068e4 <PCU_Initialize+0x238>)
 80066f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fa:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 80066fc:	4b79      	ldr	r3, [pc, #484]	; (80068e4 <PCU_Initialize+0x238>)
 80066fe:	2200      	movs	r2, #0
 8006700:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8006702:	4b78      	ldr	r3, [pc, #480]	; (80068e4 <PCU_Initialize+0x238>)
 8006704:	2200      	movs	r2, #0
 8006706:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8006708:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <PCU_Initialize+0x238>)
 800670a:	2200      	movs	r2, #0
 800670c:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800670e:	4b75      	ldr	r3, [pc, #468]	; (80068e4 <PCU_Initialize+0x238>)
 8006710:	2200      	movs	r2, #0
 8006712:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8006714:	4b73      	ldr	r3, [pc, #460]	; (80068e4 <PCU_Initialize+0x238>)
 8006716:	2200      	movs	r2, #0
 8006718:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 800671a:	4b72      	ldr	r3, [pc, #456]	; (80068e4 <PCU_Initialize+0x238>)
 800671c:	2200      	movs	r2, #0
 800671e:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8006720:	4b70      	ldr	r3, [pc, #448]	; (80068e4 <PCU_Initialize+0x238>)
 8006722:	2200      	movs	r2, #0
 8006724:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8006726:	4b6f      	ldr	r3, [pc, #444]	; (80068e4 <PCU_Initialize+0x238>)
 8006728:	2200      	movs	r2, #0
 800672a:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 800672c:	4b6d      	ldr	r3, [pc, #436]	; (80068e4 <PCU_Initialize+0x238>)
 800672e:	2200      	movs	r2, #0
 8006730:	845a      	strh	r2, [r3, #34]	; 0x22
  pack.cellAvgTemp=0;
 8006732:	4b6c      	ldr	r3, [pc, #432]	; (80068e4 <PCU_Initialize+0x238>)
 8006734:	2200      	movs	r2, #0
 8006736:	84da      	strh	r2, [r3, #38]	; 0x26
  pack.cellHiVolt=0;
 8006738:	4b6a      	ldr	r3, [pc, #424]	; (80068e4 <PCU_Initialize+0x238>)
 800673a:	2200      	movs	r2, #0
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
  pack.cellLoVolt=0;
 800673e:	4b69      	ldr	r3, [pc, #420]	; (80068e4 <PCU_Initialize+0x238>)
 8006740:	2200      	movs	r2, #0
 8006742:	859a      	strh	r2, [r3, #44]	; 0x2c
  pack.cellAvgVolt=0;
 8006744:	4b67      	ldr	r3, [pc, #412]	; (80068e4 <PCU_Initialize+0x238>)
 8006746:	2200      	movs	r2, #0
 8006748:	861a      	strh	r2, [r3, #48]	; 0x30
  pack.status=0;
 800674a:	4b66      	ldr	r3, [pc, #408]	; (80068e4 <PCU_Initialize+0x238>)
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  pack.vcuStateChange=0;
 8006752:	4b64      	ldr	r3, [pc, #400]	; (80068e4 <PCU_Initialize+0x238>)
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pack.state=0;
 800675a:	4b62      	ldr	r3, [pc, #392]	; (80068e4 <PCU_Initialize+0x238>)
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pack.vcuRequestedState=0;
 8006762:	4b60      	ldr	r3, [pc, #384]	; (80068e4 <PCU_Initialize+0x238>)
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pack.soc=0;
 800676a:	4b5e      	ldr	r3, [pc, #376]	; (80068e4 <PCU_Initialize+0x238>)
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  pack.soh=0;
 8006772:	4b5c      	ldr	r3, [pc, #368]	; (80068e4 <PCU_Initialize+0x238>)
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  pack.vcuLastContact.overflows=0;
 800677a:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <PCU_Initialize+0x238>)
 800677c:	2200      	movs	r2, #0
 800677e:	649a      	str	r2, [r3, #72]	; 0x48
  pack.vcuLastContact.ticks=0;
 8006780:	4b58      	ldr	r3, [pc, #352]	; (80068e4 <PCU_Initialize+0x238>)
 8006782:	2200      	movs	r2, #0
 8006784:	645a      	str	r2, [r3, #68]	; 0x44
  pack.cellBalanceActive=0;
 8006786:	4b57      	ldr	r3, [pc, #348]	; (80068e4 <PCU_Initialize+0x238>)
 8006788:	2200      	movs	r2, #0
 800678a:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 800678c:	4b55      	ldr	r3, [pc, #340]	; (80068e4 <PCU_Initialize+0x238>)
 800678e:	2200      	movs	r2, #0
 8006790:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 8006792:	4b54      	ldr	r3, [pc, #336]	; (80068e4 <PCU_Initialize+0x238>)
 8006794:	2200      	movs	r2, #0
 8006796:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 8006798:	4b52      	ldr	r3, [pc, #328]	; (80068e4 <PCU_Initialize+0x238>)
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80067a0:	2300      	movs	r3, #0
 80067a2:	71fb      	strb	r3, [r7, #7]
 80067a4:	e00f      	b.n	80067c6 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	4a4e      	ldr	r2, [pc, #312]	; (80068ec <PCU_Initialize+0x240>)
 80067b2:	4413      	add	r3, r2
 80067b4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f00c fa54 	bl	8012c68 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	3301      	adds	r3, #1
 80067c4:	71fb      	strb	r3, [r7, #7]
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	2b1f      	cmp	r3, #31
 80067ca:	d9ec      	bls.n	80067a6 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 80067cc:	4848      	ldr	r0, [pc, #288]	; (80068f0 <PCU_Initialize+0x244>)
 80067ce:	f7fe fdc7 	bl	8005360 <serialOut>
  serialOut("");
 80067d2:	4847      	ldr	r0, [pc, #284]	; (80068f0 <PCU_Initialize+0x244>)
 80067d4:	f7fe fdc4 	bl	8005360 <serialOut>
  serialOut("        ██    ██");
 80067d8:	4846      	ldr	r0, [pc, #280]	; (80068f4 <PCU_Initialize+0x248>)
 80067da:	f7fe fdc1 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 80067de:	4846      	ldr	r0, [pc, #280]	; (80068f8 <PCU_Initialize+0x24c>)
 80067e0:	f7fe fdbe 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2023");
 80067e4:	4845      	ldr	r0, [pc, #276]	; (80068fc <PCU_Initialize+0x250>)
 80067e6:	f7fe fdbb 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 80067ea:	4845      	ldr	r0, [pc, #276]	; (8006900 <PCU_Initialize+0x254>)
 80067ec:	f7fe fdb8 	bl	8005360 <serialOut>
  serialOut("     ██    ██    ██");
 80067f0:	4844      	ldr	r0, [pc, #272]	; (8006904 <PCU_Initialize+0x258>)
 80067f2:	f7fe fdb5 	bl	8005360 <serialOut>
  serialOut("     m o d b a t t");
 80067f6:	4844      	ldr	r0, [pc, #272]	; (8006908 <PCU_Initialize+0x25c>)
 80067f8:	f7fe fdb2 	bl	8005360 <serialOut>
  serialOut("");
 80067fc:	483c      	ldr	r0, [pc, #240]	; (80068f0 <PCU_Initialize+0x244>)
 80067fe:	f7fe fdaf 	bl	8005360 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8006802:	2000      	movs	r0, #0
 8006804:	f003 fcf8 	bl	800a1f8 <CAN_TestRamAccess>
 8006808:	4603      	mov	r3, r0
 800680a:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 800680c:	79bb      	ldrb	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <PCU_Initialize+0x176>
 8006812:	493e      	ldr	r1, [pc, #248]	; (800690c <PCU_Initialize+0x260>)
 8006814:	483e      	ldr	r0, [pc, #248]	; (8006910 <PCU_Initialize+0x264>)
 8006816:	f00d fa39 	bl	8013c8c <siprintf>
 800681a:	483d      	ldr	r0, [pc, #244]	; (8006910 <PCU_Initialize+0x264>)
 800681c:	f7fe fda0 	bl	8005360 <serialOut>
 8006820:	e006      	b.n	8006830 <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006822:	493c      	ldr	r1, [pc, #240]	; (8006914 <PCU_Initialize+0x268>)
 8006824:	483a      	ldr	r0, [pc, #232]	; (8006910 <PCU_Initialize+0x264>)
 8006826:	f00d fa31 	bl	8013c8c <siprintf>
 800682a:	4839      	ldr	r0, [pc, #228]	; (8006910 <PCU_Initialize+0x264>)
 800682c:	f7fe fd98 	bl	8005360 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8006830:	2000      	movs	r0, #0
 8006832:	f003 fc67 	bl	800a104 <CAN_TestRegisterAccess>
 8006836:	4603      	mov	r3, r0
 8006838:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800683a:	79bb      	ldrb	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <PCU_Initialize+0x1a4>
 8006840:	4935      	ldr	r1, [pc, #212]	; (8006918 <PCU_Initialize+0x26c>)
 8006842:	4833      	ldr	r0, [pc, #204]	; (8006910 <PCU_Initialize+0x264>)
 8006844:	f00d fa22 	bl	8013c8c <siprintf>
 8006848:	4831      	ldr	r0, [pc, #196]	; (8006910 <PCU_Initialize+0x264>)
 800684a:	f7fe fd89 	bl	8005360 <serialOut>
 800684e:	e006      	b.n	800685e <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006850:	4932      	ldr	r1, [pc, #200]	; (800691c <PCU_Initialize+0x270>)
 8006852:	482f      	ldr	r0, [pc, #188]	; (8006910 <PCU_Initialize+0x264>)
 8006854:	f00d fa1a 	bl	8013c8c <siprintf>
 8006858:	482d      	ldr	r0, [pc, #180]	; (8006910 <PCU_Initialize+0x264>)
 800685a:	f7fe fd81 	bl	8005360 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 800685e:	4930      	ldr	r1, [pc, #192]	; (8006920 <PCU_Initialize+0x274>)
 8006860:	482b      	ldr	r0, [pc, #172]	; (8006910 <PCU_Initialize+0x264>)
 8006862:	f00d fa13 	bl	8013c8c <siprintf>
 8006866:	482a      	ldr	r0, [pc, #168]	; (8006910 <PCU_Initialize+0x264>)
 8006868:	f7fe fd7a 	bl	8005360 <serialOut>

  passed = CAN_TestRamAccess(CAN2);
 800686c:	2001      	movs	r0, #1
 800686e:	f003 fcc3 	bl	800a1f8 <CAN_TestRamAccess>
 8006872:	4603      	mov	r3, r0
 8006874:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 8006876:	79bb      	ldrb	r3, [r7, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <PCU_Initialize+0x1e0>
 800687c:	4929      	ldr	r1, [pc, #164]	; (8006924 <PCU_Initialize+0x278>)
 800687e:	4824      	ldr	r0, [pc, #144]	; (8006910 <PCU_Initialize+0x264>)
 8006880:	f00d fa04 	bl	8013c8c <siprintf>
 8006884:	4822      	ldr	r0, [pc, #136]	; (8006910 <PCU_Initialize+0x264>)
 8006886:	f7fe fd6b 	bl	8005360 <serialOut>
 800688a:	e006      	b.n	800689a <PCU_Initialize+0x1ee>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 800688c:	4926      	ldr	r1, [pc, #152]	; (8006928 <PCU_Initialize+0x27c>)
 800688e:	4820      	ldr	r0, [pc, #128]	; (8006910 <PCU_Initialize+0x264>)
 8006890:	f00d f9fc 	bl	8013c8c <siprintf>
 8006894:	481e      	ldr	r0, [pc, #120]	; (8006910 <PCU_Initialize+0x264>)
 8006896:	f7fe fd63 	bl	8005360 <serialOut>
  }

  passed = CAN_TestRegisterAccess(CAN2);
 800689a:	2001      	movs	r0, #1
 800689c:	f003 fc32 	bl	800a104 <CAN_TestRegisterAccess>
 80068a0:	4603      	mov	r3, r0
 80068a2:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 80068a4:	79bb      	ldrb	r3, [r7, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <PCU_Initialize+0x20e>
 80068aa:	4920      	ldr	r1, [pc, #128]	; (800692c <PCU_Initialize+0x280>)
 80068ac:	4818      	ldr	r0, [pc, #96]	; (8006910 <PCU_Initialize+0x264>)
 80068ae:	f00d f9ed 	bl	8013c8c <siprintf>
 80068b2:	4817      	ldr	r0, [pc, #92]	; (8006910 <PCU_Initialize+0x264>)
 80068b4:	f7fe fd54 	bl	8005360 <serialOut>
 80068b8:	e006      	b.n	80068c8 <PCU_Initialize+0x21c>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 80068ba:	491d      	ldr	r1, [pc, #116]	; (8006930 <PCU_Initialize+0x284>)
 80068bc:	4814      	ldr	r0, [pc, #80]	; (8006910 <PCU_Initialize+0x264>)
 80068be:	f00d f9e5 	bl	8013c8c <siprintf>
 80068c2:	4813      	ldr	r0, [pc, #76]	; (8006910 <PCU_Initialize+0x264>)
 80068c4:	f7fe fd4c 	bl	8005360 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80068c8:	4915      	ldr	r1, [pc, #84]	; (8006920 <PCU_Initialize+0x274>)
 80068ca:	4811      	ldr	r0, [pc, #68]	; (8006910 <PCU_Initialize+0x264>)
 80068cc:	f00d f9de 	bl	8013c8c <siprintf>
 80068d0:	480f      	ldr	r0, [pc, #60]	; (8006910 <PCU_Initialize+0x264>)
 80068d2:	f7fe fd45 	bl	8005360 <serialOut>

  appData.state = PC_STATE_INIT;
 80068d6:	4b17      	ldr	r3, [pc, #92]	; (8006934 <PCU_Initialize+0x288>)
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2000a664 	.word	0x2000a664
 80068e8:	2000098c 	.word	0x2000098c
 80068ec:	20000de4 	.word	0x20000de4
 80068f0:	0801709c 	.word	0x0801709c
 80068f4:	080170a0 	.word	0x080170a0
 80068f8:	080170bc 	.word	0x080170bc
 80068fc:	080170e4 	.word	0x080170e4
 8006900:	08017134 	.word	0x08017134
 8006904:	08017184 	.word	0x08017184
 8006908:	080171a4 	.word	0x080171a4
 800690c:	080171b8 	.word	0x080171b8
 8006910:	20000b64 	.word	0x20000b64
 8006914:	080171e8 	.word	0x080171e8
 8006918:	08017220 	.word	0x08017220
 800691c:	08017250 	.word	0x08017250
 8006920:	08017288 	.word	0x08017288
 8006924:	0801728c 	.word	0x0801728c
 8006928:	080172bc 	.word	0x080172bc
 800692c:	080172f4 	.word	0x080172f4
 8006930:	08017324 	.word	0x08017324
 8006934:	20000d28 	.word	0x20000d28

08006938 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t moduleId;
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800693e:	4bad      	ldr	r3, [pc, #692]	; (8006bf4 <PCU_Tasks+0x2bc>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d126      	bne.n	8006994 <PCU_Tasks+0x5c>
    switchLedOn(GREEN_LED);
 8006946:	2001      	movs	r0, #1
 8006948:	f7fe feb8 	bl	80056bc <switchLedOn>
    switchLedOn(RED_LED);
 800694c:	2000      	movs	r0, #0
 800694e:	f7fe feb5 	bl	80056bc <switchLedOn>
    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 8006952:	2000      	movs	r0, #0
 8006954:	f000 fcee 	bl	8007334 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8006958:	2001      	movs	r0, #1
 800695a:	f000 fceb 	bl	8007334 <DRV_CANFDSPI_Init>
    switchLedOff(GREEN_LED);
 800695e:	2001      	movs	r0, #1
 8006960:	f7fe fee8 	bl	8005734 <switchLedOff>
    switchLedOff(RED_LED);
 8006964:	2000      	movs	r0, #0
 8006966:	f7fe fee5 	bl	8005734 <switchLedOff>

    MCU_IsolateAllModules();
 800696a:	f001 fdc1 	bl	80084f0 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 800696e:	f001 fd6b 	bl	8008448 <MCU_DeRegisterAllModules>

    pack.vcuRequestedState = packOff;
 8006972:	4ba1      	ldr	r3, [pc, #644]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 800697a:	4ba0      	ldr	r3, [pc, #640]	; (8006bfc <PCU_Tasks+0x2c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a9e      	ldr	r2, [pc, #632]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006980:	6493      	str	r3, [r2, #72]	; 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 8006982:	4b9f      	ldr	r3, [pc, #636]	; (8006c00 <PCU_Tasks+0x2c8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	4a9b      	ldr	r2, [pc, #620]	; (8006bf8 <PCU_Tasks+0x2c0>)
 800698a:	6453      	str	r3, [r2, #68]	; 0x44

    appData.state = PC_STATE_RUN;
 800698c:	4b99      	ldr	r3, [pc, #612]	; (8006bf4 <PCU_Tasks+0x2bc>)
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	e126      	b.n	8006be2 <PCU_Tasks+0x2aa>

  }else if (appData.state == PC_STATE_RUN){
 8006994:	4b97      	ldr	r3, [pc, #604]	; (8006bf4 <PCU_Tasks+0x2bc>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	f040 8122 	bne.w	8006be2 <PCU_Tasks+0x2aa>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 800699e:	4b99      	ldr	r3, [pc, #612]	; (8006c04 <PCU_Tasks+0x2cc>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <PCU_Tasks+0x72>
      VCU_ReceiveMessages();
 80069a6:	f004 f88f 	bl	800aac8 <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 80069aa:	4b97      	ldr	r3, [pc, #604]	; (8006c08 <PCU_Tasks+0x2d0>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <PCU_Tasks+0x7e>
      MCU_ReceiveMessages();
 80069b2:	f001 fa5d 	bl	8007e70 <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 80069b6:	f004 fd35 	bl	800b424 <VCU_TicksSinceLastMessage>
 80069ba:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80069c2:	d920      	bls.n	8006a06 <PCU_Tasks+0xce>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 80069c4:	4b8c      	ldr	r3, [pc, #560]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d009      	beq.n	80069e2 <PCU_Tasks+0xaa>
 80069ce:	4b8a      	ldr	r3, [pc, #552]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d004      	beq.n	80069e2 <PCU_Tasks+0xaa>
 80069d8:	4b87      	ldr	r3, [pc, #540]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d130      	bne.n	8006a44 <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80069e2:	4b8a      	ldr	r3, [pc, #552]	; (8006c0c <PCU_Tasks+0x2d4>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d006      	beq.n	80069fc <PCU_Tasks+0xc4>
 80069ee:	4988      	ldr	r1, [pc, #544]	; (8006c10 <PCU_Tasks+0x2d8>)
 80069f0:	4888      	ldr	r0, [pc, #544]	; (8006c14 <PCU_Tasks+0x2dc>)
 80069f2:	f00d f94b 	bl	8013c8c <siprintf>
 80069f6:	4887      	ldr	r0, [pc, #540]	; (8006c14 <PCU_Tasks+0x2dc>)
 80069f8:	f7fe fcb2 	bl	8005360 <serialOut>
        pack.vcuRequestedState = packOff;
 80069fc:	4b7e      	ldr	r3, [pc, #504]	; (8006bf8 <PCU_Tasks+0x2c0>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a04:	e01e      	b.n	8006a44 <PCU_Tasks+0x10c>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006a0c:	d91a      	bls.n	8006a44 <PCU_Tasks+0x10c>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 8006a0e:	4b7a      	ldr	r3, [pc, #488]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d004      	beq.n	8006a22 <PCU_Tasks+0xea>
 8006a18:	4b77      	ldr	r3, [pc, #476]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d110      	bne.n	8006a44 <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8006a22:	4b7a      	ldr	r3, [pc, #488]	; (8006c0c <PCU_Tasks+0x2d4>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <PCU_Tasks+0x104>
 8006a2e:	497a      	ldr	r1, [pc, #488]	; (8006c18 <PCU_Tasks+0x2e0>)
 8006a30:	4878      	ldr	r0, [pc, #480]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006a32:	f00d f92b 	bl	8013c8c <siprintf>
 8006a36:	4877      	ldr	r0, [pc, #476]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006a38:	f7fe fc92 	bl	8005360 <serialOut>
        pack.vcuRequestedState = packStandby;
 8006a3c:	4b6e      	ldr	r3, [pc, #440]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }

    //Check for expired last contact from module
    for (index =0;index < pack.moduleCount;index++){
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
 8006a48:	e0c5      	b.n	8006bd6 <PCU_Tasks+0x29e>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	4a73      	ldr	r2, [pc, #460]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006a4e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	3308      	adds	r3, #8
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f003 fa61 	bl	8009f24 <MCU_TicksSinceLastMessage>
 8006a62:	60b8      	str	r0, [r7, #8]
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006a6a:	d95d      	bls.n	8006b28 <PCU_Tasks+0x1f0>
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4a6b      	ldr	r2, [pc, #428]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006a70:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d051      	beq.n	8006b28 <PCU_Tasks+0x1f0>
        if( module[index].faultCode.commsError == false){
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	4a65      	ldr	r2, [pc, #404]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006a88:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006a96:	789b      	ldrb	r3, [r3, #2]
 8006a98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8096 	bne.w	8006bd0 <PCU_Tasks+0x298>
          // Isolate Module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x",module[index].moduleId ); serialOut(tempBuffer);}
 8006aa4:	4b59      	ldr	r3, [pc, #356]	; (8006c0c <PCU_Tasks+0x2d4>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d110      	bne.n	8006ad2 <PCU_Tasks+0x19a>
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4a5a      	ldr	r2, [pc, #360]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006ab4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	3308      	adds	r3, #8
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4956      	ldr	r1, [pc, #344]	; (8006c20 <PCU_Tasks+0x2e8>)
 8006ac6:	4853      	ldr	r0, [pc, #332]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006ac8:	f00d f8e0 	bl	8013c8c <siprintf>
 8006acc:	4851      	ldr	r0, [pc, #324]	; (8006c14 <PCU_Tasks+0x2dc>)
 8006ace:	f7fe fc47 	bl	8005360 <serialOut>
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 8006ad2:	4b49      	ldr	r3, [pc, #292]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d10d      	bne.n	8006af8 <PCU_Tasks+0x1c0>
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4a4f      	ldr	r2, [pc, #316]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006ae0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	4413      	add	r3, r2
 8006aea:	3327      	adds	r3, #39	; 0x27
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d102      	bne.n	8006af8 <PCU_Tasks+0x1c0>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 8006af2:	4b41      	ldr	r3, [pc, #260]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	769a      	strb	r2, [r3, #26]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	4a48      	ldr	r2, [pc, #288]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006afc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	4413      	add	r3, r2
 8006b06:	3328      	adds	r3, #40	; 0x28
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4a43      	ldr	r2, [pc, #268]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b10:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006b1e:	7893      	ldrb	r3, [r2, #2]
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	7093      	strb	r3, [r2, #2]
        if( module[index].faultCode.commsError == false){
 8006b26:	e053      	b.n	8006bd0 <PCU_Tasks+0x298>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b2e:	d933      	bls.n	8006b98 <PCU_Tasks+0x260>
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b34:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	f083 0301 	eor.w	r3, r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d024      	beq.n	8006b98 <PCU_Tasks+0x260>
        // Send State
        MCU_RequestModuleStatus(module[index].moduleId);
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	4a32      	ldr	r2, [pc, #200]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b52:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f002 f8f3 	bl	8008d4c <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b6a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d028      	beq.n	8006bd0 <PCU_Tasks+0x298>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b82:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fd81 	bl	8008698 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 8006b96:	e01b      	b.n	8006bd0 <PCU_Tasks+0x298>
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006b9c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006baa:	789b      	ldrb	r3, [r3, #2]
 8006bac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d10c      	bne.n	8006bd0 <PCU_Tasks+0x298>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	4a18      	ldr	r2, [pc, #96]	; (8006c1c <PCU_Tasks+0x2e4>)
 8006bba:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006bc8:	7893      	ldrb	r3, [r2, #2]
 8006bca:	f36f 0300 	bfc	r3, #0, #1
 8006bce:	7093      	strb	r3, [r2, #2]
    for (index =0;index < pack.moduleCount;index++){
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	73fb      	strb	r3, [r7, #15]
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006bd8:	7d1b      	ldrb	r3, [r3, #20]
 8006bda:	7bfa      	ldrb	r2, [r7, #15]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	f4ff af34 	bcc.w	8006a4a <PCU_Tasks+0x112>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <PCU_Tasks+0x2c0>)
 8006be4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	f040 80e4 	bne.w	8006db6 <PCU_Tasks+0x47e>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < pack.moduleCount;index++){
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e0c7      	b.n	8006d84 <PCU_Tasks+0x44c>
 8006bf4:	20000d28 	.word	0x20000d28
 8006bf8:	2000a664 	.word	0x2000a664
 8006bfc:	20000d20 	.word	0x20000d20
 8006c00:	200005d8 	.word	0x200005d8
 8006c04:	20000d1e 	.word	0x20000d1e
 8006c08:	20000d1c 	.word	0x20000d1c
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	0801735c 	.word	0x0801735c
 8006c14:	20000b64 	.word	0x20000b64
 8006c18:	08017380 	.word	0x08017380
 8006c1c:	20000de4 	.word	0x20000de4
 8006c20:	080173a4 	.word	0x080173a4
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	4ab3      	ldr	r2, [pc, #716]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006c36:	789b      	ldrb	r3, [r3, #2]
 8006c38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d123      	bne.n	8006c8a <PCU_Tasks+0x352>
        if (module[index].currentState != moduleOff){
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	4aab      	ldr	r2, [pc, #684]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c46:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	3327      	adds	r3, #39	; 0x27
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8092 	beq.w	8006d7e <PCU_Tasks+0x446>
          // Turn off the module
          module[index].nextState = moduleOff;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	4aa5      	ldr	r2, [pc, #660]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c5e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	3328      	adds	r3, #40	; 0x28
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	4aa0      	ldr	r2, [pc, #640]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c72:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006c80:	7893      	ldrb	r3, [r2, #2]
 8006c82:	f36f 0382 	bfc	r3, #2, #1
 8006c86:	7093      	strb	r3, [r2, #2]
 8006c88:	e079      	b.n	8006d7e <PCU_Tasks+0x446>
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	4a99      	ldr	r2, [pc, #612]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006c8e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006c9c:	789b      	ldrb	r3, [r3, #2]
 8006c9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d16a      	bne.n	8006d7e <PCU_Tasks+0x446>
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4a92      	ldr	r2, [pc, #584]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006cac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d15b      	bne.n	8006d7e <PCU_Tasks+0x446>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	4a8a      	ldr	r2, [pc, #552]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006cca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	332a      	adds	r3, #42	; 0x2a
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d13a      	bne.n	8006d52 <PCU_Tasks+0x41a>
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	4a85      	ldr	r2, [pc, #532]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006ce0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	4413      	add	r3, r2
 8006cea:	3329      	adds	r3, #41	; 0x29
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	4980      	ldr	r1, [pc, #512]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006cf2:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8006cf6:	fb00 f303 	mul.w	r3, r0, r3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3328      	adds	r3, #40	; 0x28
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d126      	bne.n	8006d52 <PCU_Tasks+0x41a>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	4a7b      	ldr	r2, [pc, #492]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d08:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	3308      	adds	r3, #8
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f003 f97c 	bl	800a014 <MCU_TicksSinceLastStateTx>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d22:	d92c      	bls.n	8006d7e <PCU_Tasks+0x446>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	4a73      	ldr	r2, [pc, #460]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	3308      	adds	r3, #8
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	496e      	ldr	r1, [pc, #440]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d3a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8006d3e:	fb00 f303 	mul.w	r3, r0, r3
 8006d42:	440b      	add	r3, r1
 8006d44:	3328      	adds	r3, #40	; 0x28
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f002 fecc 	bl	8009ae8 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8006d50:	e015      	b.n	8006d7e <PCU_Tasks+0x446>
          }
        }else {
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	4a67      	ldr	r2, [pc, #412]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d56:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	3308      	adds	r3, #8
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	4963      	ldr	r1, [pc, #396]	; (8006ef4 <PCU_Tasks+0x5bc>)
 8006d68:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8006d6c:	fb00 f303 	mul.w	r3, r0, r3
 8006d70:	440b      	add	r3, r1
 8006d72:	3328      	adds	r3, #40	; 0x28
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f002 feb5 	bl	8009ae8 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	3301      	adds	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	4b5c      	ldr	r3, [pc, #368]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	f4ff af4a 	bcc.w	8006c24 <PCU_Tasks+0x2ec>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8006d90:	4b5a      	ldr	r3, [pc, #360]	; (8006efc <PCU_Tasks+0x5c4>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 82c2 	beq.w	800731e <PCU_Tasks+0x9e6>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8006d9a:	f005 fa17 	bl	800c1cc <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8006d9e:	f005 fb2f 	bl	800c400 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8006da2:	f005 fbb9 	bl	800c518 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8006da6:	f005 fc4b 	bl	800c640 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8006daa:	f005 fcdd 	bl	800c768 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8006dae:	4b53      	ldr	r3, [pc, #332]	; (8006efc <PCU_Tasks+0x5c4>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8006db4:	e2b3      	b.n	800731e <PCU_Tasks+0x9e6>
  } else if(pack.controlMode == packMode){
 8006db6:	4b50      	ldr	r3, [pc, #320]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006db8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 82ae 	bne.w	800731e <PCU_Tasks+0x9e6>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8006dc2:	4b4d      	ldr	r3, [pc, #308]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d005      	beq.n	8006dd8 <PCU_Tasks+0x4a0>
 8006dcc:	4b4a      	ldr	r3, [pc, #296]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	f040 813c 	bne.w	8007050 <PCU_Tasks+0x718>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8006dd8:	4b47      	ldr	r3, [pc, #284]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006dda:	7e9b      	ldrb	r3, [r3, #26]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 80a1 	bne.w	8006f24 <PCU_Tasks+0x5ec>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8006de2:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <PCU_Tasks+0x5c8>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 030a 	and.w	r3, r3, #10
 8006dea:	2b0a      	cmp	r3, #10
 8006dec:	d115      	bne.n	8006e1a <PCU_Tasks+0x4e2>
 8006dee:	4b42      	ldr	r3, [pc, #264]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006df0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006df4:	4a43      	ldr	r2, [pc, #268]	; (8006f04 <PCU_Tasks+0x5cc>)
 8006df6:	fba2 1203 	umull	r1, r2, r2, r3
 8006dfa:	0b12      	lsrs	r2, r2, #12
 8006dfc:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e00:	fb01 f202 	mul.w	r2, r1, r2
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <PCU_Tasks+0x4e2>
 8006e0c:	493e      	ldr	r1, [pc, #248]	; (8006f08 <PCU_Tasks+0x5d0>)
 8006e0e:	483f      	ldr	r0, [pc, #252]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e10:	f00c ff3c 	bl	8013c8c <siprintf>
 8006e14:	483d      	ldr	r0, [pc, #244]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e16:	f7fe faa3 	bl	8005360 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8006e1a:	f002 f82f 	bl	8008e7c <MCU_FindMaxVoltageModule>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d12f      	bne.n	8006e88 <PCU_Tasks+0x550>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <PCU_Tasks+0x5c8>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	f003 0303 	and.w	r3, r3, #3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d115      	bne.n	8006e60 <PCU_Tasks+0x528>
 8006e34:	4b30      	ldr	r3, [pc, #192]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e36:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006e3a:	4a32      	ldr	r2, [pc, #200]	; (8006f04 <PCU_Tasks+0x5cc>)
 8006e3c:	fba2 1203 	umull	r1, r2, r2, r3
 8006e40:	0b12      	lsrs	r2, r2, #12
 8006e42:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e46:	fb01 f202 	mul.w	r2, r1, r2
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <PCU_Tasks+0x528>
 8006e52:	492f      	ldr	r1, [pc, #188]	; (8006f10 <PCU_Tasks+0x5d8>)
 8006e54:	482d      	ldr	r0, [pc, #180]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e56:	f00c ff19 	bl	8013c8c <siprintf>
 8006e5a:	482c      	ldr	r0, [pc, #176]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006e5c:	f7fe fa80 	bl	8005360 <serialOut>
          pack.errorCounts.firstModule ++;
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e62:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006e66:	3301      	adds	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8006e70:	4b21      	ldr	r3, [pc, #132]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e72:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006e76:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d952      	bls.n	8006f24 <PCU_Tasks+0x5ec>
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8006e86:	e04d      	b.n	8006f24 <PCU_Tasks+0x5ec>
        }else if (moduleId == pack.moduleCount +1 ){
 8006e88:	79fa      	ldrb	r2, [r7, #7]
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006e8c:	7d1b      	ldrb	r3, [r3, #20]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d141      	bne.n	8006f18 <PCU_Tasks+0x5e0>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8006e94:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <PCU_Tasks+0x5c8>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d115      	bne.n	8006ecc <PCU_Tasks+0x594>
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ea2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006ea6:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <PCU_Tasks+0x5cc>)
 8006ea8:	fba2 1203 	umull	r1, r2, r2, r3
 8006eac:	0b12      	lsrs	r2, r2, #12
 8006eae:	f241 3188 	movw	r1, #5000	; 0x1388
 8006eb2:	fb01 f202 	mul.w	r2, r1, r2
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <PCU_Tasks+0x594>
 8006ebe:	4915      	ldr	r1, [pc, #84]	; (8006f14 <PCU_Tasks+0x5dc>)
 8006ec0:	4812      	ldr	r0, [pc, #72]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006ec2:	f00c fee3 	bl	8013c8c <siprintf>
 8006ec6:	4811      	ldr	r0, [pc, #68]	; (8006f0c <PCU_Tasks+0x5d4>)
 8006ec8:	f7fe fa4a 	bl	8005360 <serialOut>
          pack.errorCounts.firstModule ++;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ece:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ed8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006ede:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006ee2:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d91c      	bls.n	8006f24 <PCU_Tasks+0x5ec>
 8006eea:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <PCU_Tasks+0x5c0>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8006ef2:	e017      	b.n	8006f24 <PCU_Tasks+0x5ec>
 8006ef4:	20000de4 	.word	0x20000de4
 8006ef8:	2000a664 	.word	0x2000a664
 8006efc:	20000d25 	.word	0x20000d25
 8006f00:	2000000c 	.word	0x2000000c
 8006f04:	d1b71759 	.word	0xd1b71759
 8006f08:	080173c8 	.word	0x080173c8
 8006f0c:	20000b64 	.word	0x20000b64
 8006f10:	080173fc 	.word	0x080173fc
 8006f14:	08017420 	.word	0x08017420
          pack.powerStatus.firstModuleId = moduleId;
 8006f18:	4ab6      	ldr	r2, [pc, #728]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8006f1e:	4bb5      	ldr	r3, [pc, #724]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8006f24:	4bb3      	ldr	r3, [pc, #716]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f26:	7e9b      	ldrb	r3, [r3, #26]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	f040 8091 	bne.w	8007050 <PCU_Tasks+0x718>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8006f2e:	4bb1      	ldr	r3, [pc, #708]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f30:	7e5b      	ldrb	r3, [r3, #25]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 ffc2 	bl	8009ebc <MCU_ModuleIndexFromId>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73bb      	strb	r3, [r7, #14]
        if (firstModuleIndex != pack.moduleCount){
 8006f3c:	4bad      	ldr	r3, [pc, #692]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f3e:	7d1b      	ldrb	r3, [r3, #20]
 8006f40:	7bba      	ldrb	r2, [r7, #14]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d077      	beq.n	8007036 <PCU_Tasks+0x6fe>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	4aab      	ldr	r2, [pc, #684]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006f4a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006f58:	789b      	ldrb	r3, [r3, #2]
 8006f5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d00e      	beq.n	8006f82 <PCU_Tasks+0x64a>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	4aa4      	ldr	r2, [pc, #656]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006f68:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006f76:	789b      	ldrb	r3, [r3, #2]
 8006f78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d113      	bne.n	8006faa <PCU_Tasks+0x672>
             pack.powerStatus.powerStage = stageSelectModule;
 8006f82:	4b9c      	ldr	r3, [pc, #624]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8006f88:	4b9c      	ldr	r3, [pc, #624]	; (80071fc <PCU_Tasks+0x8c4>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d15d      	bne.n	8007050 <PCU_Tasks+0x718>
 8006f94:	4b97      	ldr	r3, [pc, #604]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006f96:	7e5b      	ldrb	r3, [r3, #25]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4999      	ldr	r1, [pc, #612]	; (8007200 <PCU_Tasks+0x8c8>)
 8006f9c:	4899      	ldr	r0, [pc, #612]	; (8007204 <PCU_Tasks+0x8cc>)
 8006f9e:	f00c fe75 	bl	8013c8c <siprintf>
 8006fa2:	4898      	ldr	r0, [pc, #608]	; (8007204 <PCU_Tasks+0x8cc>)
 8006fa4:	f7fe f9dc 	bl	8005360 <serialOut>
 8006fa8:	e052      	b.n	8007050 <PCU_Tasks+0x718>
          } else if (pack.vcuRequestedState == packOn){
 8006faa:	4b92      	ldr	r3, [pc, #584]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d11d      	bne.n	8006ff0 <PCU_Tasks+0x6b8>
            if (module[firstModuleIndex].currentState == moduleOn){
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	4a90      	ldr	r2, [pc, #576]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006fb8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3327      	adds	r3, #39	; 0x27
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d107      	bne.n	8006fda <PCU_Tasks+0x6a2>
              pack.state = packOn;
 8006fca:	4b8a      	ldr	r3, [pc, #552]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 8006fd2:	4b88      	ldr	r3, [pc, #544]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	769a      	strb	r2, [r3, #26]
 8006fd8:	e03a      	b.n	8007050 <PCU_Tasks+0x718>
                module[firstModuleIndex].nextState = moduleOn;
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4a86      	ldr	r2, [pc, #536]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006fde:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3328      	adds	r3, #40	; 0x28
 8006fea:	2203      	movs	r2, #3
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e02f      	b.n	8007050 <PCU_Tasks+0x718>
          } else if (pack.vcuRequestedState == packPrecharge){
 8006ff0:	4b80      	ldr	r3, [pc, #512]	; (80071f4 <PCU_Tasks+0x8bc>)
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d12a      	bne.n	8007050 <PCU_Tasks+0x718>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	4a7e      	ldr	r2, [pc, #504]	; (80071f8 <PCU_Tasks+0x8c0>)
 8006ffe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	3327      	adds	r3, #39	; 0x27
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d107      	bne.n	8007020 <PCU_Tasks+0x6e8>
              pack.state = packPrecharge;
 8007010:	4b78      	ldr	r3, [pc, #480]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007018:	4b76      	ldr	r3, [pc, #472]	; (80071f4 <PCU_Tasks+0x8bc>)
 800701a:	2202      	movs	r2, #2
 800701c:	769a      	strb	r2, [r3, #26]
 800701e:	e017      	b.n	8007050 <PCU_Tasks+0x718>
                module[firstModuleIndex].nextState = modulePrecharge;
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	4a75      	ldr	r2, [pc, #468]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007024:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	4413      	add	r3, r2
 800702e:	3328      	adds	r3, #40	; 0x28
 8007030:	2202      	movs	r2, #2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e00c      	b.n	8007050 <PCU_Tasks+0x718>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007036:	4b71      	ldr	r3, [pc, #452]	; (80071fc <PCU_Tasks+0x8c4>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d106      	bne.n	8007050 <PCU_Tasks+0x718>
 8007042:	4971      	ldr	r1, [pc, #452]	; (8007208 <PCU_Tasks+0x8d0>)
 8007044:	486f      	ldr	r0, [pc, #444]	; (8007204 <PCU_Tasks+0x8cc>)
 8007046:	f00c fe21 	bl	8013c8c <siprintf>
 800704a:	486e      	ldr	r0, [pc, #440]	; (8007204 <PCU_Tasks+0x8cc>)
 800704c:	f7fe f988 	bl	8005360 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
 8007054:	e13a      	b.n	80072cc <PCU_Tasks+0x994>
      if(module[index].faultCode.overCurrent == true){
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	4a67      	ldr	r2, [pc, #412]	; (80071f8 <PCU_Tasks+0x8c0>)
 800705a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	4413      	add	r3, r2
 8007064:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007068:	789b      	ldrb	r3, [r3, #2]
 800706a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d127      	bne.n	80070c4 <PCU_Tasks+0x78c>
        if (pack.vcuRequestedState != packOff){
 8007074:	4b5f      	ldr	r3, [pc, #380]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <PCU_Tasks+0x75c>
          module[index].nextState = moduleStandby;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	4a5d      	ldr	r2, [pc, #372]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007082:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3328      	adds	r3, #40	; 0x28
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e0bc      	b.n	800720e <PCU_Tasks+0x8d6>
          module[index].nextState = moduleOff;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	4a58      	ldr	r2, [pc, #352]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007098:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	3328      	adds	r3, #40	; 0x28
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	4a53      	ldr	r2, [pc, #332]	; (80071f8 <PCU_Tasks+0x8c0>)
 80070ac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80070ba:	7893      	ldrb	r3, [r2, #2]
 80070bc:	f36f 0382 	bfc	r3, #2, #1
 80070c0:	7093      	strb	r3, [r2, #2]
 80070c2:	e0a4      	b.n	800720e <PCU_Tasks+0x8d6>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	4a4c      	ldr	r2, [pc, #304]	; (80071f8 <PCU_Tasks+0x8c0>)
 80070c8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80070d6:	789b      	ldrb	r3, [r3, #2]
 80070d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 8086 	bne.w	80071f0 <PCU_Tasks+0x8b8>
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	4a44      	ldr	r2, [pc, #272]	; (80071f8 <PCU_Tasks+0x8c0>)
 80070e8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80070f6:	789b      	ldrb	r3, [r3, #2]
 80070f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d176      	bne.n	80071f0 <PCU_Tasks+0x8b8>
        switch (pack.vcuRequestedState){
 8007102:	4b3c      	ldr	r3, [pc, #240]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007108:	2b03      	cmp	r3, #3
 800710a:	d87f      	bhi.n	800720c <PCU_Tasks+0x8d4>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <PCU_Tasks+0x7dc>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	080071cb 	.word	0x080071cb
 8007118:	080071a5 	.word	0x080071a5
 800711c:	08007175 	.word	0x08007175
 8007120:	08007125 	.word	0x08007125
            if(pack.state == packOn){
 8007124:	4b33      	ldr	r3, [pc, #204]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800712a:	2b03      	cmp	r3, #3
 800712c:	d109      	bne.n	8007142 <PCU_Tasks+0x80a>
              module[index].nextState = moduleOn;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	4a31      	ldr	r2, [pc, #196]	; (80071f8 <PCU_Tasks+0x8c0>)
 8007132:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	3328      	adds	r3, #40	; 0x28
 800713e:	2203      	movs	r2, #3
 8007140:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 8007142:	4b2c      	ldr	r3, [pc, #176]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007148:	2b09      	cmp	r3, #9
 800714a:	d804      	bhi.n	8007156 <PCU_Tasks+0x81e>
 800714c:	4b29      	ldr	r3, [pc, #164]	; (80071f4 <PCU_Tasks+0x8bc>)
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007154:	e05b      	b.n	800720e <PCU_Tasks+0x8d6>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 8007156:	4b27      	ldr	r3, [pc, #156]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800715c:	2bbe      	cmp	r3, #190	; 0xbe
 800715e:	d904      	bls.n	800716a <PCU_Tasks+0x832>
 8007160:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007162:	2203      	movs	r2, #3
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007168:	e051      	b.n	800720e <PCU_Tasks+0x8d6>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 800716a:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <PCU_Tasks+0x8bc>)
 800716c:	2202      	movs	r2, #2
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007172:	e04c      	b.n	800720e <PCU_Tasks+0x8d6>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8007174:	4b1f      	ldr	r3, [pc, #124]	; (80071f4 <PCU_Tasks+0x8bc>)
 8007176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800717a:	2b02      	cmp	r3, #2
 800717c:	d10d      	bne.n	800719a <PCU_Tasks+0x862>
 800717e:	7bfa      	ldrb	r2, [r7, #15]
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	429a      	cmp	r2, r3
 8007184:	d009      	beq.n	800719a <PCU_Tasks+0x862>
              module[index].nextState = moduleStandby;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	4a1b      	ldr	r2, [pc, #108]	; (80071f8 <PCU_Tasks+0x8c0>)
 800718a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	4413      	add	r3, r2
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 800719a:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <PCU_Tasks+0x8bc>)
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80071a2:	e034      	b.n	800720e <PCU_Tasks+0x8d6>
            module[index].nextState = moduleStandby;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <PCU_Tasks+0x8c0>)
 80071a8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	3328      	adds	r3, #40	; 0x28
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80071c8:	e021      	b.n	800720e <PCU_Tasks+0x8d6>
            module[index].nextState = moduleOff;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	4a0a      	ldr	r2, [pc, #40]	; (80071f8 <PCU_Tasks+0x8c0>)
 80071ce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	4413      	add	r3, r2
 80071d8:	3328      	adds	r3, #40	; 0x28
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <PCU_Tasks+0x8bc>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80071ee:	e00e      	b.n	800720e <PCU_Tasks+0x8d6>
      }
 80071f0:	bf00      	nop
 80071f2:	e00c      	b.n	800720e <PCU_Tasks+0x8d6>
 80071f4:	2000a664 	.word	0x2000a664
 80071f8:	20000de4 	.word	0x20000de4
 80071fc:	2000000c 	.word	0x2000000c
 8007200:	08017444 	.word	0x08017444
 8007204:	20000b64 	.word	0x20000b64
 8007208:	08017484 	.word	0x08017484
            break;
 800720c:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	4a45      	ldr	r2, [pc, #276]	; (8007328 <PCU_Tasks+0x9f0>)
 8007212:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	4413      	add	r3, r2
 800721c:	332a      	adds	r3, #42	; 0x2a
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d13a      	bne.n	800729a <PCU_Tasks+0x962>
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4a40      	ldr	r2, [pc, #256]	; (8007328 <PCU_Tasks+0x9f0>)
 8007228:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800722c:	fb01 f303 	mul.w	r3, r1, r3
 8007230:	4413      	add	r3, r2
 8007232:	3329      	adds	r3, #41	; 0x29
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	493b      	ldr	r1, [pc, #236]	; (8007328 <PCU_Tasks+0x9f0>)
 800723a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800723e:	fb00 f303 	mul.w	r3, r0, r3
 8007242:	440b      	add	r3, r1
 8007244:	3328      	adds	r3, #40	; 0x28
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d126      	bne.n	800729a <PCU_Tasks+0x962>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	4a36      	ldr	r2, [pc, #216]	; (8007328 <PCU_Tasks+0x9f0>)
 8007250:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	3308      	adds	r3, #8
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f002 fed8 	bl	800a014 <MCU_TicksSinceLastStateTx>
 8007264:	4603      	mov	r3, r0
 8007266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726a:	d92c      	bls.n	80072c6 <PCU_Tasks+0x98e>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	4a2e      	ldr	r2, [pc, #184]	; (8007328 <PCU_Tasks+0x9f0>)
 8007270:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	3308      	adds	r3, #8
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	4929      	ldr	r1, [pc, #164]	; (8007328 <PCU_Tasks+0x9f0>)
 8007282:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007286:	fb00 f303 	mul.w	r3, r0, r3
 800728a:	440b      	add	r3, r1
 800728c:	3328      	adds	r3, #40	; 0x28
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f002 fc28 	bl	8009ae8 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007298:	e015      	b.n	80072c6 <PCU_Tasks+0x98e>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	4a22      	ldr	r2, [pc, #136]	; (8007328 <PCU_Tasks+0x9f0>)
 800729e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	3308      	adds	r3, #8
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	491e      	ldr	r1, [pc, #120]	; (8007328 <PCU_Tasks+0x9f0>)
 80072b0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80072b4:	fb00 f303 	mul.w	r3, r0, r3
 80072b8:	440b      	add	r3, r1
 80072ba:	3328      	adds	r3, #40	; 0x28
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f002 fc11 	bl	8009ae8 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	3301      	adds	r3, #1
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <PCU_Tasks+0x9f4>)
 80072ce:	7d1b      	ldrb	r3, [r3, #20]
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f4ff aebf 	bcc.w	8007056 <PCU_Tasks+0x71e>
    MCU_UpdateStats();
 80072d8:	f000 f8de 	bl	8007498 <MCU_UpdateStats>
    if(sendState > 0){
 80072dc:	4b14      	ldr	r3, [pc, #80]	; (8007330 <PCU_Tasks+0x9f8>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01c      	beq.n	800731e <PCU_Tasks+0x9e6>
      if (pack.rtcValid == false) VCU_RequestTime();
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <PCU_Tasks+0x9f4>)
 80072e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80072ea:	f083 0301 	eor.w	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <PCU_Tasks+0x9c0>
 80072f4:	f005 facc 	bl	800c890 <VCU_RequestTime>
      VCU_TransmitBmsState();
 80072f8:	f004 f8ca 	bl	800b490 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 80072fc:	f004 f9b0 	bl	800b660 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8007300:	f004 fa92 	bl	800b828 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8007304:	f004 fbd4 	bl	800bab0 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 8007308:	f004 fcfe 	bl	800bd08 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 800730c:	f004 fe1c 	bl	800bf48 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8007310:	f004 fe88 	bl	800c024 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8007314:	f004 fef4 	bl	800c100 <VCU_TransmitBmsData10>
      sendState=0;
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <PCU_Tasks+0x9f8>)
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000de4 	.word	0x20000de4
 800732c:	2000a664 	.word	0x2000a664
 8007330:	20000d25 	.word	0x20000d25

08007334 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	4618      	mov	r0, r3
 8007342:	f7f9 fe55 	bl	8000ff0 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	4618      	mov	r0, r3
 800734a:	f7fb f9b4 	bl	80026b6 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	21ff      	movs	r1, #255	; 0xff
 8007352:	4618      	mov	r0, r3
 8007354:	f7fb f9e3 	bl	800271e <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 8007358:	484a      	ldr	r0, [pc, #296]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 800735a:	f7fa fbc5 	bl	8001ae8 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 800735e:	4a49      	ldr	r2, [pc, #292]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 8007360:	7813      	ldrb	r3, [r2, #0]
 8007362:	f043 0320 	orr.w	r3, r3, #32
 8007366:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8007368:	4a46      	ldr	r2, [pc, #280]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 800736a:	7853      	ldrb	r3, [r2, #1]
 800736c:	f36f 1386 	bfc	r3, #6, #1
 8007370:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	4943      	ldr	r1, [pc, #268]	; (8007484 <DRV_CANFDSPI_Init+0x150>)
 8007376:	4618      	mov	r0, r3
 8007378:	f7fa fb28 	bl	80019cc <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 800737c:	4842      	ldr	r0, [pc, #264]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 800737e:	f7fa fcc3 	bl	8001d08 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8007382:	4a41      	ldr	r2, [pc, #260]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 8007384:	7853      	ldrb	r3, [r2, #1]
 8007386:	2107      	movs	r1, #7
 8007388:	f361 0304 	bfi	r3, r1, #0, #5
 800738c:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 800738e:	4a3e      	ldr	r2, [pc, #248]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 8007390:	7853      	ldrb	r3, [r2, #1]
 8007392:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8007396:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8007398:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 800739a:	7813      	ldrb	r3, [r2, #0]
 800739c:	2101      	movs	r1, #1
 800739e:	f361 0345 	bfi	r3, r1, #1, #5
 80073a2:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	4a38      	ldr	r2, [pc, #224]	; (8007488 <DRV_CANFDSPI_Init+0x154>)
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fa fc54 	bl	8001c58 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 80073b0:	4836      	ldr	r0, [pc, #216]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073b2:	f7fa ff01 	bl	80021b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 80073b6:	4a35      	ldr	r2, [pc, #212]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073b8:	7813      	ldrb	r3, [r2, #0]
 80073ba:	210f      	movs	r1, #15
 80073bc:	f361 0345 	bfi	r3, r1, #1, #5
 80073c0:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 80073c2:	4a32      	ldr	r2, [pc, #200]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073c4:	8813      	ldrh	r3, [r2, #0]
 80073c6:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80073ca:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	4a2f      	ldr	r2, [pc, #188]	; (800748c <DRV_CANFDSPI_Init+0x158>)
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fa fea4 	bl	8002120 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 80073d8:	4b2d      	ldr	r3, [pc, #180]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 80073de:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073e0:	8813      	ldrh	r3, [r2, #0]
 80073e2:	f36f 030a 	bfc	r3, #0, #11
 80073e6:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 80073e8:	4a29      	ldr	r2, [pc, #164]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073ea:	78d3      	ldrb	r3, [r2, #3]
 80073ec:	f36f 1386 	bfc	r3, #6, #1
 80073f0:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 80073f2:	4a27      	ldr	r2, [pc, #156]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 80073f4:	6813      	ldr	r3, [r2, #0]
 80073f6:	f36f 23dc 	bfc	r3, #11, #18
 80073fa:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	4a24      	ldr	r2, [pc, #144]	; (8007490 <DRV_CANFDSPI_Init+0x15c>)
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa fe0e 	bl	8002024 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8007408:	4b22      	ldr	r3, [pc, #136]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 800740e:	4a21      	ldr	r2, [pc, #132]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 8007410:	8813      	ldrh	r3, [r2, #0]
 8007412:	f36f 030a 	bfc	r3, #0, #11
 8007416:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8007418:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 800741a:	78d3      	ldrb	r3, [r2, #3]
 800741c:	f36f 1386 	bfc	r3, #6, #1
 8007420:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 8007422:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	f36f 23dc 	bfc	r3, #11, #18
 800742a:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	4a19      	ldr	r2, [pc, #100]	; (8007494 <DRV_CANFDSPI_Init+0x160>)
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f7fa fe18 	bl	8002068 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 8007438:	79f8      	ldrb	r0, [r7, #7]
 800743a:	2301      	movs	r3, #1
 800743c:	2201      	movs	r2, #1
 800743e:	2100      	movs	r1, #0
 8007440:	f7fa fe36 	bl	80020b0 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8007444:	79f8      	ldrb	r0, [r7, #7]
 8007446:	2300      	movs	r3, #0
 8007448:	2202      	movs	r2, #2
 800744a:	2101      	movs	r1, #1
 800744c:	f7fb f9a7 	bl	800279e <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f7fc f8c0 	bl	80035dc <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	2201      	movs	r2, #1
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f7fb f8a7 	bl	80025b6 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	2103      	movs	r1, #3
 800746c:	4618      	mov	r0, r3
 800746e:	f7fa fff6 	bl	800245e <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f7fa fbb2 	bl	8001be0 <DRV_CANFDSPI_OperationModeSelect>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000d2c 	.word	0x20000d2c
 8007488:	20000d30 	.word	0x20000d30
 800748c:	20000d84 	.word	0x20000d84
 8007490:	20000d88 	.word	0x20000d88
 8007494:	20000d8c 	.word	0x20000d8c

08007498 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8007498:	b5b0      	push	{r4, r5, r7, lr}
 800749a:	b094      	sub	sp, #80	; 0x50
 800749c:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint32_t voltage             = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	643b      	str	r3, [r7, #64]	; 0x40
  float moduleCurrent          = 0;
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float moduleMaxChargeA       = 0;
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 80074c0:	23ff      	movs	r3, #255	; 0xff
 80074c2:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t lowestSoh           = 255;
 80074c4:	23ff      	movs	r3, #255	; 0xff
 80074c6:	873b      	strh	r3, [r7, #56]	; 0x38
  uint32_t totalAvgCellVolt    = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t highestCellVolt     = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t lowestCellVolt      = 65535;
 80074d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074d4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t totalAvgCellTemp    = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t highestCellTemp     = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t lowestCellTemp      = 65535;
 80074de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074e2:	853b      	strh	r3, [r7, #40]	; 0x28
  float    maxChargeA          = 0;
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
  float    maxDischargeA       = 0;
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007514:	e275      	b.n	8007a02 <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 8007516:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800751a:	4a85      	ldr	r2, [pc, #532]	; (8007730 <MCU_UpdateStats+0x298>)
 800751c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800752a:	789b      	ldrb	r3, [r3, #2]
 800752c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 8260 	bne.w	80079f8 <MCU_UpdateStats+0x560>
 8007538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800753c:	4a7c      	ldr	r2, [pc, #496]	; (8007730 <MCU_UpdateStats+0x298>)
 800753e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	4413      	add	r3, r2
 8007548:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800754c:	789b      	ldrb	r3, [r3, #2]
 800754e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 824f 	bne.w	80079f8 <MCU_UpdateStats+0x560>
 800755a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800755e:	4a74      	ldr	r2, [pc, #464]	; (8007730 <MCU_UpdateStats+0x298>)
 8007560:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	4413      	add	r3, r2
 800756a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800756e:	789b      	ldrb	r3, [r3, #2]
 8007570:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 823e 	bne.w	80079f8 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 800757c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007580:	4a6b      	ldr	r2, [pc, #428]	; (8007730 <MCU_UpdateStats+0x298>)
 8007582:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	3327      	adds	r3, #39	; 0x27
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b03      	cmp	r3, #3
 8007592:	f040 8146 	bne.w	8007822 <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 8007596:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800759a:	4a65      	ldr	r2, [pc, #404]	; (8007730 <MCU_UpdateStats+0x298>)
 800759c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	330e      	adds	r3, #14
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7f8 ff9c 	bl	80004e8 <__aeabi_i2d>
 80075b0:	a359      	add	r3, pc, #356	; (adr r3, 8007718 <MCU_UpdateStats+0x280>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f9 f801 	bl	80005bc <__aeabi_dmul>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4610      	mov	r0, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	a357      	add	r3, pc, #348	; (adr r3, 8007720 <MCU_UpdateStats+0x288>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f8 fe40 	bl	800024c <__aeabi_dsub>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4610      	mov	r0, r2
 80075d2:	4619      	mov	r1, r3
 80075d4:	f7f9 faea 	bl	8000bac <__aeabi_d2f>
 80075d8:	4603      	mov	r3, r0
 80075da:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 80075dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075e0:	4a53      	ldr	r2, [pc, #332]	; (8007730 <MCU_UpdateStats+0x298>)
 80075e2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80075e6:	fb01 f303 	mul.w	r3, r1, r3
 80075ea:	4413      	add	r3, r2
 80075ec:	3310      	adds	r3, #16
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7f8 ff79 	bl	80004e8 <__aeabi_i2d>
 80075f6:	a348      	add	r3, pc, #288	; (adr r3, 8007718 <MCU_UpdateStats+0x280>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 ffde 	bl	80005bc <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	a345      	add	r3, pc, #276	; (adr r3, 8007720 <MCU_UpdateStats+0x288>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fe1d 	bl	800024c <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	f7f9 fac7 	bl	8000bac <__aeabi_d2f>
 800761e:	4603      	mov	r3, r0
 8007620:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 8007622:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007626:	4a42      	ldr	r2, [pc, #264]	; (8007730 <MCU_UpdateStats+0x298>)
 8007628:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	3314      	adds	r3, #20
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763a:	4413      	add	r3, r2
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
        //increment module on count
        modulesOn++;
 800763e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007642:	3301      	adds	r3, #1
 8007644:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 8007648:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800764c:	4a38      	ldr	r2, [pc, #224]	; (8007730 <MCU_UpdateStats+0x298>)
 800764e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	3316      	adds	r3, #22
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f7f8 ff43 	bl	80004e8 <__aeabi_i2d>
 8007662:	a32d      	add	r3, pc, #180	; (adr r3, 8007718 <MCU_UpdateStats+0x280>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 ffa8 	bl	80005bc <__aeabi_dmul>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4610      	mov	r0, r2
 8007672:	4619      	mov	r1, r3
 8007674:	a32a      	add	r3, pc, #168	; (adr r3, 8007720 <MCU_UpdateStats+0x288>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fde7 	bl	800024c <__aeabi_dsub>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f7f9 fa91 	bl	8000bac <__aeabi_d2f>
 800768a:	4603      	mov	r3, r0
 800768c:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 800768e:	6938      	ldr	r0, [r7, #16]
 8007690:	f7f8 ff3c 	bl	800050c <__aeabi_f2d>
 8007694:	a324      	add	r3, pc, #144	; (adr r3, 8007728 <MCU_UpdateStats+0x290>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f7f8 fdd7 	bl	800024c <__aeabi_dsub>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4614      	mov	r4, r2
 80076a4:	461d      	mov	r5, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7f8 ff30 	bl	800050c <__aeabi_f2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4620      	mov	r0, r4
 80076b2:	4629      	mov	r1, r5
 80076b4:	f7f9 fa12 	bl	8000adc <__aeabi_dcmpgt>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d040      	beq.n	8007740 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 80076be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <MCU_UpdateStats+0x298>)
 80076c4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80076d2:	7893      	ldrb	r3, [r2, #2]
 80076d4:	f043 0304 	orr.w	r3, r3, #4
 80076d8:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 80076da:	4b16      	ldr	r3, [pc, #88]	; (8007734 <MCU_UpdateStats+0x29c>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d16d      	bne.n	80077c2 <MCU_UpdateStats+0x32a>
 80076e6:	6938      	ldr	r0, [r7, #16]
 80076e8:	f7f8 ff10 	bl	800050c <__aeabi_f2d>
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7f8 ff0b 	bl	800050c <__aeabi_f2d>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9cd 2300 	strd	r2, r3, [sp]
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	490d      	ldr	r1, [pc, #52]	; (8007738 <MCU_UpdateStats+0x2a0>)
 8007704:	480d      	ldr	r0, [pc, #52]	; (800773c <MCU_UpdateStats+0x2a4>)
 8007706:	f00c fac1 	bl	8013c8c <siprintf>
 800770a:	480c      	ldr	r0, [pc, #48]	; (800773c <MCU_UpdateStats+0x2a4>)
 800770c:	f7fd fe28 	bl	8005360 <serialOut>
 8007710:	e057      	b.n	80077c2 <MCU_UpdateStats+0x32a>
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
 8007718:	47ae147b 	.word	0x47ae147b
 800771c:	3f947ae1 	.word	0x3f947ae1
 8007720:	47ae147b 	.word	0x47ae147b
 8007724:	40847ae1 	.word	0x40847ae1
 8007728:	33333333 	.word	0x33333333
 800772c:	3fd33333 	.word	0x3fd33333
 8007730:	20000de4 	.word	0x20000de4
 8007734:	2000000c 	.word	0x2000000c
 8007738:	080174a8 	.word	0x080174a8
 800773c:	20000b64 	.word	0x20000b64
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 8007740:	6938      	ldr	r0, [r7, #16]
 8007742:	f7f8 fee3 	bl	800050c <__aeabi_f2d>
 8007746:	a3d7      	add	r3, pc, #860	; (adr r3, 8007aa4 <MCU_UpdateStats+0x60c>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f7f8 fd80 	bl	8000250 <__adddf3>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4614      	mov	r4, r2
 8007756:	461d      	mov	r5, r3
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f7f8 fed7 	bl	800050c <__aeabi_f2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f9 f99b 	bl	8000aa0 <__aeabi_dcmplt>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d028      	beq.n	80077c2 <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 8007770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007774:	4ac4      	ldr	r2, [pc, #784]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007776:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	4413      	add	r3, r2
 8007780:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007784:	7893      	ldrb	r3, [r2, #2]
 8007786:	f043 0304 	orr.w	r3, r3, #4
 800778a:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 800778c:	4bbf      	ldr	r3, [pc, #764]	; (8007a8c <MCU_UpdateStats+0x5f4>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	2b03      	cmp	r3, #3
 8007796:	d114      	bne.n	80077c2 <MCU_UpdateStats+0x32a>
 8007798:	6938      	ldr	r0, [r7, #16]
 800779a:	f7f8 feb7 	bl	800050c <__aeabi_f2d>
 800779e:	4604      	mov	r4, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	68b8      	ldr	r0, [r7, #8]
 80077a4:	f7f8 feb2 	bl	800050c <__aeabi_f2d>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9cd 2300 	strd	r2, r3, [sp]
 80077b0:	4622      	mov	r2, r4
 80077b2:	462b      	mov	r3, r5
 80077b4:	49b6      	ldr	r1, [pc, #728]	; (8007a90 <MCU_UpdateStats+0x5f8>)
 80077b6:	48b7      	ldr	r0, [pc, #732]	; (8007a94 <MCU_UpdateStats+0x5fc>)
 80077b8:	f00c fa68 	bl	8013c8c <siprintf>
 80077bc:	48b5      	ldr	r0, [pc, #724]	; (8007a94 <MCU_UpdateStats+0x5fc>)
 80077be:	f7fd fdcf 	bl	8005360 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 80077c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077c6:	4ab0      	ldr	r2, [pc, #704]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80077c8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077cc:	fb01 f303 	mul.w	r3, r1, r3
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80077d6:	789b      	ldrb	r3, [r3, #2]
 80077d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d107      	bne.n	80077f2 <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 80077e2:	4bad      	ldr	r3, [pc, #692]	; (8007a98 <MCU_UpdateStats+0x600>)
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d102      	bne.n	80077f2 <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 80077ec:	4baa      	ldr	r3, [pc, #680]	; (8007a98 <MCU_UpdateStats+0x600>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 80077f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80077f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80077fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 8007802:	ed97 7a08 	vldr	s14, [r7, #32]
 8007806:	edd7 7a02 	vldr	s15, [r7, #8]
 800780a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800780e:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 8007812:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007816:	edd7 7a03 	vldr	s15, [r7, #12]
 800781a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800781e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 8007822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007826:	4a98      	ldr	r2, [pc, #608]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007828:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	3312      	adds	r3, #18
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 800783e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007842:	4a91      	ldr	r2, [pc, #580]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007844:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	4413      	add	r3, r2
 800784e:	3322      	adds	r3, #34	; 0x22
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007856:	4413      	add	r3, r2
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 800785a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800785e:	4a8a      	ldr	r2, [pc, #552]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007860:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	4413      	add	r3, r2
 800786a:	331c      	adds	r3, #28
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	4413      	add	r3, r2
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 8007876:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800787a:	4a83      	ldr	r2, [pc, #524]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 800787c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	332b      	adds	r3, #43	; 0x2b
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800788e:	429a      	cmp	r2, r3
 8007890:	d90a      	bls.n	80078a8 <MCU_UpdateStats+0x410>
 8007892:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007896:	4a7c      	ldr	r2, [pc, #496]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007898:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	332b      	adds	r3, #43	; 0x2b
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 80078a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078ac:	4a76      	ldr	r2, [pc, #472]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078ae:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	332c      	adds	r3, #44	; 0x2c
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d90a      	bls.n	80078da <MCU_UpdateStats+0x442>
 80078c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078c8:	4a6f      	ldr	r2, [pc, #444]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078ca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	332c      	adds	r3, #44	; 0x2c
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	873b      	strh	r3, [r7, #56]	; 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 80078da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078de:	4a6a      	ldr	r2, [pc, #424]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	3320      	adds	r3, #32
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d915      	bls.n	8007920 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 80078f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078f8:	4a63      	ldr	r2, [pc, #396]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80078fa:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	3320      	adds	r3, #32
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	863b      	strh	r3, [r7, #48]	; 0x30
        modLowestCellVolt = module[index].moduleId;
 800790a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800790e:	4a5e      	ldr	r2, [pc, #376]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007910:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	3308      	adds	r3, #8
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 8007920:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007924:	4a58      	ldr	r2, [pc, #352]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007926:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	331e      	adds	r3, #30
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007936:	429a      	cmp	r2, r3
 8007938:	d215      	bcs.n	8007966 <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 800793a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800793e:	4a52      	ldr	r2, [pc, #328]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007940:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	331e      	adds	r3, #30
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	867b      	strh	r3, [r7, #50]	; 0x32
        modHighestCellVolt = module[index].moduleId;
 8007950:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007954:	4a4c      	ldr	r2, [pc, #304]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007956:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	3308      	adds	r3, #8
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 8007966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800796a:	4a47      	ldr	r2, [pc, #284]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 800796c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	4413      	add	r3, r2
 8007976:	3318      	adds	r3, #24
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800797c:	429a      	cmp	r2, r3
 800797e:	d215      	bcs.n	80079ac <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8007980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007984:	4a40      	ldr	r2, [pc, #256]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 8007986:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3318      	adds	r3, #24
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	857b      	strh	r3, [r7, #42]	; 0x2a
        modHighestCellTemp = module[index].moduleId;
 8007996:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800799a:	4a3b      	ldr	r2, [pc, #236]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 800799c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	4413      	add	r3, r2
 80079a6:	3308      	adds	r3, #8
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 80079ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079b0:	4a35      	ldr	r2, [pc, #212]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80079b2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	331a      	adds	r3, #26
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d915      	bls.n	80079f2 <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 80079c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079ca:	4a2f      	ldr	r2, [pc, #188]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80079cc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	331a      	adds	r3, #26
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	853b      	strh	r3, [r7, #40]	; 0x28
        modLowestCellTemp = module[index].moduleId;
 80079dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079e0:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <MCU_UpdateStats+0x5f0>)
 80079e2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	3308      	adds	r3, #8
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 80079f2:	7efb      	ldrb	r3, [r7, #27]
 80079f4:	3301      	adds	r3, #1
 80079f6:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 80079f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079fc:	3301      	adds	r3, #1
 80079fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a02:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a04:	7d1b      	ldrb	r3, [r3, #20]
 8007a06:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	f4ff ad83 	bcc.w	8007516 <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 8007a10:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a12:	7efb      	ldrb	r3, [r7, #27]
 8007a14:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 8007a16:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a18:	7d1a      	ldrb	r2, [r3, #20]
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a1c:	7ddb      	ldrb	r3, [r3, #23]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4b1d      	ldr	r3, [pc, #116]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a24:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 8007a26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8087 	beq.w	8007b3e <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 8007a30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <MCU_UpdateStats+0x600>)
 8007a3e:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007a40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007a44:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007a9c <MCU_UpdateStats+0x604>
 8007a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a50:	dd32      	ble.n	8007ab8 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <MCU_UpdateStats+0x5f4>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d129      	bne.n	8007ab2 <MCU_UpdateStats+0x61a>
 8007a5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a60:	f7f8 fd54 	bl	800050c <__aeabi_f2d>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	a105      	add	r1, pc, #20	; (adr r1, 8007a80 <MCU_UpdateStats+0x5e8>)
 8007a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007a72:	490b      	ldr	r1, [pc, #44]	; (8007aa0 <MCU_UpdateStats+0x608>)
 8007a74:	4807      	ldr	r0, [pc, #28]	; (8007a94 <MCU_UpdateStats+0x5fc>)
 8007a76:	f00c f909 	bl	8013c8c <siprintf>
 8007a7a:	e017      	b.n	8007aac <MCU_UpdateStats+0x614>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	00000000 	.word	0x00000000
 8007a84:	409a3300 	.word	0x409a3300
 8007a88:	20000de4 	.word	0x20000de4
 8007a8c:	2000000c 	.word	0x2000000c
 8007a90:	080174f4 	.word	0x080174f4
 8007a94:	20000b64 	.word	0x20000b64
 8007a98:	2000a664 	.word	0x2000a664
 8007a9c:	44d19800 	.word	0x44d19800
 8007aa0:	08017544 	.word	0x08017544
 8007aa4:	33333333 	.word	0x33333333
 8007aa8:	3fd33333 	.word	0x3fd33333
 8007aac:	48b0      	ldr	r0, [pc, #704]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007aae:	f7fd fc57 	bl	8005360 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007ab2:	4bb0      	ldr	r3, [pc, #704]	; (8007d74 <MCU_UpdateStats+0x8dc>)
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab6:	e01e      	b.n	8007af6 <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8007ab8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007abc:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007d78 <MCU_UpdateStats+0x8e0>
 8007ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac8:	d515      	bpl.n	8007af6 <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007aca:	4bac      	ldr	r3, [pc, #688]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d10d      	bne.n	8007af2 <MCU_UpdateStats+0x65a>
 8007ad6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ad8:	f7f8 fd18 	bl	800050c <__aeabi_f2d>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	49a7      	ldr	r1, [pc, #668]	; (8007d80 <MCU_UpdateStats+0x8e8>)
 8007ae2:	9100      	str	r1, [sp, #0]
 8007ae4:	49a7      	ldr	r1, [pc, #668]	; (8007d84 <MCU_UpdateStats+0x8ec>)
 8007ae6:	48a2      	ldr	r0, [pc, #648]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007ae8:	f00c f8d0 	bl	8013c8c <siprintf>
 8007aec:	48a0      	ldr	r0, [pc, #640]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007aee:	f7fd fc37 	bl	8005360 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 8007af2:	4ba5      	ldr	r3, [pc, #660]	; (8007d88 <MCU_UpdateStats+0x8f0>)
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007af8:	f7f8 fd08 	bl	800050c <__aeabi_f2d>
 8007afc:	a398      	add	r3, pc, #608	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fe85 	bl	8000810 <__aeabi_ddiv>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	4b9e      	ldr	r3, [pc, #632]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007b14:	f7f8 fb9c 	bl	8000250 <__adddf3>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f7f9 f844 	bl	8000bac <__aeabi_d2f>
 8007b24:	4603      	mov	r3, r0
 8007b26:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8007b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b30:	ee17 3a90 	vmov	r3, s15
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	4b95      	ldr	r3, [pc, #596]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007b3a:	611a      	str	r2, [r3, #16]
 8007b3c:	e00e      	b.n	8007b5c <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 8007b3e:	4b94      	ldr	r3, [pc, #592]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8007b44:	4b93      	ldr	r3, [pc, #588]	; (8007d94 <MCU_UpdateStats+0x8fc>)
 8007b46:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8007b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b50:	ee17 3a90 	vmov	r3, s15
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b8d      	ldr	r3, [pc, #564]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007b5a:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007b5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007b60:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007d98 <MCU_UpdateStats+0x900>
 8007b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	dd19      	ble.n	8007ba2 <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007b6e:	4b83      	ldr	r3, [pc, #524]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d110      	bne.n	8007b9c <MCU_UpdateStats+0x704>
 8007b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b7c:	f7f8 fcc6 	bl	800050c <__aeabi_f2d>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	a178      	add	r1, pc, #480	; (adr r1, 8007d68 <MCU_UpdateStats+0x8d0>)
 8007b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b8e:	4983      	ldr	r1, [pc, #524]	; (8007d9c <MCU_UpdateStats+0x904>)
 8007b90:	4877      	ldr	r0, [pc, #476]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007b92:	f00c f87b 	bl	8013c8c <siprintf>
 8007b96:	4876      	ldr	r0, [pc, #472]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007b98:	f7fd fbe2 	bl	8005360 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007b9c:	4b75      	ldr	r3, [pc, #468]	; (8007d74 <MCU_UpdateStats+0x8dc>)
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba0:	e01e      	b.n	8007be0 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8007ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007ba6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8007d78 <MCU_UpdateStats+0x8e0>
 8007baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb2:	d515      	bpl.n	8007be0 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007bb4:	4b71      	ldr	r3, [pc, #452]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d10d      	bne.n	8007bdc <MCU_UpdateStats+0x744>
 8007bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bc2:	f7f8 fca3 	bl	800050c <__aeabi_f2d>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	496d      	ldr	r1, [pc, #436]	; (8007d80 <MCU_UpdateStats+0x8e8>)
 8007bcc:	9100      	str	r1, [sp, #0]
 8007bce:	4974      	ldr	r1, [pc, #464]	; (8007da0 <MCU_UpdateStats+0x908>)
 8007bd0:	4867      	ldr	r0, [pc, #412]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007bd2:	f00c f85b 	bl	8013c8c <siprintf>
 8007bd6:	4866      	ldr	r0, [pc, #408]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007bd8:	f7fd fbc2 	bl	8005360 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8007bdc:	4b6a      	ldr	r3, [pc, #424]	; (8007d88 <MCU_UpdateStats+0x8f0>)
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be2:	f7f8 fc93 	bl	800050c <__aeabi_f2d>
 8007be6:	a35e      	add	r3, pc, #376	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fe10 	bl	8000810 <__aeabi_ddiv>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	4b63      	ldr	r3, [pc, #396]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007bfe:	f7f8 fb27 	bl	8000250 <__adddf3>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7f8 ffaf 	bl	8000b6c <__aeabi_d2uiz>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4a5f      	ldr	r2, [pc, #380]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007c12:	6353      	str	r3, [r2, #52]	; 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c18:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007d98 <MCU_UpdateStats+0x900>
 8007c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c24:	dd19      	ble.n	8007c5a <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007c26:	4b55      	ldr	r3, [pc, #340]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d110      	bne.n	8007c54 <MCU_UpdateStats+0x7bc>
 8007c32:	6a38      	ldr	r0, [r7, #32]
 8007c34:	f7f8 fc6a 	bl	800050c <__aeabi_f2d>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	a14a      	add	r1, pc, #296	; (adr r1, 8007d68 <MCU_UpdateStats+0x8d0>)
 8007c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c42:	e9cd 0100 	strd	r0, r1, [sp]
 8007c46:	4957      	ldr	r1, [pc, #348]	; (8007da4 <MCU_UpdateStats+0x90c>)
 8007c48:	4849      	ldr	r0, [pc, #292]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c4a:	f00c f81f 	bl	8013c8c <siprintf>
 8007c4e:	4848      	ldr	r0, [pc, #288]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c50:	f7fd fb86 	bl	8005360 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007c54:	4b47      	ldr	r3, [pc, #284]	; (8007d74 <MCU_UpdateStats+0x8dc>)
 8007c56:	623b      	str	r3, [r7, #32]
 8007c58:	e01e      	b.n	8007c98 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8007c5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c5e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007d78 <MCU_UpdateStats+0x8e0>
 8007c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6a:	d515      	bpl.n	8007c98 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007c6c:	4b43      	ldr	r3, [pc, #268]	; (8007d7c <MCU_UpdateStats+0x8e4>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d10d      	bne.n	8007c94 <MCU_UpdateStats+0x7fc>
 8007c78:	6a38      	ldr	r0, [r7, #32]
 8007c7a:	f7f8 fc47 	bl	800050c <__aeabi_f2d>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	493f      	ldr	r1, [pc, #252]	; (8007d80 <MCU_UpdateStats+0x8e8>)
 8007c84:	9100      	str	r1, [sp, #0]
 8007c86:	4948      	ldr	r1, [pc, #288]	; (8007da8 <MCU_UpdateStats+0x910>)
 8007c88:	4839      	ldr	r0, [pc, #228]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c8a:	f00b ffff 	bl	8013c8c <siprintf>
 8007c8e:	4838      	ldr	r0, [pc, #224]	; (8007d70 <MCU_UpdateStats+0x8d8>)
 8007c90:	f7fd fb66 	bl	8005360 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8007c94:	4b3c      	ldr	r3, [pc, #240]	; (8007d88 <MCU_UpdateStats+0x8f0>)
 8007c96:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c9a:	f7f8 fc37 	bl	800050c <__aeabi_f2d>
 8007c9e:	a330      	add	r3, pc, #192	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f7f8 fdb4 	bl	8000810 <__aeabi_ddiv>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	4b35      	ldr	r3, [pc, #212]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007cb6:	f7f8 facb 	bl	8000250 <__adddf3>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f7f8 ff53 	bl	8000b6c <__aeabi_d2uiz>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4a31      	ldr	r2, [pc, #196]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007cca:	6353      	str	r3, [r2, #52]	; 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007ccc:	6a38      	ldr	r0, [r7, #32]
 8007cce:	f7f8 fc1d 	bl	800050c <__aeabi_f2d>
 8007cd2:	a323      	add	r3, pc, #140	; (adr r3, 8007d60 <MCU_UpdateStats+0x8c8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fd9a 	bl	8000810 <__aeabi_ddiv>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	4b28      	ldr	r3, [pc, #160]	; (8007d8c <MCU_UpdateStats+0x8f4>)
 8007cea:	f7f8 fab1 	bl	8000250 <__adddf3>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f7f8 ff39 	bl	8000b6c <__aeabi_d2uiz>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4a24      	ldr	r2, [pc, #144]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007cfe:	6393      	str	r3, [r2, #56]	; 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8007d00:	4b23      	ldr	r3, [pc, #140]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d02:	7ddb      	ldrb	r3, [r3, #23]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <MCU_UpdateStats+0x884>
 8007d08:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d0a:	7ddb      	ldrb	r3, [r3, #23]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	4b1e      	ldr	r3, [pc, #120]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d18:	879a      	strh	r2, [r3, #60]	; 0x3c
 8007d1a:	e002      	b.n	8007d22 <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 8007d1c:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	879a      	strh	r2, [r3, #60]	; 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8007d22:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d24:	7ddb      	ldrb	r3, [r3, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <MCU_UpdateStats+0x8a4>
 8007d2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8007d2e:	d805      	bhi.n	8007d3c <MCU_UpdateStats+0x8a4>
 8007d30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	4b16      	ldr	r3, [pc, #88]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d3a:	e003      	b.n	8007d44 <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 8007d3c:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8007d44:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d46:	7ddb      	ldrb	r3, [r3, #23]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02f      	beq.n	8007dac <MCU_UpdateStats+0x914>
 8007d4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8007d50:	d82c      	bhi.n	8007dac <MCU_UpdateStats+0x914>
 8007d52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <MCU_UpdateStats+0x8f8>)
 8007d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d5c:	e02a      	b.n	8007db4 <MCU_UpdateStats+0x91c>
 8007d5e:	bf00      	nop
 8007d60:	9999999a 	.word	0x9999999a
 8007d64:	3fa99999 	.word	0x3fa99999
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	409a3300 	.word	0x409a3300
 8007d70:	20000b64 	.word	0x20000b64
 8007d74:	44d19800 	.word	0x44d19800
 8007d78:	c4c80000 	.word	0xc4c80000
 8007d7c:	2000000c 	.word	0x2000000c
 8007d80:	fffff9c0 	.word	0xfffff9c0
 8007d84:	08017588 	.word	0x08017588
 8007d88:	c4c80000 	.word	0xc4c80000
 8007d8c:	40df4000 	.word	0x40df4000
 8007d90:	2000a664 	.word	0x2000a664
 8007d94:	46fa0000 	.word	0x46fa0000
 8007d98:	44d19800 	.word	0x44d19800
 8007d9c:	080175cc 	.word	0x080175cc
 8007da0:	08017614 	.word	0x08017614
 8007da4:	0801765c 	.word	0x0801765c
 8007da8:	080176a8 	.word	0x080176a8
  else pack.soh = 0;
 8007dac:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8007db4:	4b2d      	ldr	r3, [pc, #180]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007db6:	7ddb      	ldrb	r3, [r3, #23]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <MCU_UpdateStats+0x938>
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dbe:	7ddb      	ldrb	r3, [r3, #23]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dcc:	861a      	strh	r2, [r3, #48]	; 0x30
 8007dce:	e002      	b.n	8007dd6 <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 8007dd0:	4b26      	ldr	r3, [pc, #152]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	861a      	strh	r2, [r3, #48]	; 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8007dd6:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007dda:	8513      	strh	r3, [r2, #40]	; 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8007ddc:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007dde:	7e7b      	ldrb	r3, [r7, #25]
 8007de0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
  if (lowestCellVolt < 65535){
 8007de4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 8007dee:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007df0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007df2:	8593      	strh	r3, [r2, #44]	; 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8007df4:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007df6:	7ebb      	ldrb	r3, [r7, #26]
 8007df8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8007dfc:	e006      	b.n	8007e0c <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	859a      	strh	r2, [r3, #44]	; 0x2c
    pack.modCellLoVolt = 0;
 8007e04:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8007e0c:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e0e:	7ddb      	ldrb	r3, [r3, #23]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <MCU_UpdateStats+0x990>
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e16:	7ddb      	ldrb	r3, [r3, #23]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e24:	84da      	strh	r2, [r3, #38]	; 0x26
 8007e26:	e002      	b.n	8007e2e <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8007e28:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	84da      	strh	r2, [r3, #38]	; 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8007e2e:	4a0f      	ldr	r2, [pc, #60]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e32:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8007e3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e4a:	8453      	strh	r3, [r2, #34]	; 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8007e4c:	4a07      	ldr	r2, [pc, #28]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e4e:	7e3b      	ldrb	r3, [r7, #24]
 8007e50:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8007e54:	e006      	b.n	8007e64 <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	845a      	strh	r2, [r3, #34]	; 0x22
    pack.modCellLoTemp = 0;
 8007e5c:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <MCU_UpdateStats+0x9d4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8007e64:	bf00      	nop
 8007e66:	3748      	adds	r7, #72	; 0x48
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6c:	2000a664 	.word	0x2000a664

08007e70 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b08b      	sub	sp, #44	; 0x2c
 8007e74:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8007e76:	4a64      	ldr	r2, [pc, #400]	; (8008008 <MCU_ReceiveMessages+0x198>)
 8007e78:	2101      	movs	r1, #1
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	f7fa fb62 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8007e80:	e0b6      	b.n	8007ff0 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4b61      	ldr	r3, [pc, #388]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007e88:	4a61      	ldr	r2, [pc, #388]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	f7fa f9bd 	bl	800220c <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8007e92:	4b60      	ldr	r3, [pc, #384]	; (8008014 <MCU_ReceiveMessages+0x1a4>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 030a 	and.w	r3, r3, #10
 8007e9a:	2b0a      	cmp	r3, #10
 8007e9c:	d133      	bne.n	8007f06 <MCU_ReceiveMessages+0x96>
 8007e9e:	4b5c      	ldr	r3, [pc, #368]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	469c      	mov	ip, r3
 8007eaa:	4b59      	ldr	r3, [pc, #356]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007eb2:	469e      	mov	lr, r3
 8007eb4:	4b55      	ldr	r3, [pc, #340]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b54      	ldr	r3, [pc, #336]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4b52      	ldr	r3, [pc, #328]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ec2:	789b      	ldrb	r3, [r3, #2]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4b51      	ldr	r3, [pc, #324]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ec8:	78db      	ldrb	r3, [r3, #3]
 8007eca:	461c      	mov	r4, r3
 8007ecc:	4b4f      	ldr	r3, [pc, #316]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ece:	791b      	ldrb	r3, [r3, #4]
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	4b4e      	ldr	r3, [pc, #312]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ed4:	795b      	ldrb	r3, [r3, #5]
 8007ed6:	461e      	mov	r6, r3
 8007ed8:	4b4c      	ldr	r3, [pc, #304]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007eda:	799b      	ldrb	r3, [r3, #6]
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	4b4b      	ldr	r3, [pc, #300]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007ee0:	79db      	ldrb	r3, [r3, #7]
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	9306      	str	r3, [sp, #24]
 8007ee8:	9605      	str	r6, [sp, #20]
 8007eea:	9504      	str	r5, [sp, #16]
 8007eec:	9403      	str	r4, [sp, #12]
 8007eee:	9002      	str	r0, [sp, #8]
 8007ef0:	9101      	str	r1, [sp, #4]
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	4673      	mov	r3, lr
 8007ef6:	4662      	mov	r2, ip
 8007ef8:	4947      	ldr	r1, [pc, #284]	; (8008018 <MCU_ReceiveMessages+0x1a8>)
 8007efa:	4848      	ldr	r0, [pc, #288]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007efc:	f00b fec6 	bl	8013c8c <siprintf>
 8007f00:	4846      	ldr	r0, [pc, #280]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007f02:	f7fd fa2d 	bl	8005360 <serialOut>

    switch (rxObj.bF.id.SID) {
 8007f06:	4b42      	ldr	r3, [pc, #264]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8007f14:	2b07      	cmp	r3, #7
 8007f16:	d82b      	bhi.n	8007f70 <MCU_ReceiveMessages+0x100>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <MCU_ReceiveMessages+0xb0>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f41 	.word	0x08007f41
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f53 	.word	0x08007f53
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	08007f5f 	.word	0x08007f5f
 8007f34:	08007f47 	.word	0x08007f47
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f6b 	.word	0x08007f6b
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8007f40:	f000 f8ce 	bl	80080e0 <MCU_RegisterModule>
        break;
 8007f44:	e04f      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8007f46:	f001 fe91 	bl	8009c6c <MCU_ProcessCellDetail>
        break;
 8007f4a:	e04c      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8007f4c:	f000 fc3c 	bl	80087c8 <MCU_ProcessModuleHardware>
        break;
 8007f50:	e049      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8007f52:	f001 f80d 	bl	8008f70 <MCU_ProcessModuleStatus1>
        break;
 8007f56:	e046      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8007f58:	f001 fa92 	bl	8009480 <MCU_ProcessModuleStatus2>
        break;
 8007f5c:	e043      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8007f5e:	f001 fc03 	bl	8009768 <MCU_ProcessModuleStatus3>
        break;
 8007f62:	e040      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8007f64:	f000 fb1e 	bl	80085a4 <MCU_ProcessModuleTime>
        break;
 8007f68:	e03d      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8007f6a:	f001 fd39 	bl	80099e0 <MCU_ProcessCellCommStatus1>
        break;
 8007f6e:	e03a      	b.n	8007fe6 <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <MCU_ReceiveMessages+0x1a4>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d133      	bne.n	8007fe4 <MCU_ReceiveMessages+0x174>
 8007f7c:	4b24      	ldr	r3, [pc, #144]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	469c      	mov	ip, r3
 8007f88:	4b21      	ldr	r3, [pc, #132]	; (8008010 <MCU_ReceiveMessages+0x1a0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007f90:	469e      	mov	lr, r3
 8007f92:	4b1e      	ldr	r3, [pc, #120]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	4b1c      	ldr	r3, [pc, #112]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4b1b      	ldr	r3, [pc, #108]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fa0:	789b      	ldrb	r3, [r3, #2]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fa6:	78db      	ldrb	r3, [r3, #3]
 8007fa8:	461c      	mov	r4, r3
 8007faa:	4b18      	ldr	r3, [pc, #96]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	461d      	mov	r5, r3
 8007fb0:	4b16      	ldr	r3, [pc, #88]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fb2:	795b      	ldrb	r3, [r3, #5]
 8007fb4:	461e      	mov	r6, r3
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fb8:	799b      	ldrb	r3, [r3, #6]
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	4b13      	ldr	r3, [pc, #76]	; (800800c <MCU_ReceiveMessages+0x19c>)
 8007fbe:	79db      	ldrb	r3, [r3, #7]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	9605      	str	r6, [sp, #20]
 8007fc8:	9504      	str	r5, [sp, #16]
 8007fca:	9403      	str	r4, [sp, #12]
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	9101      	str	r1, [sp, #4]
 8007fd0:	9200      	str	r2, [sp, #0]
 8007fd2:	4673      	mov	r3, lr
 8007fd4:	4662      	mov	r2, ip
 8007fd6:	4912      	ldr	r1, [pc, #72]	; (8008020 <MCU_ReceiveMessages+0x1b0>)
 8007fd8:	4810      	ldr	r0, [pc, #64]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007fda:	f00b fe57 	bl	8013c8c <siprintf>
 8007fde:	480f      	ldr	r0, [pc, #60]	; (800801c <MCU_ReceiveMessages+0x1ac>)
 8007fe0:	f7fd f9be 	bl	8005360 <serialOut>
        break;
 8007fe4:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8007fe6:	4a08      	ldr	r2, [pc, #32]	; (8008008 <MCU_ReceiveMessages+0x198>)
 8007fe8:	2101      	movs	r1, #1
 8007fea:	2001      	movs	r0, #1
 8007fec:	f7fa faaa 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <MCU_ReceiveMessages+0x198>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f47f af42 	bne.w	8007e82 <MCU_ReceiveMessages+0x12>
  }
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	20000d90 	.word	0x20000d90
 800800c:	20000da0 	.word	0x20000da0
 8008010:	20000d94 	.word	0x20000d94
 8008014:	2000000c 	.word	0x2000000c
 8008018:	080176f0 	.word	0x080176f0
 800801c:	20000b64 	.word	0x20000b64
 8008020:	08017754 	.word	0x08017754

08008024 <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af02      	add	r7, sp, #8
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800802e:	2332      	movs	r3, #50	; 0x32
 8008030:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <MCU_TransmitMessageQueue+0x98>)
 8008036:	2102      	movs	r1, #2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fa fa50 	bl	80024de <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d11a      	bne.n	800807a <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008044:	bf00      	nop
        Nop();
 8008046:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008048:	79f8      	ldrb	r0, [r7, #7]
 800804a:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <MCU_TransmitMessageQueue+0x9c>)
 800804c:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <MCU_TransmitMessageQueue+0xa0>)
 800804e:	491e      	ldr	r1, [pc, #120]	; (80080c8 <MCU_TransmitMessageQueue+0xa4>)
 8008050:	f7fa faff 	bl	8002652 <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <MCU_TransmitMessageQueue+0xa8>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b03      	cmp	r3, #3
 800805e:	d106      	bne.n	800806e <MCU_TransmitMessageQueue+0x4a>
 8008060:	491b      	ldr	r1, [pc, #108]	; (80080d0 <MCU_TransmitMessageQueue+0xac>)
 8008062:	481c      	ldr	r0, [pc, #112]	; (80080d4 <MCU_TransmitMessageQueue+0xb0>)
 8008064:	f00b fe12 	bl	8013c8c <siprintf>
 8008068:	481a      	ldr	r0, [pc, #104]	; (80080d4 <MCU_TransmitMessageQueue+0xb0>)
 800806a:	f7fd f979 	bl	8005360 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	2102      	movs	r1, #2
 8008072:	4618      	mov	r0, r3
 8008074:	f7f9 ff76 	bl	8001f64 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8008078:	e01c      	b.n	80080b4 <MCU_TransmitMessageQueue+0x90>
      }
      attempts--;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3b01      	subs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008080:	4b0e      	ldr	r3, [pc, #56]	; (80080bc <MCU_TransmitMessageQueue+0x98>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0d2      	beq.n	8008032 <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <MCU_TransmitMessageQueue+0xb4>)
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4618      	mov	r0, r3
 8008098:	f7fb fae8 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	79f8      	ldrb	r0, [r7, #7]
 80080a4:	2201      	movs	r2, #1
 80080a6:	9201      	str	r2, [sp, #4]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <MCU_TransmitMessageQueue+0xb8>)
 80080ac:	4a0a      	ldr	r2, [pc, #40]	; (80080d8 <MCU_TransmitMessageQueue+0xb4>)
 80080ae:	2102      	movs	r1, #2
 80080b0:	f7f9 fe66 	bl	8001d80 <DRV_CANFDSPI_TransmitChannelLoad>
}
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000d34 	.word	0x20000d34
 80080c0:	20000de3 	.word	0x20000de3
 80080c4:	20000de2 	.word	0x20000de2
 80080c8:	20000de1 	.word	0x20000de1
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	080177c0 	.word	0x080177c0
 80080d4:	20000b64 	.word	0x20000b64
 80080d8:	20000d38 	.word	0x20000d38
 80080dc:	20000d44 	.word	0x20000d44

080080e0 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b08b      	sub	sp, #44	; 0x2c
 80080e4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 80080ea:	4a12      	ldr	r2, [pc, #72]	; (8008134 <MCU_RegisterModule+0x54>)
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080f4:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <MCU_RegisterModule+0x58>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d010      	beq.n	8008126 <MCU_RegisterModule+0x46>
 8008104:	89bb      	ldrh	r3, [r7, #12]
 8008106:	4619      	mov	r1, r3
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	4618      	mov	r0, r3
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	9201      	str	r2, [sp, #4]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	4603      	mov	r3, r0
 8008116:	460a      	mov	r2, r1
 8008118:	4908      	ldr	r1, [pc, #32]	; (800813c <MCU_RegisterModule+0x5c>)
 800811a:	4809      	ldr	r0, [pc, #36]	; (8008140 <MCU_RegisterModule+0x60>)
 800811c:	f00b fdb6 	bl	8013c8c <siprintf>
 8008120:	4807      	ldr	r0, [pc, #28]	; (8008140 <MCU_RegisterModule+0x60>)
 8008122:	f7fd f91d 	bl	8005360 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8008126:	4b07      	ldr	r3, [pc, #28]	; (8008144 <MCU_RegisterModule+0x64>)
 8008128:	7d1b      	ldrb	r3, [r3, #20]
 800812a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800812c:	2300      	movs	r3, #0
 800812e:	75bb      	strb	r3, [r7, #22]
 8008130:	e06f      	b.n	8008212 <MCU_RegisterModule+0x132>
 8008132:	bf00      	nop
 8008134:	20000da0 	.word	0x20000da0
 8008138:	2000000c 	.word	0x2000000c
 800813c:	080177f0 	.word	0x080177f0
 8008140:	20000b64 	.word	0x20000b64
 8008144:	2000a664 	.word	0x2000a664
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8008148:	7bba      	ldrb	r2, [r7, #14]
 800814a:	7dbb      	ldrb	r3, [r7, #22]
 800814c:	49b4      	ldr	r1, [pc, #720]	; (8008420 <MCU_RegisterModule+0x340>)
 800814e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008152:	fb00 f303 	mul.w	r3, r0, r3
 8008156:	440b      	add	r3, r1
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d156      	bne.n	800820c <MCU_RegisterModule+0x12c>
 800815e:	7bfa      	ldrb	r2, [r7, #15]
 8008160:	7dbb      	ldrb	r3, [r7, #22]
 8008162:	49af      	ldr	r1, [pc, #700]	; (8008420 <MCU_RegisterModule+0x340>)
 8008164:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008168:	fb00 f303 	mul.w	r3, r0, r3
 800816c:	440b      	add	r3, r1
 800816e:	3301      	adds	r3, #1
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d14a      	bne.n	800820c <MCU_RegisterModule+0x12c>
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	7dbb      	ldrb	r3, [r7, #22]
 800817a:	49a9      	ldr	r1, [pc, #676]	; (8008420 <MCU_RegisterModule+0x340>)
 800817c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008180:	fb00 f303 	mul.w	r3, r0, r3
 8008184:	440b      	add	r3, r1
 8008186:	3304      	adds	r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d13e      	bne.n	800820c <MCU_RegisterModule+0x12c>
      moduleIndex = index; // module is already registered, save the index
 800818e:	7dbb      	ldrb	r3, [r7, #22]
 8008190:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	4aa2      	ldr	r2, [pc, #648]	; (8008420 <MCU_RegisterModule+0x340>)
 8008196:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800819a:	fb01 f303 	mul.w	r3, r1, r3
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80081a4:	7893      	ldrb	r3, [r2, #2]
 80081a6:	f36f 0300 	bfc	r3, #0, #1
 80081aa:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80081ac:	4b9d      	ldr	r3, [pc, #628]	; (8008424 <MCU_RegisterModule+0x344>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081b4:	499a      	ldr	r1, [pc, #616]	; (8008420 <MCU_RegisterModule+0x340>)
 80081b6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80081ba:	fb00 f303 	mul.w	r3, r0, r3
 80081be:	440b      	add	r3, r1
 80081c0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80081c4:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	4a97      	ldr	r2, [pc, #604]	; (8008428 <MCU_RegisterModule+0x348>)
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	4994      	ldr	r1, [pc, #592]	; (8008420 <MCU_RegisterModule+0x340>)
 80081ce:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80081d2:	fb00 f303 	mul.w	r3, r0, r3
 80081d6:	440b      	add	r3, r1
 80081d8:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80081dc:	601a      	str	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 80081de:	4b93      	ldr	r3, [pc, #588]	; (800842c <MCU_RegisterModule+0x34c>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d110      	bne.n	800820c <MCU_RegisterModule+0x12c>
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	4a8c      	ldr	r2, [pc, #560]	; (8008420 <MCU_RegisterModule+0x340>)
 80081ee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	3308      	adds	r3, #8
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	498c      	ldr	r1, [pc, #560]	; (8008430 <MCU_RegisterModule+0x350>)
 8008200:	488c      	ldr	r0, [pc, #560]	; (8008434 <MCU_RegisterModule+0x354>)
 8008202:	f00b fd43 	bl	8013c8c <siprintf>
 8008206:	488b      	ldr	r0, [pc, #556]	; (8008434 <MCU_RegisterModule+0x354>)
 8008208:	f7fd f8aa 	bl	8005360 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	3301      	adds	r3, #1
 8008210:	75bb      	strb	r3, [r7, #22]
 8008212:	4b89      	ldr	r3, [pc, #548]	; (8008438 <MCU_RegisterModule+0x358>)
 8008214:	7d1b      	ldrb	r3, [r3, #20]
 8008216:	7dba      	ldrb	r2, [r7, #22]
 8008218:	429a      	cmp	r2, r3
 800821a:	d395      	bcc.n	8008148 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 800821c:	4b86      	ldr	r3, [pc, #536]	; (8008438 <MCU_RegisterModule+0x358>)
 800821e:	7d1b      	ldrb	r3, [r3, #20]
 8008220:	7dfa      	ldrb	r2, [r7, #23]
 8008222:	429a      	cmp	r2, r3
 8008224:	d15f      	bne.n	80082e6 <MCU_RegisterModule+0x206>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	89b8      	ldrh	r0, [r7, #12]
 800822a:	4a7d      	ldr	r2, [pc, #500]	; (8008420 <MCU_RegisterModule+0x340>)
 800822c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	4413      	add	r3, r2
 8008236:	330a      	adds	r3, #10
 8008238:	4602      	mov	r2, r0
 800823a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	7bf8      	ldrb	r0, [r7, #15]
 8008240:	4a77      	ldr	r2, [pc, #476]	; (8008420 <MCU_RegisterModule+0x340>)
 8008242:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008246:	fb01 f303 	mul.w	r3, r1, r3
 800824a:	4413      	add	r3, r2
 800824c:	3301      	adds	r3, #1
 800824e:	4602      	mov	r2, r0
 8008250:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	7bb8      	ldrb	r0, [r7, #14]
 8008256:	4a72      	ldr	r2, [pc, #456]	; (8008420 <MCU_RegisterModule+0x340>)
 8008258:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	4602      	mov	r2, r0
 8008264:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	496d      	ldr	r1, [pc, #436]	; (8008420 <MCU_RegisterModule+0x340>)
 800826c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008270:	fb00 f303 	mul.w	r3, r0, r3
 8008274:	440b      	add	r3, r1
 8008276:	3304      	adds	r3, #4
 8008278:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800827a:	4b6a      	ldr	r3, [pc, #424]	; (8008424 <MCU_RegisterModule+0x344>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008282:	4967      	ldr	r1, [pc, #412]	; (8008420 <MCU_RegisterModule+0x340>)
 8008284:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008288:	fb00 f303 	mul.w	r3, r0, r3
 800828c:	440b      	add	r3, r1
 800828e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008292:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	4a64      	ldr	r2, [pc, #400]	; (8008428 <MCU_RegisterModule+0x348>)
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	4961      	ldr	r1, [pc, #388]	; (8008420 <MCU_RegisterModule+0x340>)
 800829c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80082a0:	fb00 f303 	mul.w	r3, r0, r3
 80082a4:	440b      	add	r3, r1
 80082a6:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80082aa:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	4a5c      	ldr	r2, [pc, #368]	; (8008420 <MCU_RegisterModule+0x340>)
 80082b0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80082b4:	fb01 f303 	mul.w	r3, r1, r3
 80082b8:	4413      	add	r3, r2
 80082ba:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 80082be:	2201      	movs	r2, #1
 80082c0:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 80082c2:	4b5d      	ldr	r3, [pc, #372]	; (8008438 <MCU_RegisterModule+0x358>)
 80082c4:	7d1b      	ldrb	r3, [r3, #20]
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b5b      	ldr	r3, [pc, #364]	; (8008438 <MCU_RegisterModule+0x358>)
 80082cc:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	4a59      	ldr	r2, [pc, #356]	; (8008438 <MCU_RegisterModule+0x358>)
 80082d2:	7d10      	ldrb	r0, [r2, #20]
 80082d4:	4a52      	ldr	r2, [pc, #328]	; (8008420 <MCU_RegisterModule+0x340>)
 80082d6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	4413      	add	r3, r2
 80082e0:	3308      	adds	r3, #8
 80082e2:	4602      	mov	r2, r0
 80082e4:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	4a4d      	ldr	r2, [pc, #308]	; (8008420 <MCU_RegisterModule+0x340>)
 80082ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	4413      	add	r3, r2
 80082f4:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 80082f8:	2201      	movs	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	4a48      	ldr	r2, [pc, #288]	; (8008420 <MCU_RegisterModule+0x340>)
 8008300:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008304:	fb01 f303 	mul.w	r3, r1, r3
 8008308:	4413      	add	r3, r2
 800830a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800830e:	2201      	movs	r2, #1
 8008310:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	4a42      	ldr	r2, [pc, #264]	; (8008420 <MCU_RegisterModule+0x340>)
 8008316:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	4413      	add	r3, r2
 8008320:	3308      	adds	r3, #8
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 8008326:	4b44      	ldr	r3, [pc, #272]	; (8008438 <MCU_RegisterModule+0x358>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	4a3c      	ldr	r2, [pc, #240]	; (8008420 <MCU_RegisterModule+0x340>)
 8008330:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	4413      	add	r3, r2
 800833a:	3301      	adds	r3, #1
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	4a37      	ldr	r2, [pc, #220]	; (8008420 <MCU_RegisterModule+0x340>)
 8008344:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	4a32      	ldr	r2, [pc, #200]	; (8008420 <MCU_RegisterModule+0x340>)
 8008356:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8008366:	4b35      	ldr	r3, [pc, #212]	; (800843c <MCU_RegisterModule+0x35c>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800836c:	4b33      	ldr	r3, [pc, #204]	; (800843c <MCU_RegisterModule+0x35c>)
 800836e:	2200      	movs	r2, #0
 8008370:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008372:	4b32      	ldr	r3, [pc, #200]	; (800843c <MCU_RegisterModule+0x35c>)
 8008374:	2200      	movs	r2, #0
 8008376:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 8008378:	4b31      	ldr	r3, [pc, #196]	; (8008440 <MCU_RegisterModule+0x360>)
 800837a:	461a      	mov	r2, r3
 800837c:	1d3b      	adds	r3, r7, #4
 800837e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008382:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 8008386:	4a2d      	ldr	r2, [pc, #180]	; (800843c <MCU_RegisterModule+0x35c>)
 8008388:	8813      	ldrh	r3, [r2, #0]
 800838a:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 800838e:	f361 030a 	bfi	r3, r1, #0, #11
 8008392:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	4a22      	ldr	r2, [pc, #136]	; (8008420 <MCU_RegisterModule+0x340>)
 8008398:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	4413      	add	r3, r2
 80083a2:	3308      	adds	r3, #8
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80083ac:	4923      	ldr	r1, [pc, #140]	; (800843c <MCU_RegisterModule+0x35c>)
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	f362 23dc 	bfi	r3, r2, #11, #18
 80083b4:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80083b6:	4a21      	ldr	r2, [pc, #132]	; (800843c <MCU_RegisterModule+0x35c>)
 80083b8:	7913      	ldrb	r3, [r2, #4]
 80083ba:	f36f 1386 	bfc	r3, #6, #1
 80083be:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80083c0:	4a1e      	ldr	r2, [pc, #120]	; (800843c <MCU_RegisterModule+0x35c>)
 80083c2:	7913      	ldrb	r3, [r2, #4]
 80083c4:	2108      	movs	r1, #8
 80083c6:	f361 0303 	bfi	r3, r1, #0, #4
 80083ca:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80083cc:	4a1b      	ldr	r2, [pc, #108]	; (800843c <MCU_RegisterModule+0x35c>)
 80083ce:	7913      	ldrb	r3, [r2, #4]
 80083d0:	f36f 13c7 	bfc	r3, #7, #1
 80083d4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80083d6:	4a19      	ldr	r2, [pc, #100]	; (800843c <MCU_RegisterModule+0x35c>)
 80083d8:	7913      	ldrb	r3, [r2, #4]
 80083da:	f043 0310 	orr.w	r3, r3, #16
 80083de:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 80083e0:	4b12      	ldr	r3, [pc, #72]	; (800842c <MCU_RegisterModule+0x34c>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d012      	beq.n	8008412 <MCU_RegisterModule+0x332>
 80083ec:	793b      	ldrb	r3, [r7, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	797b      	ldrb	r3, [r7, #5]
 80083f2:	461c      	mov	r4, r3
 80083f4:	79bb      	ldrb	r3, [r7, #6]
 80083f6:	79fa      	ldrb	r2, [r7, #7]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	9102      	str	r1, [sp, #8]
 80083fc:	9201      	str	r2, [sp, #4]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4623      	mov	r3, r4
 8008402:	4602      	mov	r2, r0
 8008404:	490f      	ldr	r1, [pc, #60]	; (8008444 <MCU_RegisterModule+0x364>)
 8008406:	480b      	ldr	r0, [pc, #44]	; (8008434 <MCU_RegisterModule+0x354>)
 8008408:	f00b fc40 	bl	8013c8c <siprintf>
 800840c:	4809      	ldr	r0, [pc, #36]	; (8008434 <MCU_RegisterModule+0x354>)
 800840e:	f7fc ffa7 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008412:	2001      	movs	r0, #1
 8008414:	f7ff fe06 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd90      	pop	{r4, r7, pc}
 8008420:	20000de4 	.word	0x20000de4
 8008424:	200005d8 	.word	0x200005d8
 8008428:	20000d20 	.word	0x20000d20
 800842c:	2000000c 	.word	0x2000000c
 8008430:	08017830 	.word	0x08017830
 8008434:	20000b64 	.word	0x20000b64
 8008438:	2000a664 	.word	0x2000a664
 800843c:	20000d38 	.word	0x20000d38
 8008440:	20000d44 	.word	0x20000d44
 8008444:	08017864 	.word	0x08017864

08008448 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 800844e:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <MCU_DeRegisterAllModules+0x90>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8008454:	4b21      	ldr	r3, [pc, #132]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800845a:	4b20      	ldr	r3, [pc, #128]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800845c:	2200      	movs	r2, #0
 800845e:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008460:	4b1e      	ldr	r3, [pc, #120]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008462:	2200      	movs	r2, #0
 8008464:	609a      	str	r2, [r3, #8]
 8008466:	793a      	ldrb	r2, [r7, #4]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <MCU_DeRegisterAllModules+0x98>)
 800846a:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 800846c:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800846e:	8813      	ldrh	r3, [r2, #0]
 8008470:	f240 511e 	movw	r1, #1310	; 0x51e
 8008474:	f361 030a 	bfi	r3, r1, #0, #11
 8008478:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 800847a:	4a18      	ldr	r2, [pc, #96]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800847c:	6813      	ldr	r3, [r2, #0]
 800847e:	f36f 23dc 	bfc	r3, #11, #18
 8008482:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008484:	4a15      	ldr	r2, [pc, #84]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008486:	7913      	ldrb	r3, [r2, #4]
 8008488:	f36f 1386 	bfc	r3, #6, #1
 800848c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 800848e:	4a13      	ldr	r2, [pc, #76]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 8008490:	7913      	ldrb	r3, [r2, #4]
 8008492:	2101      	movs	r1, #1
 8008494:	f361 0303 	bfi	r3, r1, #0, #4
 8008498:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800849a:	4a10      	ldr	r2, [pc, #64]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 800849c:	7913      	ldrb	r3, [r2, #4]
 800849e:	f36f 13c7 	bfc	r3, #7, #1
 80084a2:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80084a4:	4a0d      	ldr	r2, [pc, #52]	; (80084dc <MCU_DeRegisterAllModules+0x94>)
 80084a6:	7913      	ldrb	r3, [r2, #4]
 80084a8:	f043 0310 	orr.w	r3, r3, #16
 80084ac:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <MCU_DeRegisterAllModules+0x9c>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d006      	beq.n	80084c8 <MCU_DeRegisterAllModules+0x80>
 80084ba:	490b      	ldr	r1, [pc, #44]	; (80084e8 <MCU_DeRegisterAllModules+0xa0>)
 80084bc:	480b      	ldr	r0, [pc, #44]	; (80084ec <MCU_DeRegisterAllModules+0xa4>)
 80084be:	f00b fbe5 	bl	8013c8c <siprintf>
 80084c2:	480a      	ldr	r0, [pc, #40]	; (80084ec <MCU_DeRegisterAllModules+0xa4>)
 80084c4:	f7fc ff4c 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7ff fdab 	bl	8008024 <MCU_TransmitMessageQueue>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000a664 	.word	0x2000a664
 80084dc:	20000d38 	.word	0x20000d38
 80084e0:	20000d44 	.word	0x20000d44
 80084e4:	2000000c 	.word	0x2000000c
 80084e8:	080178b0 	.word	0x080178b0
 80084ec:	20000b64 	.word	0x20000b64

080084f0 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 80084f6:	1d3b      	adds	r3, r7, #4
 80084f8:	2201      	movs	r2, #1
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00a fbb3 	bl	8012c68 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8008502:	4b22      	ldr	r3, [pc, #136]	; (800858c <MCU_IsolateAllModules+0x9c>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8008508:	4b21      	ldr	r3, [pc, #132]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800850e:	4b20      	ldr	r3, [pc, #128]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008514:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
 800851a:	793a      	ldrb	r2, [r7, #4]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 800851c:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <MCU_IsolateAllModules+0xa4>)
 800851e:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8008520:	4a1b      	ldr	r2, [pc, #108]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008522:	8813      	ldrh	r3, [r2, #0]
 8008524:	f240 511f 	movw	r1, #1311	; 0x51f
 8008528:	f361 030a 	bfi	r3, r1, #0, #11
 800852c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800852e:	4a18      	ldr	r2, [pc, #96]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008530:	6813      	ldr	r3, [r2, #0]
 8008532:	f36f 23dc 	bfc	r3, #11, #18
 8008536:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008538:	4a15      	ldr	r2, [pc, #84]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 800853a:	7913      	ldrb	r3, [r2, #4]
 800853c:	f36f 1386 	bfc	r3, #6, #1
 8008540:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8008542:	4a13      	ldr	r2, [pc, #76]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008544:	7913      	ldrb	r3, [r2, #4]
 8008546:	2101      	movs	r1, #1
 8008548:	f361 0303 	bfi	r3, r1, #0, #4
 800854c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800854e:	4a10      	ldr	r2, [pc, #64]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 8008550:	7913      	ldrb	r3, [r2, #4]
 8008552:	f36f 13c7 	bfc	r3, #7, #1
 8008556:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008558:	4a0d      	ldr	r2, [pc, #52]	; (8008590 <MCU_IsolateAllModules+0xa0>)
 800855a:	7913      	ldrb	r3, [r2, #4]
 800855c:	f043 0310 	orr.w	r3, r3, #16
 8008560:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <MCU_IsolateAllModules+0xa8>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <MCU_IsolateAllModules+0x8c>
 800856e:	490b      	ldr	r1, [pc, #44]	; (800859c <MCU_IsolateAllModules+0xac>)
 8008570:	480b      	ldr	r0, [pc, #44]	; (80085a0 <MCU_IsolateAllModules+0xb0>)
 8008572:	f00b fb8b 	bl	8013c8c <siprintf>
 8008576:	480a      	ldr	r0, [pc, #40]	; (80085a0 <MCU_IsolateAllModules+0xb0>)
 8008578:	f7fc fef2 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 800857c:	2001      	movs	r0, #1
 800857e:	f7ff fd51 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	2000a664 	.word	0x2000a664
 8008590:	20000d38 	.word	0x20000d38
 8008594:	20000d44 	.word	0x20000d44
 8008598:	2000000c 	.word	0x2000000c
 800859c:	080178d8 	.word	0x080178d8
 80085a0:	20000b64 	.word	0x20000b64

080085a4 <MCU_ProcessModuleTime>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 80085a4:	b5b0      	push	{r4, r5, r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 80085aa:	4b34      	ldr	r3, [pc, #208]	; (800867c <MCU_ProcessModuleTime+0xd8>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <MCU_ProcessModuleTime+0x20>
 80085b6:	4932      	ldr	r1, [pc, #200]	; (8008680 <MCU_ProcessModuleTime+0xdc>)
 80085b8:	4832      	ldr	r0, [pc, #200]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 80085ba:	f00b fb67 	bl	8013c8c <siprintf>
 80085be:	4831      	ldr	r0, [pc, #196]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 80085c0:	f7fc fece 	bl	8005360 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80085c4:	f7fc ffb4 	bl	8005530 <readRTC>
 80085c8:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 80085cc:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <MCU_ProcessModuleTime+0xe4>)
 80085ce:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80085d8:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 80085da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085de:	4614      	mov	r4, r2
 80085e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80085e4:	4623      	mov	r3, r4
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	462a      	mov	r2, r5
 80085ec:	f362 031e 	bfi	r3, r2, #0, #31
 80085f0:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80085f8:	4b24      	ldr	r3, [pc, #144]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80085fe:	4b23      	ldr	r3, [pc, #140]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008600:	2200      	movs	r2, #0
 8008602:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 8008604:	463b      	mov	r3, r7
 8008606:	2208      	movs	r2, #8
 8008608:	4619      	mov	r1, r3
 800860a:	4821      	ldr	r0, [pc, #132]	; (8008690 <MCU_ProcessModuleTime+0xec>)
 800860c:	f00a fb1e 	bl	8012c4c <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8008610:	4a1e      	ldr	r2, [pc, #120]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008612:	8813      	ldrh	r3, [r2, #0]
 8008614:	f240 5116 	movw	r1, #1302	; 0x516
 8008618:	f361 030a 	bfi	r3, r1, #0, #11
 800861c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800861e:	4a1b      	ldr	r2, [pc, #108]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008620:	6813      	ldr	r3, [r2, #0]
 8008622:	f36f 23dc 	bfc	r3, #11, #18
 8008626:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008628:	4a18      	ldr	r2, [pc, #96]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 800862a:	7913      	ldrb	r3, [r2, #4]
 800862c:	f36f 1386 	bfc	r3, #6, #1
 8008630:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8008632:	4a16      	ldr	r2, [pc, #88]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008634:	7913      	ldrb	r3, [r2, #4]
 8008636:	2108      	movs	r1, #8
 8008638:	f361 0303 	bfi	r3, r1, #0, #4
 800863c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800863e:	4a13      	ldr	r2, [pc, #76]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 8008640:	7913      	ldrb	r3, [r2, #4]
 8008642:	f36f 13c7 	bfc	r3, #7, #1
 8008646:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008648:	4a10      	ldr	r2, [pc, #64]	; (800868c <MCU_ProcessModuleTime+0xe8>)
 800864a:	7913      	ldrb	r3, [r2, #4]
 800864c:	f043 0310 	orr.w	r3, r3, #16
 8008650:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <MCU_ProcessModuleTime+0xd8>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d006      	beq.n	800866c <MCU_ProcessModuleTime+0xc8>
 800865e:	490d      	ldr	r1, [pc, #52]	; (8008694 <MCU_ProcessModuleTime+0xf0>)
 8008660:	4808      	ldr	r0, [pc, #32]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 8008662:	f00b fb13 	bl	8013c8c <siprintf>
 8008666:	4807      	ldr	r0, [pc, #28]	; (8008684 <MCU_ProcessModuleTime+0xe0>)
 8008668:	f7fc fe7a 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 800866c:	2001      	movs	r0, #1
 800866e:	f7ff fcd9 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bdb0      	pop	{r4, r5, r7, pc}
 800867a:	bf00      	nop
 800867c:	2000000c 	.word	0x2000000c
 8008680:	080178fc 	.word	0x080178fc
 8008684:	20000b64 	.word	0x20000b64
 8008688:	2000a664 	.word	0x2000a664
 800868c:	20000d38 	.word	0x20000d38
 8008690:	20000d44 	.word	0x20000d44
 8008694:	08017918 	.word	0x08017918

08008698 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 80086a2:	4b41      	ldr	r3, [pc, #260]	; (80087a8 <MCU_RequestHardware+0x110>)
 80086a4:	7d1b      	ldrb	r3, [r3, #20]
 80086a6:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80086a8:	2300      	movs	r3, #0
 80086aa:	73bb      	strb	r3, [r7, #14]
 80086ac:	e010      	b.n	80086d0 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	4a3e      	ldr	r2, [pc, #248]	; (80087ac <MCU_RequestHardware+0x114>)
 80086b2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	3308      	adds	r3, #8
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d101      	bne.n	80086ca <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	3301      	adds	r3, #1
 80086ce:	73bb      	strb	r3, [r7, #14]
 80086d0:	4b35      	ldr	r3, [pc, #212]	; (80087a8 <MCU_RequestHardware+0x110>)
 80086d2:	7d1b      	ldrb	r3, [r3, #20]
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d3e9      	bcc.n	80086ae <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 80086da:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <MCU_RequestHardware+0x110>)
 80086dc:	7d1b      	ldrb	r3, [r3, #20]
 80086de:	7bfa      	ldrb	r2, [r7, #15]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d10d      	bne.n	8008700 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 80086e4:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <MCU_RequestHardware+0x118>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	f003 0303 	and.w	r3, r3, #3
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d156      	bne.n	800879e <MCU_RequestHardware+0x106>
 80086f0:	4930      	ldr	r1, [pc, #192]	; (80087b4 <MCU_RequestHardware+0x11c>)
 80086f2:	4831      	ldr	r0, [pc, #196]	; (80087b8 <MCU_RequestHardware+0x120>)
 80086f4:	f00b faca 	bl	8013c8c <siprintf>
 80086f8:	482f      	ldr	r0, [pc, #188]	; (80087b8 <MCU_RequestHardware+0x120>)
 80086fa:	f7fc fe31 	bl	8005360 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 80086fe:	e04e      	b.n	800879e <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4a2a      	ldr	r2, [pc, #168]	; (80087ac <MCU_RequestHardware+0x114>)
 8008704:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	4413      	add	r3, r2
 800870e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008712:	2201      	movs	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8008716:	79fb      	ldrb	r3, [r7, #7]
 8008718:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 800871a:	4b28      	ldr	r3, [pc, #160]	; (80087bc <MCU_RequestHardware+0x124>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008720:	4b26      	ldr	r3, [pc, #152]	; (80087bc <MCU_RequestHardware+0x124>)
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008726:	4b25      	ldr	r3, [pc, #148]	; (80087bc <MCU_RequestHardware+0x124>)
 8008728:	2200      	movs	r2, #0
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <MCU_RequestHardware+0x128>)
 8008730:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8008732:	4a22      	ldr	r2, [pc, #136]	; (80087bc <MCU_RequestHardware+0x124>)
 8008734:	8813      	ldrh	r3, [r2, #0]
 8008736:	f240 5111 	movw	r1, #1297	; 0x511
 800873a:	f361 030a 	bfi	r3, r1, #0, #11
 800873e:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008740:	79fa      	ldrb	r2, [r7, #7]
 8008742:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008746:	491d      	ldr	r1, [pc, #116]	; (80087bc <MCU_RequestHardware+0x124>)
 8008748:	680b      	ldr	r3, [r1, #0]
 800874a:	f362 23dc 	bfi	r3, r2, #11, #18
 800874e:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008750:	4a1a      	ldr	r2, [pc, #104]	; (80087bc <MCU_RequestHardware+0x124>)
 8008752:	7913      	ldrb	r3, [r2, #4]
 8008754:	f36f 1386 	bfc	r3, #6, #1
 8008758:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <MCU_RequestHardware+0x124>)
 800875c:	7913      	ldrb	r3, [r2, #4]
 800875e:	2101      	movs	r1, #1
 8008760:	f361 0303 	bfi	r3, r1, #0, #4
 8008764:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008766:	4a15      	ldr	r2, [pc, #84]	; (80087bc <MCU_RequestHardware+0x124>)
 8008768:	7913      	ldrb	r3, [r2, #4]
 800876a:	f36f 13c7 	bfc	r3, #7, #1
 800876e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008770:	4a12      	ldr	r2, [pc, #72]	; (80087bc <MCU_RequestHardware+0x124>)
 8008772:	7913      	ldrb	r3, [r2, #4]
 8008774:	f043 0310 	orr.w	r3, r3, #16
 8008778:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <MCU_RequestHardware+0x118>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d008      	beq.n	8008798 <MCU_RequestHardware+0x100>
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	461a      	mov	r2, r3
 800878a:	490e      	ldr	r1, [pc, #56]	; (80087c4 <MCU_RequestHardware+0x12c>)
 800878c:	480a      	ldr	r0, [pc, #40]	; (80087b8 <MCU_RequestHardware+0x120>)
 800878e:	f00b fa7d 	bl	8013c8c <siprintf>
 8008792:	4809      	ldr	r0, [pc, #36]	; (80087b8 <MCU_RequestHardware+0x120>)
 8008794:	f7fc fde4 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008798:	2001      	movs	r0, #1
 800879a:	f7ff fc43 	bl	8008024 <MCU_TransmitMessageQueue>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	2000a664 	.word	0x2000a664
 80087ac:	20000de4 	.word	0x20000de4
 80087b0:	2000000c 	.word	0x2000000c
 80087b4:	08017930 	.word	0x08017930
 80087b8:	20000b64 	.word	0x20000b64
 80087bc:	20000d38 	.word	0x20000d38
 80087c0:	20000d44 	.word	0x20000d44
 80087c4:	0801796c 	.word	0x0801796c

080087c8 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	b08e      	sub	sp, #56	; 0x38
 80087ce:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 80087d0:	463b      	mov	r3, r7
 80087d2:	2208      	movs	r2, #8
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00a fa46 	bl	8012c68 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 80087dc:	4a94      	ldr	r2, [pc, #592]	; (8008a30 <MCU_ProcessModuleHardware+0x268>)
 80087de:	463b      	mov	r3, r7
 80087e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087e4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80087e8:	4b92      	ldr	r3, [pc, #584]	; (8008a34 <MCU_ProcessModuleHardware+0x26c>)
 80087ea:	7d1b      	ldrb	r3, [r3, #20]
 80087ec:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80087ee:	2300      	movs	r3, #0
 80087f0:	75bb      	strb	r3, [r7, #22]
 80087f2:	e015      	b.n	8008820 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80087f4:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <MCU_ProcessModuleHardware+0x270>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80087fc:	7dbb      	ldrb	r3, [r7, #22]
 80087fe:	498f      	ldr	r1, [pc, #572]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008800:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008804:	fb00 f303 	mul.w	r3, r0, r3
 8008808:	440b      	add	r3, r1
 800880a:	3308      	adds	r3, #8
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8008812:	429a      	cmp	r2, r3
 8008814:	d101      	bne.n	800881a <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 8008816:	7dbb      	ldrb	r3, [r7, #22]
 8008818:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800881a:	7dbb      	ldrb	r3, [r7, #22]
 800881c:	3301      	adds	r3, #1
 800881e:	75bb      	strb	r3, [r7, #22]
 8008820:	4b84      	ldr	r3, [pc, #528]	; (8008a34 <MCU_ProcessModuleHardware+0x26c>)
 8008822:	7d1b      	ldrb	r3, [r3, #20]
 8008824:	7dba      	ldrb	r2, [r7, #22]
 8008826:	429a      	cmp	r2, r3
 8008828:	d3e4      	bcc.n	80087f4 <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 800882a:	4b82      	ldr	r3, [pc, #520]	; (8008a34 <MCU_ProcessModuleHardware+0x26c>)
 800882c:	7d1b      	ldrb	r3, [r3, #20]
 800882e:	7dfa      	ldrb	r2, [r7, #23]
 8008830:	429a      	cmp	r2, r3
 8008832:	d10e      	bne.n	8008852 <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 8008834:	4b82      	ldr	r3, [pc, #520]	; (8008a40 <MCU_ProcessModuleHardware+0x278>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b03      	cmp	r3, #3
 800883e:	f040 825d 	bne.w	8008cfc <MCU_ProcessModuleHardware+0x534>
 8008842:	4980      	ldr	r1, [pc, #512]	; (8008a44 <MCU_ProcessModuleHardware+0x27c>)
 8008844:	4880      	ldr	r0, [pc, #512]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 8008846:	f00b fa21 	bl	8013c8c <siprintf>
 800884a:	487f      	ldr	r0, [pc, #508]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 800884c:	f7fc fd88 	bl	8005360 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8008850:	e254      	b.n	8008cfc <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	8838      	ldrh	r0, [r7, #0]
 8008856:	4a79      	ldr	r2, [pc, #484]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008858:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800885c:	fb01 f303 	mul.w	r3, r1, r3
 8008860:	4413      	add	r3, r2
 8008862:	330e      	adds	r3, #14
 8008864:	4602      	mov	r2, r0
 8008866:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	8878      	ldrh	r0, [r7, #2]
 800886c:	4a73      	ldr	r2, [pc, #460]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 800886e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008872:	fb01 f303 	mul.w	r3, r1, r3
 8008876:	4413      	add	r3, r2
 8008878:	3310      	adds	r3, #16
 800887a:	4602      	mov	r2, r0
 800887c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	88b8      	ldrh	r0, [r7, #4]
 8008882:	4a6e      	ldr	r2, [pc, #440]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008884:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	3312      	adds	r3, #18
 8008890:	4602      	mov	r2, r0
 8008892:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	88f8      	ldrh	r0, [r7, #6]
 8008898:	4a68      	ldr	r2, [pc, #416]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 800889a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	4413      	add	r3, r2
 80088a4:	330c      	adds	r3, #12
 80088a6:	4602      	mov	r2, r0
 80088a8:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80088aa:	4b68      	ldr	r3, [pc, #416]	; (8008a4c <MCU_ProcessModuleHardware+0x284>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088b2:	4962      	ldr	r1, [pc, #392]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088b4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80088b8:	fb00 f303 	mul.w	r3, r0, r3
 80088bc:	440b      	add	r3, r1
 80088be:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80088c2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	4a62      	ldr	r2, [pc, #392]	; (8008a50 <MCU_ProcessModuleHardware+0x288>)
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	495c      	ldr	r1, [pc, #368]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088cc:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80088d0:	fb00 f303 	mul.w	r3, r0, r3
 80088d4:	440b      	add	r3, r1
 80088d6:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80088da:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	4a57      	ldr	r2, [pc, #348]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80088e4:	fb01 f303 	mul.w	r3, r1, r3
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	4a51      	ldr	r2, [pc, #324]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80088f6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	330e      	adds	r3, #14
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f7f7 fdef 	bl	80004e8 <__aeabi_i2d>
 800890a:	a345      	add	r3, pc, #276	; (adr r3, 8008a20 <MCU_ProcessModuleHardware+0x258>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fe54 	bl	80005bc <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4610      	mov	r0, r2
 800891a:	4619      	mov	r1, r3
 800891c:	a342      	add	r3, pc, #264	; (adr r3, 8008a28 <MCU_ProcessModuleHardware+0x260>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fc93 	bl	800024c <__aeabi_dsub>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	f7f8 f93d 	bl	8000bac <__aeabi_d2f>
 8008932:	4603      	mov	r3, r0
 8008934:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	4a40      	ldr	r2, [pc, #256]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 800893a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	3310      	adds	r3, #16
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7f7 fdcd 	bl	80004e8 <__aeabi_i2d>
 800894e:	a334      	add	r3, pc, #208	; (adr r3, 8008a20 <MCU_ProcessModuleHardware+0x258>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fe32 	bl	80005bc <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	a331      	add	r3, pc, #196	; (adr r3, 8008a28 <MCU_ProcessModuleHardware+0x260>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fc71 	bl	800024c <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	f7f8 f91b 	bl	8000bac <__aeabi_d2f>
 8008976:	4603      	mov	r3, r0
 8008978:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 800897a:	edd7 7a04 	vldr	s15, [r7, #16]
 800897e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008986:	d567      	bpl.n	8008a58 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8008988:	4b2d      	ldr	r3, [pc, #180]	; (8008a40 <MCU_ProcessModuleHardware+0x278>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	2b03      	cmp	r3, #3
 8008992:	d113      	bne.n	80089bc <MCU_ProcessModuleHardware+0x1f4>
 8008994:	4b28      	ldr	r3, [pc, #160]	; (8008a38 <MCU_ProcessModuleHardware+0x270>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800899c:	461c      	mov	r4, r3
 800899e:	6938      	ldr	r0, [r7, #16]
 80089a0:	f7f7 fdb4 	bl	800050c <__aeabi_f2d>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9cd 2300 	strd	r2, r3, [sp]
 80089ac:	4622      	mov	r2, r4
 80089ae:	4929      	ldr	r1, [pc, #164]	; (8008a54 <MCU_ProcessModuleHardware+0x28c>)
 80089b0:	4825      	ldr	r0, [pc, #148]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 80089b2:	f00b f96b 	bl	8013c8c <siprintf>
 80089b6:	4824      	ldr	r0, [pc, #144]	; (8008a48 <MCU_ProcessModuleHardware+0x280>)
 80089b8:	f7fc fcd2 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	4a1f      	ldr	r2, [pc, #124]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80089c0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	330e      	adds	r3, #14
 80089cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80089d0:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80089d6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	4413      	add	r3, r2
 80089e0:	3310      	adds	r3, #16
 80089e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80089e6:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	4a14      	ldr	r2, [pc, #80]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 80089ec:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80089fa:	7893      	ldrb	r3, [r2, #2]
 80089fc:	f043 0302 	orr.w	r3, r3, #2
 8008a00:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <MCU_ProcessModuleHardware+0x274>)
 8008a06:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	3308      	adds	r3, #8
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f001 f866 	bl	8009ae8 <MCU_TransmitState>
 8008a1c:	e04f      	b.n	8008abe <MCU_ProcessModuleHardware+0x2f6>
 8008a1e:	bf00      	nop
 8008a20:	47ae147b 	.word	0x47ae147b
 8008a24:	3f947ae1 	.word	0x3f947ae1
 8008a28:	47ae147b 	.word	0x47ae147b
 8008a2c:	40847ae1 	.word	0x40847ae1
 8008a30:	20000da0 	.word	0x20000da0
 8008a34:	2000a664 	.word	0x2000a664
 8008a38:	20000d94 	.word	0x20000d94
 8008a3c:	20000de4 	.word	0x20000de4
 8008a40:	2000000c 	.word	0x2000000c
 8008a44:	08017994 	.word	0x08017994
 8008a48:	20000b64 	.word	0x20000b64
 8008a4c:	200005d8 	.word	0x200005d8
 8008a50:	20000d20 	.word	0x20000d20
 8008a54:	080179d4 	.word	0x080179d4
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8008a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a68:	dd29      	ble.n	8008abe <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8008a6a:	4bad      	ldr	r3, [pc, #692]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d018      	beq.n	8008aa8 <MCU_ProcessModuleHardware+0x2e0>
 8008a76:	4bab      	ldr	r3, [pc, #684]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008a7e:	461c      	mov	r4, r3
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f7f7 fd43 	bl	800050c <__aeabi_f2d>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	f04f 0000 	mov.w	r0, #0
 8008a8e:	49a6      	ldr	r1, [pc, #664]	; (8008d28 <MCU_ProcessModuleHardware+0x560>)
 8008a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a94:	e9cd 2300 	strd	r2, r3, [sp]
 8008a98:	4622      	mov	r2, r4
 8008a9a:	49a4      	ldr	r1, [pc, #656]	; (8008d2c <MCU_ProcessModuleHardware+0x564>)
 8008a9c:	48a4      	ldr	r0, [pc, #656]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008a9e:	f00b f8f5 	bl	8013c8c <siprintf>
 8008aa2:	48a3      	ldr	r0, [pc, #652]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008aa4:	f7fc fc5c 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	4aa2      	ldr	r2, [pc, #648]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008aac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	330e      	adds	r3, #14
 8008ab8:	f248 12f4 	movw	r2, #33268	; 0x81f4
 8008abc:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 8008abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aca:	dd4a      	ble.n	8008b62 <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8008acc:	4b94      	ldr	r3, [pc, #592]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d113      	bne.n	8008b00 <MCU_ProcessModuleHardware+0x338>
 8008ad8:	4b92      	ldr	r3, [pc, #584]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008ae0:	461c      	mov	r4, r3
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7f7 fd12 	bl	800050c <__aeabi_f2d>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	e9cd 2300 	strd	r2, r3, [sp]
 8008af0:	4622      	mov	r2, r4
 8008af2:	4991      	ldr	r1, [pc, #580]	; (8008d38 <MCU_ProcessModuleHardware+0x570>)
 8008af4:	488e      	ldr	r0, [pc, #568]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008af6:	f00b f8c9 	bl	8013c8c <siprintf>
 8008afa:	488d      	ldr	r0, [pc, #564]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008afc:	f7fc fc30 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	4a8c      	ldr	r2, [pc, #560]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b04:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b08:	fb01 f303 	mul.w	r3, r1, r3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	330e      	adds	r3, #14
 8008b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b14:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	4a86      	ldr	r2, [pc, #536]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b1a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b1e:	fb01 f303 	mul.w	r3, r1, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	3310      	adds	r3, #16
 8008b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b2a:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	4a81      	ldr	r2, [pc, #516]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b30:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8008b3e:	7893      	ldrb	r3, [r2, #2]
 8008b40:	f043 0302 	orr.w	r3, r3, #2
 8008b44:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	4a7a      	ldr	r2, [pc, #488]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008b4a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b4e:	fb01 f303 	mul.w	r3, r1, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	3308      	adds	r3, #8
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 ffc4 	bl	8009ae8 <MCU_TransmitState>
 8008b60:	e032      	b.n	8008bc8 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8008b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b66:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008d3c <MCU_ProcessModuleHardware+0x574>
 8008b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	d529      	bpl.n	8008bc8 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8008b74:	4b6a      	ldr	r3, [pc, #424]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d018      	beq.n	8008bb2 <MCU_ProcessModuleHardware+0x3ea>
 8008b80:	4b68      	ldr	r3, [pc, #416]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008b88:	461c      	mov	r4, r3
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7f7 fcbe 	bl	800050c <__aeabi_f2d>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	f04f 0000 	mov.w	r0, #0
 8008b98:	4969      	ldr	r1, [pc, #420]	; (8008d40 <MCU_ProcessModuleHardware+0x578>)
 8008b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4967      	ldr	r1, [pc, #412]	; (8008d44 <MCU_ProcessModuleHardware+0x57c>)
 8008ba6:	4862      	ldr	r0, [pc, #392]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008ba8:	f00b f870 	bl	8013c8c <siprintf>
 8008bac:	4860      	ldr	r0, [pc, #384]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008bae:	f7fc fbd7 	bl	8005360 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	4a5f      	ldr	r2, [pc, #380]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008bb6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	f247 72cc 	movw	r2, #30668	; 0x77cc
 8008bc6:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8008bc8:	4b55      	ldr	r3, [pc, #340]	; (8008d20 <MCU_ProcessModuleHardware+0x558>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8093 	beq.w	8008cfc <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	4a56      	ldr	r2, [pc, #344]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008bda:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	4413      	add	r3, r2
 8008be4:	330e      	adds	r3, #14
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f7 fc7d 	bl	80004e8 <__aeabi_i2d>
 8008bee:	a346      	add	r3, pc, #280	; (adr r3, 8008d08 <MCU_ProcessModuleHardware+0x540>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7f7 fce2 	bl	80005bc <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	a343      	add	r3, pc, #268	; (adr r3, 8008d10 <MCU_ProcessModuleHardware+0x548>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 fb21 	bl	800024c <__aeabi_dsub>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7f7 ffcb 	bl	8000bac <__aeabi_d2f>
 8008c16:	4603      	mov	r3, r0
 8008c18:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	4a45      	ldr	r2, [pc, #276]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008c1e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	3310      	adds	r3, #16
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7f7 fc5b 	bl	80004e8 <__aeabi_i2d>
 8008c32:	a335      	add	r3, pc, #212	; (adr r3, 8008d08 <MCU_ProcessModuleHardware+0x540>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fcc0 	bl	80005bc <__aeabi_dmul>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4610      	mov	r0, r2
 8008c42:	4619      	mov	r1, r3
 8008c44:	a332      	add	r3, pc, #200	; (adr r3, 8008d10 <MCU_ProcessModuleHardware+0x548>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 faff 	bl	800024c <__aeabi_dsub>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4610      	mov	r0, r2
 8008c54:	4619      	mov	r1, r3
 8008c56:	f7f7 ffa9 	bl	8000bac <__aeabi_d2f>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	4a34      	ldr	r2, [pc, #208]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008c62:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3312      	adds	r3, #18
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7f7 fc39 	bl	80004e8 <__aeabi_i2d>
 8008c76:	a328      	add	r3, pc, #160	; (adr r3, 8008d18 <MCU_ProcessModuleHardware+0x550>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f7f7 fc9e 	bl	80005bc <__aeabi_dmul>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4610      	mov	r0, r2
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	f7f7 fade 	bl	8000250 <__adddf3>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	f7f7 ff86 	bl	8000bac <__aeabi_d2f>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008ca4:	4b1f      	ldr	r3, [pc, #124]	; (8008d24 <MCU_ProcessModuleHardware+0x55c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8008cac:	469a      	mov	sl, r3
 8008cae:	6938      	ldr	r0, [r7, #16]
 8008cb0:	f7f7 fc2c 	bl	800050c <__aeabi_f2d>
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7f7 fc27 	bl	800050c <__aeabi_f2d>
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4689      	mov	r9, r1
 8008cc2:	68b8      	ldr	r0, [r7, #8]
 8008cc4:	f7f7 fc22 	bl	800050c <__aeabi_f2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008ccc:	7df9      	ldrb	r1, [r7, #23]
 8008cce:	4819      	ldr	r0, [pc, #100]	; (8008d34 <MCU_ProcessModuleHardware+0x56c>)
 8008cd0:	f240 46c4 	movw	r6, #1220	; 0x4c4
 8008cd4:	fb06 f101 	mul.w	r1, r6, r1
 8008cd8:	4401      	add	r1, r0
 8008cda:	310c      	adds	r1, #12
 8008cdc:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8008cde:	9106      	str	r1, [sp, #24]
 8008ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ce4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008ce8:	e9cd 4500 	strd	r4, r5, [sp]
 8008cec:	4652      	mov	r2, sl
 8008cee:	4916      	ldr	r1, [pc, #88]	; (8008d48 <MCU_ProcessModuleHardware+0x580>)
 8008cf0:	480f      	ldr	r0, [pc, #60]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008cf2:	f00a ffcb 	bl	8013c8c <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008cf6:	480e      	ldr	r0, [pc, #56]	; (8008d30 <MCU_ProcessModuleHardware+0x568>)
 8008cf8:	f7fc fb32 	bl	8005360 <serialOut>
}
 8008cfc:	bf00      	nop
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	bf00      	nop
 8008d08:	47ae147b 	.word	0x47ae147b
 8008d0c:	3f947ae1 	.word	0x3f947ae1
 8008d10:	47ae147b 	.word	0x47ae147b
 8008d14:	40847ae1 	.word	0x40847ae1
 8008d18:	eb851eb8 	.word	0xeb851eb8
 8008d1c:	3f8eb851 	.word	0x3f8eb851
 8008d20:	2000000c 	.word	0x2000000c
 8008d24:	20000d94 	.word	0x20000d94
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	08017a1c 	.word	0x08017a1c
 8008d30:	20000b64 	.word	0x20000b64
 8008d34:	20000de4 	.word	0x20000de4
 8008d38:	08017a64 	.word	0x08017a64
 8008d3c:	c2280000 	.word	0xc2280000
 8008d40:	c0450000 	.word	0xc0450000
 8008d44:	08017aac 	.word	0x08017aac
 8008d48:	08017af8 	.word	0x08017af8

08008d4c <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8008d56:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <MCU_RequestModuleStatus+0x110>)
 8008d58:	7d1b      	ldrb	r3, [r3, #20]
 8008d5a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73bb      	strb	r3, [r7, #14]
 8008d60:	e010      	b.n	8008d84 <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	4a3e      	ldr	r2, [pc, #248]	; (8008e60 <MCU_RequestModuleStatus+0x114>)
 8008d66:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	4413      	add	r3, r2
 8008d70:	3308      	adds	r3, #8
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	79fa      	ldrb	r2, [r7, #7]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d101      	bne.n	8008d7e <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	3301      	adds	r3, #1
 8008d82:	73bb      	strb	r3, [r7, #14]
 8008d84:	4b35      	ldr	r3, [pc, #212]	; (8008e5c <MCU_RequestModuleStatus+0x110>)
 8008d86:	7d1b      	ldrb	r3, [r3, #20]
 8008d88:	7bba      	ldrb	r2, [r7, #14]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d3e9      	bcc.n	8008d62 <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8008d8e:	4b33      	ldr	r3, [pc, #204]	; (8008e5c <MCU_RequestModuleStatus+0x110>)
 8008d90:	7d1b      	ldrb	r3, [r3, #20]
 8008d92:	7bfa      	ldrb	r2, [r7, #15]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d10d      	bne.n	8008db4 <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <MCU_RequestModuleStatus+0x118>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d156      	bne.n	8008e52 <MCU_RequestModuleStatus+0x106>
 8008da4:	4930      	ldr	r1, [pc, #192]	; (8008e68 <MCU_RequestModuleStatus+0x11c>)
 8008da6:	4831      	ldr	r0, [pc, #196]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008da8:	f00a ff70 	bl	8013c8c <siprintf>
 8008dac:	482f      	ldr	r0, [pc, #188]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008dae:	f7fc fad7 	bl	8005360 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8008db2:	e04e      	b.n	8008e52 <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <MCU_RequestModuleStatus+0x114>)
 8008db8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8008dce:	4b28      	ldr	r3, [pc, #160]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008dd4:	4b26      	ldr	r3, [pc, #152]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008dda:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	609a      	str	r2, [r3, #8]
 8008de0:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 8008de2:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <MCU_RequestModuleStatus+0x128>)
 8008de4:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8008de6:	4a22      	ldr	r2, [pc, #136]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008de8:	8813      	ldrh	r3, [r2, #0]
 8008dea:	f240 5112 	movw	r1, #1298	; 0x512
 8008dee:	f361 030a 	bfi	r3, r1, #0, #11
 8008df2:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008df4:	79fa      	ldrb	r2, [r7, #7]
 8008df6:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008dfa:	491d      	ldr	r1, [pc, #116]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008dfc:	680b      	ldr	r3, [r1, #0]
 8008dfe:	f362 23dc 	bfi	r3, r2, #11, #18
 8008e02:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008e04:	4a1a      	ldr	r2, [pc, #104]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e06:	7913      	ldrb	r3, [r2, #4]
 8008e08:	f36f 1386 	bfc	r3, #6, #1
 8008e0c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8008e0e:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e10:	7913      	ldrb	r3, [r2, #4]
 8008e12:	2101      	movs	r1, #1
 8008e14:	f361 0303 	bfi	r3, r1, #0, #4
 8008e18:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008e1a:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e1c:	7913      	ldrb	r3, [r2, #4]
 8008e1e:	f36f 13c7 	bfc	r3, #7, #1
 8008e22:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008e24:	4a12      	ldr	r2, [pc, #72]	; (8008e70 <MCU_RequestModuleStatus+0x124>)
 8008e26:	7913      	ldrb	r3, [r2, #4]
 8008e28:	f043 0310 	orr.w	r3, r3, #16
 8008e2c:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <MCU_RequestModuleStatus+0x118>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <MCU_RequestModuleStatus+0x100>
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	490e      	ldr	r1, [pc, #56]	; (8008e78 <MCU_RequestModuleStatus+0x12c>)
 8008e40:	480a      	ldr	r0, [pc, #40]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008e42:	f00a ff23 	bl	8013c8c <siprintf>
 8008e46:	4809      	ldr	r0, [pc, #36]	; (8008e6c <MCU_RequestModuleStatus+0x120>)
 8008e48:	f7fc fa8a 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f7ff f8e9 	bl	8008024 <MCU_TransmitMessageQueue>
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	2000a664 	.word	0x2000a664
 8008e60:	20000de4 	.word	0x20000de4
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	08017b64 	.word	0x08017b64
 8008e6c:	20000b64 	.word	0x20000b64
 8008e70:	20000d38 	.word	0x20000d38
 8008e74:	20000d44 	.word	0x20000d44
 8008e78:	08017ba4 	.word	0x08017ba4

08008e7c <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8008e8a:	4b37      	ldr	r3, [pc, #220]	; (8008f68 <MCU_FindMaxVoltageModule+0xec>)
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8008e92:	2300      	movs	r3, #0
 8008e94:	71fb      	strb	r3, [r7, #7]
 8008e96:	e052      	b.n	8008f3e <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	4a34      	ldr	r2, [pc, #208]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008e9c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	88ba      	ldrh	r2, [r7, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d243      	bcs.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	4a2e      	ldr	r2, [pc, #184]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008eb4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008ec2:	789b      	ldrb	r3, [r3, #2]
 8008ec4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d134      	bne.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	4a26      	ldr	r2, [pc, #152]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008ed2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008ee0:	789b      	ldrb	r3, [r3, #2]
 8008ee2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d125      	bne.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008ef0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	4a17      	ldr	r2, [pc, #92]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008f0e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f12:	fb01 f303 	mul.w	r3, r1, r3
 8008f16:	4413      	add	r3, r2
 8008f18:	3314      	adds	r3, #20
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	4a12      	ldr	r2, [pc, #72]	; (8008f6c <MCU_FindMaxVoltageModule+0xf0>)
 8008f22:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 8008f32:	79bb      	ldrb	r3, [r7, #6]
 8008f34:	3301      	adds	r3, #1
 8008f36:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	71fb      	strb	r3, [r7, #7]
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <MCU_FindMaxVoltageModule+0xec>)
 8008f40:	7d1b      	ldrb	r3, [r3, #20]
 8008f42:	79fa      	ldrb	r2, [r7, #7]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3a7      	bcc.n	8008e98 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8008f48:	88bb      	ldrh	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <MCU_FindMaxVoltageModule+0xdc>
 8008f4e:	79bb      	ldrb	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <MCU_FindMaxVoltageModule+0xdc>
 8008f54:	2300      	movs	r3, #0
 8008f56:	e000      	b.n	8008f5a <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	2000a664 	.word	0x2000a664
 8008f6c:	20000de4 	.word	0x20000de4

08008f70 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	b09d      	sub	sp, #116	; 0x74
 8008f76:	af0a      	add	r7, sp, #40	; 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8008f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f009 fe71 	bl	8012c68 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 8008f86:	4ab1      	ldr	r2, [pc, #708]	; (800924c <MCU_ProcessModuleStatus1+0x2dc>)
 8008f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f90:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8008f94:	4bae      	ldr	r3, [pc, #696]	; (8009250 <MCU_ProcessModuleStatus1+0x2e0>)
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
 8008f98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008fa2:	e01a      	b.n	8008fda <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8008fa4:	4bab      	ldr	r3, [pc, #684]	; (8009254 <MCU_ProcessModuleStatus1+0x2e4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8008fac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fb0:	49a9      	ldr	r1, [pc, #676]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8008fb2:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008fb6:	fb00 f303 	mul.w	r3, r0, r3
 8008fba:	440b      	add	r3, r1
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d103      	bne.n	8008fd0 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 8008fc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8008fd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008fda:	4b9d      	ldr	r3, [pc, #628]	; (8009250 <MCU_ProcessModuleStatus1+0x2e0>)
 8008fdc:	7d1b      	ldrb	r3, [r3, #20]
 8008fde:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d3de      	bcc.n	8008fa4 <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 8008fe6:	4b9a      	ldr	r3, [pc, #616]	; (8009250 <MCU_ProcessModuleStatus1+0x2e0>)
 8008fe8:	7d1b      	ldrb	r3, [r3, #20]
 8008fea:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d10e      	bne.n	8009010 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 8008ff2:	4b9a      	ldr	r3, [pc, #616]	; (800925c <MCU_ProcessModuleStatus1+0x2ec>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	f040 8222 	bne.w	8009444 <MCU_ProcessModuleStatus1+0x4d4>
 8009000:	4997      	ldr	r1, [pc, #604]	; (8009260 <MCU_ProcessModuleStatus1+0x2f0>)
 8009002:	4898      	ldr	r0, [pc, #608]	; (8009264 <MCU_ProcessModuleStatus1+0x2f4>)
 8009004:	f00a fe42 	bl	8013c8c <siprintf>
 8009008:	4896      	ldr	r0, [pc, #600]	; (8009264 <MCU_ProcessModuleStatus1+0x2f4>)
 800900a:	f7fc f9a9 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 800900e:	e219      	b.n	8009444 <MCU_ProcessModuleStatus1+0x4d4>
    module[moduleIndex].statusPending = false;
 8009010:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009014:	4a90      	ldr	r2, [pc, #576]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009016:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	4413      	add	r3, r2
 8009020:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8009028:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800902c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800902e:	4a8a      	ldr	r2, [pc, #552]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009030:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	4413      	add	r3, r2
 800903a:	3316      	adds	r3, #22
 800903c:	4602      	mov	r2, r0
 800903e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8009040:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009044:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8009046:	4a84      	ldr	r2, [pc, #528]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009048:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	4413      	add	r3, r2
 8009052:	3314      	adds	r3, #20
 8009054:	4602      	mov	r2, r0
 8009056:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8009058:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800905c:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8009060:	4a7d      	ldr	r2, [pc, #500]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009062:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	332b      	adds	r3, #43	; 0x2b
 800906e:	4602      	mov	r2, r0
 8009070:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8009072:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009076:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800907a:	4a77      	ldr	r2, [pc, #476]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 800907c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009080:	fb01 f303 	mul.w	r3, r1, r3
 8009084:	4413      	add	r3, r2
 8009086:	332c      	adds	r3, #44	; 0x2c
 8009088:	4602      	mov	r2, r0
 800908a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 800908c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009090:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009094:	b2da      	uxtb	r2, r3
 8009096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800909a:	4610      	mov	r0, r2
 800909c:	4a6e      	ldr	r2, [pc, #440]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 800909e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090a2:	fb01 f303 	mul.w	r3, r1, r3
 80090a6:	4413      	add	r3, r2
 80090a8:	3327      	adds	r3, #39	; 0x27
 80090aa:	4602      	mov	r2, r0
 80090ac:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 80090ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090bc:	4610      	mov	r0, r2
 80090be:	4a66      	ldr	r2, [pc, #408]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80090c0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	3326      	adds	r3, #38	; 0x26
 80090cc:	4602      	mov	r2, r0
 80090ce:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 80090d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090d4:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 80090d8:	4a5f      	ldr	r2, [pc, #380]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80090da:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	332d      	adds	r3, #45	; 0x2d
 80090e6:	4602      	mov	r2, r0
 80090e8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80090ea:	4b5f      	ldr	r3, [pc, #380]	; (8009268 <MCU_ProcessModuleStatus1+0x2f8>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090f4:	4958      	ldr	r1, [pc, #352]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80090f6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80090fa:	fb00 f303 	mul.w	r3, r0, r3
 80090fe:	440b      	add	r3, r1
 8009100:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009104:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009106:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800910a:	4a58      	ldr	r2, [pc, #352]	; (800926c <MCU_ProcessModuleStatus1+0x2fc>)
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	4952      	ldr	r1, [pc, #328]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009110:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009114:	fb00 f303 	mul.w	r3, r0, r3
 8009118:	440b      	add	r3, r1
 800911a:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800911e:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 8009120:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009124:	4a4c      	ldr	r2, [pc, #304]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009126:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800912a:	fb01 f303 	mul.w	r3, r1, r3
 800912e:	4413      	add	r3, r2
 8009130:	3327      	adds	r3, #39	; 0x27
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009138:	4947      	ldr	r1, [pc, #284]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 800913a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800913e:	fb00 f303 	mul.w	r3, r0, r3
 8009142:	440b      	add	r3, r1
 8009144:	3329      	adds	r3, #41	; 0x29
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d10a      	bne.n	8009162 <MCU_ProcessModuleStatus1+0x1f2>
     module[moduleIndex].command.commandStatus = commandActive;
 800914c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009150:	4a41      	ldr	r2, [pc, #260]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009152:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009156:	fb01 f303 	mul.w	r3, r1, r3
 800915a:	4413      	add	r3, r2
 800915c:	332a      	adds	r3, #42	; 0x2a
 800915e:	2201      	movs	r2, #1
 8009160:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009162:	4b3e      	ldr	r3, [pc, #248]	; (800925c <MCU_ProcessModuleStatus1+0x2ec>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 816a 	beq.w	8009444 <MCU_ProcessModuleStatus1+0x4d4>
      switch (module[moduleIndex].currentState){
 8009170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009174:	4a38      	ldr	r2, [pc, #224]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 8009176:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800917a:	fb01 f303 	mul.w	r3, r1, r3
 800917e:	4413      	add	r3, r2
 8009180:	3327      	adds	r3, #39	; 0x27
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d014      	beq.n	80091b2 <MCU_ProcessModuleStatus1+0x242>
 8009188:	2b03      	cmp	r3, #3
 800918a:	dc19      	bgt.n	80091c0 <MCU_ProcessModuleStatus1+0x250>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <MCU_ProcessModuleStatus1+0x226>
 8009190:	2b01      	cmp	r3, #1
 8009192:	d007      	beq.n	80091a4 <MCU_ProcessModuleStatus1+0x234>
 8009194:	e014      	b.n	80091c0 <MCU_ProcessModuleStatus1+0x250>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 8009196:	f107 031c 	add.w	r3, r7, #28
 800919a:	4935      	ldr	r1, [pc, #212]	; (8009270 <MCU_ProcessModuleStatus1+0x300>)
 800919c:	4618      	mov	r0, r3
 800919e:	f00a fd75 	bl	8013c8c <siprintf>
 80091a2:	e01f      	b.n	80091e4 <MCU_ProcessModuleStatus1+0x274>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 80091a4:	f107 031c 	add.w	r3, r7, #28
 80091a8:	4932      	ldr	r1, [pc, #200]	; (8009274 <MCU_ProcessModuleStatus1+0x304>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00a fd6e 	bl	8013c8c <siprintf>
 80091b0:	e018      	b.n	80091e4 <MCU_ProcessModuleStatus1+0x274>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 80091b2:	f107 031c 	add.w	r3, r7, #28
 80091b6:	4930      	ldr	r1, [pc, #192]	; (8009278 <MCU_ProcessModuleStatus1+0x308>)
 80091b8:	4618      	mov	r0, r3
 80091ba:	f00a fd67 	bl	8013c8c <siprintf>
 80091be:	e011      	b.n	80091e4 <MCU_ProcessModuleStatus1+0x274>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 80091c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091c4:	4a24      	ldr	r2, [pc, #144]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80091c6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3327      	adds	r3, #39	; 0x27
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	f107 031c 	add.w	r3, r7, #28
 80091da:	4928      	ldr	r1, [pc, #160]	; (800927c <MCU_ProcessModuleStatus1+0x30c>)
 80091dc:	4618      	mov	r0, r3
 80091de:	f00a fd55 	bl	8013c8c <siprintf>
 80091e2:	bf00      	nop
      switch (module[moduleIndex].status){
 80091e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <MCU_ProcessModuleStatus1+0x2e8>)
 80091ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	4413      	add	r3, r2
 80091f4:	3326      	adds	r3, #38	; 0x26
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d847      	bhi.n	800928c <MCU_ProcessModuleStatus1+0x31c>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <MCU_ProcessModuleStatus1+0x294>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009215 	.word	0x08009215
 8009208:	08009223 	.word	0x08009223
 800920c:	08009231 	.word	0x08009231
 8009210:	0800923f 	.word	0x0800923f
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	4915      	ldr	r1, [pc, #84]	; (8009270 <MCU_ProcessModuleStatus1+0x300>)
 800921a:	4618      	mov	r0, r3
 800921c:	f00a fd36 	bl	8013c8c <siprintf>
 8009220:	e046      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 8009222:	f107 030c 	add.w	r3, r7, #12
 8009226:	4916      	ldr	r1, [pc, #88]	; (8009280 <MCU_ProcessModuleStatus1+0x310>)
 8009228:	4618      	mov	r0, r3
 800922a:	f00a fd2f 	bl	8013c8c <siprintf>
 800922e:	e03f      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4913      	ldr	r1, [pc, #76]	; (8009284 <MCU_ProcessModuleStatus1+0x314>)
 8009236:	4618      	mov	r0, r3
 8009238:	f00a fd28 	bl	8013c8c <siprintf>
 800923c:	e038      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 800923e:	f107 030c 	add.w	r3, r7, #12
 8009242:	4911      	ldr	r1, [pc, #68]	; (8009288 <MCU_ProcessModuleStatus1+0x318>)
 8009244:	4618      	mov	r0, r3
 8009246:	f00a fd21 	bl	8013c8c <siprintf>
 800924a:	e031      	b.n	80092b0 <MCU_ProcessModuleStatus1+0x340>
 800924c:	20000da0 	.word	0x20000da0
 8009250:	2000a664 	.word	0x2000a664
 8009254:	20000d94 	.word	0x20000d94
 8009258:	20000de4 	.word	0x20000de4
 800925c:	2000000c 	.word	0x2000000c
 8009260:	08017bcc 	.word	0x08017bcc
 8009264:	20000b64 	.word	0x20000b64
 8009268:	200005d8 	.word	0x200005d8
 800926c:	20000d20 	.word	0x20000d20
 8009270:	08017c0c 	.word	0x08017c0c
 8009274:	08017c14 	.word	0x08017c14
 8009278:	08017c20 	.word	0x08017c20
 800927c:	08017c28 	.word	0x08017c28
 8009280:	08017c34 	.word	0x08017c34
 8009284:	08017c40 	.word	0x08017c40
 8009288:	08017c4c 	.word	0x08017c4c
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 800928c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009290:	4a75      	ldr	r2, [pc, #468]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 8009292:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009296:	fb01 f303 	mul.w	r3, r1, r3
 800929a:	4413      	add	r3, r2
 800929c:	3326      	adds	r3, #38	; 0x26
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	f107 030c 	add.w	r3, r7, #12
 80092a6:	4971      	ldr	r1, [pc, #452]	; (800946c <MCU_ProcessModuleStatus1+0x4fc>)
 80092a8:	4618      	mov	r0, r3
 80092aa:	f00a fcef 	bl	8013c8c <siprintf>
 80092ae:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 80092b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092b4:	4a6c      	ldr	r2, [pc, #432]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 80092b6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	4413      	add	r3, r2
 80092c0:	3314      	adds	r3, #20
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 f90f 	bl	80004e8 <__aeabi_i2d>
 80092ca:	a361      	add	r3, pc, #388	; (adr r3, 8009450 <MCU_ProcessModuleStatus1+0x4e0>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f7 f974 	bl	80005bc <__aeabi_dmul>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4610      	mov	r0, r2
 80092da:	4619      	mov	r1, r3
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	f7f6 ffb4 	bl	8000250 <__adddf3>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	f7f7 fc5c 	bl	8000bac <__aeabi_d2f>
 80092f4:	4603      	mov	r3, r0
 80092f6:	643b      	str	r3, [r7, #64]	; 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 80092f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092fc:	4a5a      	ldr	r2, [pc, #360]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 80092fe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	4413      	add	r3, r2
 8009308:	3316      	adds	r3, #22
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	4618      	mov	r0, r3
 800930e:	f7f7 f8eb 	bl	80004e8 <__aeabi_i2d>
 8009312:	a351      	add	r3, pc, #324	; (adr r3, 8009458 <MCU_ProcessModuleStatus1+0x4e8>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f7 f950 	bl	80005bc <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	a34e      	add	r3, pc, #312	; (adr r3, 8009460 <MCU_ProcessModuleStatus1+0x4f0>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ff8f 	bl	800024c <__aeabi_dsub>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f7f7 fc39 	bl	8000bac <__aeabi_d2f>
 800933a:	4603      	mov	r3, r0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 800933e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009342:	4a49      	ldr	r2, [pc, #292]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 8009344:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	332b      	adds	r3, #43	; 0x2b
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f7f7 f8c8 	bl	80004e8 <__aeabi_i2d>
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	4b44      	ldr	r3, [pc, #272]	; (8009470 <MCU_ProcessModuleStatus1+0x500>)
 800935e:	f7f7 f92d 	bl	80005bc <__aeabi_dmul>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4610      	mov	r0, r2
 8009368:	4619      	mov	r1, r3
 800936a:	f04f 0200 	mov.w	r2, #0
 800936e:	f04f 0300 	mov.w	r3, #0
 8009372:	f7f6 ff6d 	bl	8000250 <__adddf3>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4610      	mov	r0, r2
 800937c:	4619      	mov	r1, r3
 800937e:	f7f7 fc15 	bl	8000bac <__aeabi_d2f>
 8009382:	4603      	mov	r3, r0
 8009384:	63bb      	str	r3, [r7, #56]	; 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 8009386:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800938a:	4a37      	ldr	r2, [pc, #220]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 800938c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	332c      	adds	r3, #44	; 0x2c
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7f7 f8a4 	bl	80004e8 <__aeabi_i2d>
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	4b32      	ldr	r3, [pc, #200]	; (8009470 <MCU_ProcessModuleStatus1+0x500>)
 80093a6:	f7f7 f909 	bl	80005bc <__aeabi_dmul>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4610      	mov	r0, r2
 80093b0:	4619      	mov	r1, r3
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	f7f6 ff49 	bl	8000250 <__adddf3>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4610      	mov	r0, r2
 80093c4:	4619      	mov	r1, r3
 80093c6:	f7f7 fbf1 	bl	8000bac <__aeabi_d2f>
 80093ca:	4603      	mov	r3, r0
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 80093ce:	4b29      	ldr	r3, [pc, #164]	; (8009474 <MCU_ProcessModuleStatus1+0x504>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 80093d6:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 80093d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80093dc:	4a22      	ldr	r2, [pc, #136]	; (8009468 <MCU_ProcessModuleStatus1+0x4f8>)
 80093de:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	332d      	adds	r3, #45	; 0x2d
 80093ea:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 80093ec:	461e      	mov	r6, r3
 80093ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80093f0:	f7f7 f88c 	bl	800050c <__aeabi_f2d>
 80093f4:	4604      	mov	r4, r0
 80093f6:	460d      	mov	r5, r1
 80093f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093fa:	f7f7 f887 	bl	800050c <__aeabi_f2d>
 80093fe:	4680      	mov	r8, r0
 8009400:	4689      	mov	r9, r1
 8009402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009404:	f7f7 f882 	bl	800050c <__aeabi_f2d>
 8009408:	4682      	mov	sl, r0
 800940a:	468b      	mov	fp, r1
 800940c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800940e:	f7f7 f87d 	bl	800050c <__aeabi_f2d>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	f107 011c 	add.w	r1, r7, #28
 800941a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800941e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8009422:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009426:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800942a:	9601      	str	r6, [sp, #4]
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	460b      	mov	r3, r1
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4910      	ldr	r1, [pc, #64]	; (8009478 <MCU_ProcessModuleStatus1+0x508>)
 8009438:	4810      	ldr	r0, [pc, #64]	; (800947c <MCU_ProcessModuleStatus1+0x50c>)
 800943a:	f00a fc27 	bl	8013c8c <siprintf>
      serialOut(tempBuffer);
 800943e:	480f      	ldr	r0, [pc, #60]	; (800947c <MCU_ProcessModuleStatus1+0x50c>)
 8009440:	f7fb ff8e 	bl	8005360 <serialOut>
}
 8009444:	bf00      	nop
 8009446:	374c      	adds	r7, #76	; 0x4c
 8009448:	46bd      	mov	sp, r7
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	bf00      	nop
 8009450:	eb851eb8 	.word	0xeb851eb8
 8009454:	3f8eb851 	.word	0x3f8eb851
 8009458:	47ae147b 	.word	0x47ae147b
 800945c:	3f947ae1 	.word	0x3f947ae1
 8009460:	47ae147b 	.word	0x47ae147b
 8009464:	40847ae1 	.word	0x40847ae1
 8009468:	20000de4 	.word	0x20000de4
 800946c:	08017c28 	.word	0x08017c28
 8009470:	3fe00000 	.word	0x3fe00000
 8009474:	20000d94 	.word	0x20000d94
 8009478:	08017c54 	.word	0x08017c54
 800947c:	20000b64 	.word	0x20000b64

08009480 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	b091      	sub	sp, #68	; 0x44
 8009486:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 8009488:	1d3b      	adds	r3, r7, #4
 800948a:	2208      	movs	r2, #8
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f009 fbea 	bl	8012c68 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 8009494:	4aaa      	ldr	r2, [pc, #680]	; (8009740 <MCU_ProcessModuleStatus2+0x2c0>)
 8009496:	1d3b      	adds	r3, r7, #4
 8009498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800949c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80094a0:	4ba8      	ldr	r3, [pc, #672]	; (8009744 <MCU_ProcessModuleStatus2+0x2c4>)
 80094a2:	7d1b      	ldrb	r3, [r3, #20]
 80094a4:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 80094a6:	2300      	movs	r3, #0
 80094a8:	77bb      	strb	r3, [r7, #30]
 80094aa:	e015      	b.n	80094d8 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80094ac:	4ba6      	ldr	r3, [pc, #664]	; (8009748 <MCU_ProcessModuleStatus2+0x2c8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80094b4:	7fbb      	ldrb	r3, [r7, #30]
 80094b6:	49a5      	ldr	r1, [pc, #660]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 80094b8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80094bc:	fb00 f303 	mul.w	r3, r0, r3
 80094c0:	440b      	add	r3, r1
 80094c2:	3308      	adds	r3, #8
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d101      	bne.n	80094d2 <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 80094ce:	7fbb      	ldrb	r3, [r7, #30]
 80094d0:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 80094d2:	7fbb      	ldrb	r3, [r7, #30]
 80094d4:	3301      	adds	r3, #1
 80094d6:	77bb      	strb	r3, [r7, #30]
 80094d8:	4b9a      	ldr	r3, [pc, #616]	; (8009744 <MCU_ProcessModuleStatus2+0x2c4>)
 80094da:	7d1b      	ldrb	r3, [r3, #20]
 80094dc:	7fba      	ldrb	r2, [r7, #30]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d3e4      	bcc.n	80094ac <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 80094e2:	4b98      	ldr	r3, [pc, #608]	; (8009744 <MCU_ProcessModuleStatus2+0x2c4>)
 80094e4:	7d1b      	ldrb	r3, [r3, #20]
 80094e6:	7ffa      	ldrb	r2, [r7, #31]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d10e      	bne.n	800950a <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 80094ec:	4b98      	ldr	r3, [pc, #608]	; (8009750 <MCU_ProcessModuleStatus2+0x2d0>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	f040 8114 	bne.w	8009722 <MCU_ProcessModuleStatus2+0x2a2>
 80094fa:	4996      	ldr	r1, [pc, #600]	; (8009754 <MCU_ProcessModuleStatus2+0x2d4>)
 80094fc:	4896      	ldr	r0, [pc, #600]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 80094fe:	f00a fbc5 	bl	8013c8c <siprintf>
 8009502:	4895      	ldr	r0, [pc, #596]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 8009504:	f7fb ff2c 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 8009508:	e10b      	b.n	8009722 <MCU_ProcessModuleStatus2+0x2a2>
    module[moduleIndex].statusPending = false;
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	4a8f      	ldr	r2, [pc, #572]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800950e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	4413      	add	r3, r2
 8009518:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	8938      	ldrh	r0, [r7, #8]
 8009524:	4a89      	ldr	r2, [pc, #548]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009526:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800952a:	fb01 f303 	mul.w	r3, r1, r3
 800952e:	4413      	add	r3, r2
 8009530:	3322      	adds	r3, #34	; 0x22
 8009532:	4602      	mov	r2, r0
 8009534:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 8009536:	7ffb      	ldrb	r3, [r7, #31]
 8009538:	88f8      	ldrh	r0, [r7, #6]
 800953a:	4a84      	ldr	r2, [pc, #528]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800953c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	4413      	add	r3, r2
 8009546:	331e      	adds	r3, #30
 8009548:	4602      	mov	r2, r0
 800954a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800954c:	7ffb      	ldrb	r3, [r7, #31]
 800954e:	88b8      	ldrh	r0, [r7, #4]
 8009550:	4a7e      	ldr	r2, [pc, #504]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009552:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009556:	fb01 f303 	mul.w	r3, r1, r3
 800955a:	4413      	add	r3, r2
 800955c:	3320      	adds	r3, #32
 800955e:	4602      	mov	r2, r0
 8009560:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 8009562:	7ffb      	ldrb	r3, [r7, #31]
 8009564:	8978      	ldrh	r0, [r7, #10]
 8009566:	4a79      	ldr	r2, [pc, #484]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009568:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	3324      	adds	r3, #36	; 0x24
 8009574:	4602      	mov	r2, r0
 8009576:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009578:	4b78      	ldr	r3, [pc, #480]	; (800975c <MCU_ProcessModuleStatus2+0x2dc>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	7ffb      	ldrb	r3, [r7, #31]
 800957e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009580:	4972      	ldr	r1, [pc, #456]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009582:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009586:	fb00 f303 	mul.w	r3, r0, r3
 800958a:	440b      	add	r3, r1
 800958c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009590:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009592:	7ffb      	ldrb	r3, [r7, #31]
 8009594:	4a72      	ldr	r2, [pc, #456]	; (8009760 <MCU_ProcessModuleStatus2+0x2e0>)
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	496c      	ldr	r1, [pc, #432]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800959a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800959e:	fb00 f303 	mul.w	r3, r0, r3
 80095a2:	440b      	add	r3, r1
 80095a4:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80095a8:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80095aa:	4b69      	ldr	r3, [pc, #420]	; (8009750 <MCU_ProcessModuleStatus2+0x2d0>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80b5 	beq.w	8009722 <MCU_ProcessModuleStatus2+0x2a2>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	4a64      	ldr	r2, [pc, #400]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 80095bc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	4413      	add	r3, r2
 80095c6:	3322      	adds	r3, #34	; 0x22
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f6 ff8c 	bl	80004e8 <__aeabi_i2d>
 80095d0:	a357      	add	r3, pc, #348	; (adr r3, 8009730 <MCU_ProcessModuleStatus2+0x2b0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f6 fff1 	bl	80005bc <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	f7f6 fe31 	bl	8000250 <__adddf3>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4610      	mov	r0, r2
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7f7 fad9 	bl	8000bac <__aeabi_d2f>
 80095fa:	4603      	mov	r3, r0
 80095fc:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 80095fe:	7ffb      	ldrb	r3, [r7, #31]
 8009600:	4a52      	ldr	r2, [pc, #328]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009602:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	331e      	adds	r3, #30
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	4618      	mov	r0, r3
 8009612:	f7f6 ff69 	bl	80004e8 <__aeabi_i2d>
 8009616:	a346      	add	r3, pc, #280	; (adr r3, 8009730 <MCU_ProcessModuleStatus2+0x2b0>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7f6 ffce 	bl	80005bc <__aeabi_dmul>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4610      	mov	r0, r2
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	f7f6 fe0e 	bl	8000250 <__adddf3>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4610      	mov	r0, r2
 800963a:	4619      	mov	r1, r3
 800963c:	f7f7 fab6 	bl	8000bac <__aeabi_d2f>
 8009640:	4603      	mov	r3, r0
 8009642:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 8009644:	7ffb      	ldrb	r3, [r7, #31]
 8009646:	4a41      	ldr	r2, [pc, #260]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 8009648:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	4413      	add	r3, r2
 8009652:	3320      	adds	r3, #32
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f6 ff46 	bl	80004e8 <__aeabi_i2d>
 800965c:	a334      	add	r3, pc, #208	; (adr r3, 8009730 <MCU_ProcessModuleStatus2+0x2b0>)
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	f7f6 ffab 	bl	80005bc <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	f04f 0300 	mov.w	r3, #0
 8009676:	f7f6 fdeb 	bl	8000250 <__adddf3>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	f7f7 fa93 	bl	8000bac <__aeabi_d2f>
 8009686:	4603      	mov	r3, r0
 8009688:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 800968a:	7ffb      	ldrb	r3, [r7, #31]
 800968c:	4a2f      	ldr	r2, [pc, #188]	; (800974c <MCU_ProcessModuleStatus2+0x2cc>)
 800968e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	3324      	adds	r3, #36	; 0x24
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7f6 ff23 	bl	80004e8 <__aeabi_i2d>
 80096a2:	a325      	add	r3, pc, #148	; (adr r3, 8009738 <MCU_ProcessModuleStatus2+0x2b8>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 ff88 	bl	80005bc <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4610      	mov	r0, r2
 80096b2:	4619      	mov	r1, r3
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	f7f6 fdc8 	bl	8000250 <__adddf3>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f7 fa70 	bl	8000bac <__aeabi_d2f>
 80096cc:	4603      	mov	r3, r0
 80096ce:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 80096d0:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <MCU_ProcessModuleStatus2+0x2c8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 80096d8:	461e      	mov	r6, r3
 80096da:	69b8      	ldr	r0, [r7, #24]
 80096dc:	f7f6 ff16 	bl	800050c <__aeabi_f2d>
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	f7f6 ff11 	bl	800050c <__aeabi_f2d>
 80096ea:	4680      	mov	r8, r0
 80096ec:	4689      	mov	r9, r1
 80096ee:	6938      	ldr	r0, [r7, #16]
 80096f0:	f7f6 ff0c 	bl	800050c <__aeabi_f2d>
 80096f4:	4682      	mov	sl, r0
 80096f6:	468b      	mov	fp, r1
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7f6 ff07 	bl	800050c <__aeabi_f2d>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009706:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800970a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800970e:	e9cd 4500 	strd	r4, r5, [sp]
 8009712:	4632      	mov	r2, r6
 8009714:	4913      	ldr	r1, [pc, #76]	; (8009764 <MCU_ProcessModuleStatus2+0x2e4>)
 8009716:	4810      	ldr	r0, [pc, #64]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 8009718:	f00a fab8 	bl	8013c8c <siprintf>
      serialOut(tempBuffer);
 800971c:	480e      	ldr	r0, [pc, #56]	; (8009758 <MCU_ProcessModuleStatus2+0x2d8>)
 800971e:	f7fb fe1f 	bl	8005360 <serialOut>
}
 8009722:	bf00      	nop
 8009724:	3724      	adds	r7, #36	; 0x24
 8009726:	46bd      	mov	sp, r7
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	f3af 8000 	nop.w
 8009730:	d2f1a9fc 	.word	0xd2f1a9fc
 8009734:	3f50624d 	.word	0x3f50624d
 8009738:	eb851eb8 	.word	0xeb851eb8
 800973c:	3f8eb851 	.word	0x3f8eb851
 8009740:	20000da0 	.word	0x20000da0
 8009744:	2000a664 	.word	0x2000a664
 8009748:	20000d94 	.word	0x20000d94
 800974c:	20000de4 	.word	0x20000de4
 8009750:	2000000c 	.word	0x2000000c
 8009754:	08017cd4 	.word	0x08017cd4
 8009758:	20000b64 	.word	0x20000b64
 800975c:	200005d8 	.word	0x200005d8
 8009760:	20000d20 	.word	0x20000d20
 8009764:	08017d14 	.word	0x08017d14

08009768 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 8009768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800976c:	b08d      	sub	sp, #52	; 0x34
 800976e:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 8009770:	463b      	mov	r3, r7
 8009772:	2208      	movs	r2, #8
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f009 fa76 	bl	8012c68 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 800977c:	4a8e      	ldr	r2, [pc, #568]	; (80099b8 <MCU_ProcessModuleStatus3+0x250>)
 800977e:	463b      	mov	r3, r7
 8009780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009784:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009788:	4b8c      	ldr	r3, [pc, #560]	; (80099bc <MCU_ProcessModuleStatus3+0x254>)
 800978a:	7d1b      	ldrb	r3, [r3, #20]
 800978c:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800978e:	2300      	movs	r3, #0
 8009790:	75bb      	strb	r3, [r7, #22]
 8009792:	e015      	b.n	80097c0 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009794:	4b8a      	ldr	r3, [pc, #552]	; (80099c0 <MCU_ProcessModuleStatus3+0x258>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800979c:	7dbb      	ldrb	r3, [r7, #22]
 800979e:	4989      	ldr	r1, [pc, #548]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 80097a0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80097a4:	fb00 f303 	mul.w	r3, r0, r3
 80097a8:	440b      	add	r3, r1
 80097aa:	3308      	adds	r3, #8
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d101      	bne.n	80097ba <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 80097b6:	7dbb      	ldrb	r3, [r7, #22]
 80097b8:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80097ba:	7dbb      	ldrb	r3, [r7, #22]
 80097bc:	3301      	adds	r3, #1
 80097be:	75bb      	strb	r3, [r7, #22]
 80097c0:	4b7e      	ldr	r3, [pc, #504]	; (80099bc <MCU_ProcessModuleStatus3+0x254>)
 80097c2:	7d1b      	ldrb	r3, [r3, #20]
 80097c4:	7dba      	ldrb	r2, [r7, #22]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d3e4      	bcc.n	8009794 <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 80097ca:	4b7c      	ldr	r3, [pc, #496]	; (80099bc <MCU_ProcessModuleStatus3+0x254>)
 80097cc:	7d1b      	ldrb	r3, [r3, #20]
 80097ce:	7dfa      	ldrb	r2, [r7, #23]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d10e      	bne.n	80097f2 <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 80097d4:	4b7c      	ldr	r3, [pc, #496]	; (80099c8 <MCU_ProcessModuleStatus3+0x260>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	2b03      	cmp	r3, #3
 80097de:	f040 80dc 	bne.w	800999a <MCU_ProcessModuleStatus3+0x232>
 80097e2:	497a      	ldr	r1, [pc, #488]	; (80099cc <MCU_ProcessModuleStatus3+0x264>)
 80097e4:	487a      	ldr	r0, [pc, #488]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 80097e6:	f00a fa51 	bl	8013c8c <siprintf>
 80097ea:	4879      	ldr	r0, [pc, #484]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 80097ec:	f7fb fdb8 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 80097f0:	e0d3      	b.n	800999a <MCU_ProcessModuleStatus3+0x232>
    module[moduleIndex].statusPending = false;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	4a73      	ldr	r2, [pc, #460]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 80097f6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	88b8      	ldrh	r0, [r7, #4]
 800980c:	4a6d      	ldr	r2, [pc, #436]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800980e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009812:	fb01 f303 	mul.w	r3, r1, r3
 8009816:	4413      	add	r3, r2
 8009818:	331c      	adds	r3, #28
 800981a:	4602      	mov	r2, r0
 800981c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	8878      	ldrh	r0, [r7, #2]
 8009822:	4a68      	ldr	r2, [pc, #416]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 8009824:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009828:	fb01 f303 	mul.w	r3, r1, r3
 800982c:	4413      	add	r3, r2
 800982e:	3318      	adds	r3, #24
 8009830:	4602      	mov	r2, r0
 8009832:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	8838      	ldrh	r0, [r7, #0]
 8009838:	4a62      	ldr	r2, [pc, #392]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800983a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	331a      	adds	r3, #26
 8009846:	4602      	mov	r2, r0
 8009848:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800984a:	4b62      	ldr	r3, [pc, #392]	; (80099d4 <MCU_ProcessModuleStatus3+0x26c>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009852:	495c      	ldr	r1, [pc, #368]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 8009854:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009858:	fb00 f303 	mul.w	r3, r0, r3
 800985c:	440b      	add	r3, r1
 800985e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009862:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	4a5c      	ldr	r2, [pc, #368]	; (80099d8 <MCU_ProcessModuleStatus3+0x270>)
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	4956      	ldr	r1, [pc, #344]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800986c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009870:	fb00 f303 	mul.w	r3, r0, r3
 8009874:	440b      	add	r3, r1
 8009876:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800987a:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800987c:	4b52      	ldr	r3, [pc, #328]	; (80099c8 <MCU_ProcessModuleStatus3+0x260>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8088 	beq.w	800999a <MCU_ProcessModuleStatus3+0x232>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	4a4d      	ldr	r2, [pc, #308]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 800988e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	331c      	adds	r3, #28
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	4618      	mov	r0, r3
 800989e:	f7f6 fe23 	bl	80004e8 <__aeabi_i2d>
 80098a2:	a341      	add	r3, pc, #260	; (adr r3, 80099a8 <MCU_ProcessModuleStatus3+0x240>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7f6 fe88 	bl	80005bc <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4610      	mov	r0, r2
 80098b2:	4619      	mov	r1, r3
 80098b4:	a33e      	add	r3, pc, #248	; (adr r3, 80099b0 <MCU_ProcessModuleStatus3+0x248>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f7f6 fcc7 	bl	800024c <__aeabi_dsub>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7f7 f971 	bl	8000bac <__aeabi_d2f>
 80098ca:	4603      	mov	r3, r0
 80098cc:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	4a3c      	ldr	r2, [pc, #240]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 80098d2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80098d6:	fb01 f303 	mul.w	r3, r1, r3
 80098da:	4413      	add	r3, r2
 80098dc:	3318      	adds	r3, #24
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f6 fe01 	bl	80004e8 <__aeabi_i2d>
 80098e6:	a330      	add	r3, pc, #192	; (adr r3, 80099a8 <MCU_ProcessModuleStatus3+0x240>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 fe66 	bl	80005bc <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4610      	mov	r0, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	a32d      	add	r3, pc, #180	; (adr r3, 80099b0 <MCU_ProcessModuleStatus3+0x248>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 fca5 	bl	800024c <__aeabi_dsub>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	f7f7 f94f 	bl	8000bac <__aeabi_d2f>
 800990e:	4603      	mov	r3, r0
 8009910:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	4a2b      	ldr	r2, [pc, #172]	; (80099c4 <MCU_ProcessModuleStatus3+0x25c>)
 8009916:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	331a      	adds	r3, #26
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f7f6 fddf 	bl	80004e8 <__aeabi_i2d>
 800992a:	a31f      	add	r3, pc, #124	; (adr r3, 80099a8 <MCU_ProcessModuleStatus3+0x240>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f7f6 fe44 	bl	80005bc <__aeabi_dmul>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4610      	mov	r0, r2
 800993a:	4619      	mov	r1, r3
 800993c:	a31c      	add	r3, pc, #112	; (adr r3, 80099b0 <MCU_ProcessModuleStatus3+0x248>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fc83 	bl	800024c <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	f7f7 f92d 	bl	8000bac <__aeabi_d2f>
 8009952:	4603      	mov	r3, r0
 8009954:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 8009956:	4b1a      	ldr	r3, [pc, #104]	; (80099c0 <MCU_ProcessModuleStatus3+0x258>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800995e:	461e      	mov	r6, r3
 8009960:	6938      	ldr	r0, [r7, #16]
 8009962:	f7f6 fdd3 	bl	800050c <__aeabi_f2d>
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7f6 fdce 	bl	800050c <__aeabi_f2d>
 8009970:	4680      	mov	r8, r0
 8009972:	4689      	mov	r9, r1
 8009974:	68b8      	ldr	r0, [r7, #8]
 8009976:	f7f6 fdc9 	bl	800050c <__aeabi_f2d>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009982:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009986:	e9cd 4500 	strd	r4, r5, [sp]
 800998a:	4632      	mov	r2, r6
 800998c:	4913      	ldr	r1, [pc, #76]	; (80099dc <MCU_ProcessModuleStatus3+0x274>)
 800998e:	4810      	ldr	r0, [pc, #64]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 8009990:	f00a f97c 	bl	8013c8c <siprintf>
      serialOut(tempBuffer);
 8009994:	480e      	ldr	r0, [pc, #56]	; (80099d0 <MCU_ProcessModuleStatus3+0x268>)
 8009996:	f7fb fce3 	bl	8005360 <serialOut>
}
 800999a:	bf00      	nop
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099a4:	f3af 8000 	nop.w
 80099a8:	47ae147b 	.word	0x47ae147b
 80099ac:	3f847ae1 	.word	0x3f847ae1
 80099b0:	cccccccd 	.word	0xcccccccd
 80099b4:	404baccc 	.word	0x404baccc
 80099b8:	20000da0 	.word	0x20000da0
 80099bc:	2000a664 	.word	0x2000a664
 80099c0:	20000d94 	.word	0x20000d94
 80099c4:	20000de4 	.word	0x20000de4
 80099c8:	2000000c 	.word	0x2000000c
 80099cc:	08017da4 	.word	0x08017da4
 80099d0:	20000b64 	.word	0x20000b64
 80099d4:	200005d8 	.word	0x200005d8
 80099d8:	20000d20 	.word	0x20000d20
 80099dc:	08017de4 	.word	0x08017de4

080099e0 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b094      	sub	sp, #80	; 0x50
 80099e4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 80099e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099ea:	2208      	movs	r2, #8
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f009 f93a 	bl	8012c68 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 80099f4:	4a31      	ldr	r2, [pc, #196]	; (8009abc <MCU_ProcessCellCommStatus1+0xdc>)
 80099f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099fe:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 8009a02:	4b2f      	ldr	r3, [pc, #188]	; (8009ac0 <MCU_ProcessCellCommStatus1+0xe0>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d052      	beq.n	8009ab4 <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8009a0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009a12:	2bff      	cmp	r3, #255	; 0xff
 8009a14:	d10a      	bne.n	8009a2c <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 8009a16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 8009a1e:	f107 0318 	add.w	r3, r7, #24
 8009a22:	4928      	ldr	r1, [pc, #160]	; (8009ac4 <MCU_ProcessCellCommStatus1+0xe4>)
 8009a24:	4618      	mov	r0, r3
 8009a26:	f00a f931 	bl	8013c8c <siprintf>
 8009a2a:	e019      	b.n	8009a60 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 8009a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d109      	bne.n	8009a4c <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 8009a38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f107 0318 	add.w	r3, r7, #24
 8009a42:	4921      	ldr	r1, [pc, #132]	; (8009ac8 <MCU_ProcessCellCommStatus1+0xe8>)
 8009a44:	4618      	mov	r0, r3
 8009a46:	f00a f921 	bl	8013c8c <siprintf>
 8009a4a:	e009      	b.n	8009a60 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 8009a4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009a50:	461a      	mov	r2, r3
 8009a52:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009a56:	f107 0018 	add.w	r0, r7, #24
 8009a5a:	491c      	ldr	r1, [pc, #112]	; (8009acc <MCU_ProcessCellCommStatus1+0xec>)
 8009a5c:	f00a f916 	bl	8013c8c <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 8009a60:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009a64:	2bff      	cmp	r3, #255	; 0xff
 8009a66:	d105      	bne.n	8009a74 <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 8009a68:	1d3b      	adds	r3, r7, #4
 8009a6a:	4919      	ldr	r1, [pc, #100]	; (8009ad0 <MCU_ProcessCellCommStatus1+0xf0>)
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f00a f90d 	bl	8013c8c <siprintf>
 8009a72:	e007      	b.n	8009a84 <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 8009a74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009a78:	461a      	mov	r2, r3
 8009a7a:	1d3b      	adds	r3, r7, #4
 8009a7c:	4915      	ldr	r1, [pc, #84]	; (8009ad4 <MCU_ProcessCellCommStatus1+0xf4>)
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f00a f904 	bl	8013c8c <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8009a84:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <MCU_ProcessCellCommStatus1+0xf8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8009a8c:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8009a8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8009a90:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 8009a92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 8009a96:	f107 0218 	add.w	r2, r7, #24
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	1d3b      	adds	r3, r7, #4
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	9100      	str	r1, [sp, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	490d      	ldr	r1, [pc, #52]	; (8009adc <MCU_ProcessCellCommStatus1+0xfc>)
 8009aa8:	480d      	ldr	r0, [pc, #52]	; (8009ae0 <MCU_ProcessCellCommStatus1+0x100>)
 8009aaa:	f00a f8ef 	bl	8013c8c <siprintf>

    serialOut(tempBuffer);
 8009aae:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <MCU_ProcessCellCommStatus1+0x100>)
 8009ab0:	f7fb fc56 	bl	8005360 <serialOut>
  }
}
 8009ab4:	bf00      	nop
 8009ab6:	3740      	adds	r7, #64	; 0x40
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000da0 	.word	0x20000da0
 8009ac0:	2000000c 	.word	0x2000000c
 8009ac4:	08017e50 	.word	0x08017e50
 8009ac8:	08017e5c 	.word	0x08017e5c
 8009acc:	08017e68 	.word	0x08017e68
 8009ad0:	08017e74 	.word	0x08017e74
 8009ad4:	08017e7c 	.word	0x08017e7c
 8009ad8:	20000d94 	.word	0x20000d94
 8009adc:	08017e90 	.word	0x08017e90
 8009ae0:	20000b64 	.word	0x20000b64
 8009ae4:	00000000 	.word	0x00000000

08009ae8 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 8009ae8:	b5b0      	push	{r4, r5, r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	4603      	mov	r3, r0
 8009af0:	460a      	mov	r2, r1
 8009af2:	71fb      	strb	r3, [r7, #7]
 8009af4:	4613      	mov	r3, r2
 8009af6:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // request cell detail packet for cell 0
  stateChange.moduleId = moduleId;
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 8009afc:	79bb      	ldrb	r3, [r7, #6]
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	7a7b      	ldrb	r3, [r7, #9]
 8009b06:	f362 0303 	bfi	r3, r2, #0, #4
 8009b0a:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 8009b0c:	7a7b      	ldrb	r3, [r7, #9]
 8009b0e:	f36f 1307 	bfc	r3, #4, #4
 8009b12:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 8009b14:	4b4c      	ldr	r3, [pc, #304]	; (8009c48 <MCU_TransmitState+0x160>)
 8009b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b1a:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 8009b1c:	4b4b      	ldr	r3, [pc, #300]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8009b22:	4b4a      	ldr	r3, [pc, #296]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009b28:	4b48      	ldr	r3, [pc, #288]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	609a      	str	r2, [r3, #8]
 8009b2e:	68bb      	ldr	r3, [r7, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 8009b30:	4a47      	ldr	r2, [pc, #284]	; (8009c50 <MCU_TransmitState+0x168>)
 8009b32:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 8009b34:	4a45      	ldr	r2, [pc, #276]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b36:	8813      	ldrh	r3, [r2, #0]
 8009b38:	f240 5114 	movw	r1, #1300	; 0x514
 8009b3c:	f361 030a 	bfi	r3, r1, #0, #11
 8009b40:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 8009b42:	79fa      	ldrb	r2, [r7, #7]
 8009b44:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009b48:	4940      	ldr	r1, [pc, #256]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b4a:	680b      	ldr	r3, [r1, #0]
 8009b4c:	f362 23dc 	bfi	r3, r2, #11, #18
 8009b50:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009b52:	4a3e      	ldr	r2, [pc, #248]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b54:	7913      	ldrb	r3, [r2, #4]
 8009b56:	f36f 1386 	bfc	r3, #6, #1
 8009b5a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 8009b5c:	4a3b      	ldr	r2, [pc, #236]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b5e:	7913      	ldrb	r3, [r2, #4]
 8009b60:	2104      	movs	r1, #4
 8009b62:	f361 0303 	bfi	r3, r1, #0, #4
 8009b66:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009b68:	4a38      	ldr	r2, [pc, #224]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b6a:	7913      	ldrb	r3, [r2, #4]
 8009b6c:	f36f 13c7 	bfc	r3, #7, #1
 8009b70:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009b72:	4a36      	ldr	r2, [pc, #216]	; (8009c4c <MCU_TransmitState+0x164>)
 8009b74:	7913      	ldrb	r3, [r2, #4]
 8009b76:	f043 0310 	orr.w	r3, r3, #16
 8009b7a:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 8009b7c:	4b35      	ldr	r3, [pc, #212]	; (8009c54 <MCU_TransmitState+0x16c>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d019      	beq.n	8009bbc <MCU_TransmitState+0xd4>
 8009b88:	79fc      	ldrb	r4, [r7, #7]
 8009b8a:	79bd      	ldrb	r5, [r7, #6]
 8009b8c:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <MCU_TransmitState+0x160>)
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7f6 fca8 	bl	80004e8 <__aeabi_i2d>
 8009b98:	a329      	add	r3, pc, #164	; (adr r3, 8009c40 <MCU_TransmitState+0x158>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fd0d 	bl	80005bc <__aeabi_dmul>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8009baa:	462b      	mov	r3, r5
 8009bac:	4622      	mov	r2, r4
 8009bae:	492a      	ldr	r1, [pc, #168]	; (8009c58 <MCU_TransmitState+0x170>)
 8009bb0:	482a      	ldr	r0, [pc, #168]	; (8009c5c <MCU_TransmitState+0x174>)
 8009bb2:	f00a f86b 	bl	8013c8c <siprintf>
 8009bb6:	4829      	ldr	r0, [pc, #164]	; (8009c5c <MCU_TransmitState+0x174>)
 8009bb8:	f7fb fbd2 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7fe fa31 	bl	8008024 <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f979 	bl	8009ebc <MCU_ModuleIndexFromId>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 8009bce:	4b1e      	ldr	r3, [pc, #120]	; (8009c48 <MCU_TransmitState+0x160>)
 8009bd0:	7d1b      	ldrb	r3, [r3, #20]
 8009bd2:	7bfa      	ldrb	r2, [r7, #15]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d02c      	beq.n	8009c32 <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <MCU_TransmitState+0x178>)
 8009bdc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009be0:	fb01 f303 	mul.w	r3, r1, r3
 8009be4:	4413      	add	r3, r2
 8009be6:	3329      	adds	r3, #41	; 0x29
 8009be8:	79ba      	ldrb	r2, [r7, #6]
 8009bea:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4a1c      	ldr	r2, [pc, #112]	; (8009c60 <MCU_TransmitState+0x178>)
 8009bf0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	332a      	adds	r3, #42	; 0x2a
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 8009c00:	4b18      	ldr	r3, [pc, #96]	; (8009c64 <MCU_TransmitState+0x17c>)
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c08:	4915      	ldr	r1, [pc, #84]	; (8009c60 <MCU_TransmitState+0x178>)
 8009c0a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009c0e:	fb00 f303 	mul.w	r3, r0, r3
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8009c18:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	4a12      	ldr	r2, [pc, #72]	; (8009c68 <MCU_TransmitState+0x180>)
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	490f      	ldr	r1, [pc, #60]	; (8009c60 <MCU_TransmitState+0x178>)
 8009c22:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009c26:	fb00 f303 	mul.w	r3, r0, r3
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8009c30:	601a      	str	r2, [r3, #0]
  }
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bdb0      	pop	{r4, r5, r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	eb851eb8 	.word	0xeb851eb8
 8009c44:	3f8eb851 	.word	0x3f8eb851
 8009c48:	2000a664 	.word	0x2000a664
 8009c4c:	20000d38 	.word	0x20000d38
 8009c50:	20000d44 	.word	0x20000d44
 8009c54:	2000000c 	.word	0x2000000c
 8009c58:	08017f14 	.word	0x08017f14
 8009c5c:	20000b64 	.word	0x20000b64
 8009c60:	20000de4 	.word	0x20000de4
 8009c64:	200005d8 	.word	0x200005d8
 8009c68:	20000d20 	.word	0x20000d20

08009c6c <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 8009c6c:	b5b0      	push	{r4, r5, r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 8009c76:	4a85      	ldr	r2, [pc, #532]	; (8009e8c <MCU_ProcessCellDetail+0x220>)
 8009c78:	1d3b      	adds	r3, r7, #4
 8009c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c7e:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 8009c82:	4b83      	ldr	r3, [pc, #524]	; (8009e90 <MCU_ProcessCellDetail+0x224>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d017      	beq.n	8009cbe <MCU_ProcessCellDetail+0x52>
 8009c8e:	4b81      	ldr	r3, [pc, #516]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009c96:	461c      	mov	r4, r3
 8009c98:	797b      	ldrb	r3, [r7, #5]
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	793b      	ldrb	r3, [r7, #4]
 8009c9e:	7aba      	ldrb	r2, [r7, #10]
 8009ca0:	88f9      	ldrh	r1, [r7, #6]
 8009ca2:	8938      	ldrh	r0, [r7, #8]
 8009ca4:	9003      	str	r0, [sp, #12]
 8009ca6:	9102      	str	r1, [sp, #8]
 8009ca8:	9201      	str	r2, [sp, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	462b      	mov	r3, r5
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4979      	ldr	r1, [pc, #484]	; (8009e98 <MCU_ProcessCellDetail+0x22c>)
 8009cb2:	487a      	ldr	r0, [pc, #488]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009cb4:	f009 ffea 	bl	8013c8c <siprintf>
 8009cb8:	4878      	ldr	r0, [pc, #480]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009cba:	f7fb fb51 	bl	8005360 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8009cbe:	4b78      	ldr	r3, [pc, #480]	; (8009ea0 <MCU_ProcessCellDetail+0x234>)
 8009cc0:	7d1b      	ldrb	r3, [r3, #20]
 8009cc2:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	75bb      	strb	r3, [r7, #22]
 8009cc8:	e015      	b.n	8009cf6 <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009cca:	4b72      	ldr	r3, [pc, #456]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009cd2:	7dbb      	ldrb	r3, [r7, #22]
 8009cd4:	4973      	ldr	r1, [pc, #460]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009cd6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009cda:	fb00 f303 	mul.w	r3, r0, r3
 8009cde:	440b      	add	r3, r1
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d101      	bne.n	8009cf0 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 8009cec:	7dbb      	ldrb	r3, [r7, #22]
 8009cee:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	75bb      	strb	r3, [r7, #22]
 8009cf6:	4b6a      	ldr	r3, [pc, #424]	; (8009ea0 <MCU_ProcessCellDetail+0x234>)
 8009cf8:	7d1b      	ldrb	r3, [r3, #20]
 8009cfa:	7dba      	ldrb	r2, [r7, #22]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d3e4      	bcc.n	8009cca <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	7978      	ldrb	r0, [r7, #5]
 8009d04:	4a67      	ldr	r2, [pc, #412]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d06:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	4413      	add	r3, r2
 8009d10:	332d      	adds	r3, #45	; 0x2d
 8009d12:	4602      	mov	r2, r0
 8009d14:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 8009d16:	7dfa      	ldrb	r2, [r7, #23]
 8009d18:	793b      	ldrb	r3, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	7abc      	ldrb	r4, [r7, #10]
 8009d1e:	4961      	ldr	r1, [pc, #388]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d20:	4603      	mov	r3, r0
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	4403      	add	r3, r0
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d2c:	fb00 f202 	mul.w	r2, r0, r2
 8009d30:	4413      	add	r3, r2
 8009d32:	440b      	add	r3, r1
 8009d34:	3332      	adds	r3, #50	; 0x32
 8009d36:	4622      	mov	r2, r4
 8009d38:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 8009d3a:	7dfa      	ldrb	r2, [r7, #23]
 8009d3c:	793b      	ldrb	r3, [r7, #4]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	7afc      	ldrb	r4, [r7, #11]
 8009d42:	4958      	ldr	r1, [pc, #352]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d44:	4603      	mov	r3, r0
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	4403      	add	r3, r0
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d50:	fb00 f202 	mul.w	r2, r0, r2
 8009d54:	4413      	add	r3, r2
 8009d56:	440b      	add	r3, r1
 8009d58:	3333      	adds	r3, #51	; 0x33
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 8009d5e:	7dfa      	ldrb	r2, [r7, #23]
 8009d60:	793b      	ldrb	r3, [r7, #4]
 8009d62:	4618      	mov	r0, r3
 8009d64:	88fc      	ldrh	r4, [r7, #6]
 8009d66:	494f      	ldr	r1, [pc, #316]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d68:	4603      	mov	r3, r0
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	4403      	add	r3, r0
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d74:	fb00 f202 	mul.w	r2, r0, r2
 8009d78:	4413      	add	r3, r2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3330      	adds	r3, #48	; 0x30
 8009d7e:	4622      	mov	r2, r4
 8009d80:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 8009d82:	7dfa      	ldrb	r2, [r7, #23]
 8009d84:	793b      	ldrb	r3, [r7, #4]
 8009d86:	4618      	mov	r0, r3
 8009d88:	893c      	ldrh	r4, [r7, #8]
 8009d8a:	4946      	ldr	r1, [pc, #280]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	4403      	add	r3, r0
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d98:	fb00 f202 	mul.w	r2, r0, r2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	440b      	add	r3, r1
 8009da0:	332e      	adds	r3, #46	; 0x2e
 8009da2:	4622      	mov	r2, r4
 8009da4:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <MCU_ProcessCellDetail+0x23c>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dae:	493d      	ldr	r1, [pc, #244]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009db0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009db4:	fb00 f303 	mul.w	r3, r0, r3
 8009db8:	440b      	add	r3, r1
 8009dba:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009dbe:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	4a3a      	ldr	r2, [pc, #232]	; (8009eac <MCU_ProcessCellDetail+0x240>)
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	4937      	ldr	r1, [pc, #220]	; (8009ea4 <MCU_ProcessCellDetail+0x238>)
 8009dc8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009dcc:	fb00 f303 	mul.w	r3, r0, r3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009dd6:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 8009dd8:	793b      	ldrb	r3, [r7, #4]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	797b      	ldrb	r3, [r7, #5]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	429a      	cmp	r2, r3
 8009de2:	da4f      	bge.n	8009e84 <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 8009de4:	793b      	ldrb	r3, [r7, #4]
 8009de6:	3301      	adds	r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8009dec:	4b30      	ldr	r3, [pc, #192]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009df2:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009df8:	4b2d      	ldr	r3, [pc, #180]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 8009dfe:	4b2d      	ldr	r3, [pc, #180]	; (8009eb4 <MCU_ProcessCellDetail+0x248>)
 8009e00:	461a      	mov	r2, r3
 8009e02:	f107 030c 	add.w	r3, r7, #12
 8009e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e0a:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 8009e0e:	4a28      	ldr	r2, [pc, #160]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e10:	8813      	ldrh	r3, [r2, #0]
 8009e12:	f240 5115 	movw	r1, #1301	; 0x515
 8009e16:	f361 030a 	bfi	r3, r1, #0, #11
 8009e1a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 8009e1c:	4b1d      	ldr	r3, [pc, #116]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 8009e24:	4a22      	ldr	r2, [pc, #136]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	f361 23dc 	bfi	r3, r1, #11, #18
 8009e2c:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009e2e:	4a20      	ldr	r2, [pc, #128]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e30:	7913      	ldrb	r3, [r2, #4]
 8009e32:	f36f 1386 	bfc	r3, #6, #1
 8009e36:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 8009e38:	4a1d      	ldr	r2, [pc, #116]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e3a:	7913      	ldrb	r3, [r2, #4]
 8009e3c:	2102      	movs	r1, #2
 8009e3e:	f361 0303 	bfi	r3, r1, #0, #4
 8009e42:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009e44:	4a1a      	ldr	r2, [pc, #104]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e46:	7913      	ldrb	r3, [r2, #4]
 8009e48:	f36f 13c7 	bfc	r3, #7, #1
 8009e4c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009e4e:	4a18      	ldr	r2, [pc, #96]	; (8009eb0 <MCU_ProcessCellDetail+0x244>)
 8009e50:	7913      	ldrb	r3, [r2, #4]
 8009e52:	f043 0310 	orr.w	r3, r3, #16
 8009e56:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 8009e58:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <MCU_ProcessCellDetail+0x224>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <MCU_ProcessCellDetail+0x212>
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <MCU_ProcessCellDetail+0x228>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	7b7b      	ldrb	r3, [r7, #13]
 8009e70:	4911      	ldr	r1, [pc, #68]	; (8009eb8 <MCU_ProcessCellDetail+0x24c>)
 8009e72:	480a      	ldr	r0, [pc, #40]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009e74:	f009 ff0a 	bl	8013c8c <siprintf>
 8009e78:	4808      	ldr	r0, [pc, #32]	; (8009e9c <MCU_ProcessCellDetail+0x230>)
 8009e7a:	f7fb fa71 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009e7e:	2001      	movs	r0, #1
 8009e80:	f7fe f8d0 	bl	8008024 <MCU_TransmitMessageQueue>
  }
}
 8009e84:	bf00      	nop
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e8c:	20000da0 	.word	0x20000da0
 8009e90:	2000000c 	.word	0x2000000c
 8009e94:	20000d94 	.word	0x20000d94
 8009e98:	08017f4c 	.word	0x08017f4c
 8009e9c:	20000b64 	.word	0x20000b64
 8009ea0:	2000a664 	.word	0x2000a664
 8009ea4:	20000de4 	.word	0x20000de4
 8009ea8:	200005d8 	.word	0x200005d8
 8009eac:	20000d20 	.word	0x20000d20
 8009eb0:	20000d38 	.word	0x20000d38
 8009eb4:	20000d44 	.word	0x20000d44
 8009eb8:	08017fa8 	.word	0x08017fa8

08009ebc <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009ec8:	7d1b      	ldrb	r3, [r3, #20]
 8009eca:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73bb      	strb	r3, [r7, #14]
 8009ed0:	e010      	b.n	8009ef4 <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	4a12      	ldr	r2, [pc, #72]	; (8009f20 <MCU_ModuleIndexFromId+0x64>)
 8009ed6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009eda:	fb01 f303 	mul.w	r3, r1, r3
 8009ede:	4413      	add	r3, r2
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	79fa      	ldrb	r2, [r7, #7]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d101      	bne.n	8009eee <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	73bb      	strb	r3, [r7, #14]
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009ef6:	7d1b      	ldrb	r3, [r3, #20]
 8009ef8:	7bba      	ldrb	r2, [r7, #14]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d3e9      	bcc.n	8009ed2 <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009f00:	7d1b      	ldrb	r3, [r3, #20]
 8009f02:	7bfa      	ldrb	r2, [r7, #15]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d001      	beq.n	8009f0c <MCU_ModuleIndexFromId+0x50>
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	e001      	b.n	8009f10 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 8009f0c:	4b03      	ldr	r3, [pc, #12]	; (8009f1c <MCU_ModuleIndexFromId+0x60>)
 8009f0e:	7d1b      	ldrb	r3, [r3, #20]

}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2000a664 	.word	0x2000a664
 8009f20:	20000de4 	.word	0x20000de4

08009f24 <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8009f2e:	4b32      	ldr	r3, [pc, #200]	; (8009ff8 <MCU_TicksSinceLastMessage+0xd4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 8009f36:	4b31      	ldr	r3, [pc, #196]	; (8009ffc <MCU_TicksSinceLastMessage+0xd8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff ffbc 	bl	8009ebc <MCU_ModuleIndexFromId>
 8009f44:	4603      	mov	r3, r0
 8009f46:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <MCU_TicksSinceLastMessage+0xdc>)
 8009f4a:	7d1b      	ldrb	r3, [r3, #20]
 8009f4c:	7afa      	ldrb	r2, [r7, #11]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d040      	beq.n	8009fd4 <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	4a2b      	ldr	r2, [pc, #172]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009f56:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	4413      	add	r3, r2
 8009f60:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d10d      	bne.n	8009f88 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	4a25      	ldr	r2, [pc, #148]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009f70:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	e023      	b.n	8009fd0 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 8009f88:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <MCU_TicksSinceLastMessage+0xd4>)
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	491d      	ldr	r1, [pc, #116]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009f90:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009f94:	fb00 f303 	mul.w	r3, r0, r3
 8009f98:	440b      	add	r3, r1
 8009f9a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	1ad2      	subs	r2, r2, r3
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <MCU_TicksSinceLastMessage+0xd4>)
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	7af9      	ldrb	r1, [r7, #11]
 8009faa:	4816      	ldr	r0, [pc, #88]	; (800a004 <MCU_TicksSinceLastMessage+0xe0>)
 8009fac:	f240 44c4 	movw	r4, #1220	; 0x4c4
 8009fb0:	fb04 f101 	mul.w	r1, r4, r1
 8009fb4:	4401      	add	r1, r0
 8009fb6:	f201 41b4 	addw	r1, r1, #1204	; 0x4b4
 8009fba:	6809      	ldr	r1, [r1, #0]
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	1a41      	subs	r1, r0, r1
 8009fc0:	3901      	subs	r1, #1
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	441a      	add	r2, r3
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	3301      	adds	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	e00d      	b.n	8009ff0 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <MCU_TicksSinceLastMessage+0xe4>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d106      	bne.n	8009fee <MCU_TicksSinceLastMessage+0xca>
 8009fe0:	490a      	ldr	r1, [pc, #40]	; (800a00c <MCU_TicksSinceLastMessage+0xe8>)
 8009fe2:	480b      	ldr	r0, [pc, #44]	; (800a010 <MCU_TicksSinceLastMessage+0xec>)
 8009fe4:	f009 fe52 	bl	8013c8c <siprintf>
 8009fe8:	4809      	ldr	r0, [pc, #36]	; (800a010 <MCU_TicksSinceLastMessage+0xec>)
 8009fea:	f7fb f9b9 	bl	8005360 <serialOut>
    return 0; // TODO Handle this error
 8009fee:	2300      	movs	r3, #0
  }
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	371c      	adds	r7, #28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd90      	pop	{r4, r7, pc}
 8009ff8:	200005d8 	.word	0x200005d8
 8009ffc:	20000d20 	.word	0x20000d20
 800a000:	2000a664 	.word	0x2000a664
 800a004:	20000de4 	.word	0x20000de4
 800a008:	2000000c 	.word	0x2000000c
 800a00c:	08017fd8 	.word	0x08017fd8
 800a010:	20000b64 	.word	0x20000b64

0800a014 <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800a01e:	4b32      	ldr	r3, [pc, #200]	; (800a0e8 <MCU_TicksSinceLastStateTx+0xd4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800a026:	4b31      	ldr	r3, [pc, #196]	; (800a0ec <MCU_TicksSinceLastStateTx+0xd8>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff ff44 	bl	8009ebc <MCU_ModuleIndexFromId>
 800a034:	4603      	mov	r3, r0
 800a036:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800a038:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <MCU_TicksSinceLastStateTx+0xdc>)
 800a03a:	7d1b      	ldrb	r3, [r3, #20]
 800a03c:	7afa      	ldrb	r2, [r7, #11]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d040      	beq.n	800a0c4 <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	4a2b      	ldr	r2, [pc, #172]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a046:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a04a:	fb01 f303 	mul.w	r3, r1, r3
 800a04e:	4413      	add	r3, r2
 800a050:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10d      	bne.n	800a078 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	4a25      	ldr	r2, [pc, #148]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a060:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e023      	b.n	800a0c0 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800a078:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <MCU_TicksSinceLastStateTx+0xd4>)
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	7afb      	ldrb	r3, [r7, #11]
 800a07e:	491d      	ldr	r1, [pc, #116]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a080:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a084:	fb00 f303 	mul.w	r3, r0, r3
 800a088:	440b      	add	r3, r1
 800a08a:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	1ad2      	subs	r2, r2, r3
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <MCU_TicksSinceLastStateTx+0xd4>)
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	3301      	adds	r3, #1
 800a098:	7af9      	ldrb	r1, [r7, #11]
 800a09a:	4816      	ldr	r0, [pc, #88]	; (800a0f4 <MCU_TicksSinceLastStateTx+0xe0>)
 800a09c:	f240 44c4 	movw	r4, #1220	; 0x4c4
 800a0a0:	fb04 f101 	mul.w	r1, r4, r1
 800a0a4:	4401      	add	r1, r0
 800a0a6:	f201 41bc 	addw	r1, r1, #1212	; 0x4bc
 800a0aa:	6809      	ldr	r1, [r1, #0]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	1a41      	subs	r1, r0, r1
 800a0b0:	3901      	subs	r1, #1
 800a0b2:	fb01 f303 	mul.w	r3, r1, r3
 800a0b6:	441a      	add	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3301      	adds	r3, #1
 800a0be:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	e00d      	b.n	800a0e0 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <MCU_TicksSinceLastStateTx+0xe4>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d106      	bne.n	800a0de <MCU_TicksSinceLastStateTx+0xca>
 800a0d0:	490a      	ldr	r1, [pc, #40]	; (800a0fc <MCU_TicksSinceLastStateTx+0xe8>)
 800a0d2:	480b      	ldr	r0, [pc, #44]	; (800a100 <MCU_TicksSinceLastStateTx+0xec>)
 800a0d4:	f009 fdda 	bl	8013c8c <siprintf>
 800a0d8:	4809      	ldr	r0, [pc, #36]	; (800a100 <MCU_TicksSinceLastStateTx+0xec>)
 800a0da:	f7fb f941 	bl	8005360 <serialOut>
    return 0; // TODO Handle this error
 800a0de:	2300      	movs	r3, #0
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}
 800a0e8:	200005d8 	.word	0x200005d8
 800a0ec:	20000d20 	.word	0x20000d20
 800a0f0:	2000a664 	.word	0x2000a664
 800a0f4:	20000de4 	.word	0x20000de4
 800a0f8:	2000000c 	.word	0x2000000c
 800a0fc:	08018018 	.word	0x08018018
 800a100:	20000b64 	.word	0x20000b64

0800a104 <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a10e:	2300      	movs	r3, #0
 800a110:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a112:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a114:	2301      	movs	r3, #1
 800a116:	73fb      	strb	r3, [r7, #15]
 800a118:	e05d      	b.n	800a1d6 <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800a11a:	4b34      	ldr	r3, [pc, #208]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	e016      	b.n	800a150 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800a122:	f009 fd65 	bl	8013bf0 <rand>
 800a126:	4603      	mov	r3, r0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4a30      	ldr	r2, [pc, #192]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a132:	b2d9      	uxtb	r1, r3
 800a134:	4b2e      	ldr	r3, [pc, #184]	; (800a1f0 <CAN_TestRegisterAccess+0xec>)
 800a136:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a138:	4b2c      	ldr	r3, [pc, #176]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	4b2d      	ldr	r3, [pc, #180]	; (800a1f4 <CAN_TestRegisterAccess+0xf0>)
 800a140:	21ff      	movs	r1, #255	; 0xff
 800a142:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800a144:	4b29      	ldr	r3, [pc, #164]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	4b26      	ldr	r3, [pc, #152]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	7bfa      	ldrb	r2, [r7, #15]
 800a156:	429a      	cmp	r2, r3
 800a158:	d8e3      	bhi.n	800a122 <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800a15a:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	79f8      	ldrb	r0, [r7, #7]
 800a162:	4a23      	ldr	r2, [pc, #140]	; (800a1f0 <CAN_TestRegisterAccess+0xec>)
 800a164:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800a168:	f7f7 fb00 	bl	800176c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	79f8      	ldrb	r0, [r7, #7]
 800a172:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <CAN_TestRegisterAccess+0xf0>)
 800a174:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800a178:	f7f7 fa68 	bl	800164c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800a180:	4b1a      	ldr	r3, [pc, #104]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e01e      	b.n	800a1c6 <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800a188:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	4b18      	ldr	r3, [pc, #96]	; (800a1f0 <CAN_TestRegisterAccess+0xec>)
 800a190:	5c9a      	ldrb	r2, [r3, r2]
 800a192:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <CAN_TestRegisterAccess+0xf0>)
 800a19a:	5c5b      	ldrb	r3, [r3, r1]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	bf0c      	ite	eq
 800a1a0:	2301      	moveq	r3, #1
 800a1a2:	2300      	movne	r3, #0
 800a1a4:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	f083 0301 	eor.w	r3, r3, #1
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <CAN_TestRegisterAccess+0xb6>
        Nop();
 800a1b2:	bf00      	nop
        Nop();
 800a1b4:	bf00      	nop

        // Data mismatch
        return false;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e013      	b.n	800a1e2 <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a1c4:	701a      	strb	r2, [r3, #0]
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <CAN_TestRegisterAccess+0xe8>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	7bfa      	ldrb	r2, [r7, #15]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d8db      	bhi.n	800a188 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b40      	cmp	r3, #64	; 0x40
 800a1da:	d99e      	bls.n	800a11a <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800a1dc:	bf00      	nop
  Nop();
 800a1de:	bf00      	nop
  return true;
 800a1e0:	2301      	movs	r3, #1
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000de0 	.word	0x20000de0
 800a1f0:	20000d44 	.word	0x20000d44
 800a1f4:	20000da0 	.word	0x20000da0

0800a1f8 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a202:	2300      	movs	r3, #0
 800a204:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a206:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800a208:	2304      	movs	r3, #4
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e05b      	b.n	800a2c6 <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800a20e:	4b32      	ldr	r3, [pc, #200]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a210:	2200      	movs	r2, #0
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e014      	b.n	800a240 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800a216:	f009 fceb 	bl	8013bf0 <rand>
 800a21a:	4601      	mov	r1, r0
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	b2c9      	uxtb	r1, r1
 800a224:	4b2d      	ldr	r3, [pc, #180]	; (800a2dc <CAN_TestRamAccess+0xe4>)
 800a226:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b2c      	ldr	r3, [pc, #176]	; (800a2e0 <CAN_TestRamAccess+0xe8>)
 800a230:	21ff      	movs	r1, #255	; 0xff
 800a232:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800a234:	4b28      	ldr	r3, [pc, #160]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	4b26      	ldr	r3, [pc, #152]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a23e:	701a      	strb	r2, [r3, #0]
 800a240:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	7bfa      	ldrb	r2, [r7, #15]
 800a246:	429a      	cmp	r2, r3
 800a248:	d8e5      	bhi.n	800a216 <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800a24a:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	79f8      	ldrb	r0, [r7, #7]
 800a252:	4a22      	ldr	r2, [pc, #136]	; (800a2dc <CAN_TestRamAccess+0xe4>)
 800a254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a258:	f7f7 fa88 	bl	800176c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	79f8      	ldrb	r0, [r7, #7]
 800a262:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <CAN_TestRamAccess+0xe8>)
 800a264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a268:	f7f7 f9f0 	bl	800164c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800a270:	4b19      	ldr	r3, [pc, #100]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	e01e      	b.n	800a2b6 <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <CAN_TestRamAccess+0xe4>)
 800a280:	5c9a      	ldrb	r2, [r3, r2]
 800a282:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	4619      	mov	r1, r3
 800a288:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <CAN_TestRamAccess+0xe8>)
 800a28a:	5c5b      	ldrb	r3, [r3, r1]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	bf0c      	ite	eq
 800a290:	2301      	moveq	r3, #1
 800a292:	2300      	movne	r3, #0
 800a294:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	f083 0301 	eor.w	r3, r3, #1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <CAN_TestRamAccess+0xb2>
        Nop();
 800a2a2:	bf00      	nop
        Nop();
 800a2a4:	bf00      	nop

        // Data mismatch
        return false;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e011      	b.n	800a2ce <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <CAN_TestRamAccess+0xe0>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d8db      	bhi.n	800a278 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d9a0      	bls.n	800a20e <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800a2cc:	2301      	movs	r3, #1
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000de0 	.word	0x20000de0
 800a2dc:	20000d44 	.word	0x20000d44
 800a2e0:	20000da0 	.word	0x20000da0

0800a2e4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a2e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a2fc:	bf00      	nop
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <LL_AHB2_GRP1_EnableClock>:
{
 800a306:	b480      	push	{r7}
 800a308:	b085      	sub	sp, #20
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a30e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a31e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4013      	ands	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a32a:	68fb      	ldr	r3, [r7, #12]
}
 800a32c:	bf00      	nop
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4013      	ands	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a35c:	68fb      	ldr	r3, [r7, #12]
}
 800a35e:	bf00      	nop
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a376:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4313      	orrs	r3, r2
 800a380:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4013      	ands	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a38e:	68fb      	ldr	r3, [r7, #12]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a3a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a3d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a3dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a3e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
}
 800a3f4:	bf00      	nop
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800a404:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a408:	f7ff ff96 	bl	800a338 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800a40c:	2200      	movs	r2, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	202e      	movs	r0, #46	; 0x2e
 800a412:	f002 fc2c 	bl	800cc6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800a416:	202e      	movs	r0, #46	; 0x2e
 800a418:	f002 fc43 	bl	800cca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a41c:	bf00      	nop
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b09c      	sub	sp, #112	; 0x70
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	605a      	str	r2, [r3, #4]
 800a432:	609a      	str	r2, [r3, #8]
 800a434:	60da      	str	r2, [r3, #12]
 800a436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a438:	f107 030c 	add.w	r3, r7, #12
 800a43c:	2250      	movs	r2, #80	; 0x50
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f008 fc11 	bl	8012c68 <memset>
  if(huart->Instance==LPUART1)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a2f      	ldr	r2, [pc, #188]	; (800a508 <HAL_UART_MspInit+0xe8>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d125      	bne.n	800a49c <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a450:	2302      	movs	r3, #2
 800a452:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a454:	2300      	movs	r3, #0
 800a456:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4618      	mov	r0, r3
 800a45e:	f004 fd82 	bl	800ef66 <HAL_RCCEx_PeriphCLKConfig>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a468:	f7fc f910 	bl	800668c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a46c:	2001      	movs	r0, #1
 800a46e:	f7ff ff95 	bl	800a39c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a472:	2001      	movs	r0, #1
 800a474:	f7ff ff47 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a478:	230c      	movs	r3, #12
 800a47a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a47c:	2302      	movs	r3, #2
 800a47e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a480:	2300      	movs	r3, #0
 800a482:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a484:	2300      	movs	r3, #0
 800a486:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a488:	2308      	movs	r3, #8
 800a48a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a48c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a496:	f002 fef9 	bl	800d28c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a49a:	e031      	b.n	800a500 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a1a      	ldr	r2, [pc, #104]	; (800a50c <HAL_UART_MspInit+0xec>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d12c      	bne.n	800a500 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f004 fd57 	bl	800ef66 <HAL_RCCEx_PeriphCLKConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800a4be:	f7fc f8e5 	bl	800668c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a4c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a4c6:	f7ff ff82 	bl	800a3ce <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4ca:	2002      	movs	r0, #2
 800a4cc:	f7ff ff1b 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a4d0:	23c0      	movs	r3, #192	; 0xc0
 800a4d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a4e0:	2307      	movs	r3, #7
 800a4e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4809      	ldr	r0, [pc, #36]	; (800a510 <HAL_UART_MspInit+0xf0>)
 800a4ec:	f002 fece 	bl	800d28c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	2024      	movs	r0, #36	; 0x24
 800a4f6:	f002 fbba 	bl	800cc6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a4fa:	2024      	movs	r0, #36	; 0x24
 800a4fc:	f002 fbd1 	bl	800cca2 <HAL_NVIC_EnableIRQ>
}
 800a500:	bf00      	nop
 800a502:	3770      	adds	r7, #112	; 0x70
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	40008000 	.word	0x40008000
 800a50c:	40013800 	.word	0x40013800
 800a510:	48000400 	.word	0x48000400

0800a514 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a05      	ldr	r2, [pc, #20]	; (800a538 <HAL_PKA_MspInit+0x24>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d103      	bne.n	800a52e <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800a526:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a52a:	f7ff ff05 	bl	800a338 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58002000 	.word	0x58002000

0800a53c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b096      	sub	sp, #88	; 0x58
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a544:	f107 0308 	add.w	r3, r7, #8
 800a548:	2250      	movs	r2, #80	; 0x50
 800a54a:	2100      	movs	r1, #0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f008 fb8b 	bl	8012c68 <memset>
  if(hrtc->Instance==RTC)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a0e      	ldr	r2, [pc, #56]	; (800a590 <HAL_RTC_MspInit+0x54>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d115      	bne.n	800a588 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a55c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a560:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a562:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a566:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a568:	f107 0308 	add.w	r3, r7, #8
 800a56c:	4618      	mov	r0, r3
 800a56e:	f004 fcfa 	bl	800ef66 <HAL_RCCEx_PeriphCLKConfig>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a578:	f7fc f888 	bl	800668c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a57c:	f7ff feb2 	bl	800a2e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a580:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a584:	f7ff fef1 	bl	800a36a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a588:	bf00      	nop
 800a58a:	3758      	adds	r7, #88	; 0x58
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	40002800 	.word	0x40002800

0800a594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a30      	ldr	r2, [pc, #192]	; (800a674 <HAL_SPI_MspInit+0xe0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d118      	bne.n	800a5e8 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a5b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a5ba:	f7ff ff08 	bl	800a3ce <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5be:	2001      	movs	r0, #1
 800a5c0:	f7ff fea1 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800a5c4:	23c2      	movs	r3, #194	; 0xc2
 800a5c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a5d4:	2305      	movs	r3, #5
 800a5d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5d8:	f107 030c 	add.w	r3, r7, #12
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5e2:	f002 fe53 	bl	800d28c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a5e6:	e040      	b.n	800a66a <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a22      	ldr	r2, [pc, #136]	; (800a678 <HAL_SPI_MspInit+0xe4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d13b      	bne.n	800a66a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a5f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a5f6:	f7ff feb8 	bl	800a36a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5fa:	2004      	movs	r0, #4
 800a5fc:	f7ff fe83 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a600:	2001      	movs	r0, #1
 800a602:	f7ff fe80 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a606:	2302      	movs	r3, #2
 800a608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a60a:	2302      	movs	r3, #2
 800a60c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a612:	2300      	movs	r3, #0
 800a614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800a616:	2303      	movs	r3, #3
 800a618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4619      	mov	r1, r3
 800a620:	4816      	ldr	r0, [pc, #88]	; (800a67c <HAL_SPI_MspInit+0xe8>)
 800a622:	f002 fe33 	bl	800d28c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a626:	2304      	movs	r3, #4
 800a628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a62a:	2302      	movs	r3, #2
 800a62c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a636:	2305      	movs	r3, #5
 800a638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a63a:	f107 030c 	add.w	r3, r7, #12
 800a63e:	4619      	mov	r1, r3
 800a640:	480e      	ldr	r0, [pc, #56]	; (800a67c <HAL_SPI_MspInit+0xe8>)
 800a642:	f002 fe23 	bl	800d28c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a64a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a654:	2300      	movs	r3, #0
 800a656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a658:	2305      	movs	r3, #5
 800a65a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a65c:	f107 030c 	add.w	r3, r7, #12
 800a660:	4619      	mov	r1, r3
 800a662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a666:	f002 fe11 	bl	800d28c <HAL_GPIO_Init>
}
 800a66a:	bf00      	nop
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40013000 	.word	0x40013000
 800a678:	40003800 	.word	0x40003800
 800a67c:	48000800 	.word	0x48000800

0800a680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <HAL_TIM_Base_MspInit+0x34>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d10b      	bne.n	800a6aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a692:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a696:	f7ff fe9a 	bl	800a3ce <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a69a:	2200      	movs	r2, #0
 800a69c:	2100      	movs	r1, #0
 800a69e:	2019      	movs	r0, #25
 800a6a0:	f002 fae5 	bl	800cc6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a6a4:	2019      	movs	r0, #25
 800a6a6:	f002 fafc 	bl	800cca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800a6aa:	bf00      	nop
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	40012c00 	.word	0x40012c00

0800a6b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b09c      	sub	sp, #112	; 0x70
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	60da      	str	r2, [r3, #12]
 800a6ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a6d0:	f107 030c 	add.w	r3, r7, #12
 800a6d4:	2250      	movs	r2, #80	; 0x50
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f008 fac5 	bl	8012c68 <memset>
  if(hpcd->Instance==USB)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <HAL_PCD_MspInit+0xa8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d136      	bne.n	800a756 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a6e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800a6ee:	2306      	movs	r3, #6
 800a6f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a6f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a6f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a6fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a702:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a708:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a70a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a70e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	4618      	mov	r0, r3
 800a716:	f004 fc26 	bl	800ef66 <HAL_RCCEx_PeriphCLKConfig>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a720:	f7fb ffb4 	bl	800668c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a724:	2001      	movs	r0, #1
 800a726:	f7ff fdee 	bl	800a306 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a72a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a72e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a730:	2302      	movs	r3, #2
 800a732:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a734:	2300      	movs	r3, #0
 800a736:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a738:	2300      	movs	r3, #0
 800a73a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a73c:	230a      	movs	r3, #10
 800a73e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a740:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a744:	4619      	mov	r1, r3
 800a746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a74a:	f002 fd9f 	bl	800d28c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a74e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a752:	f7ff fe0a 	bl	800a36a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800a756:	bf00      	nop
 800a758:	3770      	adds	r7, #112	; 0x70
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	40006800 	.word	0x40006800

0800a764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a768:	e7fe      	b.n	800a768 <NMI_Handler+0x4>

0800a76a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a76a:	b480      	push	{r7}
 800a76c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a76e:	e7fe      	b.n	800a76e <HardFault_Handler+0x4>

0800a770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a774:	e7fe      	b.n	800a774 <MemManage_Handler+0x4>

0800a776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a776:	b480      	push	{r7}
 800a778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a77a:	e7fe      	b.n	800a77a <BusFault_Handler+0x4>

0800a77c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a780:	e7fe      	b.n	800a780 <UsageFault_Handler+0x4>

0800a782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a782:	b480      	push	{r7}
 800a784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a786:	bf00      	nop
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a794:	bf00      	nop
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a7a2:	bf00      	nop
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a7b0:	f002 f956 	bl	800ca60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a7b4:	bf00      	nop
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800a7bc:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <EXTI0_IRQHandler+0x14>)
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f002 ff1d 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a7c6:	bf00      	nop
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000cd6 	.word	0x20000cd6

0800a7d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800a7d4:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <EXTI1_IRQHandler+0x14>)
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f002 ff11 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000cde 	.word	0x20000cde

0800a7e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800a7ec:	4b03      	ldr	r3, [pc, #12]	; (800a7fc <EXTI4_IRQHandler+0x14>)
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f002 ff05 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a7f6:	bf00      	nop
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000ccc 	.word	0x20000ccc

0800a800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <EXTI9_5_IRQHandler+0x1c>)
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	4618      	mov	r0, r3
 800a80a:	f002 fef9 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <EXTI9_5_IRQHandler+0x20>)
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f002 fef4 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a818:	bf00      	nop
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000c66 	.word	0x20000c66
 800a820:	20000c6e 	.word	0x20000c6e

0800a824 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a828:	4802      	ldr	r0, [pc, #8]	; (800a834 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800a82a:	f005 fecd 	bl	80105c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a82e:	bf00      	nop
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200005d8 	.word	0x200005d8

0800a838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a83c:	4802      	ldr	r0, [pc, #8]	; (800a848 <USART1_IRQHandler+0x10>)
 800a83e:	f006 ff95 	bl	801176c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a842:	bf00      	nop
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	2000044c 	.word	0x2000044c

0800a84c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800a850:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <EXTI15_10_IRQHandler+0x30>)
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	f002 fed3 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800a85a:	4b09      	ldr	r3, [pc, #36]	; (800a880 <EXTI15_10_IRQHandler+0x34>)
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	f002 fece 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800a864:	4b07      	ldr	r3, [pc, #28]	; (800a884 <EXTI15_10_IRQHandler+0x38>)
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fec9 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800a86e:	4b06      	ldr	r3, [pc, #24]	; (800a888 <EXTI15_10_IRQHandler+0x3c>)
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f002 fec4 	bl	800d600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a878:	bf00      	nop
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20000c5e 	.word	0x20000c5e
 800a880:	20000c7c 	.word	0x20000c7c
 800a884:	20000c86 	.word	0x20000c86
 800a888:	20000c8e 	.word	0x20000c8e

0800a88c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800a890:	f002 fece 	bl	800d630 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800a894:	bf00      	nop
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  return 1;
 800a89c:	2301      	movs	r3, #1
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <_kill>:

int _kill(int pid, int sig)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a8b2:	f008 f87f 	bl	80129b4 <__errno>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2216      	movs	r2, #22
 800a8ba:	601a      	str	r2, [r3, #0]
  return -1;
 800a8bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <_exit>:

void _exit (int status)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a8d0:	f04f 31ff 	mov.w	r1, #4294967295
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ffe7 	bl	800a8a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a8da:	e7fe      	b.n	800a8da <_exit+0x12>

0800a8dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e00a      	b.n	800a904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a8ee:	f3af 8000 	nop.w
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	60ba      	str	r2, [r7, #8]
 800a8fa:	b2ca      	uxtb	r2, r1
 800a8fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	3301      	adds	r3, #1
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	dbf0      	blt.n	800a8ee <_read+0x12>
  }

  return len;
 800a90c:	687b      	ldr	r3, [r7, #4]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	e009      	b.n	800a93c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	60ba      	str	r2, [r7, #8]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	3301      	adds	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	429a      	cmp	r2, r3
 800a942:	dbf1      	blt.n	800a928 <_write+0x12>
  }
  return len;
 800a944:	687b      	ldr	r3, [r7, #4]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <_close>:

int _close(int file)
{
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a976:	605a      	str	r2, [r3, #4]
  return 0;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <_isatty>:

int _isatty(int file)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a98e:	2301      	movs	r3, #1
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a9c0:	4a14      	ldr	r2, [pc, #80]	; (800aa14 <_sbrk+0x5c>)
 800a9c2:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <_sbrk+0x60>)
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a9cc:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <_sbrk+0x64>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <_sbrk+0x64>)
 800a9d6:	4a12      	ldr	r2, [pc, #72]	; (800aa20 <_sbrk+0x68>)
 800a9d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a9da:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <_sbrk+0x64>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d207      	bcs.n	800a9f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a9e8:	f007 ffe4 	bl	80129b4 <__errno>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	220c      	movs	r2, #12
 800a9f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	e009      	b.n	800aa0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a9f8:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <_sbrk+0x64>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a9fe:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <_sbrk+0x64>)
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a05      	ldr	r2, [pc, #20]	; (800aa1c <_sbrk+0x64>)
 800aa08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20030000 	.word	0x20030000
 800aa18:	00000400 	.word	0x00000400
 800aa1c:	2000a6bc 	.word	0x2000a6bc
 800aa20:	2000a7b8 	.word	0x2000a7b8

0800aa24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800aa28:	4b24      	ldr	r3, [pc, #144]	; (800aabc <SystemInit+0x98>)
 800aa2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2e:	4a23      	ldr	r2, [pc, #140]	; (800aabc <SystemInit+0x98>)
 800aa30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800aa38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800aa48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800aa50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800aa52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa5c:	4b18      	ldr	r3, [pc, #96]	; (800aac0 <SystemInit+0x9c>)
 800aa5e:	4013      	ands	r3, r2
 800aa60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800aa62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa6e:	f023 0305 	bic.w	r3, r3, #5
 800aa72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800aa76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa82:	f023 0301 	bic.w	r3, r3, #1
 800aa86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800aa8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa8e:	4a0d      	ldr	r2, [pc, #52]	; (800aac4 <SystemInit+0xa0>)
 800aa90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800aa92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa96:	4a0b      	ldr	r2, [pc, #44]	; (800aac4 <SystemInit+0xa0>)
 800aa98:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800aa9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aaa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaa8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800aaaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaae:	2200      	movs	r2, #0
 800aab0:	619a      	str	r2, [r3, #24]
}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	e000ed00 	.word	0xe000ed00
 800aac0:	faf6fefb 	.word	0xfaf6fefb
 800aac4:	22041000 	.word	0x22041000

0800aac8 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800aac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaca:	b08b      	sub	sp, #44	; 0x2c
 800aacc:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800aace:	4a7a      	ldr	r2, [pc, #488]	; (800acb8 <VCU_ReceiveMessages+0x1f0>)
 800aad0:	2101      	movs	r1, #1
 800aad2:	2000      	movs	r0, #0
 800aad4:	f7f7 fd36 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800aad8:	e0e2      	b.n	800aca0 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4b77      	ldr	r3, [pc, #476]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800aae0:	4a77      	ldr	r2, [pc, #476]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800aae2:	2101      	movs	r1, #1
 800aae4:	2000      	movs	r0, #0
 800aae6:	f7f7 fb91 	bl	800220c <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_VERBOSE)) == (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800aaea:	4b76      	ldr	r3, [pc, #472]	; (800acc4 <VCU_ReceiveMessages+0x1fc>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f003 030c 	and.w	r3, r3, #12
 800aaf2:	2b0c      	cmp	r3, #12
 800aaf4:	d12c      	bne.n	800ab50 <VCU_ReceiveMessages+0x88>
 800aaf6:	4b72      	ldr	r3, [pc, #456]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	469c      	mov	ip, r3
 800ab02:	4b6e      	ldr	r3, [pc, #440]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	469e      	mov	lr, r3
 800ab08:	4b6c      	ldr	r3, [pc, #432]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4b6b      	ldr	r3, [pc, #428]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab10:	789b      	ldrb	r3, [r3, #2]
 800ab12:	4619      	mov	r1, r3
 800ab14:	4b69      	ldr	r3, [pc, #420]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab16:	78db      	ldrb	r3, [r3, #3]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	4b68      	ldr	r3, [pc, #416]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab1c:	791b      	ldrb	r3, [r3, #4]
 800ab1e:	461c      	mov	r4, r3
 800ab20:	4b66      	ldr	r3, [pc, #408]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab22:	795b      	ldrb	r3, [r3, #5]
 800ab24:	461d      	mov	r5, r3
 800ab26:	4b65      	ldr	r3, [pc, #404]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab28:	799b      	ldrb	r3, [r3, #6]
 800ab2a:	461e      	mov	r6, r3
 800ab2c:	4b63      	ldr	r3, [pc, #396]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ab2e:	79db      	ldrb	r3, [r3, #7]
 800ab30:	9306      	str	r3, [sp, #24]
 800ab32:	9605      	str	r6, [sp, #20]
 800ab34:	9504      	str	r5, [sp, #16]
 800ab36:	9403      	str	r4, [sp, #12]
 800ab38:	9002      	str	r0, [sp, #8]
 800ab3a:	9101      	str	r1, [sp, #4]
 800ab3c:	9200      	str	r2, [sp, #0]
 800ab3e:	4673      	mov	r3, lr
 800ab40:	4662      	mov	r2, ip
 800ab42:	4961      	ldr	r1, [pc, #388]	; (800acc8 <VCU_ReceiveMessages+0x200>)
 800ab44:	4861      	ldr	r0, [pc, #388]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ab46:	f009 f8a1 	bl	8013c8c <siprintf>
 800ab4a:	4860      	ldr	r0, [pc, #384]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ab4c:	f7fa fc08 	bl	8005360 <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800ab50:	4b5b      	ldr	r3, [pc, #364]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b5c      	ldr	r3, [pc, #368]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ab5e:	895b      	ldrh	r3, [r3, #10]
 800ab60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d102      	bne.n	800ab6e <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800ab68:	f000 f916 	bl	800ad98 <VCU_ProcessVcuCommand>
 800ab6c:	e093      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800ab6e:	4b54      	ldr	r3, [pc, #336]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4b55      	ldr	r3, [pc, #340]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ab7c:	895b      	ldrh	r3, [r3, #10]
 800ab7e:	f203 4301 	addw	r3, r3, #1025	; 0x401
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d102      	bne.n	800ab8c <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800ab86:	f000 fa7d 	bl	800b084 <VCU_ProcessVcuTime>
 800ab8a:	e084      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800ab8c:	4b4c      	ldr	r3, [pc, #304]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ab8e:	881b      	ldrh	r3, [r3, #0]
 800ab90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	4b4d      	ldr	r3, [pc, #308]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ab9a:	895b      	ldrh	r3, [r3, #10]
 800ab9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d102      	bne.n	800abaa <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800aba4:	f000 faba 	bl	800b11c <VCU_ProcessReadEeprom>
 800aba8:	e075      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800abaa:	4b45      	ldr	r3, [pc, #276]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	461a      	mov	r2, r3
 800abb6:	4b46      	ldr	r3, [pc, #280]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800abb8:	895b      	ldrh	r3, [r3, #10]
 800abba:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d102      	bne.n	800abc8 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800abc2:	f000 fb67 	bl	800b294 <VCU_ProcessWriteEeprom>
 800abc6:	e066      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800abc8:	4b3d      	ldr	r3, [pc, #244]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	461a      	mov	r2, r3
 800abd4:	4b3e      	ldr	r3, [pc, #248]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800abd6:	895b      	ldrh	r3, [r3, #10]
 800abd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800abdc:	429a      	cmp	r2, r3
 800abde:	d102      	bne.n	800abe6 <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800abe0:	f000 f988 	bl	800aef4 <VCU_ProcessVcuModuleCommand>
 800abe4:	e057      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800abe6:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abee:	b29b      	uxth	r3, r3
 800abf0:	461a      	mov	r2, r3
 800abf2:	4b37      	ldr	r3, [pc, #220]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800abf4:	895b      	ldrh	r3, [r3, #10]
 800abf6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d102      	bne.n	800ac04 <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800abfe:	f000 f9f1 	bl	800afe4 <VCU_ProcessVcuKeepAlive>
 800ac02:	e048      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800ac04:	4b2e      	ldr	r3, [pc, #184]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <VCU_ReceiveMessages+0x208>)
 800ac12:	895b      	ldrh	r3, [r3, #10]
 800ac14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d102      	bne.n	800ac22 <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800ac1c:	f000 fbfa 	bl	800b414 <VCU_ProcessVcuRequestModuleList>
 800ac20:	e039      	b.n	800ac96 <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800ac22:	4b28      	ldr	r3, [pc, #160]	; (800acc4 <VCU_ReceiveMessages+0x1fc>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	f003 0305 	and.w	r3, r3, #5
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d133      	bne.n	800ac96 <VCU_ReceiveMessages+0x1ce>
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	469c      	mov	ip, r3
 800ac3a:	4b21      	ldr	r3, [pc, #132]	; (800acc0 <VCU_ReceiveMessages+0x1f8>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800ac42:	469e      	mov	lr, r3
 800ac44:	4b1d      	ldr	r3, [pc, #116]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac52:	789b      	ldrb	r3, [r3, #2]
 800ac54:	4618      	mov	r0, r3
 800ac56:	4b19      	ldr	r3, [pc, #100]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac58:	78db      	ldrb	r3, [r3, #3]
 800ac5a:	461c      	mov	r4, r3
 800ac5c:	4b17      	ldr	r3, [pc, #92]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac5e:	791b      	ldrb	r3, [r3, #4]
 800ac60:	461d      	mov	r5, r3
 800ac62:	4b16      	ldr	r3, [pc, #88]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac64:	795b      	ldrb	r3, [r3, #5]
 800ac66:	461e      	mov	r6, r3
 800ac68:	4b14      	ldr	r3, [pc, #80]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac6a:	799b      	ldrb	r3, [r3, #6]
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	4b13      	ldr	r3, [pc, #76]	; (800acbc <VCU_ReceiveMessages+0x1f4>)
 800ac70:	79db      	ldrb	r3, [r3, #7]
 800ac72:	9307      	str	r3, [sp, #28]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	9306      	str	r3, [sp, #24]
 800ac78:	9605      	str	r6, [sp, #20]
 800ac7a:	9504      	str	r5, [sp, #16]
 800ac7c:	9403      	str	r4, [sp, #12]
 800ac7e:	9002      	str	r0, [sp, #8]
 800ac80:	9101      	str	r1, [sp, #4]
 800ac82:	9200      	str	r2, [sp, #0]
 800ac84:	4673      	mov	r3, lr
 800ac86:	4662      	mov	r2, ip
 800ac88:	4912      	ldr	r1, [pc, #72]	; (800acd4 <VCU_ReceiveMessages+0x20c>)
 800ac8a:	4810      	ldr	r0, [pc, #64]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ac8c:	f008 fffe 	bl	8013c8c <siprintf>
 800ac90:	480e      	ldr	r0, [pc, #56]	; (800accc <VCU_ReceiveMessages+0x204>)
 800ac92:	f7fa fb65 	bl	8005360 <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800ac96:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <VCU_ReceiveMessages+0x1f0>)
 800ac98:	2101      	movs	r1, #1
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	f7f7 fc52 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <VCU_ReceiveMessages+0x1f0>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f47f af16 	bne.w	800aada <VCU_ReceiveMessages+0x12>
  }
}
 800acae:	bf00      	nop
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb8:	2000a710 	.word	0x2000a710
 800acbc:	2000a720 	.word	0x2000a720
 800acc0:	2000a714 	.word	0x2000a714
 800acc4:	2000000c 	.word	0x2000000c
 800acc8:	08018054 	.word	0x08018054
 800accc:	20000b64 	.word	0x20000b64
 800acd0:	2000a664 	.word	0x2000a664
 800acd4:	080180ac 	.word	0x080180ac

0800acd8 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af02      	add	r7, sp, #8
 800acde:	4603      	mov	r3, r0
 800ace0:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800ace2:	2332      	movs	r3, #50	; 0x32
 800ace4:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	4a21      	ldr	r2, [pc, #132]	; (800ad70 <VCU_TransmitMessageQueue+0x98>)
 800acea:	2102      	movs	r1, #2
 800acec:	4618      	mov	r0, r3
 800acee:	f7f7 fbf6 	bl	80024de <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11a      	bne.n	800ad2e <VCU_TransmitMessageQueue+0x56>
      Nop();
 800acf8:	bf00      	nop
      Nop();
 800acfa:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800acfc:	79f8      	ldrb	r0, [r7, #7]
 800acfe:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <VCU_TransmitMessageQueue+0x9c>)
 800ad00:	4a1d      	ldr	r2, [pc, #116]	; (800ad78 <VCU_TransmitMessageQueue+0xa0>)
 800ad02:	491e      	ldr	r1, [pc, #120]	; (800ad7c <VCU_TransmitMessageQueue+0xa4>)
 800ad04:	f7f7 fca5 	bl	8002652 <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800ad08:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <VCU_TransmitMessageQueue+0xa8>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 0305 	and.w	r3, r3, #5
 800ad10:	2b05      	cmp	r3, #5
 800ad12:	d106      	bne.n	800ad22 <VCU_TransmitMessageQueue+0x4a>
 800ad14:	491b      	ldr	r1, [pc, #108]	; (800ad84 <VCU_TransmitMessageQueue+0xac>)
 800ad16:	481c      	ldr	r0, [pc, #112]	; (800ad88 <VCU_TransmitMessageQueue+0xb0>)
 800ad18:	f008 ffb8 	bl	8013c8c <siprintf>
 800ad1c:	481a      	ldr	r0, [pc, #104]	; (800ad88 <VCU_TransmitMessageQueue+0xb0>)
 800ad1e:	f7fa fb1f 	bl	8005360 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	2102      	movs	r1, #2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7f7 f91c 	bl	8001f64 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800ad2c:	e01c      	b.n	800ad68 <VCU_TransmitMessageQueue+0x90>
    }
    attempts--;
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <VCU_TransmitMessageQueue+0x98>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0d2      	beq.n	800ace6 <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800ad40:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <VCU_TransmitMessageQueue+0xb4>)
 800ad42:	791b      	ldrb	r3, [r3, #4]
 800ad44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7f8 fc8e 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73bb      	strb	r3, [r7, #14]

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	79f8      	ldrb	r0, [r7, #7]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	9201      	str	r2, [sp, #4]
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <VCU_TransmitMessageQueue+0xb8>)
 800ad60:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <VCU_TransmitMessageQueue+0xb4>)
 800ad62:	2102      	movs	r1, #2
 800ad64:	f7f7 f80c 	bl	8001d80 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	2000a6c0 	.word	0x2000a6c0
 800ad74:	2000a762 	.word	0x2000a762
 800ad78:	2000a761 	.word	0x2000a761
 800ad7c:	2000a760 	.word	0x2000a760
 800ad80:	2000000c 	.word	0x2000000c
 800ad84:	08018118 	.word	0x08018118
 800ad88:	20000b64 	.word	0x20000b64
 800ad8c:	2000a6c4 	.word	0x2000a6c4
 800ad90:	2000a6d0 	.word	0x2000a6d0
 800ad94:	00000000 	.word	0x00000000

0800ad98 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800ad98:	b5b0      	push	{r4, r5, r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ad9e:	4b4c      	ldr	r3, [pc, #304]	; (800aed0 <VCU_ProcessVcuCommand+0x138>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a4c      	ldr	r2, [pc, #304]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ada4:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ada6:	4b4c      	ldr	r3, [pc, #304]	; (800aed8 <VCU_ProcessVcuCommand+0x140>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	4a49      	ldr	r2, [pc, #292]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adae:	6453      	str	r3, [r2, #68]	; 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800adb0:	4b48      	ldr	r3, [pc, #288]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800adb8:	463b      	mov	r3, r7
 800adba:	2208      	movs	r2, #8
 800adbc:	2100      	movs	r1, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f007 ff52 	bl	8012c68 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800adc4:	4a45      	ldr	r2, [pc, #276]	; (800aedc <VCU_ProcessVcuCommand+0x144>)
 800adc6:	463b      	mov	r3, r7
 800adc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adcc:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800add0:	887a      	ldrh	r2, [r7, #2]
 800add2:	4b40      	ldr	r3, [pc, #256]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800add4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800add8:	4b3e      	ldr	r3, [pc, #248]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adde:	783a      	ldrb	r2, [r7, #0]
 800ade0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800ade4:	b2d2      	uxtb	r2, r2
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d03a      	beq.n	800ae60 <VCU_ProcessVcuCommand+0xc8>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800adea:	783b      	ldrb	r3, [r7, #0]
 800adec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	461a      	mov	r2, r3
 800adf4:	4b37      	ldr	r3, [pc, #220]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    switch (pack.vcuRequestedState) {
 800adfa:	4b36      	ldr	r3, [pc, #216]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800adfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d81b      	bhi.n	800ae3c <VCU_ProcessVcuCommand+0xa4>
 800ae04:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <VCU_ProcessVcuCommand+0x74>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800ae65 	.word	0x0800ae65
 800ae10:	0800ae65 	.word	0x0800ae65
 800ae14:	0800ae2d 	.word	0x0800ae2d
 800ae18:	0800ae1d 	.word	0x0800ae1d
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800ae1c:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800ae22:	4b2c      	ldr	r3, [pc, #176]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800ae2a:	e01e      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800ae2c:	4b29      	ldr	r3, [pc, #164]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800ae32:	4b28      	ldr	r3, [pc, #160]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800ae3a:	e016      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800ae3c:	4b28      	ldr	r3, [pc, #160]	; (800aee0 <VCU_ProcessVcuCommand+0x148>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 0305 	and.w	r3, r3, #5
 800ae44:	2b05      	cmp	r3, #5
 800ae46:	d10f      	bne.n	800ae68 <VCU_ProcessVcuCommand+0xd0>
 800ae48:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4924      	ldr	r1, [pc, #144]	; (800aee4 <VCU_ProcessVcuCommand+0x14c>)
 800ae52:	4825      	ldr	r0, [pc, #148]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800ae54:	f008 ff1a 	bl	8013c8c <siprintf>
 800ae58:	4823      	ldr	r0, [pc, #140]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800ae5a:	f7fa fa81 	bl	8005360 <serialOut>
        break;
 800ae5e:	e003      	b.n	800ae68 <VCU_ProcessVcuCommand+0xd0>
    }
  }
 800ae60:	bf00      	nop
 800ae62:	e002      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
        break;
 800ae64:	bf00      	nop
 800ae66:	e000      	b.n	800ae6a <VCU_ProcessVcuCommand+0xd2>
        break;
 800ae68:	bf00      	nop
  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800ae6a:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <VCU_ProcessVcuCommand+0x148>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d021      	beq.n	800aeba <VCU_ProcessVcuCommand+0x122>
 800ae76:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <VCU_ProcessVcuCommand+0x154>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	461c      	mov	r4, r3
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae88:	461d      	mov	r5, r3
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <VCU_ProcessVcuCommand+0x13c>)
 800ae8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f5 fb29 	bl	80004e8 <__aeabi_i2d>
 800ae96:	a30c      	add	r3, pc, #48	; (adr r3, 800aec8 <VCU_ProcessVcuCommand+0x130>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 fb8e 	bl	80005bc <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	e9cd 2300 	strd	r2, r3, [sp]
 800aea8:	462b      	mov	r3, r5
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4910      	ldr	r1, [pc, #64]	; (800aef0 <VCU_ProcessVcuCommand+0x158>)
 800aeae:	480e      	ldr	r0, [pc, #56]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800aeb0:	f008 feec 	bl	8013c8c <siprintf>
 800aeb4:	480c      	ldr	r0, [pc, #48]	; (800aee8 <VCU_ProcessVcuCommand+0x150>)
 800aeb6:	f7fa fa53 	bl	8005360 <serialOut>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bdb0      	pop	{r4, r5, r7, pc}
 800aec2:	bf00      	nop
 800aec4:	f3af 8000 	nop.w
 800aec8:	eb851eb8 	.word	0xeb851eb8
 800aecc:	3f8eb851 	.word	0x3f8eb851
 800aed0:	20000d20 	.word	0x20000d20
 800aed4:	2000a664 	.word	0x2000a664
 800aed8:	200005d8 	.word	0x200005d8
 800aedc:	2000a720 	.word	0x2000a720
 800aee0:	2000000c 	.word	0x2000000c
 800aee4:	08018148 	.word	0x08018148
 800aee8:	20000b64 	.word	0x20000b64
 800aeec:	2000a6c4 	.word	0x2000a6c4
 800aef0:	08018170 	.word	0x08018170

0800aef4 <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800aefa:	4b31      	ldr	r3, [pc, #196]	; (800afc0 <VCU_ProcessVcuModuleCommand+0xcc>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a31      	ldr	r2, [pc, #196]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af00:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800af02:	4b31      	ldr	r3, [pc, #196]	; (800afc8 <VCU_ProcessVcuModuleCommand+0xd4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	4a2e      	ldr	r2, [pc, #184]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af0a:	6453      	str	r3, [r2, #68]	; 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800af0c:	4b2d      	ldr	r3, [pc, #180]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800af14:	463b      	mov	r3, r7
 800af16:	220c      	movs	r2, #12
 800af18:	2100      	movs	r1, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f007 fea4 	bl	8012c68 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800af20:	4a2a      	ldr	r2, [pc, #168]	; (800afcc <VCU_ProcessVcuModuleCommand+0xd8>)
 800af22:	463b      	mov	r3, r7
 800af24:	ca07      	ldmia	r2, {r0, r1, r2}
 800af26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800af2a:	783a      	ldrb	r2, [r7, #0]
 800af2c:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800af32:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af34:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe ffbf 	bl	8009ebc <MCU_ModuleIndexFromId>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800af42:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <VCU_ProcessVcuModuleCommand+0xd0>)
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	7bfa      	ldrb	r2, [r7, #15]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d034      	beq.n	800afb6 <VCU_ProcessVcuModuleCommand+0xc2>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4a20      	ldr	r2, [pc, #128]	; (800afd0 <VCU_ProcessVcuModuleCommand+0xdc>)
 800af50:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	4413      	add	r3, r2
 800af5a:	3327      	adds	r3, #39	; 0x27
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	787a      	ldrb	r2, [r7, #1]
 800af60:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	4293      	cmp	r3, r2
 800af68:	d00e      	beq.n	800af88 <VCU_ProcessVcuModuleCommand+0x94>
      // State Change! Set requested state
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800af6a:	787b      	ldrb	r3, [r7, #1]
 800af6c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800af70:	b2da      	uxtb	r2, r3
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	4610      	mov	r0, r2
 800af76:	4a16      	ldr	r2, [pc, #88]	; (800afd0 <VCU_ProcessVcuModuleCommand+0xdc>)
 800af78:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800af7c:	fb01 f303 	mul.w	r3, r1, r3
 800af80:	4413      	add	r3, r2
 800af82:	3328      	adds	r3, #40	; 0x28
 800af84:	4602      	mov	r2, r0
 800af86:	701a      	strb	r2, [r3, #0]
 * moduleCommand.module_cell_balance_ctrl
 * moduleCommand.module_hv_bus_actv_iso
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800af88:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <VCU_ProcessVcuModuleCommand+0xe0>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d010      	beq.n	800afb6 <VCU_ProcessVcuModuleCommand+0xc2>
 800af94:	4b10      	ldr	r3, [pc, #64]	; (800afd8 <VCU_ProcessVcuModuleCommand+0xe4>)
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	787b      	ldrb	r3, [r7, #1]
 800afa2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	490c      	ldr	r1, [pc, #48]	; (800afdc <VCU_ProcessVcuModuleCommand+0xe8>)
 800afaa:	480d      	ldr	r0, [pc, #52]	; (800afe0 <VCU_ProcessVcuModuleCommand+0xec>)
 800afac:	f008 fe6e 	bl	8013c8c <siprintf>
 800afb0:	480b      	ldr	r0, [pc, #44]	; (800afe0 <VCU_ProcessVcuModuleCommand+0xec>)
 800afb2:	f7fa f9d5 	bl	8005360 <serialOut>
  }
}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000d20 	.word	0x20000d20
 800afc4:	2000a664 	.word	0x2000a664
 800afc8:	200005d8 	.word	0x200005d8
 800afcc:	2000a720 	.word	0x2000a720
 800afd0:	20000de4 	.word	0x20000de4
 800afd4:	2000000c 	.word	0x2000000c
 800afd8:	2000a6c4 	.word	0x2000a6c4
 800afdc:	080181a0 	.word	0x080181a0
 800afe0:	20000b64 	.word	0x20000b64

0800afe4 <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800afea:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <VCU_ProcessVcuKeepAlive+0x80>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a1e      	ldr	r2, [pc, #120]	; (800b068 <VCU_ProcessVcuKeepAlive+0x84>)
 800aff0:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800aff2:	4b1e      	ldr	r3, [pc, #120]	; (800b06c <VCU_ProcessVcuKeepAlive+0x88>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	4a1b      	ldr	r2, [pc, #108]	; (800b068 <VCU_ProcessVcuKeepAlive+0x84>)
 800affa:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800affc:	463b      	mov	r3, r7
 800affe:	2208      	movs	r2, #8
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f007 fe30 	bl	8012c68 <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800b008:	4a19      	ldr	r2, [pc, #100]	; (800b070 <VCU_ProcessVcuKeepAlive+0x8c>)
 800b00a:	463b      	mov	r3, r7
 800b00c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b010:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800b014:	783b      	ldrb	r3, [r7, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d008      	beq.n	800b02c <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800b01a:	4b13      	ldr	r3, [pc, #76]	; (800b068 <VCU_ProcessVcuKeepAlive+0x84>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800b022:	783a      	ldrb	r2, [r7, #0]
 800b024:	4b10      	ldr	r3, [pc, #64]	; (800b068 <VCU_ProcessVcuKeepAlive+0x84>)
 800b026:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b02a:	e003      	b.n	800b034 <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800b02c:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <VCU_ProcessVcuKeepAlive+0x84>)
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  }

  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b034:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <VCU_ProcessVcuKeepAlive+0x90>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00c      	beq.n	800b05a <VCU_ProcessVcuKeepAlive+0x76>
 800b040:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <VCU_ProcessVcuKeepAlive+0x94>)
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b048:	b29b      	uxth	r3, r3
 800b04a:	461a      	mov	r2, r3
 800b04c:	490b      	ldr	r1, [pc, #44]	; (800b07c <VCU_ProcessVcuKeepAlive+0x98>)
 800b04e:	480c      	ldr	r0, [pc, #48]	; (800b080 <VCU_ProcessVcuKeepAlive+0x9c>)
 800b050:	f008 fe1c 	bl	8013c8c <siprintf>
 800b054:	480a      	ldr	r0, [pc, #40]	; (800b080 <VCU_ProcessVcuKeepAlive+0x9c>)
 800b056:	f7fa f983 	bl	8005360 <serialOut>
}
 800b05a:	bf00      	nop
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20000d20 	.word	0x20000d20
 800b068:	2000a664 	.word	0x2000a664
 800b06c:	200005d8 	.word	0x200005d8
 800b070:	2000a720 	.word	0x2000a720
 800b074:	2000000c 	.word	0x2000000c
 800b078:	2000a6c4 	.word	0x2000a6c4
 800b07c:	080181d0 	.word	0x080181d0
 800b080:	20000b64 	.word	0x20000b64

0800b084 <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b08a:	4b1c      	ldr	r3, [pc, #112]	; (800b0fc <VCU_ProcessVcuTime+0x78>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	f003 0304 	and.w	r3, r3, #4
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00c      	beq.n	800b0b0 <VCU_ProcessVcuTime+0x2c>
 800b096:	4b1a      	ldr	r3, [pc, #104]	; (800b100 <VCU_ProcessVcuTime+0x7c>)
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4918      	ldr	r1, [pc, #96]	; (800b104 <VCU_ProcessVcuTime+0x80>)
 800b0a4:	4818      	ldr	r0, [pc, #96]	; (800b108 <VCU_ProcessVcuTime+0x84>)
 800b0a6:	f008 fdf1 	bl	8013c8c <siprintf>
 800b0aa:	4817      	ldr	r0, [pc, #92]	; (800b108 <VCU_ProcessVcuTime+0x84>)
 800b0ac:	f7fa f958 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b0b0:	4b16      	ldr	r3, [pc, #88]	; (800b10c <VCU_ProcessVcuTime+0x88>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a16      	ldr	r2, [pc, #88]	; (800b110 <VCU_ProcessVcuTime+0x8c>)
 800b0b6:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b0b8:	4b16      	ldr	r3, [pc, #88]	; (800b114 <VCU_ProcessVcuTime+0x90>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	4a14      	ldr	r2, [pc, #80]	; (800b110 <VCU_ProcessVcuTime+0x8c>)
 800b0c0:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	2208      	movs	r2, #8
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f007 fdcd 	bl	8012c68 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	4911      	ldr	r1, [pc, #68]	; (800b118 <VCU_ProcessVcuTime+0x94>)
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f007 fdb9 	bl	8012c4c <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800b0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0de:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800b0e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0e6:	f7fa f9a9 	bl	800543c <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <VCU_ProcessVcuTime+0x8c>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

}
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	2000000c 	.word	0x2000000c
 800b100:	2000a6c4 	.word	0x2000a6c4
 800b104:	080181f0 	.word	0x080181f0
 800b108:	20000b64 	.word	0x20000b64
 800b10c:	20000d20 	.word	0x20000d20
 800b110:	2000a664 	.word	0x2000a664
 800b114:	200005d8 	.word	0x200005d8
 800b118:	2000a720 	.word	0x2000a720

0800b11c <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b126:	4b50      	ldr	r3, [pc, #320]	; (800b268 <VCU_ProcessReadEeprom+0x14c>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	f003 0304 	and.w	r3, r3, #4
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00c      	beq.n	800b14c <VCU_ProcessReadEeprom+0x30>
 800b132:	4b4e      	ldr	r3, [pc, #312]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	494c      	ldr	r1, [pc, #304]	; (800b270 <VCU_ProcessReadEeprom+0x154>)
 800b140:	484c      	ldr	r0, [pc, #304]	; (800b274 <VCU_ProcessReadEeprom+0x158>)
 800b142:	f008 fda3 	bl	8013c8c <siprintf>
 800b146:	484b      	ldr	r0, [pc, #300]	; (800b274 <VCU_ProcessReadEeprom+0x158>)
 800b148:	f7fa f90a 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b14c:	4b4a      	ldr	r3, [pc, #296]	; (800b278 <VCU_ProcessReadEeprom+0x15c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a4a      	ldr	r2, [pc, #296]	; (800b27c <VCU_ProcessReadEeprom+0x160>)
 800b152:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b154:	4b4a      	ldr	r3, [pc, #296]	; (800b280 <VCU_ProcessReadEeprom+0x164>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	4a48      	ldr	r2, [pc, #288]	; (800b27c <VCU_ProcessReadEeprom+0x160>)
 800b15c:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800b15e:	f107 030c 	add.w	r3, r7, #12
 800b162:	2208      	movs	r2, #8
 800b164:	2100      	movs	r1, #0
 800b166:	4618      	mov	r0, r3
 800b168:	f007 fd7e 	bl	8012c68 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800b16c:	4a45      	ldr	r2, [pc, #276]	; (800b284 <VCU_ProcessReadEeprom+0x168>)
 800b16e:	f107 030c 	add.w	r3, r7, #12
 800b172:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b176:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800b17a:	7b3b      	ldrb	r3, [r7, #12]
 800b17c:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800b17e:	463a      	mov	r2, r7
 800b180:	8afb      	ldrh	r3, [r7, #22]
 800b182:	4611      	mov	r1, r2
 800b184:	4618      	mov	r0, r3
 800b186:	f7f9 f8b1 	bl	80042ec <EE_ReadVariable32bits>
 800b18a:	4603      	mov	r3, r0
 800b18c:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800b18e:	8abb      	ldrh	r3, [r7, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d156      	bne.n	800b242 <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f36f 231f 	bfc	r3, #8, #24
 800b19a:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800b1a0:	8afb      	ldrh	r3, [r7, #22]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b1a6:	4b31      	ldr	r3, [pc, #196]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800b1ac:	4b2f      	ldr	r3, [pc, #188]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800b1b2:	4b2e      	ldr	r3, [pc, #184]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800b1b8:	4b33      	ldr	r3, [pc, #204]	; (800b288 <VCU_ProcessReadEeprom+0x16c>)
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	1d3b      	adds	r3, r7, #4
 800b1be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1c2:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b1c6:	4b2d      	ldr	r3, [pc, #180]	; (800b27c <VCU_ProcessReadEeprom+0x160>)
 800b1c8:	895b      	ldrh	r3, [r3, #10]
 800b1ca:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1d4:	b299      	uxth	r1, r3
 800b1d6:	4a25      	ldr	r2, [pc, #148]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1d8:	8813      	ldrh	r3, [r2, #0]
 800b1da:	f361 030a 	bfi	r3, r1, #0, #11
 800b1de:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b1e0:	4a22      	ldr	r2, [pc, #136]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1e2:	6813      	ldr	r3, [r2, #0]
 800b1e4:	f36f 23dc 	bfc	r3, #11, #18
 800b1e8:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b1ea:	4a20      	ldr	r2, [pc, #128]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1ec:	7913      	ldrb	r3, [r2, #4]
 800b1ee:	f36f 1386 	bfc	r3, #6, #1
 800b1f2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b1f4:	4a1d      	ldr	r2, [pc, #116]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b1f6:	7913      	ldrb	r3, [r2, #4]
 800b1f8:	2108      	movs	r1, #8
 800b1fa:	f361 0303 	bfi	r3, r1, #0, #4
 800b1fe:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b200:	4a1a      	ldr	r2, [pc, #104]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b202:	7913      	ldrb	r3, [r2, #4]
 800b204:	f36f 13c7 	bfc	r3, #7, #1
 800b208:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b20a:	4a18      	ldr	r2, [pc, #96]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b20c:	7913      	ldrb	r3, [r2, #4]
 800b20e:	f36f 1304 	bfc	r3, #4, #1
 800b212:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b214:	4b14      	ldr	r3, [pc, #80]	; (800b268 <VCU_ProcessReadEeprom+0x14c>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 0304 	and.w	r3, r3, #4
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00c      	beq.n	800b23a <VCU_ProcessReadEeprom+0x11e>
 800b220:	4b12      	ldr	r3, [pc, #72]	; (800b26c <VCU_ProcessReadEeprom+0x150>)
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b228:	b29b      	uxth	r3, r3
 800b22a:	461a      	mov	r2, r3
 800b22c:	4917      	ldr	r1, [pc, #92]	; (800b28c <VCU_ProcessReadEeprom+0x170>)
 800b22e:	4811      	ldr	r0, [pc, #68]	; (800b274 <VCU_ProcessReadEeprom+0x158>)
 800b230:	f008 fd2c 	bl	8013c8c <siprintf>
 800b234:	480f      	ldr	r0, [pc, #60]	; (800b274 <VCU_ProcessReadEeprom+0x158>)
 800b236:	f7fa f893 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b23a:	2000      	movs	r0, #0
 800b23c:	f7ff fd4c 	bl	800acd8 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800b240:	e00e      	b.n	800b260 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <VCU_ProcessReadEeprom+0x14c>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d008      	beq.n	800b260 <VCU_ProcessReadEeprom+0x144>
 800b24e:	8abb      	ldrh	r3, [r7, #20]
 800b250:	461a      	mov	r2, r3
 800b252:	490f      	ldr	r1, [pc, #60]	; (800b290 <VCU_ProcessReadEeprom+0x174>)
 800b254:	4807      	ldr	r0, [pc, #28]	; (800b274 <VCU_ProcessReadEeprom+0x158>)
 800b256:	f008 fd19 	bl	8013c8c <siprintf>
 800b25a:	4806      	ldr	r0, [pc, #24]	; (800b274 <VCU_ProcessReadEeprom+0x158>)
 800b25c:	f7fa f880 	bl	8005360 <serialOut>
}
 800b260:	bf00      	nop
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	2000000c 	.word	0x2000000c
 800b26c:	2000a6c4 	.word	0x2000a6c4
 800b270:	08018208 	.word	0x08018208
 800b274:	20000b64 	.word	0x20000b64
 800b278:	20000d20 	.word	0x20000d20
 800b27c:	2000a664 	.word	0x2000a664
 800b280:	200005d8 	.word	0x200005d8
 800b284:	2000a720 	.word	0x2000a720
 800b288:	2000a6d0 	.word	0x2000a6d0
 800b28c:	08018228 	.word	0x08018228
 800b290:	08018248 	.word	0x08018248

0800b294 <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b29e:	4b52      	ldr	r3, [pc, #328]	; (800b3e8 <VCU_ProcessWriteEeprom+0x154>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00c      	beq.n	800b2c4 <VCU_ProcessWriteEeprom+0x30>
 800b2aa:	4b50      	ldr	r3, [pc, #320]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	494e      	ldr	r1, [pc, #312]	; (800b3f0 <VCU_ProcessWriteEeprom+0x15c>)
 800b2b8:	484e      	ldr	r0, [pc, #312]	; (800b3f4 <VCU_ProcessWriteEeprom+0x160>)
 800b2ba:	f008 fce7 	bl	8013c8c <siprintf>
 800b2be:	484d      	ldr	r0, [pc, #308]	; (800b3f4 <VCU_ProcessWriteEeprom+0x160>)
 800b2c0:	f7fa f84e 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b2c4:	4b4c      	ldr	r3, [pc, #304]	; (800b3f8 <VCU_ProcessWriteEeprom+0x164>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a4c      	ldr	r2, [pc, #304]	; (800b3fc <VCU_ProcessWriteEeprom+0x168>)
 800b2ca:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b2cc:	4b4c      	ldr	r3, [pc, #304]	; (800b400 <VCU_ProcessWriteEeprom+0x16c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d2:	4a4a      	ldr	r2, [pc, #296]	; (800b3fc <VCU_ProcessWriteEeprom+0x168>)
 800b2d4:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	2208      	movs	r2, #8
 800b2dc:	2100      	movs	r1, #0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f007 fcc2 	bl	8012c68 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800b2e4:	4a47      	ldr	r2, [pc, #284]	; (800b404 <VCU_ProcessWriteEeprom+0x170>)
 800b2e6:	f107 0308 	add.w	r3, r7, #8
 800b2ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2ee:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800b2f2:	7a3b      	ldrb	r3, [r7, #8]
 800b2f4:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800b2fa:	8a7b      	ldrh	r3, [r7, #18]
 800b2fc:	6979      	ldr	r1, [r7, #20]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fa f994 	bl	800562c <StoreEEPROM>
 800b304:	4603      	mov	r3, r0
 800b306:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800b308:	8a3b      	ldrh	r3, [r7, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d156      	bne.n	800b3bc <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	f36f 231f 	bfc	r3, #8, #24
 800b314:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800b31a:	8a7b      	ldrh	r3, [r7, #18]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b320:	4b32      	ldr	r3, [pc, #200]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800b326:	4b31      	ldr	r3, [pc, #196]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b328:	2200      	movs	r2, #0
 800b32a:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800b32c:	4b2f      	ldr	r3, [pc, #188]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b32e:	2200      	movs	r2, #0
 800b330:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800b332:	4b35      	ldr	r3, [pc, #212]	; (800b408 <VCU_ProcessWriteEeprom+0x174>)
 800b334:	461a      	mov	r2, r3
 800b336:	463b      	mov	r3, r7
 800b338:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b33c:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b340:	4b2e      	ldr	r3, [pc, #184]	; (800b3fc <VCU_ProcessWriteEeprom+0x168>)
 800b342:	895b      	ldrh	r3, [r3, #10]
 800b344:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800b348:	b29b      	uxth	r3, r3
 800b34a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b34e:	b299      	uxth	r1, r3
 800b350:	4a26      	ldr	r2, [pc, #152]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b352:	8813      	ldrh	r3, [r2, #0]
 800b354:	f361 030a 	bfi	r3, r1, #0, #11
 800b358:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b35a:	4a24      	ldr	r2, [pc, #144]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b35c:	6813      	ldr	r3, [r2, #0]
 800b35e:	f36f 23dc 	bfc	r3, #11, #18
 800b362:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b364:	4a21      	ldr	r2, [pc, #132]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b366:	7913      	ldrb	r3, [r2, #4]
 800b368:	f36f 1386 	bfc	r3, #6, #1
 800b36c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b36e:	4a1f      	ldr	r2, [pc, #124]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b370:	7913      	ldrb	r3, [r2, #4]
 800b372:	2108      	movs	r1, #8
 800b374:	f361 0303 	bfi	r3, r1, #0, #4
 800b378:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b37a:	4a1c      	ldr	r2, [pc, #112]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b37c:	7913      	ldrb	r3, [r2, #4]
 800b37e:	f36f 13c7 	bfc	r3, #7, #1
 800b382:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b384:	4a19      	ldr	r2, [pc, #100]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b386:	7913      	ldrb	r3, [r2, #4]
 800b388:	f36f 1304 	bfc	r3, #4, #1
 800b38c:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b38e:	4b16      	ldr	r3, [pc, #88]	; (800b3e8 <VCU_ProcessWriteEeprom+0x154>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	f003 0304 	and.w	r3, r3, #4
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00c      	beq.n	800b3b4 <VCU_ProcessWriteEeprom+0x120>
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <VCU_ProcessWriteEeprom+0x158>)
 800b39c:	881b      	ldrh	r3, [r3, #0]
 800b39e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	4919      	ldr	r1, [pc, #100]	; (800b40c <VCU_ProcessWriteEeprom+0x178>)
 800b3a8:	4812      	ldr	r0, [pc, #72]	; (800b3f4 <VCU_ProcessWriteEeprom+0x160>)
 800b3aa:	f008 fc6f 	bl	8013c8c <siprintf>
 800b3ae:	4811      	ldr	r0, [pc, #68]	; (800b3f4 <VCU_ProcessWriteEeprom+0x160>)
 800b3b0:	f7f9 ffd6 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	f7ff fc8f 	bl	800acd8 <VCU_TransmitMessageQueue>
 800b3ba:	e00e      	b.n	800b3da <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800b3bc:	4b0a      	ldr	r3, [pc, #40]	; (800b3e8 <VCU_ProcessWriteEeprom+0x154>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d008      	beq.n	800b3da <VCU_ProcessWriteEeprom+0x146>
 800b3c8:	8a3b      	ldrh	r3, [r7, #16]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	4910      	ldr	r1, [pc, #64]	; (800b410 <VCU_ProcessWriteEeprom+0x17c>)
 800b3ce:	4809      	ldr	r0, [pc, #36]	; (800b3f4 <VCU_ProcessWriteEeprom+0x160>)
 800b3d0:	f008 fc5c 	bl	8013c8c <siprintf>
 800b3d4:	4807      	ldr	r0, [pc, #28]	; (800b3f4 <VCU_ProcessWriteEeprom+0x160>)
 800b3d6:	f7f9 ffc3 	bl	8005360 <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800b3da:	f7fb f967 	bl	80066ac <PCU_Initialize>
}
 800b3de:	bf00      	nop
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	2000000c 	.word	0x2000000c
 800b3ec:	2000a6c4 	.word	0x2000a6c4
 800b3f0:	0801826c 	.word	0x0801826c
 800b3f4:	20000b64 	.word	0x20000b64
 800b3f8:	20000d20 	.word	0x20000d20
 800b3fc:	2000a664 	.word	0x2000a664
 800b400:	200005d8 	.word	0x200005d8
 800b404:	2000a720 	.word	0x2000a720
 800b408:	2000a6d0 	.word	0x2000a6d0
 800b40c:	08018228 	.word	0x08018228
 800b410:	0801828c 	.word	0x0801828c

0800b414 <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0

}
 800b418:	bf00      	nop
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
	...

0800b424 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b42a:	4b16      	ldr	r3, [pc, #88]	; (800b484 <VCU_TicksSinceLastMessage+0x60>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800b432:	4b15      	ldr	r3, [pc, #84]	; (800b488 <VCU_TicksSinceLastMessage+0x64>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800b438:	4b14      	ldr	r3, [pc, #80]	; (800b48c <VCU_TicksSinceLastMessage+0x68>)
 800b43a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d105      	bne.n	800b44e <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800b442:	4b12      	ldr	r3, [pc, #72]	; (800b48c <VCU_TicksSinceLastMessage+0x68>)
 800b444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e013      	b.n	800b476 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800b44e:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <VCU_TicksSinceLastMessage+0x60>)
 800b450:	68da      	ldr	r2, [r3, #12]
 800b452:	4b0e      	ldr	r3, [pc, #56]	; (800b48c <VCU_TicksSinceLastMessage+0x68>)
 800b454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <VCU_TicksSinceLastMessage+0x60>)
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	3301      	adds	r3, #1
 800b45e:	490b      	ldr	r1, [pc, #44]	; (800b48c <VCU_TicksSinceLastMessage+0x68>)
 800b460:	6c89      	ldr	r1, [r1, #72]	; 0x48
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	1a41      	subs	r1, r0, r1
 800b466:	3901      	subs	r1, #1
 800b468:	fb01 f303 	mul.w	r3, r1, r3
 800b46c:	441a      	add	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	3301      	adds	r3, #1
 800b474:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	200005d8 	.word	0x200005d8
 800b488:	20000d20 	.word	0x20000d20
 800b48c:	2000a664 	.word	0x2000a664

0800b490 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800b496:	f04f 0300 	mov.w	r3, #0
 800b49a:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800b49c:	f04f 0300 	mov.w	r3, #0
 800b4a0:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800b4a2:	4b67      	ldr	r3, [pc, #412]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b4a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7f5 f81d 	bl	80004e8 <__aeabi_i2d>
 800b4ae:	f04f 0200 	mov.w	r2, #0
 800b4b2:	4b64      	ldr	r3, [pc, #400]	; (800b644 <VCU_TransmitBmsState+0x1b4>)
 800b4b4:	f7f5 f882 	bl	80005bc <__aeabi_dmul>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4619      	mov	r1, r3
 800b4c0:	f04f 0200 	mov.w	r2, #0
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	f7f4 fec2 	bl	8000250 <__adddf3>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	f7f5 fb6a 	bl	8000bac <__aeabi_d2f>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800b4dc:	6978      	ldr	r0, [r7, #20]
 800b4de:	f7f5 f815 	bl	800050c <__aeabi_f2d>
 800b4e2:	a355      	add	r3, pc, #340	; (adr r3, 800b638 <VCU_TransmitBmsState+0x1a8>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f5 f992 	bl	8000810 <__aeabi_ddiv>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	f7f5 fb5a 	bl	8000bac <__aeabi_d2f>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800b4fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b504:	edc7 7a01 	vstr	s15, [r7, #4]
 800b508:	793b      	ldrb	r3, [r7, #4]
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	893b      	ldrh	r3, [r7, #8]
 800b50e:	f362 0389 	bfi	r3, r2, #2, #8
 800b512:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800b514:	4b4a      	ldr	r3, [pc, #296]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	7a3b      	ldrb	r3, [r7, #8]
 800b522:	f362 0301 	bfi	r3, r2, #0, #2
 800b526:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800b528:	4b45      	ldr	r3, [pc, #276]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b52a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	b2da      	uxtb	r2, r3
 800b534:	7a7b      	ldrb	r3, [r7, #9]
 800b536:	f362 0383 	bfi	r3, r2, #2, #2
 800b53a:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800b53c:	4b40      	ldr	r3, [pc, #256]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b53e:	7d9b      	ldrb	r3, [r3, #22]
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	b2da      	uxtb	r2, r3
 800b546:	7a7b      	ldrb	r3, [r7, #9]
 800b548:	f362 1304 	bfi	r3, r2, #4, #1
 800b54c:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800b54e:	4b3c      	ldr	r3, [pc, #240]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b550:	7d5b      	ldrb	r3, [r3, #21]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	b2da      	uxtb	r2, r3
 800b558:	7a7b      	ldrb	r3, [r7, #9]
 800b55a:	f362 1345 	bfi	r3, r2, #5, #1
 800b55e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800b560:	4b37      	ldr	r3, [pc, #220]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b562:	7ddb      	ldrb	r3, [r3, #23]
 800b564:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800b566:	4b36      	ldr	r3, [pc, #216]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b568:	7e1b      	ldrb	r3, [r3, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d004      	beq.n	800b578 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800b56e:	7a7b      	ldrb	r3, [r7, #9]
 800b570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b574:	727b      	strb	r3, [r7, #9]
 800b576:	e003      	b.n	800b580 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800b578:	7a7b      	ldrb	r3, [r7, #9]
 800b57a:	f36f 1386 	bfc	r3, #6, #1
 800b57e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800b580:	4b2f      	ldr	r3, [pc, #188]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b582:	7d1b      	ldrb	r3, [r3, #20]
 800b584:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800b586:	7a7b      	ldrb	r3, [r7, #9]
 800b588:	f36f 13c7 	bfc	r3, #7, #1
 800b58c:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b592:	4b2d      	ldr	r3, [pc, #180]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b598:	4b2b      	ldr	r3, [pc, #172]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b59e:	4b2a      	ldr	r3, [pc, #168]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800b5a4:	4b29      	ldr	r3, [pc, #164]	; (800b64c <VCU_TransmitBmsState+0x1bc>)
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f107 0308 	add.w	r3, r7, #8
 800b5ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5b0:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b5b4:	4b22      	ldr	r3, [pc, #136]	; (800b640 <VCU_TransmitBmsState+0x1b0>)
 800b5b6:	895b      	ldrh	r3, [r3, #10]
 800b5b8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5c2:	b299      	uxth	r1, r3
 800b5c4:	4a20      	ldr	r2, [pc, #128]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5c6:	8813      	ldrh	r3, [r2, #0]
 800b5c8:	f361 030a 	bfi	r3, r1, #0, #11
 800b5cc:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b5ce:	4a1e      	ldr	r2, [pc, #120]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5d0:	6813      	ldr	r3, [r2, #0]
 800b5d2:	f36f 23dc 	bfc	r3, #11, #18
 800b5d6:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b5d8:	4a1b      	ldr	r2, [pc, #108]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5da:	7913      	ldrb	r3, [r2, #4]
 800b5dc:	f36f 1386 	bfc	r3, #6, #1
 800b5e0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b5e2:	4a19      	ldr	r2, [pc, #100]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5e4:	7913      	ldrb	r3, [r2, #4]
 800b5e6:	2108      	movs	r1, #8
 800b5e8:	f361 0303 	bfi	r3, r1, #0, #4
 800b5ec:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b5ee:	4a16      	ldr	r2, [pc, #88]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5f0:	7913      	ldrb	r3, [r2, #4]
 800b5f2:	f36f 13c7 	bfc	r3, #7, #1
 800b5f6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b5f8:	4a13      	ldr	r2, [pc, #76]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b5fa:	7913      	ldrb	r3, [r2, #4]
 800b5fc:	f36f 1304 	bfc	r3, #4, #1
 800b600:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <VCU_TransmitBmsState+0x1c0>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	f003 0304 	and.w	r3, r3, #4
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00c      	beq.n	800b628 <VCU_TransmitBmsState+0x198>
 800b60e:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <VCU_TransmitBmsState+0x1b8>)
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b616:	b29b      	uxth	r3, r3
 800b618:	461a      	mov	r2, r3
 800b61a:	490e      	ldr	r1, [pc, #56]	; (800b654 <VCU_TransmitBmsState+0x1c4>)
 800b61c:	480e      	ldr	r0, [pc, #56]	; (800b658 <VCU_TransmitBmsState+0x1c8>)
 800b61e:	f008 fb35 	bl	8013c8c <siprintf>
 800b622:	480d      	ldr	r0, [pc, #52]	; (800b658 <VCU_TransmitBmsState+0x1c8>)
 800b624:	f7f9 fe9c 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b628:	2000      	movs	r0, #0
 800b62a:	f7ff fb55 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800b62e:	bf00      	nop
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	9999999a 	.word	0x9999999a
 800b63c:	3fd99999 	.word	0x3fd99999
 800b640:	2000a664 	.word	0x2000a664
 800b644:	3fe00000 	.word	0x3fe00000
 800b648:	2000a6c4 	.word	0x2000a6c4
 800b64c:	2000a6d0 	.word	0x2000a6d0
 800b650:	2000000c 	.word	0x2000000c
 800b654:	080182b0 	.word	0x080182b0
 800b658:	20000b64 	.word	0x20000b64
 800b65c:	00000000 	.word	0x00000000

0800b660 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800b666:	f04f 0300 	mov.w	r3, #0
 800b66a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800b672:	4b65      	ldr	r3, [pc, #404]	; (800b808 <VCU_TransmitBmsData1+0x1a8>)
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	4618      	mov	r0, r3
 800b678:	f7f4 ff26 	bl	80004c8 <__aeabi_ui2d>
 800b67c:	a35e      	add	r3, pc, #376	; (adr r3, 800b7f8 <VCU_TransmitBmsData1+0x198>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 ff9b 	bl	80005bc <__aeabi_dmul>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4610      	mov	r0, r2
 800b68c:	4619      	mov	r1, r3
 800b68e:	f04f 0200 	mov.w	r2, #0
 800b692:	4b5e      	ldr	r3, [pc, #376]	; (800b80c <VCU_TransmitBmsData1+0x1ac>)
 800b694:	f7f4 fdda 	bl	800024c <__aeabi_dsub>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4610      	mov	r0, r2
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f7f5 fa84 	bl	8000bac <__aeabi_d2f>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7f4 ff2f 	bl	800050c <__aeabi_f2d>
 800b6ae:	a352      	add	r3, pc, #328	; (adr r3, 800b7f8 <VCU_TransmitBmsData1+0x198>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f5 f8ac 	bl	8000810 <__aeabi_ddiv>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4619      	mov	r1, r3
 800b6c0:	f04f 0200 	mov.w	r2, #0
 800b6c4:	4b52      	ldr	r3, [pc, #328]	; (800b810 <VCU_TransmitBmsData1+0x1b0>)
 800b6c6:	f7f4 fdc3 	bl	8000250 <__adddf3>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f7f5 fa6b 	bl	8000bac <__aeabi_d2f>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800b6da:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e2:	ee17 3a90 	vmov	r3, s15
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800b6ea:	4b47      	ldr	r3, [pc, #284]	; (800b808 <VCU_TransmitBmsData1+0x1a8>)
 800b6ec:	899b      	ldrh	r3, [r3, #12]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7f4 fefa 	bl	80004e8 <__aeabi_i2d>
 800b6f4:	a342      	add	r3, pc, #264	; (adr r3, 800b800 <VCU_TransmitBmsData1+0x1a0>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 ff5f 	bl	80005bc <__aeabi_dmul>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	4610      	mov	r0, r2
 800b704:	4619      	mov	r1, r3
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	f7f4 fd9f 	bl	8000250 <__adddf3>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	4610      	mov	r0, r2
 800b718:	4619      	mov	r1, r3
 800b71a:	f7f5 fa47 	bl	8000bac <__aeabi_d2f>
 800b71e:	4603      	mov	r3, r0
 800b720:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f7f4 fef2 	bl	800050c <__aeabi_f2d>
 800b728:	a333      	add	r3, pc, #204	; (adr r3, 800b7f8 <VCU_TransmitBmsData1+0x198>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f5 f86f 	bl	8000810 <__aeabi_ddiv>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4610      	mov	r0, r2
 800b738:	4619      	mov	r1, r3
 800b73a:	f7f5 fa37 	bl	8000bac <__aeabi_d2f>
 800b73e:	4603      	mov	r3, r0
 800b740:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800b742:	edd7 7a02 	vldr	s15, [r7, #8]
 800b746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b74a:	ee17 3a90 	vmov	r3, s15
 800b74e:	b29b      	uxth	r3, r3
 800b750:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b756:	4b2f      	ldr	r3, [pc, #188]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b75c:	4b2d      	ldr	r3, [pc, #180]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b75e:	2200      	movs	r2, #0
 800b760:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b762:	4b2c      	ldr	r3, [pc, #176]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b764:	2200      	movs	r2, #0
 800b766:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800b768:	4b2b      	ldr	r3, [pc, #172]	; (800b818 <VCU_TransmitBmsData1+0x1b8>)
 800b76a:	461a      	mov	r2, r3
 800b76c:	463b      	mov	r3, r7
 800b76e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b772:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b776:	4b24      	ldr	r3, [pc, #144]	; (800b808 <VCU_TransmitBmsData1+0x1a8>)
 800b778:	895b      	ldrh	r3, [r3, #10]
 800b77a:	f203 4321 	addw	r3, r3, #1057	; 0x421
 800b77e:	b29b      	uxth	r3, r3
 800b780:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b784:	b299      	uxth	r1, r3
 800b786:	4a23      	ldr	r2, [pc, #140]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b788:	8813      	ldrh	r3, [r2, #0]
 800b78a:	f361 030a 	bfi	r3, r1, #0, #11
 800b78e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b790:	4a20      	ldr	r2, [pc, #128]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b792:	6813      	ldr	r3, [r2, #0]
 800b794:	f36f 23dc 	bfc	r3, #11, #18
 800b798:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b79a:	4a1e      	ldr	r2, [pc, #120]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b79c:	7913      	ldrb	r3, [r2, #4]
 800b79e:	f36f 1386 	bfc	r3, #6, #1
 800b7a2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b7a4:	4a1b      	ldr	r2, [pc, #108]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b7a6:	7913      	ldrb	r3, [r2, #4]
 800b7a8:	2108      	movs	r1, #8
 800b7aa:	f361 0303 	bfi	r3, r1, #0, #4
 800b7ae:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b7b0:	4a18      	ldr	r2, [pc, #96]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b7b2:	7913      	ldrb	r3, [r2, #4]
 800b7b4:	f36f 13c7 	bfc	r3, #7, #1
 800b7b8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b7ba:	4a16      	ldr	r2, [pc, #88]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b7bc:	7913      	ldrb	r3, [r2, #4]
 800b7be:	f36f 1304 	bfc	r3, #4, #1
 800b7c2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b7c4:	4b15      	ldr	r3, [pc, #84]	; (800b81c <VCU_TransmitBmsData1+0x1bc>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 0304 	and.w	r3, r3, #4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00c      	beq.n	800b7ea <VCU_TransmitBmsData1+0x18a>
 800b7d0:	4b10      	ldr	r3, [pc, #64]	; (800b814 <VCU_TransmitBmsData1+0x1b4>)
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4910      	ldr	r1, [pc, #64]	; (800b820 <VCU_TransmitBmsData1+0x1c0>)
 800b7de:	4811      	ldr	r0, [pc, #68]	; (800b824 <VCU_TransmitBmsData1+0x1c4>)
 800b7e0:	f008 fa54 	bl	8013c8c <siprintf>
 800b7e4:	480f      	ldr	r0, [pc, #60]	; (800b824 <VCU_TransmitBmsData1+0x1c4>)
 800b7e6:	f7f9 fdbb 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	f7ff fa74 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800b7f0:	bf00      	nop
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	9999999a 	.word	0x9999999a
 800b7fc:	3fa99999 	.word	0x3fa99999
 800b800:	eb851eb8 	.word	0xeb851eb8
 800b804:	3f8eb851 	.word	0x3f8eb851
 800b808:	2000a664 	.word	0x2000a664
 800b80c:	40990000 	.word	0x40990000
 800b810:	40df4000 	.word	0x40df4000
 800b814:	2000a6c4 	.word	0x2000a6c4
 800b818:	2000a6d0 	.word	0x2000a6d0
 800b81c:	2000000c 	.word	0x2000000c
 800b820:	080182c8 	.word	0x080182c8
 800b824:	20000b64 	.word	0x20000b64

0800b828 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800b82e:	f04f 0300 	mov.w	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b834:	f04f 0300 	mov.w	r3, #0
 800b838:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800b83a:	4b95      	ldr	r3, [pc, #596]	; (800ba90 <VCU_TransmitBmsData2+0x268>)
 800b83c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b840:	4618      	mov	r0, r3
 800b842:	f7f4 fe51 	bl	80004e8 <__aeabi_i2d>
 800b846:	f04f 0200 	mov.w	r2, #0
 800b84a:	4b92      	ldr	r3, [pc, #584]	; (800ba94 <VCU_TransmitBmsData2+0x26c>)
 800b84c:	f7f4 feb6 	bl	80005bc <__aeabi_dmul>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4610      	mov	r0, r2
 800b856:	4619      	mov	r1, r3
 800b858:	f04f 0200 	mov.w	r2, #0
 800b85c:	f04f 0300 	mov.w	r3, #0
 800b860:	f7f4 fcf6 	bl	8000250 <__adddf3>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4610      	mov	r0, r2
 800b86a:	4619      	mov	r1, r3
 800b86c:	f7f5 f99e 	bl	8000bac <__aeabi_d2f>
 800b870:	4603      	mov	r3, r0
 800b872:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7f4 fe49 	bl	800050c <__aeabi_f2d>
 800b87a:	a381      	add	r3, pc, #516	; (adr r3, 800ba80 <VCU_TransmitBmsData2+0x258>)
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	f7f4 ffc6 	bl	8000810 <__aeabi_ddiv>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4610      	mov	r0, r2
 800b88a:	4619      	mov	r1, r3
 800b88c:	f7f5 f98e 	bl	8000bac <__aeabi_d2f>
 800b890:	4603      	mov	r3, r0
 800b892:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800b894:	edd7 7a02 	vldr	s15, [r7, #8]
 800b898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b89c:	ee17 3a90 	vmov	r3, s15
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800b8a4:	4b7a      	ldr	r3, [pc, #488]	; (800ba90 <VCU_TransmitBmsData2+0x268>)
 800b8a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7f4 fe1d 	bl	80004e8 <__aeabi_i2d>
 800b8ae:	a376      	add	r3, pc, #472	; (adr r3, 800ba88 <VCU_TransmitBmsData2+0x260>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7f4 fe82 	bl	80005bc <__aeabi_dmul>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4610      	mov	r0, r2
 800b8be:	4619      	mov	r1, r3
 800b8c0:	f04f 0200 	mov.w	r2, #0
 800b8c4:	f04f 0300 	mov.w	r3, #0
 800b8c8:	f7f4 fcc2 	bl	8000250 <__adddf3>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f7f5 f96a 	bl	8000bac <__aeabi_d2f>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7f4 fe15 	bl	800050c <__aeabi_f2d>
 800b8e2:	a369      	add	r3, pc, #420	; (adr r3, 800ba88 <VCU_TransmitBmsData2+0x260>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 ff92 	bl	8000810 <__aeabi_ddiv>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f7f5 f95a 	bl	8000bac <__aeabi_d2f>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800b8fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b904:	ee17 3a90 	vmov	r3, s15
 800b908:	b29b      	uxth	r3, r3
 800b90a:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800b90c:	4b60      	ldr	r3, [pc, #384]	; (800ba90 <VCU_TransmitBmsData2+0x268>)
 800b90e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b910:	4618      	mov	r0, r3
 800b912:	f7f4 fde9 	bl	80004e8 <__aeabi_i2d>
 800b916:	a35c      	add	r3, pc, #368	; (adr r3, 800ba88 <VCU_TransmitBmsData2+0x260>)
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f7f4 fe4e 	bl	80005bc <__aeabi_dmul>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4610      	mov	r0, r2
 800b926:	4619      	mov	r1, r3
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	f7f4 fc8e 	bl	8000250 <__adddf3>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4610      	mov	r0, r2
 800b93a:	4619      	mov	r1, r3
 800b93c:	f7f5 f936 	bl	8000bac <__aeabi_d2f>
 800b940:	4603      	mov	r3, r0
 800b942:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7f4 fde1 	bl	800050c <__aeabi_f2d>
 800b94a:	a34f      	add	r3, pc, #316	; (adr r3, 800ba88 <VCU_TransmitBmsData2+0x260>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f7f4 ff5e 	bl	8000810 <__aeabi_ddiv>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4610      	mov	r0, r2
 800b95a:	4619      	mov	r1, r3
 800b95c:	f7f5 f926 	bl	8000bac <__aeabi_d2f>
 800b960:	4603      	mov	r3, r0
 800b962:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800b964:	edd7 7a02 	vldr	s15, [r7, #8]
 800b968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b96c:	ee17 3a90 	vmov	r3, s15
 800b970:	b29b      	uxth	r3, r3
 800b972:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800b974:	4b46      	ldr	r3, [pc, #280]	; (800ba90 <VCU_TransmitBmsData2+0x268>)
 800b976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b978:	4618      	mov	r0, r3
 800b97a:	f7f4 fdb5 	bl	80004e8 <__aeabi_i2d>
 800b97e:	a342      	add	r3, pc, #264	; (adr r3, 800ba88 <VCU_TransmitBmsData2+0x260>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f7f4 fe1a 	bl	80005bc <__aeabi_dmul>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4610      	mov	r0, r2
 800b98e:	4619      	mov	r1, r3
 800b990:	f04f 0200 	mov.w	r2, #0
 800b994:	f04f 0300 	mov.w	r3, #0
 800b998:	f7f4 fc5a 	bl	8000250 <__adddf3>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f7f5 f902 	bl	8000bac <__aeabi_d2f>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f7f4 fdad 	bl	800050c <__aeabi_f2d>
 800b9b2:	a335      	add	r3, pc, #212	; (adr r3, 800ba88 <VCU_TransmitBmsData2+0x260>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 ff2a 	bl	8000810 <__aeabi_ddiv>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f7f5 f8f2 	bl	8000bac <__aeabi_d2f>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800b9cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9d4:	ee17 3a90 	vmov	r3, s15
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b9dc:	4b2e      	ldr	r3, [pc, #184]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b9e2:	4b2d      	ldr	r3, [pc, #180]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b9e8:	4b2b      	ldr	r3, [pc, #172]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800b9ee:	4b2b      	ldr	r3, [pc, #172]	; (800ba9c <VCU_TransmitBmsData2+0x274>)
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	463b      	mov	r3, r7
 800b9f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9f8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b9fc:	4b24      	ldr	r3, [pc, #144]	; (800ba90 <VCU_TransmitBmsData2+0x268>)
 800b9fe:	895b      	ldrh	r3, [r3, #10]
 800ba00:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba0a:	b299      	uxth	r1, r3
 800ba0c:	4a22      	ldr	r2, [pc, #136]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba0e:	8813      	ldrh	r3, [r2, #0]
 800ba10:	f361 030a 	bfi	r3, r1, #0, #11
 800ba14:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ba16:	4a20      	ldr	r2, [pc, #128]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba18:	6813      	ldr	r3, [r2, #0]
 800ba1a:	f36f 23dc 	bfc	r3, #11, #18
 800ba1e:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ba20:	4a1d      	ldr	r2, [pc, #116]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba22:	7913      	ldrb	r3, [r2, #4]
 800ba24:	f36f 1386 	bfc	r3, #6, #1
 800ba28:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ba2a:	4a1b      	ldr	r2, [pc, #108]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba2c:	7913      	ldrb	r3, [r2, #4]
 800ba2e:	2108      	movs	r1, #8
 800ba30:	f361 0303 	bfi	r3, r1, #0, #4
 800ba34:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ba36:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba38:	7913      	ldrb	r3, [r2, #4]
 800ba3a:	f36f 13c7 	bfc	r3, #7, #1
 800ba3e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ba40:	4a15      	ldr	r2, [pc, #84]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba42:	7913      	ldrb	r3, [r2, #4]
 800ba44:	f36f 1304 	bfc	r3, #4, #1
 800ba48:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ba4a:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <VCU_TransmitBmsData2+0x278>)
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00c      	beq.n	800ba70 <VCU_TransmitBmsData2+0x248>
 800ba56:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <VCU_TransmitBmsData2+0x270>)
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	4910      	ldr	r1, [pc, #64]	; (800baa4 <VCU_TransmitBmsData2+0x27c>)
 800ba64:	4810      	ldr	r0, [pc, #64]	; (800baa8 <VCU_TransmitBmsData2+0x280>)
 800ba66:	f008 f911 	bl	8013c8c <siprintf>
 800ba6a:	480f      	ldr	r0, [pc, #60]	; (800baa8 <VCU_TransmitBmsData2+0x280>)
 800ba6c:	f7f9 fc78 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ba70:	2000      	movs	r0, #0
 800ba72:	f7ff f931 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800ba76:	bf00      	nop
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	9999999a 	.word	0x9999999a
 800ba84:	3f599999 	.word	0x3f599999
 800ba88:	d2f1a9fc 	.word	0xd2f1a9fc
 800ba8c:	3f50624d 	.word	0x3f50624d
 800ba90:	2000a664 	.word	0x2000a664
 800ba94:	3fe00000 	.word	0x3fe00000
 800ba98:	2000a6c4 	.word	0x2000a6c4
 800ba9c:	2000a6d0 	.word	0x2000a6d0
 800baa0:	2000000c 	.word	0x2000000c
 800baa4:	080182e4 	.word	0x080182e4
 800baa8:	20000b64 	.word	0x20000b64
 800baac:	00000000 	.word	0x00000000

0800bab0 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800bab6:	f04f 0300 	mov.w	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800babc:	f04f 0300 	mov.w	r3, #0
 800bac0:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800bac2:	4b89      	ldr	r3, [pc, #548]	; (800bce8 <VCU_TransmitBmsData3+0x238>)
 800bac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7f4 fd0e 	bl	80004e8 <__aeabi_i2d>
 800bacc:	a380      	add	r3, pc, #512	; (adr r3, 800bcd0 <VCU_TransmitBmsData3+0x220>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	f7f4 fd73 	bl	80005bc <__aeabi_dmul>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4610      	mov	r0, r2
 800badc:	4619      	mov	r1, r3
 800bade:	a37e      	add	r3, pc, #504	; (adr r3, 800bcd8 <VCU_TransmitBmsData3+0x228>)
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f7f4 fbb2 	bl	800024c <__aeabi_dsub>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4610      	mov	r0, r2
 800baee:	4619      	mov	r1, r3
 800baf0:	f7f5 f85c 	bl	8000bac <__aeabi_d2f>
 800baf4:	4603      	mov	r3, r0
 800baf6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7f4 fd07 	bl	800050c <__aeabi_f2d>
 800bafe:	f04f 0200 	mov.w	r2, #0
 800bb02:	4b7a      	ldr	r3, [pc, #488]	; (800bcec <VCU_TransmitBmsData3+0x23c>)
 800bb04:	f7f4 fe84 	bl	8000810 <__aeabi_ddiv>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	4619      	mov	r1, r3
 800bb10:	a373      	add	r3, pc, #460	; (adr r3, 800bce0 <VCU_TransmitBmsData3+0x230>)
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	f7f4 fb9b 	bl	8000250 <__adddf3>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7f5 f843 	bl	8000bac <__aeabi_d2f>
 800bb26:	4603      	mov	r3, r0
 800bb28:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800bb2a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb32:	ee17 3a90 	vmov	r3, s15
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800bb3a:	4b6b      	ldr	r3, [pc, #428]	; (800bce8 <VCU_TransmitBmsData3+0x238>)
 800bb3c:	8bdb      	ldrh	r3, [r3, #30]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f4 fcd2 	bl	80004e8 <__aeabi_i2d>
 800bb44:	a362      	add	r3, pc, #392	; (adr r3, 800bcd0 <VCU_TransmitBmsData3+0x220>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fd37 	bl	80005bc <__aeabi_dmul>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4610      	mov	r0, r2
 800bb54:	4619      	mov	r1, r3
 800bb56:	a360      	add	r3, pc, #384	; (adr r3, 800bcd8 <VCU_TransmitBmsData3+0x228>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f7f4 fb76 	bl	800024c <__aeabi_dsub>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4610      	mov	r0, r2
 800bb66:	4619      	mov	r1, r3
 800bb68:	f7f5 f820 	bl	8000bac <__aeabi_d2f>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7f4 fccb 	bl	800050c <__aeabi_f2d>
 800bb76:	f04f 0200 	mov.w	r2, #0
 800bb7a:	4b5c      	ldr	r3, [pc, #368]	; (800bcec <VCU_TransmitBmsData3+0x23c>)
 800bb7c:	f7f4 fe48 	bl	8000810 <__aeabi_ddiv>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4610      	mov	r0, r2
 800bb86:	4619      	mov	r1, r3
 800bb88:	a355      	add	r3, pc, #340	; (adr r3, 800bce0 <VCU_TransmitBmsData3+0x230>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fb5f 	bl	8000250 <__adddf3>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4610      	mov	r0, r2
 800bb98:	4619      	mov	r1, r3
 800bb9a:	f7f5 f807 	bl	8000bac <__aeabi_d2f>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800bba2:	edd7 7a02 	vldr	s15, [r7, #8]
 800bba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbaa:	ee17 3a90 	vmov	r3, s15
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800bbb2:	4b4d      	ldr	r3, [pc, #308]	; (800bce8 <VCU_TransmitBmsData3+0x238>)
 800bbb4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7f4 fc96 	bl	80004e8 <__aeabi_i2d>
 800bbbc:	a344      	add	r3, pc, #272	; (adr r3, 800bcd0 <VCU_TransmitBmsData3+0x220>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f7f4 fcfb 	bl	80005bc <__aeabi_dmul>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4610      	mov	r0, r2
 800bbcc:	4619      	mov	r1, r3
 800bbce:	a342      	add	r3, pc, #264	; (adr r3, 800bcd8 <VCU_TransmitBmsData3+0x228>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fb3a 	bl	800024c <__aeabi_dsub>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4610      	mov	r0, r2
 800bbde:	4619      	mov	r1, r3
 800bbe0:	f7f4 ffe4 	bl	8000bac <__aeabi_d2f>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7f4 fc8f 	bl	800050c <__aeabi_f2d>
 800bbee:	f04f 0200 	mov.w	r2, #0
 800bbf2:	4b3e      	ldr	r3, [pc, #248]	; (800bcec <VCU_TransmitBmsData3+0x23c>)
 800bbf4:	f7f4 fe0c 	bl	8000810 <__aeabi_ddiv>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4619      	mov	r1, r3
 800bc00:	a337      	add	r3, pc, #220	; (adr r3, 800bce0 <VCU_TransmitBmsData3+0x230>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fb23 	bl	8000250 <__adddf3>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4619      	mov	r1, r3
 800bc12:	f7f4 ffcb 	bl	8000bac <__aeabi_d2f>
 800bc16:	4603      	mov	r3, r0
 800bc18:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800bc1a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc22:	ee17 3a90 	vmov	r3, s15
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bc2e:	4b30      	ldr	r3, [pc, #192]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bc34:	4b2e      	ldr	r3, [pc, #184]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bc3a:	4b2d      	ldr	r3, [pc, #180]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800bc40:	4b2c      	ldr	r3, [pc, #176]	; (800bcf4 <VCU_TransmitBmsData3+0x244>)
 800bc42:	461a      	mov	r2, r3
 800bc44:	463b      	mov	r3, r7
 800bc46:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc4a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bc4e:	4b26      	ldr	r3, [pc, #152]	; (800bce8 <VCU_TransmitBmsData3+0x238>)
 800bc50:	895b      	ldrh	r3, [r3, #10]
 800bc52:	f203 4323 	addw	r3, r3, #1059	; 0x423
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc5c:	b299      	uxth	r1, r3
 800bc5e:	4a24      	ldr	r2, [pc, #144]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc60:	8813      	ldrh	r3, [r2, #0]
 800bc62:	f361 030a 	bfi	r3, r1, #0, #11
 800bc66:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800bc68:	4a21      	ldr	r2, [pc, #132]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc6a:	6813      	ldr	r3, [r2, #0]
 800bc6c:	f36f 23dc 	bfc	r3, #11, #18
 800bc70:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bc72:	4a1f      	ldr	r2, [pc, #124]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc74:	7913      	ldrb	r3, [r2, #4]
 800bc76:	f36f 1386 	bfc	r3, #6, #1
 800bc7a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bc7c:	4a1c      	ldr	r2, [pc, #112]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc7e:	7913      	ldrb	r3, [r2, #4]
 800bc80:	2108      	movs	r1, #8
 800bc82:	f361 0303 	bfi	r3, r1, #0, #4
 800bc86:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bc88:	4a19      	ldr	r2, [pc, #100]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc8a:	7913      	ldrb	r3, [r2, #4]
 800bc8c:	f36f 13c7 	bfc	r3, #7, #1
 800bc90:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bc92:	4a17      	ldr	r2, [pc, #92]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bc94:	7913      	ldrb	r3, [r2, #4]
 800bc96:	f36f 1304 	bfc	r3, #4, #1
 800bc9a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bc9c:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <VCU_TransmitBmsData3+0x248>)
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	f003 0304 	and.w	r3, r3, #4
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00c      	beq.n	800bcc2 <VCU_TransmitBmsData3+0x212>
 800bca8:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <VCU_TransmitBmsData3+0x240>)
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	4911      	ldr	r1, [pc, #68]	; (800bcfc <VCU_TransmitBmsData3+0x24c>)
 800bcb6:	4812      	ldr	r0, [pc, #72]	; (800bd00 <VCU_TransmitBmsData3+0x250>)
 800bcb8:	f007 ffe8 	bl	8013c8c <siprintf>
 800bcbc:	4810      	ldr	r0, [pc, #64]	; (800bd00 <VCU_TransmitBmsData3+0x250>)
 800bcbe:	f7f9 fb4f 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	f7ff f808 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	47ae147b 	.word	0x47ae147b
 800bcd4:	3f847ae1 	.word	0x3f847ae1
 800bcd8:	cccccccd 	.word	0xcccccccd
 800bcdc:	404baccc 	.word	0x404baccc
 800bce0:	00000000 	.word	0x00000000
 800bce4:	40c11000 	.word	0x40c11000
 800bce8:	2000a664 	.word	0x2000a664
 800bcec:	3fa00000 	.word	0x3fa00000
 800bcf0:	2000a6c4 	.word	0x2000a6c4
 800bcf4:	2000a6d0 	.word	0x2000a6d0
 800bcf8:	2000000c 	.word	0x2000000c
 800bcfc:	08018300 	.word	0x08018300
 800bd00:	20000b64 	.word	0x20000b64
 800bd04:	00000000 	.word	0x00000000

0800bd08 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800bd0e:	f04f 0300 	mov.w	r3, #0
 800bd12:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800bd14:	f04f 0300 	mov.w	r3, #0
 800bd18:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800bd1a:	4b83      	ldr	r3, [pc, #524]	; (800bf28 <VCU_TransmitBmsData5+0x220>)
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7f4 fbd2 	bl	80004c8 <__aeabi_ui2d>
 800bd24:	a37c      	add	r3, pc, #496	; (adr r3, 800bf18 <VCU_TransmitBmsData5+0x210>)
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	f7f4 fc47 	bl	80005bc <__aeabi_dmul>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4610      	mov	r0, r2
 800bd34:	4619      	mov	r1, r3
 800bd36:	f04f 0200 	mov.w	r2, #0
 800bd3a:	4b7c      	ldr	r3, [pc, #496]	; (800bf2c <VCU_TransmitBmsData5+0x224>)
 800bd3c:	f7f4 fa86 	bl	800024c <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4610      	mov	r0, r2
 800bd46:	4619      	mov	r1, r3
 800bd48:	f7f4 ff30 	bl	8000bac <__aeabi_d2f>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7f4 fbdb 	bl	800050c <__aeabi_f2d>
 800bd56:	a370      	add	r3, pc, #448	; (adr r3, 800bf18 <VCU_TransmitBmsData5+0x210>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 fd58 	bl	8000810 <__aeabi_ddiv>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4610      	mov	r0, r2
 800bd66:	4619      	mov	r1, r3
 800bd68:	f04f 0200 	mov.w	r2, #0
 800bd6c:	4b70      	ldr	r3, [pc, #448]	; (800bf30 <VCU_TransmitBmsData5+0x228>)
 800bd6e:	f7f4 fa6f 	bl	8000250 <__adddf3>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	4610      	mov	r0, r2
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f7f4 ff17 	bl	8000bac <__aeabi_d2f>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800bd82:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd8a:	ee17 3a90 	vmov	r3, s15
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800bd92:	4b65      	ldr	r3, [pc, #404]	; (800bf28 <VCU_TransmitBmsData5+0x220>)
 800bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7f4 fb96 	bl	80004c8 <__aeabi_ui2d>
 800bd9c:	a35e      	add	r3, pc, #376	; (adr r3, 800bf18 <VCU_TransmitBmsData5+0x210>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fc0b 	bl	80005bc <__aeabi_dmul>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	f04f 0200 	mov.w	r2, #0
 800bdb2:	4b5e      	ldr	r3, [pc, #376]	; (800bf2c <VCU_TransmitBmsData5+0x224>)
 800bdb4:	f7f4 fa4a 	bl	800024c <__aeabi_dsub>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	f7f4 fef4 	bl	8000bac <__aeabi_d2f>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7f4 fb9f 	bl	800050c <__aeabi_f2d>
 800bdce:	a352      	add	r3, pc, #328	; (adr r3, 800bf18 <VCU_TransmitBmsData5+0x210>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f7f4 fd1c 	bl	8000810 <__aeabi_ddiv>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4610      	mov	r0, r2
 800bdde:	4619      	mov	r1, r3
 800bde0:	f04f 0200 	mov.w	r2, #0
 800bde4:	4b52      	ldr	r3, [pc, #328]	; (800bf30 <VCU_TransmitBmsData5+0x228>)
 800bde6:	f7f4 fa33 	bl	8000250 <__adddf3>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4610      	mov	r0, r2
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	f7f4 fedb 	bl	8000bac <__aeabi_d2f>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800bdfa:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be02:	ee17 3a90 	vmov	r3, s15
 800be06:	b29b      	uxth	r3, r3
 800be08:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800be0a:	4b47      	ldr	r3, [pc, #284]	; (800bf28 <VCU_TransmitBmsData5+0x220>)
 800be0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f4 fb6a 	bl	80004e8 <__aeabi_i2d>
 800be14:	a342      	add	r3, pc, #264	; (adr r3, 800bf20 <VCU_TransmitBmsData5+0x218>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f7f4 fbcf 	bl	80005bc <__aeabi_dmul>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4610      	mov	r0, r2
 800be24:	4619      	mov	r1, r3
 800be26:	f04f 0200 	mov.w	r2, #0
 800be2a:	f04f 0300 	mov.w	r3, #0
 800be2e:	f7f4 fa0f 	bl	8000250 <__adddf3>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4610      	mov	r0, r2
 800be38:	4619      	mov	r1, r3
 800be3a:	f7f4 feb7 	bl	8000bac <__aeabi_d2f>
 800be3e:	4603      	mov	r3, r0
 800be40:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7f4 fb62 	bl	800050c <__aeabi_f2d>
 800be48:	a333      	add	r3, pc, #204	; (adr r3, 800bf18 <VCU_TransmitBmsData5+0x210>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fcdf 	bl	8000810 <__aeabi_ddiv>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4610      	mov	r0, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	f7f4 fea7 	bl	8000bac <__aeabi_d2f>
 800be5e:	4603      	mov	r3, r0
 800be60:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800be62:	edd7 7a02 	vldr	s15, [r7, #8]
 800be66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6a:	ee17 3a90 	vmov	r3, s15
 800be6e:	b29b      	uxth	r3, r3
 800be70:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800be76:	4b2f      	ldr	r3, [pc, #188]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800be7c:	4b2d      	ldr	r3, [pc, #180]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800be7e:	2200      	movs	r2, #0
 800be80:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800be82:	4b2c      	ldr	r3, [pc, #176]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800be84:	2200      	movs	r2, #0
 800be86:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800be88:	4b2b      	ldr	r3, [pc, #172]	; (800bf38 <VCU_TransmitBmsData5+0x230>)
 800be8a:	461a      	mov	r2, r3
 800be8c:	463b      	mov	r3, r7
 800be8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be92:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800be96:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <VCU_TransmitBmsData5+0x220>)
 800be98:	895b      	ldrh	r3, [r3, #10]
 800be9a:	f203 4325 	addw	r3, r3, #1061	; 0x425
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bea4:	b299      	uxth	r1, r3
 800bea6:	4a23      	ldr	r2, [pc, #140]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800bea8:	8813      	ldrh	r3, [r2, #0]
 800beaa:	f361 030a 	bfi	r3, r1, #0, #11
 800beae:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800beb0:	4a20      	ldr	r2, [pc, #128]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800beb2:	6813      	ldr	r3, [r2, #0]
 800beb4:	f36f 23dc 	bfc	r3, #11, #18
 800beb8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800beba:	4a1e      	ldr	r2, [pc, #120]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800bebc:	7913      	ldrb	r3, [r2, #4]
 800bebe:	f36f 1386 	bfc	r3, #6, #1
 800bec2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bec4:	4a1b      	ldr	r2, [pc, #108]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800bec6:	7913      	ldrb	r3, [r2, #4]
 800bec8:	2108      	movs	r1, #8
 800beca:	f361 0303 	bfi	r3, r1, #0, #4
 800bece:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bed0:	4a18      	ldr	r2, [pc, #96]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800bed2:	7913      	ldrb	r3, [r2, #4]
 800bed4:	f36f 13c7 	bfc	r3, #7, #1
 800bed8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800beda:	4a16      	ldr	r2, [pc, #88]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800bedc:	7913      	ldrb	r3, [r2, #4]
 800bede:	f36f 1304 	bfc	r3, #4, #1
 800bee2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bee4:	4b15      	ldr	r3, [pc, #84]	; (800bf3c <VCU_TransmitBmsData5+0x234>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00c      	beq.n	800bf0a <VCU_TransmitBmsData5+0x202>
 800bef0:	4b10      	ldr	r3, [pc, #64]	; (800bf34 <VCU_TransmitBmsData5+0x22c>)
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bef8:	b29b      	uxth	r3, r3
 800befa:	461a      	mov	r2, r3
 800befc:	4910      	ldr	r1, [pc, #64]	; (800bf40 <VCU_TransmitBmsData5+0x238>)
 800befe:	4811      	ldr	r0, [pc, #68]	; (800bf44 <VCU_TransmitBmsData5+0x23c>)
 800bf00:	f007 fec4 	bl	8013c8c <siprintf>
 800bf04:	480f      	ldr	r0, [pc, #60]	; (800bf44 <VCU_TransmitBmsData5+0x23c>)
 800bf06:	f7f9 fa2b 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7fe fee4 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	9999999a 	.word	0x9999999a
 800bf1c:	3fa99999 	.word	0x3fa99999
 800bf20:	eb851eb8 	.word	0xeb851eb8
 800bf24:	3f8eb851 	.word	0x3f8eb851
 800bf28:	2000a664 	.word	0x2000a664
 800bf2c:	40990000 	.word	0x40990000
 800bf30:	40df4000 	.word	0x40df4000
 800bf34:	2000a6c4 	.word	0x2000a6c4
 800bf38:	2000a6d0 	.word	0x2000a6d0
 800bf3c:	2000000c 	.word	0x2000000c
 800bf40:	0801831c 	.word	0x0801831c
 800bf44:	20000b64 	.word	0x20000b64

0800bf48 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800bf52:	2300      	movs	r3, #0
 800bf54:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800bf56:	4b2d      	ldr	r3, [pc, #180]	; (800c00c <VCU_TransmitBmsData8+0xc4>)
 800bf58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bf5c:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800bf5e:	2300      	movs	r3, #0
 800bf60:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800bf62:	4b2a      	ldr	r3, [pc, #168]	; (800c00c <VCU_TransmitBmsData8+0xc4>)
 800bf64:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bf68:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bf6a:	4b29      	ldr	r3, [pc, #164]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bf70:	4b27      	ldr	r3, [pc, #156]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bf76:	4b26      	ldr	r3, [pc, #152]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800bf7c:	4b25      	ldr	r3, [pc, #148]	; (800c014 <VCU_TransmitBmsData8+0xcc>)
 800bf7e:	461a      	mov	r2, r3
 800bf80:	463b      	mov	r3, r7
 800bf82:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf86:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bf8a:	4b20      	ldr	r3, [pc, #128]	; (800c00c <VCU_TransmitBmsData8+0xc4>)
 800bf8c:	895b      	ldrh	r3, [r3, #10]
 800bf8e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf98:	b299      	uxth	r1, r3
 800bf9a:	4a1d      	ldr	r2, [pc, #116]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bf9c:	8813      	ldrh	r3, [r2, #0]
 800bf9e:	f361 030a 	bfi	r3, r1, #0, #11
 800bfa2:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bfa4:	4a1a      	ldr	r2, [pc, #104]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bfa6:	6813      	ldr	r3, [r2, #0]
 800bfa8:	f36f 23dc 	bfc	r3, #11, #18
 800bfac:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bfae:	4a18      	ldr	r2, [pc, #96]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bfb0:	7913      	ldrb	r3, [r2, #4]
 800bfb2:	f36f 1386 	bfc	r3, #6, #1
 800bfb6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bfb8:	4a15      	ldr	r2, [pc, #84]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bfba:	7913      	ldrb	r3, [r2, #4]
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	f361 0303 	bfi	r3, r1, #0, #4
 800bfc2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bfc4:	4a12      	ldr	r2, [pc, #72]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bfc6:	7913      	ldrb	r3, [r2, #4]
 800bfc8:	f36f 13c7 	bfc	r3, #7, #1
 800bfcc:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bfce:	4a10      	ldr	r2, [pc, #64]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bfd0:	7913      	ldrb	r3, [r2, #4]
 800bfd2:	f36f 1304 	bfc	r3, #4, #1
 800bfd6:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bfd8:	4b0f      	ldr	r3, [pc, #60]	; (800c018 <VCU_TransmitBmsData8+0xd0>)
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00c      	beq.n	800bffe <VCU_TransmitBmsData8+0xb6>
 800bfe4:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <VCU_TransmitBmsData8+0xc8>)
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	461a      	mov	r2, r3
 800bff0:	490a      	ldr	r1, [pc, #40]	; (800c01c <VCU_TransmitBmsData8+0xd4>)
 800bff2:	480b      	ldr	r0, [pc, #44]	; (800c020 <VCU_TransmitBmsData8+0xd8>)
 800bff4:	f007 fe4a 	bl	8013c8c <siprintf>
 800bff8:	4809      	ldr	r0, [pc, #36]	; (800c020 <VCU_TransmitBmsData8+0xd8>)
 800bffa:	f7f9 f9b1 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bffe:	2000      	movs	r0, #0
 800c000:	f7fe fe6a 	bl	800acd8 <VCU_TransmitMessageQueue>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	2000a664 	.word	0x2000a664
 800c010:	2000a6c4 	.word	0x2000a6c4
 800c014:	2000a6d0 	.word	0x2000a6d0
 800c018:	2000000c 	.word	0x2000000c
 800c01c:	08018338 	.word	0x08018338
 800c020:	20000b64 	.word	0x20000b64

0800c024 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800c02e:	2300      	movs	r3, #0
 800c030:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800c032:	4b2d      	ldr	r3, [pc, #180]	; (800c0e8 <VCU_TransmitBmsData9+0xc4>)
 800c034:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c038:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800c03a:	2300      	movs	r3, #0
 800c03c:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800c03e:	4b2a      	ldr	r3, [pc, #168]	; (800c0e8 <VCU_TransmitBmsData9+0xc4>)
 800c040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c044:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c046:	4b29      	ldr	r3, [pc, #164]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c04c:	4b27      	ldr	r3, [pc, #156]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c04e:	2200      	movs	r2, #0
 800c050:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c052:	4b26      	ldr	r3, [pc, #152]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c054:	2200      	movs	r2, #0
 800c056:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800c058:	4b25      	ldr	r3, [pc, #148]	; (800c0f0 <VCU_TransmitBmsData9+0xcc>)
 800c05a:	461a      	mov	r2, r3
 800c05c:	463b      	mov	r3, r7
 800c05e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c062:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c066:	4b20      	ldr	r3, [pc, #128]	; (800c0e8 <VCU_TransmitBmsData9+0xc4>)
 800c068:	895b      	ldrh	r3, [r3, #10]
 800c06a:	f203 4329 	addw	r3, r3, #1065	; 0x429
 800c06e:	b29b      	uxth	r3, r3
 800c070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c074:	b299      	uxth	r1, r3
 800c076:	4a1d      	ldr	r2, [pc, #116]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c078:	8813      	ldrh	r3, [r2, #0]
 800c07a:	f361 030a 	bfi	r3, r1, #0, #11
 800c07e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c080:	4a1a      	ldr	r2, [pc, #104]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	f36f 23dc 	bfc	r3, #11, #18
 800c088:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c08a:	4a18      	ldr	r2, [pc, #96]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c08c:	7913      	ldrb	r3, [r2, #4]
 800c08e:	f36f 1386 	bfc	r3, #6, #1
 800c092:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c094:	4a15      	ldr	r2, [pc, #84]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c096:	7913      	ldrb	r3, [r2, #4]
 800c098:	2108      	movs	r1, #8
 800c09a:	f361 0303 	bfi	r3, r1, #0, #4
 800c09e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c0a0:	4a12      	ldr	r2, [pc, #72]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c0a2:	7913      	ldrb	r3, [r2, #4]
 800c0a4:	f36f 13c7 	bfc	r3, #7, #1
 800c0a8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c0aa:	4a10      	ldr	r2, [pc, #64]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c0ac:	7913      	ldrb	r3, [r2, #4]
 800c0ae:	f36f 1304 	bfc	r3, #4, #1
 800c0b2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c0b4:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <VCU_TransmitBmsData9+0xd0>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	f003 0304 	and.w	r3, r3, #4
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00c      	beq.n	800c0da <VCU_TransmitBmsData9+0xb6>
 800c0c0:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <VCU_TransmitBmsData9+0xc8>)
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	490a      	ldr	r1, [pc, #40]	; (800c0f8 <VCU_TransmitBmsData9+0xd4>)
 800c0ce:	480b      	ldr	r0, [pc, #44]	; (800c0fc <VCU_TransmitBmsData9+0xd8>)
 800c0d0:	f007 fddc 	bl	8013c8c <siprintf>
 800c0d4:	4809      	ldr	r0, [pc, #36]	; (800c0fc <VCU_TransmitBmsData9+0xd8>)
 800c0d6:	f7f9 f943 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c0da:	2000      	movs	r0, #0
 800c0dc:	f7fe fdfc 	bl	800acd8 <VCU_TransmitMessageQueue>

}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	2000a664 	.word	0x2000a664
 800c0ec:	2000a6c4 	.word	0x2000a6c4
 800c0f0:	2000a6d0 	.word	0x2000a6d0
 800c0f4:	2000000c 	.word	0x2000000c
 800c0f8:	08018354 	.word	0x08018354
 800c0fc:	20000b64 	.word	0x20000b64

0800c100 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800c10e:	2300      	movs	r3, #0
 800c110:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c112:	4b28      	ldr	r3, [pc, #160]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c118:	4b26      	ldr	r3, [pc, #152]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c11e:	4b25      	ldr	r3, [pc, #148]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c120:	2200      	movs	r2, #0
 800c122:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <VCU_TransmitBmsData10+0xb8>)
 800c126:	461a      	mov	r2, r3
 800c128:	463b      	mov	r3, r7
 800c12a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c12e:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c132:	4b22      	ldr	r3, [pc, #136]	; (800c1bc <VCU_TransmitBmsData10+0xbc>)
 800c134:	895b      	ldrh	r3, [r3, #10]
 800c136:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c140:	b299      	uxth	r1, r3
 800c142:	4a1c      	ldr	r2, [pc, #112]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c144:	8813      	ldrh	r3, [r2, #0]
 800c146:	f361 030a 	bfi	r3, r1, #0, #11
 800c14a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c14c:	4a19      	ldr	r2, [pc, #100]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c14e:	6813      	ldr	r3, [r2, #0]
 800c150:	f36f 23dc 	bfc	r3, #11, #18
 800c154:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c156:	4a17      	ldr	r2, [pc, #92]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c158:	7913      	ldrb	r3, [r2, #4]
 800c15a:	f36f 1386 	bfc	r3, #6, #1
 800c15e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c160:	4a14      	ldr	r2, [pc, #80]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c162:	7913      	ldrb	r3, [r2, #4]
 800c164:	2108      	movs	r1, #8
 800c166:	f361 0303 	bfi	r3, r1, #0, #4
 800c16a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c16c:	4a11      	ldr	r2, [pc, #68]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c16e:	7913      	ldrb	r3, [r2, #4]
 800c170:	f36f 13c7 	bfc	r3, #7, #1
 800c174:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c176:	4a0f      	ldr	r2, [pc, #60]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c178:	7913      	ldrb	r3, [r2, #4]
 800c17a:	f36f 1304 	bfc	r3, #4, #1
 800c17e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <VCU_TransmitBmsData10+0xc0>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f003 0304 	and.w	r3, r3, #4
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00c      	beq.n	800c1a6 <VCU_TransmitBmsData10+0xa6>
 800c18c:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <VCU_TransmitBmsData10+0xb4>)
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c194:	b29b      	uxth	r3, r3
 800c196:	461a      	mov	r2, r3
 800c198:	490a      	ldr	r1, [pc, #40]	; (800c1c4 <VCU_TransmitBmsData10+0xc4>)
 800c19a:	480b      	ldr	r0, [pc, #44]	; (800c1c8 <VCU_TransmitBmsData10+0xc8>)
 800c19c:	f007 fd76 	bl	8013c8c <siprintf>
 800c1a0:	4809      	ldr	r0, [pc, #36]	; (800c1c8 <VCU_TransmitBmsData10+0xc8>)
 800c1a2:	f7f9 f8dd 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f7fe fd96 	bl	800acd8 <VCU_TransmitMessageQueue>

}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	2000a6c4 	.word	0x2000a6c4
 800c1b8:	2000a6d0 	.word	0x2000a6d0
 800c1bc:	2000a664 	.word	0x2000a664
 800c1c0:	2000000c 	.word	0x2000000c
 800c1c4:	08018370 	.word	0x08018370
 800c1c8:	20000b64 	.word	0x20000b64

0800c1cc <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c1d2:	4b84      	ldr	r3, [pc, #528]	; (800c3e4 <VCU_TransmitModuleState+0x218>)
 800c1d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fd fe6f 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c1e2:	4b80      	ldr	r3, [pc, #512]	; (800c3e4 <VCU_TransmitModuleState+0x218>)
 800c1e4:	7d1b      	ldrb	r3, [r3, #20]
 800c1e6:	7bfa      	ldrb	r2, [r7, #15]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	f000 80f7 	beq.w	800c3dc <VCU_TransmitModuleState+0x210>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleState.module_id                   = pack.dmcModuleId;
 800c1ee:	4b7d      	ldr	r3, [pc, #500]	; (800c3e4 <VCU_TransmitModuleState+0x218>)
 800c1f0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c1f4:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	4a7b      	ldr	r2, [pc, #492]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c1fa:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c1fe:	fb01 f303 	mul.w	r3, r1, r3
 800c202:	4413      	add	r3, r2
 800c204:	332b      	adds	r3, #43	; 0x2b
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	4a76      	ldr	r2, [pc, #472]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c20e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c212:	fb01 f303 	mul.w	r3, r1, r3
 800c216:	4413      	add	r3, r2
 800c218:	3327      	adds	r3, #39	; 0x27
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	f003 0303 	and.w	r3, r3, #3
 800c220:	b2da      	uxtb	r2, r3
 800c222:	797b      	ldrb	r3, [r7, #5]
 800c224:	f362 0301 	bfi	r3, r2, #0, #2
 800c228:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	4a6e      	ldr	r2, [pc, #440]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c22e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c232:	fb01 f303 	mul.w	r3, r1, r3
 800c236:	4413      	add	r3, r2
 800c238:	3326      	adds	r3, #38	; 0x26
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	b2da      	uxtb	r2, r3
 800c242:	79bb      	ldrb	r3, [r7, #6]
 800c244:	f362 0383 	bfi	r3, r2, #2, #2
 800c248:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	4a66      	ldr	r2, [pc, #408]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c24e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c252:	fb01 f303 	mul.w	r3, r1, r3
 800c256:	4413      	add	r3, r2
 800c258:	332c      	adds	r3, #44	; 0x2c
 800c25a:	781a      	ldrb	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f362 2391 	bfi	r3, r2, #10, #8
 800c262:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4a60      	ldr	r2, [pc, #384]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c268:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c26c:	fb01 f303 	mul.w	r3, r1, r3
 800c270:	4413      	add	r3, r2
 800c272:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c276:	789b      	ldrb	r3, [r3, #2]
 800c278:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	b25a      	sxtb	r2, r3
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	4959      	ldr	r1, [pc, #356]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c284:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c288:	fb00 f303 	mul.w	r3, r0, r3
 800c28c:	440b      	add	r3, r1
 800c28e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c292:	789b      	ldrb	r3, [r3, #2]
 800c294:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	b25a      	sxtb	r2, r3
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	4950      	ldr	r1, [pc, #320]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c2a6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c2aa:	fb00 f303 	mul.w	r3, r0, r3
 800c2ae:	440b      	add	r3, r1
 800c2b0:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c2b4:	789b      	ldrb	r3, [r3, #2]
 800c2b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	b25b      	sxtb	r3, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	b25a      	sxtb	r2, r3
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4948      	ldr	r1, [pc, #288]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c2c8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c2cc:	fb00 f303 	mul.w	r3, r0, r3
 800c2d0:	440b      	add	r3, r1
 800c2d2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c2d6:	789b      	ldrb	r3, [r3, #2]
 800c2d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	b25b      	sxtb	r3, r3
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	b25a      	sxtb	r2, r3
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	493f      	ldr	r1, [pc, #252]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c2ea:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800c2ee:	fb00 f303 	mul.w	r3, r0, r3
 800c2f2:	440b      	add	r3, r1
 800c2f4:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800c2f8:	789b      	ldrb	r3, [r3, #2]
 800c2fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	011b      	lsls	r3, r3, #4
 800c302:	b25b      	sxtb	r3, r3
 800c304:	4313      	orrs	r3, r2
 800c306:	b25b      	sxtb	r3, r3
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	f362 138d 	bfi	r3, r2, #6, #8
 800c310:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800c312:	79bb      	ldrb	r3, [r7, #6]
 800c314:	f36f 1345 	bfc	r3, #5, #1
 800c318:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800c31a:	79bb      	ldrb	r3, [r7, #6]
 800c31c:	f36f 1304 	bfc	r3, #4, #1
 800c320:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800c322:	4b30      	ldr	r3, [pc, #192]	; (800c3e4 <VCU_TransmitModuleState+0x218>)
 800c324:	7d1b      	ldrb	r3, [r3, #20]
 800c326:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800c328:	4b2e      	ldr	r3, [pc, #184]	; (800c3e4 <VCU_TransmitModuleState+0x218>)
 800c32a:	7ddb      	ldrb	r3, [r3, #23]
 800c32c:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	4a2d      	ldr	r2, [pc, #180]	; (800c3e8 <VCU_TransmitModuleState+0x21c>)
 800c332:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c336:	fb01 f303 	mul.w	r3, r1, r3
 800c33a:	4413      	add	r3, r2
 800c33c:	332d      	adds	r3, #45	; 0x2d
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	72fb      	strb	r3, [r7, #11]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c342:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c344:	2200      	movs	r2, #0
 800c346:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c348:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c34e:	4b27      	ldr	r3, [pc, #156]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c350:	2200      	movs	r2, #0
 800c352:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800c354:	4b26      	ldr	r3, [pc, #152]	; (800c3f0 <VCU_TransmitModuleState+0x224>)
 800c356:	461a      	mov	r2, r3
 800c358:	1d3b      	adds	r3, r7, #4
 800c35a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c35e:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c362:	4b20      	ldr	r3, [pc, #128]	; (800c3e4 <VCU_TransmitModuleState+0x218>)
 800c364:	895b      	ldrh	r3, [r3, #10]
 800c366:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c370:	b299      	uxth	r1, r3
 800c372:	4a1e      	ldr	r2, [pc, #120]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c374:	8813      	ldrh	r3, [r2, #0]
 800c376:	f361 030a 	bfi	r3, r1, #0, #11
 800c37a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c37c:	4a1b      	ldr	r2, [pc, #108]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c37e:	6813      	ldr	r3, [r2, #0]
 800c380:	f36f 23dc 	bfc	r3, #11, #18
 800c384:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c386:	4a19      	ldr	r2, [pc, #100]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c388:	7913      	ldrb	r3, [r2, #4]
 800c38a:	f36f 1386 	bfc	r3, #6, #1
 800c38e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c390:	4a16      	ldr	r2, [pc, #88]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c392:	7913      	ldrb	r3, [r2, #4]
 800c394:	2108      	movs	r1, #8
 800c396:	f361 0303 	bfi	r3, r1, #0, #4
 800c39a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c39c:	4a13      	ldr	r2, [pc, #76]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c39e:	7913      	ldrb	r3, [r2, #4]
 800c3a0:	f36f 13c7 	bfc	r3, #7, #1
 800c3a4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c3a6:	4a11      	ldr	r2, [pc, #68]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c3a8:	7913      	ldrb	r3, [r2, #4]
 800c3aa:	f36f 1304 	bfc	r3, #4, #1
 800c3ae:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <VCU_TransmitModuleState+0x228>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00c      	beq.n	800c3d6 <VCU_TransmitModuleState+0x20a>
 800c3bc:	4b0b      	ldr	r3, [pc, #44]	; (800c3ec <VCU_TransmitModuleState+0x220>)
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	490b      	ldr	r1, [pc, #44]	; (800c3f8 <VCU_TransmitModuleState+0x22c>)
 800c3ca:	480c      	ldr	r0, [pc, #48]	; (800c3fc <VCU_TransmitModuleState+0x230>)
 800c3cc:	f007 fc5e 	bl	8013c8c <siprintf>
 800c3d0:	480a      	ldr	r0, [pc, #40]	; (800c3fc <VCU_TransmitModuleState+0x230>)
 800c3d2:	f7f8 ffc5 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	f7fe fc7e 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	2000a664 	.word	0x2000a664
 800c3e8:	20000de4 	.word	0x20000de4
 800c3ec:	2000a6c4 	.word	0x2000a6c4
 800c3f0:	2000a6d0 	.word	0x2000a6d0
 800c3f4:	2000000c 	.word	0x2000000c
 800c3f8:	0801838c 	.word	0x0801838c
 800c3fc:	20000b64 	.word	0x20000b64

0800c400 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800c400:	b590      	push	{r4, r7, lr}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c406:	4b3d      	ldr	r3, [pc, #244]	; (800c4fc <VCU_TransmitModulePower+0xfc>)
 800c408:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fd55 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c416:	4b39      	ldr	r3, [pc, #228]	; (800c4fc <VCU_TransmitModulePower+0xfc>)
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	7bfa      	ldrb	r2, [r7, #15]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d069      	beq.n	800c4f4 <VCU_TransmitModulePower+0xf4>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    modulePower.module_id       = pack.dmcModuleId;
 800c420:	4b36      	ldr	r3, [pc, #216]	; (800c4fc <VCU_TransmitModulePower+0xfc>)
 800c422:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c426:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	4a35      	ldr	r2, [pc, #212]	; (800c500 <VCU_TransmitModulePower+0x100>)
 800c42c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c430:	fb01 f303 	mul.w	r3, r1, r3
 800c434:	4413      	add	r3, r2
 800c436:	3316      	adds	r3, #22
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
 800c43e:	4a30      	ldr	r2, [pc, #192]	; (800c500 <VCU_TransmitModulePower+0x100>)
 800c440:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c444:	fb01 f303 	mul.w	r3, r1, r3
 800c448:	4413      	add	r3, r2
 800c44a:	3314      	adds	r3, #20
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	813b      	strh	r3, [r7, #8]
 800c456:	2300      	movs	r3, #0
 800c458:	72bb      	strb	r3, [r7, #10]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c45a:	4b2a      	ldr	r3, [pc, #168]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c460:	4b28      	ldr	r3, [pc, #160]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c462:	2200      	movs	r2, #0
 800c464:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c466:	4b27      	ldr	r3, [pc, #156]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c468:	2200      	movs	r2, #0
 800c46a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800c46c:	4b26      	ldr	r3, [pc, #152]	; (800c508 <VCU_TransmitModulePower+0x108>)
 800c46e:	461c      	mov	r4, r3
 800c470:	463b      	mov	r3, r7
 800c472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c476:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c47a:	4b20      	ldr	r3, [pc, #128]	; (800c4fc <VCU_TransmitModulePower+0xfc>)
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	f203 4312 	addw	r3, r3, #1042	; 0x412
 800c482:	b29b      	uxth	r3, r3
 800c484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c488:	b299      	uxth	r1, r3
 800c48a:	4a1e      	ldr	r2, [pc, #120]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c48c:	8813      	ldrh	r3, [r2, #0]
 800c48e:	f361 030a 	bfi	r3, r1, #0, #11
 800c492:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c494:	4a1b      	ldr	r2, [pc, #108]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c496:	6813      	ldr	r3, [r2, #0]
 800c498:	f36f 23dc 	bfc	r3, #11, #18
 800c49c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c49e:	4a19      	ldr	r2, [pc, #100]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c4a0:	7913      	ldrb	r3, [r2, #4]
 800c4a2:	f36f 1386 	bfc	r3, #6, #1
 800c4a6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c4a8:	4a16      	ldr	r2, [pc, #88]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c4aa:	7913      	ldrb	r3, [r2, #4]
 800c4ac:	2108      	movs	r1, #8
 800c4ae:	f361 0303 	bfi	r3, r1, #0, #4
 800c4b2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c4b4:	4a13      	ldr	r2, [pc, #76]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c4b6:	7913      	ldrb	r3, [r2, #4]
 800c4b8:	f36f 13c7 	bfc	r3, #7, #1
 800c4bc:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c4be:	4a11      	ldr	r2, [pc, #68]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c4c0:	7913      	ldrb	r3, [r2, #4]
 800c4c2:	f36f 1304 	bfc	r3, #4, #1
 800c4c6:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c4c8:	4b10      	ldr	r3, [pc, #64]	; (800c50c <VCU_TransmitModulePower+0x10c>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00c      	beq.n	800c4ee <VCU_TransmitModulePower+0xee>
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <VCU_TransmitModulePower+0x104>)
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	461a      	mov	r2, r3
 800c4e0:	490b      	ldr	r1, [pc, #44]	; (800c510 <VCU_TransmitModulePower+0x110>)
 800c4e2:	480c      	ldr	r0, [pc, #48]	; (800c514 <VCU_TransmitModulePower+0x114>)
 800c4e4:	f007 fbd2 	bl	8013c8c <siprintf>
 800c4e8:	480a      	ldr	r0, [pc, #40]	; (800c514 <VCU_TransmitModulePower+0x114>)
 800c4ea:	f7f8 ff39 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	f7fe fbf2 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c4f4:	bf00      	nop
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd90      	pop	{r4, r7, pc}
 800c4fc:	2000a664 	.word	0x2000a664
 800c500:	20000de4 	.word	0x20000de4
 800c504:	2000a6c4 	.word	0x2000a6c4
 800c508:	2000a6d0 	.word	0x2000a6d0
 800c50c:	2000000c 	.word	0x2000000c
 800c510:	080183a8 	.word	0x080183a8
 800c514:	20000b64 	.word	0x20000b64

0800c518 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800c518:	b590      	push	{r4, r7, lr}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c51e:	4b41      	ldr	r3, [pc, #260]	; (800c624 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c520:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c524:	4618      	mov	r0, r3
 800c526:	f7fd fcc9 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c52e:	4b3d      	ldr	r3, [pc, #244]	; (800c624 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c530:	7d1b      	ldrb	r3, [r3, #20]
 800c532:	7bfa      	ldrb	r2, [r7, #15]
 800c534:	429a      	cmp	r2, r3
 800c536:	d071      	beq.n	800c61c <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800c538:	4b3a      	ldr	r3, [pc, #232]	; (800c624 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c53a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c53e:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800c540:	7bfb      	ldrb	r3, [r7, #15]
 800c542:	4a39      	ldr	r2, [pc, #228]	; (800c628 <VCU_TransmitModuleCellVoltage+0x110>)
 800c544:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c548:	fb01 f303 	mul.w	r3, r1, r3
 800c54c:	4413      	add	r3, r2
 800c54e:	3322      	adds	r3, #34	; 0x22
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	4a34      	ldr	r2, [pc, #208]	; (800c628 <VCU_TransmitModuleCellVoltage+0x110>)
 800c558:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c55c:	fb01 f303 	mul.w	r3, r1, r3
 800c560:	4413      	add	r3, r2
 800c562:	331e      	adds	r3, #30
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	4a2e      	ldr	r2, [pc, #184]	; (800c628 <VCU_TransmitModuleCellVoltage+0x110>)
 800c56e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c572:	fb01 f303 	mul.w	r3, r1, r3
 800c576:	4413      	add	r3, r2
 800c578:	3320      	adds	r3, #32
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c582:	4b2a      	ldr	r3, [pc, #168]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c588:	4b28      	ldr	r3, [pc, #160]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c58e:	4b27      	ldr	r3, [pc, #156]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c590:	2200      	movs	r2, #0
 800c592:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800c594:	4b26      	ldr	r3, [pc, #152]	; (800c630 <VCU_TransmitModuleCellVoltage+0x118>)
 800c596:	461c      	mov	r4, r3
 800c598:	463b      	mov	r3, r7
 800c59a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c59e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c5a2:	4b20      	ldr	r3, [pc, #128]	; (800c624 <VCU_TransmitModuleCellVoltage+0x10c>)
 800c5a4:	895b      	ldrh	r3, [r3, #10]
 800c5a6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5b0:	b299      	uxth	r1, r3
 800c5b2:	4a1e      	ldr	r2, [pc, #120]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5b4:	8813      	ldrh	r3, [r2, #0]
 800c5b6:	f361 030a 	bfi	r3, r1, #0, #11
 800c5ba:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c5bc:	4a1b      	ldr	r2, [pc, #108]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5be:	6813      	ldr	r3, [r2, #0]
 800c5c0:	f36f 23dc 	bfc	r3, #11, #18
 800c5c4:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c5c6:	4a19      	ldr	r2, [pc, #100]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5c8:	7913      	ldrb	r3, [r2, #4]
 800c5ca:	f36f 1386 	bfc	r3, #6, #1
 800c5ce:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c5d0:	4a16      	ldr	r2, [pc, #88]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5d2:	7913      	ldrb	r3, [r2, #4]
 800c5d4:	2108      	movs	r1, #8
 800c5d6:	f361 0303 	bfi	r3, r1, #0, #4
 800c5da:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c5dc:	4a13      	ldr	r2, [pc, #76]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5de:	7913      	ldrb	r3, [r2, #4]
 800c5e0:	f36f 13c7 	bfc	r3, #7, #1
 800c5e4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c5e6:	4a11      	ldr	r2, [pc, #68]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5e8:	7913      	ldrb	r3, [r2, #4]
 800c5ea:	f36f 1304 	bfc	r3, #4, #1
 800c5ee:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c5f0:	4b10      	ldr	r3, [pc, #64]	; (800c634 <VCU_TransmitModuleCellVoltage+0x11c>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00c      	beq.n	800c616 <VCU_TransmitModuleCellVoltage+0xfe>
 800c5fc:	4b0b      	ldr	r3, [pc, #44]	; (800c62c <VCU_TransmitModuleCellVoltage+0x114>)
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c604:	b29b      	uxth	r3, r3
 800c606:	461a      	mov	r2, r3
 800c608:	490b      	ldr	r1, [pc, #44]	; (800c638 <VCU_TransmitModuleCellVoltage+0x120>)
 800c60a:	480c      	ldr	r0, [pc, #48]	; (800c63c <VCU_TransmitModuleCellVoltage+0x124>)
 800c60c:	f007 fb3e 	bl	8013c8c <siprintf>
 800c610:	480a      	ldr	r0, [pc, #40]	; (800c63c <VCU_TransmitModuleCellVoltage+0x124>)
 800c612:	f7f8 fea5 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c616:	2000      	movs	r0, #0
 800c618:	f7fe fb5e 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c61c:	bf00      	nop
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	bd90      	pop	{r4, r7, pc}
 800c624:	2000a664 	.word	0x2000a664
 800c628:	20000de4 	.word	0x20000de4
 800c62c:	2000a6c4 	.word	0x2000a6c4
 800c630:	2000a6d0 	.word	0x2000a6d0
 800c634:	2000000c 	.word	0x2000000c
 800c638:	080183c4 	.word	0x080183c4
 800c63c:	20000b64 	.word	0x20000b64

0800c640 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c646:	4b41      	ldr	r3, [pc, #260]	; (800c74c <VCU_TransmitModuleCellTemp+0x10c>)
 800c648:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fd fc35 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c652:	4603      	mov	r3, r0
 800c654:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c656:	4b3d      	ldr	r3, [pc, #244]	; (800c74c <VCU_TransmitModuleCellTemp+0x10c>)
 800c658:	7d1b      	ldrb	r3, [r3, #20]
 800c65a:	7bfa      	ldrb	r2, [r7, #15]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d071      	beq.n	800c744 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800c660:	4b3a      	ldr	r3, [pc, #232]	; (800c74c <VCU_TransmitModuleCellTemp+0x10c>)
 800c662:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c666:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	4a39      	ldr	r2, [pc, #228]	; (800c750 <VCU_TransmitModuleCellTemp+0x110>)
 800c66c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c670:	fb01 f303 	mul.w	r3, r1, r3
 800c674:	4413      	add	r3, r2
 800c676:	331c      	adds	r3, #28
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	4a34      	ldr	r2, [pc, #208]	; (800c750 <VCU_TransmitModuleCellTemp+0x110>)
 800c680:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c684:	fb01 f303 	mul.w	r3, r1, r3
 800c688:	4413      	add	r3, r2
 800c68a:	3318      	adds	r3, #24
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	4a2e      	ldr	r2, [pc, #184]	; (800c750 <VCU_TransmitModuleCellTemp+0x110>)
 800c696:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c69a:	fb01 f303 	mul.w	r3, r1, r3
 800c69e:	4413      	add	r3, r2
 800c6a0:	331a      	adds	r3, #26
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c6aa:	4b2a      	ldr	r3, [pc, #168]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c6b0:	4b28      	ldr	r3, [pc, #160]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c6b6:	4b27      	ldr	r3, [pc, #156]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800c6bc:	4b26      	ldr	r3, [pc, #152]	; (800c758 <VCU_TransmitModuleCellTemp+0x118>)
 800c6be:	461c      	mov	r4, r3
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c6ca:	4b20      	ldr	r3, [pc, #128]	; (800c74c <VCU_TransmitModuleCellTemp+0x10c>)
 800c6cc:	895b      	ldrh	r3, [r3, #10]
 800c6ce:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6d8:	b299      	uxth	r1, r3
 800c6da:	4a1e      	ldr	r2, [pc, #120]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6dc:	8813      	ldrh	r3, [r2, #0]
 800c6de:	f361 030a 	bfi	r3, r1, #0, #11
 800c6e2:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c6e4:	4a1b      	ldr	r2, [pc, #108]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6e6:	6813      	ldr	r3, [r2, #0]
 800c6e8:	f36f 23dc 	bfc	r3, #11, #18
 800c6ec:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c6ee:	4a19      	ldr	r2, [pc, #100]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6f0:	7913      	ldrb	r3, [r2, #4]
 800c6f2:	f36f 1386 	bfc	r3, #6, #1
 800c6f6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c6f8:	4a16      	ldr	r2, [pc, #88]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c6fa:	7913      	ldrb	r3, [r2, #4]
 800c6fc:	2108      	movs	r1, #8
 800c6fe:	f361 0303 	bfi	r3, r1, #0, #4
 800c702:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c704:	4a13      	ldr	r2, [pc, #76]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c706:	7913      	ldrb	r3, [r2, #4]
 800c708:	f36f 13c7 	bfc	r3, #7, #1
 800c70c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c70e:	4a11      	ldr	r2, [pc, #68]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c710:	7913      	ldrb	r3, [r2, #4]
 800c712:	f36f 1304 	bfc	r3, #4, #1
 800c716:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c718:	4b10      	ldr	r3, [pc, #64]	; (800c75c <VCU_TransmitModuleCellTemp+0x11c>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00c      	beq.n	800c73e <VCU_TransmitModuleCellTemp+0xfe>
 800c724:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <VCU_TransmitModuleCellTemp+0x114>)
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	461a      	mov	r2, r3
 800c730:	490b      	ldr	r1, [pc, #44]	; (800c760 <VCU_TransmitModuleCellTemp+0x120>)
 800c732:	480c      	ldr	r0, [pc, #48]	; (800c764 <VCU_TransmitModuleCellTemp+0x124>)
 800c734:	f007 faaa 	bl	8013c8c <siprintf>
 800c738:	480a      	ldr	r0, [pc, #40]	; (800c764 <VCU_TransmitModuleCellTemp+0x124>)
 800c73a:	f7f8 fe11 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c73e:	2000      	movs	r0, #0
 800c740:	f7fe faca 	bl	800acd8 <VCU_TransmitMessageQueue>
  }
}
 800c744:	bf00      	nop
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd90      	pop	{r4, r7, pc}
 800c74c:	2000a664 	.word	0x2000a664
 800c750:	20000de4 	.word	0x20000de4
 800c754:	2000a6c4 	.word	0x2000a6c4
 800c758:	2000a6d0 	.word	0x2000a6d0
 800c75c:	2000000c 	.word	0x2000000c
 800c760:	080183e8 	.word	0x080183e8
 800c764:	20000b64 	.word	0x20000b64

0800c768 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800c768:	b590      	push	{r4, r7, lr}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c76e:	4b41      	ldr	r3, [pc, #260]	; (800c874 <VCU_TransmitModuleLimits+0x10c>)
 800c770:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c774:	4618      	mov	r0, r3
 800c776:	f7fd fba1 	bl	8009ebc <MCU_ModuleIndexFromId>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c77e:	4b3d      	ldr	r3, [pc, #244]	; (800c874 <VCU_TransmitModuleLimits+0x10c>)
 800c780:	7d1b      	ldrb	r3, [r3, #20]
 800c782:	7bfa      	ldrb	r2, [r7, #15]
 800c784:	429a      	cmp	r2, r3
 800c786:	d071      	beq.n	800c86c <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800c788:	4b3a      	ldr	r3, [pc, #232]	; (800c874 <VCU_TransmitModuleLimits+0x10c>)
 800c78a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c78e:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	4a39      	ldr	r2, [pc, #228]	; (800c878 <VCU_TransmitModuleLimits+0x110>)
 800c794:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c798:	fb01 f303 	mul.w	r3, r1, r3
 800c79c:	4413      	add	r3, r2
 800c79e:	3312      	adds	r3, #18
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
 800c7a6:	4a34      	ldr	r2, [pc, #208]	; (800c878 <VCU_TransmitModuleLimits+0x110>)
 800c7a8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c7ac:	fb01 f303 	mul.w	r3, r1, r3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	330e      	adds	r3, #14
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	4a2f      	ldr	r2, [pc, #188]	; (800c878 <VCU_TransmitModuleLimits+0x110>)
 800c7bc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800c7c0:	fb01 f303 	mul.w	r3, r1, r3
 800c7c4:	4413      	add	r3, r2
 800c7c6:	3310      	adds	r3, #16
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c7d2:	4b2a      	ldr	r3, [pc, #168]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c7d8:	4b28      	ldr	r3, [pc, #160]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c7da:	2200      	movs	r2, #0
 800c7dc:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c7de:	4b27      	ldr	r3, [pc, #156]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800c7e4:	4b26      	ldr	r3, [pc, #152]	; (800c880 <VCU_TransmitModuleLimits+0x118>)
 800c7e6:	461c      	mov	r4, r3
 800c7e8:	463b      	mov	r3, r7
 800c7ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c7f2:	4b20      	ldr	r3, [pc, #128]	; (800c874 <VCU_TransmitModuleLimits+0x10c>)
 800c7f4:	895b      	ldrh	r3, [r3, #10]
 800c7f6:	f203 4316 	addw	r3, r3, #1046	; 0x416
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c800:	b299      	uxth	r1, r3
 800c802:	4a1e      	ldr	r2, [pc, #120]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c804:	8813      	ldrh	r3, [r2, #0]
 800c806:	f361 030a 	bfi	r3, r1, #0, #11
 800c80a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c80c:	4a1b      	ldr	r2, [pc, #108]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c80e:	6813      	ldr	r3, [r2, #0]
 800c810:	f36f 23dc 	bfc	r3, #11, #18
 800c814:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c816:	4a19      	ldr	r2, [pc, #100]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c818:	7913      	ldrb	r3, [r2, #4]
 800c81a:	f36f 1386 	bfc	r3, #6, #1
 800c81e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c820:	4a16      	ldr	r2, [pc, #88]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c822:	7913      	ldrb	r3, [r2, #4]
 800c824:	2108      	movs	r1, #8
 800c826:	f361 0303 	bfi	r3, r1, #0, #4
 800c82a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c82c:	4a13      	ldr	r2, [pc, #76]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c82e:	7913      	ldrb	r3, [r2, #4]
 800c830:	f36f 13c7 	bfc	r3, #7, #1
 800c834:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c836:	4a11      	ldr	r2, [pc, #68]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c838:	7913      	ldrb	r3, [r2, #4]
 800c83a:	f36f 1304 	bfc	r3, #4, #1
 800c83e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c840:	4b10      	ldr	r3, [pc, #64]	; (800c884 <VCU_TransmitModuleLimits+0x11c>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00c      	beq.n	800c866 <VCU_TransmitModuleLimits+0xfe>
 800c84c:	4b0b      	ldr	r3, [pc, #44]	; (800c87c <VCU_TransmitModuleLimits+0x114>)
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c854:	b29b      	uxth	r3, r3
 800c856:	461a      	mov	r2, r3
 800c858:	490b      	ldr	r1, [pc, #44]	; (800c888 <VCU_TransmitModuleLimits+0x120>)
 800c85a:	480c      	ldr	r0, [pc, #48]	; (800c88c <VCU_TransmitModuleLimits+0x124>)
 800c85c:	f007 fa16 	bl	8013c8c <siprintf>
 800c860:	480a      	ldr	r0, [pc, #40]	; (800c88c <VCU_TransmitModuleLimits+0x124>)
 800c862:	f7f8 fd7d 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c866:	2000      	movs	r0, #0
 800c868:	f7fe fa36 	bl	800acd8 <VCU_TransmitMessageQueue>
  }

}
 800c86c:	bf00      	nop
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	bd90      	pop	{r4, r7, pc}
 800c874:	2000a664 	.word	0x2000a664
 800c878:	20000de4 	.word	0x20000de4
 800c87c:	2000a6c4 	.word	0x2000a6c4
 800c880:	2000a6d0 	.word	0x2000a6d0
 800c884:	2000000c 	.word	0x2000000c
 800c888:	08018408 	.word	0x08018408
 800c88c:	20000b64 	.word	0x20000b64

0800c890 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800c890:	b580      	push	{r7, lr}
 800c892:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c894:	4b23      	ldr	r3, [pc, #140]	; (800c924 <VCU_RequestTime+0x94>)
 800c896:	2200      	movs	r2, #0
 800c898:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c89a:	4b22      	ldr	r3, [pc, #136]	; (800c924 <VCU_RequestTime+0x94>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c8a0:	4b20      	ldr	r3, [pc, #128]	; (800c924 <VCU_RequestTime+0x94>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c8a6:	4b20      	ldr	r3, [pc, #128]	; (800c928 <VCU_RequestTime+0x98>)
 800c8a8:	895b      	ldrh	r3, [r3, #10]
 800c8aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8b4:	b299      	uxth	r1, r3
 800c8b6:	4a1b      	ldr	r2, [pc, #108]	; (800c924 <VCU_RequestTime+0x94>)
 800c8b8:	8813      	ldrh	r3, [r2, #0]
 800c8ba:	f361 030a 	bfi	r3, r1, #0, #11
 800c8be:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c8c0:	4a18      	ldr	r2, [pc, #96]	; (800c924 <VCU_RequestTime+0x94>)
 800c8c2:	6813      	ldr	r3, [r2, #0]
 800c8c4:	f36f 23dc 	bfc	r3, #11, #18
 800c8c8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c8ca:	4a16      	ldr	r2, [pc, #88]	; (800c924 <VCU_RequestTime+0x94>)
 800c8cc:	7913      	ldrb	r3, [r2, #4]
 800c8ce:	f36f 1386 	bfc	r3, #6, #1
 800c8d2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c8d4:	4a13      	ldr	r2, [pc, #76]	; (800c924 <VCU_RequestTime+0x94>)
 800c8d6:	7913      	ldrb	r3, [r2, #4]
 800c8d8:	2108      	movs	r1, #8
 800c8da:	f361 0303 	bfi	r3, r1, #0, #4
 800c8de:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c8e0:	4a10      	ldr	r2, [pc, #64]	; (800c924 <VCU_RequestTime+0x94>)
 800c8e2:	7913      	ldrb	r3, [r2, #4]
 800c8e4:	f36f 13c7 	bfc	r3, #7, #1
 800c8e8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c8ea:	4a0e      	ldr	r2, [pc, #56]	; (800c924 <VCU_RequestTime+0x94>)
 800c8ec:	7913      	ldrb	r3, [r2, #4]
 800c8ee:	f36f 1304 	bfc	r3, #4, #1
 800c8f2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <VCU_RequestTime+0x9c>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	f003 0304 	and.w	r3, r3, #4
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00c      	beq.n	800c91a <VCU_RequestTime+0x8a>
 800c900:	4b08      	ldr	r3, [pc, #32]	; (800c924 <VCU_RequestTime+0x94>)
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c908:	b29b      	uxth	r3, r3
 800c90a:	461a      	mov	r2, r3
 800c90c:	4908      	ldr	r1, [pc, #32]	; (800c930 <VCU_RequestTime+0xa0>)
 800c90e:	4809      	ldr	r0, [pc, #36]	; (800c934 <VCU_RequestTime+0xa4>)
 800c910:	f007 f9bc 	bl	8013c8c <siprintf>
 800c914:	4807      	ldr	r0, [pc, #28]	; (800c934 <VCU_RequestTime+0xa4>)
 800c916:	f7f8 fd23 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c91a:	2000      	movs	r0, #0
 800c91c:	f7fe f9dc 	bl	800acd8 <VCU_TransmitMessageQueue>

}
 800c920:	bf00      	nop
 800c922:	bd80      	pop	{r7, pc}
 800c924:	2000a6c4 	.word	0x2000a6c4
 800c928:	2000a664 	.word	0x2000a664
 800c92c:	2000000c 	.word	0x2000000c
 800c930:	08018424 	.word	0x08018424
 800c934:	20000b64 	.word	0x20000b64

0800c938 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800c938:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c93a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c93c:	3304      	adds	r3, #4

0800c93e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c93e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c940:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800c942:	d3f9      	bcc.n	800c938 <CopyDataInit>
  bx lr
 800c944:	4770      	bx	lr

0800c946 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800c946:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800c948:	3004      	adds	r0, #4

0800c94a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800c94a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800c94c:	d3fb      	bcc.n	800c946 <FillZerobss>
  bx lr
 800c94e:	4770      	bx	lr

0800c950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c950:	480c      	ldr	r0, [pc, #48]	; (800c984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c952:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800c954:	f7fe f866 	bl	800aa24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800c958:	480b      	ldr	r0, [pc, #44]	; (800c988 <LoopForever+0x6>)
 800c95a:	490c      	ldr	r1, [pc, #48]	; (800c98c <LoopForever+0xa>)
 800c95c:	4a0c      	ldr	r2, [pc, #48]	; (800c990 <LoopForever+0xe>)
 800c95e:	2300      	movs	r3, #0
 800c960:	f7ff ffed 	bl	800c93e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800c964:	480b      	ldr	r0, [pc, #44]	; (800c994 <LoopForever+0x12>)
 800c966:	490c      	ldr	r1, [pc, #48]	; (800c998 <LoopForever+0x16>)
 800c968:	4a0c      	ldr	r2, [pc, #48]	; (800c99c <LoopForever+0x1a>)
 800c96a:	2300      	movs	r3, #0
 800c96c:	f7ff ffe7 	bl	800c93e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800c970:	480b      	ldr	r0, [pc, #44]	; (800c9a0 <LoopForever+0x1e>)
 800c972:	490c      	ldr	r1, [pc, #48]	; (800c9a4 <LoopForever+0x22>)
 800c974:	2300      	movs	r3, #0
 800c976:	f7ff ffe8 	bl	800c94a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c97a:	f006 f821 	bl	80129c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800c97e:	f7f9 f855 	bl	8005a2c <main>

0800c982 <LoopForever>:

LoopForever:
  b LoopForever
 800c982:	e7fe      	b.n	800c982 <LoopForever>
  ldr   r0, =_estack
 800c984:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800c988:	20000008 	.word	0x20000008
 800c98c:	200002d0 	.word	0x200002d0
 800c990:	08018b00 	.word	0x08018b00
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800c994:	20030000 	.word	0x20030000
 800c998:	20030000 	.word	0x20030000
 800c99c:	08018dc8 	.word	0x08018dc8
  INIT_BSS _sbss, _ebss
 800c9a0:	200002d0 	.word	0x200002d0
 800c9a4:	2000a7b8 	.word	0x2000a7b8

0800c9a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c9a8:	e7fe      	b.n	800c9a8 <ADC1_IRQHandler>
	...

0800c9ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <HAL_Init+0x3c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a0b      	ldr	r2, [pc, #44]	; (800c9e8 <HAL_Init+0x3c>)
 800c9bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c9c2:	2003      	movs	r0, #3
 800c9c4:	f000 f948 	bl	800cc58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c9c8:	200f      	movs	r0, #15
 800c9ca:	f000 f80f 	bl	800c9ec <HAL_InitTick>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	71fb      	strb	r3, [r7, #7]
 800c9d8:	e001      	b.n	800c9de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c9da:	f7fd fd11 	bl	800a400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c9de:	79fb      	ldrb	r3, [r7, #7]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	58004000 	.word	0x58004000

0800c9ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800c9f8:	4b17      	ldr	r3, [pc, #92]	; (800ca58 <HAL_InitTick+0x6c>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d024      	beq.n	800ca4a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ca00:	f002 f820 	bl	800ea44 <HAL_RCC_GetHCLKFreq>
 800ca04:	4602      	mov	r2, r0
 800ca06:	4b14      	ldr	r3, [pc, #80]	; (800ca58 <HAL_InitTick+0x6c>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca10:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 f950 	bl	800ccbe <HAL_SYSTICK_Config>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10f      	bne.n	800ca44 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b0f      	cmp	r3, #15
 800ca28:	d809      	bhi.n	800ca3e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca32:	f000 f91c 	bl	800cc6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ca36:	4a09      	ldr	r2, [pc, #36]	; (800ca5c <HAL_InitTick+0x70>)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	e007      	b.n	800ca4e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	73fb      	strb	r3, [r7, #15]
 800ca42:	e004      	b.n	800ca4e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	73fb      	strb	r3, [r7, #15]
 800ca48:	e001      	b.n	800ca4e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	2000001c 	.word	0x2000001c
 800ca5c:	20000018 	.word	0x20000018

0800ca60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ca64:	4b06      	ldr	r3, [pc, #24]	; (800ca80 <HAL_IncTick+0x20>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4b06      	ldr	r3, [pc, #24]	; (800ca84 <HAL_IncTick+0x24>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4413      	add	r3, r2
 800ca70:	4a04      	ldr	r2, [pc, #16]	; (800ca84 <HAL_IncTick+0x24>)
 800ca72:	6013      	str	r3, [r2, #0]
}
 800ca74:	bf00      	nop
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	2000001c 	.word	0x2000001c
 800ca84:	2000a764 	.word	0x2000a764

0800ca88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	af00      	add	r7, sp, #0
  return uwTick;
 800ca8c:	4b03      	ldr	r3, [pc, #12]	; (800ca9c <HAL_GetTick+0x14>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	2000a764 	.word	0x2000a764

0800caa0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800caa0:	b480      	push	{r7}
 800caa2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800caa4:	4b03      	ldr	r3, [pc, #12]	; (800cab4 <HAL_GetTickPrio+0x14>)
 800caa6:	681b      	ldr	r3, [r3, #0]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	20000018 	.word	0x20000018

0800cab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cac8:	4b0c      	ldr	r3, [pc, #48]	; (800cafc <__NVIC_SetPriorityGrouping+0x44>)
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cad4:	4013      	ands	r3, r2
 800cad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800caea:	4a04      	ldr	r2, [pc, #16]	; (800cafc <__NVIC_SetPriorityGrouping+0x44>)
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	60d3      	str	r3, [r2, #12]
}
 800caf0:	bf00      	nop
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	e000ed00 	.word	0xe000ed00

0800cb00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cb00:	b480      	push	{r7}
 800cb02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cb04:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <__NVIC_GetPriorityGrouping+0x18>)
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	0a1b      	lsrs	r3, r3, #8
 800cb0a:	f003 0307 	and.w	r3, r3, #7
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	e000ed00 	.word	0xe000ed00

0800cb1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	4603      	mov	r3, r0
 800cb24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	db0b      	blt.n	800cb46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	f003 021f 	and.w	r2, r3, #31
 800cb34:	4907      	ldr	r1, [pc, #28]	; (800cb54 <__NVIC_EnableIRQ+0x38>)
 800cb36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb3a:	095b      	lsrs	r3, r3, #5
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	fa00 f202 	lsl.w	r2, r0, r2
 800cb42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cb46:	bf00      	nop
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	e000e100 	.word	0xe000e100

0800cb58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	6039      	str	r1, [r7, #0]
 800cb62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	db0a      	blt.n	800cb82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	490c      	ldr	r1, [pc, #48]	; (800cba4 <__NVIC_SetPriority+0x4c>)
 800cb72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb76:	0112      	lsls	r2, r2, #4
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cb80:	e00a      	b.n	800cb98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	4908      	ldr	r1, [pc, #32]	; (800cba8 <__NVIC_SetPriority+0x50>)
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	f003 030f 	and.w	r3, r3, #15
 800cb8e:	3b04      	subs	r3, #4
 800cb90:	0112      	lsls	r2, r2, #4
 800cb92:	b2d2      	uxtb	r2, r2
 800cb94:	440b      	add	r3, r1
 800cb96:	761a      	strb	r2, [r3, #24]
}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	e000e100 	.word	0xe000e100
 800cba8:	e000ed00 	.word	0xe000ed00

0800cbac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b089      	sub	sp, #36	; 0x24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	f1c3 0307 	rsb	r3, r3, #7
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	bf28      	it	cs
 800cbca:	2304      	movcs	r3, #4
 800cbcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	2b06      	cmp	r3, #6
 800cbd4:	d902      	bls.n	800cbdc <NVIC_EncodePriority+0x30>
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	3b03      	subs	r3, #3
 800cbda:	e000      	b.n	800cbde <NVIC_EncodePriority+0x32>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbea:	43da      	mvns	r2, r3
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	401a      	ands	r2, r3
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cbf4:	f04f 31ff 	mov.w	r1, #4294967295
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	fa01 f303 	lsl.w	r3, r1, r3
 800cbfe:	43d9      	mvns	r1, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc04:	4313      	orrs	r3, r2
         );
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3724      	adds	r7, #36	; 0x24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
	...

0800cc14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc24:	d301      	bcc.n	800cc2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cc26:	2301      	movs	r3, #1
 800cc28:	e00f      	b.n	800cc4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cc2a:	4a0a      	ldr	r2, [pc, #40]	; (800cc54 <SysTick_Config+0x40>)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cc32:	210f      	movs	r1, #15
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	f7ff ff8e 	bl	800cb58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cc3c:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <SysTick_Config+0x40>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc42:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <SysTick_Config+0x40>)
 800cc44:	2207      	movs	r2, #7
 800cc46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	e000e010 	.word	0xe000e010

0800cc58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff ff29 	bl	800cab8 <__NVIC_SetPriorityGrouping>
}
 800cc66:	bf00      	nop
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b086      	sub	sp, #24
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	4603      	mov	r3, r0
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	607a      	str	r2, [r7, #4]
 800cc7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cc7c:	f7ff ff40 	bl	800cb00 <__NVIC_GetPriorityGrouping>
 800cc80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	6978      	ldr	r0, [r7, #20]
 800cc88:	f7ff ff90 	bl	800cbac <NVIC_EncodePriority>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff ff5f 	bl	800cb58 <__NVIC_SetPriority>
}
 800cc9a:	bf00      	nop
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b082      	sub	sp, #8
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	4603      	mov	r3, r0
 800ccaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ccac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7ff ff33 	bl	800cb1c <__NVIC_EnableIRQ>
}
 800ccb6:	bf00      	nop
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ffa4 	bl	800cc14 <SysTick_Config>
 800cccc:	4603      	mov	r3, r0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b083      	sub	sp, #12
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e04f      	b.n	800cd88 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d008      	beq.n	800cd06 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2204      	movs	r2, #4
 800ccf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e040      	b.n	800cd88 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 020e 	bic.w	r2, r2, #14
 800cd14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 0201 	bic.w	r2, r2, #1
 800cd34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd3a:	f003 021c 	and.w	r2, r3, #28
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd42:	2101      	movs	r1, #1
 800cd44:	fa01 f202 	lsl.w	r2, r1, r2
 800cd48:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cd52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00c      	beq.n	800cd76 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800cd74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d005      	beq.n	800cdb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2204      	movs	r2, #4
 800cdb0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	73fb      	strb	r3, [r7, #15]
 800cdb6:	e047      	b.n	800ce48 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 020e 	bic.w	r2, r2, #14
 800cdc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f022 0201 	bic.w	r2, r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cde2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cde6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdec:	f003 021c 	and.w	r2, r3, #28
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	fa01 f202 	lsl.w	r2, r1, r2
 800cdfa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ce04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00c      	beq.n	800ce28 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ce26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	4798      	blx	r3
    }
  }
  return status;
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ce62:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <HAL_FLASH_Program+0x80>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d101      	bne.n	800ce6e <HAL_FLASH_Program+0x1a>
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	e02d      	b.n	800ceca <HAL_FLASH_Program+0x76>
 800ce6e:	4b19      	ldr	r3, [pc, #100]	; (800ced4 <HAL_FLASH_Program+0x80>)
 800ce70:	2201      	movs	r2, #1
 800ce72:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ce74:	4b17      	ldr	r3, [pc, #92]	; (800ced4 <HAL_FLASH_Program+0x80>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce7e:	f000 f869 	bl	800cf54 <FLASH_WaitForLastOperation>
 800ce82:	4603      	mov	r3, r0
 800ce84:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d11a      	bne.n	800cec2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d105      	bne.n	800ce9e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ce92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce96:	68b8      	ldr	r0, [r7, #8]
 800ce98:	f000 f8cc 	bl	800d034 <FLASH_Program_DoubleWord>
 800ce9c:	e004      	b.n	800cea8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	4619      	mov	r1, r3
 800cea2:	68b8      	ldr	r0, [r7, #8]
 800cea4:	f00a f8a8 	bl	8016ff8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ceac:	f000 f852 	bl	800cf54 <FLASH_WaitForLastOperation>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800ceb4:	4b08      	ldr	r3, [pc, #32]	; (800ced8 <HAL_FLASH_Program+0x84>)
 800ceb6:	695a      	ldr	r2, [r3, #20]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	43db      	mvns	r3, r3
 800cebc:	4906      	ldr	r1, [pc, #24]	; (800ced8 <HAL_FLASH_Program+0x84>)
 800cebe:	4013      	ands	r3, r2
 800cec0:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cec2:	4b04      	ldr	r3, [pc, #16]	; (800ced4 <HAL_FLASH_Program+0x80>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3718      	adds	r7, #24
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	2000a768 	.word	0x2000a768
 800ced8:	58004000 	.word	0x58004000

0800cedc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cee6:	4b0b      	ldr	r3, [pc, #44]	; (800cf14 <HAL_FLASH_Unlock+0x38>)
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	da0b      	bge.n	800cf06 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ceee:	4b09      	ldr	r3, [pc, #36]	; (800cf14 <HAL_FLASH_Unlock+0x38>)
 800cef0:	4a09      	ldr	r2, [pc, #36]	; (800cf18 <HAL_FLASH_Unlock+0x3c>)
 800cef2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cef4:	4b07      	ldr	r3, [pc, #28]	; (800cf14 <HAL_FLASH_Unlock+0x38>)
 800cef6:	4a09      	ldr	r2, [pc, #36]	; (800cf1c <HAL_FLASH_Unlock+0x40>)
 800cef8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cefa:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <HAL_FLASH_Unlock+0x38>)
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	da01      	bge.n	800cf06 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cf06:	79fb      	ldrb	r3, [r7, #7]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	58004000 	.word	0x58004000
 800cf18:	45670123 	.word	0x45670123
 800cf1c:	cdef89ab 	.word	0xcdef89ab

0800cf20 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cf2a:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <HAL_FLASH_Lock+0x30>)
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	4a08      	ldr	r2, [pc, #32]	; (800cf50 <HAL_FLASH_Lock+0x30>)
 800cf30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf34:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800cf36:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <HAL_FLASH_Lock+0x30>)
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	db01      	blt.n	800cf42 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cf42:	79fb      	ldrb	r3, [r7, #7]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	58004000 	.word	0x58004000

0800cf54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800cf5c:	f7ff fd94 	bl	800ca88 <HAL_GetTick>
 800cf60:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cf62:	e009      	b.n	800cf78 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800cf64:	f7ff fd90 	bl	800ca88 <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d801      	bhi.n	800cf78 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e054      	b.n	800d022 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cf78:	4b2c      	ldr	r3, [pc, #176]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf84:	d0ee      	beq.n	800cf64 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800cf86:	4b29      	ldr	r3, [pc, #164]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cf96:	4b25      	ldr	r3, [pc, #148]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cf98:	2201      	movs	r2, #1
 800cf9a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d007      	beq.n	800cfb6 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800cfa6:	4b21      	ldr	r3, [pc, #132]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cfa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cfac:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfb4:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d007      	beq.n	800cfda <FLASH_WaitForLastOperation+0x86>
 800cfca:	4b18      	ldr	r3, [pc, #96]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cfcc:	699a      	ldr	r2, [r3, #24]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cfd4:	4915      	ldr	r1, [pc, #84]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	618b      	str	r3, [r1, #24]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <FLASH_WaitForLastOperation+0x9a>
 800cfe4:	4a11      	ldr	r2, [pc, #68]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cfec:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00e      	beq.n	800d012 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800cff4:	4a0e      	ldr	r2, [pc, #56]	; (800d030 <FLASH_WaitForLastOperation+0xdc>)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e011      	b.n	800d022 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800cffe:	f7ff fd43 	bl	800ca88 <HAL_GetTick>
 800d002:	4602      	mov	r2, r0
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d801      	bhi.n	800d012 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e007      	b.n	800d022 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800d012:	4b06      	ldr	r3, [pc, #24]	; (800d02c <FLASH_WaitForLastOperation+0xd8>)
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d01a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d01e:	d0ee      	beq.n	800cffe <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	58004000 	.word	0x58004000
 800d030:	2000a768 	.word	0x2000a768

0800d034 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d040:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <FLASH_Program_DoubleWord+0x48>)
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	4a0d      	ldr	r2, [pc, #52]	; (800d07c <FLASH_Program_DoubleWord+0x48>)
 800d046:	f043 0301 	orr.w	r3, r3, #1
 800d04a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800d052:	f3bf 8f6f 	isb	sy
}
 800d056:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800d058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d05c:	f04f 0200 	mov.w	r2, #0
 800d060:	f04f 0300 	mov.w	r3, #0
 800d064:	000a      	movs	r2, r1
 800d066:	2300      	movs	r3, #0
 800d068:	68f9      	ldr	r1, [r7, #12]
 800d06a:	3104      	adds	r1, #4
 800d06c:	4613      	mov	r3, r2
 800d06e:	600b      	str	r3, [r1, #0]
}
 800d070:	bf00      	nop
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	58004000 	.word	0x58004000

0800d080 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d08a:	4b24      	ldr	r3, [pc, #144]	; (800d11c <HAL_FLASHEx_Erase+0x9c>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d101      	bne.n	800d096 <HAL_FLASHEx_Erase+0x16>
 800d092:	2302      	movs	r3, #2
 800d094:	e03d      	b.n	800d112 <HAL_FLASHEx_Erase+0x92>
 800d096:	4b21      	ldr	r3, [pc, #132]	; (800d11c <HAL_FLASHEx_Erase+0x9c>)
 800d098:	2201      	movs	r2, #1
 800d09a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d09c:	4b1f      	ldr	r3, [pc, #124]	; (800d11c <HAL_FLASHEx_Erase+0x9c>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0a6:	f7ff ff55 	bl	800cf54 <FLASH_WaitForLastOperation>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d12a      	bne.n	800d10a <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d124      	bne.n	800d106 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	60bb      	str	r3, [r7, #8]
 800d0ca:	e012      	b.n	800d0f2 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800d0cc:	68b8      	ldr	r0, [r7, #8]
 800d0ce:	f000 f869 	bl	800d1a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0d6:	f7ff ff3d 	bl	800cf54 <FLASH_WaitForLastOperation>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d003      	beq.n	800d0ec <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	601a      	str	r2, [r3, #0]
          break;
 800d0ea:	e00a      	b.n	800d102 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	60bb      	str	r3, [r7, #8]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d3e4      	bcc.n	800d0cc <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800d102:	f000 f8b1 	bl	800d268 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d106:	f000 f867 	bl	800d1d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d10a:	4b04      	ldr	r3, [pc, #16]	; (800d11c <HAL_FLASHEx_Erase+0x9c>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]

  return status;
 800d110:	7bfb      	ldrb	r3, [r7, #15]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	2000a768 	.word	0x2000a768

0800d120 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d128:	4b1c      	ldr	r3, [pc, #112]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d101      	bne.n	800d134 <HAL_FLASHEx_Erase_IT+0x14>
 800d130:	2302      	movs	r3, #2
 800d132:	e02e      	b.n	800d192 <HAL_FLASHEx_Erase_IT+0x72>
 800d134:	4b19      	ldr	r3, [pc, #100]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d136:	2201      	movs	r2, #1
 800d138:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d13a:	4b18      	ldr	r3, [pc, #96]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a15      	ldr	r2, [pc, #84]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d146:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d14c:	f7ff ff02 	bl	800cf54 <FLASH_WaitForLastOperation>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800d15a:	4b10      	ldr	r3, [pc, #64]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	701a      	strb	r2, [r3, #0]
 800d160:	e016      	b.n	800d190 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800d162:	4b0f      	ldr	r3, [pc, #60]	; (800d1a0 <HAL_FLASHEx_Erase_IT+0x80>)
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	4a0e      	ldr	r2, [pc, #56]	; (800d1a0 <HAL_FLASHEx_Erase_IT+0x80>)
 800d168:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800d16c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d10c      	bne.n	800d190 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	4a08      	ldr	r2, [pc, #32]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d17c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	4a06      	ldr	r2, [pc, #24]	; (800d19c <HAL_FLASHEx_Erase_IT+0x7c>)
 800d184:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 f80a 	bl	800d1a4 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800d190:	7bfb      	ldrb	r3, [r7, #15]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	2000a768 	.word	0x2000a768
 800d1a0:	58004000 	.word	0x58004000

0800d1a4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800d1ac:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <FLASH_PageErase+0x30>)
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	4a06      	ldr	r2, [pc, #24]	; (800d1d4 <FLASH_PageErase+0x30>)
 800d1bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1c0:	f043 0302 	orr.w	r3, r3, #2
 800d1c4:	6153      	str	r3, [r2, #20]
}
 800d1c6:	bf00      	nop
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	58004000 	.word	0x58004000

0800d1d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800d1dc:	4b21      	ldr	r3, [pc, #132]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1e8:	d117      	bne.n	800d21a <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d1ea:	4b1e      	ldr	r3, [pc, #120]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a1d      	ldr	r2, [pc, #116]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d1f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1f4:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d1f6:	4b1b      	ldr	r3, [pc, #108]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a1a      	ldr	r2, [pc, #104]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d1fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d200:	6013      	str	r3, [r2, #0]
 800d202:	4b18      	ldr	r3, [pc, #96]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a17      	ldr	r2, [pc, #92]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d20c:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d20e:	4b15      	ldr	r3, [pc, #84]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a14      	ldr	r2, [pc, #80]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d218:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800d21a:	4b12      	ldr	r3, [pc, #72]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d226:	d117      	bne.n	800d258 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d228:	4b0e      	ldr	r3, [pc, #56]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a0d      	ldr	r2, [pc, #52]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d22e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d232:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d234:	4b0b      	ldr	r3, [pc, #44]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a0a      	ldr	r2, [pc, #40]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d23a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	4b08      	ldr	r3, [pc, #32]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a07      	ldr	r2, [pc, #28]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d24a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d24c:	4b05      	ldr	r3, [pc, #20]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a04      	ldr	r2, [pc, #16]	; (800d264 <FLASH_FlushCaches+0x8c>)
 800d252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d256:	6013      	str	r3, [r2, #0]
  }
}
 800d258:	bf00      	nop
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	58004000 	.word	0x58004000

0800d268 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d26c:	4b06      	ldr	r3, [pc, #24]	; (800d288 <FLASH_AcknowledgePageErase+0x20>)
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	4a05      	ldr	r2, [pc, #20]	; (800d288 <FLASH_AcknowledgePageErase+0x20>)
 800d272:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d276:	f023 0302 	bic.w	r3, r3, #2
 800d27a:	6153      	str	r3, [r2, #20]
}
 800d27c:	bf00      	nop
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	58004000 	.word	0x58004000

0800d28c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b087      	sub	sp, #28
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d296:	2300      	movs	r3, #0
 800d298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d29a:	e14c      	b.n	800d536 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 813e 	beq.w	800d530 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	f003 0303 	and.w	r3, r3, #3
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d005      	beq.n	800d2cc <HAL_GPIO_Init+0x40>
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f003 0303 	and.w	r3, r3, #3
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d130      	bne.n	800d32e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	2203      	movs	r2, #3
 800d2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2dc:	43db      	mvns	r3, r3
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	68da      	ldr	r2, [r3, #12]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d302:	2201      	movs	r2, #1
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	fa02 f303 	lsl.w	r3, r2, r3
 800d30a:	43db      	mvns	r3, r3
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	4013      	ands	r3, r2
 800d310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	091b      	lsrs	r3, r3, #4
 800d318:	f003 0201 	and.w	r2, r3, #1
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	fa02 f303 	lsl.w	r3, r2, r3
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	4313      	orrs	r3, r2
 800d326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f003 0303 	and.w	r3, r3, #3
 800d336:	2b03      	cmp	r3, #3
 800d338:	d017      	beq.n	800d36a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	2203      	movs	r2, #3
 800d346:	fa02 f303 	lsl.w	r3, r2, r3
 800d34a:	43db      	mvns	r3, r3
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	4013      	ands	r3, r2
 800d350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	fa02 f303 	lsl.w	r3, r2, r3
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	4313      	orrs	r3, r2
 800d362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	f003 0303 	and.w	r3, r3, #3
 800d372:	2b02      	cmp	r3, #2
 800d374:	d123      	bne.n	800d3be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	08da      	lsrs	r2, r3, #3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	3208      	adds	r2, #8
 800d37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f003 0307 	and.w	r3, r3, #7
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	220f      	movs	r2, #15
 800d38e:	fa02 f303 	lsl.w	r3, r2, r3
 800d392:	43db      	mvns	r3, r3
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	4013      	ands	r3, r2
 800d398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	f003 0307 	and.w	r3, r3, #7
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	08da      	lsrs	r2, r3, #3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	3208      	adds	r2, #8
 800d3b8:	6939      	ldr	r1, [r7, #16]
 800d3ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	2203      	movs	r2, #3
 800d3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ce:	43db      	mvns	r3, r3
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	f003 0203 	and.w	r2, r3, #3
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	693a      	ldr	r2, [r7, #16]
 800d3f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 8098 	beq.w	800d530 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800d400:	4a54      	ldr	r2, [pc, #336]	; (800d554 <HAL_GPIO_Init+0x2c8>)
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	089b      	lsrs	r3, r3, #2
 800d406:	3302      	adds	r3, #2
 800d408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d40c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	220f      	movs	r2, #15
 800d418:	fa02 f303 	lsl.w	r3, r2, r3
 800d41c:	43db      	mvns	r3, r3
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	4013      	ands	r3, r2
 800d422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d42a:	d019      	beq.n	800d460 <HAL_GPIO_Init+0x1d4>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a4a      	ldr	r2, [pc, #296]	; (800d558 <HAL_GPIO_Init+0x2cc>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d013      	beq.n	800d45c <HAL_GPIO_Init+0x1d0>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a49      	ldr	r2, [pc, #292]	; (800d55c <HAL_GPIO_Init+0x2d0>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d00d      	beq.n	800d458 <HAL_GPIO_Init+0x1cc>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a48      	ldr	r2, [pc, #288]	; (800d560 <HAL_GPIO_Init+0x2d4>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d007      	beq.n	800d454 <HAL_GPIO_Init+0x1c8>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a47      	ldr	r2, [pc, #284]	; (800d564 <HAL_GPIO_Init+0x2d8>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d101      	bne.n	800d450 <HAL_GPIO_Init+0x1c4>
 800d44c:	2304      	movs	r3, #4
 800d44e:	e008      	b.n	800d462 <HAL_GPIO_Init+0x1d6>
 800d450:	2307      	movs	r3, #7
 800d452:	e006      	b.n	800d462 <HAL_GPIO_Init+0x1d6>
 800d454:	2303      	movs	r3, #3
 800d456:	e004      	b.n	800d462 <HAL_GPIO_Init+0x1d6>
 800d458:	2302      	movs	r3, #2
 800d45a:	e002      	b.n	800d462 <HAL_GPIO_Init+0x1d6>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <HAL_GPIO_Init+0x1d6>
 800d460:	2300      	movs	r3, #0
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	f002 0203 	and.w	r2, r2, #3
 800d468:	0092      	lsls	r2, r2, #2
 800d46a:	4093      	lsls	r3, r2
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	4313      	orrs	r3, r2
 800d470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d472:	4938      	ldr	r1, [pc, #224]	; (800d554 <HAL_GPIO_Init+0x2c8>)
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	089b      	lsrs	r3, r3, #2
 800d478:	3302      	adds	r3, #2
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d480:	4b39      	ldr	r3, [pc, #228]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	43db      	mvns	r3, r3
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	4013      	ands	r3, r2
 800d48e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d4a4:	4a30      	ldr	r2, [pc, #192]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d4aa:	4b2f      	ldr	r3, [pc, #188]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	43db      	mvns	r3, r3
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d4ce:	4a26      	ldr	r2, [pc, #152]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d4d4:	4b24      	ldr	r3, [pc, #144]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	43db      	mvns	r3, r3
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d4fa:	4a1b      	ldr	r2, [pc, #108]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800d502:	4b19      	ldr	r3, [pc, #100]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	43db      	mvns	r3, r3
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	4013      	ands	r3, r2
 800d512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d003      	beq.n	800d528 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	4313      	orrs	r3, r2
 800d526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d528:	4a0f      	ldr	r2, [pc, #60]	; (800d568 <HAL_GPIO_Init+0x2dc>)
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	3301      	adds	r3, #1
 800d534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	fa22 f303 	lsr.w	r3, r2, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	f47f aeab 	bne.w	800d29c <HAL_GPIO_Init+0x10>
  }
}
 800d546:	bf00      	nop
 800d548:	bf00      	nop
 800d54a:	371c      	adds	r7, #28
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	40010000 	.word	0x40010000
 800d558:	48000400 	.word	0x48000400
 800d55c:	48000800 	.word	0x48000800
 800d560:	48000c00 	.word	0x48000c00
 800d564:	48001000 	.word	0x48001000
 800d568:	58000800 	.word	0x58000800

0800d56c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	691a      	ldr	r2, [r3, #16]
 800d57c:	887b      	ldrh	r3, [r7, #2]
 800d57e:	4013      	ands	r3, r2
 800d580:	2b00      	cmp	r3, #0
 800d582:	d002      	beq.n	800d58a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d584:	2301      	movs	r3, #1
 800d586:	73fb      	strb	r3, [r7, #15]
 800d588:	e001      	b.n	800d58e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d58a:	2300      	movs	r3, #0
 800d58c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	807b      	strh	r3, [r7, #2]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d5ac:	787b      	ldrb	r3, [r7, #1]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d5b2:	887a      	ldrh	r2, [r7, #2]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d5b8:	e002      	b.n	800d5c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d5ba:	887a      	ldrh	r2, [r7, #2]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d5de:	887a      	ldrh	r2, [r7, #2]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	041a      	lsls	r2, r3, #16
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	43d9      	mvns	r1, r3
 800d5ea:	887b      	ldrh	r3, [r7, #2]
 800d5ec:	400b      	ands	r3, r1
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	619a      	str	r2, [r3, #24]
}
 800d5f4:	bf00      	nop
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d60a:	4b08      	ldr	r3, [pc, #32]	; (800d62c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d60c:	68da      	ldr	r2, [r3, #12]
 800d60e:	88fb      	ldrh	r3, [r7, #6]
 800d610:	4013      	ands	r3, r2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d006      	beq.n	800d624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d616:	4a05      	ldr	r2, [pc, #20]	; (800d62c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d618:	88fb      	ldrh	r3, [r7, #6]
 800d61a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d61c:	88fb      	ldrh	r3, [r7, #6]
 800d61e:	4618      	mov	r0, r3
 800d620:	f7f8 f8c4 	bl	80057ac <HAL_GPIO_EXTI_Callback>
  }
}
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	58000800 	.word	0x58000800

0800d630 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <HAL_HSEM_IRQHandler+0x30>)
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800d63c:	4b08      	ldr	r3, [pc, #32]	; (800d660 <HAL_HSEM_IRQHandler+0x30>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	43db      	mvns	r3, r3
 800d644:	4906      	ldr	r1, [pc, #24]	; (800d660 <HAL_HSEM_IRQHandler+0x30>)
 800d646:	4013      	ands	r3, r2
 800d648:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800d64a:	4a05      	ldr	r2, [pc, #20]	; (800d660 <HAL_HSEM_IRQHandler+0x30>)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f807 	bl	800d664 <HAL_HSEM_FreeCallback>
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	58001500 	.word	0x58001500

0800d664 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67a:	b08b      	sub	sp, #44	; 0x2c
 800d67c:	af06      	add	r7, sp, #24
 800d67e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e0cb      	b.n	800d822 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7fd f80a 	bl	800a6b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2203      	movs	r2, #3
 800d6a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f005 f943 	bl	801293c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]
 800d6ba:	e040      	b.n	800d73e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	1c5a      	adds	r2, r3, #1
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
 800d6d4:	6879      	ldr	r1, [r7, #4]
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	4613      	mov	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	4413      	add	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	440b      	add	r3, r1
 800d6e2:	7bfa      	ldrb	r2, [r7, #15]
 800d6e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	4413      	add	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	440b      	add	r3, r1
 800d6f6:	3303      	adds	r3, #3
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d6fc:	7bfa      	ldrb	r2, [r7, #15]
 800d6fe:	6879      	ldr	r1, [r7, #4]
 800d700:	4613      	mov	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4413      	add	r3, r2
 800d706:	00db      	lsls	r3, r3, #3
 800d708:	440b      	add	r3, r1
 800d70a:	3338      	adds	r3, #56	; 0x38
 800d70c:	2200      	movs	r2, #0
 800d70e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d710:	7bfa      	ldrb	r2, [r7, #15]
 800d712:	6879      	ldr	r1, [r7, #4]
 800d714:	4613      	mov	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	440b      	add	r3, r1
 800d71e:	333c      	adds	r3, #60	; 0x3c
 800d720:	2200      	movs	r2, #0
 800d722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d724:	7bfa      	ldrb	r2, [r7, #15]
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	4613      	mov	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	440b      	add	r3, r1
 800d732:	3340      	adds	r3, #64	; 0x40
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	3301      	adds	r3, #1
 800d73c:	73fb      	strb	r3, [r7, #15]
 800d73e:	7bfa      	ldrb	r2, [r7, #15]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	d3b9      	bcc.n	800d6bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d748:	2300      	movs	r3, #0
 800d74a:	73fb      	strb	r3, [r7, #15]
 800d74c:	e044      	b.n	800d7d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d74e:	7bfa      	ldrb	r2, [r7, #15]
 800d750:	6879      	ldr	r1, [r7, #4]
 800d752:	4613      	mov	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4413      	add	r3, r2
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	440b      	add	r3, r1
 800d75c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800d760:	2200      	movs	r2, #0
 800d762:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d764:	7bfa      	ldrb	r2, [r7, #15]
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	4613      	mov	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	440b      	add	r3, r1
 800d772:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d776:	7bfa      	ldrb	r2, [r7, #15]
 800d778:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d77a:	7bfa      	ldrb	r2, [r7, #15]
 800d77c:	6879      	ldr	r1, [r7, #4]
 800d77e:	4613      	mov	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	440b      	add	r3, r1
 800d788:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800d78c:	2200      	movs	r2, #0
 800d78e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d790:	7bfa      	ldrb	r2, [r7, #15]
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4413      	add	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	440b      	add	r3, r1
 800d79e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d7a6:	7bfa      	ldrb	r2, [r7, #15]
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	440b      	add	r3, r1
 800d7b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d7bc:	7bfa      	ldrb	r2, [r7, #15]
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	440b      	add	r3, r1
 800d7ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	73fb      	strb	r3, [r7, #15]
 800d7d8:	7bfa      	ldrb	r2, [r7, #15]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d3b5      	bcc.n	800d74e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	687e      	ldr	r6, [r7, #4]
 800d7ea:	466d      	mov	r5, sp
 800d7ec:	f106 0410 	add.w	r4, r6, #16
 800d7f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	602b      	str	r3, [r5, #0]
 800d7f8:	1d33      	adds	r3, r6, #4
 800d7fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7fc:	6838      	ldr	r0, [r7, #0]
 800d7fe:	f005 f8b8 	bl	8012972 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d102      	bne.n	800d820 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f805 	bl	800d82a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d82a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b085      	sub	sp, #20
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d84e:	b29b      	uxth	r3, r3
 800d850:	f043 0301 	orr.w	r3, r3, #1
 800d854:	b29a      	uxth	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d862:	b29b      	uxth	r3, r3
 800d864:	f043 0302 	orr.w	r3, r3, #2
 800d868:	b29a      	uxth	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01d      	beq.n	800d8cc <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	791b      	ldrb	r3, [r3, #4]
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7fc fe3a 	bl	800a514 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 800d8bc:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	711a      	strb	r2, [r3, #4]
 800d8ca:	e001      	b.n	800d8d0 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
	...

0800d8dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d8e0:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a04      	ldr	r2, [pc, #16]	; (800d8f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8ea:	6013      	str	r3, [r2, #0]
}
 800d8ec:	bf00      	nop
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	58000400 	.word	0x58000400

0800d8fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d900:	4b04      	ldr	r3, [pc, #16]	; (800d914 <HAL_PWREx_GetVoltageRange+0x18>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800d908:	4618      	mov	r0, r3
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	58000400 	.word	0x58000400

0800d918 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800d91c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d92a:	d101      	bne.n	800d930 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800d92c:	2301      	movs	r3, #1
 800d92e:	e000      	b.n	800d932 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <LL_RCC_HSE_Enable>:
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d94a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d94e:	6013      	str	r3, [r2, #0]
}
 800d950:	bf00      	nop
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <LL_RCC_HSE_Disable>:
{
 800d95a:	b480      	push	{r7}
 800d95c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800d95e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d96c:	6013      	str	r3, [r2, #0]
}
 800d96e:	bf00      	nop
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <LL_RCC_HSE_IsReady>:
{
 800d978:	b480      	push	{r7}
 800d97a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800d97c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d98a:	d101      	bne.n	800d990 <LL_RCC_HSE_IsReady+0x18>
 800d98c:	2301      	movs	r3, #1
 800d98e:	e000      	b.n	800d992 <LL_RCC_HSE_IsReady+0x1a>
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <LL_RCC_HSI_Enable>:
{
 800d99c:	b480      	push	{r7}
 800d99e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d9a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d9aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9ae:	6013      	str	r3, [r2, #0]
}
 800d9b0:	bf00      	nop
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <LL_RCC_HSI_Disable>:
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800d9be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d9c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9cc:	6013      	str	r3, [r2, #0]
}
 800d9ce:	bf00      	nop
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <LL_RCC_HSI_IsReady>:
{
 800d9d8:	b480      	push	{r7}
 800d9da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d9dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9ea:	d101      	bne.n	800d9f0 <LL_RCC_HSI_IsReady+0x18>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e000      	b.n	800d9f2 <LL_RCC_HSI_IsReady+0x1a>
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <LL_RCC_HSI_SetCalibTrimming>:
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800da04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	061b      	lsls	r3, r3, #24
 800da12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da16:	4313      	orrs	r3, r2
 800da18:	604b      	str	r3, [r1, #4]
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <LL_RCC_HSI48_Enable>:
{
 800da26:	b480      	push	{r7}
 800da28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800da2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da36:	f043 0301 	orr.w	r3, r3, #1
 800da3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800da3e:	bf00      	nop
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <LL_RCC_HSI48_Disable>:
{
 800da48:	b480      	push	{r7}
 800da4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800da4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da58:	f023 0301 	bic.w	r3, r3, #1
 800da5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800da60:	bf00      	nop
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <LL_RCC_HSI48_IsReady>:
{
 800da6a:	b480      	push	{r7}
 800da6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800da6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da76:	f003 0302 	and.w	r3, r3, #2
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d101      	bne.n	800da82 <LL_RCC_HSI48_IsReady+0x18>
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <LL_RCC_HSI48_IsReady+0x1a>
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <LL_RCC_LSE_Enable>:
{
 800da8e:	b480      	push	{r7}
 800da90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800da92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da9e:	f043 0301 	orr.w	r3, r3, #1
 800daa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800daa6:	bf00      	nop
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <LL_RCC_LSE_Disable>:
{
 800dab0:	b480      	push	{r7}
 800dab2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800dab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dac0:	f023 0301 	bic.w	r3, r3, #1
 800dac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dac8:	bf00      	nop
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <LL_RCC_LSE_EnableBypass>:
{
 800dad2:	b480      	push	{r7}
 800dad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800dad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dae2:	f043 0304 	orr.w	r3, r3, #4
 800dae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800daea:	bf00      	nop
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <LL_RCC_LSE_DisableBypass>:
{
 800daf4:	b480      	push	{r7}
 800daf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800daf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db04:	f023 0304 	bic.w	r3, r3, #4
 800db08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800db0c:	bf00      	nop
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <LL_RCC_LSE_IsReady>:
{
 800db16:	b480      	push	{r7}
 800db18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800db1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b02      	cmp	r3, #2
 800db28:	d101      	bne.n	800db2e <LL_RCC_LSE_IsReady+0x18>
 800db2a:	2301      	movs	r3, #1
 800db2c:	e000      	b.n	800db30 <LL_RCC_LSE_IsReady+0x1a>
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <LL_RCC_LSI1_Enable>:
{
 800db3a:	b480      	push	{r7}
 800db3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800db3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800db52:	bf00      	nop
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <LL_RCC_LSI1_Disable>:
{
 800db5c:	b480      	push	{r7}
 800db5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800db60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db6c:	f023 0301 	bic.w	r3, r3, #1
 800db70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800db74:	bf00      	nop
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <LL_RCC_LSI1_IsReady>:
{
 800db7e:	b480      	push	{r7}
 800db80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800db82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d101      	bne.n	800db96 <LL_RCC_LSI1_IsReady+0x18>
 800db92:	2301      	movs	r3, #1
 800db94:	e000      	b.n	800db98 <LL_RCC_LSI1_IsReady+0x1a>
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <LL_RCC_LSI2_Enable>:
{
 800dba2:	b480      	push	{r7}
 800dba4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800dba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dbb2:	f043 0304 	orr.w	r3, r3, #4
 800dbb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800dbba:	bf00      	nop
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <LL_RCC_LSI2_Disable>:
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800dbc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dbd4:	f023 0304 	bic.w	r3, r3, #4
 800dbd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800dbdc:	bf00      	nop
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <LL_RCC_LSI2_IsReady>:
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800dbea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbf2:	f003 0308 	and.w	r3, r3, #8
 800dbf6:	2b08      	cmp	r3, #8
 800dbf8:	d101      	bne.n	800dbfe <LL_RCC_LSI2_IsReady+0x18>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e000      	b.n	800dc00 <LL_RCC_LSI2_IsReady+0x1a>
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <LL_RCC_LSI2_SetTrimming>:
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800dc12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	021b      	lsls	r3, r3, #8
 800dc22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc26:	4313      	orrs	r3, r2
 800dc28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <LL_RCC_MSI_Enable>:
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800dc3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc46:	f043 0301 	orr.w	r3, r3, #1
 800dc4a:	6013      	str	r3, [r2, #0]
}
 800dc4c:	bf00      	nop
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <LL_RCC_MSI_Disable>:
{
 800dc56:	b480      	push	{r7}
 800dc58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800dc5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc64:	f023 0301 	bic.w	r3, r3, #1
 800dc68:	6013      	str	r3, [r2, #0]
}
 800dc6a:	bf00      	nop
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <LL_RCC_MSI_IsReady>:
{
 800dc74:	b480      	push	{r7}
 800dc76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800dc78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d101      	bne.n	800dc8a <LL_RCC_MSI_IsReady+0x16>
 800dc86:	2301      	movs	r3, #1
 800dc88:	e000      	b.n	800dc8c <LL_RCC_MSI_IsReady+0x18>
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr

0800dc96 <LL_RCC_MSI_SetRange>:
{
 800dc96:	b480      	push	{r7}
 800dc98:	b083      	sub	sp, #12
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800dc9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	600b      	str	r3, [r1, #0]
}
 800dcb2:	bf00      	nop
 800dcb4:	370c      	adds	r7, #12
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr

0800dcbe <LL_RCC_MSI_GetRange>:
{
 800dcbe:	b480      	push	{r7}
 800dcc0:	b083      	sub	sp, #12
 800dcc2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800dcc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2bb0      	cmp	r3, #176	; 0xb0
 800dcd4:	d901      	bls.n	800dcda <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800dcd6:	23b0      	movs	r3, #176	; 0xb0
 800dcd8:	607b      	str	r3, [r7, #4]
  return msiRange;
 800dcda:	687b      	ldr	r3, [r7, #4]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800dcf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd02:	4313      	orrs	r3, r2
 800dd04:	604b      	str	r3, [r1, #4]
}
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <LL_RCC_SetSysClkSource>:
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800dd1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	f023 0203 	bic.w	r2, r3, #3
 800dd24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	608b      	str	r3, [r1, #8]
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <LL_RCC_GetSysClkSource>:
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800dd3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	f003 030c 	and.w	r3, r3, #12
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr

0800dd52 <LL_RCC_SetAHBPrescaler>:
{
 800dd52:	b480      	push	{r7}
 800dd54:	b083      	sub	sp, #12
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800dd5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	608b      	str	r3, [r1, #8]
}
 800dd6e:	bf00      	nop
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <LL_C2_RCC_SetAHBPrescaler>:
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b083      	sub	sp, #12
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800dd82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800dd8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800dd9a:	bf00      	nop
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <LL_RCC_SetAHB4Prescaler>:
{
 800dda6:	b480      	push	{r7}
 800dda8:	b083      	sub	sp, #12
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ddae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ddb6:	f023 020f 	bic.w	r2, r3, #15
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	091b      	lsrs	r3, r3, #4
 800ddbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <LL_RCC_SetAPB1Prescaler>:
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800dddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dde6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	608b      	str	r3, [r1, #8]
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <LL_RCC_SetAPB2Prescaler>:
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800de04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800de0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4313      	orrs	r3, r2
 800de16:	608b      	str	r3, [r1, #8]
}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <LL_RCC_GetAHBPrescaler>:
{
 800de24:	b480      	push	{r7}
 800de26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800de28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800de32:	4618      	mov	r0, r3
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <LL_RCC_GetAHB4Prescaler>:
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800de40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800de48:	011b      	lsls	r3, r3, #4
 800de4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <LL_RCC_GetAPB1Prescaler>:
{
 800de58:	b480      	push	{r7}
 800de5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800de5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800de66:	4618      	mov	r0, r3
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <LL_RCC_GetAPB2Prescaler>:
{
 800de70:	b480      	push	{r7}
 800de72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800de74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800de7e:	4618      	mov	r0, r3
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800de88:	b480      	push	{r7}
 800de8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800de8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de9a:	6013      	str	r3, [r2, #0]
}
 800de9c:	bf00      	nop
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800dea6:	b480      	push	{r7}
 800dea8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800deaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800deb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800deb8:	6013      	str	r3, [r2, #0]
}
 800deba:	bf00      	nop
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800dec4:	b480      	push	{r7}
 800dec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800dec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ded2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ded6:	d101      	bne.n	800dedc <LL_RCC_PLL_IsReady+0x18>
 800ded8:	2301      	movs	r3, #1
 800deda:	e000      	b.n	800dede <LL_RCC_PLL_IsReady+0x1a>
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800deec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	0a1b      	lsrs	r3, r3, #8
 800def4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800def8:	4618      	mov	r0, r3
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800df02:	b480      	push	{r7}
 800df04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800df06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800df10:	4618      	mov	r0, r3
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800df1a:	b480      	push	{r7}
 800df1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800df1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800df28:	4618      	mov	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800df32:	b480      	push	{r7}
 800df34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800df36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	f003 0303 	and.w	r3, r3, #3
}
 800df40:	4618      	mov	r0, r3
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800df4a:	b480      	push	{r7}
 800df4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800df4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df5c:	d101      	bne.n	800df62 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800df5e:	2301      	movs	r3, #1
 800df60:	e000      	b.n	800df64 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800df6e:	b480      	push	{r7}
 800df70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800df72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800df7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df82:	d101      	bne.n	800df88 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800df84:	2301      	movs	r3, #1
 800df86:	e000      	b.n	800df8a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800df94:	b480      	push	{r7}
 800df96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800df98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800dfa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfa8:	d101      	bne.n	800dfae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e000      	b.n	800dfb0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800dfbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfcc:	d101      	bne.n	800dfd2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e000      	b.n	800dfd4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800dfe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dff0:	d101      	bne.n	800dff6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e000      	b.n	800dff8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
	...

0800e004 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e004:	b590      	push	{r4, r7, lr}
 800e006:	b08d      	sub	sp, #52	; 0x34
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d101      	bne.n	800e016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e363      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0320 	and.w	r3, r3, #32
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 808d 	beq.w	800e13e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e024:	f7ff fe89 	bl	800dd3a <LL_RCC_GetSysClkSource>
 800e028:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e02a:	f7ff ff82 	bl	800df32 <LL_RCC_PLL_GetMainSource>
 800e02e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <HAL_RCC_OscConfig+0x3e>
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	2b0c      	cmp	r3, #12
 800e03a:	d147      	bne.n	800e0cc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d144      	bne.n	800e0cc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	69db      	ldr	r3, [r3, #28]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e347      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e052:	f7ff fe34 	bl	800dcbe <LL_RCC_MSI_GetRange>
 800e056:	4603      	mov	r3, r0
 800e058:	429c      	cmp	r4, r3
 800e05a:	d914      	bls.n	800e086 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	4618      	mov	r0, r3
 800e062:	f000 fd2f 	bl	800eac4 <RCC_SetFlashLatencyFromMSIRange>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e336      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff fe0e 	bl	800dc96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a1b      	ldr	r3, [r3, #32]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff fe32 	bl	800dce8 <LL_RCC_MSI_SetCalibTrimming>
 800e084:	e013      	b.n	800e0ae <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff fe03 	bl	800dc96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a1b      	ldr	r3, [r3, #32]
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff fe27 	bl	800dce8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 fd10 	bl	800eac4 <RCC_SetFlashLatencyFromMSIRange>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d001      	beq.n	800e0ae <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e317      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e0ae:	f000 fcc9 	bl	800ea44 <HAL_RCC_GetHCLKFreq>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	4aa4      	ldr	r2, [pc, #656]	; (800e348 <HAL_RCC_OscConfig+0x344>)
 800e0b6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e0b8:	4ba4      	ldr	r3, [pc, #656]	; (800e34c <HAL_RCC_OscConfig+0x348>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fc95 	bl	800c9ec <HAL_InitTick>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d039      	beq.n	800e13c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e308      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d01e      	beq.n	800e112 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e0d4:	f7ff fdb0 	bl	800dc38 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e0d8:	f7fe fcd6 	bl	800ca88 <HAL_GetTick>
 800e0dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e0de:	e008      	b.n	800e0f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e0e0:	f7fe fcd2 	bl	800ca88 <HAL_GetTick>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d901      	bls.n	800e0f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	e2f5      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e0f2:	f7ff fdbf 	bl	800dc74 <LL_RCC_MSI_IsReady>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d0f1      	beq.n	800e0e0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff fdc8 	bl	800dc96 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff fdec 	bl	800dce8 <LL_RCC_MSI_SetCalibTrimming>
 800e110:	e015      	b.n	800e13e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e112:	f7ff fda0 	bl	800dc56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e116:	f7fe fcb7 	bl	800ca88 <HAL_GetTick>
 800e11a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e11c:	e008      	b.n	800e130 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e11e:	f7fe fcb3 	bl	800ca88 <HAL_GetTick>
 800e122:	4602      	mov	r2, r0
 800e124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d901      	bls.n	800e130 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e12c:	2303      	movs	r3, #3
 800e12e:	e2d6      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e130:	f7ff fda0 	bl	800dc74 <LL_RCC_MSI_IsReady>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1f1      	bne.n	800e11e <HAL_RCC_OscConfig+0x11a>
 800e13a:	e000      	b.n	800e13e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e13c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	2b00      	cmp	r3, #0
 800e148:	d047      	beq.n	800e1da <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e14a:	f7ff fdf6 	bl	800dd3a <LL_RCC_GetSysClkSource>
 800e14e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e150:	f7ff feef 	bl	800df32 <LL_RCC_PLL_GetMainSource>
 800e154:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	2b08      	cmp	r3, #8
 800e15a:	d005      	beq.n	800e168 <HAL_RCC_OscConfig+0x164>
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	2b0c      	cmp	r3, #12
 800e160:	d108      	bne.n	800e174 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	2b03      	cmp	r3, #3
 800e166:	d105      	bne.n	800e174 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d134      	bne.n	800e1da <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e2b4      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e17c:	d102      	bne.n	800e184 <HAL_RCC_OscConfig+0x180>
 800e17e:	f7ff fbdd 	bl	800d93c <LL_RCC_HSE_Enable>
 800e182:	e001      	b.n	800e188 <HAL_RCC_OscConfig+0x184>
 800e184:	f7ff fbe9 	bl	800d95a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d012      	beq.n	800e1b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e190:	f7fe fc7a 	bl	800ca88 <HAL_GetTick>
 800e194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e196:	e008      	b.n	800e1aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e198:	f7fe fc76 	bl	800ca88 <HAL_GetTick>
 800e19c:	4602      	mov	r2, r0
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	2b64      	cmp	r3, #100	; 0x64
 800e1a4:	d901      	bls.n	800e1aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	e299      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e1aa:	f7ff fbe5 	bl	800d978 <LL_RCC_HSE_IsReady>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d0f1      	beq.n	800e198 <HAL_RCC_OscConfig+0x194>
 800e1b4:	e011      	b.n	800e1da <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1b6:	f7fe fc67 	bl	800ca88 <HAL_GetTick>
 800e1ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e1bc:	e008      	b.n	800e1d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e1be:	f7fe fc63 	bl	800ca88 <HAL_GetTick>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	2b64      	cmp	r3, #100	; 0x64
 800e1ca:	d901      	bls.n	800e1d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e286      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800e1d0:	f7ff fbd2 	bl	800d978 <LL_RCC_HSE_IsReady>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d1f1      	bne.n	800e1be <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f003 0302 	and.w	r3, r3, #2
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d04c      	beq.n	800e280 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e1e6:	f7ff fda8 	bl	800dd3a <LL_RCC_GetSysClkSource>
 800e1ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e1ec:	f7ff fea1 	bl	800df32 <LL_RCC_PLL_GetMainSource>
 800e1f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	2b04      	cmp	r3, #4
 800e1f6:	d005      	beq.n	800e204 <HAL_RCC_OscConfig+0x200>
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	2b0c      	cmp	r3, #12
 800e1fc:	d10e      	bne.n	800e21c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d10b      	bne.n	800e21c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e266      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff fbf1 	bl	800d9fc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e21a:	e031      	b.n	800e280 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d019      	beq.n	800e258 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e224:	f7ff fbba 	bl	800d99c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e228:	f7fe fc2e 	bl	800ca88 <HAL_GetTick>
 800e22c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800e22e:	e008      	b.n	800e242 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e230:	f7fe fc2a 	bl	800ca88 <HAL_GetTick>
 800e234:	4602      	mov	r2, r0
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d901      	bls.n	800e242 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	e24d      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800e242:	f7ff fbc9 	bl	800d9d8 <LL_RCC_HSI_IsReady>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d0f1      	beq.n	800e230 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	4618      	mov	r0, r3
 800e252:	f7ff fbd3 	bl	800d9fc <LL_RCC_HSI_SetCalibTrimming>
 800e256:	e013      	b.n	800e280 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e258:	f7ff fbaf 	bl	800d9ba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e25c:	f7fe fc14 	bl	800ca88 <HAL_GetTick>
 800e260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800e262:	e008      	b.n	800e276 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e264:	f7fe fc10 	bl	800ca88 <HAL_GetTick>
 800e268:	4602      	mov	r2, r0
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d901      	bls.n	800e276 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800e272:	2303      	movs	r3, #3
 800e274:	e233      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800e276:	f7ff fbaf 	bl	800d9d8 <LL_RCC_HSI_IsReady>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1f1      	bne.n	800e264 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f003 0308 	and.w	r3, r3, #8
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d106      	bne.n	800e29a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e294:	2b00      	cmp	r3, #0
 800e296:	f000 80a3 	beq.w	800e3e0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d076      	beq.n	800e390 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 0310 	and.w	r3, r3, #16
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d046      	beq.n	800e33c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800e2ae:	f7ff fc66 	bl	800db7e <LL_RCC_LSI1_IsReady>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d113      	bne.n	800e2e0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800e2b8:	f7ff fc3f 	bl	800db3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e2bc:	f7fe fbe4 	bl	800ca88 <HAL_GetTick>
 800e2c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e2c2:	e008      	b.n	800e2d6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e2c4:	f7fe fbe0 	bl	800ca88 <HAL_GetTick>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	1ad3      	subs	r3, r2, r3
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d901      	bls.n	800e2d6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	e203      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e2d6:	f7ff fc52 	bl	800db7e <LL_RCC_LSI1_IsReady>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d0f1      	beq.n	800e2c4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800e2e0:	f7ff fc5f 	bl	800dba2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2e4:	f7fe fbd0 	bl	800ca88 <HAL_GetTick>
 800e2e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e2ea:	e008      	b.n	800e2fe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e2ec:	f7fe fbcc 	bl	800ca88 <HAL_GetTick>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	2b03      	cmp	r3, #3
 800e2f8:	d901      	bls.n	800e2fe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	e1ef      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e2fe:	f7ff fc72 	bl	800dbe6 <LL_RCC_LSI2_IsReady>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d0f1      	beq.n	800e2ec <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7ff fc7c 	bl	800dc0a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800e312:	f7ff fc23 	bl	800db5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e316:	f7fe fbb7 	bl	800ca88 <HAL_GetTick>
 800e31a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e31c:	e008      	b.n	800e330 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e31e:	f7fe fbb3 	bl	800ca88 <HAL_GetTick>
 800e322:	4602      	mov	r2, r0
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	2b02      	cmp	r3, #2
 800e32a:	d901      	bls.n	800e330 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800e32c:	2303      	movs	r3, #3
 800e32e:	e1d6      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e330:	f7ff fc25 	bl	800db7e <LL_RCC_LSI1_IsReady>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1f1      	bne.n	800e31e <HAL_RCC_OscConfig+0x31a>
 800e33a:	e051      	b.n	800e3e0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800e33c:	f7ff fbfd 	bl	800db3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e340:	f7fe fba2 	bl	800ca88 <HAL_GetTick>
 800e344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e346:	e00c      	b.n	800e362 <HAL_RCC_OscConfig+0x35e>
 800e348:	20000014 	.word	0x20000014
 800e34c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e350:	f7fe fb9a 	bl	800ca88 <HAL_GetTick>
 800e354:	4602      	mov	r2, r0
 800e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d901      	bls.n	800e362 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e35e:	2303      	movs	r3, #3
 800e360:	e1bd      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e362:	f7ff fc0c 	bl	800db7e <LL_RCC_LSI1_IsReady>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d0f1      	beq.n	800e350 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800e36c:	f7ff fc2a 	bl	800dbc4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e370:	e008      	b.n	800e384 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e372:	f7fe fb89 	bl	800ca88 <HAL_GetTick>
 800e376:	4602      	mov	r2, r0
 800e378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	2b03      	cmp	r3, #3
 800e37e:	d901      	bls.n	800e384 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800e380:	2303      	movs	r3, #3
 800e382:	e1ac      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e384:	f7ff fc2f 	bl	800dbe6 <LL_RCC_LSI2_IsReady>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1f1      	bne.n	800e372 <HAL_RCC_OscConfig+0x36e>
 800e38e:	e027      	b.n	800e3e0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800e390:	f7ff fc18 	bl	800dbc4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e394:	f7fe fb78 	bl	800ca88 <HAL_GetTick>
 800e398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e39a:	e008      	b.n	800e3ae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e39c:	f7fe fb74 	bl	800ca88 <HAL_GetTick>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	d901      	bls.n	800e3ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e197      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e3ae:	f7ff fc1a 	bl	800dbe6 <LL_RCC_LSI2_IsReady>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1f1      	bne.n	800e39c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800e3b8:	f7ff fbd0 	bl	800db5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3bc:	f7fe fb64 	bl	800ca88 <HAL_GetTick>
 800e3c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e3c2:	e008      	b.n	800e3d6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e3c4:	f7fe fb60 	bl	800ca88 <HAL_GetTick>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d901      	bls.n	800e3d6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	e183      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e3d6:	f7ff fbd2 	bl	800db7e <LL_RCC_LSI1_IsReady>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1f1      	bne.n	800e3c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0304 	and.w	r3, r3, #4
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d05b      	beq.n	800e4a4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e3ec:	4ba7      	ldr	r3, [pc, #668]	; (800e68c <HAL_RCC_OscConfig+0x688>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d114      	bne.n	800e422 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e3f8:	f7ff fa70 	bl	800d8dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e3fc:	f7fe fb44 	bl	800ca88 <HAL_GetTick>
 800e400:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e402:	e008      	b.n	800e416 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e404:	f7fe fb40 	bl	800ca88 <HAL_GetTick>
 800e408:	4602      	mov	r2, r0
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	2b02      	cmp	r3, #2
 800e410:	d901      	bls.n	800e416 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800e412:	2303      	movs	r3, #3
 800e414:	e163      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e416:	4b9d      	ldr	r3, [pc, #628]	; (800e68c <HAL_RCC_OscConfig+0x688>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0f0      	beq.n	800e404 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d102      	bne.n	800e430 <HAL_RCC_OscConfig+0x42c>
 800e42a:	f7ff fb30 	bl	800da8e <LL_RCC_LSE_Enable>
 800e42e:	e00c      	b.n	800e44a <HAL_RCC_OscConfig+0x446>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	2b05      	cmp	r3, #5
 800e436:	d104      	bne.n	800e442 <HAL_RCC_OscConfig+0x43e>
 800e438:	f7ff fb4b 	bl	800dad2 <LL_RCC_LSE_EnableBypass>
 800e43c:	f7ff fb27 	bl	800da8e <LL_RCC_LSE_Enable>
 800e440:	e003      	b.n	800e44a <HAL_RCC_OscConfig+0x446>
 800e442:	f7ff fb35 	bl	800dab0 <LL_RCC_LSE_Disable>
 800e446:	f7ff fb55 	bl	800daf4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d014      	beq.n	800e47c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e452:	f7fe fb19 	bl	800ca88 <HAL_GetTick>
 800e456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800e458:	e00a      	b.n	800e470 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e45a:	f7fe fb15 	bl	800ca88 <HAL_GetTick>
 800e45e:	4602      	mov	r2, r0
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	f241 3288 	movw	r2, #5000	; 0x1388
 800e468:	4293      	cmp	r3, r2
 800e46a:	d901      	bls.n	800e470 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800e46c:	2303      	movs	r3, #3
 800e46e:	e136      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800e470:	f7ff fb51 	bl	800db16 <LL_RCC_LSE_IsReady>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0ef      	beq.n	800e45a <HAL_RCC_OscConfig+0x456>
 800e47a:	e013      	b.n	800e4a4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e47c:	f7fe fb04 	bl	800ca88 <HAL_GetTick>
 800e480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800e482:	e00a      	b.n	800e49a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e484:	f7fe fb00 	bl	800ca88 <HAL_GetTick>
 800e488:	4602      	mov	r2, r0
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e492:	4293      	cmp	r3, r2
 800e494:	d901      	bls.n	800e49a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e121      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800e49a:	f7ff fb3c 	bl	800db16 <LL_RCC_LSE_IsReady>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1ef      	bne.n	800e484 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d02c      	beq.n	800e50a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d014      	beq.n	800e4e2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e4b8:	f7ff fab5 	bl	800da26 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4bc:	f7fe fae4 	bl	800ca88 <HAL_GetTick>
 800e4c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e4c2:	e008      	b.n	800e4d6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4c4:	f7fe fae0 	bl	800ca88 <HAL_GetTick>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d901      	bls.n	800e4d6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	e103      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e4d6:	f7ff fac8 	bl	800da6a <LL_RCC_HSI48_IsReady>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d0f1      	beq.n	800e4c4 <HAL_RCC_OscConfig+0x4c0>
 800e4e0:	e013      	b.n	800e50a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4e2:	f7ff fab1 	bl	800da48 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4e6:	f7fe facf 	bl	800ca88 <HAL_GetTick>
 800e4ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e4ec:	e008      	b.n	800e500 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4ee:	f7fe facb 	bl	800ca88 <HAL_GetTick>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	2b02      	cmp	r3, #2
 800e4fa:	d901      	bls.n	800e500 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800e4fc:	2303      	movs	r3, #3
 800e4fe:	e0ee      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e500:	f7ff fab3 	bl	800da6a <LL_RCC_HSI48_IsReady>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1f1      	bne.n	800e4ee <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 80e4 	beq.w	800e6dc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e514:	f7ff fc11 	bl	800dd3a <LL_RCC_GetSysClkSource>
 800e518:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800e51a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e526:	2b02      	cmp	r3, #2
 800e528:	f040 80b4 	bne.w	800e694 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f003 0203 	and.w	r2, r3, #3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e536:	429a      	cmp	r2, r3
 800e538:	d123      	bne.n	800e582 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e544:	429a      	cmp	r2, r3
 800e546:	d11c      	bne.n	800e582 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	0a1b      	lsrs	r3, r3, #8
 800e54c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e554:	429a      	cmp	r2, r3
 800e556:	d114      	bne.n	800e582 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e562:	429a      	cmp	r2, r3
 800e564:	d10d      	bne.n	800e582 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e570:	429a      	cmp	r2, r3
 800e572:	d106      	bne.n	800e582 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e57e:	429a      	cmp	r2, r3
 800e580:	d05d      	beq.n	800e63e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	2b0c      	cmp	r3, #12
 800e586:	d058      	beq.n	800e63a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	e0a1      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e59a:	f7ff fc84 	bl	800dea6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e59e:	f7fe fa73 	bl	800ca88 <HAL_GetTick>
 800e5a2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e5a4:	e008      	b.n	800e5b8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5a6:	f7fe fa6f 	bl	800ca88 <HAL_GetTick>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d901      	bls.n	800e5b8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800e5b4:	2303      	movs	r3, #3
 800e5b6:	e092      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e5b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1ef      	bne.n	800e5a6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e5c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5ca:	68da      	ldr	r2, [r3, #12]
 800e5cc:	4b30      	ldr	r3, [pc, #192]	; (800e690 <HAL_RCC_OscConfig+0x68c>)
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e5d8:	4311      	orrs	r1, r2
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e5de:	0212      	lsls	r2, r2, #8
 800e5e0:	4311      	orrs	r1, r2
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e5e6:	4311      	orrs	r1, r2
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e5ec:	4311      	orrs	r1, r2
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e5f2:	430a      	orrs	r2, r1
 800e5f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e5fc:	f7ff fc44 	bl	800de88 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e60a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e60e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e610:	f7fe fa3a 	bl	800ca88 <HAL_GetTick>
 800e614:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e616:	e008      	b.n	800e62a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e618:	f7fe fa36 	bl	800ca88 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	2b02      	cmp	r3, #2
 800e624:	d901      	bls.n	800e62a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800e626:	2303      	movs	r3, #3
 800e628:	e059      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e62a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e634:	2b00      	cmp	r3, #0
 800e636:	d0ef      	beq.n	800e618 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e638:	e050      	b.n	800e6dc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e04f      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e63e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d147      	bne.n	800e6dc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e64c:	f7ff fc1c 	bl	800de88 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e65a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e65e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e660:	f7fe fa12 	bl	800ca88 <HAL_GetTick>
 800e664:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e666:	e008      	b.n	800e67a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e668:	f7fe fa0e 	bl	800ca88 <HAL_GetTick>
 800e66c:	4602      	mov	r2, r0
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	2b02      	cmp	r3, #2
 800e674:	d901      	bls.n	800e67a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800e676:	2303      	movs	r3, #3
 800e678:	e031      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e67a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0ef      	beq.n	800e668 <HAL_RCC_OscConfig+0x664>
 800e688:	e028      	b.n	800e6dc <HAL_RCC_OscConfig+0x6d8>
 800e68a:	bf00      	nop
 800e68c:	58000400 	.word	0x58000400
 800e690:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	2b0c      	cmp	r3, #12
 800e698:	d01e      	beq.n	800e6d8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e69a:	f7ff fc04 	bl	800dea6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e69e:	f7fe f9f3 	bl	800ca88 <HAL_GetTick>
 800e6a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e6a4:	e008      	b.n	800e6b8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e6a6:	f7fe f9ef 	bl	800ca88 <HAL_GetTick>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d901      	bls.n	800e6b8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	e012      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e6b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1ef      	bne.n	800e6a6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800e6c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6ca:	68da      	ldr	r2, [r3, #12]
 800e6cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e6d0:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <HAL_RCC_OscConfig+0x6e4>)
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	60cb      	str	r3, [r1, #12]
 800e6d6:	e001      	b.n	800e6dc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e000      	b.n	800e6de <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3734      	adds	r7, #52	; 0x34
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd90      	pop	{r4, r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	eefefffc 	.word	0xeefefffc

0800e6ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e12d      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e700:	4b98      	ldr	r3, [pc, #608]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 0307 	and.w	r3, r3, #7
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d91b      	bls.n	800e746 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e70e:	4b95      	ldr	r3, [pc, #596]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f023 0207 	bic.w	r2, r3, #7
 800e716:	4993      	ldr	r1, [pc, #588]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e71e:	f7fe f9b3 	bl	800ca88 <HAL_GetTick>
 800e722:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e724:	e008      	b.n	800e738 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e726:	f7fe f9af 	bl	800ca88 <HAL_GetTick>
 800e72a:	4602      	mov	r2, r0
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	1ad3      	subs	r3, r2, r3
 800e730:	2b02      	cmp	r3, #2
 800e732:	d901      	bls.n	800e738 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800e734:	2303      	movs	r3, #3
 800e736:	e111      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e738:	4b8a      	ldr	r3, [pc, #552]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 0307 	and.w	r3, r3, #7
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	d1ef      	bne.n	800e726 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f003 0302 	and.w	r3, r3, #2
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d016      	beq.n	800e780 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff fafb 	bl	800dd52 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e75c:	f7fe f994 	bl	800ca88 <HAL_GetTick>
 800e760:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e762:	e008      	b.n	800e776 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e764:	f7fe f990 	bl	800ca88 <HAL_GetTick>
 800e768:	4602      	mov	r2, r0
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d901      	bls.n	800e776 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	e0f2      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e776:	f7ff fbe8 	bl	800df4a <LL_RCC_IsActiveFlag_HPRE>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d0f1      	beq.n	800e764 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f003 0320 	and.w	r3, r3, #32
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d016      	beq.n	800e7ba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff faf2 	bl	800dd7a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e796:	f7fe f977 	bl	800ca88 <HAL_GetTick>
 800e79a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e79c:	e008      	b.n	800e7b0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e79e:	f7fe f973 	bl	800ca88 <HAL_GetTick>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d901      	bls.n	800e7b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	e0d5      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e7b0:	f7ff fbdd 	bl	800df6e <LL_RCC_IsActiveFlag_C2HPRE>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d0f1      	beq.n	800e79e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d016      	beq.n	800e7f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7ff faeb 	bl	800dda6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e7d0:	f7fe f95a 	bl	800ca88 <HAL_GetTick>
 800e7d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e7d6:	e008      	b.n	800e7ea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e7d8:	f7fe f956 	bl	800ca88 <HAL_GetTick>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d901      	bls.n	800e7ea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e0b8      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e7ea:	f7ff fbd3 	bl	800df94 <LL_RCC_IsActiveFlag_SHDHPRE>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d0f1      	beq.n	800e7d8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f003 0304 	and.w	r3, r3, #4
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d016      	beq.n	800e82e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff fae5 	bl	800ddd4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e80a:	f7fe f93d 	bl	800ca88 <HAL_GetTick>
 800e80e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e810:	e008      	b.n	800e824 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e812:	f7fe f939 	bl	800ca88 <HAL_GetTick>
 800e816:	4602      	mov	r2, r0
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	2b02      	cmp	r3, #2
 800e81e:	d901      	bls.n	800e824 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e820:	2303      	movs	r3, #3
 800e822:	e09b      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e824:	f7ff fbc9 	bl	800dfba <LL_RCC_IsActiveFlag_PPRE1>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0f1      	beq.n	800e812 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f003 0308 	and.w	r3, r3, #8
 800e836:	2b00      	cmp	r3, #0
 800e838:	d017      	beq.n	800e86a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	691b      	ldr	r3, [r3, #16]
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff fadb 	bl	800ddfc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e846:	f7fe f91f 	bl	800ca88 <HAL_GetTick>
 800e84a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e84c:	e008      	b.n	800e860 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e84e:	f7fe f91b 	bl	800ca88 <HAL_GetTick>
 800e852:	4602      	mov	r2, r0
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d901      	bls.n	800e860 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800e85c:	2303      	movs	r3, #3
 800e85e:	e07d      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e860:	f7ff fbbd 	bl	800dfde <LL_RCC_IsActiveFlag_PPRE2>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d0f1      	beq.n	800e84e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f003 0301 	and.w	r3, r3, #1
 800e872:	2b00      	cmp	r3, #0
 800e874:	d043      	beq.n	800e8fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	d106      	bne.n	800e88c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800e87e:	f7ff f87b 	bl	800d978 <LL_RCC_HSE_IsReady>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d11e      	bne.n	800e8c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e888:	2301      	movs	r3, #1
 800e88a:	e067      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	2b03      	cmp	r3, #3
 800e892:	d106      	bne.n	800e8a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800e894:	f7ff fb16 	bl	800dec4 <LL_RCC_PLL_IsReady>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d113      	bne.n	800e8c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e05c      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800e8aa:	f7ff f9e3 	bl	800dc74 <LL_RCC_MSI_IsReady>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d108      	bne.n	800e8c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e051      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800e8b8:	f7ff f88e 	bl	800d9d8 <LL_RCC_HSI_IsReady>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d101      	bne.n	800e8c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e04a      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7ff fa21 	bl	800dd12 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8d0:	f7fe f8da 	bl	800ca88 <HAL_GetTick>
 800e8d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8d6:	e00a      	b.n	800e8ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8d8:	f7fe f8d6 	bl	800ca88 <HAL_GetTick>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d901      	bls.n	800e8ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	e036      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8ee:	f7ff fa24 	bl	800dd3a <LL_RCC_GetSysClkSource>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d1ec      	bne.n	800e8d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e8fe:	4b19      	ldr	r3, [pc, #100]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0307 	and.w	r3, r3, #7
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d21b      	bcs.n	800e944 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e90c:	4b15      	ldr	r3, [pc, #84]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f023 0207 	bic.w	r2, r3, #7
 800e914:	4913      	ldr	r1, [pc, #76]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	4313      	orrs	r3, r2
 800e91a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e91c:	f7fe f8b4 	bl	800ca88 <HAL_GetTick>
 800e920:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e922:	e008      	b.n	800e936 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e924:	f7fe f8b0 	bl	800ca88 <HAL_GetTick>
 800e928:	4602      	mov	r2, r0
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	1ad3      	subs	r3, r2, r3
 800e92e:	2b02      	cmp	r3, #2
 800e930:	d901      	bls.n	800e936 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800e932:	2303      	movs	r3, #3
 800e934:	e012      	b.n	800e95c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e936:	4b0b      	ldr	r3, [pc, #44]	; (800e964 <HAL_RCC_ClockConfig+0x278>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f003 0307 	and.w	r3, r3, #7
 800e93e:	683a      	ldr	r2, [r7, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d1ef      	bne.n	800e924 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e944:	f000 f87e 	bl	800ea44 <HAL_RCC_GetHCLKFreq>
 800e948:	4603      	mov	r3, r0
 800e94a:	4a07      	ldr	r2, [pc, #28]	; (800e968 <HAL_RCC_ClockConfig+0x27c>)
 800e94c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800e94e:	f7fe f8a7 	bl	800caa0 <HAL_GetTickPrio>
 800e952:	4603      	mov	r3, r0
 800e954:	4618      	mov	r0, r3
 800e956:	f7fe f849 	bl	800c9ec <HAL_InitTick>
 800e95a:	4603      	mov	r3, r0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	58004000 	.word	0x58004000
 800e968:	20000014 	.word	0x20000014

0800e96c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e96c:	b590      	push	{r4, r7, lr}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e972:	f7ff f9e2 	bl	800dd3a <LL_RCC_GetSysClkSource>
 800e976:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10a      	bne.n	800e994 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e97e:	f7ff f99e 	bl	800dcbe <LL_RCC_MSI_GetRange>
 800e982:	4603      	mov	r3, r0
 800e984:	091b      	lsrs	r3, r3, #4
 800e986:	f003 030f 	and.w	r3, r3, #15
 800e98a:	4a2b      	ldr	r2, [pc, #172]	; (800ea38 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e990:	60fb      	str	r3, [r7, #12]
 800e992:	e04b      	b.n	800ea2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b04      	cmp	r3, #4
 800e998:	d102      	bne.n	800e9a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e99a:	4b28      	ldr	r3, [pc, #160]	; (800ea3c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	e045      	b.n	800ea2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b08      	cmp	r3, #8
 800e9a4:	d10a      	bne.n	800e9bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e9a6:	f7fe ffb7 	bl	800d918 <LL_RCC_HSE_IsEnabledDiv2>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d102      	bne.n	800e9b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800e9b0:	4b22      	ldr	r3, [pc, #136]	; (800ea3c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e9b2:	60fb      	str	r3, [r7, #12]
 800e9b4:	e03a      	b.n	800ea2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800e9b6:	4b22      	ldr	r3, [pc, #136]	; (800ea40 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e9b8:	60fb      	str	r3, [r7, #12]
 800e9ba:	e037      	b.n	800ea2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800e9bc:	f7ff fab9 	bl	800df32 <LL_RCC_PLL_GetMainSource>
 800e9c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d003      	beq.n	800e9d0 <HAL_RCC_GetSysClockFreq+0x64>
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d003      	beq.n	800e9d6 <HAL_RCC_GetSysClockFreq+0x6a>
 800e9ce:	e00d      	b.n	800e9ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800e9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ea3c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e9d2:	60bb      	str	r3, [r7, #8]
        break;
 800e9d4:	e015      	b.n	800ea02 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e9d6:	f7fe ff9f 	bl	800d918 <LL_RCC_HSE_IsEnabledDiv2>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d102      	bne.n	800e9e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800e9e0:	4b16      	ldr	r3, [pc, #88]	; (800ea3c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e9e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800e9e4:	e00d      	b.n	800ea02 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800e9e6:	4b16      	ldr	r3, [pc, #88]	; (800ea40 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e9e8:	60bb      	str	r3, [r7, #8]
        break;
 800e9ea:	e00a      	b.n	800ea02 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e9ec:	f7ff f967 	bl	800dcbe <LL_RCC_MSI_GetRange>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	091b      	lsrs	r3, r3, #4
 800e9f4:	f003 030f 	and.w	r3, r3, #15
 800e9f8:	4a0f      	ldr	r2, [pc, #60]	; (800ea38 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9fe:	60bb      	str	r3, [r7, #8]
        break;
 800ea00:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800ea02:	f7ff fa71 	bl	800dee8 <LL_RCC_PLL_GetN>
 800ea06:	4602      	mov	r2, r0
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	fb03 f402 	mul.w	r4, r3, r2
 800ea0e:	f7ff fa84 	bl	800df1a <LL_RCC_PLL_GetDivider>
 800ea12:	4603      	mov	r3, r0
 800ea14:	091b      	lsrs	r3, r3, #4
 800ea16:	3301      	adds	r3, #1
 800ea18:	fbb4 f4f3 	udiv	r4, r4, r3
 800ea1c:	f7ff fa71 	bl	800df02 <LL_RCC_PLL_GetR>
 800ea20:	4603      	mov	r3, r0
 800ea22:	0f5b      	lsrs	r3, r3, #29
 800ea24:	3301      	adds	r3, #1
 800ea26:	fbb4 f3f3 	udiv	r3, r4, r3
 800ea2a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3714      	adds	r7, #20
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd90      	pop	{r4, r7, pc}
 800ea36:	bf00      	nop
 800ea38:	080184dc 	.word	0x080184dc
 800ea3c:	00f42400 	.word	0x00f42400
 800ea40:	01e84800 	.word	0x01e84800

0800ea44 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ea44:	b598      	push	{r3, r4, r7, lr}
 800ea46:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ea48:	f7ff ff90 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	f7ff f9e9 	bl	800de24 <LL_RCC_GetAHBPrescaler>
 800ea52:	4603      	mov	r3, r0
 800ea54:	091b      	lsrs	r3, r3, #4
 800ea56:	f003 030f 	and.w	r3, r3, #15
 800ea5a:	4a03      	ldr	r2, [pc, #12]	; (800ea68 <HAL_RCC_GetHCLKFreq+0x24>)
 800ea5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea60:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	bd98      	pop	{r3, r4, r7, pc}
 800ea68:	0801847c 	.word	0x0801847c

0800ea6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea6c:	b598      	push	{r3, r4, r7, lr}
 800ea6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ea70:	f7ff ffe8 	bl	800ea44 <HAL_RCC_GetHCLKFreq>
 800ea74:	4604      	mov	r4, r0
 800ea76:	f7ff f9ef 	bl	800de58 <LL_RCC_GetAPB1Prescaler>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	0a1b      	lsrs	r3, r3, #8
 800ea7e:	f003 0307 	and.w	r3, r3, #7
 800ea82:	4a04      	ldr	r2, [pc, #16]	; (800ea94 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ea84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea88:	f003 031f 	and.w	r3, r3, #31
 800ea8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	bd98      	pop	{r3, r4, r7, pc}
 800ea94:	080184bc 	.word	0x080184bc

0800ea98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea98:	b598      	push	{r3, r4, r7, lr}
 800ea9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ea9c:	f7ff ffd2 	bl	800ea44 <HAL_RCC_GetHCLKFreq>
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	f7ff f9e5 	bl	800de70 <LL_RCC_GetAPB2Prescaler>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	0adb      	lsrs	r3, r3, #11
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	4a04      	ldr	r2, [pc, #16]	; (800eac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800eab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eab4:	f003 031f 	and.w	r3, r3, #31
 800eab8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	bd98      	pop	{r3, r4, r7, pc}
 800eac0:	080184bc 	.word	0x080184bc

0800eac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800eac4:	b590      	push	{r4, r7, lr}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2bb0      	cmp	r3, #176	; 0xb0
 800ead0:	d903      	bls.n	800eada <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ead2:	4b15      	ldr	r3, [pc, #84]	; (800eb28 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ead4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	e007      	b.n	800eaea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	091b      	lsrs	r3, r3, #4
 800eade:	f003 030f 	and.w	r3, r3, #15
 800eae2:	4a11      	ldr	r2, [pc, #68]	; (800eb28 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800eae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eae8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800eaea:	f7ff f9a7 	bl	800de3c <LL_RCC_GetAHB4Prescaler>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	091b      	lsrs	r3, r3, #4
 800eaf2:	f003 030f 	and.w	r3, r3, #15
 800eaf6:	4a0d      	ldr	r2, [pc, #52]	; (800eb2c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800eaf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb02:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	4a0a      	ldr	r2, [pc, #40]	; (800eb30 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800eb08:	fba2 2303 	umull	r2, r3, r2, r3
 800eb0c:	0c9c      	lsrs	r4, r3, #18
 800eb0e:	f7fe fef5 	bl	800d8fc <HAL_PWREx_GetVoltageRange>
 800eb12:	4603      	mov	r3, r0
 800eb14:	4619      	mov	r1, r3
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 f80c 	bl	800eb34 <RCC_SetFlashLatency>
 800eb1c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3714      	adds	r7, #20
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd90      	pop	{r4, r7, pc}
 800eb26:	bf00      	nop
 800eb28:	080184dc 	.word	0x080184dc
 800eb2c:	0801847c 	.word	0x0801847c
 800eb30:	431bde83 	.word	0x431bde83

0800eb34 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800eb34:	b590      	push	{r4, r7, lr}
 800eb36:	b093      	sub	sp, #76	; 0x4c
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800eb3e:	4b37      	ldr	r3, [pc, #220]	; (800ec1c <RCC_SetFlashLatency+0xe8>)
 800eb40:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800eb44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800eb4a:	4a35      	ldr	r2, [pc, #212]	; (800ec20 <RCC_SetFlashLatency+0xec>)
 800eb4c:	f107 031c 	add.w	r3, r7, #28
 800eb50:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800eb56:	4b33      	ldr	r3, [pc, #204]	; (800ec24 <RCC_SetFlashLatency+0xf0>)
 800eb58:	f107 040c 	add.w	r4, r7, #12
 800eb5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800eb62:	2300      	movs	r3, #0
 800eb64:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb6c:	d11a      	bne.n	800eba4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800eb6e:	2300      	movs	r3, #0
 800eb70:	643b      	str	r3, [r7, #64]	; 0x40
 800eb72:	e013      	b.n	800eb9c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800eb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	3348      	adds	r3, #72	; 0x48
 800eb7a:	443b      	add	r3, r7
 800eb7c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d807      	bhi.n	800eb96 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800eb86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	3348      	adds	r3, #72	; 0x48
 800eb8c:	443b      	add	r3, r7
 800eb8e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb92:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800eb94:	e020      	b.n	800ebd8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800eb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb98:	3301      	adds	r3, #1
 800eb9a:	643b      	str	r3, [r7, #64]	; 0x40
 800eb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	d9e8      	bls.n	800eb74 <RCC_SetFlashLatency+0x40>
 800eba2:	e019      	b.n	800ebd8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800eba4:	2300      	movs	r3, #0
 800eba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eba8:	e013      	b.n	800ebd2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ebaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	3348      	adds	r3, #72	; 0x48
 800ebb0:	443b      	add	r3, r7
 800ebb2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d807      	bhi.n	800ebcc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ebbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	3348      	adds	r3, #72	; 0x48
 800ebc2:	443b      	add	r3, r7
 800ebc4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ebc8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800ebca:	e005      	b.n	800ebd8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ebcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebce:	3301      	adds	r3, #1
 800ebd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d9e8      	bls.n	800ebaa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ebd8:	4b13      	ldr	r3, [pc, #76]	; (800ec28 <RCC_SetFlashLatency+0xf4>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f023 0207 	bic.w	r2, r3, #7
 800ebe0:	4911      	ldr	r1, [pc, #68]	; (800ec28 <RCC_SetFlashLatency+0xf4>)
 800ebe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ebe8:	f7fd ff4e 	bl	800ca88 <HAL_GetTick>
 800ebec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ebee:	e008      	b.n	800ec02 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ebf0:	f7fd ff4a 	bl	800ca88 <HAL_GetTick>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d901      	bls.n	800ec02 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ebfe:	2303      	movs	r3, #3
 800ec00:	e007      	b.n	800ec12 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ec02:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <RCC_SetFlashLatency+0xf4>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f003 0307 	and.w	r3, r3, #7
 800ec0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d1ef      	bne.n	800ebf0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	374c      	adds	r7, #76	; 0x4c
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd90      	pop	{r4, r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	08018444 	.word	0x08018444
 800ec20:	08018454 	.word	0x08018454
 800ec24:	08018460 	.word	0x08018460
 800ec28:	58004000 	.word	0x58004000

0800ec2c <LL_RCC_LSE_IsEnabled>:
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ec30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec38:	f003 0301 	and.w	r3, r3, #1
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d101      	bne.n	800ec44 <LL_RCC_LSE_IsEnabled+0x18>
 800ec40:	2301      	movs	r3, #1
 800ec42:	e000      	b.n	800ec46 <LL_RCC_LSE_IsEnabled+0x1a>
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <LL_RCC_LSE_IsReady>:
{
 800ec50:	b480      	push	{r7}
 800ec52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ec54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec5c:	f003 0302 	and.w	r3, r3, #2
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d101      	bne.n	800ec68 <LL_RCC_LSE_IsReady+0x18>
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <LL_RCC_LSE_IsReady+0x1a>
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <LL_RCC_SetRFWKPClockSource>:
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ec7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ec88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <LL_RCC_SetSMPSClockSource>:
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800eca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ecac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecae:	f023 0203 	bic.w	r2, r3, #3
 800ecb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ecbc:	bf00      	nop
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <LL_RCC_SetSMPSPrescaler>:
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ecd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ecda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <LL_RCC_SetUSARTClockSource>:
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ecf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ecfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed00:	f023 0203 	bic.w	r2, r3, #3
 800ed04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <LL_RCC_SetLPUARTClockSource>:
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ed24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ed30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ed3c:	bf00      	nop
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <LL_RCC_SetI2CClockSource>:
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800ed50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	091b      	lsrs	r3, r3, #4
 800ed5c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800ed60:	43db      	mvns	r3, r3
 800ed62:	401a      	ands	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	011b      	lsls	r3, r3, #4
 800ed68:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800ed6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed70:	4313      	orrs	r3, r2
 800ed72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ed76:	bf00      	nop
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <LL_RCC_SetLPTIMClockSource>:
{
 800ed82:	b480      	push	{r7}
 800ed84:	b083      	sub	sp, #12
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800ed8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	0c1b      	lsrs	r3, r3, #16
 800ed96:	041b      	lsls	r3, r3, #16
 800ed98:	43db      	mvns	r3, r3
 800ed9a:	401a      	ands	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	041b      	lsls	r3, r3, #16
 800eda0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eda4:	4313      	orrs	r3, r2
 800eda6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <LL_RCC_SetSAIClockSource>:
{
 800edb6:	b480      	push	{r7}
 800edb8:	b083      	sub	sp, #12
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800edbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800edca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800edd6:	bf00      	nop
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <LL_RCC_SetRNGClockSource>:
{
 800ede2:	b480      	push	{r7}
 800ede4:	b083      	sub	sp, #12
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800edea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edf2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800edf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ee02:	bf00      	nop
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <LL_RCC_SetCLK48ClockSource>:
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b083      	sub	sp, #12
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800ee16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ee22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ee2e:	bf00      	nop
 800ee30:	370c      	adds	r7, #12
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <LL_RCC_SetUSBClockSource>:
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b082      	sub	sp, #8
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff ffe3 	bl	800ee0e <LL_RCC_SetCLK48ClockSource>
}
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <LL_RCC_SetADCClockSource>:
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ee58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ee64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <LL_RCC_SetRTCClockSource>:
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ee84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4313      	orrs	r3, r2
 800ee98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <LL_RCC_GetRTCClockSource>:
{
 800eea8:	b480      	push	{r7}
 800eeaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800eeac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <LL_RCC_ForceBackupDomainReset>:
{
 800eec2:	b480      	push	{r7}
 800eec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800eec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800eeda:	bf00      	nop
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <LL_RCC_ReleaseBackupDomainReset>:
{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800eee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800eefc:	bf00      	nop
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr

0800ef06 <LL_RCC_PLLSAI1_Enable>:
{
 800ef06:	b480      	push	{r7}
 800ef08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ef0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ef18:	6013      	str	r3, [r2, #0]
}
 800ef1a:	bf00      	nop
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <LL_RCC_PLLSAI1_Disable>:
{
 800ef24:	b480      	push	{r7}
 800ef26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ef28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef36:	6013      	str	r3, [r2, #0]
}
 800ef38:	bf00      	nop
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <LL_RCC_PLLSAI1_IsReady>:
{
 800ef42:	b480      	push	{r7}
 800ef44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ef46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef54:	d101      	bne.n	800ef5a <LL_RCC_PLLSAI1_IsReady+0x18>
 800ef56:	2301      	movs	r3, #1
 800ef58:	e000      	b.n	800ef5c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b088      	sub	sp, #32
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800ef6e:	2300      	movs	r3, #0
 800ef70:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800ef72:	2300      	movs	r3, #0
 800ef74:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d034      	beq.n	800efec <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ef8a:	d021      	beq.n	800efd0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ef8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ef90:	d81b      	bhi.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef96:	d01d      	beq.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800ef98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef9c:	d815      	bhi.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00b      	beq.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x54>
 800efa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efa6:	d110      	bne.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800efa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efb6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800efb8:	e00d      	b.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3304      	adds	r3, #4
 800efbe:	4618      	mov	r0, r3
 800efc0:	f000 f947 	bl	800f252 <RCCEx_PLLSAI1_ConfigNP>
 800efc4:	4603      	mov	r3, r0
 800efc6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800efc8:	e005      	b.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	77fb      	strb	r3, [r7, #31]
        break;
 800efce:	e002      	b.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800efd0:	bf00      	nop
 800efd2:	e000      	b.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800efd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efd6:	7ffb      	ldrb	r3, [r7, #31]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d105      	bne.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff fee8 	bl	800edb6 <LL_RCC_SetSAIClockSource>
 800efe6:	e001      	b.n	800efec <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efe8:	7ffb      	ldrb	r3, [r7, #31]
 800efea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d046      	beq.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800eff8:	f7ff ff56 	bl	800eea8 <LL_RCC_GetRTCClockSource>
 800effc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f002:	69ba      	ldr	r2, [r7, #24]
 800f004:	429a      	cmp	r2, r3
 800f006:	d03c      	beq.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f008:	f7fe fc68 	bl	800d8dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d105      	bne.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff ff30 	bl	800ee7c <LL_RCC_SetRTCClockSource>
 800f01c:	e02e      	b.n	800f07c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f01e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f026:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f028:	f7ff ff4b 	bl	800eec2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800f02c:	f7ff ff5a 	bl	800eee4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03a:	4313      	orrs	r3, r2
 800f03c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800f03e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f048:	f7ff fdf0 	bl	800ec2c <LL_RCC_LSE_IsEnabled>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d114      	bne.n	800f07c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f052:	f7fd fd19 	bl	800ca88 <HAL_GetTick>
 800f056:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f058:	e00b      	b.n	800f072 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f05a:	f7fd fd15 	bl	800ca88 <HAL_GetTick>
 800f05e:	4602      	mov	r2, r0
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	1ad3      	subs	r3, r2, r3
 800f064:	f241 3288 	movw	r2, #5000	; 0x1388
 800f068:	4293      	cmp	r3, r2
 800f06a:	d902      	bls.n	800f072 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f06c:	2303      	movs	r3, #3
 800f06e:	77fb      	strb	r3, [r7, #31]
              break;
 800f070:	e004      	b.n	800f07c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f072:	f7ff fded 	bl	800ec50 <LL_RCC_LSE_IsReady>
 800f076:	4603      	mov	r3, r0
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d1ee      	bne.n	800f05a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f07c:	7ffb      	ldrb	r3, [r7, #31]
 800f07e:	77bb      	strb	r3, [r7, #30]
 800f080:	e001      	b.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f082:	7ffb      	ldrb	r3, [r7, #31]
 800f084:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d004      	beq.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	699b      	ldr	r3, [r3, #24]
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff fe2a 	bl	800ecf0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f003 0302 	and.w	r3, r3, #2
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	69db      	ldr	r3, [r3, #28]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7ff fe35 	bl	800ed1c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 0310 	and.w	r3, r3, #16
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d004      	beq.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fe5d 	bl	800ed82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f003 0320 	and.w	r3, r3, #32
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d004      	beq.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff fe52 	bl	800ed82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f003 0304 	and.w	r3, r3, #4
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d004      	beq.n	800f0f4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a1b      	ldr	r3, [r3, #32]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7ff fe2a 	bl	800ed48 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f003 0308 	and.w	r3, r3, #8
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d004      	beq.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f104:	4618      	mov	r0, r3
 800f106:	f7ff fe1f 	bl	800ed48 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f112:	2b00      	cmp	r3, #0
 800f114:	d022      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fe8d 	bl	800ee3a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f128:	d107      	bne.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f138:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f142:	d10b      	bne.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	3304      	adds	r3, #4
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 f8dd 	bl	800f308 <RCCEx_PLLSAI1_ConfigNQ>
 800f14e:	4603      	mov	r3, r0
 800f150:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f152:	7ffb      	ldrb	r3, [r7, #31]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f158:	7ffb      	ldrb	r3, [r7, #31]
 800f15a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f164:	2b00      	cmp	r3, #0
 800f166:	d02b      	beq.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f170:	d008      	beq.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f17a:	d003      	beq.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f180:	2b00      	cmp	r3, #0
 800f182:	d105      	bne.n	800f190 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff fe2a 	bl	800ede2 <LL_RCC_SetRNGClockSource>
 800f18e:	e00a      	b.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f198:	60fb      	str	r3, [r7, #12]
 800f19a:	2000      	movs	r0, #0
 800f19c:	f7ff fe21 	bl	800ede2 <LL_RCC_SetRNGClockSource>
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f7ff fe34 	bl	800ee0e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800f1ae:	d107      	bne.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f1b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f1ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f1be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d022      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7ff fe3d 	bl	800ee50 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1de:	d107      	bne.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f1e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f1ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1ee:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1f8:	d10b      	bne.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	3304      	adds	r3, #4
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 f8dd 	bl	800f3be <RCCEx_PLLSAI1_ConfigNR>
 800f204:	4603      	mov	r3, r0
 800f206:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f208:	7ffb      	ldrb	r3, [r7, #31]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800f20e:	7ffb      	ldrb	r3, [r7, #31]
 800f210:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d004      	beq.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fd26 	bl	800ec74 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f230:	2b00      	cmp	r3, #0
 800f232:	d009      	beq.n	800f248 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff fd45 	bl	800ecc8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff fd2c 	bl	800eca0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800f248:	7fbb      	ldrb	r3, [r7, #30]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3720      	adds	r7, #32
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b084      	sub	sp, #16
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f25a:	2300      	movs	r3, #0
 800f25c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f25e:	f7ff fe61 	bl	800ef24 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f262:	f7fd fc11 	bl	800ca88 <HAL_GetTick>
 800f266:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f268:	e009      	b.n	800f27e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f26a:	f7fd fc0d 	bl	800ca88 <HAL_GetTick>
 800f26e:	4602      	mov	r2, r0
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	2b02      	cmp	r3, #2
 800f276:	d902      	bls.n	800f27e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800f278:	2303      	movs	r3, #3
 800f27a:	73fb      	strb	r3, [r7, #15]
      break;
 800f27c:	e004      	b.n	800f288 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f27e:	f7ff fe60 	bl	800ef42 <LL_RCC_PLLSAI1_IsReady>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1f0      	bne.n	800f26a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d137      	bne.n	800f2fe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	021b      	lsls	r3, r3, #8
 800f29e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800f2a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f2bc:	f7ff fe23 	bl	800ef06 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2c0:	f7fd fbe2 	bl	800ca88 <HAL_GetTick>
 800f2c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f2c6:	e009      	b.n	800f2dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f2c8:	f7fd fbde 	bl	800ca88 <HAL_GetTick>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d902      	bls.n	800f2dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	73fb      	strb	r3, [r7, #15]
        break;
 800f2da:	e004      	b.n	800f2e6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f2dc:	f7ff fe31 	bl	800ef42 <LL_RCC_PLLSAI1_IsReady>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d1f0      	bne.n	800f2c8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800f2e6:	7bfb      	ldrb	r3, [r7, #15]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d108      	bne.n	800f2fe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f2ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2f0:	691a      	ldr	r2, [r3, #16]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f300:	4618      	mov	r0, r3
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f310:	2300      	movs	r3, #0
 800f312:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f314:	f7ff fe06 	bl	800ef24 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f318:	f7fd fbb6 	bl	800ca88 <HAL_GetTick>
 800f31c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f31e:	e009      	b.n	800f334 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f320:	f7fd fbb2 	bl	800ca88 <HAL_GetTick>
 800f324:	4602      	mov	r2, r0
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d902      	bls.n	800f334 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800f32e:	2303      	movs	r3, #3
 800f330:	73fb      	strb	r3, [r7, #15]
      break;
 800f332:	e004      	b.n	800f33e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f334:	f7ff fe05 	bl	800ef42 <LL_RCC_PLLSAI1_IsReady>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d1f0      	bne.n	800f320 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d137      	bne.n	800f3b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	021b      	lsls	r3, r3, #8
 800f354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f358:	4313      	orrs	r3, r2
 800f35a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800f35c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f36e:	4313      	orrs	r3, r2
 800f370:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f372:	f7ff fdc8 	bl	800ef06 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f376:	f7fd fb87 	bl	800ca88 <HAL_GetTick>
 800f37a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f37c:	e009      	b.n	800f392 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f37e:	f7fd fb83 	bl	800ca88 <HAL_GetTick>
 800f382:	4602      	mov	r2, r0
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d902      	bls.n	800f392 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800f38c:	2303      	movs	r3, #3
 800f38e:	73fb      	strb	r3, [r7, #15]
        break;
 800f390:	e004      	b.n	800f39c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f392:	f7ff fdd6 	bl	800ef42 <LL_RCC_PLLSAI1_IsReady>
 800f396:	4603      	mov	r3, r0
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d1f0      	bne.n	800f37e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800f39c:	7bfb      	ldrb	r3, [r7, #15]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d108      	bne.n	800f3b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f3a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3a6:	691a      	ldr	r2, [r3, #16]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b084      	sub	sp, #16
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f3ca:	f7ff fdab 	bl	800ef24 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f3ce:	f7fd fb5b 	bl	800ca88 <HAL_GetTick>
 800f3d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f3d4:	e009      	b.n	800f3ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f3d6:	f7fd fb57 	bl	800ca88 <HAL_GetTick>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d902      	bls.n	800f3ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3e8:	e004      	b.n	800f3f4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f3ea:	f7ff fdaa 	bl	800ef42 <LL_RCC_PLLSAI1_IsReady>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1f0      	bne.n	800f3d6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d137      	bne.n	800f46a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f3fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	021b      	lsls	r3, r3, #8
 800f40a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f40e:	4313      	orrs	r3, r2
 800f410:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800f412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f424:	4313      	orrs	r3, r2
 800f426:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f428:	f7ff fd6d 	bl	800ef06 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f42c:	f7fd fb2c 	bl	800ca88 <HAL_GetTick>
 800f430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f432:	e009      	b.n	800f448 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f434:	f7fd fb28 	bl	800ca88 <HAL_GetTick>
 800f438:	4602      	mov	r2, r0
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d902      	bls.n	800f448 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800f442:	2303      	movs	r3, #3
 800f444:	73fb      	strb	r3, [r7, #15]
        break;
 800f446:	e004      	b.n	800f452 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f448:	f7ff fd7b 	bl	800ef42 <LL_RCC_PLLSAI1_IsReady>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d1f0      	bne.n	800f434 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d108      	bne.n	800f46a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f45c:	691a      	ldr	r2, [r3, #16]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f466:	4313      	orrs	r3, r2
 800f468:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	e09f      	b.n	800f5c6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7fb f84e 	bl	800a53c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2202      	movs	r2, #2
 800f4a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f4a8:	4b49      	ldr	r3, [pc, #292]	; (800f5d0 <HAL_RTC_Init+0x15c>)
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	f003 0310 	and.w	r3, r3, #16
 800f4b0:	2b10      	cmp	r3, #16
 800f4b2:	d07e      	beq.n	800f5b2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	22ca      	movs	r2, #202	; 0xca
 800f4ba:	625a      	str	r2, [r3, #36]	; 0x24
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2253      	movs	r2, #83	; 0x53
 800f4c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fac6 	bl	800fa56 <RTC_EnterInitMode>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00a      	beq.n	800f4e6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	22ff      	movs	r2, #255	; 0xff
 800f4d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2204      	movs	r2, #4
 800f4dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	73fb      	strb	r3, [r7, #15]
 800f4e4:	e067      	b.n	800f5b6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	6812      	ldr	r2, [r2, #0]
 800f4f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4f8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	6899      	ldr	r1, [r3, #8]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	685a      	ldr	r2, [r3, #4]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	431a      	orrs	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	699b      	ldr	r3, [r3, #24]
 800f50e:	431a      	orrs	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	430a      	orrs	r2, r1
 800f516:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	68d2      	ldr	r2, [r2, #12]
 800f520:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6919      	ldr	r1, [r3, #16]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	041a      	lsls	r2, r3, #16
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	430a      	orrs	r2, r1
 800f534:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68da      	ldr	r2, [r3, #12]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f544:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f022 0203 	bic.w	r2, r2, #3
 800f554:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	69da      	ldr	r2, [r3, #28]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	695b      	ldr	r3, [r3, #20]
 800f564:	431a      	orrs	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	430a      	orrs	r2, r1
 800f56c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	f003 0320 	and.w	r3, r3, #32
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d113      	bne.n	800f5a4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fa44 	bl	800fa0a <HAL_RTC_WaitForSynchro>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00d      	beq.n	800f5a4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	22ff      	movs	r2, #255	; 0xff
 800f58e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2204      	movs	r2, #4
 800f594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e010      	b.n	800f5c6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	22ff      	movs	r2, #255	; 0xff
 800f5aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73fb      	strb	r3, [r7, #15]
 800f5b0:	e001      	b.n	800f5b6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f5b6:	7bfb      	ldrb	r3, [r7, #15]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d103      	bne.n	800f5c4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800f5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	40002800 	.word	0x40002800

0800f5d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f5d4:	b590      	push	{r4, r7, lr}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d101      	bne.n	800f5ee <HAL_RTC_SetTime+0x1a>
 800f5ea:	2302      	movs	r3, #2
 800f5ec:	e0b2      	b.n	800f754 <HAL_RTC_SetTime+0x180>
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2202      	movs	r2, #2
 800f5fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d126      	bne.n	800f652 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d102      	bne.n	800f618 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2200      	movs	r2, #0
 800f616:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fa44 	bl	800faaa <RTC_ByteToBcd2>
 800f622:	4603      	mov	r3, r0
 800f624:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	785b      	ldrb	r3, [r3, #1]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fa3d 	bl	800faaa <RTC_ByteToBcd2>
 800f630:	4603      	mov	r3, r0
 800f632:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f634:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	789b      	ldrb	r3, [r3, #2]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fa35 	bl	800faaa <RTC_ByteToBcd2>
 800f640:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f642:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	78db      	ldrb	r3, [r3, #3]
 800f64a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f64c:	4313      	orrs	r3, r2
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	e018      	b.n	800f684 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d102      	bne.n	800f666 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2200      	movs	r2, #0
 800f664:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	785b      	ldrb	r3, [r3, #1]
 800f670:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f672:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f678:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	78db      	ldrb	r3, [r3, #3]
 800f67e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f680:	4313      	orrs	r3, r2
 800f682:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	22ca      	movs	r2, #202	; 0xca
 800f68a:	625a      	str	r2, [r3, #36]	; 0x24
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2253      	movs	r2, #83	; 0x53
 800f692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 f9de 	bl	800fa56 <RTC_EnterInitMode>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00d      	beq.n	800f6bc <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	22ff      	movs	r2, #255	; 0xff
 800f6a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2204      	movs	r2, #4
 800f6ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e04b      	b.n	800f754 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f6c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f6ca:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	689a      	ldr	r2, [r3, #8]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f6da:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	6899      	ldr	r1, [r3, #8]
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	68da      	ldr	r2, [r3, #12]
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	691b      	ldr	r3, [r3, #16]
 800f6ea:	431a      	orrs	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	430a      	orrs	r2, r1
 800f6f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68da      	ldr	r2, [r3, #12]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f702:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	689b      	ldr	r3, [r3, #8]
 800f70a:	f003 0320 	and.w	r3, r3, #32
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d113      	bne.n	800f73a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f000 f979 	bl	800fa0a <HAL_RTC_WaitForSynchro>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00d      	beq.n	800f73a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	22ff      	movs	r2, #255	; 0xff
 800f724:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2204      	movs	r2, #4
 800f72a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e00c      	b.n	800f754 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	22ff      	movs	r2, #255	; 0xff
 800f740:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2201      	movs	r2, #1
 800f746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2200      	movs	r2, #0
 800f74e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800f752:	2300      	movs	r3, #0
  }
}
 800f754:	4618      	mov	r0, r3
 800f756:	371c      	adds	r7, #28
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd90      	pop	{r4, r7, pc}

0800f75c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f78a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f78e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	0c1b      	lsrs	r3, r3, #16
 800f794:	b2db      	uxtb	r3, r3
 800f796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	0a1b      	lsrs	r3, r3, #8
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7b8:	b2da      	uxtb	r2, r3
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	0c1b      	lsrs	r3, r3, #16
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d11a      	bne.n	800f80a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 f986 	bl	800faea <RTC_Bcd2ToByte>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	785b      	ldrb	r3, [r3, #1]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f000 f97d 	bl	800faea <RTC_Bcd2ToByte>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	789b      	ldrb	r3, [r3, #2]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 f974 	bl	800faea <RTC_Bcd2ToByte>
 800f802:	4603      	mov	r3, r0
 800f804:	461a      	mov	r2, r3
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3718      	adds	r7, #24
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f814:	b590      	push	{r4, r7, lr}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f826:	2b01      	cmp	r3, #1
 800f828:	d101      	bne.n	800f82e <HAL_RTC_SetDate+0x1a>
 800f82a:	2302      	movs	r3, #2
 800f82c:	e09c      	b.n	800f968 <HAL_RTC_SetDate+0x154>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2201      	movs	r2, #1
 800f832:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2202      	movs	r2, #2
 800f83a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10e      	bne.n	800f862 <HAL_RTC_SetDate+0x4e>
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	785b      	ldrb	r3, [r3, #1]
 800f848:	f003 0310 	and.w	r3, r3, #16
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d008      	beq.n	800f862 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	785b      	ldrb	r3, [r3, #1]
 800f854:	f023 0310 	bic.w	r3, r3, #16
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	330a      	adds	r3, #10
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d11c      	bne.n	800f8a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	78db      	ldrb	r3, [r3, #3]
 800f86c:	4618      	mov	r0, r3
 800f86e:	f000 f91c 	bl	800faaa <RTC_ByteToBcd2>
 800f872:	4603      	mov	r3, r0
 800f874:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	785b      	ldrb	r3, [r3, #1]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f000 f915 	bl	800faaa <RTC_ByteToBcd2>
 800f880:	4603      	mov	r3, r0
 800f882:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f884:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	789b      	ldrb	r3, [r3, #2]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 f90d 	bl	800faaa <RTC_ByteToBcd2>
 800f890:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f892:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f89c:	4313      	orrs	r3, r2
 800f89e:	617b      	str	r3, [r7, #20]
 800f8a0:	e00e      	b.n	800f8c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	78db      	ldrb	r3, [r3, #3]
 800f8a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	785b      	ldrb	r3, [r3, #1]
 800f8ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f8ae:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800f8b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	22ca      	movs	r2, #202	; 0xca
 800f8c6:	625a      	str	r2, [r3, #36]	; 0x24
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2253      	movs	r2, #83	; 0x53
 800f8ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f000 f8c0 	bl	800fa56 <RTC_EnterInitMode>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00d      	beq.n	800f8f8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	22ff      	movs	r2, #255	; 0xff
 800f8e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2204      	movs	r2, #4
 800f8e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e037      	b.n	800f968 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f902:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f906:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68da      	ldr	r2, [r3, #12]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f916:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	f003 0320 	and.w	r3, r3, #32
 800f922:	2b00      	cmp	r3, #0
 800f924:	d113      	bne.n	800f94e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f000 f86f 	bl	800fa0a <HAL_RTC_WaitForSynchro>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00d      	beq.n	800f94e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	22ff      	movs	r2, #255	; 0xff
 800f938:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2204      	movs	r2, #4
 800f93e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2200      	movs	r2, #0
 800f946:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800f94a:	2301      	movs	r3, #1
 800f94c:	e00c      	b.n	800f968 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	22ff      	movs	r2, #255	; 0xff
 800f954:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2201      	movs	r2, #1
 800f95a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800f966:	2300      	movs	r3, #0
  }
}
 800f968:	4618      	mov	r0, r3
 800f96a:	371c      	adds	r7, #28
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd90      	pop	{r4, r7, pc}

0800f970 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f986:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f98a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	0c1b      	lsrs	r3, r3, #16
 800f990:	b2da      	uxtb	r2, r3
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	0a1b      	lsrs	r3, r3, #8
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	f003 031f 	and.w	r3, r3, #31
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	0b5b      	lsrs	r3, r3, #13
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	f003 0307 	and.w	r3, r3, #7
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d11a      	bne.n	800fa00 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	78db      	ldrb	r3, [r3, #3]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f000 f88b 	bl	800faea <RTC_Bcd2ToByte>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	785b      	ldrb	r3, [r3, #1]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f000 f882 	bl	800faea <RTC_Bcd2ToByte>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	789b      	ldrb	r3, [r3, #2]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f000 f879 	bl	800faea <RTC_Bcd2ToByte>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3718      	adds	r7, #24
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b084      	sub	sp, #16
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	68da      	ldr	r2, [r3, #12]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fa20:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800fa22:	f7fd f831 	bl	800ca88 <HAL_GetTick>
 800fa26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fa28:	e009      	b.n	800fa3e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fa2a:	f7fd f82d 	bl	800ca88 <HAL_GetTick>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	1ad3      	subs	r3, r2, r3
 800fa34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa38:	d901      	bls.n	800fa3e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e007      	b.n	800fa4e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	f003 0320 	and.w	r3, r3, #32
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d0ee      	beq.n	800fa2a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3710      	adds	r7, #16
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b084      	sub	sp, #16
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d119      	bne.n	800faa0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f04f 32ff 	mov.w	r2, #4294967295
 800fa74:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800fa76:	f7fd f807 	bl	800ca88 <HAL_GetTick>
 800fa7a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fa7c:	e009      	b.n	800fa92 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800fa7e:	f7fd f803 	bl	800ca88 <HAL_GetTick>
 800fa82:	4602      	mov	r2, r0
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa8c:	d901      	bls.n	800fa92 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800fa8e:	2303      	movs	r3, #3
 800fa90:	e007      	b.n	800faa2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d0ee      	beq.n	800fa7e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800faaa:	b480      	push	{r7}
 800faac:	b085      	sub	sp, #20
 800faae:	af00      	add	r7, sp, #0
 800fab0:	4603      	mov	r3, r0
 800fab2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800fab4:	2300      	movs	r3, #0
 800fab6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800fab8:	79fb      	ldrb	r3, [r7, #7]
 800faba:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800fabc:	e005      	b.n	800faca <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	3301      	adds	r3, #1
 800fac2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800fac4:	7afb      	ldrb	r3, [r7, #11]
 800fac6:	3b0a      	subs	r3, #10
 800fac8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800faca:	7afb      	ldrb	r3, [r7, #11]
 800facc:	2b09      	cmp	r3, #9
 800face:	d8f6      	bhi.n	800fabe <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	011b      	lsls	r3, r3, #4
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	7afb      	ldrb	r3, [r7, #11]
 800fada:	4313      	orrs	r3, r2
 800fadc:	b2db      	uxtb	r3, r3
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800faea:	b480      	push	{r7}
 800faec:	b085      	sub	sp, #20
 800faee:	af00      	add	r7, sp, #0
 800faf0:	4603      	mov	r3, r0
 800faf2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	091b      	lsrs	r3, r3, #4
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	461a      	mov	r2, r3
 800fafc:	4613      	mov	r3, r2
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	4413      	add	r3, r2
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	b2da      	uxtb	r2, r3
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	f003 030f 	and.w	r3, r3, #15
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	4413      	add	r3, r2
 800fb14:	b2db      	uxtb	r3, r3
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3714      	adds	r7, #20
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800fb22:	b480      	push	{r7}
 800fb24:	b087      	sub	sp, #28
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	60f8      	str	r0, [r7, #12]
 800fb2a:	60b9      	str	r1, [r7, #8]
 800fb2c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3350      	adds	r3, #80	; 0x50
 800fb34:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	601a      	str	r2, [r3, #0]
}
 800fb46:	bf00      	nop
 800fb48:	371c      	adds	r7, #28
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b084      	sub	sp, #16
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e095      	b.n	800fc90 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d108      	bne.n	800fb7e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb74:	d009      	beq.n	800fb8a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	61da      	str	r2, [r3, #28]
 800fb7c:	e005      	b.n	800fb8a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d106      	bne.n	800fbaa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7fa fcf5 	bl	800a594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2202      	movs	r2, #2
 800fbae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbc0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fbca:	d902      	bls.n	800fbd2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	e002      	b.n	800fbd8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fbd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800fbe0:	d007      	beq.n	800fbf2 <HAL_SPI_Init+0xa0>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fbea:	d002      	beq.n	800fbf2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800fc02:	431a      	orrs	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	f003 0302 	and.w	r3, r3, #2
 800fc0c:	431a      	orrs	r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	695b      	ldr	r3, [r3, #20]
 800fc12:	f003 0301 	and.w	r3, r3, #1
 800fc16:	431a      	orrs	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	699b      	ldr	r3, [r3, #24]
 800fc1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc20:	431a      	orrs	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	69db      	ldr	r3, [r3, #28]
 800fc26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc2a:	431a      	orrs	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a1b      	ldr	r3, [r3, #32]
 800fc30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc34:	ea42 0103 	orr.w	r1, r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	430a      	orrs	r2, r1
 800fc46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	699b      	ldr	r3, [r3, #24]
 800fc4c:	0c1b      	lsrs	r3, r3, #16
 800fc4e:	f003 0204 	and.w	r2, r3, #4
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc56:	f003 0310 	and.w	r3, r3, #16
 800fc5a:	431a      	orrs	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc60:	f003 0308 	and.w	r3, r3, #8
 800fc64:	431a      	orrs	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fc6e:	ea42 0103 	orr.w	r1, r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	430a      	orrs	r2, r1
 800fc7e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2200      	movs	r2, #0
 800fc84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b08a      	sub	sp, #40	; 0x28
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
 800fca4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fca6:	2301      	movs	r3, #1
 800fca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d101      	bne.n	800fcbe <HAL_SPI_TransmitReceive+0x26>
 800fcba:	2302      	movs	r3, #2
 800fcbc:	e1fb      	b.n	80100b6 <HAL_SPI_TransmitReceive+0x41e>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcc6:	f7fc fedf 	bl	800ca88 <HAL_GetTick>
 800fcca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fcd2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800fcda:	887b      	ldrh	r3, [r7, #2]
 800fcdc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800fcde:	887b      	ldrh	r3, [r7, #2]
 800fce0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fce2:	7efb      	ldrb	r3, [r7, #27]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d00e      	beq.n	800fd06 <HAL_SPI_TransmitReceive+0x6e>
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fcee:	d106      	bne.n	800fcfe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d102      	bne.n	800fcfe <HAL_SPI_TransmitReceive+0x66>
 800fcf8:	7efb      	ldrb	r3, [r7, #27]
 800fcfa:	2b04      	cmp	r3, #4
 800fcfc:	d003      	beq.n	800fd06 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800fcfe:	2302      	movs	r3, #2
 800fd00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800fd04:	e1cd      	b.n	80100a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d005      	beq.n	800fd18 <HAL_SPI_TransmitReceive+0x80>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <HAL_SPI_TransmitReceive+0x80>
 800fd12:	887b      	ldrh	r3, [r7, #2]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d103      	bne.n	800fd20 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800fd1e:	e1c0      	b.n	80100a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	d003      	beq.n	800fd34 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2205      	movs	r2, #5
 800fd30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	887a      	ldrh	r2, [r7, #2]
 800fd44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	887a      	ldrh	r2, [r7, #2]
 800fd4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	887a      	ldrh	r2, [r7, #2]
 800fd5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	887a      	ldrh	r2, [r7, #2]
 800fd60:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2200      	movs	r2, #0
 800fd66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fd76:	d802      	bhi.n	800fd7e <HAL_SPI_TransmitReceive+0xe6>
 800fd78:	8a3b      	ldrh	r3, [r7, #16]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d908      	bls.n	800fd90 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fd8c:	605a      	str	r2, [r3, #4]
 800fd8e:	e007      	b.n	800fda0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdaa:	2b40      	cmp	r3, #64	; 0x40
 800fdac:	d007      	beq.n	800fdbe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fdbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fdc6:	d97c      	bls.n	800fec2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d002      	beq.n	800fdd6 <HAL_SPI_TransmitReceive+0x13e>
 800fdd0:	8a7b      	ldrh	r3, [r7, #18]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d169      	bne.n	800feaa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdda:	881a      	ldrh	r2, [r3, #0]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fde6:	1c9a      	adds	r2, r3, #2
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fdfa:	e056      	b.n	800feaa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	f003 0302 	and.w	r3, r3, #2
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	d11b      	bne.n	800fe42 <HAL_SPI_TransmitReceive+0x1aa>
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d016      	beq.n	800fe42 <HAL_SPI_TransmitReceive+0x1aa>
 800fe14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d113      	bne.n	800fe42 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe1e:	881a      	ldrh	r2, [r3, #0]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2a:	1c9a      	adds	r2, r3, #2
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	3b01      	subs	r3, #1
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	f003 0301 	and.w	r3, r3, #1
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d11c      	bne.n	800fe8a <HAL_SPI_TransmitReceive+0x1f2>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d016      	beq.n	800fe8a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68da      	ldr	r2, [r3, #12]
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe66:	b292      	uxth	r2, r2
 800fe68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe6e:	1c9a      	adds	r2, r3, #2
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	3b01      	subs	r3, #1
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fe86:	2301      	movs	r3, #1
 800fe88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fe8a:	f7fc fdfd 	bl	800ca88 <HAL_GetTick>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d807      	bhi.n	800feaa <HAL_SPI_TransmitReceive+0x212>
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea0:	d003      	beq.n	800feaa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800fea2:	2303      	movs	r3, #3
 800fea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800fea8:	e0fb      	b.n	80100a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800feae:	b29b      	uxth	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d1a3      	bne.n	800fdfc <HAL_SPI_TransmitReceive+0x164>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800feba:	b29b      	uxth	r3, r3
 800febc:	2b00      	cmp	r3, #0
 800febe:	d19d      	bne.n	800fdfc <HAL_SPI_TransmitReceive+0x164>
 800fec0:	e0df      	b.n	8010082 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d003      	beq.n	800fed2 <HAL_SPI_TransmitReceive+0x23a>
 800feca:	8a7b      	ldrh	r3, [r7, #18]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	f040 80cb 	bne.w	8010068 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d912      	bls.n	800ff02 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee0:	881a      	ldrh	r2, [r3, #0]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feec:	1c9a      	adds	r2, r3, #2
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	3b02      	subs	r3, #2
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ff00:	e0b2      	b.n	8010068 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	330c      	adds	r3, #12
 800ff0c:	7812      	ldrb	r2, [r2, #0]
 800ff0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff14:	1c5a      	adds	r2, r3, #1
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	3b01      	subs	r3, #1
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff28:	e09e      	b.n	8010068 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	f003 0302 	and.w	r3, r3, #2
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d134      	bne.n	800ffa2 <HAL_SPI_TransmitReceive+0x30a>
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d02f      	beq.n	800ffa2 <HAL_SPI_TransmitReceive+0x30a>
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d12c      	bne.n	800ffa2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d912      	bls.n	800ff78 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff56:	881a      	ldrh	r2, [r3, #0]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff62:	1c9a      	adds	r2, r3, #2
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	3b02      	subs	r3, #2
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ff76:	e012      	b.n	800ff9e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	330c      	adds	r3, #12
 800ff82:	7812      	ldrb	r2, [r2, #0]
 800ff84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	3b01      	subs	r3, #1
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	f003 0301 	and.w	r3, r3, #1
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d148      	bne.n	8010042 <HAL_SPI_TransmitReceive+0x3aa>
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d042      	beq.n	8010042 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d923      	bls.n	8010010 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	68da      	ldr	r2, [r3, #12]
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd2:	b292      	uxth	r2, r2
 800ffd4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffda:	1c9a      	adds	r2, r3, #2
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	3b02      	subs	r3, #2
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d81f      	bhi.n	801003e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801000c:	605a      	str	r2, [r3, #4]
 801000e:	e016      	b.n	801003e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f103 020c 	add.w	r2, r3, #12
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801001c:	7812      	ldrb	r2, [r2, #0]
 801001e:	b2d2      	uxtb	r2, r2
 8010020:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010026:	1c5a      	adds	r2, r3, #1
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010032:	b29b      	uxth	r3, r3
 8010034:	3b01      	subs	r3, #1
 8010036:	b29a      	uxth	r2, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801003e:	2301      	movs	r3, #1
 8010040:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010042:	f7fc fd21 	bl	800ca88 <HAL_GetTick>
 8010046:	4602      	mov	r2, r0
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801004e:	429a      	cmp	r2, r3
 8010050:	d803      	bhi.n	801005a <HAL_SPI_TransmitReceive+0x3c2>
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010058:	d102      	bne.n	8010060 <HAL_SPI_TransmitReceive+0x3c8>
 801005a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005c:	2b00      	cmp	r3, #0
 801005e:	d103      	bne.n	8010068 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8010060:	2303      	movs	r3, #3
 8010062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010066:	e01c      	b.n	80100a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801006c:	b29b      	uxth	r3, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	f47f af5b 	bne.w	800ff2a <HAL_SPI_TransmitReceive+0x292>
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801007a:	b29b      	uxth	r3, r3
 801007c:	2b00      	cmp	r3, #0
 801007e:	f47f af54 	bne.w	800ff2a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010082:	69fa      	ldr	r2, [r7, #28]
 8010084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f000 f938 	bl	80102fc <SPI_EndRxTxTransaction>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d006      	beq.n	80100a0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8010092:	2301      	movs	r3, #1
 8010094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2220      	movs	r2, #32
 801009c:	661a      	str	r2, [r3, #96]	; 0x60
 801009e:	e000      	b.n	80100a2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80100a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2201      	movs	r2, #1
 80100a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2200      	movs	r2, #0
 80100ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80100b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3728      	adds	r7, #40	; 0x28
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
	...

080100c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b088      	sub	sp, #32
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	603b      	str	r3, [r7, #0]
 80100cc:	4613      	mov	r3, r2
 80100ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80100d0:	f7fc fcda 	bl	800ca88 <HAL_GetTick>
 80100d4:	4602      	mov	r2, r0
 80100d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d8:	1a9b      	subs	r3, r3, r2
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	4413      	add	r3, r2
 80100de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80100e0:	f7fc fcd2 	bl	800ca88 <HAL_GetTick>
 80100e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80100e6:	4b39      	ldr	r3, [pc, #228]	; (80101cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	015b      	lsls	r3, r3, #5
 80100ec:	0d1b      	lsrs	r3, r3, #20
 80100ee:	69fa      	ldr	r2, [r7, #28]
 80100f0:	fb02 f303 	mul.w	r3, r2, r3
 80100f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80100f6:	e054      	b.n	80101a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fe:	d050      	beq.n	80101a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010100:	f7fc fcc2 	bl	800ca88 <HAL_GetTick>
 8010104:	4602      	mov	r2, r0
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	69fa      	ldr	r2, [r7, #28]
 801010c:	429a      	cmp	r2, r3
 801010e:	d902      	bls.n	8010116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d13d      	bne.n	8010192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801012e:	d111      	bne.n	8010154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010138:	d004      	beq.n	8010144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010142:	d107      	bne.n	8010154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801015c:	d10f      	bne.n	801017e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801017c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2200      	movs	r2, #0
 801018a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801018e:	2303      	movs	r3, #3
 8010190:	e017      	b.n	80101c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d101      	bne.n	801019c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010198:	2300      	movs	r3, #0
 801019a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	3b01      	subs	r3, #1
 80101a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689a      	ldr	r2, [r3, #8]
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	4013      	ands	r3, r2
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	bf0c      	ite	eq
 80101b2:	2301      	moveq	r3, #1
 80101b4:	2300      	movne	r3, #0
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	461a      	mov	r2, r3
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d19b      	bne.n	80100f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80101c0:	2300      	movs	r3, #0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3720      	adds	r7, #32
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20000014 	.word	0x20000014

080101d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08a      	sub	sp, #40	; 0x28
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
 80101dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80101e2:	f7fc fc51 	bl	800ca88 <HAL_GetTick>
 80101e6:	4602      	mov	r2, r0
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ea:	1a9b      	subs	r3, r3, r2
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	4413      	add	r3, r2
 80101f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80101f2:	f7fc fc49 	bl	800ca88 <HAL_GetTick>
 80101f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	330c      	adds	r3, #12
 80101fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010200:	4b3d      	ldr	r3, [pc, #244]	; (80102f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	4613      	mov	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4413      	add	r3, r2
 801020a:	00da      	lsls	r2, r3, #3
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	0d1b      	lsrs	r3, r3, #20
 8010210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010212:	fb02 f303 	mul.w	r3, r2, r3
 8010216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010218:	e060      	b.n	80102dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010220:	d107      	bne.n	8010232 <SPI_WaitFifoStateUntilTimeout+0x62>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d104      	bne.n	8010232 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b2db      	uxtb	r3, r3
 801022e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010230:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010238:	d050      	beq.n	80102dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801023a:	f7fc fc25 	bl	800ca88 <HAL_GetTick>
 801023e:	4602      	mov	r2, r0
 8010240:	6a3b      	ldr	r3, [r7, #32]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010246:	429a      	cmp	r2, r3
 8010248:	d902      	bls.n	8010250 <SPI_WaitFifoStateUntilTimeout+0x80>
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	2b00      	cmp	r3, #0
 801024e:	d13d      	bne.n	80102cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	685a      	ldr	r2, [r3, #4]
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801025e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010268:	d111      	bne.n	801028e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010272:	d004      	beq.n	801027e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801027c:	d107      	bne.n	801028e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801028c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010296:	d10f      	bne.n	80102b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80102a6:	601a      	str	r2, [r3, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80102b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2201      	movs	r2, #1
 80102bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80102c8:	2303      	movs	r3, #3
 80102ca:	e010      	b.n	80102ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d101      	bne.n	80102d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80102d2:	2300      	movs	r3, #0
 80102d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	3b01      	subs	r3, #1
 80102da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	689a      	ldr	r2, [r3, #8]
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	4013      	ands	r3, r2
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d196      	bne.n	801021a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80102ec:	2300      	movs	r3, #0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3728      	adds	r7, #40	; 0x28
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	20000014 	.word	0x20000014

080102fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af02      	add	r7, sp, #8
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	2200      	movs	r2, #0
 8010310:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f7ff ff5b 	bl	80101d0 <SPI_WaitFifoStateUntilTimeout>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d007      	beq.n	8010330 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010324:	f043 0220 	orr.w	r2, r3, #32
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801032c:	2303      	movs	r3, #3
 801032e:	e027      	b.n	8010380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2200      	movs	r2, #0
 8010338:	2180      	movs	r1, #128	; 0x80
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f7ff fec0 	bl	80100c0 <SPI_WaitFlagStateUntilTimeout>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d007      	beq.n	8010356 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801034a:	f043 0220 	orr.w	r2, r3, #32
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010352:	2303      	movs	r3, #3
 8010354:	e014      	b.n	8010380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	9300      	str	r3, [sp, #0]
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	2200      	movs	r2, #0
 801035e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff ff34 	bl	80101d0 <SPI_WaitFifoStateUntilTimeout>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d007      	beq.n	801037e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010372:	f043 0220 	orr.w	r2, r3, #32
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801037a:	2303      	movs	r3, #3
 801037c:	e000      	b.n	8010380 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d101      	bne.n	801039a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010396:	2301      	movs	r3, #1
 8010398:	e054      	b.n	8010444 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d111      	bne.n	80103ca <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 ff68 	bl	8011284 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d102      	bne.n	80103c2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a23      	ldr	r2, [pc, #140]	; (801044c <HAL_TIM_Base_Init+0xc4>)
 80103c0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2202      	movs	r2, #2
 80103ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	3304      	adds	r3, #4
 80103da:	4619      	mov	r1, r3
 80103dc:	4610      	mov	r0, r2
 80103de:	f000 fbd3 	bl	8010b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2201      	movs	r2, #1
 8010406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2201      	movs	r2, #1
 801040e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2201      	movs	r2, #1
 8010416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2201      	movs	r2, #1
 801041e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2201      	movs	r2, #1
 8010426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2201      	movs	r2, #1
 8010436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010442:	2300      	movs	r3, #0
}
 8010444:	4618      	mov	r0, r3
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	0800a681 	.word	0x0800a681

08010450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010450:	b480      	push	{r7}
 8010452:	b085      	sub	sp, #20
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801045e:	b2db      	uxtb	r3, r3
 8010460:	2b01      	cmp	r3, #1
 8010462:	d001      	beq.n	8010468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e036      	b.n	80104d6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2202      	movs	r2, #2
 801046c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	68da      	ldr	r2, [r3, #12]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f042 0201 	orr.w	r2, r2, #1
 801047e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a17      	ldr	r2, [pc, #92]	; (80104e4 <HAL_TIM_Base_Start_IT+0x94>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d004      	beq.n	8010494 <HAL_TIM_Base_Start_IT+0x44>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010492:	d115      	bne.n	80104c0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	689a      	ldr	r2, [r3, #8]
 801049a:	4b13      	ldr	r3, [pc, #76]	; (80104e8 <HAL_TIM_Base_Start_IT+0x98>)
 801049c:	4013      	ands	r3, r2
 801049e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b06      	cmp	r3, #6
 80104a4:	d015      	beq.n	80104d2 <HAL_TIM_Base_Start_IT+0x82>
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104ac:	d011      	beq.n	80104d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f042 0201 	orr.w	r2, r2, #1
 80104bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104be:	e008      	b.n	80104d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f042 0201 	orr.w	r2, r2, #1
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	e000      	b.n	80104d4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3714      	adds	r7, #20
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop
 80104e4:	40012c00 	.word	0x40012c00
 80104e8:	00010007 	.word	0x00010007

080104ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80104fa:	2301      	movs	r3, #1
 80104fc:	e054      	b.n	80105a8 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d111      	bne.n	801052e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2200      	movs	r2, #0
 801050e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 feb6 	bl	8011284 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d102      	bne.n	8010526 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4a23      	ldr	r2, [pc, #140]	; (80105b0 <HAL_TIM_OC_Init+0xc4>)
 8010524:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2202      	movs	r2, #2
 8010532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	3304      	adds	r3, #4
 801053e:	4619      	mov	r1, r3
 8010540:	4610      	mov	r0, r2
 8010542:	f000 fb21 	bl	8010b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2201      	movs	r2, #1
 801054a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2201      	movs	r2, #1
 801056a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2201      	movs	r2, #1
 8010572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2201      	movs	r2, #1
 801057a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2201      	movs	r2, #1
 8010582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2201      	movs	r2, #1
 801058a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2201      	movs	r2, #1
 8010592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2201      	movs	r2, #1
 80105a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	080105b5 	.word	0x080105b5

080105b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80105bc:	bf00      	nop
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	f003 0302 	and.w	r3, r3, #2
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d128      	bne.n	8010630 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	f003 0302 	and.w	r3, r3, #2
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	d121      	bne.n	8010630 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f06f 0202 	mvn.w	r2, #2
 80105f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2201      	movs	r2, #1
 80105fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	699b      	ldr	r3, [r3, #24]
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	2b00      	cmp	r3, #0
 8010608:	d005      	beq.n	8010616 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	4798      	blx	r3
 8010614:	e009      	b.n	801062a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	f003 0304 	and.w	r3, r3, #4
 801063a:	2b04      	cmp	r3, #4
 801063c:	d128      	bne.n	8010690 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	f003 0304 	and.w	r3, r3, #4
 8010648:	2b04      	cmp	r3, #4
 801064a:	d121      	bne.n	8010690 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f06f 0204 	mvn.w	r2, #4
 8010654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2202      	movs	r2, #2
 801065a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	699b      	ldr	r3, [r3, #24]
 8010662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010666:	2b00      	cmp	r3, #0
 8010668:	d005      	beq.n	8010676 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	4798      	blx	r3
 8010674:	e009      	b.n	801068a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	f003 0308 	and.w	r3, r3, #8
 801069a:	2b08      	cmp	r3, #8
 801069c:	d128      	bne.n	80106f0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	f003 0308 	and.w	r3, r3, #8
 80106a8:	2b08      	cmp	r3, #8
 80106aa:	d121      	bne.n	80106f0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f06f 0208 	mvn.w	r2, #8
 80106b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2204      	movs	r2, #4
 80106ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	69db      	ldr	r3, [r3, #28]
 80106c2:	f003 0303 	and.w	r3, r3, #3
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d005      	beq.n	80106d6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	4798      	blx	r3
 80106d4:	e009      	b.n	80106ea <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	f003 0310 	and.w	r3, r3, #16
 80106fa:	2b10      	cmp	r3, #16
 80106fc:	d128      	bne.n	8010750 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	f003 0310 	and.w	r3, r3, #16
 8010708:	2b10      	cmp	r3, #16
 801070a:	d121      	bne.n	8010750 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f06f 0210 	mvn.w	r2, #16
 8010714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2208      	movs	r2, #8
 801071a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	69db      	ldr	r3, [r3, #28]
 8010722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010726:	2b00      	cmp	r3, #0
 8010728:	d005      	beq.n	8010736 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	4798      	blx	r3
 8010734:	e009      	b.n	801074a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	f003 0301 	and.w	r3, r3, #1
 801075a:	2b01      	cmp	r3, #1
 801075c:	d110      	bne.n	8010780 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b01      	cmp	r3, #1
 801076a:	d109      	bne.n	8010780 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f06f 0201 	mvn.w	r2, #1
 8010774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	691b      	ldr	r3, [r3, #16]
 8010786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078a:	2b80      	cmp	r3, #128	; 0x80
 801078c:	d110      	bne.n	80107b0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010798:	2b80      	cmp	r3, #128	; 0x80
 801079a:	d109      	bne.n	80107b0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80107a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107be:	d110      	bne.n	80107e2 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107ca:	2b80      	cmp	r3, #128	; 0x80
 80107cc:	d109      	bne.n	80107e2 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80107d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	691b      	ldr	r3, [r3, #16]
 80107e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ec:	2b40      	cmp	r3, #64	; 0x40
 80107ee:	d110      	bne.n	8010812 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	68db      	ldr	r3, [r3, #12]
 80107f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107fa:	2b40      	cmp	r3, #64	; 0x40
 80107fc:	d109      	bne.n	8010812 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	f003 0320 	and.w	r3, r3, #32
 801081c:	2b20      	cmp	r3, #32
 801081e:	d110      	bne.n	8010842 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	f003 0320 	and.w	r3, r3, #32
 801082a:	2b20      	cmp	r3, #32
 801082c:	d109      	bne.n	8010842 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f06f 0220 	mvn.w	r2, #32
 8010836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010842:	bf00      	nop
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
	...

0801084c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010858:	2300      	movs	r3, #0
 801085a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010862:	2b01      	cmp	r3, #1
 8010864:	d101      	bne.n	801086a <HAL_TIM_OC_ConfigChannel+0x1e>
 8010866:	2302      	movs	r3, #2
 8010868:	e066      	b.n	8010938 <HAL_TIM_OC_ConfigChannel+0xec>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2201      	movs	r2, #1
 801086e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b14      	cmp	r3, #20
 8010876:	d857      	bhi.n	8010928 <HAL_TIM_OC_ConfigChannel+0xdc>
 8010878:	a201      	add	r2, pc, #4	; (adr r2, 8010880 <HAL_TIM_OC_ConfigChannel+0x34>)
 801087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087e:	bf00      	nop
 8010880:	080108d5 	.word	0x080108d5
 8010884:	08010929 	.word	0x08010929
 8010888:	08010929 	.word	0x08010929
 801088c:	08010929 	.word	0x08010929
 8010890:	080108e3 	.word	0x080108e3
 8010894:	08010929 	.word	0x08010929
 8010898:	08010929 	.word	0x08010929
 801089c:	08010929 	.word	0x08010929
 80108a0:	080108f1 	.word	0x080108f1
 80108a4:	08010929 	.word	0x08010929
 80108a8:	08010929 	.word	0x08010929
 80108ac:	08010929 	.word	0x08010929
 80108b0:	080108ff 	.word	0x080108ff
 80108b4:	08010929 	.word	0x08010929
 80108b8:	08010929 	.word	0x08010929
 80108bc:	08010929 	.word	0x08010929
 80108c0:	0801090d 	.word	0x0801090d
 80108c4:	08010929 	.word	0x08010929
 80108c8:	08010929 	.word	0x08010929
 80108cc:	08010929 	.word	0x08010929
 80108d0:	0801091b 	.word	0x0801091b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	68b9      	ldr	r1, [r7, #8]
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 f9b8 	bl	8010c50 <TIM_OC1_SetConfig>
      break;
 80108e0:	e025      	b.n	801092e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68b9      	ldr	r1, [r7, #8]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 fa2d 	bl	8010d48 <TIM_OC2_SetConfig>
      break;
 80108ee:	e01e      	b.n	801092e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68b9      	ldr	r1, [r7, #8]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f000 faa0 	bl	8010e3c <TIM_OC3_SetConfig>
      break;
 80108fc:	e017      	b.n	801092e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	68b9      	ldr	r1, [r7, #8]
 8010904:	4618      	mov	r0, r3
 8010906:	f000 fb11 	bl	8010f2c <TIM_OC4_SetConfig>
      break;
 801090a:	e010      	b.n	801092e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	68b9      	ldr	r1, [r7, #8]
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fb68 	bl	8010fe8 <TIM_OC5_SetConfig>
      break;
 8010918:	e009      	b.n	801092e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68b9      	ldr	r1, [r7, #8]
 8010920:	4618      	mov	r0, r3
 8010922:	f000 fbb9 	bl	8011098 <TIM_OC6_SetConfig>
      break;
 8010926:	e002      	b.n	801092e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8010928:	2301      	movs	r3, #1
 801092a:	75fb      	strb	r3, [r7, #23]
      break;
 801092c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2200      	movs	r2, #0
 8010932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010936:	7dfb      	ldrb	r3, [r7, #23]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010954:	2b01      	cmp	r3, #1
 8010956:	d101      	bne.n	801095c <HAL_TIM_ConfigClockSource+0x1c>
 8010958:	2302      	movs	r3, #2
 801095a:	e0b6      	b.n	8010aca <HAL_TIM_ConfigClockSource+0x18a>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2201      	movs	r2, #1
 8010960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2202      	movs	r2, #2
 8010968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801097a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801097e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010998:	d03e      	beq.n	8010a18 <HAL_TIM_ConfigClockSource+0xd8>
 801099a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801099e:	f200 8087 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109a6:	f000 8086 	beq.w	8010ab6 <HAL_TIM_ConfigClockSource+0x176>
 80109aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109ae:	d87f      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109b0:	2b70      	cmp	r3, #112	; 0x70
 80109b2:	d01a      	beq.n	80109ea <HAL_TIM_ConfigClockSource+0xaa>
 80109b4:	2b70      	cmp	r3, #112	; 0x70
 80109b6:	d87b      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109b8:	2b60      	cmp	r3, #96	; 0x60
 80109ba:	d050      	beq.n	8010a5e <HAL_TIM_ConfigClockSource+0x11e>
 80109bc:	2b60      	cmp	r3, #96	; 0x60
 80109be:	d877      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109c0:	2b50      	cmp	r3, #80	; 0x50
 80109c2:	d03c      	beq.n	8010a3e <HAL_TIM_ConfigClockSource+0xfe>
 80109c4:	2b50      	cmp	r3, #80	; 0x50
 80109c6:	d873      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109c8:	2b40      	cmp	r3, #64	; 0x40
 80109ca:	d058      	beq.n	8010a7e <HAL_TIM_ConfigClockSource+0x13e>
 80109cc:	2b40      	cmp	r3, #64	; 0x40
 80109ce:	d86f      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109d0:	2b30      	cmp	r3, #48	; 0x30
 80109d2:	d064      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x15e>
 80109d4:	2b30      	cmp	r3, #48	; 0x30
 80109d6:	d86b      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109d8:	2b20      	cmp	r3, #32
 80109da:	d060      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x15e>
 80109dc:	2b20      	cmp	r3, #32
 80109de:	d867      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d05c      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x15e>
 80109e4:	2b10      	cmp	r3, #16
 80109e6:	d05a      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x15e>
 80109e8:	e062      	b.n	8010ab0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6818      	ldr	r0, [r3, #0]
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	6899      	ldr	r1, [r3, #8]
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	685a      	ldr	r2, [r3, #4]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	f000 fc23 	bl	8011244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	689b      	ldr	r3, [r3, #8]
 8010a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	609a      	str	r2, [r3, #8]
      break;
 8010a16:	e04f      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6818      	ldr	r0, [r3, #0]
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	6899      	ldr	r1, [r3, #8]
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	685a      	ldr	r2, [r3, #4]
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	f000 fc0c 	bl	8011244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	689a      	ldr	r2, [r3, #8]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010a3a:	609a      	str	r2, [r3, #8]
      break;
 8010a3c:	e03c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	6859      	ldr	r1, [r3, #4]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	f000 fb7e 	bl	801114c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2150      	movs	r1, #80	; 0x50
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 fbd7 	bl	801120a <TIM_ITRx_SetConfig>
      break;
 8010a5c:	e02c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6818      	ldr	r0, [r3, #0]
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	6859      	ldr	r1, [r3, #4]
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	68db      	ldr	r3, [r3, #12]
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	f000 fb9d 	bl	80111aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2160      	movs	r1, #96	; 0x60
 8010a76:	4618      	mov	r0, r3
 8010a78:	f000 fbc7 	bl	801120a <TIM_ITRx_SetConfig>
      break;
 8010a7c:	e01c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6818      	ldr	r0, [r3, #0]
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	6859      	ldr	r1, [r3, #4]
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	f000 fb5e 	bl	801114c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2140      	movs	r1, #64	; 0x40
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fbb7 	bl	801120a <TIM_ITRx_SetConfig>
      break;
 8010a9c:	e00c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	f000 fbae 	bl	801120a <TIM_ITRx_SetConfig>
      break;
 8010aae:	e003      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ab4:	e000      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ad2:	b480      	push	{r7}
 8010ad4:	b083      	sub	sp, #12
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8010ada:	bf00      	nop
 8010adc:	370c      	adds	r7, #12
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b083      	sub	sp, #12
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010aee:	bf00      	nop
 8010af0:	370c      	adds	r7, #12
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010afa:	b480      	push	{r7}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b02:	bf00      	nop
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr

08010b0e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010b0e:	b480      	push	{r7}
 8010b10:	b083      	sub	sp, #12
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8010b16:	bf00      	nop
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b083      	sub	sp, #12
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b2a:	bf00      	nop
 8010b2c:	370c      	adds	r7, #12
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr

08010b36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b083      	sub	sp, #12
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010b3e:	bf00      	nop
 8010b40:	370c      	adds	r7, #12
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr

08010b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010b4a:	b480      	push	{r7}
 8010b4c:	b083      	sub	sp, #12
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010b52:	bf00      	nop
 8010b54:	370c      	adds	r7, #12
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010b5e:	b480      	push	{r7}
 8010b60:	b083      	sub	sp, #12
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8010b66:	bf00      	nop
 8010b68:	370c      	adds	r7, #12
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010b72:	b480      	push	{r7}
 8010b74:	b083      	sub	sp, #12
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010b7a:	bf00      	nop
 8010b7c:	370c      	adds	r7, #12
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
	...

08010b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a2a      	ldr	r2, [pc, #168]	; (8010c44 <TIM_Base_SetConfig+0xbc>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d003      	beq.n	8010ba8 <TIM_Base_SetConfig+0x20>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ba6:	d108      	bne.n	8010bba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4a21      	ldr	r2, [pc, #132]	; (8010c44 <TIM_Base_SetConfig+0xbc>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d00b      	beq.n	8010bda <TIM_Base_SetConfig+0x52>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bc8:	d007      	beq.n	8010bda <TIM_Base_SetConfig+0x52>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4a1e      	ldr	r2, [pc, #120]	; (8010c48 <TIM_Base_SetConfig+0xc0>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d003      	beq.n	8010bda <TIM_Base_SetConfig+0x52>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4a1d      	ldr	r2, [pc, #116]	; (8010c4c <TIM_Base_SetConfig+0xc4>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d108      	bne.n	8010bec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	4313      	orrs	r3, r2
 8010bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	695b      	ldr	r3, [r3, #20]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	689a      	ldr	r2, [r3, #8]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4a0c      	ldr	r2, [pc, #48]	; (8010c44 <TIM_Base_SetConfig+0xbc>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d007      	beq.n	8010c28 <TIM_Base_SetConfig+0xa0>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4a0b      	ldr	r2, [pc, #44]	; (8010c48 <TIM_Base_SetConfig+0xc0>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d003      	beq.n	8010c28 <TIM_Base_SetConfig+0xa0>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4a0a      	ldr	r2, [pc, #40]	; (8010c4c <TIM_Base_SetConfig+0xc4>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d103      	bne.n	8010c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	691a      	ldr	r2, [r3, #16]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2201      	movs	r2, #1
 8010c34:	615a      	str	r2, [r3, #20]
}
 8010c36:	bf00      	nop
 8010c38:	3714      	adds	r7, #20
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	40012c00 	.word	0x40012c00
 8010c48:	40014400 	.word	0x40014400
 8010c4c:	40014800 	.word	0x40014800

08010c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b087      	sub	sp, #28
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6a1b      	ldr	r3, [r3, #32]
 8010c5e:	f023 0201 	bic.w	r2, r3, #1
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a1b      	ldr	r3, [r3, #32]
 8010c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f023 0303 	bic.w	r3, r3, #3
 8010c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	4313      	orrs	r3, r2
 8010c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f023 0302 	bic.w	r3, r3, #2
 8010c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	689b      	ldr	r3, [r3, #8]
 8010ca2:	697a      	ldr	r2, [r7, #20]
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a24      	ldr	r2, [pc, #144]	; (8010d3c <TIM_OC1_SetConfig+0xec>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d007      	beq.n	8010cc0 <TIM_OC1_SetConfig+0x70>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4a23      	ldr	r2, [pc, #140]	; (8010d40 <TIM_OC1_SetConfig+0xf0>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d003      	beq.n	8010cc0 <TIM_OC1_SetConfig+0x70>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4a22      	ldr	r2, [pc, #136]	; (8010d44 <TIM_OC1_SetConfig+0xf4>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d10c      	bne.n	8010cda <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	f023 0308 	bic.w	r3, r3, #8
 8010cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	697a      	ldr	r2, [r7, #20]
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	f023 0304 	bic.w	r3, r3, #4
 8010cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4a17      	ldr	r2, [pc, #92]	; (8010d3c <TIM_OC1_SetConfig+0xec>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d007      	beq.n	8010cf2 <TIM_OC1_SetConfig+0xa2>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4a17      	ldr	r2, [pc, #92]	; (8010d44 <TIM_OC1_SetConfig+0xf4>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d003      	beq.n	8010cf2 <TIM_OC1_SetConfig+0xa2>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a14      	ldr	r2, [pc, #80]	; (8010d40 <TIM_OC1_SetConfig+0xf0>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d111      	bne.n	8010d16 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	693a      	ldr	r2, [r7, #16]
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	699b      	ldr	r3, [r3, #24]
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	4313      	orrs	r3, r2
 8010d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	693a      	ldr	r2, [r7, #16]
 8010d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	685a      	ldr	r2, [r3, #4]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	697a      	ldr	r2, [r7, #20]
 8010d2e:	621a      	str	r2, [r3, #32]
}
 8010d30:	bf00      	nop
 8010d32:	371c      	adds	r7, #28
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	40012c00 	.word	0x40012c00
 8010d40:	40014800 	.word	0x40014800
 8010d44:	40014400 	.word	0x40014400

08010d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a1b      	ldr	r3, [r3, #32]
 8010d56:	f023 0210 	bic.w	r2, r3, #16
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	699b      	ldr	r3, [r3, #24]
 8010d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	021b      	lsls	r3, r3, #8
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	f023 0320 	bic.w	r3, r3, #32
 8010d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	689b      	ldr	r3, [r3, #8]
 8010d9c:	011b      	lsls	r3, r3, #4
 8010d9e:	697a      	ldr	r2, [r7, #20]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	4a22      	ldr	r2, [pc, #136]	; (8010e30 <TIM_OC2_SetConfig+0xe8>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d10d      	bne.n	8010dc8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	011b      	lsls	r3, r3, #4
 8010dba:	697a      	ldr	r2, [r7, #20]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4a19      	ldr	r2, [pc, #100]	; (8010e30 <TIM_OC2_SetConfig+0xe8>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d007      	beq.n	8010de0 <TIM_OC2_SetConfig+0x98>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4a18      	ldr	r2, [pc, #96]	; (8010e34 <TIM_OC2_SetConfig+0xec>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d003      	beq.n	8010de0 <TIM_OC2_SetConfig+0x98>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	4a17      	ldr	r2, [pc, #92]	; (8010e38 <TIM_OC2_SetConfig+0xf0>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d113      	bne.n	8010e08 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	695b      	ldr	r3, [r3, #20]
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	693a      	ldr	r2, [r7, #16]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	699b      	ldr	r3, [r3, #24]
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	693a      	ldr	r2, [r7, #16]
 8010e04:	4313      	orrs	r3, r2
 8010e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	693a      	ldr	r2, [r7, #16]
 8010e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	68fa      	ldr	r2, [r7, #12]
 8010e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	621a      	str	r2, [r3, #32]
}
 8010e22:	bf00      	nop
 8010e24:	371c      	adds	r7, #28
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	40012c00 	.word	0x40012c00
 8010e34:	40014400 	.word	0x40014400
 8010e38:	40014800 	.word	0x40014800

08010e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b087      	sub	sp, #28
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6a1b      	ldr	r3, [r3, #32]
 8010e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6a1b      	ldr	r3, [r3, #32]
 8010e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	69db      	ldr	r3, [r3, #28]
 8010e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f023 0303 	bic.w	r3, r3, #3
 8010e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	021b      	lsls	r3, r3, #8
 8010e90:	697a      	ldr	r2, [r7, #20]
 8010e92:	4313      	orrs	r3, r2
 8010e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4a21      	ldr	r2, [pc, #132]	; (8010f20 <TIM_OC3_SetConfig+0xe4>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d10d      	bne.n	8010eba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	021b      	lsls	r3, r3, #8
 8010eac:	697a      	ldr	r2, [r7, #20]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4a18      	ldr	r2, [pc, #96]	; (8010f20 <TIM_OC3_SetConfig+0xe4>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d007      	beq.n	8010ed2 <TIM_OC3_SetConfig+0x96>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4a17      	ldr	r2, [pc, #92]	; (8010f24 <TIM_OC3_SetConfig+0xe8>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d003      	beq.n	8010ed2 <TIM_OC3_SetConfig+0x96>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4a16      	ldr	r2, [pc, #88]	; (8010f28 <TIM_OC3_SetConfig+0xec>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d113      	bne.n	8010efa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	695b      	ldr	r3, [r3, #20]
 8010ee6:	011b      	lsls	r3, r3, #4
 8010ee8:	693a      	ldr	r2, [r7, #16]
 8010eea:	4313      	orrs	r3, r2
 8010eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	699b      	ldr	r3, [r3, #24]
 8010ef2:	011b      	lsls	r3, r3, #4
 8010ef4:	693a      	ldr	r2, [r7, #16]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	693a      	ldr	r2, [r7, #16]
 8010efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	685a      	ldr	r2, [r3, #4]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	621a      	str	r2, [r3, #32]
}
 8010f14:	bf00      	nop
 8010f16:	371c      	adds	r7, #28
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr
 8010f20:	40012c00 	.word	0x40012c00
 8010f24:	40014400 	.word	0x40014400
 8010f28:	40014800 	.word	0x40014800

08010f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b087      	sub	sp, #28
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a1b      	ldr	r3, [r3, #32]
 8010f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	69db      	ldr	r3, [r3, #28]
 8010f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	021b      	lsls	r3, r3, #8
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	4313      	orrs	r3, r2
 8010f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	689b      	ldr	r3, [r3, #8]
 8010f80:	031b      	lsls	r3, r3, #12
 8010f82:	693a      	ldr	r2, [r7, #16]
 8010f84:	4313      	orrs	r3, r2
 8010f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	4a14      	ldr	r2, [pc, #80]	; (8010fdc <TIM_OC4_SetConfig+0xb0>)
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d007      	beq.n	8010fa0 <TIM_OC4_SetConfig+0x74>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4a13      	ldr	r2, [pc, #76]	; (8010fe0 <TIM_OC4_SetConfig+0xb4>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d003      	beq.n	8010fa0 <TIM_OC4_SetConfig+0x74>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	4a12      	ldr	r2, [pc, #72]	; (8010fe4 <TIM_OC4_SetConfig+0xb8>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d109      	bne.n	8010fb4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	695b      	ldr	r3, [r3, #20]
 8010fac:	019b      	lsls	r3, r3, #6
 8010fae:	697a      	ldr	r2, [r7, #20]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	685a      	ldr	r2, [r3, #4]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	693a      	ldr	r2, [r7, #16]
 8010fcc:	621a      	str	r2, [r3, #32]
}
 8010fce:	bf00      	nop
 8010fd0:	371c      	adds	r7, #28
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	40012c00 	.word	0x40012c00
 8010fe0:	40014400 	.word	0x40014400
 8010fe4:	40014800 	.word	0x40014800

08010fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b087      	sub	sp, #28
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6a1b      	ldr	r3, [r3, #32]
 8010ff6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6a1b      	ldr	r3, [r3, #32]
 8011002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801100e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801101a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	4313      	orrs	r3, r2
 8011024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801102c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	689b      	ldr	r3, [r3, #8]
 8011032:	041b      	lsls	r3, r3, #16
 8011034:	693a      	ldr	r2, [r7, #16]
 8011036:	4313      	orrs	r3, r2
 8011038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4a13      	ldr	r2, [pc, #76]	; (801108c <TIM_OC5_SetConfig+0xa4>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d007      	beq.n	8011052 <TIM_OC5_SetConfig+0x6a>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4a12      	ldr	r2, [pc, #72]	; (8011090 <TIM_OC5_SetConfig+0xa8>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d003      	beq.n	8011052 <TIM_OC5_SetConfig+0x6a>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4a11      	ldr	r2, [pc, #68]	; (8011094 <TIM_OC5_SetConfig+0xac>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d109      	bne.n	8011066 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011058:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	695b      	ldr	r3, [r3, #20]
 801105e:	021b      	lsls	r3, r3, #8
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	4313      	orrs	r3, r2
 8011064:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	621a      	str	r2, [r3, #32]
}
 8011080:	bf00      	nop
 8011082:	371c      	adds	r7, #28
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr
 801108c:	40012c00 	.word	0x40012c00
 8011090:	40014400 	.word	0x40014400
 8011094:	40014800 	.word	0x40014800

08011098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80110c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	021b      	lsls	r3, r3, #8
 80110d2:	68fa      	ldr	r2, [r7, #12]
 80110d4:	4313      	orrs	r3, r2
 80110d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	689b      	ldr	r3, [r3, #8]
 80110e4:	051b      	lsls	r3, r3, #20
 80110e6:	693a      	ldr	r2, [r7, #16]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	4a14      	ldr	r2, [pc, #80]	; (8011140 <TIM_OC6_SetConfig+0xa8>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d007      	beq.n	8011104 <TIM_OC6_SetConfig+0x6c>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4a13      	ldr	r2, [pc, #76]	; (8011144 <TIM_OC6_SetConfig+0xac>)
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d003      	beq.n	8011104 <TIM_OC6_SetConfig+0x6c>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4a12      	ldr	r2, [pc, #72]	; (8011148 <TIM_OC6_SetConfig+0xb0>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d109      	bne.n	8011118 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801110a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	695b      	ldr	r3, [r3, #20]
 8011110:	029b      	lsls	r3, r3, #10
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	4313      	orrs	r3, r2
 8011116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	685a      	ldr	r2, [r3, #4]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	693a      	ldr	r2, [r7, #16]
 8011130:	621a      	str	r2, [r3, #32]
}
 8011132:	bf00      	nop
 8011134:	371c      	adds	r7, #28
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr
 801113e:	bf00      	nop
 8011140:	40012c00 	.word	0x40012c00
 8011144:	40014400 	.word	0x40014400
 8011148:	40014800 	.word	0x40014800

0801114c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801114c:	b480      	push	{r7}
 801114e:	b087      	sub	sp, #28
 8011150:	af00      	add	r7, sp, #0
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	6a1b      	ldr	r3, [r3, #32]
 801115c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	6a1b      	ldr	r3, [r3, #32]
 8011162:	f023 0201 	bic.w	r2, r3, #1
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	699b      	ldr	r3, [r3, #24]
 801116e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	693a      	ldr	r2, [r7, #16]
 801117e:	4313      	orrs	r3, r2
 8011180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	f023 030a 	bic.w	r3, r3, #10
 8011188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801118a:	697a      	ldr	r2, [r7, #20]
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	4313      	orrs	r3, r2
 8011190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	693a      	ldr	r2, [r7, #16]
 8011196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	697a      	ldr	r2, [r7, #20]
 801119c:	621a      	str	r2, [r3, #32]
}
 801119e:	bf00      	nop
 80111a0:	371c      	adds	r7, #28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr

080111aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80111aa:	b480      	push	{r7}
 80111ac:	b087      	sub	sp, #28
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	60f8      	str	r0, [r7, #12]
 80111b2:	60b9      	str	r1, [r7, #8]
 80111b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6a1b      	ldr	r3, [r3, #32]
 80111ba:	f023 0210 	bic.w	r2, r3, #16
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	699b      	ldr	r3, [r3, #24]
 80111c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6a1b      	ldr	r3, [r3, #32]
 80111cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80111d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	031b      	lsls	r3, r3, #12
 80111da:	697a      	ldr	r2, [r7, #20]
 80111dc:	4313      	orrs	r3, r2
 80111de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80111e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	011b      	lsls	r3, r3, #4
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	697a      	ldr	r2, [r7, #20]
 80111f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	693a      	ldr	r2, [r7, #16]
 80111fc:	621a      	str	r2, [r3, #32]
}
 80111fe:	bf00      	nop
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr

0801120a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801120a:	b480      	push	{r7}
 801120c:	b085      	sub	sp, #20
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
 8011212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011226:	683a      	ldr	r2, [r7, #0]
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	4313      	orrs	r3, r2
 801122c:	f043 0307 	orr.w	r3, r3, #7
 8011230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	609a      	str	r2, [r3, #8]
}
 8011238:	bf00      	nop
 801123a:	3714      	adds	r7, #20
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011244:	b480      	push	{r7}
 8011246:	b087      	sub	sp, #28
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
 8011250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	689b      	ldr	r3, [r3, #8]
 8011256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801125e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	021a      	lsls	r2, r3, #8
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	431a      	orrs	r2, r3
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	4313      	orrs	r3, r2
 801126c:	697a      	ldr	r2, [r7, #20]
 801126e:	4313      	orrs	r3, r2
 8011270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	697a      	ldr	r2, [r7, #20]
 8011276:	609a      	str	r2, [r3, #8]
}
 8011278:	bf00      	nop
 801127a:	371c      	adds	r7, #28
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a1e      	ldr	r2, [pc, #120]	; (8011308 <TIM_ResetCallback+0x84>)
 8011290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a1d      	ldr	r2, [pc, #116]	; (801130c <TIM_ResetCallback+0x88>)
 8011298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a1c      	ldr	r2, [pc, #112]	; (8011310 <TIM_ResetCallback+0x8c>)
 80112a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4a1b      	ldr	r2, [pc, #108]	; (8011314 <TIM_ResetCallback+0x90>)
 80112a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4a1a      	ldr	r2, [pc, #104]	; (8011318 <TIM_ResetCallback+0x94>)
 80112b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4a19      	ldr	r2, [pc, #100]	; (801131c <TIM_ResetCallback+0x98>)
 80112b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4a18      	ldr	r2, [pc, #96]	; (8011320 <TIM_ResetCallback+0x9c>)
 80112c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4a17      	ldr	r2, [pc, #92]	; (8011324 <TIM_ResetCallback+0xa0>)
 80112c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4a16      	ldr	r2, [pc, #88]	; (8011328 <TIM_ResetCallback+0xa4>)
 80112d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4a15      	ldr	r2, [pc, #84]	; (801132c <TIM_ResetCallback+0xa8>)
 80112d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4a14      	ldr	r2, [pc, #80]	; (8011330 <TIM_ResetCallback+0xac>)
 80112e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4a13      	ldr	r2, [pc, #76]	; (8011334 <TIM_ResetCallback+0xb0>)
 80112e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4a12      	ldr	r2, [pc, #72]	; (8011338 <TIM_ResetCallback+0xb4>)
 80112f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	4a11      	ldr	r2, [pc, #68]	; (801133c <TIM_ResetCallback+0xb8>)
 80112f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80112fc:	bf00      	nop
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr
 8011308:	080058c9 	.word	0x080058c9
 801130c:	08010ad3 	.word	0x08010ad3
 8011310:	08010b4b 	.word	0x08010b4b
 8011314:	08010b5f 	.word	0x08010b5f
 8011318:	08010afb 	.word	0x08010afb
 801131c:	08010b0f 	.word	0x08010b0f
 8011320:	08010ae7 	.word	0x08010ae7
 8011324:	08010b23 	.word	0x08010b23
 8011328:	08010b37 	.word	0x08010b37
 801132c:	08010b73 	.word	0x08010b73
 8011330:	08011521 	.word	0x08011521
 8011334:	08011535 	.word	0x08011535
 8011338:	08011549 	.word	0x08011549
 801133c:	0801155d 	.word	0x0801155d

08011340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011350:	2b01      	cmp	r3, #1
 8011352:	d101      	bne.n	8011358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011354:	2302      	movs	r3, #2
 8011356:	e04a      	b.n	80113ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2202      	movs	r2, #2
 8011364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a1f      	ldr	r2, [pc, #124]	; (80113fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d108      	bne.n	8011394 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011388:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	4313      	orrs	r3, r2
 8011392:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801139a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	4a12      	ldr	r2, [pc, #72]	; (80113fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d004      	beq.n	80113c2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113c0:	d10c      	bne.n	80113dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	68ba      	ldr	r2, [r7, #8]
 80113d0:	4313      	orrs	r3, r2
 80113d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2201      	movs	r2, #1
 80113e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80113ec:	2300      	movs	r3, #0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3714      	adds	r7, #20
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	40012c00 	.word	0x40012c00

08011400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801140a:	2300      	movs	r3, #0
 801140c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011414:	2b01      	cmp	r3, #1
 8011416:	d101      	bne.n	801141c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011418:	2302      	movs	r3, #2
 801141a:	e078      	b.n	801150e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2201      	movs	r2, #1
 8011420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	4313      	orrs	r3, r2
 8011430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	4313      	orrs	r3, r2
 801143e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	4313      	orrs	r3, r2
 801144c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4313      	orrs	r3, r2
 801145a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	691b      	ldr	r3, [r3, #16]
 8011466:	4313      	orrs	r3, r2
 8011468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	695b      	ldr	r3, [r3, #20]
 8011474:	4313      	orrs	r3, r2
 8011476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011482:	4313      	orrs	r3, r2
 8011484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	699b      	ldr	r3, [r3, #24]
 8011490:	041b      	lsls	r3, r3, #16
 8011492:	4313      	orrs	r3, r2
 8011494:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4a20      	ldr	r2, [pc, #128]	; (801151c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d106      	bne.n	80114ae <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	69db      	ldr	r3, [r3, #28]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	4a1a      	ldr	r2, [pc, #104]	; (801151c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d121      	bne.n	80114fc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c2:	051b      	lsls	r3, r3, #20
 80114c4:	4313      	orrs	r3, r2
 80114c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	6a1b      	ldr	r3, [r3, #32]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e0:	4313      	orrs	r3, r2
 80114e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a0c      	ldr	r2, [pc, #48]	; (801151c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d106      	bne.n	80114fc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f8:	4313      	orrs	r3, r2
 80114fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3714      	adds	r7, #20
 8011512:	46bd      	mov	sp, r7
 8011514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	40012c00 	.word	0x40012c00

08011520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011528:	bf00      	nop
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 801153c:	bf00      	nop
 801153e:	370c      	adds	r7, #12
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011550:	bf00      	nop
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011564:	bf00      	nop
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <LL_RCC_GetUSARTClockSource>:
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8011578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801157c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	4013      	ands	r3, r2
}
 8011584:	4618      	mov	r0, r3
 8011586:	370c      	adds	r7, #12
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <LL_RCC_GetLPUARTClockSource>:
{
 8011590:	b480      	push	{r7}
 8011592:	b083      	sub	sp, #12
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8011598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801159c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	4013      	ands	r3, r2
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	370c      	adds	r7, #12
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr

080115b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	e042      	b.n	8011648 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d106      	bne.n	80115da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2200      	movs	r2, #0
 80115d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7f8 ff23 	bl	800a420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2224      	movs	r2, #36	; 0x24
 80115de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f022 0201 	bic.w	r2, r2, #1
 80115f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 fbfe 	bl	8011df4 <UART_SetConfig>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d101      	bne.n	8011602 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80115fe:	2301      	movs	r3, #1
 8011600:	e022      	b.n	8011648 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 fe1a 	bl	8012244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	685a      	ldr	r2, [r3, #4]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801161e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	689a      	ldr	r2, [r3, #8]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801162e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f042 0201 	orr.w	r2, r2, #1
 801163e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f000 fea1 	bl	8012388 <UART_CheckIdleState>
 8011646:	4603      	mov	r3, r0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b08a      	sub	sp, #40	; 0x28
 8011654:	af02      	add	r7, sp, #8
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	603b      	str	r3, [r7, #0]
 801165c:	4613      	mov	r3, r2
 801165e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011666:	2b20      	cmp	r3, #32
 8011668:	d17b      	bne.n	8011762 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <HAL_UART_Transmit+0x26>
 8011670:	88fb      	ldrh	r3, [r7, #6]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d101      	bne.n	801167a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011676:	2301      	movs	r3, #1
 8011678:	e074      	b.n	8011764 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2200      	movs	r2, #0
 801167e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2221      	movs	r2, #33	; 0x21
 8011686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801168a:	f7fb f9fd 	bl	800ca88 <HAL_GetTick>
 801168e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	88fa      	ldrh	r2, [r7, #6]
 8011694:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	88fa      	ldrh	r2, [r7, #6]
 801169c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116a8:	d108      	bne.n	80116bc <HAL_UART_Transmit+0x6c>
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d104      	bne.n	80116bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	61bb      	str	r3, [r7, #24]
 80116ba:	e003      	b.n	80116c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80116c0:	2300      	movs	r3, #0
 80116c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80116c4:	e030      	b.n	8011728 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	9300      	str	r3, [sp, #0]
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2200      	movs	r2, #0
 80116ce:	2180      	movs	r1, #128	; 0x80
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f000 ff03 	bl	80124dc <UART_WaitOnFlagUntilTimeout>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d005      	beq.n	80116e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2220      	movs	r2, #32
 80116e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80116e4:	2303      	movs	r3, #3
 80116e6:	e03d      	b.n	8011764 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10b      	bne.n	8011706 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80116ee:	69bb      	ldr	r3, [r7, #24]
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	461a      	mov	r2, r3
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80116fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	3302      	adds	r3, #2
 8011702:	61bb      	str	r3, [r7, #24]
 8011704:	e007      	b.n	8011716 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	781a      	ldrb	r2, [r3, #0]
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	3301      	adds	r3, #1
 8011714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801171c:	b29b      	uxth	r3, r3
 801171e:	3b01      	subs	r3, #1
 8011720:	b29a      	uxth	r2, r3
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801172e:	b29b      	uxth	r3, r3
 8011730:	2b00      	cmp	r3, #0
 8011732:	d1c8      	bne.n	80116c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	2200      	movs	r2, #0
 801173c:	2140      	movs	r1, #64	; 0x40
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f000 fecc 	bl	80124dc <UART_WaitOnFlagUntilTimeout>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d005      	beq.n	8011756 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2220      	movs	r2, #32
 801174e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011752:	2303      	movs	r3, #3
 8011754:	e006      	b.n	8011764 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2220      	movs	r2, #32
 801175a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	e000      	b.n	8011764 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011762:	2302      	movs	r3, #2
  }
}
 8011764:	4618      	mov	r0, r3
 8011766:	3720      	adds	r7, #32
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b0ba      	sub	sp, #232	; 0xe8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	69db      	ldr	r3, [r3, #28]
 801177a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	689b      	ldr	r3, [r3, #8]
 801178e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011796:	f640 030f 	movw	r3, #2063	; 0x80f
 801179a:	4013      	ands	r3, r2
 801179c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80117a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d11b      	bne.n	80117e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80117a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117ac:	f003 0320 	and.w	r3, r3, #32
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d015      	beq.n	80117e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80117b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117b8:	f003 0320 	and.w	r3, r3, #32
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d105      	bne.n	80117cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80117c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80117c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d009      	beq.n	80117e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f000 82e3 	beq.w	8011d9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	4798      	blx	r3
      }
      return;
 80117de:	e2dd      	b.n	8011d9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80117e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f000 8123 	beq.w	8011a30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80117ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80117ee:	4b8d      	ldr	r3, [pc, #564]	; (8011a24 <HAL_UART_IRQHandler+0x2b8>)
 80117f0:	4013      	ands	r3, r2
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d106      	bne.n	8011804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80117f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80117fa:	4b8b      	ldr	r3, [pc, #556]	; (8011a28 <HAL_UART_IRQHandler+0x2bc>)
 80117fc:	4013      	ands	r3, r2
 80117fe:	2b00      	cmp	r3, #0
 8011800:	f000 8116 	beq.w	8011a30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011808:	f003 0301 	and.w	r3, r3, #1
 801180c:	2b00      	cmp	r3, #0
 801180e:	d011      	beq.n	8011834 <HAL_UART_IRQHandler+0xc8>
 8011810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00b      	beq.n	8011834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2201      	movs	r2, #1
 8011822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801182a:	f043 0201 	orr.w	r2, r3, #1
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011838:	f003 0302 	and.w	r3, r3, #2
 801183c:	2b00      	cmp	r3, #0
 801183e:	d011      	beq.n	8011864 <HAL_UART_IRQHandler+0xf8>
 8011840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011844:	f003 0301 	and.w	r3, r3, #1
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00b      	beq.n	8011864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2202      	movs	r2, #2
 8011852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801185a:	f043 0204 	orr.w	r2, r3, #4
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011868:	f003 0304 	and.w	r3, r3, #4
 801186c:	2b00      	cmp	r3, #0
 801186e:	d011      	beq.n	8011894 <HAL_UART_IRQHandler+0x128>
 8011870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011874:	f003 0301 	and.w	r3, r3, #1
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00b      	beq.n	8011894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2204      	movs	r2, #4
 8011882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801188a:	f043 0202 	orr.w	r2, r3, #2
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011898:	f003 0308 	and.w	r3, r3, #8
 801189c:	2b00      	cmp	r3, #0
 801189e:	d017      	beq.n	80118d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80118a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80118a4:	f003 0320 	and.w	r3, r3, #32
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d105      	bne.n	80118b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80118ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80118b0:	4b5c      	ldr	r3, [pc, #368]	; (8011a24 <HAL_UART_IRQHandler+0x2b8>)
 80118b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d00b      	beq.n	80118d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2208      	movs	r2, #8
 80118be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118c6:	f043 0208 	orr.w	r2, r3, #8
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80118d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80118d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d012      	beq.n	8011902 <HAL_UART_IRQHandler+0x196>
 80118dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80118e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d00c      	beq.n	8011902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118f8:	f043 0220 	orr.w	r2, r3, #32
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011908:	2b00      	cmp	r3, #0
 801190a:	f000 8249 	beq.w	8011da0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801190e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011912:	f003 0320 	and.w	r3, r3, #32
 8011916:	2b00      	cmp	r3, #0
 8011918:	d013      	beq.n	8011942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801191a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801191e:	f003 0320 	and.w	r3, r3, #32
 8011922:	2b00      	cmp	r3, #0
 8011924:	d105      	bne.n	8011932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801192e:	2b00      	cmp	r3, #0
 8011930:	d007      	beq.n	8011942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011936:	2b00      	cmp	r3, #0
 8011938:	d003      	beq.n	8011942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011956:	2b40      	cmp	r3, #64	; 0x40
 8011958:	d005      	beq.n	8011966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801195a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801195e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011962:	2b00      	cmp	r3, #0
 8011964:	d054      	beq.n	8011a10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fe1f 	bl	80125aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011976:	2b40      	cmp	r3, #64	; 0x40
 8011978:	d146      	bne.n	8011a08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	3308      	adds	r3, #8
 8011980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011988:	e853 3f00 	ldrex	r3, [r3]
 801198c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	3308      	adds	r3, #8
 80119a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80119a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80119aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80119b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80119b6:	e841 2300 	strex	r3, r2, [r1]
 80119ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80119be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d1d9      	bne.n	801197a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d017      	beq.n	8011a00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119d6:	4a15      	ldr	r2, [pc, #84]	; (8011a2c <HAL_UART_IRQHandler+0x2c0>)
 80119d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fb f9d7 	bl	800cd94 <HAL_DMA_Abort_IT>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d019      	beq.n	8011a20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80119fa:	4610      	mov	r0, r2
 80119fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119fe:	e00f      	b.n	8011a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f000 f9e1 	bl	8011dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a06:	e00b      	b.n	8011a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f9dd 	bl	8011dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a0e:	e007      	b.n	8011a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 f9d9 	bl	8011dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8011a1e:	e1bf      	b.n	8011da0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a20:	bf00      	nop
    return;
 8011a22:	e1bd      	b.n	8011da0 <HAL_UART_IRQHandler+0x634>
 8011a24:	10000001 	.word	0x10000001
 8011a28:	04000120 	.word	0x04000120
 8011a2c:	08012677 	.word	0x08012677

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	f040 8153 	bne.w	8011ce0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a3e:	f003 0310 	and.w	r3, r3, #16
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	f000 814c 	beq.w	8011ce0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011a4c:	f003 0310 	and.w	r3, r3, #16
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f000 8145 	beq.w	8011ce0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2210      	movs	r2, #16
 8011a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a68:	2b40      	cmp	r3, #64	; 0x40
 8011a6a:	f040 80bb 	bne.w	8011be4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	685b      	ldr	r3, [r3, #4]
 8011a78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011a7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 818f 	beq.w	8011da4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011a90:	429a      	cmp	r2, r3
 8011a92:	f080 8187 	bcs.w	8011da4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f003 0320 	and.w	r3, r3, #32
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f040 8087 	bne.w	8011bc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ac0:	e853 3f00 	ldrex	r3, [r3]
 8011ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	461a      	mov	r2, r3
 8011ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011ae2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011aee:	e841 2300 	strex	r3, r2, [r1]
 8011af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1da      	bne.n	8011ab4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	3308      	adds	r3, #8
 8011b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b08:	e853 3f00 	ldrex	r3, [r3]
 8011b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b10:	f023 0301 	bic.w	r3, r3, #1
 8011b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	3308      	adds	r3, #8
 8011b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011b2e:	e841 2300 	strex	r3, r2, [r1]
 8011b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d1e1      	bne.n	8011afe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	3308      	adds	r3, #8
 8011b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b44:	e853 3f00 	ldrex	r3, [r3]
 8011b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	3308      	adds	r3, #8
 8011b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b66:	e841 2300 	strex	r3, r2, [r1]
 8011b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1e3      	bne.n	8011b3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2220      	movs	r2, #32
 8011b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b88:	e853 3f00 	ldrex	r3, [r3]
 8011b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b90:	f023 0310 	bic.w	r3, r3, #16
 8011b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011baa:	e841 2300 	strex	r3, r2, [r1]
 8011bae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1e4      	bne.n	8011b80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fb f88a 	bl	800ccd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2202      	movs	r2, #2
 8011bc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	4619      	mov	r1, r3
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 f8fd 	bl	8011ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011be2:	e0df      	b.n	8011da4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f000 80d1 	beq.w	8011da8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8011c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	f000 80cc 	beq.w	8011da8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	e853 3f00 	ldrex	r3, [r3]
 8011c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c32:	647b      	str	r3, [r7, #68]	; 0x44
 8011c34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c3a:	e841 2300 	strex	r3, r2, [r1]
 8011c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1e4      	bne.n	8011c10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	3308      	adds	r3, #8
 8011c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c50:	e853 3f00 	ldrex	r3, [r3]
 8011c54:	623b      	str	r3, [r7, #32]
   return(result);
 8011c56:	6a3b      	ldr	r3, [r7, #32]
 8011c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c5c:	f023 0301 	bic.w	r3, r3, #1
 8011c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	3308      	adds	r3, #8
 8011c6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8011c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c76:	e841 2300 	strex	r3, r2, [r1]
 8011c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d1e1      	bne.n	8011c46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2220      	movs	r2, #32
 8011c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	e853 3f00 	ldrex	r3, [r3]
 8011ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f023 0310 	bic.w	r3, r3, #16
 8011caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011cb8:	61fb      	str	r3, [r7, #28]
 8011cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cbc:	69b9      	ldr	r1, [r7, #24]
 8011cbe:	69fa      	ldr	r2, [r7, #28]
 8011cc0:	e841 2300 	strex	r3, r2, [r1]
 8011cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1e4      	bne.n	8011c96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2202      	movs	r2, #2
 8011cd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011cd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 f87f 	bl	8011ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011cde:	e063      	b.n	8011da8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00e      	beq.n	8011d0a <HAL_UART_IRQHandler+0x59e>
 8011cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d008      	beq.n	8011d0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fcf8 	bl	80126f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011d08:	e051      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d014      	beq.n	8011d40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d105      	bne.n	8011d2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d008      	beq.n	8011d40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d03a      	beq.n	8011dac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	4798      	blx	r3
    }
    return;
 8011d3e:	e035      	b.n	8011dac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d009      	beq.n	8011d60 <HAL_UART_IRQHandler+0x5f4>
 8011d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d003      	beq.n	8011d60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 fca2 	bl	80126a2 <UART_EndTransmit_IT>
    return;
 8011d5e:	e026      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d009      	beq.n	8011d80 <HAL_UART_IRQHandler+0x614>
 8011d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d003      	beq.n	8011d80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 fcd1 	bl	8012720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011d7e:	e016      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d010      	beq.n	8011dae <HAL_UART_IRQHandler+0x642>
 8011d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	da0c      	bge.n	8011dae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 fcb9 	bl	801270c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011d9a:	e008      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
      return;
 8011d9c:	bf00      	nop
 8011d9e:	e006      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
    return;
 8011da0:	bf00      	nop
 8011da2:	e004      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
      return;
 8011da4:	bf00      	nop
 8011da6:	e002      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
      return;
 8011da8:	bf00      	nop
 8011daa:	e000      	b.n	8011dae <HAL_UART_IRQHandler+0x642>
    return;
 8011dac:	bf00      	nop
  }
}
 8011dae:	37e8      	adds	r7, #232	; 0xe8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011dbc:	bf00      	nop
 8011dbe:	370c      	adds	r7, #12
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr

08011dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011dd0:	bf00      	nop
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr

08011ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	460b      	mov	r3, r1
 8011de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011de8:	bf00      	nop
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011df8:	b08c      	sub	sp, #48	; 0x30
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	689a      	ldr	r2, [r3, #8]
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	691b      	ldr	r3, [r3, #16]
 8011e0c:	431a      	orrs	r2, r3
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	695b      	ldr	r3, [r3, #20]
 8011e12:	431a      	orrs	r2, r3
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	69db      	ldr	r3, [r3, #28]
 8011e18:	4313      	orrs	r3, r2
 8011e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	4baf      	ldr	r3, [pc, #700]	; (80120e0 <UART_SetConfig+0x2ec>)
 8011e24:	4013      	ands	r3, r2
 8011e26:	697a      	ldr	r2, [r7, #20]
 8011e28:	6812      	ldr	r2, [r2, #0]
 8011e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e2c:	430b      	orrs	r3, r1
 8011e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	68da      	ldr	r2, [r3, #12]
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	430a      	orrs	r2, r1
 8011e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	699b      	ldr	r3, [r3, #24]
 8011e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	4aa4      	ldr	r2, [pc, #656]	; (80120e4 <UART_SetConfig+0x2f0>)
 8011e52:	4293      	cmp	r3, r2
 8011e54:	d004      	beq.n	8011e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	6a1b      	ldr	r3, [r3, #32]
 8011e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	689b      	ldr	r3, [r3, #8]
 8011e66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8011e6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8011e6e:	697a      	ldr	r2, [r7, #20]
 8011e70:	6812      	ldr	r2, [r2, #0]
 8011e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e74:	430b      	orrs	r3, r1
 8011e76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e7e:	f023 010f 	bic.w	r1, r3, #15
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	430a      	orrs	r2, r1
 8011e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a95      	ldr	r2, [pc, #596]	; (80120e8 <UART_SetConfig+0x2f4>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d125      	bne.n	8011ee4 <UART_SetConfig+0xf0>
 8011e98:	2003      	movs	r0, #3
 8011e9a:	f7ff fb69 	bl	8011570 <LL_RCC_GetUSARTClockSource>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b03      	cmp	r3, #3
 8011ea2:	d81b      	bhi.n	8011edc <UART_SetConfig+0xe8>
 8011ea4:	a201      	add	r2, pc, #4	; (adr r2, 8011eac <UART_SetConfig+0xb8>)
 8011ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eaa:	bf00      	nop
 8011eac:	08011ebd 	.word	0x08011ebd
 8011eb0:	08011ecd 	.word	0x08011ecd
 8011eb4:	08011ec5 	.word	0x08011ec5
 8011eb8:	08011ed5 	.word	0x08011ed5
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ec2:	e042      	b.n	8011f4a <UART_SetConfig+0x156>
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011eca:	e03e      	b.n	8011f4a <UART_SetConfig+0x156>
 8011ecc:	2304      	movs	r3, #4
 8011ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ed2:	e03a      	b.n	8011f4a <UART_SetConfig+0x156>
 8011ed4:	2308      	movs	r3, #8
 8011ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011eda:	e036      	b.n	8011f4a <UART_SetConfig+0x156>
 8011edc:	2310      	movs	r3, #16
 8011ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ee2:	e032      	b.n	8011f4a <UART_SetConfig+0x156>
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	4a7e      	ldr	r2, [pc, #504]	; (80120e4 <UART_SetConfig+0x2f0>)
 8011eea:	4293      	cmp	r3, r2
 8011eec:	d12a      	bne.n	8011f44 <UART_SetConfig+0x150>
 8011eee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011ef2:	f7ff fb4d 	bl	8011590 <LL_RCC_GetLPUARTClockSource>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011efc:	d01a      	beq.n	8011f34 <UART_SetConfig+0x140>
 8011efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f02:	d81b      	bhi.n	8011f3c <UART_SetConfig+0x148>
 8011f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f08:	d00c      	beq.n	8011f24 <UART_SetConfig+0x130>
 8011f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f0e:	d815      	bhi.n	8011f3c <UART_SetConfig+0x148>
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d003      	beq.n	8011f1c <UART_SetConfig+0x128>
 8011f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f18:	d008      	beq.n	8011f2c <UART_SetConfig+0x138>
 8011f1a:	e00f      	b.n	8011f3c <UART_SetConfig+0x148>
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f22:	e012      	b.n	8011f4a <UART_SetConfig+0x156>
 8011f24:	2302      	movs	r3, #2
 8011f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f2a:	e00e      	b.n	8011f4a <UART_SetConfig+0x156>
 8011f2c:	2304      	movs	r3, #4
 8011f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f32:	e00a      	b.n	8011f4a <UART_SetConfig+0x156>
 8011f34:	2308      	movs	r3, #8
 8011f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f3a:	e006      	b.n	8011f4a <UART_SetConfig+0x156>
 8011f3c:	2310      	movs	r3, #16
 8011f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f42:	e002      	b.n	8011f4a <UART_SetConfig+0x156>
 8011f44:	2310      	movs	r3, #16
 8011f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	4a65      	ldr	r2, [pc, #404]	; (80120e4 <UART_SetConfig+0x2f0>)
 8011f50:	4293      	cmp	r3, r2
 8011f52:	f040 8097 	bne.w	8012084 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011f5a:	2b08      	cmp	r3, #8
 8011f5c:	d823      	bhi.n	8011fa6 <UART_SetConfig+0x1b2>
 8011f5e:	a201      	add	r2, pc, #4	; (adr r2, 8011f64 <UART_SetConfig+0x170>)
 8011f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f64:	08011f89 	.word	0x08011f89
 8011f68:	08011fa7 	.word	0x08011fa7
 8011f6c:	08011f91 	.word	0x08011f91
 8011f70:	08011fa7 	.word	0x08011fa7
 8011f74:	08011f97 	.word	0x08011f97
 8011f78:	08011fa7 	.word	0x08011fa7
 8011f7c:	08011fa7 	.word	0x08011fa7
 8011f80:	08011fa7 	.word	0x08011fa7
 8011f84:	08011f9f 	.word	0x08011f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f88:	f7fc fd70 	bl	800ea6c <HAL_RCC_GetPCLK1Freq>
 8011f8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f8e:	e010      	b.n	8011fb2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011f90:	4b56      	ldr	r3, [pc, #344]	; (80120ec <UART_SetConfig+0x2f8>)
 8011f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011f94:	e00d      	b.n	8011fb2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f96:	f7fc fce9 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 8011f9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f9c:	e009      	b.n	8011fb2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011fa4:	e005      	b.n	8011fb2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011faa:	2301      	movs	r3, #1
 8011fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 812b 	beq.w	8012210 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fbe:	4a4c      	ldr	r2, [pc, #304]	; (80120f0 <UART_SetConfig+0x2fc>)
 8011fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	685a      	ldr	r2, [r3, #4]
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	4413      	add	r3, r2
 8011fd8:	69ba      	ldr	r2, [r7, #24]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d305      	bcc.n	8011fea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011fe4:	69ba      	ldr	r2, [r7, #24]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d903      	bls.n	8011ff2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011fea:	2301      	movs	r3, #1
 8011fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011ff0:	e10e      	b.n	8012210 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	60bb      	str	r3, [r7, #8]
 8011ff8:	60fa      	str	r2, [r7, #12]
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ffe:	4a3c      	ldr	r2, [pc, #240]	; (80120f0 <UART_SetConfig+0x2fc>)
 8012000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012004:	b29b      	uxth	r3, r3
 8012006:	2200      	movs	r2, #0
 8012008:	603b      	str	r3, [r7, #0]
 801200a:	607a      	str	r2, [r7, #4]
 801200c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012014:	f7ee fe6a 	bl	8000cec <__aeabi_uldivmod>
 8012018:	4602      	mov	r2, r0
 801201a:	460b      	mov	r3, r1
 801201c:	4610      	mov	r0, r2
 801201e:	4619      	mov	r1, r3
 8012020:	f04f 0200 	mov.w	r2, #0
 8012024:	f04f 0300 	mov.w	r3, #0
 8012028:	020b      	lsls	r3, r1, #8
 801202a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801202e:	0202      	lsls	r2, r0, #8
 8012030:	6979      	ldr	r1, [r7, #20]
 8012032:	6849      	ldr	r1, [r1, #4]
 8012034:	0849      	lsrs	r1, r1, #1
 8012036:	2000      	movs	r0, #0
 8012038:	460c      	mov	r4, r1
 801203a:	4605      	mov	r5, r0
 801203c:	eb12 0804 	adds.w	r8, r2, r4
 8012040:	eb43 0905 	adc.w	r9, r3, r5
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	469a      	mov	sl, r3
 801204c:	4693      	mov	fp, r2
 801204e:	4652      	mov	r2, sl
 8012050:	465b      	mov	r3, fp
 8012052:	4640      	mov	r0, r8
 8012054:	4649      	mov	r1, r9
 8012056:	f7ee fe49 	bl	8000cec <__aeabi_uldivmod>
 801205a:	4602      	mov	r2, r0
 801205c:	460b      	mov	r3, r1
 801205e:	4613      	mov	r3, r2
 8012060:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012062:	6a3b      	ldr	r3, [r7, #32]
 8012064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012068:	d308      	bcc.n	801207c <UART_SetConfig+0x288>
 801206a:	6a3b      	ldr	r3, [r7, #32]
 801206c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012070:	d204      	bcs.n	801207c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	6a3a      	ldr	r2, [r7, #32]
 8012078:	60da      	str	r2, [r3, #12]
 801207a:	e0c9      	b.n	8012210 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801207c:	2301      	movs	r3, #1
 801207e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012082:	e0c5      	b.n	8012210 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	69db      	ldr	r3, [r3, #28]
 8012088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801208c:	d16d      	bne.n	801216a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801208e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012092:	3b01      	subs	r3, #1
 8012094:	2b07      	cmp	r3, #7
 8012096:	d82d      	bhi.n	80120f4 <UART_SetConfig+0x300>
 8012098:	a201      	add	r2, pc, #4	; (adr r2, 80120a0 <UART_SetConfig+0x2ac>)
 801209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801209e:	bf00      	nop
 80120a0:	080120c1 	.word	0x080120c1
 80120a4:	080120c9 	.word	0x080120c9
 80120a8:	080120f5 	.word	0x080120f5
 80120ac:	080120cf 	.word	0x080120cf
 80120b0:	080120f5 	.word	0x080120f5
 80120b4:	080120f5 	.word	0x080120f5
 80120b8:	080120f5 	.word	0x080120f5
 80120bc:	080120d7 	.word	0x080120d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120c0:	f7fc fcea 	bl	800ea98 <HAL_RCC_GetPCLK2Freq>
 80120c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80120c6:	e01b      	b.n	8012100 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80120c8:	4b08      	ldr	r3, [pc, #32]	; (80120ec <UART_SetConfig+0x2f8>)
 80120ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80120cc:	e018      	b.n	8012100 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80120ce:	f7fc fc4d 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 80120d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80120d4:	e014      	b.n	8012100 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80120dc:	e010      	b.n	8012100 <UART_SetConfig+0x30c>
 80120de:	bf00      	nop
 80120e0:	cfff69f3 	.word	0xcfff69f3
 80120e4:	40008000 	.word	0x40008000
 80120e8:	40013800 	.word	0x40013800
 80120ec:	00f42400 	.word	0x00f42400
 80120f0:	0801851c 	.word	0x0801851c
      default:
        pclk = 0U;
 80120f4:	2300      	movs	r3, #0
 80120f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80120f8:	2301      	movs	r3, #1
 80120fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80120fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012102:	2b00      	cmp	r3, #0
 8012104:	f000 8084 	beq.w	8012210 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210c:	4a4b      	ldr	r2, [pc, #300]	; (801223c <UART_SetConfig+0x448>)
 801210e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012112:	461a      	mov	r2, r3
 8012114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012116:	fbb3 f3f2 	udiv	r3, r3, r2
 801211a:	005a      	lsls	r2, r3, #1
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	085b      	lsrs	r3, r3, #1
 8012122:	441a      	add	r2, r3
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	fbb2 f3f3 	udiv	r3, r2, r3
 801212c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	2b0f      	cmp	r3, #15
 8012132:	d916      	bls.n	8012162 <UART_SetConfig+0x36e>
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801213a:	d212      	bcs.n	8012162 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801213c:	6a3b      	ldr	r3, [r7, #32]
 801213e:	b29b      	uxth	r3, r3
 8012140:	f023 030f 	bic.w	r3, r3, #15
 8012144:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012146:	6a3b      	ldr	r3, [r7, #32]
 8012148:	085b      	lsrs	r3, r3, #1
 801214a:	b29b      	uxth	r3, r3
 801214c:	f003 0307 	and.w	r3, r3, #7
 8012150:	b29a      	uxth	r2, r3
 8012152:	8bfb      	ldrh	r3, [r7, #30]
 8012154:	4313      	orrs	r3, r2
 8012156:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	8bfa      	ldrh	r2, [r7, #30]
 801215e:	60da      	str	r2, [r3, #12]
 8012160:	e056      	b.n	8012210 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8012162:	2301      	movs	r3, #1
 8012164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012168:	e052      	b.n	8012210 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801216a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801216e:	3b01      	subs	r3, #1
 8012170:	2b07      	cmp	r3, #7
 8012172:	d822      	bhi.n	80121ba <UART_SetConfig+0x3c6>
 8012174:	a201      	add	r2, pc, #4	; (adr r2, 801217c <UART_SetConfig+0x388>)
 8012176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217a:	bf00      	nop
 801217c:	0801219d 	.word	0x0801219d
 8012180:	080121a5 	.word	0x080121a5
 8012184:	080121bb 	.word	0x080121bb
 8012188:	080121ab 	.word	0x080121ab
 801218c:	080121bb 	.word	0x080121bb
 8012190:	080121bb 	.word	0x080121bb
 8012194:	080121bb 	.word	0x080121bb
 8012198:	080121b3 	.word	0x080121b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801219c:	f7fc fc7c 	bl	800ea98 <HAL_RCC_GetPCLK2Freq>
 80121a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80121a2:	e010      	b.n	80121c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80121a4:	4b26      	ldr	r3, [pc, #152]	; (8012240 <UART_SetConfig+0x44c>)
 80121a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80121a8:	e00d      	b.n	80121c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80121aa:	f7fc fbdf 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 80121ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80121b0:	e009      	b.n	80121c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80121b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80121b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80121b8:	e005      	b.n	80121c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80121ba:	2300      	movs	r3, #0
 80121bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80121be:	2301      	movs	r3, #1
 80121c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80121c4:	bf00      	nop
    }

    if (pclk != 0U)
 80121c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d021      	beq.n	8012210 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d0:	4a1a      	ldr	r2, [pc, #104]	; (801223c <UART_SetConfig+0x448>)
 80121d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121d6:	461a      	mov	r2, r3
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121da:	fbb3 f2f2 	udiv	r2, r3, r2
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	085b      	lsrs	r3, r3, #1
 80121e4:	441a      	add	r2, r3
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80121ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121f0:	6a3b      	ldr	r3, [r7, #32]
 80121f2:	2b0f      	cmp	r3, #15
 80121f4:	d909      	bls.n	801220a <UART_SetConfig+0x416>
 80121f6:	6a3b      	ldr	r3, [r7, #32]
 80121f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121fc:	d205      	bcs.n	801220a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	b29a      	uxth	r2, r3
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	60da      	str	r2, [r3, #12]
 8012208:	e002      	b.n	8012210 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801220a:	2301      	movs	r3, #1
 801220c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2201      	movs	r2, #1
 8012214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	2201      	movs	r2, #1
 801221c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	2200      	movs	r2, #0
 8012224:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	2200      	movs	r2, #0
 801222a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801222c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8012230:	4618      	mov	r0, r3
 8012232:	3730      	adds	r7, #48	; 0x30
 8012234:	46bd      	mov	sp, r7
 8012236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801223a:	bf00      	nop
 801223c:	0801851c 	.word	0x0801851c
 8012240:	00f42400 	.word	0x00f42400

08012244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012250:	f003 0301 	and.w	r3, r3, #1
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00a      	beq.n	801226e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	430a      	orrs	r2, r1
 801226c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	430a      	orrs	r2, r1
 801228e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012294:	f003 0304 	and.w	r3, r3, #4
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00a      	beq.n	80122b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	430a      	orrs	r2, r1
 80122b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b6:	f003 0308 	and.w	r3, r3, #8
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00a      	beq.n	80122d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	430a      	orrs	r2, r1
 80122d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d8:	f003 0310 	and.w	r3, r3, #16
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00a      	beq.n	80122f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	689b      	ldr	r3, [r3, #8]
 80122e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	430a      	orrs	r2, r1
 80122f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122fa:	f003 0320 	and.w	r3, r3, #32
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00a      	beq.n	8012318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	689b      	ldr	r3, [r3, #8]
 8012308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	430a      	orrs	r2, r1
 8012316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012320:	2b00      	cmp	r3, #0
 8012322:	d01a      	beq.n	801235a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	430a      	orrs	r2, r1
 8012338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801233e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012342:	d10a      	bne.n	801235a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	430a      	orrs	r2, r1
 8012358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00a      	beq.n	801237c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	430a      	orrs	r2, r1
 801237a:	605a      	str	r2, [r3, #4]
  }
}
 801237c:	bf00      	nop
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr

08012388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b098      	sub	sp, #96	; 0x60
 801238c:	af02      	add	r7, sp, #8
 801238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012398:	f7fa fb76 	bl	800ca88 <HAL_GetTick>
 801239c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 0308 	and.w	r3, r3, #8
 80123a8:	2b08      	cmp	r3, #8
 80123aa:	d12f      	bne.n	801240c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80123b0:	9300      	str	r3, [sp, #0]
 80123b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123b4:	2200      	movs	r2, #0
 80123b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f000 f88e 	bl	80124dc <UART_WaitOnFlagUntilTimeout>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d022      	beq.n	801240c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ce:	e853 3f00 	ldrex	r3, [r3]
 80123d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123da:	653b      	str	r3, [r7, #80]	; 0x50
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e4:	647b      	str	r3, [r7, #68]	; 0x44
 80123e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123ec:	e841 2300 	strex	r3, r2, [r1]
 80123f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d1e6      	bne.n	80123c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2220      	movs	r2, #32
 80123fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012408:	2303      	movs	r3, #3
 801240a:	e063      	b.n	80124d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f003 0304 	and.w	r3, r3, #4
 8012416:	2b04      	cmp	r3, #4
 8012418:	d149      	bne.n	80124ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801241a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012422:	2200      	movs	r2, #0
 8012424:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f857 	bl	80124dc <UART_WaitOnFlagUntilTimeout>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d03c      	beq.n	80124ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	e853 3f00 	ldrex	r3, [r3]
 8012440:	623b      	str	r3, [r7, #32]
   return(result);
 8012442:	6a3b      	ldr	r3, [r7, #32]
 8012444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012448:	64fb      	str	r3, [r7, #76]	; 0x4c
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012452:	633b      	str	r3, [r7, #48]	; 0x30
 8012454:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801245a:	e841 2300 	strex	r3, r2, [r1]
 801245e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1e6      	bne.n	8012434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	3308      	adds	r3, #8
 801246c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	e853 3f00 	ldrex	r3, [r3]
 8012474:	60fb      	str	r3, [r7, #12]
   return(result);
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f023 0301 	bic.w	r3, r3, #1
 801247c:	64bb      	str	r3, [r7, #72]	; 0x48
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	3308      	adds	r3, #8
 8012484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012486:	61fa      	str	r2, [r7, #28]
 8012488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801248a:	69b9      	ldr	r1, [r7, #24]
 801248c:	69fa      	ldr	r2, [r7, #28]
 801248e:	e841 2300 	strex	r3, r2, [r1]
 8012492:	617b      	str	r3, [r7, #20]
   return(result);
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d1e5      	bne.n	8012466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2220      	movs	r2, #32
 801249e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2200      	movs	r2, #0
 80124a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124aa:	2303      	movs	r3, #3
 80124ac:	e012      	b.n	80124d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2220      	movs	r2, #32
 80124b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2220      	movs	r2, #32
 80124ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2200      	movs	r2, #0
 80124c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3758      	adds	r7, #88	; 0x58
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	603b      	str	r3, [r7, #0]
 80124e8:	4613      	mov	r3, r2
 80124ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80124ec:	e049      	b.n	8012582 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f4:	d045      	beq.n	8012582 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124f6:	f7fa fac7 	bl	800ca88 <HAL_GetTick>
 80124fa:	4602      	mov	r2, r0
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	69ba      	ldr	r2, [r7, #24]
 8012502:	429a      	cmp	r2, r3
 8012504:	d302      	bcc.n	801250c <UART_WaitOnFlagUntilTimeout+0x30>
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d101      	bne.n	8012510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801250c:	2303      	movs	r3, #3
 801250e:	e048      	b.n	80125a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f003 0304 	and.w	r3, r3, #4
 801251a:	2b00      	cmp	r3, #0
 801251c:	d031      	beq.n	8012582 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	69db      	ldr	r3, [r3, #28]
 8012524:	f003 0308 	and.w	r3, r3, #8
 8012528:	2b08      	cmp	r3, #8
 801252a:	d110      	bne.n	801254e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2208      	movs	r2, #8
 8012532:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f000 f838 	bl	80125aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2208      	movs	r2, #8
 801253e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2200      	movs	r2, #0
 8012546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801254a:	2301      	movs	r3, #1
 801254c:	e029      	b.n	80125a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	69db      	ldr	r3, [r3, #28]
 8012554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801255c:	d111      	bne.n	8012582 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f000 f81e 	bl	80125aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2220      	movs	r2, #32
 8012572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2200      	movs	r2, #0
 801257a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801257e:	2303      	movs	r3, #3
 8012580:	e00f      	b.n	80125a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	69da      	ldr	r2, [r3, #28]
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	4013      	ands	r3, r2
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	429a      	cmp	r2, r3
 8012590:	bf0c      	ite	eq
 8012592:	2301      	moveq	r3, #1
 8012594:	2300      	movne	r3, #0
 8012596:	b2db      	uxtb	r3, r3
 8012598:	461a      	mov	r2, r3
 801259a:	79fb      	ldrb	r3, [r7, #7]
 801259c:	429a      	cmp	r2, r3
 801259e:	d0a6      	beq.n	80124ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80125a0:	2300      	movs	r3, #0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80125aa:	b480      	push	{r7}
 80125ac:	b095      	sub	sp, #84	; 0x54
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ba:	e853 3f00 	ldrex	r3, [r3]
 80125be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80125c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80125c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	461a      	mov	r2, r3
 80125ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125d0:	643b      	str	r3, [r7, #64]	; 0x40
 80125d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125d8:	e841 2300 	strex	r3, r2, [r1]
 80125dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80125de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d1e6      	bne.n	80125b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	3308      	adds	r3, #8
 80125ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	e853 3f00 	ldrex	r3, [r3]
 80125f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80125fa:	f023 0301 	bic.w	r3, r3, #1
 80125fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	3308      	adds	r3, #8
 8012606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012608:	62fa      	str	r2, [r7, #44]	; 0x2c
 801260a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801260c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801260e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012610:	e841 2300 	strex	r3, r2, [r1]
 8012614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1e3      	bne.n	80125e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012620:	2b01      	cmp	r3, #1
 8012622:	d118      	bne.n	8012656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	e853 3f00 	ldrex	r3, [r3]
 8012630:	60bb      	str	r3, [r7, #8]
   return(result);
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	f023 0310 	bic.w	r3, r3, #16
 8012638:	647b      	str	r3, [r7, #68]	; 0x44
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	461a      	mov	r2, r3
 8012640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012642:	61bb      	str	r3, [r7, #24]
 8012644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012646:	6979      	ldr	r1, [r7, #20]
 8012648:	69ba      	ldr	r2, [r7, #24]
 801264a:	e841 2300 	strex	r3, r2, [r1]
 801264e:	613b      	str	r3, [r7, #16]
   return(result);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1e6      	bne.n	8012624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2220      	movs	r2, #32
 801265a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	675a      	str	r2, [r3, #116]	; 0x74
}
 801266a:	bf00      	nop
 801266c:	3754      	adds	r7, #84	; 0x54
 801266e:	46bd      	mov	sp, r7
 8012670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012674:	4770      	bx	lr

08012676 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012676:	b580      	push	{r7, lr}
 8012678:	b084      	sub	sp, #16
 801267a:	af00      	add	r7, sp, #0
 801267c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012694:	68f8      	ldr	r0, [r7, #12]
 8012696:	f7ff fb97 	bl	8011dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801269a:	bf00      	nop
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}

080126a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b088      	sub	sp, #32
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	e853 3f00 	ldrex	r3, [r3]
 80126b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126be:	61fb      	str	r3, [r7, #28]
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	461a      	mov	r2, r3
 80126c6:	69fb      	ldr	r3, [r7, #28]
 80126c8:	61bb      	str	r3, [r7, #24]
 80126ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126cc:	6979      	ldr	r1, [r7, #20]
 80126ce:	69ba      	ldr	r2, [r7, #24]
 80126d0:	e841 2300 	strex	r3, r2, [r1]
 80126d4:	613b      	str	r3, [r7, #16]
   return(result);
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1e6      	bne.n	80126aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2220      	movs	r2, #32
 80126e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7ff fb62 	bl	8011db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126f0:	bf00      	nop
 80126f2:	3720      	adds	r7, #32
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012700:	bf00      	nop
 8012702:	370c      	adds	r7, #12
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr

0801270c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012714:	bf00      	nop
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012728:	bf00      	nop
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012742:	2b01      	cmp	r3, #1
 8012744:	d101      	bne.n	801274a <HAL_UARTEx_DisableFifoMode+0x16>
 8012746:	2302      	movs	r3, #2
 8012748:	e027      	b.n	801279a <HAL_UARTEx_DisableFifoMode+0x66>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2201      	movs	r2, #1
 801274e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2224      	movs	r2, #36	; 0x24
 8012756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f022 0201 	bic.w	r2, r2, #1
 8012770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2200      	movs	r2, #0
 801277e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2220      	movs	r2, #32
 801278c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012798:	2300      	movs	r3, #0
}
 801279a:	4618      	mov	r0, r3
 801279c:	3714      	adds	r7, #20
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr

080127a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b084      	sub	sp, #16
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
 80127ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d101      	bne.n	80127be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80127ba:	2302      	movs	r3, #2
 80127bc:	e02d      	b.n	801281a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2201      	movs	r2, #1
 80127c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2224      	movs	r2, #36	; 0x24
 80127ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f022 0201 	bic.w	r2, r2, #1
 80127e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	683a      	ldr	r2, [r7, #0]
 80127f6:	430a      	orrs	r2, r1
 80127f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 f850 	bl	80128a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	68fa      	ldr	r2, [r7, #12]
 8012806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2220      	movs	r2, #32
 801280c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2200      	movs	r2, #0
 8012814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012822:	b580      	push	{r7, lr}
 8012824:	b084      	sub	sp, #16
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
 801282a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012832:	2b01      	cmp	r3, #1
 8012834:	d101      	bne.n	801283a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012836:	2302      	movs	r3, #2
 8012838:	e02d      	b.n	8012896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2201      	movs	r2, #1
 801283e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2224      	movs	r2, #36	; 0x24
 8012846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f022 0201 	bic.w	r2, r2, #1
 8012860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	683a      	ldr	r2, [r7, #0]
 8012872:	430a      	orrs	r2, r1
 8012874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 f812 	bl	80128a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2220      	movs	r2, #32
 8012888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2200      	movs	r2, #0
 8012890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012894:	2300      	movs	r3, #0
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
	...

080128a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d108      	bne.n	80128c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2201      	movs	r2, #1
 80128b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2201      	movs	r2, #1
 80128bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80128c0:	e031      	b.n	8012926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80128c2:	2308      	movs	r3, #8
 80128c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80128c6:	2308      	movs	r3, #8
 80128c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	689b      	ldr	r3, [r3, #8]
 80128d0:	0e5b      	lsrs	r3, r3, #25
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	f003 0307 	and.w	r3, r3, #7
 80128d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	0f5b      	lsrs	r3, r3, #29
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	f003 0307 	and.w	r3, r3, #7
 80128e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80128ea:	7bbb      	ldrb	r3, [r7, #14]
 80128ec:	7b3a      	ldrb	r2, [r7, #12]
 80128ee:	4911      	ldr	r1, [pc, #68]	; (8012934 <UARTEx_SetNbDataToProcess+0x94>)
 80128f0:	5c8a      	ldrb	r2, [r1, r2]
 80128f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80128f6:	7b3a      	ldrb	r2, [r7, #12]
 80128f8:	490f      	ldr	r1, [pc, #60]	; (8012938 <UARTEx_SetNbDataToProcess+0x98>)
 80128fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80128fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012900:	b29a      	uxth	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012908:	7bfb      	ldrb	r3, [r7, #15]
 801290a:	7b7a      	ldrb	r2, [r7, #13]
 801290c:	4909      	ldr	r1, [pc, #36]	; (8012934 <UARTEx_SetNbDataToProcess+0x94>)
 801290e:	5c8a      	ldrb	r2, [r1, r2]
 8012910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012914:	7b7a      	ldrb	r2, [r7, #13]
 8012916:	4908      	ldr	r1, [pc, #32]	; (8012938 <UARTEx_SetNbDataToProcess+0x98>)
 8012918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801291a:	fb93 f3f2 	sdiv	r3, r3, r2
 801291e:	b29a      	uxth	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012926:	bf00      	nop
 8012928:	3714      	adds	r7, #20
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
 8012932:	bf00      	nop
 8012934:	08018534 	.word	0x08018534
 8012938:	0801853c 	.word	0x0801853c

0801293c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801293c:	b480      	push	{r7}
 801293e:	b085      	sub	sp, #20
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012944:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012948:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012950:	b29a      	uxth	r2, r3
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	b29b      	uxth	r3, r3
 8012956:	43db      	mvns	r3, r3
 8012958:	b29b      	uxth	r3, r3
 801295a:	4013      	ands	r3, r2
 801295c:	b29a      	uxth	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012964:	2300      	movs	r3, #0
}
 8012966:	4618      	mov	r0, r3
 8012968:	3714      	adds	r7, #20
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr

08012972 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012972:	b084      	sub	sp, #16
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	f107 0014 	add.w	r0, r7, #20
 8012980:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2201      	movs	r2, #1
 8012988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2200      	movs	r2, #0
 80129a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	b004      	add	sp, #16
 80129b2:	4770      	bx	lr

080129b4 <__errno>:
 80129b4:	4b01      	ldr	r3, [pc, #4]	; (80129bc <__errno+0x8>)
 80129b6:	6818      	ldr	r0, [r3, #0]
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	20000020 	.word	0x20000020

080129c0 <__libc_init_array>:
 80129c0:	b570      	push	{r4, r5, r6, lr}
 80129c2:	4d0d      	ldr	r5, [pc, #52]	; (80129f8 <__libc_init_array+0x38>)
 80129c4:	4c0d      	ldr	r4, [pc, #52]	; (80129fc <__libc_init_array+0x3c>)
 80129c6:	1b64      	subs	r4, r4, r5
 80129c8:	10a4      	asrs	r4, r4, #2
 80129ca:	2600      	movs	r6, #0
 80129cc:	42a6      	cmp	r6, r4
 80129ce:	d109      	bne.n	80129e4 <__libc_init_array+0x24>
 80129d0:	4d0b      	ldr	r5, [pc, #44]	; (8012a00 <__libc_init_array+0x40>)
 80129d2:	4c0c      	ldr	r4, [pc, #48]	; (8012a04 <__libc_init_array+0x44>)
 80129d4:	f004 fb04 	bl	8016fe0 <_init>
 80129d8:	1b64      	subs	r4, r4, r5
 80129da:	10a4      	asrs	r4, r4, #2
 80129dc:	2600      	movs	r6, #0
 80129de:	42a6      	cmp	r6, r4
 80129e0:	d105      	bne.n	80129ee <__libc_init_array+0x2e>
 80129e2:	bd70      	pop	{r4, r5, r6, pc}
 80129e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80129e8:	4798      	blx	r3
 80129ea:	3601      	adds	r6, #1
 80129ec:	e7ee      	b.n	80129cc <__libc_init_array+0xc>
 80129ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80129f2:	4798      	blx	r3
 80129f4:	3601      	adds	r6, #1
 80129f6:	e7f2      	b.n	80129de <__libc_init_array+0x1e>
 80129f8:	08018af8 	.word	0x08018af8
 80129fc:	08018af8 	.word	0x08018af8
 8012a00:	08018af8 	.word	0x08018af8
 8012a04:	08018afc 	.word	0x08018afc

08012a08 <localtime>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4b0b      	ldr	r3, [pc, #44]	; (8012a38 <localtime+0x30>)
 8012a0c:	681d      	ldr	r5, [r3, #0]
 8012a0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012a10:	4604      	mov	r4, r0
 8012a12:	b953      	cbnz	r3, 8012a2a <localtime+0x22>
 8012a14:	2024      	movs	r0, #36	; 0x24
 8012a16:	f000 f909 	bl	8012c2c <malloc>
 8012a1a:	4602      	mov	r2, r0
 8012a1c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8012a1e:	b920      	cbnz	r0, 8012a2a <localtime+0x22>
 8012a20:	4b06      	ldr	r3, [pc, #24]	; (8012a3c <localtime+0x34>)
 8012a22:	4807      	ldr	r0, [pc, #28]	; (8012a40 <localtime+0x38>)
 8012a24:	2132      	movs	r1, #50	; 0x32
 8012a26:	f001 fb8d 	bl	8014144 <__assert_func>
 8012a2a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a32:	f000 b807 	b.w	8012a44 <localtime_r>
 8012a36:	bf00      	nop
 8012a38:	20000020 	.word	0x20000020
 8012a3c:	08018548 	.word	0x08018548
 8012a40:	0801855f 	.word	0x0801855f

08012a44 <localtime_r>:
 8012a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012a48:	4680      	mov	r8, r0
 8012a4a:	9101      	str	r1, [sp, #4]
 8012a4c:	f002 fa7c 	bl	8014f48 <__gettzinfo>
 8012a50:	9901      	ldr	r1, [sp, #4]
 8012a52:	4605      	mov	r5, r0
 8012a54:	4640      	mov	r0, r8
 8012a56:	f002 fa7b 	bl	8014f50 <gmtime_r>
 8012a5a:	6943      	ldr	r3, [r0, #20]
 8012a5c:	0799      	lsls	r1, r3, #30
 8012a5e:	4604      	mov	r4, r0
 8012a60:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8012a64:	d105      	bne.n	8012a72 <localtime_r+0x2e>
 8012a66:	2264      	movs	r2, #100	; 0x64
 8012a68:	fb97 f3f2 	sdiv	r3, r7, r2
 8012a6c:	fb02 7313 	mls	r3, r2, r3, r7
 8012a70:	bb73      	cbnz	r3, 8012ad0 <localtime_r+0x8c>
 8012a72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012a76:	fb97 f6f3 	sdiv	r6, r7, r3
 8012a7a:	fb03 7616 	mls	r6, r3, r6, r7
 8012a7e:	fab6 f386 	clz	r3, r6
 8012a82:	095b      	lsrs	r3, r3, #5
 8012a84:	4e67      	ldr	r6, [pc, #412]	; (8012c24 <localtime_r+0x1e0>)
 8012a86:	2230      	movs	r2, #48	; 0x30
 8012a88:	fb02 6603 	mla	r6, r2, r3, r6
 8012a8c:	f001 f9c8 	bl	8013e20 <__tz_lock>
 8012a90:	f001 f9d2 	bl	8013e38 <_tzset_unlocked>
 8012a94:	4b64      	ldr	r3, [pc, #400]	; (8012c28 <localtime_r+0x1e4>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	b34b      	cbz	r3, 8012aee <localtime_r+0xaa>
 8012a9a:	686b      	ldr	r3, [r5, #4]
 8012a9c:	42bb      	cmp	r3, r7
 8012a9e:	d119      	bne.n	8012ad4 <localtime_r+0x90>
 8012aa0:	682f      	ldr	r7, [r5, #0]
 8012aa2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012aa6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8012aaa:	b9df      	cbnz	r7, 8012ae4 <localtime_r+0xa0>
 8012aac:	4282      	cmp	r2, r0
 8012aae:	eb73 0101 	sbcs.w	r1, r3, r1
 8012ab2:	da23      	bge.n	8012afc <localtime_r+0xb8>
 8012ab4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8012ab8:	4282      	cmp	r2, r0
 8012aba:	eb73 0701 	sbcs.w	r7, r3, r1
 8012abe:	bfb4      	ite	lt
 8012ac0:	2701      	movlt	r7, #1
 8012ac2:	2700      	movge	r7, #0
 8012ac4:	4282      	cmp	r2, r0
 8012ac6:	418b      	sbcs	r3, r1
 8012ac8:	6227      	str	r7, [r4, #32]
 8012aca:	db19      	blt.n	8012b00 <localtime_r+0xbc>
 8012acc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012ace:	e018      	b.n	8012b02 <localtime_r+0xbe>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e7d7      	b.n	8012a84 <localtime_r+0x40>
 8012ad4:	4638      	mov	r0, r7
 8012ad6:	f001 f8f9 	bl	8013ccc <__tzcalc_limits>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	d1e0      	bne.n	8012aa0 <localtime_r+0x5c>
 8012ade:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae2:	e004      	b.n	8012aee <localtime_r+0xaa>
 8012ae4:	4282      	cmp	r2, r0
 8012ae6:	eb73 0101 	sbcs.w	r1, r3, r1
 8012aea:	da02      	bge.n	8012af2 <localtime_r+0xae>
 8012aec:	2300      	movs	r3, #0
 8012aee:	6223      	str	r3, [r4, #32]
 8012af0:	e7ec      	b.n	8012acc <localtime_r+0x88>
 8012af2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8012af6:	4282      	cmp	r2, r0
 8012af8:	418b      	sbcs	r3, r1
 8012afa:	daf7      	bge.n	8012aec <localtime_r+0xa8>
 8012afc:	2301      	movs	r3, #1
 8012afe:	6223      	str	r3, [r4, #32]
 8012b00:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8012b02:	6861      	ldr	r1, [r4, #4]
 8012b04:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8012b08:	203c      	movs	r0, #60	; 0x3c
 8012b0a:	fb93 f5f2 	sdiv	r5, r3, r2
 8012b0e:	fb02 3315 	mls	r3, r2, r5, r3
 8012b12:	fb93 f2f0 	sdiv	r2, r3, r0
 8012b16:	fb00 3012 	mls	r0, r0, r2, r3
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	1a89      	subs	r1, r1, r2
 8012b1e:	68a2      	ldr	r2, [r4, #8]
 8012b20:	6061      	str	r1, [r4, #4]
 8012b22:	1a1b      	subs	r3, r3, r0
 8012b24:	1b52      	subs	r2, r2, r5
 8012b26:	2b3b      	cmp	r3, #59	; 0x3b
 8012b28:	6023      	str	r3, [r4, #0]
 8012b2a:	60a2      	str	r2, [r4, #8]
 8012b2c:	dd35      	ble.n	8012b9a <localtime_r+0x156>
 8012b2e:	3101      	adds	r1, #1
 8012b30:	6061      	str	r1, [r4, #4]
 8012b32:	3b3c      	subs	r3, #60	; 0x3c
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	6863      	ldr	r3, [r4, #4]
 8012b38:	2b3b      	cmp	r3, #59	; 0x3b
 8012b3a:	dd34      	ble.n	8012ba6 <localtime_r+0x162>
 8012b3c:	3201      	adds	r2, #1
 8012b3e:	60a2      	str	r2, [r4, #8]
 8012b40:	3b3c      	subs	r3, #60	; 0x3c
 8012b42:	6063      	str	r3, [r4, #4]
 8012b44:	68a3      	ldr	r3, [r4, #8]
 8012b46:	2b17      	cmp	r3, #23
 8012b48:	dd33      	ble.n	8012bb2 <localtime_r+0x16e>
 8012b4a:	69e2      	ldr	r2, [r4, #28]
 8012b4c:	3201      	adds	r2, #1
 8012b4e:	61e2      	str	r2, [r4, #28]
 8012b50:	69a2      	ldr	r2, [r4, #24]
 8012b52:	3201      	adds	r2, #1
 8012b54:	2a06      	cmp	r2, #6
 8012b56:	bfc8      	it	gt
 8012b58:	2200      	movgt	r2, #0
 8012b5a:	61a2      	str	r2, [r4, #24]
 8012b5c:	68e2      	ldr	r2, [r4, #12]
 8012b5e:	3b18      	subs	r3, #24
 8012b60:	3201      	adds	r2, #1
 8012b62:	60a3      	str	r3, [r4, #8]
 8012b64:	6923      	ldr	r3, [r4, #16]
 8012b66:	60e2      	str	r2, [r4, #12]
 8012b68:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012b6c:	428a      	cmp	r2, r1
 8012b6e:	dd0e      	ble.n	8012b8e <localtime_r+0x14a>
 8012b70:	2b0b      	cmp	r3, #11
 8012b72:	eba2 0201 	sub.w	r2, r2, r1
 8012b76:	60e2      	str	r2, [r4, #12]
 8012b78:	f103 0201 	add.w	r2, r3, #1
 8012b7c:	bf09      	itett	eq
 8012b7e:	6963      	ldreq	r3, [r4, #20]
 8012b80:	6122      	strne	r2, [r4, #16]
 8012b82:	2200      	moveq	r2, #0
 8012b84:	3301      	addeq	r3, #1
 8012b86:	bf02      	ittt	eq
 8012b88:	6122      	streq	r2, [r4, #16]
 8012b8a:	6163      	streq	r3, [r4, #20]
 8012b8c:	61e2      	streq	r2, [r4, #28]
 8012b8e:	f001 f94d 	bl	8013e2c <__tz_unlock>
 8012b92:	4620      	mov	r0, r4
 8012b94:	b002      	add	sp, #8
 8012b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	dacb      	bge.n	8012b36 <localtime_r+0xf2>
 8012b9e:	3901      	subs	r1, #1
 8012ba0:	6061      	str	r1, [r4, #4]
 8012ba2:	333c      	adds	r3, #60	; 0x3c
 8012ba4:	e7c6      	b.n	8012b34 <localtime_r+0xf0>
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	dacc      	bge.n	8012b44 <localtime_r+0x100>
 8012baa:	3a01      	subs	r2, #1
 8012bac:	60a2      	str	r2, [r4, #8]
 8012bae:	333c      	adds	r3, #60	; 0x3c
 8012bb0:	e7c7      	b.n	8012b42 <localtime_r+0xfe>
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	daeb      	bge.n	8012b8e <localtime_r+0x14a>
 8012bb6:	69e2      	ldr	r2, [r4, #28]
 8012bb8:	3a01      	subs	r2, #1
 8012bba:	61e2      	str	r2, [r4, #28]
 8012bbc:	69a2      	ldr	r2, [r4, #24]
 8012bbe:	3a01      	subs	r2, #1
 8012bc0:	bf48      	it	mi
 8012bc2:	2206      	movmi	r2, #6
 8012bc4:	61a2      	str	r2, [r4, #24]
 8012bc6:	68e2      	ldr	r2, [r4, #12]
 8012bc8:	3318      	adds	r3, #24
 8012bca:	3a01      	subs	r2, #1
 8012bcc:	60e2      	str	r2, [r4, #12]
 8012bce:	60a3      	str	r3, [r4, #8]
 8012bd0:	2a00      	cmp	r2, #0
 8012bd2:	d1dc      	bne.n	8012b8e <localtime_r+0x14a>
 8012bd4:	6923      	ldr	r3, [r4, #16]
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	d405      	bmi.n	8012be6 <localtime_r+0x1a2>
 8012bda:	6123      	str	r3, [r4, #16]
 8012bdc:	6923      	ldr	r3, [r4, #16]
 8012bde:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012be2:	60e3      	str	r3, [r4, #12]
 8012be4:	e7d3      	b.n	8012b8e <localtime_r+0x14a>
 8012be6:	230b      	movs	r3, #11
 8012be8:	6123      	str	r3, [r4, #16]
 8012bea:	6963      	ldr	r3, [r4, #20]
 8012bec:	1e5a      	subs	r2, r3, #1
 8012bee:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012bf2:	6162      	str	r2, [r4, #20]
 8012bf4:	079a      	lsls	r2, r3, #30
 8012bf6:	d105      	bne.n	8012c04 <localtime_r+0x1c0>
 8012bf8:	2164      	movs	r1, #100	; 0x64
 8012bfa:	fb93 f2f1 	sdiv	r2, r3, r1
 8012bfe:	fb01 3212 	mls	r2, r1, r2, r3
 8012c02:	b962      	cbnz	r2, 8012c1e <localtime_r+0x1da>
 8012c04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012c08:	fb93 f1f2 	sdiv	r1, r3, r2
 8012c0c:	fb02 3311 	mls	r3, r2, r1, r3
 8012c10:	fab3 f383 	clz	r3, r3
 8012c14:	095b      	lsrs	r3, r3, #5
 8012c16:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012c1a:	61e3      	str	r3, [r4, #28]
 8012c1c:	e7de      	b.n	8012bdc <localtime_r+0x198>
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e7f9      	b.n	8012c16 <localtime_r+0x1d2>
 8012c22:	bf00      	nop
 8012c24:	0801861c 	.word	0x0801861c
 8012c28:	2000a7a4 	.word	0x2000a7a4

08012c2c <malloc>:
 8012c2c:	4b02      	ldr	r3, [pc, #8]	; (8012c38 <malloc+0xc>)
 8012c2e:	4601      	mov	r1, r0
 8012c30:	6818      	ldr	r0, [r3, #0]
 8012c32:	f000 baff 	b.w	8013234 <_malloc_r>
 8012c36:	bf00      	nop
 8012c38:	20000020 	.word	0x20000020

08012c3c <free>:
 8012c3c:	4b02      	ldr	r3, [pc, #8]	; (8012c48 <free+0xc>)
 8012c3e:	4601      	mov	r1, r0
 8012c40:	6818      	ldr	r0, [r3, #0]
 8012c42:	f000 ba8b 	b.w	801315c <_free_r>
 8012c46:	bf00      	nop
 8012c48:	20000020 	.word	0x20000020

08012c4c <memcpy>:
 8012c4c:	440a      	add	r2, r1
 8012c4e:	4291      	cmp	r1, r2
 8012c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c54:	d100      	bne.n	8012c58 <memcpy+0xc>
 8012c56:	4770      	bx	lr
 8012c58:	b510      	push	{r4, lr}
 8012c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c62:	4291      	cmp	r1, r2
 8012c64:	d1f9      	bne.n	8012c5a <memcpy+0xe>
 8012c66:	bd10      	pop	{r4, pc}

08012c68 <memset>:
 8012c68:	4402      	add	r2, r0
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d100      	bne.n	8012c72 <memset+0xa>
 8012c70:	4770      	bx	lr
 8012c72:	f803 1b01 	strb.w	r1, [r3], #1
 8012c76:	e7f9      	b.n	8012c6c <memset+0x4>

08012c78 <validate_structure>:
 8012c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c7a:	6801      	ldr	r1, [r0, #0]
 8012c7c:	293b      	cmp	r1, #59	; 0x3b
 8012c7e:	4604      	mov	r4, r0
 8012c80:	d911      	bls.n	8012ca6 <validate_structure+0x2e>
 8012c82:	223c      	movs	r2, #60	; 0x3c
 8012c84:	4668      	mov	r0, sp
 8012c86:	f001 fa7b 	bl	8014180 <div>
 8012c8a:	9a01      	ldr	r2, [sp, #4]
 8012c8c:	6863      	ldr	r3, [r4, #4]
 8012c8e:	9900      	ldr	r1, [sp, #0]
 8012c90:	2a00      	cmp	r2, #0
 8012c92:	440b      	add	r3, r1
 8012c94:	6063      	str	r3, [r4, #4]
 8012c96:	bfbb      	ittet	lt
 8012c98:	323c      	addlt	r2, #60	; 0x3c
 8012c9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012c9e:	6022      	strge	r2, [r4, #0]
 8012ca0:	6022      	strlt	r2, [r4, #0]
 8012ca2:	bfb8      	it	lt
 8012ca4:	6063      	strlt	r3, [r4, #4]
 8012ca6:	6861      	ldr	r1, [r4, #4]
 8012ca8:	293b      	cmp	r1, #59	; 0x3b
 8012caa:	d911      	bls.n	8012cd0 <validate_structure+0x58>
 8012cac:	223c      	movs	r2, #60	; 0x3c
 8012cae:	4668      	mov	r0, sp
 8012cb0:	f001 fa66 	bl	8014180 <div>
 8012cb4:	9a01      	ldr	r2, [sp, #4]
 8012cb6:	68a3      	ldr	r3, [r4, #8]
 8012cb8:	9900      	ldr	r1, [sp, #0]
 8012cba:	2a00      	cmp	r2, #0
 8012cbc:	440b      	add	r3, r1
 8012cbe:	60a3      	str	r3, [r4, #8]
 8012cc0:	bfbb      	ittet	lt
 8012cc2:	323c      	addlt	r2, #60	; 0x3c
 8012cc4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012cc8:	6062      	strge	r2, [r4, #4]
 8012cca:	6062      	strlt	r2, [r4, #4]
 8012ccc:	bfb8      	it	lt
 8012cce:	60a3      	strlt	r3, [r4, #8]
 8012cd0:	68a1      	ldr	r1, [r4, #8]
 8012cd2:	2917      	cmp	r1, #23
 8012cd4:	d911      	bls.n	8012cfa <validate_structure+0x82>
 8012cd6:	2218      	movs	r2, #24
 8012cd8:	4668      	mov	r0, sp
 8012cda:	f001 fa51 	bl	8014180 <div>
 8012cde:	9a01      	ldr	r2, [sp, #4]
 8012ce0:	68e3      	ldr	r3, [r4, #12]
 8012ce2:	9900      	ldr	r1, [sp, #0]
 8012ce4:	2a00      	cmp	r2, #0
 8012ce6:	440b      	add	r3, r1
 8012ce8:	60e3      	str	r3, [r4, #12]
 8012cea:	bfbb      	ittet	lt
 8012cec:	3218      	addlt	r2, #24
 8012cee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012cf2:	60a2      	strge	r2, [r4, #8]
 8012cf4:	60a2      	strlt	r2, [r4, #8]
 8012cf6:	bfb8      	it	lt
 8012cf8:	60e3      	strlt	r3, [r4, #12]
 8012cfa:	6921      	ldr	r1, [r4, #16]
 8012cfc:	290b      	cmp	r1, #11
 8012cfe:	d911      	bls.n	8012d24 <validate_structure+0xac>
 8012d00:	220c      	movs	r2, #12
 8012d02:	4668      	mov	r0, sp
 8012d04:	f001 fa3c 	bl	8014180 <div>
 8012d08:	9a01      	ldr	r2, [sp, #4]
 8012d0a:	6963      	ldr	r3, [r4, #20]
 8012d0c:	9900      	ldr	r1, [sp, #0]
 8012d0e:	2a00      	cmp	r2, #0
 8012d10:	440b      	add	r3, r1
 8012d12:	6163      	str	r3, [r4, #20]
 8012d14:	bfbb      	ittet	lt
 8012d16:	320c      	addlt	r2, #12
 8012d18:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012d1c:	6122      	strge	r2, [r4, #16]
 8012d1e:	6122      	strlt	r2, [r4, #16]
 8012d20:	bfb8      	it	lt
 8012d22:	6163      	strlt	r3, [r4, #20]
 8012d24:	6963      	ldr	r3, [r4, #20]
 8012d26:	0798      	lsls	r0, r3, #30
 8012d28:	d120      	bne.n	8012d6c <validate_structure+0xf4>
 8012d2a:	2164      	movs	r1, #100	; 0x64
 8012d2c:	fb93 f2f1 	sdiv	r2, r3, r1
 8012d30:	fb01 3212 	mls	r2, r1, r2, r3
 8012d34:	b9e2      	cbnz	r2, 8012d70 <validate_structure+0xf8>
 8012d36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8012d3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012d3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8012d42:	fb02 3311 	mls	r3, r2, r1, r3
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	bf14      	ite	ne
 8012d4a:	231c      	movne	r3, #28
 8012d4c:	231d      	moveq	r3, #29
 8012d4e:	68e2      	ldr	r2, [r4, #12]
 8012d50:	2a00      	cmp	r2, #0
 8012d52:	dc0f      	bgt.n	8012d74 <validate_structure+0xfc>
 8012d54:	4f33      	ldr	r7, [pc, #204]	; (8012e24 <validate_structure+0x1ac>)
 8012d56:	260b      	movs	r6, #11
 8012d58:	2064      	movs	r0, #100	; 0x64
 8012d5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012d5e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012d62:	f1bc 0f00 	cmp.w	ip, #0
 8012d66:	dd31      	ble.n	8012dcc <validate_structure+0x154>
 8012d68:	b003      	add	sp, #12
 8012d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d6c:	231c      	movs	r3, #28
 8012d6e:	e7ee      	b.n	8012d4e <validate_structure+0xd6>
 8012d70:	231d      	movs	r3, #29
 8012d72:	e7ec      	b.n	8012d4e <validate_structure+0xd6>
 8012d74:	4e2b      	ldr	r6, [pc, #172]	; (8012e24 <validate_structure+0x1ac>)
 8012d76:	2700      	movs	r7, #0
 8012d78:	2064      	movs	r0, #100	; 0x64
 8012d7a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012d7e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8012d82:	2a01      	cmp	r2, #1
 8012d84:	bf14      	ite	ne
 8012d86:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8012d8a:	469c      	moveq	ip, r3
 8012d8c:	4561      	cmp	r1, ip
 8012d8e:	ddeb      	ble.n	8012d68 <validate_structure+0xf0>
 8012d90:	3201      	adds	r2, #1
 8012d92:	eba1 010c 	sub.w	r1, r1, ip
 8012d96:	2a0c      	cmp	r2, #12
 8012d98:	60e1      	str	r1, [r4, #12]
 8012d9a:	6122      	str	r2, [r4, #16]
 8012d9c:	d1ef      	bne.n	8012d7e <validate_structure+0x106>
 8012d9e:	6963      	ldr	r3, [r4, #20]
 8012da0:	1c5a      	adds	r2, r3, #1
 8012da2:	0791      	lsls	r1, r2, #30
 8012da4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8012da8:	d137      	bne.n	8012e1a <validate_structure+0x1a2>
 8012daa:	fb92 f1f0 	sdiv	r1, r2, r0
 8012dae:	fb00 2211 	mls	r2, r0, r1, r2
 8012db2:	2a00      	cmp	r2, #0
 8012db4:	d133      	bne.n	8012e1e <validate_structure+0x1a6>
 8012db6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8012dba:	fb93 f2f5 	sdiv	r2, r3, r5
 8012dbe:	fb05 3312 	mls	r3, r5, r2, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	bf14      	ite	ne
 8012dc6:	231c      	movne	r3, #28
 8012dc8:	231d      	moveq	r3, #29
 8012dca:	e7d8      	b.n	8012d7e <validate_structure+0x106>
 8012dcc:	6921      	ldr	r1, [r4, #16]
 8012dce:	3901      	subs	r1, #1
 8012dd0:	6121      	str	r1, [r4, #16]
 8012dd2:	3101      	adds	r1, #1
 8012dd4:	d114      	bne.n	8012e00 <validate_structure+0x188>
 8012dd6:	6963      	ldr	r3, [r4, #20]
 8012dd8:	1e5a      	subs	r2, r3, #1
 8012dda:	0791      	lsls	r1, r2, #30
 8012ddc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8012de0:	d117      	bne.n	8012e12 <validate_structure+0x19a>
 8012de2:	fb92 f1f0 	sdiv	r1, r2, r0
 8012de6:	fb00 2211 	mls	r2, r0, r1, r2
 8012dea:	b9a2      	cbnz	r2, 8012e16 <validate_structure+0x19e>
 8012dec:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012df0:	fb93 f2f5 	sdiv	r2, r3, r5
 8012df4:	fb05 3312 	mls	r3, r5, r2, r3
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	bf14      	ite	ne
 8012dfc:	231c      	movne	r3, #28
 8012dfe:	231d      	moveq	r3, #29
 8012e00:	6922      	ldr	r2, [r4, #16]
 8012e02:	2a01      	cmp	r2, #1
 8012e04:	bf14      	ite	ne
 8012e06:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8012e0a:	461a      	moveq	r2, r3
 8012e0c:	4462      	add	r2, ip
 8012e0e:	60e2      	str	r2, [r4, #12]
 8012e10:	e7a5      	b.n	8012d5e <validate_structure+0xe6>
 8012e12:	231c      	movs	r3, #28
 8012e14:	e7f4      	b.n	8012e00 <validate_structure+0x188>
 8012e16:	231d      	movs	r3, #29
 8012e18:	e7f2      	b.n	8012e00 <validate_structure+0x188>
 8012e1a:	231c      	movs	r3, #28
 8012e1c:	e7af      	b.n	8012d7e <validate_structure+0x106>
 8012e1e:	231d      	movs	r3, #29
 8012e20:	e7ad      	b.n	8012d7e <validate_structure+0x106>
 8012e22:	bf00      	nop
 8012e24:	080185bc 	.word	0x080185bc

08012e28 <mktime>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	b085      	sub	sp, #20
 8012e2e:	4607      	mov	r7, r0
 8012e30:	f002 f88a 	bl	8014f48 <__gettzinfo>
 8012e34:	4681      	mov	r9, r0
 8012e36:	4638      	mov	r0, r7
 8012e38:	f7ff ff1e 	bl	8012c78 <validate_structure>
 8012e3c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8012e40:	233c      	movs	r3, #60	; 0x3c
 8012e42:	fb03 4400 	mla	r4, r3, r0, r4
 8012e46:	68b8      	ldr	r0, [r7, #8]
 8012e48:	4abc      	ldr	r2, [pc, #752]	; (801313c <mktime+0x314>)
 8012e4a:	697e      	ldr	r6, [r7, #20]
 8012e4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012e50:	fb03 4400 	mla	r4, r3, r0, r4
 8012e54:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8012e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012e5c:	3d01      	subs	r5, #1
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	4415      	add	r5, r2
 8012e62:	dd11      	ble.n	8012e88 <mktime+0x60>
 8012e64:	07b1      	lsls	r1, r6, #30
 8012e66:	d10f      	bne.n	8012e88 <mktime+0x60>
 8012e68:	2264      	movs	r2, #100	; 0x64
 8012e6a:	fb96 f3f2 	sdiv	r3, r6, r2
 8012e6e:	fb02 6313 	mls	r3, r2, r3, r6
 8012e72:	b943      	cbnz	r3, 8012e86 <mktime+0x5e>
 8012e74:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012e78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012e7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012e80:	fb02 3311 	mls	r3, r2, r1, r3
 8012e84:	b903      	cbnz	r3, 8012e88 <mktime+0x60>
 8012e86:	3501      	adds	r5, #1
 8012e88:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012e8c:	3310      	adds	r3, #16
 8012e8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8012e92:	4293      	cmp	r3, r2
 8012e94:	61fd      	str	r5, [r7, #28]
 8012e96:	f200 815d 	bhi.w	8013154 <mktime+0x32c>
 8012e9a:	2e46      	cmp	r6, #70	; 0x46
 8012e9c:	dd71      	ble.n	8012f82 <mktime+0x15a>
 8012e9e:	2346      	movs	r3, #70	; 0x46
 8012ea0:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012ea4:	2164      	movs	r1, #100	; 0x64
 8012ea6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012eaa:	079a      	lsls	r2, r3, #30
 8012eac:	d163      	bne.n	8012f76 <mktime+0x14e>
 8012eae:	fb93 f2f1 	sdiv	r2, r3, r1
 8012eb2:	fb01 3212 	mls	r2, r1, r2, r3
 8012eb6:	2a00      	cmp	r2, #0
 8012eb8:	d160      	bne.n	8012f7c <mktime+0x154>
 8012eba:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012ebe:	fb92 fef0 	sdiv	lr, r2, r0
 8012ec2:	fb00 221e 	mls	r2, r0, lr, r2
 8012ec6:	2a00      	cmp	r2, #0
 8012ec8:	bf14      	ite	ne
 8012eca:	4662      	movne	r2, ip
 8012ecc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	429e      	cmp	r6, r3
 8012ed4:	4415      	add	r5, r2
 8012ed6:	d1e8      	bne.n	8012eaa <mktime+0x82>
 8012ed8:	4b99      	ldr	r3, [pc, #612]	; (8013140 <mktime+0x318>)
 8012eda:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8012ede:	fbc5 4803 	smlal	r4, r8, r5, r3
 8012ee2:	f000 ff9d 	bl	8013e20 <__tz_lock>
 8012ee6:	f000 ffa7 	bl	8013e38 <_tzset_unlocked>
 8012eea:	4b96      	ldr	r3, [pc, #600]	; (8013144 <mktime+0x31c>)
 8012eec:	f8d3 b000 	ldr.w	fp, [r3]
 8012ef0:	f1bb 0f00 	cmp.w	fp, #0
 8012ef4:	d039      	beq.n	8012f6a <mktime+0x142>
 8012ef6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8012efa:	6978      	ldr	r0, [r7, #20]
 8012efc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012f00:	f1bb 0f01 	cmp.w	fp, #1
 8012f04:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012f08:	46da      	mov	sl, fp
 8012f0a:	bfa8      	it	ge
 8012f0c:	f04f 0a01 	movge.w	sl, #1
 8012f10:	4283      	cmp	r3, r0
 8012f12:	d178      	bne.n	8013006 <mktime+0x1de>
 8012f14:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8012f18:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012f1c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8012f20:	1a5b      	subs	r3, r3, r1
 8012f22:	9302      	str	r3, [sp, #8]
 8012f24:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8012f28:	9303      	str	r3, [sp, #12]
 8012f2a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8012f2e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8012f32:	9301      	str	r3, [sp, #4]
 8012f34:	ebb3 0c02 	subs.w	ip, r3, r2
 8012f38:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8012f3c:	4564      	cmp	r4, ip
 8012f3e:	eb78 0300 	sbcs.w	r3, r8, r0
 8012f42:	da66      	bge.n	8013012 <mktime+0x1ea>
 8012f44:	f8d9 3000 	ldr.w	r3, [r9]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d06f      	beq.n	801302c <mktime+0x204>
 8012f4c:	9b02      	ldr	r3, [sp, #8]
 8012f4e:	429c      	cmp	r4, r3
 8012f50:	9b03      	ldr	r3, [sp, #12]
 8012f52:	eb78 0303 	sbcs.w	r3, r8, r3
 8012f56:	db03      	blt.n	8012f60 <mktime+0x138>
 8012f58:	4564      	cmp	r4, ip
 8012f5a:	eb78 0300 	sbcs.w	r3, r8, r0
 8012f5e:	db6b      	blt.n	8013038 <mktime+0x210>
 8012f60:	f1bb 0f00 	cmp.w	fp, #0
 8012f64:	f04f 0b00 	mov.w	fp, #0
 8012f68:	da6b      	bge.n	8013042 <mktime+0x21a>
 8012f6a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8012f6e:	190c      	adds	r4, r1, r4
 8012f70:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8012f74:	e0a9      	b.n	80130ca <mktime+0x2a2>
 8012f76:	f240 126d 	movw	r2, #365	; 0x16d
 8012f7a:	e7a9      	b.n	8012ed0 <mktime+0xa8>
 8012f7c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012f80:	e7a6      	b.n	8012ed0 <mktime+0xa8>
 8012f82:	d0a9      	beq.n	8012ed8 <mktime+0xb0>
 8012f84:	2345      	movs	r3, #69	; 0x45
 8012f86:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012f8a:	2164      	movs	r1, #100	; 0x64
 8012f8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012f90:	e012      	b.n	8012fb8 <mktime+0x190>
 8012f92:	bb62      	cbnz	r2, 8012fee <mktime+0x1c6>
 8012f94:	fb93 f2f1 	sdiv	r2, r3, r1
 8012f98:	fb01 3212 	mls	r2, r1, r2, r3
 8012f9c:	bb52      	cbnz	r2, 8012ff4 <mktime+0x1cc>
 8012f9e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012fa2:	fb92 fef0 	sdiv	lr, r2, r0
 8012fa6:	fb00 221e 	mls	r2, r0, lr, r2
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	bf14      	ite	ne
 8012fae:	4662      	movne	r2, ip
 8012fb0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012fb4:	1aad      	subs	r5, r5, r2
 8012fb6:	3b01      	subs	r3, #1
 8012fb8:	429e      	cmp	r6, r3
 8012fba:	f003 0203 	and.w	r2, r3, #3
 8012fbe:	dbe8      	blt.n	8012f92 <mktime+0x16a>
 8012fc0:	b9da      	cbnz	r2, 8012ffa <mktime+0x1d2>
 8012fc2:	2264      	movs	r2, #100	; 0x64
 8012fc4:	fb96 f3f2 	sdiv	r3, r6, r2
 8012fc8:	fb02 6313 	mls	r3, r2, r3, r6
 8012fcc:	b9c3      	cbnz	r3, 8013000 <mktime+0x1d8>
 8012fce:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012fd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012fd6:	fb93 f1f2 	sdiv	r1, r3, r2
 8012fda:	fb02 3311 	mls	r3, r2, r1, r3
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	f240 136d 	movw	r3, #365	; 0x16d
 8012fe4:	bf08      	it	eq
 8012fe6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8012fea:	1aed      	subs	r5, r5, r3
 8012fec:	e774      	b.n	8012ed8 <mktime+0xb0>
 8012fee:	f240 126d 	movw	r2, #365	; 0x16d
 8012ff2:	e7df      	b.n	8012fb4 <mktime+0x18c>
 8012ff4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012ff8:	e7dc      	b.n	8012fb4 <mktime+0x18c>
 8012ffa:	f240 136d 	movw	r3, #365	; 0x16d
 8012ffe:	e7f4      	b.n	8012fea <mktime+0x1c2>
 8013000:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8013004:	e7f1      	b.n	8012fea <mktime+0x1c2>
 8013006:	f000 fe61 	bl	8013ccc <__tzcalc_limits>
 801300a:	2800      	cmp	r0, #0
 801300c:	d182      	bne.n	8012f14 <mktime+0xec>
 801300e:	46d3      	mov	fp, sl
 8013010:	e050      	b.n	80130b4 <mktime+0x28c>
 8013012:	9b01      	ldr	r3, [sp, #4]
 8013014:	1a5b      	subs	r3, r3, r1
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	ea4f 73e1 	mov.w	r3, r1, asr #31
 801301c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8013020:	9b01      	ldr	r3, [sp, #4]
 8013022:	429c      	cmp	r4, r3
 8013024:	eb78 030e 	sbcs.w	r3, r8, lr
 8013028:	dbf1      	blt.n	801300e <mktime+0x1e6>
 801302a:	e78b      	b.n	8012f44 <mktime+0x11c>
 801302c:	9b02      	ldr	r3, [sp, #8]
 801302e:	429c      	cmp	r4, r3
 8013030:	9b03      	ldr	r3, [sp, #12]
 8013032:	eb78 0303 	sbcs.w	r3, r8, r3
 8013036:	db8f      	blt.n	8012f58 <mktime+0x130>
 8013038:	f1bb 0f00 	cmp.w	fp, #0
 801303c:	db3e      	blt.n	80130bc <mktime+0x294>
 801303e:	f04f 0b01 	mov.w	fp, #1
 8013042:	ea8a 0a0b 	eor.w	sl, sl, fp
 8013046:	f1ba 0f01 	cmp.w	sl, #1
 801304a:	d133      	bne.n	80130b4 <mktime+0x28c>
 801304c:	f1bb 0f00 	cmp.w	fp, #0
 8013050:	d04e      	beq.n	80130f0 <mktime+0x2c8>
 8013052:	1a52      	subs	r2, r2, r1
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801305a:	4413      	add	r3, r2
 801305c:	1914      	adds	r4, r2, r4
 801305e:	603b      	str	r3, [r7, #0]
 8013060:	4638      	mov	r0, r7
 8013062:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8013066:	f7ff fe07 	bl	8012c78 <validate_structure>
 801306a:	68fa      	ldr	r2, [r7, #12]
 801306c:	ebb2 020a 	subs.w	r2, r2, sl
 8013070:	d020      	beq.n	80130b4 <mktime+0x28c>
 8013072:	2a01      	cmp	r2, #1
 8013074:	dc3e      	bgt.n	80130f4 <mktime+0x2cc>
 8013076:	1c90      	adds	r0, r2, #2
 8013078:	bfd8      	it	le
 801307a:	2201      	movle	r2, #1
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	18d3      	adds	r3, r2, r3
 8013080:	4415      	add	r5, r2
 8013082:	d540      	bpl.n	8013106 <mktime+0x2de>
 8013084:	1e73      	subs	r3, r6, #1
 8013086:	0799      	lsls	r1, r3, #30
 8013088:	d137      	bne.n	80130fa <mktime+0x2d2>
 801308a:	2264      	movs	r2, #100	; 0x64
 801308c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013090:	fb02 3311 	mls	r3, r2, r1, r3
 8013094:	bba3      	cbnz	r3, 8013100 <mktime+0x2d8>
 8013096:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801309a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801309e:	fb96 f2f3 	sdiv	r2, r6, r3
 80130a2:	fb03 6612 	mls	r6, r3, r2, r6
 80130a6:	2e00      	cmp	r6, #0
 80130a8:	f240 136d 	movw	r3, #365	; 0x16d
 80130ac:	bf18      	it	ne
 80130ae:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80130b2:	61fb      	str	r3, [r7, #28]
 80130b4:	f1bb 0f01 	cmp.w	fp, #1
 80130b8:	f47f af57 	bne.w	8012f6a <mktime+0x142>
 80130bc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80130c0:	190c      	adds	r4, r1, r4
 80130c2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80130c6:	f04f 0b01 	mov.w	fp, #1
 80130ca:	f000 feaf 	bl	8013e2c <__tz_unlock>
 80130ce:	3504      	adds	r5, #4
 80130d0:	2307      	movs	r3, #7
 80130d2:	fb95 f3f3 	sdiv	r3, r5, r3
 80130d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80130da:	1aed      	subs	r5, r5, r3
 80130dc:	bf48      	it	mi
 80130de:	3507      	addmi	r5, #7
 80130e0:	f8c7 b020 	str.w	fp, [r7, #32]
 80130e4:	61bd      	str	r5, [r7, #24]
 80130e6:	4620      	mov	r0, r4
 80130e8:	4641      	mov	r1, r8
 80130ea:	b005      	add	sp, #20
 80130ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f0:	1a8a      	subs	r2, r1, r2
 80130f2:	e7af      	b.n	8013054 <mktime+0x22c>
 80130f4:	f04f 32ff 	mov.w	r2, #4294967295
 80130f8:	e7c0      	b.n	801307c <mktime+0x254>
 80130fa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80130fe:	e7d8      	b.n	80130b2 <mktime+0x28a>
 8013100:	f240 136d 	movw	r3, #365	; 0x16d
 8013104:	e7d5      	b.n	80130b2 <mktime+0x28a>
 8013106:	07b2      	lsls	r2, r6, #30
 8013108:	d11e      	bne.n	8013148 <mktime+0x320>
 801310a:	2164      	movs	r1, #100	; 0x64
 801310c:	fb96 f2f1 	sdiv	r2, r6, r1
 8013110:	fb01 6212 	mls	r2, r1, r2, r6
 8013114:	b9da      	cbnz	r2, 801314e <mktime+0x326>
 8013116:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801311a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801311e:	fb96 f1f2 	sdiv	r1, r6, r2
 8013122:	fb02 6611 	mls	r6, r2, r1, r6
 8013126:	2e00      	cmp	r6, #0
 8013128:	f240 126d 	movw	r2, #365	; 0x16d
 801312c:	bf08      	it	eq
 801312e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8013132:	4293      	cmp	r3, r2
 8013134:	bfa8      	it	ge
 8013136:	1a9b      	subge	r3, r3, r2
 8013138:	e7bb      	b.n	80130b2 <mktime+0x28a>
 801313a:	bf00      	nop
 801313c:	080185ec 	.word	0x080185ec
 8013140:	00015180 	.word	0x00015180
 8013144:	2000a7a4 	.word	0x2000a7a4
 8013148:	f240 126d 	movw	r2, #365	; 0x16d
 801314c:	e7f1      	b.n	8013132 <mktime+0x30a>
 801314e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013152:	e7ee      	b.n	8013132 <mktime+0x30a>
 8013154:	f04f 34ff 	mov.w	r4, #4294967295
 8013158:	46a0      	mov	r8, r4
 801315a:	e7c4      	b.n	80130e6 <mktime+0x2be>

0801315c <_free_r>:
 801315c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801315e:	2900      	cmp	r1, #0
 8013160:	d044      	beq.n	80131ec <_free_r+0x90>
 8013162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013166:	9001      	str	r0, [sp, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	f1a1 0404 	sub.w	r4, r1, #4
 801316e:	bfb8      	it	lt
 8013170:	18e4      	addlt	r4, r4, r3
 8013172:	f001 ffa3 	bl	80150bc <__malloc_lock>
 8013176:	4a1e      	ldr	r2, [pc, #120]	; (80131f0 <_free_r+0x94>)
 8013178:	9801      	ldr	r0, [sp, #4]
 801317a:	6813      	ldr	r3, [r2, #0]
 801317c:	b933      	cbnz	r3, 801318c <_free_r+0x30>
 801317e:	6063      	str	r3, [r4, #4]
 8013180:	6014      	str	r4, [r2, #0]
 8013182:	b003      	add	sp, #12
 8013184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013188:	f001 bf9e 	b.w	80150c8 <__malloc_unlock>
 801318c:	42a3      	cmp	r3, r4
 801318e:	d908      	bls.n	80131a2 <_free_r+0x46>
 8013190:	6825      	ldr	r5, [r4, #0]
 8013192:	1961      	adds	r1, r4, r5
 8013194:	428b      	cmp	r3, r1
 8013196:	bf01      	itttt	eq
 8013198:	6819      	ldreq	r1, [r3, #0]
 801319a:	685b      	ldreq	r3, [r3, #4]
 801319c:	1949      	addeq	r1, r1, r5
 801319e:	6021      	streq	r1, [r4, #0]
 80131a0:	e7ed      	b.n	801317e <_free_r+0x22>
 80131a2:	461a      	mov	r2, r3
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	b10b      	cbz	r3, 80131ac <_free_r+0x50>
 80131a8:	42a3      	cmp	r3, r4
 80131aa:	d9fa      	bls.n	80131a2 <_free_r+0x46>
 80131ac:	6811      	ldr	r1, [r2, #0]
 80131ae:	1855      	adds	r5, r2, r1
 80131b0:	42a5      	cmp	r5, r4
 80131b2:	d10b      	bne.n	80131cc <_free_r+0x70>
 80131b4:	6824      	ldr	r4, [r4, #0]
 80131b6:	4421      	add	r1, r4
 80131b8:	1854      	adds	r4, r2, r1
 80131ba:	42a3      	cmp	r3, r4
 80131bc:	6011      	str	r1, [r2, #0]
 80131be:	d1e0      	bne.n	8013182 <_free_r+0x26>
 80131c0:	681c      	ldr	r4, [r3, #0]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	6053      	str	r3, [r2, #4]
 80131c6:	4421      	add	r1, r4
 80131c8:	6011      	str	r1, [r2, #0]
 80131ca:	e7da      	b.n	8013182 <_free_r+0x26>
 80131cc:	d902      	bls.n	80131d4 <_free_r+0x78>
 80131ce:	230c      	movs	r3, #12
 80131d0:	6003      	str	r3, [r0, #0]
 80131d2:	e7d6      	b.n	8013182 <_free_r+0x26>
 80131d4:	6825      	ldr	r5, [r4, #0]
 80131d6:	1961      	adds	r1, r4, r5
 80131d8:	428b      	cmp	r3, r1
 80131da:	bf04      	itt	eq
 80131dc:	6819      	ldreq	r1, [r3, #0]
 80131de:	685b      	ldreq	r3, [r3, #4]
 80131e0:	6063      	str	r3, [r4, #4]
 80131e2:	bf04      	itt	eq
 80131e4:	1949      	addeq	r1, r1, r5
 80131e6:	6021      	streq	r1, [r4, #0]
 80131e8:	6054      	str	r4, [r2, #4]
 80131ea:	e7ca      	b.n	8013182 <_free_r+0x26>
 80131ec:	b003      	add	sp, #12
 80131ee:	bd30      	pop	{r4, r5, pc}
 80131f0:	2000a780 	.word	0x2000a780

080131f4 <sbrk_aligned>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	4e0e      	ldr	r6, [pc, #56]	; (8013230 <sbrk_aligned+0x3c>)
 80131f8:	460c      	mov	r4, r1
 80131fa:	6831      	ldr	r1, [r6, #0]
 80131fc:	4605      	mov	r5, r0
 80131fe:	b911      	cbnz	r1, 8013206 <sbrk_aligned+0x12>
 8013200:	f000 fd34 	bl	8013c6c <_sbrk_r>
 8013204:	6030      	str	r0, [r6, #0]
 8013206:	4621      	mov	r1, r4
 8013208:	4628      	mov	r0, r5
 801320a:	f000 fd2f 	bl	8013c6c <_sbrk_r>
 801320e:	1c43      	adds	r3, r0, #1
 8013210:	d00a      	beq.n	8013228 <sbrk_aligned+0x34>
 8013212:	1cc4      	adds	r4, r0, #3
 8013214:	f024 0403 	bic.w	r4, r4, #3
 8013218:	42a0      	cmp	r0, r4
 801321a:	d007      	beq.n	801322c <sbrk_aligned+0x38>
 801321c:	1a21      	subs	r1, r4, r0
 801321e:	4628      	mov	r0, r5
 8013220:	f000 fd24 	bl	8013c6c <_sbrk_r>
 8013224:	3001      	adds	r0, #1
 8013226:	d101      	bne.n	801322c <sbrk_aligned+0x38>
 8013228:	f04f 34ff 	mov.w	r4, #4294967295
 801322c:	4620      	mov	r0, r4
 801322e:	bd70      	pop	{r4, r5, r6, pc}
 8013230:	2000a784 	.word	0x2000a784

08013234 <_malloc_r>:
 8013234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013238:	1ccd      	adds	r5, r1, #3
 801323a:	f025 0503 	bic.w	r5, r5, #3
 801323e:	3508      	adds	r5, #8
 8013240:	2d0c      	cmp	r5, #12
 8013242:	bf38      	it	cc
 8013244:	250c      	movcc	r5, #12
 8013246:	2d00      	cmp	r5, #0
 8013248:	4607      	mov	r7, r0
 801324a:	db01      	blt.n	8013250 <_malloc_r+0x1c>
 801324c:	42a9      	cmp	r1, r5
 801324e:	d905      	bls.n	801325c <_malloc_r+0x28>
 8013250:	230c      	movs	r3, #12
 8013252:	603b      	str	r3, [r7, #0]
 8013254:	2600      	movs	r6, #0
 8013256:	4630      	mov	r0, r6
 8013258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801325c:	4e2e      	ldr	r6, [pc, #184]	; (8013318 <_malloc_r+0xe4>)
 801325e:	f001 ff2d 	bl	80150bc <__malloc_lock>
 8013262:	6833      	ldr	r3, [r6, #0]
 8013264:	461c      	mov	r4, r3
 8013266:	bb34      	cbnz	r4, 80132b6 <_malloc_r+0x82>
 8013268:	4629      	mov	r1, r5
 801326a:	4638      	mov	r0, r7
 801326c:	f7ff ffc2 	bl	80131f4 <sbrk_aligned>
 8013270:	1c43      	adds	r3, r0, #1
 8013272:	4604      	mov	r4, r0
 8013274:	d14d      	bne.n	8013312 <_malloc_r+0xde>
 8013276:	6834      	ldr	r4, [r6, #0]
 8013278:	4626      	mov	r6, r4
 801327a:	2e00      	cmp	r6, #0
 801327c:	d140      	bne.n	8013300 <_malloc_r+0xcc>
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	4631      	mov	r1, r6
 8013282:	4638      	mov	r0, r7
 8013284:	eb04 0803 	add.w	r8, r4, r3
 8013288:	f000 fcf0 	bl	8013c6c <_sbrk_r>
 801328c:	4580      	cmp	r8, r0
 801328e:	d13a      	bne.n	8013306 <_malloc_r+0xd2>
 8013290:	6821      	ldr	r1, [r4, #0]
 8013292:	3503      	adds	r5, #3
 8013294:	1a6d      	subs	r5, r5, r1
 8013296:	f025 0503 	bic.w	r5, r5, #3
 801329a:	3508      	adds	r5, #8
 801329c:	2d0c      	cmp	r5, #12
 801329e:	bf38      	it	cc
 80132a0:	250c      	movcc	r5, #12
 80132a2:	4629      	mov	r1, r5
 80132a4:	4638      	mov	r0, r7
 80132a6:	f7ff ffa5 	bl	80131f4 <sbrk_aligned>
 80132aa:	3001      	adds	r0, #1
 80132ac:	d02b      	beq.n	8013306 <_malloc_r+0xd2>
 80132ae:	6823      	ldr	r3, [r4, #0]
 80132b0:	442b      	add	r3, r5
 80132b2:	6023      	str	r3, [r4, #0]
 80132b4:	e00e      	b.n	80132d4 <_malloc_r+0xa0>
 80132b6:	6822      	ldr	r2, [r4, #0]
 80132b8:	1b52      	subs	r2, r2, r5
 80132ba:	d41e      	bmi.n	80132fa <_malloc_r+0xc6>
 80132bc:	2a0b      	cmp	r2, #11
 80132be:	d916      	bls.n	80132ee <_malloc_r+0xba>
 80132c0:	1961      	adds	r1, r4, r5
 80132c2:	42a3      	cmp	r3, r4
 80132c4:	6025      	str	r5, [r4, #0]
 80132c6:	bf18      	it	ne
 80132c8:	6059      	strne	r1, [r3, #4]
 80132ca:	6863      	ldr	r3, [r4, #4]
 80132cc:	bf08      	it	eq
 80132ce:	6031      	streq	r1, [r6, #0]
 80132d0:	5162      	str	r2, [r4, r5]
 80132d2:	604b      	str	r3, [r1, #4]
 80132d4:	4638      	mov	r0, r7
 80132d6:	f104 060b 	add.w	r6, r4, #11
 80132da:	f001 fef5 	bl	80150c8 <__malloc_unlock>
 80132de:	f026 0607 	bic.w	r6, r6, #7
 80132e2:	1d23      	adds	r3, r4, #4
 80132e4:	1af2      	subs	r2, r6, r3
 80132e6:	d0b6      	beq.n	8013256 <_malloc_r+0x22>
 80132e8:	1b9b      	subs	r3, r3, r6
 80132ea:	50a3      	str	r3, [r4, r2]
 80132ec:	e7b3      	b.n	8013256 <_malloc_r+0x22>
 80132ee:	6862      	ldr	r2, [r4, #4]
 80132f0:	42a3      	cmp	r3, r4
 80132f2:	bf0c      	ite	eq
 80132f4:	6032      	streq	r2, [r6, #0]
 80132f6:	605a      	strne	r2, [r3, #4]
 80132f8:	e7ec      	b.n	80132d4 <_malloc_r+0xa0>
 80132fa:	4623      	mov	r3, r4
 80132fc:	6864      	ldr	r4, [r4, #4]
 80132fe:	e7b2      	b.n	8013266 <_malloc_r+0x32>
 8013300:	4634      	mov	r4, r6
 8013302:	6876      	ldr	r6, [r6, #4]
 8013304:	e7b9      	b.n	801327a <_malloc_r+0x46>
 8013306:	230c      	movs	r3, #12
 8013308:	603b      	str	r3, [r7, #0]
 801330a:	4638      	mov	r0, r7
 801330c:	f001 fedc 	bl	80150c8 <__malloc_unlock>
 8013310:	e7a1      	b.n	8013256 <_malloc_r+0x22>
 8013312:	6025      	str	r5, [r4, #0]
 8013314:	e7de      	b.n	80132d4 <_malloc_r+0xa0>
 8013316:	bf00      	nop
 8013318:	2000a780 	.word	0x2000a780

0801331c <__cvt>:
 801331c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013320:	ec55 4b10 	vmov	r4, r5, d0
 8013324:	2d00      	cmp	r5, #0
 8013326:	460e      	mov	r6, r1
 8013328:	4619      	mov	r1, r3
 801332a:	462b      	mov	r3, r5
 801332c:	bfbb      	ittet	lt
 801332e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013332:	461d      	movlt	r5, r3
 8013334:	2300      	movge	r3, #0
 8013336:	232d      	movlt	r3, #45	; 0x2d
 8013338:	700b      	strb	r3, [r1, #0]
 801333a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801333c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013340:	4691      	mov	r9, r2
 8013342:	f023 0820 	bic.w	r8, r3, #32
 8013346:	bfbc      	itt	lt
 8013348:	4622      	movlt	r2, r4
 801334a:	4614      	movlt	r4, r2
 801334c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013350:	d005      	beq.n	801335e <__cvt+0x42>
 8013352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013356:	d100      	bne.n	801335a <__cvt+0x3e>
 8013358:	3601      	adds	r6, #1
 801335a:	2102      	movs	r1, #2
 801335c:	e000      	b.n	8013360 <__cvt+0x44>
 801335e:	2103      	movs	r1, #3
 8013360:	ab03      	add	r3, sp, #12
 8013362:	9301      	str	r3, [sp, #4]
 8013364:	ab02      	add	r3, sp, #8
 8013366:	9300      	str	r3, [sp, #0]
 8013368:	ec45 4b10 	vmov	d0, r4, r5
 801336c:	4653      	mov	r3, sl
 801336e:	4632      	mov	r2, r6
 8013370:	f000 ffa6 	bl	80142c0 <_dtoa_r>
 8013374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013378:	4607      	mov	r7, r0
 801337a:	d102      	bne.n	8013382 <__cvt+0x66>
 801337c:	f019 0f01 	tst.w	r9, #1
 8013380:	d022      	beq.n	80133c8 <__cvt+0xac>
 8013382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013386:	eb07 0906 	add.w	r9, r7, r6
 801338a:	d110      	bne.n	80133ae <__cvt+0x92>
 801338c:	783b      	ldrb	r3, [r7, #0]
 801338e:	2b30      	cmp	r3, #48	; 0x30
 8013390:	d10a      	bne.n	80133a8 <__cvt+0x8c>
 8013392:	2200      	movs	r2, #0
 8013394:	2300      	movs	r3, #0
 8013396:	4620      	mov	r0, r4
 8013398:	4629      	mov	r1, r5
 801339a:	f7ed fb77 	bl	8000a8c <__aeabi_dcmpeq>
 801339e:	b918      	cbnz	r0, 80133a8 <__cvt+0x8c>
 80133a0:	f1c6 0601 	rsb	r6, r6, #1
 80133a4:	f8ca 6000 	str.w	r6, [sl]
 80133a8:	f8da 3000 	ldr.w	r3, [sl]
 80133ac:	4499      	add	r9, r3
 80133ae:	2200      	movs	r2, #0
 80133b0:	2300      	movs	r3, #0
 80133b2:	4620      	mov	r0, r4
 80133b4:	4629      	mov	r1, r5
 80133b6:	f7ed fb69 	bl	8000a8c <__aeabi_dcmpeq>
 80133ba:	b108      	cbz	r0, 80133c0 <__cvt+0xa4>
 80133bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80133c0:	2230      	movs	r2, #48	; 0x30
 80133c2:	9b03      	ldr	r3, [sp, #12]
 80133c4:	454b      	cmp	r3, r9
 80133c6:	d307      	bcc.n	80133d8 <__cvt+0xbc>
 80133c8:	9b03      	ldr	r3, [sp, #12]
 80133ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133cc:	1bdb      	subs	r3, r3, r7
 80133ce:	4638      	mov	r0, r7
 80133d0:	6013      	str	r3, [r2, #0]
 80133d2:	b004      	add	sp, #16
 80133d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133d8:	1c59      	adds	r1, r3, #1
 80133da:	9103      	str	r1, [sp, #12]
 80133dc:	701a      	strb	r2, [r3, #0]
 80133de:	e7f0      	b.n	80133c2 <__cvt+0xa6>

080133e0 <__exponent>:
 80133e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133e2:	4603      	mov	r3, r0
 80133e4:	2900      	cmp	r1, #0
 80133e6:	bfb8      	it	lt
 80133e8:	4249      	neglt	r1, r1
 80133ea:	f803 2b02 	strb.w	r2, [r3], #2
 80133ee:	bfb4      	ite	lt
 80133f0:	222d      	movlt	r2, #45	; 0x2d
 80133f2:	222b      	movge	r2, #43	; 0x2b
 80133f4:	2909      	cmp	r1, #9
 80133f6:	7042      	strb	r2, [r0, #1]
 80133f8:	dd2a      	ble.n	8013450 <__exponent+0x70>
 80133fa:	f10d 0407 	add.w	r4, sp, #7
 80133fe:	46a4      	mov	ip, r4
 8013400:	270a      	movs	r7, #10
 8013402:	46a6      	mov	lr, r4
 8013404:	460a      	mov	r2, r1
 8013406:	fb91 f6f7 	sdiv	r6, r1, r7
 801340a:	fb07 1516 	mls	r5, r7, r6, r1
 801340e:	3530      	adds	r5, #48	; 0x30
 8013410:	2a63      	cmp	r2, #99	; 0x63
 8013412:	f104 34ff 	add.w	r4, r4, #4294967295
 8013416:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801341a:	4631      	mov	r1, r6
 801341c:	dcf1      	bgt.n	8013402 <__exponent+0x22>
 801341e:	3130      	adds	r1, #48	; 0x30
 8013420:	f1ae 0502 	sub.w	r5, lr, #2
 8013424:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013428:	1c44      	adds	r4, r0, #1
 801342a:	4629      	mov	r1, r5
 801342c:	4561      	cmp	r1, ip
 801342e:	d30a      	bcc.n	8013446 <__exponent+0x66>
 8013430:	f10d 0209 	add.w	r2, sp, #9
 8013434:	eba2 020e 	sub.w	r2, r2, lr
 8013438:	4565      	cmp	r5, ip
 801343a:	bf88      	it	hi
 801343c:	2200      	movhi	r2, #0
 801343e:	4413      	add	r3, r2
 8013440:	1a18      	subs	r0, r3, r0
 8013442:	b003      	add	sp, #12
 8013444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013446:	f811 2b01 	ldrb.w	r2, [r1], #1
 801344a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801344e:	e7ed      	b.n	801342c <__exponent+0x4c>
 8013450:	2330      	movs	r3, #48	; 0x30
 8013452:	3130      	adds	r1, #48	; 0x30
 8013454:	7083      	strb	r3, [r0, #2]
 8013456:	70c1      	strb	r1, [r0, #3]
 8013458:	1d03      	adds	r3, r0, #4
 801345a:	e7f1      	b.n	8013440 <__exponent+0x60>

0801345c <_printf_float>:
 801345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013460:	ed2d 8b02 	vpush	{d8}
 8013464:	b08d      	sub	sp, #52	; 0x34
 8013466:	460c      	mov	r4, r1
 8013468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801346c:	4616      	mov	r6, r2
 801346e:	461f      	mov	r7, r3
 8013470:	4605      	mov	r5, r0
 8013472:	f001 fe19 	bl	80150a8 <_localeconv_r>
 8013476:	f8d0 a000 	ldr.w	sl, [r0]
 801347a:	4650      	mov	r0, sl
 801347c:	f7ec fe80 	bl	8000180 <strlen>
 8013480:	2300      	movs	r3, #0
 8013482:	930a      	str	r3, [sp, #40]	; 0x28
 8013484:	6823      	ldr	r3, [r4, #0]
 8013486:	9305      	str	r3, [sp, #20]
 8013488:	f8d8 3000 	ldr.w	r3, [r8]
 801348c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013490:	3307      	adds	r3, #7
 8013492:	f023 0307 	bic.w	r3, r3, #7
 8013496:	f103 0208 	add.w	r2, r3, #8
 801349a:	f8c8 2000 	str.w	r2, [r8]
 801349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80134a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80134aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80134ae:	9307      	str	r3, [sp, #28]
 80134b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80134b4:	ee08 0a10 	vmov	s16, r0
 80134b8:	4b9f      	ldr	r3, [pc, #636]	; (8013738 <_printf_float+0x2dc>)
 80134ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134be:	f04f 32ff 	mov.w	r2, #4294967295
 80134c2:	f7ed fb15 	bl	8000af0 <__aeabi_dcmpun>
 80134c6:	bb88      	cbnz	r0, 801352c <_printf_float+0xd0>
 80134c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134cc:	4b9a      	ldr	r3, [pc, #616]	; (8013738 <_printf_float+0x2dc>)
 80134ce:	f04f 32ff 	mov.w	r2, #4294967295
 80134d2:	f7ed faef 	bl	8000ab4 <__aeabi_dcmple>
 80134d6:	bb48      	cbnz	r0, 801352c <_printf_float+0xd0>
 80134d8:	2200      	movs	r2, #0
 80134da:	2300      	movs	r3, #0
 80134dc:	4640      	mov	r0, r8
 80134de:	4649      	mov	r1, r9
 80134e0:	f7ed fade 	bl	8000aa0 <__aeabi_dcmplt>
 80134e4:	b110      	cbz	r0, 80134ec <_printf_float+0x90>
 80134e6:	232d      	movs	r3, #45	; 0x2d
 80134e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134ec:	4b93      	ldr	r3, [pc, #588]	; (801373c <_printf_float+0x2e0>)
 80134ee:	4894      	ldr	r0, [pc, #592]	; (8013740 <_printf_float+0x2e4>)
 80134f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80134f4:	bf94      	ite	ls
 80134f6:	4698      	movls	r8, r3
 80134f8:	4680      	movhi	r8, r0
 80134fa:	2303      	movs	r3, #3
 80134fc:	6123      	str	r3, [r4, #16]
 80134fe:	9b05      	ldr	r3, [sp, #20]
 8013500:	f023 0204 	bic.w	r2, r3, #4
 8013504:	6022      	str	r2, [r4, #0]
 8013506:	f04f 0900 	mov.w	r9, #0
 801350a:	9700      	str	r7, [sp, #0]
 801350c:	4633      	mov	r3, r6
 801350e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013510:	4621      	mov	r1, r4
 8013512:	4628      	mov	r0, r5
 8013514:	f000 f9d8 	bl	80138c8 <_printf_common>
 8013518:	3001      	adds	r0, #1
 801351a:	f040 8090 	bne.w	801363e <_printf_float+0x1e2>
 801351e:	f04f 30ff 	mov.w	r0, #4294967295
 8013522:	b00d      	add	sp, #52	; 0x34
 8013524:	ecbd 8b02 	vpop	{d8}
 8013528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352c:	4642      	mov	r2, r8
 801352e:	464b      	mov	r3, r9
 8013530:	4640      	mov	r0, r8
 8013532:	4649      	mov	r1, r9
 8013534:	f7ed fadc 	bl	8000af0 <__aeabi_dcmpun>
 8013538:	b140      	cbz	r0, 801354c <_printf_float+0xf0>
 801353a:	464b      	mov	r3, r9
 801353c:	2b00      	cmp	r3, #0
 801353e:	bfbc      	itt	lt
 8013540:	232d      	movlt	r3, #45	; 0x2d
 8013542:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013546:	487f      	ldr	r0, [pc, #508]	; (8013744 <_printf_float+0x2e8>)
 8013548:	4b7f      	ldr	r3, [pc, #508]	; (8013748 <_printf_float+0x2ec>)
 801354a:	e7d1      	b.n	80134f0 <_printf_float+0x94>
 801354c:	6863      	ldr	r3, [r4, #4]
 801354e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013552:	9206      	str	r2, [sp, #24]
 8013554:	1c5a      	adds	r2, r3, #1
 8013556:	d13f      	bne.n	80135d8 <_printf_float+0x17c>
 8013558:	2306      	movs	r3, #6
 801355a:	6063      	str	r3, [r4, #4]
 801355c:	9b05      	ldr	r3, [sp, #20]
 801355e:	6861      	ldr	r1, [r4, #4]
 8013560:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013564:	2300      	movs	r3, #0
 8013566:	9303      	str	r3, [sp, #12]
 8013568:	ab0a      	add	r3, sp, #40	; 0x28
 801356a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801356e:	ab09      	add	r3, sp, #36	; 0x24
 8013570:	ec49 8b10 	vmov	d0, r8, r9
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	6022      	str	r2, [r4, #0]
 8013578:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801357c:	4628      	mov	r0, r5
 801357e:	f7ff fecd 	bl	801331c <__cvt>
 8013582:	9b06      	ldr	r3, [sp, #24]
 8013584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013586:	2b47      	cmp	r3, #71	; 0x47
 8013588:	4680      	mov	r8, r0
 801358a:	d108      	bne.n	801359e <_printf_float+0x142>
 801358c:	1cc8      	adds	r0, r1, #3
 801358e:	db02      	blt.n	8013596 <_printf_float+0x13a>
 8013590:	6863      	ldr	r3, [r4, #4]
 8013592:	4299      	cmp	r1, r3
 8013594:	dd41      	ble.n	801361a <_printf_float+0x1be>
 8013596:	f1ab 0b02 	sub.w	fp, fp, #2
 801359a:	fa5f fb8b 	uxtb.w	fp, fp
 801359e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135a2:	d820      	bhi.n	80135e6 <_printf_float+0x18a>
 80135a4:	3901      	subs	r1, #1
 80135a6:	465a      	mov	r2, fp
 80135a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80135ac:	9109      	str	r1, [sp, #36]	; 0x24
 80135ae:	f7ff ff17 	bl	80133e0 <__exponent>
 80135b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135b4:	1813      	adds	r3, r2, r0
 80135b6:	2a01      	cmp	r2, #1
 80135b8:	4681      	mov	r9, r0
 80135ba:	6123      	str	r3, [r4, #16]
 80135bc:	dc02      	bgt.n	80135c4 <_printf_float+0x168>
 80135be:	6822      	ldr	r2, [r4, #0]
 80135c0:	07d2      	lsls	r2, r2, #31
 80135c2:	d501      	bpl.n	80135c8 <_printf_float+0x16c>
 80135c4:	3301      	adds	r3, #1
 80135c6:	6123      	str	r3, [r4, #16]
 80135c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d09c      	beq.n	801350a <_printf_float+0xae>
 80135d0:	232d      	movs	r3, #45	; 0x2d
 80135d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135d6:	e798      	b.n	801350a <_printf_float+0xae>
 80135d8:	9a06      	ldr	r2, [sp, #24]
 80135da:	2a47      	cmp	r2, #71	; 0x47
 80135dc:	d1be      	bne.n	801355c <_printf_float+0x100>
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1bc      	bne.n	801355c <_printf_float+0x100>
 80135e2:	2301      	movs	r3, #1
 80135e4:	e7b9      	b.n	801355a <_printf_float+0xfe>
 80135e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80135ea:	d118      	bne.n	801361e <_printf_float+0x1c2>
 80135ec:	2900      	cmp	r1, #0
 80135ee:	6863      	ldr	r3, [r4, #4]
 80135f0:	dd0b      	ble.n	801360a <_printf_float+0x1ae>
 80135f2:	6121      	str	r1, [r4, #16]
 80135f4:	b913      	cbnz	r3, 80135fc <_printf_float+0x1a0>
 80135f6:	6822      	ldr	r2, [r4, #0]
 80135f8:	07d0      	lsls	r0, r2, #31
 80135fa:	d502      	bpl.n	8013602 <_printf_float+0x1a6>
 80135fc:	3301      	adds	r3, #1
 80135fe:	440b      	add	r3, r1
 8013600:	6123      	str	r3, [r4, #16]
 8013602:	65a1      	str	r1, [r4, #88]	; 0x58
 8013604:	f04f 0900 	mov.w	r9, #0
 8013608:	e7de      	b.n	80135c8 <_printf_float+0x16c>
 801360a:	b913      	cbnz	r3, 8013612 <_printf_float+0x1b6>
 801360c:	6822      	ldr	r2, [r4, #0]
 801360e:	07d2      	lsls	r2, r2, #31
 8013610:	d501      	bpl.n	8013616 <_printf_float+0x1ba>
 8013612:	3302      	adds	r3, #2
 8013614:	e7f4      	b.n	8013600 <_printf_float+0x1a4>
 8013616:	2301      	movs	r3, #1
 8013618:	e7f2      	b.n	8013600 <_printf_float+0x1a4>
 801361a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801361e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013620:	4299      	cmp	r1, r3
 8013622:	db05      	blt.n	8013630 <_printf_float+0x1d4>
 8013624:	6823      	ldr	r3, [r4, #0]
 8013626:	6121      	str	r1, [r4, #16]
 8013628:	07d8      	lsls	r0, r3, #31
 801362a:	d5ea      	bpl.n	8013602 <_printf_float+0x1a6>
 801362c:	1c4b      	adds	r3, r1, #1
 801362e:	e7e7      	b.n	8013600 <_printf_float+0x1a4>
 8013630:	2900      	cmp	r1, #0
 8013632:	bfd4      	ite	le
 8013634:	f1c1 0202 	rsble	r2, r1, #2
 8013638:	2201      	movgt	r2, #1
 801363a:	4413      	add	r3, r2
 801363c:	e7e0      	b.n	8013600 <_printf_float+0x1a4>
 801363e:	6823      	ldr	r3, [r4, #0]
 8013640:	055a      	lsls	r2, r3, #21
 8013642:	d407      	bmi.n	8013654 <_printf_float+0x1f8>
 8013644:	6923      	ldr	r3, [r4, #16]
 8013646:	4642      	mov	r2, r8
 8013648:	4631      	mov	r1, r6
 801364a:	4628      	mov	r0, r5
 801364c:	47b8      	blx	r7
 801364e:	3001      	adds	r0, #1
 8013650:	d12c      	bne.n	80136ac <_printf_float+0x250>
 8013652:	e764      	b.n	801351e <_printf_float+0xc2>
 8013654:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013658:	f240 80e0 	bls.w	801381c <_printf_float+0x3c0>
 801365c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013660:	2200      	movs	r2, #0
 8013662:	2300      	movs	r3, #0
 8013664:	f7ed fa12 	bl	8000a8c <__aeabi_dcmpeq>
 8013668:	2800      	cmp	r0, #0
 801366a:	d034      	beq.n	80136d6 <_printf_float+0x27a>
 801366c:	4a37      	ldr	r2, [pc, #220]	; (801374c <_printf_float+0x2f0>)
 801366e:	2301      	movs	r3, #1
 8013670:	4631      	mov	r1, r6
 8013672:	4628      	mov	r0, r5
 8013674:	47b8      	blx	r7
 8013676:	3001      	adds	r0, #1
 8013678:	f43f af51 	beq.w	801351e <_printf_float+0xc2>
 801367c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013680:	429a      	cmp	r2, r3
 8013682:	db02      	blt.n	801368a <_printf_float+0x22e>
 8013684:	6823      	ldr	r3, [r4, #0]
 8013686:	07d8      	lsls	r0, r3, #31
 8013688:	d510      	bpl.n	80136ac <_printf_float+0x250>
 801368a:	ee18 3a10 	vmov	r3, s16
 801368e:	4652      	mov	r2, sl
 8013690:	4631      	mov	r1, r6
 8013692:	4628      	mov	r0, r5
 8013694:	47b8      	blx	r7
 8013696:	3001      	adds	r0, #1
 8013698:	f43f af41 	beq.w	801351e <_printf_float+0xc2>
 801369c:	f04f 0800 	mov.w	r8, #0
 80136a0:	f104 091a 	add.w	r9, r4, #26
 80136a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136a6:	3b01      	subs	r3, #1
 80136a8:	4543      	cmp	r3, r8
 80136aa:	dc09      	bgt.n	80136c0 <_printf_float+0x264>
 80136ac:	6823      	ldr	r3, [r4, #0]
 80136ae:	079b      	lsls	r3, r3, #30
 80136b0:	f100 8105 	bmi.w	80138be <_printf_float+0x462>
 80136b4:	68e0      	ldr	r0, [r4, #12]
 80136b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136b8:	4298      	cmp	r0, r3
 80136ba:	bfb8      	it	lt
 80136bc:	4618      	movlt	r0, r3
 80136be:	e730      	b.n	8013522 <_printf_float+0xc6>
 80136c0:	2301      	movs	r3, #1
 80136c2:	464a      	mov	r2, r9
 80136c4:	4631      	mov	r1, r6
 80136c6:	4628      	mov	r0, r5
 80136c8:	47b8      	blx	r7
 80136ca:	3001      	adds	r0, #1
 80136cc:	f43f af27 	beq.w	801351e <_printf_float+0xc2>
 80136d0:	f108 0801 	add.w	r8, r8, #1
 80136d4:	e7e6      	b.n	80136a4 <_printf_float+0x248>
 80136d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d8:	2b00      	cmp	r3, #0
 80136da:	dc39      	bgt.n	8013750 <_printf_float+0x2f4>
 80136dc:	4a1b      	ldr	r2, [pc, #108]	; (801374c <_printf_float+0x2f0>)
 80136de:	2301      	movs	r3, #1
 80136e0:	4631      	mov	r1, r6
 80136e2:	4628      	mov	r0, r5
 80136e4:	47b8      	blx	r7
 80136e6:	3001      	adds	r0, #1
 80136e8:	f43f af19 	beq.w	801351e <_printf_float+0xc2>
 80136ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136f0:	4313      	orrs	r3, r2
 80136f2:	d102      	bne.n	80136fa <_printf_float+0x29e>
 80136f4:	6823      	ldr	r3, [r4, #0]
 80136f6:	07d9      	lsls	r1, r3, #31
 80136f8:	d5d8      	bpl.n	80136ac <_printf_float+0x250>
 80136fa:	ee18 3a10 	vmov	r3, s16
 80136fe:	4652      	mov	r2, sl
 8013700:	4631      	mov	r1, r6
 8013702:	4628      	mov	r0, r5
 8013704:	47b8      	blx	r7
 8013706:	3001      	adds	r0, #1
 8013708:	f43f af09 	beq.w	801351e <_printf_float+0xc2>
 801370c:	f04f 0900 	mov.w	r9, #0
 8013710:	f104 0a1a 	add.w	sl, r4, #26
 8013714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013716:	425b      	negs	r3, r3
 8013718:	454b      	cmp	r3, r9
 801371a:	dc01      	bgt.n	8013720 <_printf_float+0x2c4>
 801371c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801371e:	e792      	b.n	8013646 <_printf_float+0x1ea>
 8013720:	2301      	movs	r3, #1
 8013722:	4652      	mov	r2, sl
 8013724:	4631      	mov	r1, r6
 8013726:	4628      	mov	r0, r5
 8013728:	47b8      	blx	r7
 801372a:	3001      	adds	r0, #1
 801372c:	f43f aef7 	beq.w	801351e <_printf_float+0xc2>
 8013730:	f109 0901 	add.w	r9, r9, #1
 8013734:	e7ee      	b.n	8013714 <_printf_float+0x2b8>
 8013736:	bf00      	nop
 8013738:	7fefffff 	.word	0x7fefffff
 801373c:	0801867c 	.word	0x0801867c
 8013740:	08018680 	.word	0x08018680
 8013744:	08018688 	.word	0x08018688
 8013748:	08018684 	.word	0x08018684
 801374c:	08018ad6 	.word	0x08018ad6
 8013750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013754:	429a      	cmp	r2, r3
 8013756:	bfa8      	it	ge
 8013758:	461a      	movge	r2, r3
 801375a:	2a00      	cmp	r2, #0
 801375c:	4691      	mov	r9, r2
 801375e:	dc37      	bgt.n	80137d0 <_printf_float+0x374>
 8013760:	f04f 0b00 	mov.w	fp, #0
 8013764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013768:	f104 021a 	add.w	r2, r4, #26
 801376c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801376e:	9305      	str	r3, [sp, #20]
 8013770:	eba3 0309 	sub.w	r3, r3, r9
 8013774:	455b      	cmp	r3, fp
 8013776:	dc33      	bgt.n	80137e0 <_printf_float+0x384>
 8013778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801377c:	429a      	cmp	r2, r3
 801377e:	db3b      	blt.n	80137f8 <_printf_float+0x39c>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	07da      	lsls	r2, r3, #31
 8013784:	d438      	bmi.n	80137f8 <_printf_float+0x39c>
 8013786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013788:	9a05      	ldr	r2, [sp, #20]
 801378a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801378c:	1a9a      	subs	r2, r3, r2
 801378e:	eba3 0901 	sub.w	r9, r3, r1
 8013792:	4591      	cmp	r9, r2
 8013794:	bfa8      	it	ge
 8013796:	4691      	movge	r9, r2
 8013798:	f1b9 0f00 	cmp.w	r9, #0
 801379c:	dc35      	bgt.n	801380a <_printf_float+0x3ae>
 801379e:	f04f 0800 	mov.w	r8, #0
 80137a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137a6:	f104 0a1a 	add.w	sl, r4, #26
 80137aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137ae:	1a9b      	subs	r3, r3, r2
 80137b0:	eba3 0309 	sub.w	r3, r3, r9
 80137b4:	4543      	cmp	r3, r8
 80137b6:	f77f af79 	ble.w	80136ac <_printf_float+0x250>
 80137ba:	2301      	movs	r3, #1
 80137bc:	4652      	mov	r2, sl
 80137be:	4631      	mov	r1, r6
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b8      	blx	r7
 80137c4:	3001      	adds	r0, #1
 80137c6:	f43f aeaa 	beq.w	801351e <_printf_float+0xc2>
 80137ca:	f108 0801 	add.w	r8, r8, #1
 80137ce:	e7ec      	b.n	80137aa <_printf_float+0x34e>
 80137d0:	4613      	mov	r3, r2
 80137d2:	4631      	mov	r1, r6
 80137d4:	4642      	mov	r2, r8
 80137d6:	4628      	mov	r0, r5
 80137d8:	47b8      	blx	r7
 80137da:	3001      	adds	r0, #1
 80137dc:	d1c0      	bne.n	8013760 <_printf_float+0x304>
 80137de:	e69e      	b.n	801351e <_printf_float+0xc2>
 80137e0:	2301      	movs	r3, #1
 80137e2:	4631      	mov	r1, r6
 80137e4:	4628      	mov	r0, r5
 80137e6:	9205      	str	r2, [sp, #20]
 80137e8:	47b8      	blx	r7
 80137ea:	3001      	adds	r0, #1
 80137ec:	f43f ae97 	beq.w	801351e <_printf_float+0xc2>
 80137f0:	9a05      	ldr	r2, [sp, #20]
 80137f2:	f10b 0b01 	add.w	fp, fp, #1
 80137f6:	e7b9      	b.n	801376c <_printf_float+0x310>
 80137f8:	ee18 3a10 	vmov	r3, s16
 80137fc:	4652      	mov	r2, sl
 80137fe:	4631      	mov	r1, r6
 8013800:	4628      	mov	r0, r5
 8013802:	47b8      	blx	r7
 8013804:	3001      	adds	r0, #1
 8013806:	d1be      	bne.n	8013786 <_printf_float+0x32a>
 8013808:	e689      	b.n	801351e <_printf_float+0xc2>
 801380a:	9a05      	ldr	r2, [sp, #20]
 801380c:	464b      	mov	r3, r9
 801380e:	4442      	add	r2, r8
 8013810:	4631      	mov	r1, r6
 8013812:	4628      	mov	r0, r5
 8013814:	47b8      	blx	r7
 8013816:	3001      	adds	r0, #1
 8013818:	d1c1      	bne.n	801379e <_printf_float+0x342>
 801381a:	e680      	b.n	801351e <_printf_float+0xc2>
 801381c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801381e:	2a01      	cmp	r2, #1
 8013820:	dc01      	bgt.n	8013826 <_printf_float+0x3ca>
 8013822:	07db      	lsls	r3, r3, #31
 8013824:	d538      	bpl.n	8013898 <_printf_float+0x43c>
 8013826:	2301      	movs	r3, #1
 8013828:	4642      	mov	r2, r8
 801382a:	4631      	mov	r1, r6
 801382c:	4628      	mov	r0, r5
 801382e:	47b8      	blx	r7
 8013830:	3001      	adds	r0, #1
 8013832:	f43f ae74 	beq.w	801351e <_printf_float+0xc2>
 8013836:	ee18 3a10 	vmov	r3, s16
 801383a:	4652      	mov	r2, sl
 801383c:	4631      	mov	r1, r6
 801383e:	4628      	mov	r0, r5
 8013840:	47b8      	blx	r7
 8013842:	3001      	adds	r0, #1
 8013844:	f43f ae6b 	beq.w	801351e <_printf_float+0xc2>
 8013848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801384c:	2200      	movs	r2, #0
 801384e:	2300      	movs	r3, #0
 8013850:	f7ed f91c 	bl	8000a8c <__aeabi_dcmpeq>
 8013854:	b9d8      	cbnz	r0, 801388e <_printf_float+0x432>
 8013856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013858:	f108 0201 	add.w	r2, r8, #1
 801385c:	3b01      	subs	r3, #1
 801385e:	4631      	mov	r1, r6
 8013860:	4628      	mov	r0, r5
 8013862:	47b8      	blx	r7
 8013864:	3001      	adds	r0, #1
 8013866:	d10e      	bne.n	8013886 <_printf_float+0x42a>
 8013868:	e659      	b.n	801351e <_printf_float+0xc2>
 801386a:	2301      	movs	r3, #1
 801386c:	4652      	mov	r2, sl
 801386e:	4631      	mov	r1, r6
 8013870:	4628      	mov	r0, r5
 8013872:	47b8      	blx	r7
 8013874:	3001      	adds	r0, #1
 8013876:	f43f ae52 	beq.w	801351e <_printf_float+0xc2>
 801387a:	f108 0801 	add.w	r8, r8, #1
 801387e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013880:	3b01      	subs	r3, #1
 8013882:	4543      	cmp	r3, r8
 8013884:	dcf1      	bgt.n	801386a <_printf_float+0x40e>
 8013886:	464b      	mov	r3, r9
 8013888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801388c:	e6dc      	b.n	8013648 <_printf_float+0x1ec>
 801388e:	f04f 0800 	mov.w	r8, #0
 8013892:	f104 0a1a 	add.w	sl, r4, #26
 8013896:	e7f2      	b.n	801387e <_printf_float+0x422>
 8013898:	2301      	movs	r3, #1
 801389a:	4642      	mov	r2, r8
 801389c:	e7df      	b.n	801385e <_printf_float+0x402>
 801389e:	2301      	movs	r3, #1
 80138a0:	464a      	mov	r2, r9
 80138a2:	4631      	mov	r1, r6
 80138a4:	4628      	mov	r0, r5
 80138a6:	47b8      	blx	r7
 80138a8:	3001      	adds	r0, #1
 80138aa:	f43f ae38 	beq.w	801351e <_printf_float+0xc2>
 80138ae:	f108 0801 	add.w	r8, r8, #1
 80138b2:	68e3      	ldr	r3, [r4, #12]
 80138b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138b6:	1a5b      	subs	r3, r3, r1
 80138b8:	4543      	cmp	r3, r8
 80138ba:	dcf0      	bgt.n	801389e <_printf_float+0x442>
 80138bc:	e6fa      	b.n	80136b4 <_printf_float+0x258>
 80138be:	f04f 0800 	mov.w	r8, #0
 80138c2:	f104 0919 	add.w	r9, r4, #25
 80138c6:	e7f4      	b.n	80138b2 <_printf_float+0x456>

080138c8 <_printf_common>:
 80138c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138cc:	4616      	mov	r6, r2
 80138ce:	4699      	mov	r9, r3
 80138d0:	688a      	ldr	r2, [r1, #8]
 80138d2:	690b      	ldr	r3, [r1, #16]
 80138d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138d8:	4293      	cmp	r3, r2
 80138da:	bfb8      	it	lt
 80138dc:	4613      	movlt	r3, r2
 80138de:	6033      	str	r3, [r6, #0]
 80138e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80138e4:	4607      	mov	r7, r0
 80138e6:	460c      	mov	r4, r1
 80138e8:	b10a      	cbz	r2, 80138ee <_printf_common+0x26>
 80138ea:	3301      	adds	r3, #1
 80138ec:	6033      	str	r3, [r6, #0]
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	0699      	lsls	r1, r3, #26
 80138f2:	bf42      	ittt	mi
 80138f4:	6833      	ldrmi	r3, [r6, #0]
 80138f6:	3302      	addmi	r3, #2
 80138f8:	6033      	strmi	r3, [r6, #0]
 80138fa:	6825      	ldr	r5, [r4, #0]
 80138fc:	f015 0506 	ands.w	r5, r5, #6
 8013900:	d106      	bne.n	8013910 <_printf_common+0x48>
 8013902:	f104 0a19 	add.w	sl, r4, #25
 8013906:	68e3      	ldr	r3, [r4, #12]
 8013908:	6832      	ldr	r2, [r6, #0]
 801390a:	1a9b      	subs	r3, r3, r2
 801390c:	42ab      	cmp	r3, r5
 801390e:	dc26      	bgt.n	801395e <_printf_common+0x96>
 8013910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013914:	1e13      	subs	r3, r2, #0
 8013916:	6822      	ldr	r2, [r4, #0]
 8013918:	bf18      	it	ne
 801391a:	2301      	movne	r3, #1
 801391c:	0692      	lsls	r2, r2, #26
 801391e:	d42b      	bmi.n	8013978 <_printf_common+0xb0>
 8013920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013924:	4649      	mov	r1, r9
 8013926:	4638      	mov	r0, r7
 8013928:	47c0      	blx	r8
 801392a:	3001      	adds	r0, #1
 801392c:	d01e      	beq.n	801396c <_printf_common+0xa4>
 801392e:	6823      	ldr	r3, [r4, #0]
 8013930:	68e5      	ldr	r5, [r4, #12]
 8013932:	6832      	ldr	r2, [r6, #0]
 8013934:	f003 0306 	and.w	r3, r3, #6
 8013938:	2b04      	cmp	r3, #4
 801393a:	bf08      	it	eq
 801393c:	1aad      	subeq	r5, r5, r2
 801393e:	68a3      	ldr	r3, [r4, #8]
 8013940:	6922      	ldr	r2, [r4, #16]
 8013942:	bf0c      	ite	eq
 8013944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013948:	2500      	movne	r5, #0
 801394a:	4293      	cmp	r3, r2
 801394c:	bfc4      	itt	gt
 801394e:	1a9b      	subgt	r3, r3, r2
 8013950:	18ed      	addgt	r5, r5, r3
 8013952:	2600      	movs	r6, #0
 8013954:	341a      	adds	r4, #26
 8013956:	42b5      	cmp	r5, r6
 8013958:	d11a      	bne.n	8013990 <_printf_common+0xc8>
 801395a:	2000      	movs	r0, #0
 801395c:	e008      	b.n	8013970 <_printf_common+0xa8>
 801395e:	2301      	movs	r3, #1
 8013960:	4652      	mov	r2, sl
 8013962:	4649      	mov	r1, r9
 8013964:	4638      	mov	r0, r7
 8013966:	47c0      	blx	r8
 8013968:	3001      	adds	r0, #1
 801396a:	d103      	bne.n	8013974 <_printf_common+0xac>
 801396c:	f04f 30ff 	mov.w	r0, #4294967295
 8013970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013974:	3501      	adds	r5, #1
 8013976:	e7c6      	b.n	8013906 <_printf_common+0x3e>
 8013978:	18e1      	adds	r1, r4, r3
 801397a:	1c5a      	adds	r2, r3, #1
 801397c:	2030      	movs	r0, #48	; 0x30
 801397e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013982:	4422      	add	r2, r4
 8013984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801398c:	3302      	adds	r3, #2
 801398e:	e7c7      	b.n	8013920 <_printf_common+0x58>
 8013990:	2301      	movs	r3, #1
 8013992:	4622      	mov	r2, r4
 8013994:	4649      	mov	r1, r9
 8013996:	4638      	mov	r0, r7
 8013998:	47c0      	blx	r8
 801399a:	3001      	adds	r0, #1
 801399c:	d0e6      	beq.n	801396c <_printf_common+0xa4>
 801399e:	3601      	adds	r6, #1
 80139a0:	e7d9      	b.n	8013956 <_printf_common+0x8e>
	...

080139a4 <_printf_i>:
 80139a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139a8:	7e0f      	ldrb	r7, [r1, #24]
 80139aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80139ac:	2f78      	cmp	r7, #120	; 0x78
 80139ae:	4691      	mov	r9, r2
 80139b0:	4680      	mov	r8, r0
 80139b2:	460c      	mov	r4, r1
 80139b4:	469a      	mov	sl, r3
 80139b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80139ba:	d807      	bhi.n	80139cc <_printf_i+0x28>
 80139bc:	2f62      	cmp	r7, #98	; 0x62
 80139be:	d80a      	bhi.n	80139d6 <_printf_i+0x32>
 80139c0:	2f00      	cmp	r7, #0
 80139c2:	f000 80d8 	beq.w	8013b76 <_printf_i+0x1d2>
 80139c6:	2f58      	cmp	r7, #88	; 0x58
 80139c8:	f000 80a3 	beq.w	8013b12 <_printf_i+0x16e>
 80139cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139d4:	e03a      	b.n	8013a4c <_printf_i+0xa8>
 80139d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80139da:	2b15      	cmp	r3, #21
 80139dc:	d8f6      	bhi.n	80139cc <_printf_i+0x28>
 80139de:	a101      	add	r1, pc, #4	; (adr r1, 80139e4 <_printf_i+0x40>)
 80139e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80139e4:	08013a3d 	.word	0x08013a3d
 80139e8:	08013a51 	.word	0x08013a51
 80139ec:	080139cd 	.word	0x080139cd
 80139f0:	080139cd 	.word	0x080139cd
 80139f4:	080139cd 	.word	0x080139cd
 80139f8:	080139cd 	.word	0x080139cd
 80139fc:	08013a51 	.word	0x08013a51
 8013a00:	080139cd 	.word	0x080139cd
 8013a04:	080139cd 	.word	0x080139cd
 8013a08:	080139cd 	.word	0x080139cd
 8013a0c:	080139cd 	.word	0x080139cd
 8013a10:	08013b5d 	.word	0x08013b5d
 8013a14:	08013a81 	.word	0x08013a81
 8013a18:	08013b3f 	.word	0x08013b3f
 8013a1c:	080139cd 	.word	0x080139cd
 8013a20:	080139cd 	.word	0x080139cd
 8013a24:	08013b7f 	.word	0x08013b7f
 8013a28:	080139cd 	.word	0x080139cd
 8013a2c:	08013a81 	.word	0x08013a81
 8013a30:	080139cd 	.word	0x080139cd
 8013a34:	080139cd 	.word	0x080139cd
 8013a38:	08013b47 	.word	0x08013b47
 8013a3c:	682b      	ldr	r3, [r5, #0]
 8013a3e:	1d1a      	adds	r2, r3, #4
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	602a      	str	r2, [r5, #0]
 8013a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	e0a3      	b.n	8013b98 <_printf_i+0x1f4>
 8013a50:	6820      	ldr	r0, [r4, #0]
 8013a52:	6829      	ldr	r1, [r5, #0]
 8013a54:	0606      	lsls	r6, r0, #24
 8013a56:	f101 0304 	add.w	r3, r1, #4
 8013a5a:	d50a      	bpl.n	8013a72 <_printf_i+0xce>
 8013a5c:	680e      	ldr	r6, [r1, #0]
 8013a5e:	602b      	str	r3, [r5, #0]
 8013a60:	2e00      	cmp	r6, #0
 8013a62:	da03      	bge.n	8013a6c <_printf_i+0xc8>
 8013a64:	232d      	movs	r3, #45	; 0x2d
 8013a66:	4276      	negs	r6, r6
 8013a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a6c:	485e      	ldr	r0, [pc, #376]	; (8013be8 <_printf_i+0x244>)
 8013a6e:	230a      	movs	r3, #10
 8013a70:	e019      	b.n	8013aa6 <_printf_i+0x102>
 8013a72:	680e      	ldr	r6, [r1, #0]
 8013a74:	602b      	str	r3, [r5, #0]
 8013a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a7a:	bf18      	it	ne
 8013a7c:	b236      	sxthne	r6, r6
 8013a7e:	e7ef      	b.n	8013a60 <_printf_i+0xbc>
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	6820      	ldr	r0, [r4, #0]
 8013a84:	1d19      	adds	r1, r3, #4
 8013a86:	6029      	str	r1, [r5, #0]
 8013a88:	0601      	lsls	r1, r0, #24
 8013a8a:	d501      	bpl.n	8013a90 <_printf_i+0xec>
 8013a8c:	681e      	ldr	r6, [r3, #0]
 8013a8e:	e002      	b.n	8013a96 <_printf_i+0xf2>
 8013a90:	0646      	lsls	r6, r0, #25
 8013a92:	d5fb      	bpl.n	8013a8c <_printf_i+0xe8>
 8013a94:	881e      	ldrh	r6, [r3, #0]
 8013a96:	4854      	ldr	r0, [pc, #336]	; (8013be8 <_printf_i+0x244>)
 8013a98:	2f6f      	cmp	r7, #111	; 0x6f
 8013a9a:	bf0c      	ite	eq
 8013a9c:	2308      	moveq	r3, #8
 8013a9e:	230a      	movne	r3, #10
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013aa6:	6865      	ldr	r5, [r4, #4]
 8013aa8:	60a5      	str	r5, [r4, #8]
 8013aaa:	2d00      	cmp	r5, #0
 8013aac:	bfa2      	ittt	ge
 8013aae:	6821      	ldrge	r1, [r4, #0]
 8013ab0:	f021 0104 	bicge.w	r1, r1, #4
 8013ab4:	6021      	strge	r1, [r4, #0]
 8013ab6:	b90e      	cbnz	r6, 8013abc <_printf_i+0x118>
 8013ab8:	2d00      	cmp	r5, #0
 8013aba:	d04d      	beq.n	8013b58 <_printf_i+0x1b4>
 8013abc:	4615      	mov	r5, r2
 8013abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8013ac6:	5dc7      	ldrb	r7, [r0, r7]
 8013ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013acc:	4637      	mov	r7, r6
 8013ace:	42bb      	cmp	r3, r7
 8013ad0:	460e      	mov	r6, r1
 8013ad2:	d9f4      	bls.n	8013abe <_printf_i+0x11a>
 8013ad4:	2b08      	cmp	r3, #8
 8013ad6:	d10b      	bne.n	8013af0 <_printf_i+0x14c>
 8013ad8:	6823      	ldr	r3, [r4, #0]
 8013ada:	07de      	lsls	r6, r3, #31
 8013adc:	d508      	bpl.n	8013af0 <_printf_i+0x14c>
 8013ade:	6923      	ldr	r3, [r4, #16]
 8013ae0:	6861      	ldr	r1, [r4, #4]
 8013ae2:	4299      	cmp	r1, r3
 8013ae4:	bfde      	ittt	le
 8013ae6:	2330      	movle	r3, #48	; 0x30
 8013ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013aec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013af0:	1b52      	subs	r2, r2, r5
 8013af2:	6122      	str	r2, [r4, #16]
 8013af4:	f8cd a000 	str.w	sl, [sp]
 8013af8:	464b      	mov	r3, r9
 8013afa:	aa03      	add	r2, sp, #12
 8013afc:	4621      	mov	r1, r4
 8013afe:	4640      	mov	r0, r8
 8013b00:	f7ff fee2 	bl	80138c8 <_printf_common>
 8013b04:	3001      	adds	r0, #1
 8013b06:	d14c      	bne.n	8013ba2 <_printf_i+0x1fe>
 8013b08:	f04f 30ff 	mov.w	r0, #4294967295
 8013b0c:	b004      	add	sp, #16
 8013b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b12:	4835      	ldr	r0, [pc, #212]	; (8013be8 <_printf_i+0x244>)
 8013b14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013b18:	6829      	ldr	r1, [r5, #0]
 8013b1a:	6823      	ldr	r3, [r4, #0]
 8013b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013b20:	6029      	str	r1, [r5, #0]
 8013b22:	061d      	lsls	r5, r3, #24
 8013b24:	d514      	bpl.n	8013b50 <_printf_i+0x1ac>
 8013b26:	07df      	lsls	r7, r3, #31
 8013b28:	bf44      	itt	mi
 8013b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8013b2e:	6023      	strmi	r3, [r4, #0]
 8013b30:	b91e      	cbnz	r6, 8013b3a <_printf_i+0x196>
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	f023 0320 	bic.w	r3, r3, #32
 8013b38:	6023      	str	r3, [r4, #0]
 8013b3a:	2310      	movs	r3, #16
 8013b3c:	e7b0      	b.n	8013aa0 <_printf_i+0xfc>
 8013b3e:	6823      	ldr	r3, [r4, #0]
 8013b40:	f043 0320 	orr.w	r3, r3, #32
 8013b44:	6023      	str	r3, [r4, #0]
 8013b46:	2378      	movs	r3, #120	; 0x78
 8013b48:	4828      	ldr	r0, [pc, #160]	; (8013bec <_printf_i+0x248>)
 8013b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b4e:	e7e3      	b.n	8013b18 <_printf_i+0x174>
 8013b50:	0659      	lsls	r1, r3, #25
 8013b52:	bf48      	it	mi
 8013b54:	b2b6      	uxthmi	r6, r6
 8013b56:	e7e6      	b.n	8013b26 <_printf_i+0x182>
 8013b58:	4615      	mov	r5, r2
 8013b5a:	e7bb      	b.n	8013ad4 <_printf_i+0x130>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	6826      	ldr	r6, [r4, #0]
 8013b60:	6961      	ldr	r1, [r4, #20]
 8013b62:	1d18      	adds	r0, r3, #4
 8013b64:	6028      	str	r0, [r5, #0]
 8013b66:	0635      	lsls	r5, r6, #24
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	d501      	bpl.n	8013b70 <_printf_i+0x1cc>
 8013b6c:	6019      	str	r1, [r3, #0]
 8013b6e:	e002      	b.n	8013b76 <_printf_i+0x1d2>
 8013b70:	0670      	lsls	r0, r6, #25
 8013b72:	d5fb      	bpl.n	8013b6c <_printf_i+0x1c8>
 8013b74:	8019      	strh	r1, [r3, #0]
 8013b76:	2300      	movs	r3, #0
 8013b78:	6123      	str	r3, [r4, #16]
 8013b7a:	4615      	mov	r5, r2
 8013b7c:	e7ba      	b.n	8013af4 <_printf_i+0x150>
 8013b7e:	682b      	ldr	r3, [r5, #0]
 8013b80:	1d1a      	adds	r2, r3, #4
 8013b82:	602a      	str	r2, [r5, #0]
 8013b84:	681d      	ldr	r5, [r3, #0]
 8013b86:	6862      	ldr	r2, [r4, #4]
 8013b88:	2100      	movs	r1, #0
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f7ec fb00 	bl	8000190 <memchr>
 8013b90:	b108      	cbz	r0, 8013b96 <_printf_i+0x1f2>
 8013b92:	1b40      	subs	r0, r0, r5
 8013b94:	6060      	str	r0, [r4, #4]
 8013b96:	6863      	ldr	r3, [r4, #4]
 8013b98:	6123      	str	r3, [r4, #16]
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ba0:	e7a8      	b.n	8013af4 <_printf_i+0x150>
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	462a      	mov	r2, r5
 8013ba6:	4649      	mov	r1, r9
 8013ba8:	4640      	mov	r0, r8
 8013baa:	47d0      	blx	sl
 8013bac:	3001      	adds	r0, #1
 8013bae:	d0ab      	beq.n	8013b08 <_printf_i+0x164>
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	079b      	lsls	r3, r3, #30
 8013bb4:	d413      	bmi.n	8013bde <_printf_i+0x23a>
 8013bb6:	68e0      	ldr	r0, [r4, #12]
 8013bb8:	9b03      	ldr	r3, [sp, #12]
 8013bba:	4298      	cmp	r0, r3
 8013bbc:	bfb8      	it	lt
 8013bbe:	4618      	movlt	r0, r3
 8013bc0:	e7a4      	b.n	8013b0c <_printf_i+0x168>
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	4632      	mov	r2, r6
 8013bc6:	4649      	mov	r1, r9
 8013bc8:	4640      	mov	r0, r8
 8013bca:	47d0      	blx	sl
 8013bcc:	3001      	adds	r0, #1
 8013bce:	d09b      	beq.n	8013b08 <_printf_i+0x164>
 8013bd0:	3501      	adds	r5, #1
 8013bd2:	68e3      	ldr	r3, [r4, #12]
 8013bd4:	9903      	ldr	r1, [sp, #12]
 8013bd6:	1a5b      	subs	r3, r3, r1
 8013bd8:	42ab      	cmp	r3, r5
 8013bda:	dcf2      	bgt.n	8013bc2 <_printf_i+0x21e>
 8013bdc:	e7eb      	b.n	8013bb6 <_printf_i+0x212>
 8013bde:	2500      	movs	r5, #0
 8013be0:	f104 0619 	add.w	r6, r4, #25
 8013be4:	e7f5      	b.n	8013bd2 <_printf_i+0x22e>
 8013be6:	bf00      	nop
 8013be8:	0801868c 	.word	0x0801868c
 8013bec:	0801869d 	.word	0x0801869d

08013bf0 <rand>:
 8013bf0:	4b16      	ldr	r3, [pc, #88]	; (8013c4c <rand+0x5c>)
 8013bf2:	b510      	push	{r4, lr}
 8013bf4:	681c      	ldr	r4, [r3, #0]
 8013bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bf8:	b9b3      	cbnz	r3, 8013c28 <rand+0x38>
 8013bfa:	2018      	movs	r0, #24
 8013bfc:	f7ff f816 	bl	8012c2c <malloc>
 8013c00:	63a0      	str	r0, [r4, #56]	; 0x38
 8013c02:	b928      	cbnz	r0, 8013c10 <rand+0x20>
 8013c04:	4602      	mov	r2, r0
 8013c06:	4b12      	ldr	r3, [pc, #72]	; (8013c50 <rand+0x60>)
 8013c08:	4812      	ldr	r0, [pc, #72]	; (8013c54 <rand+0x64>)
 8013c0a:	214e      	movs	r1, #78	; 0x4e
 8013c0c:	f000 fa9a 	bl	8014144 <__assert_func>
 8013c10:	4a11      	ldr	r2, [pc, #68]	; (8013c58 <rand+0x68>)
 8013c12:	4b12      	ldr	r3, [pc, #72]	; (8013c5c <rand+0x6c>)
 8013c14:	e9c0 2300 	strd	r2, r3, [r0]
 8013c18:	4b11      	ldr	r3, [pc, #68]	; (8013c60 <rand+0x70>)
 8013c1a:	6083      	str	r3, [r0, #8]
 8013c1c:	230b      	movs	r3, #11
 8013c1e:	8183      	strh	r3, [r0, #12]
 8013c20:	2201      	movs	r2, #1
 8013c22:	2300      	movs	r3, #0
 8013c24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013c28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013c2a:	4a0e      	ldr	r2, [pc, #56]	; (8013c64 <rand+0x74>)
 8013c2c:	6920      	ldr	r0, [r4, #16]
 8013c2e:	6963      	ldr	r3, [r4, #20]
 8013c30:	490d      	ldr	r1, [pc, #52]	; (8013c68 <rand+0x78>)
 8013c32:	4342      	muls	r2, r0
 8013c34:	fb01 2203 	mla	r2, r1, r3, r2
 8013c38:	fba0 0101 	umull	r0, r1, r0, r1
 8013c3c:	1c43      	adds	r3, r0, #1
 8013c3e:	eb42 0001 	adc.w	r0, r2, r1
 8013c42:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013c46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013c4a:	bd10      	pop	{r4, pc}
 8013c4c:	20000020 	.word	0x20000020
 8013c50:	08018548 	.word	0x08018548
 8013c54:	080186ae 	.word	0x080186ae
 8013c58:	abcd330e 	.word	0xabcd330e
 8013c5c:	e66d1234 	.word	0xe66d1234
 8013c60:	0005deec 	.word	0x0005deec
 8013c64:	5851f42d 	.word	0x5851f42d
 8013c68:	4c957f2d 	.word	0x4c957f2d

08013c6c <_sbrk_r>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	4d06      	ldr	r5, [pc, #24]	; (8013c88 <_sbrk_r+0x1c>)
 8013c70:	2300      	movs	r3, #0
 8013c72:	4604      	mov	r4, r0
 8013c74:	4608      	mov	r0, r1
 8013c76:	602b      	str	r3, [r5, #0]
 8013c78:	f7f6 fe9e 	bl	800a9b8 <_sbrk>
 8013c7c:	1c43      	adds	r3, r0, #1
 8013c7e:	d102      	bne.n	8013c86 <_sbrk_r+0x1a>
 8013c80:	682b      	ldr	r3, [r5, #0]
 8013c82:	b103      	cbz	r3, 8013c86 <_sbrk_r+0x1a>
 8013c84:	6023      	str	r3, [r4, #0]
 8013c86:	bd38      	pop	{r3, r4, r5, pc}
 8013c88:	2000a7b4 	.word	0x2000a7b4

08013c8c <siprintf>:
 8013c8c:	b40e      	push	{r1, r2, r3}
 8013c8e:	b500      	push	{lr}
 8013c90:	b09c      	sub	sp, #112	; 0x70
 8013c92:	ab1d      	add	r3, sp, #116	; 0x74
 8013c94:	9002      	str	r0, [sp, #8]
 8013c96:	9006      	str	r0, [sp, #24]
 8013c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013c9c:	4809      	ldr	r0, [pc, #36]	; (8013cc4 <siprintf+0x38>)
 8013c9e:	9107      	str	r1, [sp, #28]
 8013ca0:	9104      	str	r1, [sp, #16]
 8013ca2:	4909      	ldr	r1, [pc, #36]	; (8013cc8 <siprintf+0x3c>)
 8013ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ca8:	9105      	str	r1, [sp, #20]
 8013caa:	6800      	ldr	r0, [r0, #0]
 8013cac:	9301      	str	r3, [sp, #4]
 8013cae:	a902      	add	r1, sp, #8
 8013cb0:	f001 fe06 	bl	80158c0 <_svfiprintf_r>
 8013cb4:	9b02      	ldr	r3, [sp, #8]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	701a      	strb	r2, [r3, #0]
 8013cba:	b01c      	add	sp, #112	; 0x70
 8013cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cc0:	b003      	add	sp, #12
 8013cc2:	4770      	bx	lr
 8013cc4:	20000020 	.word	0x20000020
 8013cc8:	ffff0208 	.word	0xffff0208

08013ccc <__tzcalc_limits>:
 8013ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	4605      	mov	r5, r0
 8013cd2:	f001 f939 	bl	8014f48 <__gettzinfo>
 8013cd6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013cda:	429d      	cmp	r5, r3
 8013cdc:	f340 8099 	ble.w	8013e12 <__tzcalc_limits+0x146>
 8013ce0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8013ce4:	18ac      	adds	r4, r5, r2
 8013ce6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8013cea:	f240 126d 	movw	r2, #365	; 0x16d
 8013cee:	10a4      	asrs	r4, r4, #2
 8013cf0:	fb02 4403 	mla	r4, r2, r3, r4
 8013cf4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013cf8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8013cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d00:	441c      	add	r4, r3
 8013d02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013d06:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8013d0a:	fb95 fcf3 	sdiv	ip, r5, r3
 8013d0e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8013d12:	186a      	adds	r2, r5, r1
 8013d14:	fabc f68c 	clz	r6, ip
 8013d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8013d1c:	f005 0303 	and.w	r3, r5, #3
 8013d20:	4414      	add	r4, r2
 8013d22:	2264      	movs	r2, #100	; 0x64
 8013d24:	6045      	str	r5, [r0, #4]
 8013d26:	fb95 f7f2 	sdiv	r7, r5, r2
 8013d2a:	0976      	lsrs	r6, r6, #5
 8013d2c:	fb02 5717 	mls	r7, r2, r7, r5
 8013d30:	4601      	mov	r1, r0
 8013d32:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	f04f 0a07 	mov.w	sl, #7
 8013d3c:	7a0d      	ldrb	r5, [r1, #8]
 8013d3e:	694b      	ldr	r3, [r1, #20]
 8013d40:	2d4a      	cmp	r5, #74	; 0x4a
 8013d42:	d12d      	bne.n	8013da0 <__tzcalc_limits+0xd4>
 8013d44:	9a00      	ldr	r2, [sp, #0]
 8013d46:	eb04 0e03 	add.w	lr, r4, r3
 8013d4a:	b902      	cbnz	r2, 8013d4e <__tzcalc_limits+0x82>
 8013d4c:	b917      	cbnz	r7, 8013d54 <__tzcalc_limits+0x88>
 8013d4e:	f1bc 0f00 	cmp.w	ip, #0
 8013d52:	d123      	bne.n	8013d9c <__tzcalc_limits+0xd0>
 8013d54:	2b3b      	cmp	r3, #59	; 0x3b
 8013d56:	bfd4      	ite	le
 8013d58:	2300      	movle	r3, #0
 8013d5a:	2301      	movgt	r3, #1
 8013d5c:	4473      	add	r3, lr
 8013d5e:	3b01      	subs	r3, #1
 8013d60:	698d      	ldr	r5, [r1, #24]
 8013d62:	4a2d      	ldr	r2, [pc, #180]	; (8013e18 <__tzcalc_limits+0x14c>)
 8013d64:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8013d68:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8013d6c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8013d6e:	18ed      	adds	r5, r5, r3
 8013d70:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8013d74:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8013d78:	3128      	adds	r1, #40	; 0x28
 8013d7a:	458b      	cmp	fp, r1
 8013d7c:	d1de      	bne.n	8013d3c <__tzcalc_limits+0x70>
 8013d7e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8013d82:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8013d86:	428c      	cmp	r4, r1
 8013d88:	eb72 0303 	sbcs.w	r3, r2, r3
 8013d8c:	bfb4      	ite	lt
 8013d8e:	2301      	movlt	r3, #1
 8013d90:	2300      	movge	r3, #0
 8013d92:	6003      	str	r3, [r0, #0]
 8013d94:	2001      	movs	r0, #1
 8013d96:	b003      	add	sp, #12
 8013d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	e7dd      	b.n	8013d5c <__tzcalc_limits+0x90>
 8013da0:	2d44      	cmp	r5, #68	; 0x44
 8013da2:	d101      	bne.n	8013da8 <__tzcalc_limits+0xdc>
 8013da4:	4423      	add	r3, r4
 8013da6:	e7db      	b.n	8013d60 <__tzcalc_limits+0x94>
 8013da8:	9a00      	ldr	r2, [sp, #0]
 8013daa:	bb62      	cbnz	r2, 8013e06 <__tzcalc_limits+0x13a>
 8013dac:	2f00      	cmp	r7, #0
 8013dae:	bf0c      	ite	eq
 8013db0:	4635      	moveq	r5, r6
 8013db2:	2501      	movne	r5, #1
 8013db4:	68ca      	ldr	r2, [r1, #12]
 8013db6:	9201      	str	r2, [sp, #4]
 8013db8:	4a18      	ldr	r2, [pc, #96]	; (8013e1c <__tzcalc_limits+0x150>)
 8013dba:	f04f 0930 	mov.w	r9, #48	; 0x30
 8013dbe:	fb09 2505 	mla	r5, r9, r5, r2
 8013dc2:	46a6      	mov	lr, r4
 8013dc4:	f04f 0800 	mov.w	r8, #0
 8013dc8:	3d04      	subs	r5, #4
 8013dca:	9a01      	ldr	r2, [sp, #4]
 8013dcc:	f108 0801 	add.w	r8, r8, #1
 8013dd0:	4542      	cmp	r2, r8
 8013dd2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8013dd6:	dc18      	bgt.n	8013e0a <__tzcalc_limits+0x13e>
 8013dd8:	f10e 0504 	add.w	r5, lr, #4
 8013ddc:	fb95 f8fa 	sdiv	r8, r5, sl
 8013de0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8013de4:	eba5 0808 	sub.w	r8, r5, r8
 8013de8:	ebb3 0808 	subs.w	r8, r3, r8
 8013dec:	690b      	ldr	r3, [r1, #16]
 8013dee:	f103 33ff 	add.w	r3, r3, #4294967295
 8013df2:	bf48      	it	mi
 8013df4:	f108 0807 	addmi.w	r8, r8, #7
 8013df8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013dfc:	4443      	add	r3, r8
 8013dfe:	454b      	cmp	r3, r9
 8013e00:	da05      	bge.n	8013e0e <__tzcalc_limits+0x142>
 8013e02:	4473      	add	r3, lr
 8013e04:	e7ac      	b.n	8013d60 <__tzcalc_limits+0x94>
 8013e06:	4635      	mov	r5, r6
 8013e08:	e7d4      	b.n	8013db4 <__tzcalc_limits+0xe8>
 8013e0a:	44ce      	add	lr, r9
 8013e0c:	e7dd      	b.n	8013dca <__tzcalc_limits+0xfe>
 8013e0e:	3b07      	subs	r3, #7
 8013e10:	e7f5      	b.n	8013dfe <__tzcalc_limits+0x132>
 8013e12:	2000      	movs	r0, #0
 8013e14:	e7bf      	b.n	8013d96 <__tzcalc_limits+0xca>
 8013e16:	bf00      	nop
 8013e18:	00015180 	.word	0x00015180
 8013e1c:	0801861c 	.word	0x0801861c

08013e20 <__tz_lock>:
 8013e20:	4801      	ldr	r0, [pc, #4]	; (8013e28 <__tz_lock+0x8>)
 8013e22:	f001 b946 	b.w	80150b2 <__retarget_lock_acquire>
 8013e26:	bf00      	nop
 8013e28:	2000a7b0 	.word	0x2000a7b0

08013e2c <__tz_unlock>:
 8013e2c:	4801      	ldr	r0, [pc, #4]	; (8013e34 <__tz_unlock+0x8>)
 8013e2e:	f001 b942 	b.w	80150b6 <__retarget_lock_release>
 8013e32:	bf00      	nop
 8013e34:	2000a7b0 	.word	0x2000a7b0

08013e38 <_tzset_unlocked>:
 8013e38:	4b01      	ldr	r3, [pc, #4]	; (8013e40 <_tzset_unlocked+0x8>)
 8013e3a:	6818      	ldr	r0, [r3, #0]
 8013e3c:	f000 b802 	b.w	8013e44 <_tzset_unlocked_r>
 8013e40:	20000020 	.word	0x20000020

08013e44 <_tzset_unlocked_r>:
 8013e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e48:	b08d      	sub	sp, #52	; 0x34
 8013e4a:	4607      	mov	r7, r0
 8013e4c:	f001 f87c 	bl	8014f48 <__gettzinfo>
 8013e50:	49b0      	ldr	r1, [pc, #704]	; (8014114 <_tzset_unlocked_r+0x2d0>)
 8013e52:	4eb1      	ldr	r6, [pc, #708]	; (8014118 <_tzset_unlocked_r+0x2d4>)
 8013e54:	4605      	mov	r5, r0
 8013e56:	4638      	mov	r0, r7
 8013e58:	f001 f86e 	bl	8014f38 <_getenv_r>
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	b970      	cbnz	r0, 8013e7e <_tzset_unlocked_r+0x3a>
 8013e60:	4bae      	ldr	r3, [pc, #696]	; (801411c <_tzset_unlocked_r+0x2d8>)
 8013e62:	4aaf      	ldr	r2, [pc, #700]	; (8014120 <_tzset_unlocked_r+0x2dc>)
 8013e64:	6018      	str	r0, [r3, #0]
 8013e66:	4baf      	ldr	r3, [pc, #700]	; (8014124 <_tzset_unlocked_r+0x2e0>)
 8013e68:	6018      	str	r0, [r3, #0]
 8013e6a:	4baf      	ldr	r3, [pc, #700]	; (8014128 <_tzset_unlocked_r+0x2e4>)
 8013e6c:	6830      	ldr	r0, [r6, #0]
 8013e6e:	e9c3 2200 	strd	r2, r2, [r3]
 8013e72:	f7fe fee3 	bl	8012c3c <free>
 8013e76:	6034      	str	r4, [r6, #0]
 8013e78:	b00d      	add	sp, #52	; 0x34
 8013e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e7e:	6831      	ldr	r1, [r6, #0]
 8013e80:	2900      	cmp	r1, #0
 8013e82:	d162      	bne.n	8013f4a <_tzset_unlocked_r+0x106>
 8013e84:	6830      	ldr	r0, [r6, #0]
 8013e86:	f7fe fed9 	bl	8012c3c <free>
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f7ec f978 	bl	8000180 <strlen>
 8013e90:	1c41      	adds	r1, r0, #1
 8013e92:	4638      	mov	r0, r7
 8013e94:	f7ff f9ce 	bl	8013234 <_malloc_r>
 8013e98:	6030      	str	r0, [r6, #0]
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d15a      	bne.n	8013f54 <_tzset_unlocked_r+0x110>
 8013e9e:	7823      	ldrb	r3, [r4, #0]
 8013ea0:	4aa2      	ldr	r2, [pc, #648]	; (801412c <_tzset_unlocked_r+0x2e8>)
 8013ea2:	49a3      	ldr	r1, [pc, #652]	; (8014130 <_tzset_unlocked_r+0x2ec>)
 8013ea4:	2b3a      	cmp	r3, #58	; 0x3a
 8013ea6:	bf08      	it	eq
 8013ea8:	3401      	addeq	r4, #1
 8013eaa:	ae0a      	add	r6, sp, #40	; 0x28
 8013eac:	4633      	mov	r3, r6
 8013eae:	4620      	mov	r0, r4
 8013eb0:	f001 ff60 	bl	8015d74 <siscanf>
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	dddf      	ble.n	8013e78 <_tzset_unlocked_r+0x34>
 8013eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eba:	18e7      	adds	r7, r4, r3
 8013ebc:	5ce3      	ldrb	r3, [r4, r3]
 8013ebe:	2b2d      	cmp	r3, #45	; 0x2d
 8013ec0:	d14c      	bne.n	8013f5c <_tzset_unlocked_r+0x118>
 8013ec2:	3701      	adds	r7, #1
 8013ec4:	f04f 38ff 	mov.w	r8, #4294967295
 8013ec8:	f10d 0a20 	add.w	sl, sp, #32
 8013ecc:	f10d 0b1e 	add.w	fp, sp, #30
 8013ed0:	2400      	movs	r4, #0
 8013ed2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8013ed6:	4997      	ldr	r1, [pc, #604]	; (8014134 <_tzset_unlocked_r+0x2f0>)
 8013ed8:	9603      	str	r6, [sp, #12]
 8013eda:	f8cd b000 	str.w	fp, [sp]
 8013ede:	4633      	mov	r3, r6
 8013ee0:	aa07      	add	r2, sp, #28
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	f8ad 401e 	strh.w	r4, [sp, #30]
 8013ee8:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013eec:	f001 ff42 	bl	8015d74 <siscanf>
 8013ef0:	42a0      	cmp	r0, r4
 8013ef2:	ddc1      	ble.n	8013e78 <_tzset_unlocked_r+0x34>
 8013ef4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013ef8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013efc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8014140 <_tzset_unlocked_r+0x2fc>
 8013f00:	213c      	movs	r1, #60	; 0x3c
 8013f02:	fb01 3302 	mla	r3, r1, r2, r3
 8013f06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8013f0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013f0e:	fb01 3302 	mla	r3, r1, r2, r3
 8013f12:	fb08 f303 	mul.w	r3, r8, r3
 8013f16:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8014128 <_tzset_unlocked_r+0x2e4>
 8013f1a:	62ab      	str	r3, [r5, #40]	; 0x28
 8013f1c:	4b83      	ldr	r3, [pc, #524]	; (801412c <_tzset_unlocked_r+0x2e8>)
 8013f1e:	f8c8 3000 	str.w	r3, [r8]
 8013f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f24:	4982      	ldr	r1, [pc, #520]	; (8014130 <_tzset_unlocked_r+0x2ec>)
 8013f26:	441f      	add	r7, r3
 8013f28:	464a      	mov	r2, r9
 8013f2a:	4633      	mov	r3, r6
 8013f2c:	4638      	mov	r0, r7
 8013f2e:	f001 ff21 	bl	8015d74 <siscanf>
 8013f32:	42a0      	cmp	r0, r4
 8013f34:	dc18      	bgt.n	8013f68 <_tzset_unlocked_r+0x124>
 8013f36:	f8d8 3000 	ldr.w	r3, [r8]
 8013f3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8013f3e:	4b77      	ldr	r3, [pc, #476]	; (801411c <_tzset_unlocked_r+0x2d8>)
 8013f40:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013f42:	601a      	str	r2, [r3, #0]
 8013f44:	4b77      	ldr	r3, [pc, #476]	; (8014124 <_tzset_unlocked_r+0x2e0>)
 8013f46:	601c      	str	r4, [r3, #0]
 8013f48:	e796      	b.n	8013e78 <_tzset_unlocked_r+0x34>
 8013f4a:	f7ec f971 	bl	8000230 <strcmp>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d198      	bne.n	8013e84 <_tzset_unlocked_r+0x40>
 8013f52:	e791      	b.n	8013e78 <_tzset_unlocked_r+0x34>
 8013f54:	4621      	mov	r1, r4
 8013f56:	f001 ff7e 	bl	8015e56 <strcpy>
 8013f5a:	e7a0      	b.n	8013e9e <_tzset_unlocked_r+0x5a>
 8013f5c:	2b2b      	cmp	r3, #43	; 0x2b
 8013f5e:	bf08      	it	eq
 8013f60:	3701      	addeq	r7, #1
 8013f62:	f04f 0801 	mov.w	r8, #1
 8013f66:	e7af      	b.n	8013ec8 <_tzset_unlocked_r+0x84>
 8013f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f6a:	f8c8 9004 	str.w	r9, [r8, #4]
 8013f6e:	18fc      	adds	r4, r7, r3
 8013f70:	5cfb      	ldrb	r3, [r7, r3]
 8013f72:	2b2d      	cmp	r3, #45	; 0x2d
 8013f74:	f040 808b 	bne.w	801408e <_tzset_unlocked_r+0x24a>
 8013f78:	3401      	adds	r4, #1
 8013f7a:	f04f 37ff 	mov.w	r7, #4294967295
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f84:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f88:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8013f8e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013f92:	e9cd b600 	strd	fp, r6, [sp]
 8013f96:	4967      	ldr	r1, [pc, #412]	; (8014134 <_tzset_unlocked_r+0x2f0>)
 8013f98:	4633      	mov	r3, r6
 8013f9a:	aa07      	add	r2, sp, #28
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	f001 fee9 	bl	8015d74 <siscanf>
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	dc78      	bgt.n	8014098 <_tzset_unlocked_r+0x254>
 8013fa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013fa8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013fac:	652b      	str	r3, [r5, #80]	; 0x50
 8013fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fb0:	462f      	mov	r7, r5
 8013fb2:	441c      	add	r4, r3
 8013fb4:	f04f 0900 	mov.w	r9, #0
 8013fb8:	7823      	ldrb	r3, [r4, #0]
 8013fba:	2b2c      	cmp	r3, #44	; 0x2c
 8013fbc:	bf08      	it	eq
 8013fbe:	3401      	addeq	r4, #1
 8013fc0:	f894 8000 	ldrb.w	r8, [r4]
 8013fc4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013fc8:	d178      	bne.n	80140bc <_tzset_unlocked_r+0x278>
 8013fca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8013fce:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013fd2:	ab09      	add	r3, sp, #36	; 0x24
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	4958      	ldr	r1, [pc, #352]	; (8014138 <_tzset_unlocked_r+0x2f4>)
 8013fd8:	9603      	str	r6, [sp, #12]
 8013fda:	4633      	mov	r3, r6
 8013fdc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	f001 fec7 	bl	8015d74 <siscanf>
 8013fe6:	2803      	cmp	r0, #3
 8013fe8:	f47f af46 	bne.w	8013e78 <_tzset_unlocked_r+0x34>
 8013fec:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013ff0:	1e4b      	subs	r3, r1, #1
 8013ff2:	2b0b      	cmp	r3, #11
 8013ff4:	f63f af40 	bhi.w	8013e78 <_tzset_unlocked_r+0x34>
 8013ff8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013ffc:	1e53      	subs	r3, r2, #1
 8013ffe:	2b04      	cmp	r3, #4
 8014000:	f63f af3a 	bhi.w	8013e78 <_tzset_unlocked_r+0x34>
 8014004:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014008:	2b06      	cmp	r3, #6
 801400a:	f63f af35 	bhi.w	8013e78 <_tzset_unlocked_r+0x34>
 801400e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8014012:	f887 8008 	strb.w	r8, [r7, #8]
 8014016:	617b      	str	r3, [r7, #20]
 8014018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801401a:	eb04 0803 	add.w	r8, r4, r3
 801401e:	2302      	movs	r3, #2
 8014020:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014024:	2300      	movs	r3, #0
 8014026:	f8ad 301e 	strh.w	r3, [sp, #30]
 801402a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801402e:	930a      	str	r3, [sp, #40]	; 0x28
 8014030:	f898 3000 	ldrb.w	r3, [r8]
 8014034:	2b2f      	cmp	r3, #47	; 0x2f
 8014036:	d109      	bne.n	801404c <_tzset_unlocked_r+0x208>
 8014038:	e9cd a602 	strd	sl, r6, [sp, #8]
 801403c:	e9cd b600 	strd	fp, r6, [sp]
 8014040:	493e      	ldr	r1, [pc, #248]	; (801413c <_tzset_unlocked_r+0x2f8>)
 8014042:	4633      	mov	r3, r6
 8014044:	aa07      	add	r2, sp, #28
 8014046:	4640      	mov	r0, r8
 8014048:	f001 fe94 	bl	8015d74 <siscanf>
 801404c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014050:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014054:	213c      	movs	r1, #60	; 0x3c
 8014056:	fb01 3302 	mla	r3, r1, r2, r3
 801405a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801405e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014062:	fb01 3302 	mla	r3, r1, r2, r3
 8014066:	61bb      	str	r3, [r7, #24]
 8014068:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801406a:	3728      	adds	r7, #40	; 0x28
 801406c:	4444      	add	r4, r8
 801406e:	f1b9 0f00 	cmp.w	r9, #0
 8014072:	d020      	beq.n	80140b6 <_tzset_unlocked_r+0x272>
 8014074:	6868      	ldr	r0, [r5, #4]
 8014076:	f7ff fe29 	bl	8013ccc <__tzcalc_limits>
 801407a:	4b28      	ldr	r3, [pc, #160]	; (801411c <_tzset_unlocked_r+0x2d8>)
 801407c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801407e:	601a      	str	r2, [r3, #0]
 8014080:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8014082:	1a9b      	subs	r3, r3, r2
 8014084:	4a27      	ldr	r2, [pc, #156]	; (8014124 <_tzset_unlocked_r+0x2e0>)
 8014086:	bf18      	it	ne
 8014088:	2301      	movne	r3, #1
 801408a:	6013      	str	r3, [r2, #0]
 801408c:	e6f4      	b.n	8013e78 <_tzset_unlocked_r+0x34>
 801408e:	2b2b      	cmp	r3, #43	; 0x2b
 8014090:	bf08      	it	eq
 8014092:	3401      	addeq	r4, #1
 8014094:	2701      	movs	r7, #1
 8014096:	e772      	b.n	8013f7e <_tzset_unlocked_r+0x13a>
 8014098:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801409c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80140a0:	213c      	movs	r1, #60	; 0x3c
 80140a2:	fb01 3302 	mla	r3, r1, r2, r3
 80140a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80140aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80140ae:	fb01 3302 	mla	r3, r1, r2, r3
 80140b2:	437b      	muls	r3, r7
 80140b4:	e77a      	b.n	8013fac <_tzset_unlocked_r+0x168>
 80140b6:	f04f 0901 	mov.w	r9, #1
 80140ba:	e77d      	b.n	8013fb8 <_tzset_unlocked_r+0x174>
 80140bc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80140c0:	bf06      	itte	eq
 80140c2:	3401      	addeq	r4, #1
 80140c4:	4643      	moveq	r3, r8
 80140c6:	2344      	movne	r3, #68	; 0x44
 80140c8:	220a      	movs	r2, #10
 80140ca:	a90b      	add	r1, sp, #44	; 0x2c
 80140cc:	4620      	mov	r0, r4
 80140ce:	9305      	str	r3, [sp, #20]
 80140d0:	f001 ff52 	bl	8015f78 <strtoul>
 80140d4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80140d8:	9b05      	ldr	r3, [sp, #20]
 80140da:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80140de:	45a0      	cmp	r8, r4
 80140e0:	d114      	bne.n	801410c <_tzset_unlocked_r+0x2c8>
 80140e2:	234d      	movs	r3, #77	; 0x4d
 80140e4:	f1b9 0f00 	cmp.w	r9, #0
 80140e8:	d107      	bne.n	80140fa <_tzset_unlocked_r+0x2b6>
 80140ea:	722b      	strb	r3, [r5, #8]
 80140ec:	2103      	movs	r1, #3
 80140ee:	2302      	movs	r3, #2
 80140f0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80140f4:	f8c5 9014 	str.w	r9, [r5, #20]
 80140f8:	e791      	b.n	801401e <_tzset_unlocked_r+0x1da>
 80140fa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80140fe:	220b      	movs	r2, #11
 8014100:	2301      	movs	r3, #1
 8014102:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8014106:	2300      	movs	r3, #0
 8014108:	63eb      	str	r3, [r5, #60]	; 0x3c
 801410a:	e788      	b.n	801401e <_tzset_unlocked_r+0x1da>
 801410c:	b280      	uxth	r0, r0
 801410e:	723b      	strb	r3, [r7, #8]
 8014110:	6178      	str	r0, [r7, #20]
 8014112:	e784      	b.n	801401e <_tzset_unlocked_r+0x1da>
 8014114:	08018709 	.word	0x08018709
 8014118:	2000a7a0 	.word	0x2000a7a0
 801411c:	2000a7a8 	.word	0x2000a7a8
 8014120:	0801870c 	.word	0x0801870c
 8014124:	2000a7a4 	.word	0x2000a7a4
 8014128:	20000084 	.word	0x20000084
 801412c:	2000a793 	.word	0x2000a793
 8014130:	08018710 	.word	0x08018710
 8014134:	08018733 	.word	0x08018733
 8014138:	0801871f 	.word	0x0801871f
 801413c:	08018732 	.word	0x08018732
 8014140:	2000a788 	.word	0x2000a788

08014144 <__assert_func>:
 8014144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014146:	4614      	mov	r4, r2
 8014148:	461a      	mov	r2, r3
 801414a:	4b09      	ldr	r3, [pc, #36]	; (8014170 <__assert_func+0x2c>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	4605      	mov	r5, r0
 8014150:	68d8      	ldr	r0, [r3, #12]
 8014152:	b14c      	cbz	r4, 8014168 <__assert_func+0x24>
 8014154:	4b07      	ldr	r3, [pc, #28]	; (8014174 <__assert_func+0x30>)
 8014156:	9100      	str	r1, [sp, #0]
 8014158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801415c:	4906      	ldr	r1, [pc, #24]	; (8014178 <__assert_func+0x34>)
 801415e:	462b      	mov	r3, r5
 8014160:	f000 fe9c 	bl	8014e9c <fiprintf>
 8014164:	f001 ffe4 	bl	8016130 <abort>
 8014168:	4b04      	ldr	r3, [pc, #16]	; (801417c <__assert_func+0x38>)
 801416a:	461c      	mov	r4, r3
 801416c:	e7f3      	b.n	8014156 <__assert_func+0x12>
 801416e:	bf00      	nop
 8014170:	20000020 	.word	0x20000020
 8014174:	08018745 	.word	0x08018745
 8014178:	08018752 	.word	0x08018752
 801417c:	08018780 	.word	0x08018780

08014180 <div>:
 8014180:	2900      	cmp	r1, #0
 8014182:	b510      	push	{r4, lr}
 8014184:	fb91 f4f2 	sdiv	r4, r1, r2
 8014188:	fb02 1314 	mls	r3, r2, r4, r1
 801418c:	db06      	blt.n	801419c <div+0x1c>
 801418e:	2b00      	cmp	r3, #0
 8014190:	da01      	bge.n	8014196 <div+0x16>
 8014192:	3401      	adds	r4, #1
 8014194:	1a9b      	subs	r3, r3, r2
 8014196:	e9c0 4300 	strd	r4, r3, [r0]
 801419a:	bd10      	pop	{r4, pc}
 801419c:	2b00      	cmp	r3, #0
 801419e:	bfc4      	itt	gt
 80141a0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80141a4:	189b      	addgt	r3, r3, r2
 80141a6:	e7f6      	b.n	8014196 <div+0x16>

080141a8 <quorem>:
 80141a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ac:	6903      	ldr	r3, [r0, #16]
 80141ae:	690c      	ldr	r4, [r1, #16]
 80141b0:	42a3      	cmp	r3, r4
 80141b2:	4607      	mov	r7, r0
 80141b4:	f2c0 8081 	blt.w	80142ba <quorem+0x112>
 80141b8:	3c01      	subs	r4, #1
 80141ba:	f101 0814 	add.w	r8, r1, #20
 80141be:	f100 0514 	add.w	r5, r0, #20
 80141c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141c6:	9301      	str	r3, [sp, #4]
 80141c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80141cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141d0:	3301      	adds	r3, #1
 80141d2:	429a      	cmp	r2, r3
 80141d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80141d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80141dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80141e0:	d331      	bcc.n	8014246 <quorem+0x9e>
 80141e2:	f04f 0e00 	mov.w	lr, #0
 80141e6:	4640      	mov	r0, r8
 80141e8:	46ac      	mov	ip, r5
 80141ea:	46f2      	mov	sl, lr
 80141ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80141f0:	b293      	uxth	r3, r2
 80141f2:	fb06 e303 	mla	r3, r6, r3, lr
 80141f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	ebaa 0303 	sub.w	r3, sl, r3
 8014200:	f8dc a000 	ldr.w	sl, [ip]
 8014204:	0c12      	lsrs	r2, r2, #16
 8014206:	fa13 f38a 	uxtah	r3, r3, sl
 801420a:	fb06 e202 	mla	r2, r6, r2, lr
 801420e:	9300      	str	r3, [sp, #0]
 8014210:	9b00      	ldr	r3, [sp, #0]
 8014212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014216:	b292      	uxth	r2, r2
 8014218:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801421c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014220:	f8bd 3000 	ldrh.w	r3, [sp]
 8014224:	4581      	cmp	r9, r0
 8014226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801422a:	f84c 3b04 	str.w	r3, [ip], #4
 801422e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014232:	d2db      	bcs.n	80141ec <quorem+0x44>
 8014234:	f855 300b 	ldr.w	r3, [r5, fp]
 8014238:	b92b      	cbnz	r3, 8014246 <quorem+0x9e>
 801423a:	9b01      	ldr	r3, [sp, #4]
 801423c:	3b04      	subs	r3, #4
 801423e:	429d      	cmp	r5, r3
 8014240:	461a      	mov	r2, r3
 8014242:	d32e      	bcc.n	80142a2 <quorem+0xfa>
 8014244:	613c      	str	r4, [r7, #16]
 8014246:	4638      	mov	r0, r7
 8014248:	f001 f9c6 	bl	80155d8 <__mcmp>
 801424c:	2800      	cmp	r0, #0
 801424e:	db24      	blt.n	801429a <quorem+0xf2>
 8014250:	3601      	adds	r6, #1
 8014252:	4628      	mov	r0, r5
 8014254:	f04f 0c00 	mov.w	ip, #0
 8014258:	f858 2b04 	ldr.w	r2, [r8], #4
 801425c:	f8d0 e000 	ldr.w	lr, [r0]
 8014260:	b293      	uxth	r3, r2
 8014262:	ebac 0303 	sub.w	r3, ip, r3
 8014266:	0c12      	lsrs	r2, r2, #16
 8014268:	fa13 f38e 	uxtah	r3, r3, lr
 801426c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014274:	b29b      	uxth	r3, r3
 8014276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801427a:	45c1      	cmp	r9, r8
 801427c:	f840 3b04 	str.w	r3, [r0], #4
 8014280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014284:	d2e8      	bcs.n	8014258 <quorem+0xb0>
 8014286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801428a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801428e:	b922      	cbnz	r2, 801429a <quorem+0xf2>
 8014290:	3b04      	subs	r3, #4
 8014292:	429d      	cmp	r5, r3
 8014294:	461a      	mov	r2, r3
 8014296:	d30a      	bcc.n	80142ae <quorem+0x106>
 8014298:	613c      	str	r4, [r7, #16]
 801429a:	4630      	mov	r0, r6
 801429c:	b003      	add	sp, #12
 801429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a2:	6812      	ldr	r2, [r2, #0]
 80142a4:	3b04      	subs	r3, #4
 80142a6:	2a00      	cmp	r2, #0
 80142a8:	d1cc      	bne.n	8014244 <quorem+0x9c>
 80142aa:	3c01      	subs	r4, #1
 80142ac:	e7c7      	b.n	801423e <quorem+0x96>
 80142ae:	6812      	ldr	r2, [r2, #0]
 80142b0:	3b04      	subs	r3, #4
 80142b2:	2a00      	cmp	r2, #0
 80142b4:	d1f0      	bne.n	8014298 <quorem+0xf0>
 80142b6:	3c01      	subs	r4, #1
 80142b8:	e7eb      	b.n	8014292 <quorem+0xea>
 80142ba:	2000      	movs	r0, #0
 80142bc:	e7ee      	b.n	801429c <quorem+0xf4>
	...

080142c0 <_dtoa_r>:
 80142c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c4:	ed2d 8b04 	vpush	{d8-d9}
 80142c8:	ec57 6b10 	vmov	r6, r7, d0
 80142cc:	b093      	sub	sp, #76	; 0x4c
 80142ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80142d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80142d4:	9106      	str	r1, [sp, #24]
 80142d6:	ee10 aa10 	vmov	sl, s0
 80142da:	4604      	mov	r4, r0
 80142dc:	9209      	str	r2, [sp, #36]	; 0x24
 80142de:	930c      	str	r3, [sp, #48]	; 0x30
 80142e0:	46bb      	mov	fp, r7
 80142e2:	b975      	cbnz	r5, 8014302 <_dtoa_r+0x42>
 80142e4:	2010      	movs	r0, #16
 80142e6:	f7fe fca1 	bl	8012c2c <malloc>
 80142ea:	4602      	mov	r2, r0
 80142ec:	6260      	str	r0, [r4, #36]	; 0x24
 80142ee:	b920      	cbnz	r0, 80142fa <_dtoa_r+0x3a>
 80142f0:	4ba7      	ldr	r3, [pc, #668]	; (8014590 <_dtoa_r+0x2d0>)
 80142f2:	21ea      	movs	r1, #234	; 0xea
 80142f4:	48a7      	ldr	r0, [pc, #668]	; (8014594 <_dtoa_r+0x2d4>)
 80142f6:	f7ff ff25 	bl	8014144 <__assert_func>
 80142fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142fe:	6005      	str	r5, [r0, #0]
 8014300:	60c5      	str	r5, [r0, #12]
 8014302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014304:	6819      	ldr	r1, [r3, #0]
 8014306:	b151      	cbz	r1, 801431e <_dtoa_r+0x5e>
 8014308:	685a      	ldr	r2, [r3, #4]
 801430a:	604a      	str	r2, [r1, #4]
 801430c:	2301      	movs	r3, #1
 801430e:	4093      	lsls	r3, r2
 8014310:	608b      	str	r3, [r1, #8]
 8014312:	4620      	mov	r0, r4
 8014314:	f000 ff1e 	bl	8015154 <_Bfree>
 8014318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801431a:	2200      	movs	r2, #0
 801431c:	601a      	str	r2, [r3, #0]
 801431e:	1e3b      	subs	r3, r7, #0
 8014320:	bfaa      	itet	ge
 8014322:	2300      	movge	r3, #0
 8014324:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014328:	f8c8 3000 	strge.w	r3, [r8]
 801432c:	4b9a      	ldr	r3, [pc, #616]	; (8014598 <_dtoa_r+0x2d8>)
 801432e:	bfbc      	itt	lt
 8014330:	2201      	movlt	r2, #1
 8014332:	f8c8 2000 	strlt.w	r2, [r8]
 8014336:	ea33 030b 	bics.w	r3, r3, fp
 801433a:	d11b      	bne.n	8014374 <_dtoa_r+0xb4>
 801433c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801433e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014342:	6013      	str	r3, [r2, #0]
 8014344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014348:	4333      	orrs	r3, r6
 801434a:	f000 8592 	beq.w	8014e72 <_dtoa_r+0xbb2>
 801434e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014350:	b963      	cbnz	r3, 801436c <_dtoa_r+0xac>
 8014352:	4b92      	ldr	r3, [pc, #584]	; (801459c <_dtoa_r+0x2dc>)
 8014354:	e022      	b.n	801439c <_dtoa_r+0xdc>
 8014356:	4b92      	ldr	r3, [pc, #584]	; (80145a0 <_dtoa_r+0x2e0>)
 8014358:	9301      	str	r3, [sp, #4]
 801435a:	3308      	adds	r3, #8
 801435c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801435e:	6013      	str	r3, [r2, #0]
 8014360:	9801      	ldr	r0, [sp, #4]
 8014362:	b013      	add	sp, #76	; 0x4c
 8014364:	ecbd 8b04 	vpop	{d8-d9}
 8014368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436c:	4b8b      	ldr	r3, [pc, #556]	; (801459c <_dtoa_r+0x2dc>)
 801436e:	9301      	str	r3, [sp, #4]
 8014370:	3303      	adds	r3, #3
 8014372:	e7f3      	b.n	801435c <_dtoa_r+0x9c>
 8014374:	2200      	movs	r2, #0
 8014376:	2300      	movs	r3, #0
 8014378:	4650      	mov	r0, sl
 801437a:	4659      	mov	r1, fp
 801437c:	f7ec fb86 	bl	8000a8c <__aeabi_dcmpeq>
 8014380:	ec4b ab19 	vmov	d9, sl, fp
 8014384:	4680      	mov	r8, r0
 8014386:	b158      	cbz	r0, 80143a0 <_dtoa_r+0xe0>
 8014388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801438a:	2301      	movs	r3, #1
 801438c:	6013      	str	r3, [r2, #0]
 801438e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 856b 	beq.w	8014e6c <_dtoa_r+0xbac>
 8014396:	4883      	ldr	r0, [pc, #524]	; (80145a4 <_dtoa_r+0x2e4>)
 8014398:	6018      	str	r0, [r3, #0]
 801439a:	1e43      	subs	r3, r0, #1
 801439c:	9301      	str	r3, [sp, #4]
 801439e:	e7df      	b.n	8014360 <_dtoa_r+0xa0>
 80143a0:	ec4b ab10 	vmov	d0, sl, fp
 80143a4:	aa10      	add	r2, sp, #64	; 0x40
 80143a6:	a911      	add	r1, sp, #68	; 0x44
 80143a8:	4620      	mov	r0, r4
 80143aa:	f001 f9bb 	bl	8015724 <__d2b>
 80143ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80143b2:	ee08 0a10 	vmov	s16, r0
 80143b6:	2d00      	cmp	r5, #0
 80143b8:	f000 8084 	beq.w	80144c4 <_dtoa_r+0x204>
 80143bc:	ee19 3a90 	vmov	r3, s19
 80143c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80143c8:	4656      	mov	r6, sl
 80143ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80143ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80143d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80143d6:	4b74      	ldr	r3, [pc, #464]	; (80145a8 <_dtoa_r+0x2e8>)
 80143d8:	2200      	movs	r2, #0
 80143da:	4630      	mov	r0, r6
 80143dc:	4639      	mov	r1, r7
 80143de:	f7eb ff35 	bl	800024c <__aeabi_dsub>
 80143e2:	a365      	add	r3, pc, #404	; (adr r3, 8014578 <_dtoa_r+0x2b8>)
 80143e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e8:	f7ec f8e8 	bl	80005bc <__aeabi_dmul>
 80143ec:	a364      	add	r3, pc, #400	; (adr r3, 8014580 <_dtoa_r+0x2c0>)
 80143ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f2:	f7eb ff2d 	bl	8000250 <__adddf3>
 80143f6:	4606      	mov	r6, r0
 80143f8:	4628      	mov	r0, r5
 80143fa:	460f      	mov	r7, r1
 80143fc:	f7ec f874 	bl	80004e8 <__aeabi_i2d>
 8014400:	a361      	add	r3, pc, #388	; (adr r3, 8014588 <_dtoa_r+0x2c8>)
 8014402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014406:	f7ec f8d9 	bl	80005bc <__aeabi_dmul>
 801440a:	4602      	mov	r2, r0
 801440c:	460b      	mov	r3, r1
 801440e:	4630      	mov	r0, r6
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb ff1d 	bl	8000250 <__adddf3>
 8014416:	4606      	mov	r6, r0
 8014418:	460f      	mov	r7, r1
 801441a:	f7ec fb7f 	bl	8000b1c <__aeabi_d2iz>
 801441e:	2200      	movs	r2, #0
 8014420:	9000      	str	r0, [sp, #0]
 8014422:	2300      	movs	r3, #0
 8014424:	4630      	mov	r0, r6
 8014426:	4639      	mov	r1, r7
 8014428:	f7ec fb3a 	bl	8000aa0 <__aeabi_dcmplt>
 801442c:	b150      	cbz	r0, 8014444 <_dtoa_r+0x184>
 801442e:	9800      	ldr	r0, [sp, #0]
 8014430:	f7ec f85a 	bl	80004e8 <__aeabi_i2d>
 8014434:	4632      	mov	r2, r6
 8014436:	463b      	mov	r3, r7
 8014438:	f7ec fb28 	bl	8000a8c <__aeabi_dcmpeq>
 801443c:	b910      	cbnz	r0, 8014444 <_dtoa_r+0x184>
 801443e:	9b00      	ldr	r3, [sp, #0]
 8014440:	3b01      	subs	r3, #1
 8014442:	9300      	str	r3, [sp, #0]
 8014444:	9b00      	ldr	r3, [sp, #0]
 8014446:	2b16      	cmp	r3, #22
 8014448:	d85a      	bhi.n	8014500 <_dtoa_r+0x240>
 801444a:	9a00      	ldr	r2, [sp, #0]
 801444c:	4b57      	ldr	r3, [pc, #348]	; (80145ac <_dtoa_r+0x2ec>)
 801444e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014456:	ec51 0b19 	vmov	r0, r1, d9
 801445a:	f7ec fb21 	bl	8000aa0 <__aeabi_dcmplt>
 801445e:	2800      	cmp	r0, #0
 8014460:	d050      	beq.n	8014504 <_dtoa_r+0x244>
 8014462:	9b00      	ldr	r3, [sp, #0]
 8014464:	3b01      	subs	r3, #1
 8014466:	9300      	str	r3, [sp, #0]
 8014468:	2300      	movs	r3, #0
 801446a:	930b      	str	r3, [sp, #44]	; 0x2c
 801446c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801446e:	1b5d      	subs	r5, r3, r5
 8014470:	1e6b      	subs	r3, r5, #1
 8014472:	9305      	str	r3, [sp, #20]
 8014474:	bf45      	ittet	mi
 8014476:	f1c5 0301 	rsbmi	r3, r5, #1
 801447a:	9304      	strmi	r3, [sp, #16]
 801447c:	2300      	movpl	r3, #0
 801447e:	2300      	movmi	r3, #0
 8014480:	bf4c      	ite	mi
 8014482:	9305      	strmi	r3, [sp, #20]
 8014484:	9304      	strpl	r3, [sp, #16]
 8014486:	9b00      	ldr	r3, [sp, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	db3d      	blt.n	8014508 <_dtoa_r+0x248>
 801448c:	9b05      	ldr	r3, [sp, #20]
 801448e:	9a00      	ldr	r2, [sp, #0]
 8014490:	920a      	str	r2, [sp, #40]	; 0x28
 8014492:	4413      	add	r3, r2
 8014494:	9305      	str	r3, [sp, #20]
 8014496:	2300      	movs	r3, #0
 8014498:	9307      	str	r3, [sp, #28]
 801449a:	9b06      	ldr	r3, [sp, #24]
 801449c:	2b09      	cmp	r3, #9
 801449e:	f200 8089 	bhi.w	80145b4 <_dtoa_r+0x2f4>
 80144a2:	2b05      	cmp	r3, #5
 80144a4:	bfc4      	itt	gt
 80144a6:	3b04      	subgt	r3, #4
 80144a8:	9306      	strgt	r3, [sp, #24]
 80144aa:	9b06      	ldr	r3, [sp, #24]
 80144ac:	f1a3 0302 	sub.w	r3, r3, #2
 80144b0:	bfcc      	ite	gt
 80144b2:	2500      	movgt	r5, #0
 80144b4:	2501      	movle	r5, #1
 80144b6:	2b03      	cmp	r3, #3
 80144b8:	f200 8087 	bhi.w	80145ca <_dtoa_r+0x30a>
 80144bc:	e8df f003 	tbb	[pc, r3]
 80144c0:	59383a2d 	.word	0x59383a2d
 80144c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80144c8:	441d      	add	r5, r3
 80144ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80144ce:	2b20      	cmp	r3, #32
 80144d0:	bfc1      	itttt	gt
 80144d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80144d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80144da:	fa0b f303 	lslgt.w	r3, fp, r3
 80144de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80144e2:	bfda      	itte	le
 80144e4:	f1c3 0320 	rsble	r3, r3, #32
 80144e8:	fa06 f003 	lslle.w	r0, r6, r3
 80144ec:	4318      	orrgt	r0, r3
 80144ee:	f7eb ffeb 	bl	80004c8 <__aeabi_ui2d>
 80144f2:	2301      	movs	r3, #1
 80144f4:	4606      	mov	r6, r0
 80144f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80144fa:	3d01      	subs	r5, #1
 80144fc:	930e      	str	r3, [sp, #56]	; 0x38
 80144fe:	e76a      	b.n	80143d6 <_dtoa_r+0x116>
 8014500:	2301      	movs	r3, #1
 8014502:	e7b2      	b.n	801446a <_dtoa_r+0x1aa>
 8014504:	900b      	str	r0, [sp, #44]	; 0x2c
 8014506:	e7b1      	b.n	801446c <_dtoa_r+0x1ac>
 8014508:	9b04      	ldr	r3, [sp, #16]
 801450a:	9a00      	ldr	r2, [sp, #0]
 801450c:	1a9b      	subs	r3, r3, r2
 801450e:	9304      	str	r3, [sp, #16]
 8014510:	4253      	negs	r3, r2
 8014512:	9307      	str	r3, [sp, #28]
 8014514:	2300      	movs	r3, #0
 8014516:	930a      	str	r3, [sp, #40]	; 0x28
 8014518:	e7bf      	b.n	801449a <_dtoa_r+0x1da>
 801451a:	2300      	movs	r3, #0
 801451c:	9308      	str	r3, [sp, #32]
 801451e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014520:	2b00      	cmp	r3, #0
 8014522:	dc55      	bgt.n	80145d0 <_dtoa_r+0x310>
 8014524:	2301      	movs	r3, #1
 8014526:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801452a:	461a      	mov	r2, r3
 801452c:	9209      	str	r2, [sp, #36]	; 0x24
 801452e:	e00c      	b.n	801454a <_dtoa_r+0x28a>
 8014530:	2301      	movs	r3, #1
 8014532:	e7f3      	b.n	801451c <_dtoa_r+0x25c>
 8014534:	2300      	movs	r3, #0
 8014536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014538:	9308      	str	r3, [sp, #32]
 801453a:	9b00      	ldr	r3, [sp, #0]
 801453c:	4413      	add	r3, r2
 801453e:	9302      	str	r3, [sp, #8]
 8014540:	3301      	adds	r3, #1
 8014542:	2b01      	cmp	r3, #1
 8014544:	9303      	str	r3, [sp, #12]
 8014546:	bfb8      	it	lt
 8014548:	2301      	movlt	r3, #1
 801454a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801454c:	2200      	movs	r2, #0
 801454e:	6042      	str	r2, [r0, #4]
 8014550:	2204      	movs	r2, #4
 8014552:	f102 0614 	add.w	r6, r2, #20
 8014556:	429e      	cmp	r6, r3
 8014558:	6841      	ldr	r1, [r0, #4]
 801455a:	d93d      	bls.n	80145d8 <_dtoa_r+0x318>
 801455c:	4620      	mov	r0, r4
 801455e:	f000 fdb9 	bl	80150d4 <_Balloc>
 8014562:	9001      	str	r0, [sp, #4]
 8014564:	2800      	cmp	r0, #0
 8014566:	d13b      	bne.n	80145e0 <_dtoa_r+0x320>
 8014568:	4b11      	ldr	r3, [pc, #68]	; (80145b0 <_dtoa_r+0x2f0>)
 801456a:	4602      	mov	r2, r0
 801456c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014570:	e6c0      	b.n	80142f4 <_dtoa_r+0x34>
 8014572:	2301      	movs	r3, #1
 8014574:	e7df      	b.n	8014536 <_dtoa_r+0x276>
 8014576:	bf00      	nop
 8014578:	636f4361 	.word	0x636f4361
 801457c:	3fd287a7 	.word	0x3fd287a7
 8014580:	8b60c8b3 	.word	0x8b60c8b3
 8014584:	3fc68a28 	.word	0x3fc68a28
 8014588:	509f79fb 	.word	0x509f79fb
 801458c:	3fd34413 	.word	0x3fd34413
 8014590:	08018548 	.word	0x08018548
 8014594:	0801878e 	.word	0x0801878e
 8014598:	7ff00000 	.word	0x7ff00000
 801459c:	0801878a 	.word	0x0801878a
 80145a0:	08018781 	.word	0x08018781
 80145a4:	08018ad7 	.word	0x08018ad7
 80145a8:	3ff80000 	.word	0x3ff80000
 80145ac:	08018880 	.word	0x08018880
 80145b0:	080187e9 	.word	0x080187e9
 80145b4:	2501      	movs	r5, #1
 80145b6:	2300      	movs	r3, #0
 80145b8:	9306      	str	r3, [sp, #24]
 80145ba:	9508      	str	r5, [sp, #32]
 80145bc:	f04f 33ff 	mov.w	r3, #4294967295
 80145c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80145c4:	2200      	movs	r2, #0
 80145c6:	2312      	movs	r3, #18
 80145c8:	e7b0      	b.n	801452c <_dtoa_r+0x26c>
 80145ca:	2301      	movs	r3, #1
 80145cc:	9308      	str	r3, [sp, #32]
 80145ce:	e7f5      	b.n	80145bc <_dtoa_r+0x2fc>
 80145d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80145d6:	e7b8      	b.n	801454a <_dtoa_r+0x28a>
 80145d8:	3101      	adds	r1, #1
 80145da:	6041      	str	r1, [r0, #4]
 80145dc:	0052      	lsls	r2, r2, #1
 80145de:	e7b8      	b.n	8014552 <_dtoa_r+0x292>
 80145e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145e2:	9a01      	ldr	r2, [sp, #4]
 80145e4:	601a      	str	r2, [r3, #0]
 80145e6:	9b03      	ldr	r3, [sp, #12]
 80145e8:	2b0e      	cmp	r3, #14
 80145ea:	f200 809d 	bhi.w	8014728 <_dtoa_r+0x468>
 80145ee:	2d00      	cmp	r5, #0
 80145f0:	f000 809a 	beq.w	8014728 <_dtoa_r+0x468>
 80145f4:	9b00      	ldr	r3, [sp, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	dd32      	ble.n	8014660 <_dtoa_r+0x3a0>
 80145fa:	4ab7      	ldr	r2, [pc, #732]	; (80148d8 <_dtoa_r+0x618>)
 80145fc:	f003 030f 	and.w	r3, r3, #15
 8014600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014608:	9b00      	ldr	r3, [sp, #0]
 801460a:	05d8      	lsls	r0, r3, #23
 801460c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014610:	d516      	bpl.n	8014640 <_dtoa_r+0x380>
 8014612:	4bb2      	ldr	r3, [pc, #712]	; (80148dc <_dtoa_r+0x61c>)
 8014614:	ec51 0b19 	vmov	r0, r1, d9
 8014618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801461c:	f7ec f8f8 	bl	8000810 <__aeabi_ddiv>
 8014620:	f007 070f 	and.w	r7, r7, #15
 8014624:	4682      	mov	sl, r0
 8014626:	468b      	mov	fp, r1
 8014628:	2503      	movs	r5, #3
 801462a:	4eac      	ldr	r6, [pc, #688]	; (80148dc <_dtoa_r+0x61c>)
 801462c:	b957      	cbnz	r7, 8014644 <_dtoa_r+0x384>
 801462e:	4642      	mov	r2, r8
 8014630:	464b      	mov	r3, r9
 8014632:	4650      	mov	r0, sl
 8014634:	4659      	mov	r1, fp
 8014636:	f7ec f8eb 	bl	8000810 <__aeabi_ddiv>
 801463a:	4682      	mov	sl, r0
 801463c:	468b      	mov	fp, r1
 801463e:	e028      	b.n	8014692 <_dtoa_r+0x3d2>
 8014640:	2502      	movs	r5, #2
 8014642:	e7f2      	b.n	801462a <_dtoa_r+0x36a>
 8014644:	07f9      	lsls	r1, r7, #31
 8014646:	d508      	bpl.n	801465a <_dtoa_r+0x39a>
 8014648:	4640      	mov	r0, r8
 801464a:	4649      	mov	r1, r9
 801464c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014650:	f7eb ffb4 	bl	80005bc <__aeabi_dmul>
 8014654:	3501      	adds	r5, #1
 8014656:	4680      	mov	r8, r0
 8014658:	4689      	mov	r9, r1
 801465a:	107f      	asrs	r7, r7, #1
 801465c:	3608      	adds	r6, #8
 801465e:	e7e5      	b.n	801462c <_dtoa_r+0x36c>
 8014660:	f000 809b 	beq.w	801479a <_dtoa_r+0x4da>
 8014664:	9b00      	ldr	r3, [sp, #0]
 8014666:	4f9d      	ldr	r7, [pc, #628]	; (80148dc <_dtoa_r+0x61c>)
 8014668:	425e      	negs	r6, r3
 801466a:	4b9b      	ldr	r3, [pc, #620]	; (80148d8 <_dtoa_r+0x618>)
 801466c:	f006 020f 	and.w	r2, r6, #15
 8014670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014678:	ec51 0b19 	vmov	r0, r1, d9
 801467c:	f7eb ff9e 	bl	80005bc <__aeabi_dmul>
 8014680:	1136      	asrs	r6, r6, #4
 8014682:	4682      	mov	sl, r0
 8014684:	468b      	mov	fp, r1
 8014686:	2300      	movs	r3, #0
 8014688:	2502      	movs	r5, #2
 801468a:	2e00      	cmp	r6, #0
 801468c:	d17a      	bne.n	8014784 <_dtoa_r+0x4c4>
 801468e:	2b00      	cmp	r3, #0
 8014690:	d1d3      	bne.n	801463a <_dtoa_r+0x37a>
 8014692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014694:	2b00      	cmp	r3, #0
 8014696:	f000 8082 	beq.w	801479e <_dtoa_r+0x4de>
 801469a:	4b91      	ldr	r3, [pc, #580]	; (80148e0 <_dtoa_r+0x620>)
 801469c:	2200      	movs	r2, #0
 801469e:	4650      	mov	r0, sl
 80146a0:	4659      	mov	r1, fp
 80146a2:	f7ec f9fd 	bl	8000aa0 <__aeabi_dcmplt>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d079      	beq.n	801479e <_dtoa_r+0x4de>
 80146aa:	9b03      	ldr	r3, [sp, #12]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d076      	beq.n	801479e <_dtoa_r+0x4de>
 80146b0:	9b02      	ldr	r3, [sp, #8]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	dd36      	ble.n	8014724 <_dtoa_r+0x464>
 80146b6:	9b00      	ldr	r3, [sp, #0]
 80146b8:	4650      	mov	r0, sl
 80146ba:	4659      	mov	r1, fp
 80146bc:	1e5f      	subs	r7, r3, #1
 80146be:	2200      	movs	r2, #0
 80146c0:	4b88      	ldr	r3, [pc, #544]	; (80148e4 <_dtoa_r+0x624>)
 80146c2:	f7eb ff7b 	bl	80005bc <__aeabi_dmul>
 80146c6:	9e02      	ldr	r6, [sp, #8]
 80146c8:	4682      	mov	sl, r0
 80146ca:	468b      	mov	fp, r1
 80146cc:	3501      	adds	r5, #1
 80146ce:	4628      	mov	r0, r5
 80146d0:	f7eb ff0a 	bl	80004e8 <__aeabi_i2d>
 80146d4:	4652      	mov	r2, sl
 80146d6:	465b      	mov	r3, fp
 80146d8:	f7eb ff70 	bl	80005bc <__aeabi_dmul>
 80146dc:	4b82      	ldr	r3, [pc, #520]	; (80148e8 <_dtoa_r+0x628>)
 80146de:	2200      	movs	r2, #0
 80146e0:	f7eb fdb6 	bl	8000250 <__adddf3>
 80146e4:	46d0      	mov	r8, sl
 80146e6:	46d9      	mov	r9, fp
 80146e8:	4682      	mov	sl, r0
 80146ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80146ee:	2e00      	cmp	r6, #0
 80146f0:	d158      	bne.n	80147a4 <_dtoa_r+0x4e4>
 80146f2:	4b7e      	ldr	r3, [pc, #504]	; (80148ec <_dtoa_r+0x62c>)
 80146f4:	2200      	movs	r2, #0
 80146f6:	4640      	mov	r0, r8
 80146f8:	4649      	mov	r1, r9
 80146fa:	f7eb fda7 	bl	800024c <__aeabi_dsub>
 80146fe:	4652      	mov	r2, sl
 8014700:	465b      	mov	r3, fp
 8014702:	4680      	mov	r8, r0
 8014704:	4689      	mov	r9, r1
 8014706:	f7ec f9e9 	bl	8000adc <__aeabi_dcmpgt>
 801470a:	2800      	cmp	r0, #0
 801470c:	f040 8295 	bne.w	8014c3a <_dtoa_r+0x97a>
 8014710:	4652      	mov	r2, sl
 8014712:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014716:	4640      	mov	r0, r8
 8014718:	4649      	mov	r1, r9
 801471a:	f7ec f9c1 	bl	8000aa0 <__aeabi_dcmplt>
 801471e:	2800      	cmp	r0, #0
 8014720:	f040 8289 	bne.w	8014c36 <_dtoa_r+0x976>
 8014724:	ec5b ab19 	vmov	sl, fp, d9
 8014728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801472a:	2b00      	cmp	r3, #0
 801472c:	f2c0 8148 	blt.w	80149c0 <_dtoa_r+0x700>
 8014730:	9a00      	ldr	r2, [sp, #0]
 8014732:	2a0e      	cmp	r2, #14
 8014734:	f300 8144 	bgt.w	80149c0 <_dtoa_r+0x700>
 8014738:	4b67      	ldr	r3, [pc, #412]	; (80148d8 <_dtoa_r+0x618>)
 801473a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801473e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014744:	2b00      	cmp	r3, #0
 8014746:	f280 80d5 	bge.w	80148f4 <_dtoa_r+0x634>
 801474a:	9b03      	ldr	r3, [sp, #12]
 801474c:	2b00      	cmp	r3, #0
 801474e:	f300 80d1 	bgt.w	80148f4 <_dtoa_r+0x634>
 8014752:	f040 826f 	bne.w	8014c34 <_dtoa_r+0x974>
 8014756:	4b65      	ldr	r3, [pc, #404]	; (80148ec <_dtoa_r+0x62c>)
 8014758:	2200      	movs	r2, #0
 801475a:	4640      	mov	r0, r8
 801475c:	4649      	mov	r1, r9
 801475e:	f7eb ff2d 	bl	80005bc <__aeabi_dmul>
 8014762:	4652      	mov	r2, sl
 8014764:	465b      	mov	r3, fp
 8014766:	f7ec f9af 	bl	8000ac8 <__aeabi_dcmpge>
 801476a:	9e03      	ldr	r6, [sp, #12]
 801476c:	4637      	mov	r7, r6
 801476e:	2800      	cmp	r0, #0
 8014770:	f040 8245 	bne.w	8014bfe <_dtoa_r+0x93e>
 8014774:	9d01      	ldr	r5, [sp, #4]
 8014776:	2331      	movs	r3, #49	; 0x31
 8014778:	f805 3b01 	strb.w	r3, [r5], #1
 801477c:	9b00      	ldr	r3, [sp, #0]
 801477e:	3301      	adds	r3, #1
 8014780:	9300      	str	r3, [sp, #0]
 8014782:	e240      	b.n	8014c06 <_dtoa_r+0x946>
 8014784:	07f2      	lsls	r2, r6, #31
 8014786:	d505      	bpl.n	8014794 <_dtoa_r+0x4d4>
 8014788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801478c:	f7eb ff16 	bl	80005bc <__aeabi_dmul>
 8014790:	3501      	adds	r5, #1
 8014792:	2301      	movs	r3, #1
 8014794:	1076      	asrs	r6, r6, #1
 8014796:	3708      	adds	r7, #8
 8014798:	e777      	b.n	801468a <_dtoa_r+0x3ca>
 801479a:	2502      	movs	r5, #2
 801479c:	e779      	b.n	8014692 <_dtoa_r+0x3d2>
 801479e:	9f00      	ldr	r7, [sp, #0]
 80147a0:	9e03      	ldr	r6, [sp, #12]
 80147a2:	e794      	b.n	80146ce <_dtoa_r+0x40e>
 80147a4:	9901      	ldr	r1, [sp, #4]
 80147a6:	4b4c      	ldr	r3, [pc, #304]	; (80148d8 <_dtoa_r+0x618>)
 80147a8:	4431      	add	r1, r6
 80147aa:	910d      	str	r1, [sp, #52]	; 0x34
 80147ac:	9908      	ldr	r1, [sp, #32]
 80147ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80147b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80147b6:	2900      	cmp	r1, #0
 80147b8:	d043      	beq.n	8014842 <_dtoa_r+0x582>
 80147ba:	494d      	ldr	r1, [pc, #308]	; (80148f0 <_dtoa_r+0x630>)
 80147bc:	2000      	movs	r0, #0
 80147be:	f7ec f827 	bl	8000810 <__aeabi_ddiv>
 80147c2:	4652      	mov	r2, sl
 80147c4:	465b      	mov	r3, fp
 80147c6:	f7eb fd41 	bl	800024c <__aeabi_dsub>
 80147ca:	9d01      	ldr	r5, [sp, #4]
 80147cc:	4682      	mov	sl, r0
 80147ce:	468b      	mov	fp, r1
 80147d0:	4649      	mov	r1, r9
 80147d2:	4640      	mov	r0, r8
 80147d4:	f7ec f9a2 	bl	8000b1c <__aeabi_d2iz>
 80147d8:	4606      	mov	r6, r0
 80147da:	f7eb fe85 	bl	80004e8 <__aeabi_i2d>
 80147de:	4602      	mov	r2, r0
 80147e0:	460b      	mov	r3, r1
 80147e2:	4640      	mov	r0, r8
 80147e4:	4649      	mov	r1, r9
 80147e6:	f7eb fd31 	bl	800024c <__aeabi_dsub>
 80147ea:	3630      	adds	r6, #48	; 0x30
 80147ec:	f805 6b01 	strb.w	r6, [r5], #1
 80147f0:	4652      	mov	r2, sl
 80147f2:	465b      	mov	r3, fp
 80147f4:	4680      	mov	r8, r0
 80147f6:	4689      	mov	r9, r1
 80147f8:	f7ec f952 	bl	8000aa0 <__aeabi_dcmplt>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d163      	bne.n	80148c8 <_dtoa_r+0x608>
 8014800:	4642      	mov	r2, r8
 8014802:	464b      	mov	r3, r9
 8014804:	4936      	ldr	r1, [pc, #216]	; (80148e0 <_dtoa_r+0x620>)
 8014806:	2000      	movs	r0, #0
 8014808:	f7eb fd20 	bl	800024c <__aeabi_dsub>
 801480c:	4652      	mov	r2, sl
 801480e:	465b      	mov	r3, fp
 8014810:	f7ec f946 	bl	8000aa0 <__aeabi_dcmplt>
 8014814:	2800      	cmp	r0, #0
 8014816:	f040 80b5 	bne.w	8014984 <_dtoa_r+0x6c4>
 801481a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801481c:	429d      	cmp	r5, r3
 801481e:	d081      	beq.n	8014724 <_dtoa_r+0x464>
 8014820:	4b30      	ldr	r3, [pc, #192]	; (80148e4 <_dtoa_r+0x624>)
 8014822:	2200      	movs	r2, #0
 8014824:	4650      	mov	r0, sl
 8014826:	4659      	mov	r1, fp
 8014828:	f7eb fec8 	bl	80005bc <__aeabi_dmul>
 801482c:	4b2d      	ldr	r3, [pc, #180]	; (80148e4 <_dtoa_r+0x624>)
 801482e:	4682      	mov	sl, r0
 8014830:	468b      	mov	fp, r1
 8014832:	4640      	mov	r0, r8
 8014834:	4649      	mov	r1, r9
 8014836:	2200      	movs	r2, #0
 8014838:	f7eb fec0 	bl	80005bc <__aeabi_dmul>
 801483c:	4680      	mov	r8, r0
 801483e:	4689      	mov	r9, r1
 8014840:	e7c6      	b.n	80147d0 <_dtoa_r+0x510>
 8014842:	4650      	mov	r0, sl
 8014844:	4659      	mov	r1, fp
 8014846:	f7eb feb9 	bl	80005bc <__aeabi_dmul>
 801484a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801484c:	9d01      	ldr	r5, [sp, #4]
 801484e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014850:	4682      	mov	sl, r0
 8014852:	468b      	mov	fp, r1
 8014854:	4649      	mov	r1, r9
 8014856:	4640      	mov	r0, r8
 8014858:	f7ec f960 	bl	8000b1c <__aeabi_d2iz>
 801485c:	4606      	mov	r6, r0
 801485e:	f7eb fe43 	bl	80004e8 <__aeabi_i2d>
 8014862:	3630      	adds	r6, #48	; 0x30
 8014864:	4602      	mov	r2, r0
 8014866:	460b      	mov	r3, r1
 8014868:	4640      	mov	r0, r8
 801486a:	4649      	mov	r1, r9
 801486c:	f7eb fcee 	bl	800024c <__aeabi_dsub>
 8014870:	f805 6b01 	strb.w	r6, [r5], #1
 8014874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014876:	429d      	cmp	r5, r3
 8014878:	4680      	mov	r8, r0
 801487a:	4689      	mov	r9, r1
 801487c:	f04f 0200 	mov.w	r2, #0
 8014880:	d124      	bne.n	80148cc <_dtoa_r+0x60c>
 8014882:	4b1b      	ldr	r3, [pc, #108]	; (80148f0 <_dtoa_r+0x630>)
 8014884:	4650      	mov	r0, sl
 8014886:	4659      	mov	r1, fp
 8014888:	f7eb fce2 	bl	8000250 <__adddf3>
 801488c:	4602      	mov	r2, r0
 801488e:	460b      	mov	r3, r1
 8014890:	4640      	mov	r0, r8
 8014892:	4649      	mov	r1, r9
 8014894:	f7ec f922 	bl	8000adc <__aeabi_dcmpgt>
 8014898:	2800      	cmp	r0, #0
 801489a:	d173      	bne.n	8014984 <_dtoa_r+0x6c4>
 801489c:	4652      	mov	r2, sl
 801489e:	465b      	mov	r3, fp
 80148a0:	4913      	ldr	r1, [pc, #76]	; (80148f0 <_dtoa_r+0x630>)
 80148a2:	2000      	movs	r0, #0
 80148a4:	f7eb fcd2 	bl	800024c <__aeabi_dsub>
 80148a8:	4602      	mov	r2, r0
 80148aa:	460b      	mov	r3, r1
 80148ac:	4640      	mov	r0, r8
 80148ae:	4649      	mov	r1, r9
 80148b0:	f7ec f8f6 	bl	8000aa0 <__aeabi_dcmplt>
 80148b4:	2800      	cmp	r0, #0
 80148b6:	f43f af35 	beq.w	8014724 <_dtoa_r+0x464>
 80148ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80148bc:	1e6b      	subs	r3, r5, #1
 80148be:	930f      	str	r3, [sp, #60]	; 0x3c
 80148c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80148c4:	2b30      	cmp	r3, #48	; 0x30
 80148c6:	d0f8      	beq.n	80148ba <_dtoa_r+0x5fa>
 80148c8:	9700      	str	r7, [sp, #0]
 80148ca:	e049      	b.n	8014960 <_dtoa_r+0x6a0>
 80148cc:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <_dtoa_r+0x624>)
 80148ce:	f7eb fe75 	bl	80005bc <__aeabi_dmul>
 80148d2:	4680      	mov	r8, r0
 80148d4:	4689      	mov	r9, r1
 80148d6:	e7bd      	b.n	8014854 <_dtoa_r+0x594>
 80148d8:	08018880 	.word	0x08018880
 80148dc:	08018858 	.word	0x08018858
 80148e0:	3ff00000 	.word	0x3ff00000
 80148e4:	40240000 	.word	0x40240000
 80148e8:	401c0000 	.word	0x401c0000
 80148ec:	40140000 	.word	0x40140000
 80148f0:	3fe00000 	.word	0x3fe00000
 80148f4:	9d01      	ldr	r5, [sp, #4]
 80148f6:	4656      	mov	r6, sl
 80148f8:	465f      	mov	r7, fp
 80148fa:	4642      	mov	r2, r8
 80148fc:	464b      	mov	r3, r9
 80148fe:	4630      	mov	r0, r6
 8014900:	4639      	mov	r1, r7
 8014902:	f7eb ff85 	bl	8000810 <__aeabi_ddiv>
 8014906:	f7ec f909 	bl	8000b1c <__aeabi_d2iz>
 801490a:	4682      	mov	sl, r0
 801490c:	f7eb fdec 	bl	80004e8 <__aeabi_i2d>
 8014910:	4642      	mov	r2, r8
 8014912:	464b      	mov	r3, r9
 8014914:	f7eb fe52 	bl	80005bc <__aeabi_dmul>
 8014918:	4602      	mov	r2, r0
 801491a:	460b      	mov	r3, r1
 801491c:	4630      	mov	r0, r6
 801491e:	4639      	mov	r1, r7
 8014920:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014924:	f7eb fc92 	bl	800024c <__aeabi_dsub>
 8014928:	f805 6b01 	strb.w	r6, [r5], #1
 801492c:	9e01      	ldr	r6, [sp, #4]
 801492e:	9f03      	ldr	r7, [sp, #12]
 8014930:	1bae      	subs	r6, r5, r6
 8014932:	42b7      	cmp	r7, r6
 8014934:	4602      	mov	r2, r0
 8014936:	460b      	mov	r3, r1
 8014938:	d135      	bne.n	80149a6 <_dtoa_r+0x6e6>
 801493a:	f7eb fc89 	bl	8000250 <__adddf3>
 801493e:	4642      	mov	r2, r8
 8014940:	464b      	mov	r3, r9
 8014942:	4606      	mov	r6, r0
 8014944:	460f      	mov	r7, r1
 8014946:	f7ec f8c9 	bl	8000adc <__aeabi_dcmpgt>
 801494a:	b9d0      	cbnz	r0, 8014982 <_dtoa_r+0x6c2>
 801494c:	4642      	mov	r2, r8
 801494e:	464b      	mov	r3, r9
 8014950:	4630      	mov	r0, r6
 8014952:	4639      	mov	r1, r7
 8014954:	f7ec f89a 	bl	8000a8c <__aeabi_dcmpeq>
 8014958:	b110      	cbz	r0, 8014960 <_dtoa_r+0x6a0>
 801495a:	f01a 0f01 	tst.w	sl, #1
 801495e:	d110      	bne.n	8014982 <_dtoa_r+0x6c2>
 8014960:	4620      	mov	r0, r4
 8014962:	ee18 1a10 	vmov	r1, s16
 8014966:	f000 fbf5 	bl	8015154 <_Bfree>
 801496a:	2300      	movs	r3, #0
 801496c:	9800      	ldr	r0, [sp, #0]
 801496e:	702b      	strb	r3, [r5, #0]
 8014970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014972:	3001      	adds	r0, #1
 8014974:	6018      	str	r0, [r3, #0]
 8014976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014978:	2b00      	cmp	r3, #0
 801497a:	f43f acf1 	beq.w	8014360 <_dtoa_r+0xa0>
 801497e:	601d      	str	r5, [r3, #0]
 8014980:	e4ee      	b.n	8014360 <_dtoa_r+0xa0>
 8014982:	9f00      	ldr	r7, [sp, #0]
 8014984:	462b      	mov	r3, r5
 8014986:	461d      	mov	r5, r3
 8014988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801498c:	2a39      	cmp	r2, #57	; 0x39
 801498e:	d106      	bne.n	801499e <_dtoa_r+0x6de>
 8014990:	9a01      	ldr	r2, [sp, #4]
 8014992:	429a      	cmp	r2, r3
 8014994:	d1f7      	bne.n	8014986 <_dtoa_r+0x6c6>
 8014996:	9901      	ldr	r1, [sp, #4]
 8014998:	2230      	movs	r2, #48	; 0x30
 801499a:	3701      	adds	r7, #1
 801499c:	700a      	strb	r2, [r1, #0]
 801499e:	781a      	ldrb	r2, [r3, #0]
 80149a0:	3201      	adds	r2, #1
 80149a2:	701a      	strb	r2, [r3, #0]
 80149a4:	e790      	b.n	80148c8 <_dtoa_r+0x608>
 80149a6:	4ba6      	ldr	r3, [pc, #664]	; (8014c40 <_dtoa_r+0x980>)
 80149a8:	2200      	movs	r2, #0
 80149aa:	f7eb fe07 	bl	80005bc <__aeabi_dmul>
 80149ae:	2200      	movs	r2, #0
 80149b0:	2300      	movs	r3, #0
 80149b2:	4606      	mov	r6, r0
 80149b4:	460f      	mov	r7, r1
 80149b6:	f7ec f869 	bl	8000a8c <__aeabi_dcmpeq>
 80149ba:	2800      	cmp	r0, #0
 80149bc:	d09d      	beq.n	80148fa <_dtoa_r+0x63a>
 80149be:	e7cf      	b.n	8014960 <_dtoa_r+0x6a0>
 80149c0:	9a08      	ldr	r2, [sp, #32]
 80149c2:	2a00      	cmp	r2, #0
 80149c4:	f000 80d7 	beq.w	8014b76 <_dtoa_r+0x8b6>
 80149c8:	9a06      	ldr	r2, [sp, #24]
 80149ca:	2a01      	cmp	r2, #1
 80149cc:	f300 80ba 	bgt.w	8014b44 <_dtoa_r+0x884>
 80149d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149d2:	2a00      	cmp	r2, #0
 80149d4:	f000 80b2 	beq.w	8014b3c <_dtoa_r+0x87c>
 80149d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80149dc:	9e07      	ldr	r6, [sp, #28]
 80149de:	9d04      	ldr	r5, [sp, #16]
 80149e0:	9a04      	ldr	r2, [sp, #16]
 80149e2:	441a      	add	r2, r3
 80149e4:	9204      	str	r2, [sp, #16]
 80149e6:	9a05      	ldr	r2, [sp, #20]
 80149e8:	2101      	movs	r1, #1
 80149ea:	441a      	add	r2, r3
 80149ec:	4620      	mov	r0, r4
 80149ee:	9205      	str	r2, [sp, #20]
 80149f0:	f000 fc68 	bl	80152c4 <__i2b>
 80149f4:	4607      	mov	r7, r0
 80149f6:	2d00      	cmp	r5, #0
 80149f8:	dd0c      	ble.n	8014a14 <_dtoa_r+0x754>
 80149fa:	9b05      	ldr	r3, [sp, #20]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	dd09      	ble.n	8014a14 <_dtoa_r+0x754>
 8014a00:	42ab      	cmp	r3, r5
 8014a02:	9a04      	ldr	r2, [sp, #16]
 8014a04:	bfa8      	it	ge
 8014a06:	462b      	movge	r3, r5
 8014a08:	1ad2      	subs	r2, r2, r3
 8014a0a:	9204      	str	r2, [sp, #16]
 8014a0c:	9a05      	ldr	r2, [sp, #20]
 8014a0e:	1aed      	subs	r5, r5, r3
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	9305      	str	r3, [sp, #20]
 8014a14:	9b07      	ldr	r3, [sp, #28]
 8014a16:	b31b      	cbz	r3, 8014a60 <_dtoa_r+0x7a0>
 8014a18:	9b08      	ldr	r3, [sp, #32]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	f000 80af 	beq.w	8014b7e <_dtoa_r+0x8be>
 8014a20:	2e00      	cmp	r6, #0
 8014a22:	dd13      	ble.n	8014a4c <_dtoa_r+0x78c>
 8014a24:	4639      	mov	r1, r7
 8014a26:	4632      	mov	r2, r6
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f000 fd0b 	bl	8015444 <__pow5mult>
 8014a2e:	ee18 2a10 	vmov	r2, s16
 8014a32:	4601      	mov	r1, r0
 8014a34:	4607      	mov	r7, r0
 8014a36:	4620      	mov	r0, r4
 8014a38:	f000 fc5a 	bl	80152f0 <__multiply>
 8014a3c:	ee18 1a10 	vmov	r1, s16
 8014a40:	4680      	mov	r8, r0
 8014a42:	4620      	mov	r0, r4
 8014a44:	f000 fb86 	bl	8015154 <_Bfree>
 8014a48:	ee08 8a10 	vmov	s16, r8
 8014a4c:	9b07      	ldr	r3, [sp, #28]
 8014a4e:	1b9a      	subs	r2, r3, r6
 8014a50:	d006      	beq.n	8014a60 <_dtoa_r+0x7a0>
 8014a52:	ee18 1a10 	vmov	r1, s16
 8014a56:	4620      	mov	r0, r4
 8014a58:	f000 fcf4 	bl	8015444 <__pow5mult>
 8014a5c:	ee08 0a10 	vmov	s16, r0
 8014a60:	2101      	movs	r1, #1
 8014a62:	4620      	mov	r0, r4
 8014a64:	f000 fc2e 	bl	80152c4 <__i2b>
 8014a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	f340 8088 	ble.w	8014b82 <_dtoa_r+0x8c2>
 8014a72:	461a      	mov	r2, r3
 8014a74:	4601      	mov	r1, r0
 8014a76:	4620      	mov	r0, r4
 8014a78:	f000 fce4 	bl	8015444 <__pow5mult>
 8014a7c:	9b06      	ldr	r3, [sp, #24]
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	4606      	mov	r6, r0
 8014a82:	f340 8081 	ble.w	8014b88 <_dtoa_r+0x8c8>
 8014a86:	f04f 0800 	mov.w	r8, #0
 8014a8a:	6933      	ldr	r3, [r6, #16]
 8014a8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014a90:	6918      	ldr	r0, [r3, #16]
 8014a92:	f000 fbc7 	bl	8015224 <__hi0bits>
 8014a96:	f1c0 0020 	rsb	r0, r0, #32
 8014a9a:	9b05      	ldr	r3, [sp, #20]
 8014a9c:	4418      	add	r0, r3
 8014a9e:	f010 001f 	ands.w	r0, r0, #31
 8014aa2:	f000 8092 	beq.w	8014bca <_dtoa_r+0x90a>
 8014aa6:	f1c0 0320 	rsb	r3, r0, #32
 8014aaa:	2b04      	cmp	r3, #4
 8014aac:	f340 808a 	ble.w	8014bc4 <_dtoa_r+0x904>
 8014ab0:	f1c0 001c 	rsb	r0, r0, #28
 8014ab4:	9b04      	ldr	r3, [sp, #16]
 8014ab6:	4403      	add	r3, r0
 8014ab8:	9304      	str	r3, [sp, #16]
 8014aba:	9b05      	ldr	r3, [sp, #20]
 8014abc:	4403      	add	r3, r0
 8014abe:	4405      	add	r5, r0
 8014ac0:	9305      	str	r3, [sp, #20]
 8014ac2:	9b04      	ldr	r3, [sp, #16]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	dd07      	ble.n	8014ad8 <_dtoa_r+0x818>
 8014ac8:	ee18 1a10 	vmov	r1, s16
 8014acc:	461a      	mov	r2, r3
 8014ace:	4620      	mov	r0, r4
 8014ad0:	f000 fd12 	bl	80154f8 <__lshift>
 8014ad4:	ee08 0a10 	vmov	s16, r0
 8014ad8:	9b05      	ldr	r3, [sp, #20]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	dd05      	ble.n	8014aea <_dtoa_r+0x82a>
 8014ade:	4631      	mov	r1, r6
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f000 fd08 	bl	80154f8 <__lshift>
 8014ae8:	4606      	mov	r6, r0
 8014aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d06e      	beq.n	8014bce <_dtoa_r+0x90e>
 8014af0:	ee18 0a10 	vmov	r0, s16
 8014af4:	4631      	mov	r1, r6
 8014af6:	f000 fd6f 	bl	80155d8 <__mcmp>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	da67      	bge.n	8014bce <_dtoa_r+0x90e>
 8014afe:	9b00      	ldr	r3, [sp, #0]
 8014b00:	3b01      	subs	r3, #1
 8014b02:	ee18 1a10 	vmov	r1, s16
 8014b06:	9300      	str	r3, [sp, #0]
 8014b08:	220a      	movs	r2, #10
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f000 fb43 	bl	8015198 <__multadd>
 8014b12:	9b08      	ldr	r3, [sp, #32]
 8014b14:	ee08 0a10 	vmov	s16, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f000 81b1 	beq.w	8014e80 <_dtoa_r+0xbc0>
 8014b1e:	2300      	movs	r3, #0
 8014b20:	4639      	mov	r1, r7
 8014b22:	220a      	movs	r2, #10
 8014b24:	4620      	mov	r0, r4
 8014b26:	f000 fb37 	bl	8015198 <__multadd>
 8014b2a:	9b02      	ldr	r3, [sp, #8]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	4607      	mov	r7, r0
 8014b30:	f300 808e 	bgt.w	8014c50 <_dtoa_r+0x990>
 8014b34:	9b06      	ldr	r3, [sp, #24]
 8014b36:	2b02      	cmp	r3, #2
 8014b38:	dc51      	bgt.n	8014bde <_dtoa_r+0x91e>
 8014b3a:	e089      	b.n	8014c50 <_dtoa_r+0x990>
 8014b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014b42:	e74b      	b.n	80149dc <_dtoa_r+0x71c>
 8014b44:	9b03      	ldr	r3, [sp, #12]
 8014b46:	1e5e      	subs	r6, r3, #1
 8014b48:	9b07      	ldr	r3, [sp, #28]
 8014b4a:	42b3      	cmp	r3, r6
 8014b4c:	bfbf      	itttt	lt
 8014b4e:	9b07      	ldrlt	r3, [sp, #28]
 8014b50:	9607      	strlt	r6, [sp, #28]
 8014b52:	1af2      	sublt	r2, r6, r3
 8014b54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014b56:	bfb6      	itet	lt
 8014b58:	189b      	addlt	r3, r3, r2
 8014b5a:	1b9e      	subge	r6, r3, r6
 8014b5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014b5e:	9b03      	ldr	r3, [sp, #12]
 8014b60:	bfb8      	it	lt
 8014b62:	2600      	movlt	r6, #0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	bfb7      	itett	lt
 8014b68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014b6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014b70:	1a9d      	sublt	r5, r3, r2
 8014b72:	2300      	movlt	r3, #0
 8014b74:	e734      	b.n	80149e0 <_dtoa_r+0x720>
 8014b76:	9e07      	ldr	r6, [sp, #28]
 8014b78:	9d04      	ldr	r5, [sp, #16]
 8014b7a:	9f08      	ldr	r7, [sp, #32]
 8014b7c:	e73b      	b.n	80149f6 <_dtoa_r+0x736>
 8014b7e:	9a07      	ldr	r2, [sp, #28]
 8014b80:	e767      	b.n	8014a52 <_dtoa_r+0x792>
 8014b82:	9b06      	ldr	r3, [sp, #24]
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	dc18      	bgt.n	8014bba <_dtoa_r+0x8fa>
 8014b88:	f1ba 0f00 	cmp.w	sl, #0
 8014b8c:	d115      	bne.n	8014bba <_dtoa_r+0x8fa>
 8014b8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b92:	b993      	cbnz	r3, 8014bba <_dtoa_r+0x8fa>
 8014b94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b98:	0d1b      	lsrs	r3, r3, #20
 8014b9a:	051b      	lsls	r3, r3, #20
 8014b9c:	b183      	cbz	r3, 8014bc0 <_dtoa_r+0x900>
 8014b9e:	9b04      	ldr	r3, [sp, #16]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	9304      	str	r3, [sp, #16]
 8014ba4:	9b05      	ldr	r3, [sp, #20]
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	9305      	str	r3, [sp, #20]
 8014baa:	f04f 0801 	mov.w	r8, #1
 8014bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	f47f af6a 	bne.w	8014a8a <_dtoa_r+0x7ca>
 8014bb6:	2001      	movs	r0, #1
 8014bb8:	e76f      	b.n	8014a9a <_dtoa_r+0x7da>
 8014bba:	f04f 0800 	mov.w	r8, #0
 8014bbe:	e7f6      	b.n	8014bae <_dtoa_r+0x8ee>
 8014bc0:	4698      	mov	r8, r3
 8014bc2:	e7f4      	b.n	8014bae <_dtoa_r+0x8ee>
 8014bc4:	f43f af7d 	beq.w	8014ac2 <_dtoa_r+0x802>
 8014bc8:	4618      	mov	r0, r3
 8014bca:	301c      	adds	r0, #28
 8014bcc:	e772      	b.n	8014ab4 <_dtoa_r+0x7f4>
 8014bce:	9b03      	ldr	r3, [sp, #12]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	dc37      	bgt.n	8014c44 <_dtoa_r+0x984>
 8014bd4:	9b06      	ldr	r3, [sp, #24]
 8014bd6:	2b02      	cmp	r3, #2
 8014bd8:	dd34      	ble.n	8014c44 <_dtoa_r+0x984>
 8014bda:	9b03      	ldr	r3, [sp, #12]
 8014bdc:	9302      	str	r3, [sp, #8]
 8014bde:	9b02      	ldr	r3, [sp, #8]
 8014be0:	b96b      	cbnz	r3, 8014bfe <_dtoa_r+0x93e>
 8014be2:	4631      	mov	r1, r6
 8014be4:	2205      	movs	r2, #5
 8014be6:	4620      	mov	r0, r4
 8014be8:	f000 fad6 	bl	8015198 <__multadd>
 8014bec:	4601      	mov	r1, r0
 8014bee:	4606      	mov	r6, r0
 8014bf0:	ee18 0a10 	vmov	r0, s16
 8014bf4:	f000 fcf0 	bl	80155d8 <__mcmp>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	f73f adbb 	bgt.w	8014774 <_dtoa_r+0x4b4>
 8014bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c00:	9d01      	ldr	r5, [sp, #4]
 8014c02:	43db      	mvns	r3, r3
 8014c04:	9300      	str	r3, [sp, #0]
 8014c06:	f04f 0800 	mov.w	r8, #0
 8014c0a:	4631      	mov	r1, r6
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f000 faa1 	bl	8015154 <_Bfree>
 8014c12:	2f00      	cmp	r7, #0
 8014c14:	f43f aea4 	beq.w	8014960 <_dtoa_r+0x6a0>
 8014c18:	f1b8 0f00 	cmp.w	r8, #0
 8014c1c:	d005      	beq.n	8014c2a <_dtoa_r+0x96a>
 8014c1e:	45b8      	cmp	r8, r7
 8014c20:	d003      	beq.n	8014c2a <_dtoa_r+0x96a>
 8014c22:	4641      	mov	r1, r8
 8014c24:	4620      	mov	r0, r4
 8014c26:	f000 fa95 	bl	8015154 <_Bfree>
 8014c2a:	4639      	mov	r1, r7
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f000 fa91 	bl	8015154 <_Bfree>
 8014c32:	e695      	b.n	8014960 <_dtoa_r+0x6a0>
 8014c34:	2600      	movs	r6, #0
 8014c36:	4637      	mov	r7, r6
 8014c38:	e7e1      	b.n	8014bfe <_dtoa_r+0x93e>
 8014c3a:	9700      	str	r7, [sp, #0]
 8014c3c:	4637      	mov	r7, r6
 8014c3e:	e599      	b.n	8014774 <_dtoa_r+0x4b4>
 8014c40:	40240000 	.word	0x40240000
 8014c44:	9b08      	ldr	r3, [sp, #32]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	f000 80ca 	beq.w	8014de0 <_dtoa_r+0xb20>
 8014c4c:	9b03      	ldr	r3, [sp, #12]
 8014c4e:	9302      	str	r3, [sp, #8]
 8014c50:	2d00      	cmp	r5, #0
 8014c52:	dd05      	ble.n	8014c60 <_dtoa_r+0x9a0>
 8014c54:	4639      	mov	r1, r7
 8014c56:	462a      	mov	r2, r5
 8014c58:	4620      	mov	r0, r4
 8014c5a:	f000 fc4d 	bl	80154f8 <__lshift>
 8014c5e:	4607      	mov	r7, r0
 8014c60:	f1b8 0f00 	cmp.w	r8, #0
 8014c64:	d05b      	beq.n	8014d1e <_dtoa_r+0xa5e>
 8014c66:	6879      	ldr	r1, [r7, #4]
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f000 fa33 	bl	80150d4 <_Balloc>
 8014c6e:	4605      	mov	r5, r0
 8014c70:	b928      	cbnz	r0, 8014c7e <_dtoa_r+0x9be>
 8014c72:	4b87      	ldr	r3, [pc, #540]	; (8014e90 <_dtoa_r+0xbd0>)
 8014c74:	4602      	mov	r2, r0
 8014c76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014c7a:	f7ff bb3b 	b.w	80142f4 <_dtoa_r+0x34>
 8014c7e:	693a      	ldr	r2, [r7, #16]
 8014c80:	3202      	adds	r2, #2
 8014c82:	0092      	lsls	r2, r2, #2
 8014c84:	f107 010c 	add.w	r1, r7, #12
 8014c88:	300c      	adds	r0, #12
 8014c8a:	f7fd ffdf 	bl	8012c4c <memcpy>
 8014c8e:	2201      	movs	r2, #1
 8014c90:	4629      	mov	r1, r5
 8014c92:	4620      	mov	r0, r4
 8014c94:	f000 fc30 	bl	80154f8 <__lshift>
 8014c98:	9b01      	ldr	r3, [sp, #4]
 8014c9a:	f103 0901 	add.w	r9, r3, #1
 8014c9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	9305      	str	r3, [sp, #20]
 8014ca6:	f00a 0301 	and.w	r3, sl, #1
 8014caa:	46b8      	mov	r8, r7
 8014cac:	9304      	str	r3, [sp, #16]
 8014cae:	4607      	mov	r7, r0
 8014cb0:	4631      	mov	r1, r6
 8014cb2:	ee18 0a10 	vmov	r0, s16
 8014cb6:	f7ff fa77 	bl	80141a8 <quorem>
 8014cba:	4641      	mov	r1, r8
 8014cbc:	9002      	str	r0, [sp, #8]
 8014cbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014cc2:	ee18 0a10 	vmov	r0, s16
 8014cc6:	f000 fc87 	bl	80155d8 <__mcmp>
 8014cca:	463a      	mov	r2, r7
 8014ccc:	9003      	str	r0, [sp, #12]
 8014cce:	4631      	mov	r1, r6
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 fc9d 	bl	8015610 <__mdiff>
 8014cd6:	68c2      	ldr	r2, [r0, #12]
 8014cd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8014cdc:	4605      	mov	r5, r0
 8014cde:	bb02      	cbnz	r2, 8014d22 <_dtoa_r+0xa62>
 8014ce0:	4601      	mov	r1, r0
 8014ce2:	ee18 0a10 	vmov	r0, s16
 8014ce6:	f000 fc77 	bl	80155d8 <__mcmp>
 8014cea:	4602      	mov	r2, r0
 8014cec:	4629      	mov	r1, r5
 8014cee:	4620      	mov	r0, r4
 8014cf0:	9207      	str	r2, [sp, #28]
 8014cf2:	f000 fa2f 	bl	8015154 <_Bfree>
 8014cf6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014cfa:	ea43 0102 	orr.w	r1, r3, r2
 8014cfe:	9b04      	ldr	r3, [sp, #16]
 8014d00:	430b      	orrs	r3, r1
 8014d02:	464d      	mov	r5, r9
 8014d04:	d10f      	bne.n	8014d26 <_dtoa_r+0xa66>
 8014d06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d0a:	d02a      	beq.n	8014d62 <_dtoa_r+0xaa2>
 8014d0c:	9b03      	ldr	r3, [sp, #12]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dd02      	ble.n	8014d18 <_dtoa_r+0xa58>
 8014d12:	9b02      	ldr	r3, [sp, #8]
 8014d14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014d18:	f88b a000 	strb.w	sl, [fp]
 8014d1c:	e775      	b.n	8014c0a <_dtoa_r+0x94a>
 8014d1e:	4638      	mov	r0, r7
 8014d20:	e7ba      	b.n	8014c98 <_dtoa_r+0x9d8>
 8014d22:	2201      	movs	r2, #1
 8014d24:	e7e2      	b.n	8014cec <_dtoa_r+0xa2c>
 8014d26:	9b03      	ldr	r3, [sp, #12]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	db04      	blt.n	8014d36 <_dtoa_r+0xa76>
 8014d2c:	9906      	ldr	r1, [sp, #24]
 8014d2e:	430b      	orrs	r3, r1
 8014d30:	9904      	ldr	r1, [sp, #16]
 8014d32:	430b      	orrs	r3, r1
 8014d34:	d122      	bne.n	8014d7c <_dtoa_r+0xabc>
 8014d36:	2a00      	cmp	r2, #0
 8014d38:	ddee      	ble.n	8014d18 <_dtoa_r+0xa58>
 8014d3a:	ee18 1a10 	vmov	r1, s16
 8014d3e:	2201      	movs	r2, #1
 8014d40:	4620      	mov	r0, r4
 8014d42:	f000 fbd9 	bl	80154f8 <__lshift>
 8014d46:	4631      	mov	r1, r6
 8014d48:	ee08 0a10 	vmov	s16, r0
 8014d4c:	f000 fc44 	bl	80155d8 <__mcmp>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	dc03      	bgt.n	8014d5c <_dtoa_r+0xa9c>
 8014d54:	d1e0      	bne.n	8014d18 <_dtoa_r+0xa58>
 8014d56:	f01a 0f01 	tst.w	sl, #1
 8014d5a:	d0dd      	beq.n	8014d18 <_dtoa_r+0xa58>
 8014d5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d60:	d1d7      	bne.n	8014d12 <_dtoa_r+0xa52>
 8014d62:	2339      	movs	r3, #57	; 0x39
 8014d64:	f88b 3000 	strb.w	r3, [fp]
 8014d68:	462b      	mov	r3, r5
 8014d6a:	461d      	mov	r5, r3
 8014d6c:	3b01      	subs	r3, #1
 8014d6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014d72:	2a39      	cmp	r2, #57	; 0x39
 8014d74:	d071      	beq.n	8014e5a <_dtoa_r+0xb9a>
 8014d76:	3201      	adds	r2, #1
 8014d78:	701a      	strb	r2, [r3, #0]
 8014d7a:	e746      	b.n	8014c0a <_dtoa_r+0x94a>
 8014d7c:	2a00      	cmp	r2, #0
 8014d7e:	dd07      	ble.n	8014d90 <_dtoa_r+0xad0>
 8014d80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d84:	d0ed      	beq.n	8014d62 <_dtoa_r+0xaa2>
 8014d86:	f10a 0301 	add.w	r3, sl, #1
 8014d8a:	f88b 3000 	strb.w	r3, [fp]
 8014d8e:	e73c      	b.n	8014c0a <_dtoa_r+0x94a>
 8014d90:	9b05      	ldr	r3, [sp, #20]
 8014d92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014d96:	4599      	cmp	r9, r3
 8014d98:	d047      	beq.n	8014e2a <_dtoa_r+0xb6a>
 8014d9a:	ee18 1a10 	vmov	r1, s16
 8014d9e:	2300      	movs	r3, #0
 8014da0:	220a      	movs	r2, #10
 8014da2:	4620      	mov	r0, r4
 8014da4:	f000 f9f8 	bl	8015198 <__multadd>
 8014da8:	45b8      	cmp	r8, r7
 8014daa:	ee08 0a10 	vmov	s16, r0
 8014dae:	f04f 0300 	mov.w	r3, #0
 8014db2:	f04f 020a 	mov.w	r2, #10
 8014db6:	4641      	mov	r1, r8
 8014db8:	4620      	mov	r0, r4
 8014dba:	d106      	bne.n	8014dca <_dtoa_r+0xb0a>
 8014dbc:	f000 f9ec 	bl	8015198 <__multadd>
 8014dc0:	4680      	mov	r8, r0
 8014dc2:	4607      	mov	r7, r0
 8014dc4:	f109 0901 	add.w	r9, r9, #1
 8014dc8:	e772      	b.n	8014cb0 <_dtoa_r+0x9f0>
 8014dca:	f000 f9e5 	bl	8015198 <__multadd>
 8014dce:	4639      	mov	r1, r7
 8014dd0:	4680      	mov	r8, r0
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	220a      	movs	r2, #10
 8014dd6:	4620      	mov	r0, r4
 8014dd8:	f000 f9de 	bl	8015198 <__multadd>
 8014ddc:	4607      	mov	r7, r0
 8014dde:	e7f1      	b.n	8014dc4 <_dtoa_r+0xb04>
 8014de0:	9b03      	ldr	r3, [sp, #12]
 8014de2:	9302      	str	r3, [sp, #8]
 8014de4:	9d01      	ldr	r5, [sp, #4]
 8014de6:	ee18 0a10 	vmov	r0, s16
 8014dea:	4631      	mov	r1, r6
 8014dec:	f7ff f9dc 	bl	80141a8 <quorem>
 8014df0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014df4:	9b01      	ldr	r3, [sp, #4]
 8014df6:	f805 ab01 	strb.w	sl, [r5], #1
 8014dfa:	1aea      	subs	r2, r5, r3
 8014dfc:	9b02      	ldr	r3, [sp, #8]
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	dd09      	ble.n	8014e16 <_dtoa_r+0xb56>
 8014e02:	ee18 1a10 	vmov	r1, s16
 8014e06:	2300      	movs	r3, #0
 8014e08:	220a      	movs	r2, #10
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f000 f9c4 	bl	8015198 <__multadd>
 8014e10:	ee08 0a10 	vmov	s16, r0
 8014e14:	e7e7      	b.n	8014de6 <_dtoa_r+0xb26>
 8014e16:	9b02      	ldr	r3, [sp, #8]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	bfc8      	it	gt
 8014e1c:	461d      	movgt	r5, r3
 8014e1e:	9b01      	ldr	r3, [sp, #4]
 8014e20:	bfd8      	it	le
 8014e22:	2501      	movle	r5, #1
 8014e24:	441d      	add	r5, r3
 8014e26:	f04f 0800 	mov.w	r8, #0
 8014e2a:	ee18 1a10 	vmov	r1, s16
 8014e2e:	2201      	movs	r2, #1
 8014e30:	4620      	mov	r0, r4
 8014e32:	f000 fb61 	bl	80154f8 <__lshift>
 8014e36:	4631      	mov	r1, r6
 8014e38:	ee08 0a10 	vmov	s16, r0
 8014e3c:	f000 fbcc 	bl	80155d8 <__mcmp>
 8014e40:	2800      	cmp	r0, #0
 8014e42:	dc91      	bgt.n	8014d68 <_dtoa_r+0xaa8>
 8014e44:	d102      	bne.n	8014e4c <_dtoa_r+0xb8c>
 8014e46:	f01a 0f01 	tst.w	sl, #1
 8014e4a:	d18d      	bne.n	8014d68 <_dtoa_r+0xaa8>
 8014e4c:	462b      	mov	r3, r5
 8014e4e:	461d      	mov	r5, r3
 8014e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e54:	2a30      	cmp	r2, #48	; 0x30
 8014e56:	d0fa      	beq.n	8014e4e <_dtoa_r+0xb8e>
 8014e58:	e6d7      	b.n	8014c0a <_dtoa_r+0x94a>
 8014e5a:	9a01      	ldr	r2, [sp, #4]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d184      	bne.n	8014d6a <_dtoa_r+0xaaa>
 8014e60:	9b00      	ldr	r3, [sp, #0]
 8014e62:	3301      	adds	r3, #1
 8014e64:	9300      	str	r3, [sp, #0]
 8014e66:	2331      	movs	r3, #49	; 0x31
 8014e68:	7013      	strb	r3, [r2, #0]
 8014e6a:	e6ce      	b.n	8014c0a <_dtoa_r+0x94a>
 8014e6c:	4b09      	ldr	r3, [pc, #36]	; (8014e94 <_dtoa_r+0xbd4>)
 8014e6e:	f7ff ba95 	b.w	801439c <_dtoa_r+0xdc>
 8014e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f47f aa6e 	bne.w	8014356 <_dtoa_r+0x96>
 8014e7a:	4b07      	ldr	r3, [pc, #28]	; (8014e98 <_dtoa_r+0xbd8>)
 8014e7c:	f7ff ba8e 	b.w	801439c <_dtoa_r+0xdc>
 8014e80:	9b02      	ldr	r3, [sp, #8]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	dcae      	bgt.n	8014de4 <_dtoa_r+0xb24>
 8014e86:	9b06      	ldr	r3, [sp, #24]
 8014e88:	2b02      	cmp	r3, #2
 8014e8a:	f73f aea8 	bgt.w	8014bde <_dtoa_r+0x91e>
 8014e8e:	e7a9      	b.n	8014de4 <_dtoa_r+0xb24>
 8014e90:	080187e9 	.word	0x080187e9
 8014e94:	08018ad6 	.word	0x08018ad6
 8014e98:	08018781 	.word	0x08018781

08014e9c <fiprintf>:
 8014e9c:	b40e      	push	{r1, r2, r3}
 8014e9e:	b503      	push	{r0, r1, lr}
 8014ea0:	4601      	mov	r1, r0
 8014ea2:	ab03      	add	r3, sp, #12
 8014ea4:	4805      	ldr	r0, [pc, #20]	; (8014ebc <fiprintf+0x20>)
 8014ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014eaa:	6800      	ldr	r0, [r0, #0]
 8014eac:	9301      	str	r3, [sp, #4]
 8014eae:	f000 fe31 	bl	8015b14 <_vfiprintf_r>
 8014eb2:	b002      	add	sp, #8
 8014eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014eb8:	b003      	add	sp, #12
 8014eba:	4770      	bx	lr
 8014ebc:	20000020 	.word	0x20000020

08014ec0 <_findenv_r>:
 8014ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014f34 <_findenv_r+0x74>
 8014ec8:	4607      	mov	r7, r0
 8014eca:	4689      	mov	r9, r1
 8014ecc:	4616      	mov	r6, r2
 8014ece:	f001 f947 	bl	8016160 <__env_lock>
 8014ed2:	f8da 4000 	ldr.w	r4, [sl]
 8014ed6:	b134      	cbz	r4, 8014ee6 <_findenv_r+0x26>
 8014ed8:	464b      	mov	r3, r9
 8014eda:	4698      	mov	r8, r3
 8014edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ee0:	b13a      	cbz	r2, 8014ef2 <_findenv_r+0x32>
 8014ee2:	2a3d      	cmp	r2, #61	; 0x3d
 8014ee4:	d1f9      	bne.n	8014eda <_findenv_r+0x1a>
 8014ee6:	4638      	mov	r0, r7
 8014ee8:	f001 f940 	bl	801616c <__env_unlock>
 8014eec:	2000      	movs	r0, #0
 8014eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef2:	eba8 0809 	sub.w	r8, r8, r9
 8014ef6:	46a3      	mov	fp, r4
 8014ef8:	f854 0b04 	ldr.w	r0, [r4], #4
 8014efc:	2800      	cmp	r0, #0
 8014efe:	d0f2      	beq.n	8014ee6 <_findenv_r+0x26>
 8014f00:	4642      	mov	r2, r8
 8014f02:	4649      	mov	r1, r9
 8014f04:	f000 ffaf 	bl	8015e66 <strncmp>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d1f4      	bne.n	8014ef6 <_findenv_r+0x36>
 8014f0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014f10:	eb03 0508 	add.w	r5, r3, r8
 8014f14:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014f18:	2b3d      	cmp	r3, #61	; 0x3d
 8014f1a:	d1ec      	bne.n	8014ef6 <_findenv_r+0x36>
 8014f1c:	f8da 3000 	ldr.w	r3, [sl]
 8014f20:	ebab 0303 	sub.w	r3, fp, r3
 8014f24:	109b      	asrs	r3, r3, #2
 8014f26:	4638      	mov	r0, r7
 8014f28:	6033      	str	r3, [r6, #0]
 8014f2a:	f001 f91f 	bl	801616c <__env_unlock>
 8014f2e:	1c68      	adds	r0, r5, #1
 8014f30:	e7dd      	b.n	8014eee <_findenv_r+0x2e>
 8014f32:	bf00      	nop
 8014f34:	20000010 	.word	0x20000010

08014f38 <_getenv_r>:
 8014f38:	b507      	push	{r0, r1, r2, lr}
 8014f3a:	aa01      	add	r2, sp, #4
 8014f3c:	f7ff ffc0 	bl	8014ec0 <_findenv_r>
 8014f40:	b003      	add	sp, #12
 8014f42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014f48 <__gettzinfo>:
 8014f48:	4800      	ldr	r0, [pc, #0]	; (8014f4c <__gettzinfo+0x4>)
 8014f4a:	4770      	bx	lr
 8014f4c:	20000090 	.word	0x20000090

08014f50 <gmtime_r>:
 8014f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f54:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014f58:	460c      	mov	r4, r1
 8014f5a:	4a4f      	ldr	r2, [pc, #316]	; (8015098 <gmtime_r+0x148>)
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	4630      	mov	r0, r6
 8014f60:	4639      	mov	r1, r7
 8014f62:	f7eb fe73 	bl	8000c4c <__aeabi_ldivmod>
 8014f66:	4639      	mov	r1, r7
 8014f68:	4605      	mov	r5, r0
 8014f6a:	4a4b      	ldr	r2, [pc, #300]	; (8015098 <gmtime_r+0x148>)
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	2300      	movs	r3, #0
 8014f70:	f7eb fe6c 	bl	8000c4c <__aeabi_ldivmod>
 8014f74:	2a00      	cmp	r2, #0
 8014f76:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014f7a:	bfb7      	itett	lt
 8014f7c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014f80:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8014f84:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8014f88:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014f8c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8014f90:	fbb2 f1f0 	udiv	r1, r2, r0
 8014f94:	fb00 2211 	mls	r2, r0, r1, r2
 8014f98:	203c      	movs	r0, #60	; 0x3c
 8014f9a:	60a1      	str	r1, [r4, #8]
 8014f9c:	fbb2 f1f0 	udiv	r1, r2, r0
 8014fa0:	fb00 2211 	mls	r2, r0, r1, r2
 8014fa4:	6061      	str	r1, [r4, #4]
 8014fa6:	6022      	str	r2, [r4, #0]
 8014fa8:	2107      	movs	r1, #7
 8014faa:	1cda      	adds	r2, r3, #3
 8014fac:	fb92 f1f1 	sdiv	r1, r2, r1
 8014fb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8014fb4:	1a52      	subs	r2, r2, r1
 8014fb6:	bf48      	it	mi
 8014fb8:	3207      	addmi	r2, #7
 8014fba:	4d38      	ldr	r5, [pc, #224]	; (801509c <gmtime_r+0x14c>)
 8014fbc:	4838      	ldr	r0, [pc, #224]	; (80150a0 <gmtime_r+0x150>)
 8014fbe:	61a2      	str	r2, [r4, #24]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	bfb7      	itett	lt
 8014fc4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8014fc8:	fb93 f5f5 	sdivge	r5, r3, r5
 8014fcc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8014fd0:	fb92 f5f5 	sdivlt	r5, r2, r5
 8014fd4:	fb00 3005 	mla	r0, r0, r5, r3
 8014fd8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014fdc:	fbb0 f2f2 	udiv	r2, r0, r2
 8014fe0:	4402      	add	r2, r0
 8014fe2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8014fe6:	fbb0 f1f3 	udiv	r1, r0, r3
 8014fea:	1a52      	subs	r2, r2, r1
 8014fec:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014ff0:	492c      	ldr	r1, [pc, #176]	; (80150a4 <gmtime_r+0x154>)
 8014ff2:	fbb0 f1f1 	udiv	r1, r0, r1
 8014ff6:	2764      	movs	r7, #100	; 0x64
 8014ff8:	1a52      	subs	r2, r2, r1
 8014ffa:	fbb2 f1fc 	udiv	r1, r2, ip
 8014ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8015002:	fbb1 f6f7 	udiv	r6, r1, r7
 8015006:	1af3      	subs	r3, r6, r3
 8015008:	4403      	add	r3, r0
 801500a:	fb0c 3311 	mls	r3, ip, r1, r3
 801500e:	2299      	movs	r2, #153	; 0x99
 8015010:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8015014:	f10e 0e02 	add.w	lr, lr, #2
 8015018:	f103 0c01 	add.w	ip, r3, #1
 801501c:	fbbe f0f2 	udiv	r0, lr, r2
 8015020:	4342      	muls	r2, r0
 8015022:	3202      	adds	r2, #2
 8015024:	f04f 0805 	mov.w	r8, #5
 8015028:	fbb2 f2f8 	udiv	r2, r2, r8
 801502c:	ebac 0c02 	sub.w	ip, ip, r2
 8015030:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8015034:	4596      	cmp	lr, r2
 8015036:	bf94      	ite	ls
 8015038:	2202      	movls	r2, #2
 801503a:	f06f 0209 	mvnhi.w	r2, #9
 801503e:	4410      	add	r0, r2
 8015040:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015044:	fb02 1505 	mla	r5, r2, r5, r1
 8015048:	2801      	cmp	r0, #1
 801504a:	bf98      	it	ls
 801504c:	3501      	addls	r5, #1
 801504e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8015052:	d30d      	bcc.n	8015070 <gmtime_r+0x120>
 8015054:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8015058:	61e3      	str	r3, [r4, #28]
 801505a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 801505e:	2300      	movs	r3, #0
 8015060:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8015064:	f8c4 c00c 	str.w	ip, [r4, #12]
 8015068:	6223      	str	r3, [r4, #32]
 801506a:	4620      	mov	r0, r4
 801506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015070:	078a      	lsls	r2, r1, #30
 8015072:	d102      	bne.n	801507a <gmtime_r+0x12a>
 8015074:	fb07 1616 	mls	r6, r7, r6, r1
 8015078:	b95e      	cbnz	r6, 8015092 <gmtime_r+0x142>
 801507a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801507e:	fbb1 f6f2 	udiv	r6, r1, r2
 8015082:	fb02 1216 	mls	r2, r2, r6, r1
 8015086:	fab2 f282 	clz	r2, r2
 801508a:	0952      	lsrs	r2, r2, #5
 801508c:	333b      	adds	r3, #59	; 0x3b
 801508e:	4413      	add	r3, r2
 8015090:	e7e2      	b.n	8015058 <gmtime_r+0x108>
 8015092:	2201      	movs	r2, #1
 8015094:	e7fa      	b.n	801508c <gmtime_r+0x13c>
 8015096:	bf00      	nop
 8015098:	00015180 	.word	0x00015180
 801509c:	00023ab1 	.word	0x00023ab1
 80150a0:	fffdc54f 	.word	0xfffdc54f
 80150a4:	00023ab0 	.word	0x00023ab0

080150a8 <_localeconv_r>:
 80150a8:	4800      	ldr	r0, [pc, #0]	; (80150ac <_localeconv_r+0x4>)
 80150aa:	4770      	bx	lr
 80150ac:	200001d8 	.word	0x200001d8

080150b0 <__retarget_lock_init_recursive>:
 80150b0:	4770      	bx	lr

080150b2 <__retarget_lock_acquire>:
 80150b2:	4770      	bx	lr

080150b4 <__retarget_lock_acquire_recursive>:
 80150b4:	4770      	bx	lr

080150b6 <__retarget_lock_release>:
 80150b6:	4770      	bx	lr

080150b8 <__retarget_lock_release_recursive>:
 80150b8:	4770      	bx	lr
	...

080150bc <__malloc_lock>:
 80150bc:	4801      	ldr	r0, [pc, #4]	; (80150c4 <__malloc_lock+0x8>)
 80150be:	f7ff bff9 	b.w	80150b4 <__retarget_lock_acquire_recursive>
 80150c2:	bf00      	nop
 80150c4:	2000a7ad 	.word	0x2000a7ad

080150c8 <__malloc_unlock>:
 80150c8:	4801      	ldr	r0, [pc, #4]	; (80150d0 <__malloc_unlock+0x8>)
 80150ca:	f7ff bff5 	b.w	80150b8 <__retarget_lock_release_recursive>
 80150ce:	bf00      	nop
 80150d0:	2000a7ad 	.word	0x2000a7ad

080150d4 <_Balloc>:
 80150d4:	b570      	push	{r4, r5, r6, lr}
 80150d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80150d8:	4604      	mov	r4, r0
 80150da:	460d      	mov	r5, r1
 80150dc:	b976      	cbnz	r6, 80150fc <_Balloc+0x28>
 80150de:	2010      	movs	r0, #16
 80150e0:	f7fd fda4 	bl	8012c2c <malloc>
 80150e4:	4602      	mov	r2, r0
 80150e6:	6260      	str	r0, [r4, #36]	; 0x24
 80150e8:	b920      	cbnz	r0, 80150f4 <_Balloc+0x20>
 80150ea:	4b18      	ldr	r3, [pc, #96]	; (801514c <_Balloc+0x78>)
 80150ec:	4818      	ldr	r0, [pc, #96]	; (8015150 <_Balloc+0x7c>)
 80150ee:	2166      	movs	r1, #102	; 0x66
 80150f0:	f7ff f828 	bl	8014144 <__assert_func>
 80150f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150f8:	6006      	str	r6, [r0, #0]
 80150fa:	60c6      	str	r6, [r0, #12]
 80150fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80150fe:	68f3      	ldr	r3, [r6, #12]
 8015100:	b183      	cbz	r3, 8015124 <_Balloc+0x50>
 8015102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015104:	68db      	ldr	r3, [r3, #12]
 8015106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801510a:	b9b8      	cbnz	r0, 801513c <_Balloc+0x68>
 801510c:	2101      	movs	r1, #1
 801510e:	fa01 f605 	lsl.w	r6, r1, r5
 8015112:	1d72      	adds	r2, r6, #5
 8015114:	0092      	lsls	r2, r2, #2
 8015116:	4620      	mov	r0, r4
 8015118:	f000 fb60 	bl	80157dc <_calloc_r>
 801511c:	b160      	cbz	r0, 8015138 <_Balloc+0x64>
 801511e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015122:	e00e      	b.n	8015142 <_Balloc+0x6e>
 8015124:	2221      	movs	r2, #33	; 0x21
 8015126:	2104      	movs	r1, #4
 8015128:	4620      	mov	r0, r4
 801512a:	f000 fb57 	bl	80157dc <_calloc_r>
 801512e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015130:	60f0      	str	r0, [r6, #12]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d1e4      	bne.n	8015102 <_Balloc+0x2e>
 8015138:	2000      	movs	r0, #0
 801513a:	bd70      	pop	{r4, r5, r6, pc}
 801513c:	6802      	ldr	r2, [r0, #0]
 801513e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015142:	2300      	movs	r3, #0
 8015144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015148:	e7f7      	b.n	801513a <_Balloc+0x66>
 801514a:	bf00      	nop
 801514c:	08018548 	.word	0x08018548
 8015150:	080187fa 	.word	0x080187fa

08015154 <_Bfree>:
 8015154:	b570      	push	{r4, r5, r6, lr}
 8015156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015158:	4605      	mov	r5, r0
 801515a:	460c      	mov	r4, r1
 801515c:	b976      	cbnz	r6, 801517c <_Bfree+0x28>
 801515e:	2010      	movs	r0, #16
 8015160:	f7fd fd64 	bl	8012c2c <malloc>
 8015164:	4602      	mov	r2, r0
 8015166:	6268      	str	r0, [r5, #36]	; 0x24
 8015168:	b920      	cbnz	r0, 8015174 <_Bfree+0x20>
 801516a:	4b09      	ldr	r3, [pc, #36]	; (8015190 <_Bfree+0x3c>)
 801516c:	4809      	ldr	r0, [pc, #36]	; (8015194 <_Bfree+0x40>)
 801516e:	218a      	movs	r1, #138	; 0x8a
 8015170:	f7fe ffe8 	bl	8014144 <__assert_func>
 8015174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015178:	6006      	str	r6, [r0, #0]
 801517a:	60c6      	str	r6, [r0, #12]
 801517c:	b13c      	cbz	r4, 801518e <_Bfree+0x3a>
 801517e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015180:	6862      	ldr	r2, [r4, #4]
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015188:	6021      	str	r1, [r4, #0]
 801518a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801518e:	bd70      	pop	{r4, r5, r6, pc}
 8015190:	08018548 	.word	0x08018548
 8015194:	080187fa 	.word	0x080187fa

08015198 <__multadd>:
 8015198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801519c:	690d      	ldr	r5, [r1, #16]
 801519e:	4607      	mov	r7, r0
 80151a0:	460c      	mov	r4, r1
 80151a2:	461e      	mov	r6, r3
 80151a4:	f101 0c14 	add.w	ip, r1, #20
 80151a8:	2000      	movs	r0, #0
 80151aa:	f8dc 3000 	ldr.w	r3, [ip]
 80151ae:	b299      	uxth	r1, r3
 80151b0:	fb02 6101 	mla	r1, r2, r1, r6
 80151b4:	0c1e      	lsrs	r6, r3, #16
 80151b6:	0c0b      	lsrs	r3, r1, #16
 80151b8:	fb02 3306 	mla	r3, r2, r6, r3
 80151bc:	b289      	uxth	r1, r1
 80151be:	3001      	adds	r0, #1
 80151c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80151c4:	4285      	cmp	r5, r0
 80151c6:	f84c 1b04 	str.w	r1, [ip], #4
 80151ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80151ce:	dcec      	bgt.n	80151aa <__multadd+0x12>
 80151d0:	b30e      	cbz	r6, 8015216 <__multadd+0x7e>
 80151d2:	68a3      	ldr	r3, [r4, #8]
 80151d4:	42ab      	cmp	r3, r5
 80151d6:	dc19      	bgt.n	801520c <__multadd+0x74>
 80151d8:	6861      	ldr	r1, [r4, #4]
 80151da:	4638      	mov	r0, r7
 80151dc:	3101      	adds	r1, #1
 80151de:	f7ff ff79 	bl	80150d4 <_Balloc>
 80151e2:	4680      	mov	r8, r0
 80151e4:	b928      	cbnz	r0, 80151f2 <__multadd+0x5a>
 80151e6:	4602      	mov	r2, r0
 80151e8:	4b0c      	ldr	r3, [pc, #48]	; (801521c <__multadd+0x84>)
 80151ea:	480d      	ldr	r0, [pc, #52]	; (8015220 <__multadd+0x88>)
 80151ec:	21b5      	movs	r1, #181	; 0xb5
 80151ee:	f7fe ffa9 	bl	8014144 <__assert_func>
 80151f2:	6922      	ldr	r2, [r4, #16]
 80151f4:	3202      	adds	r2, #2
 80151f6:	f104 010c 	add.w	r1, r4, #12
 80151fa:	0092      	lsls	r2, r2, #2
 80151fc:	300c      	adds	r0, #12
 80151fe:	f7fd fd25 	bl	8012c4c <memcpy>
 8015202:	4621      	mov	r1, r4
 8015204:	4638      	mov	r0, r7
 8015206:	f7ff ffa5 	bl	8015154 <_Bfree>
 801520a:	4644      	mov	r4, r8
 801520c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015210:	3501      	adds	r5, #1
 8015212:	615e      	str	r6, [r3, #20]
 8015214:	6125      	str	r5, [r4, #16]
 8015216:	4620      	mov	r0, r4
 8015218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801521c:	080187e9 	.word	0x080187e9
 8015220:	080187fa 	.word	0x080187fa

08015224 <__hi0bits>:
 8015224:	0c03      	lsrs	r3, r0, #16
 8015226:	041b      	lsls	r3, r3, #16
 8015228:	b9d3      	cbnz	r3, 8015260 <__hi0bits+0x3c>
 801522a:	0400      	lsls	r0, r0, #16
 801522c:	2310      	movs	r3, #16
 801522e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015232:	bf04      	itt	eq
 8015234:	0200      	lsleq	r0, r0, #8
 8015236:	3308      	addeq	r3, #8
 8015238:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801523c:	bf04      	itt	eq
 801523e:	0100      	lsleq	r0, r0, #4
 8015240:	3304      	addeq	r3, #4
 8015242:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015246:	bf04      	itt	eq
 8015248:	0080      	lsleq	r0, r0, #2
 801524a:	3302      	addeq	r3, #2
 801524c:	2800      	cmp	r0, #0
 801524e:	db05      	blt.n	801525c <__hi0bits+0x38>
 8015250:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015254:	f103 0301 	add.w	r3, r3, #1
 8015258:	bf08      	it	eq
 801525a:	2320      	moveq	r3, #32
 801525c:	4618      	mov	r0, r3
 801525e:	4770      	bx	lr
 8015260:	2300      	movs	r3, #0
 8015262:	e7e4      	b.n	801522e <__hi0bits+0xa>

08015264 <__lo0bits>:
 8015264:	6803      	ldr	r3, [r0, #0]
 8015266:	f013 0207 	ands.w	r2, r3, #7
 801526a:	4601      	mov	r1, r0
 801526c:	d00b      	beq.n	8015286 <__lo0bits+0x22>
 801526e:	07da      	lsls	r2, r3, #31
 8015270:	d423      	bmi.n	80152ba <__lo0bits+0x56>
 8015272:	0798      	lsls	r0, r3, #30
 8015274:	bf49      	itett	mi
 8015276:	085b      	lsrmi	r3, r3, #1
 8015278:	089b      	lsrpl	r3, r3, #2
 801527a:	2001      	movmi	r0, #1
 801527c:	600b      	strmi	r3, [r1, #0]
 801527e:	bf5c      	itt	pl
 8015280:	600b      	strpl	r3, [r1, #0]
 8015282:	2002      	movpl	r0, #2
 8015284:	4770      	bx	lr
 8015286:	b298      	uxth	r0, r3
 8015288:	b9a8      	cbnz	r0, 80152b6 <__lo0bits+0x52>
 801528a:	0c1b      	lsrs	r3, r3, #16
 801528c:	2010      	movs	r0, #16
 801528e:	b2da      	uxtb	r2, r3
 8015290:	b90a      	cbnz	r2, 8015296 <__lo0bits+0x32>
 8015292:	3008      	adds	r0, #8
 8015294:	0a1b      	lsrs	r3, r3, #8
 8015296:	071a      	lsls	r2, r3, #28
 8015298:	bf04      	itt	eq
 801529a:	091b      	lsreq	r3, r3, #4
 801529c:	3004      	addeq	r0, #4
 801529e:	079a      	lsls	r2, r3, #30
 80152a0:	bf04      	itt	eq
 80152a2:	089b      	lsreq	r3, r3, #2
 80152a4:	3002      	addeq	r0, #2
 80152a6:	07da      	lsls	r2, r3, #31
 80152a8:	d403      	bmi.n	80152b2 <__lo0bits+0x4e>
 80152aa:	085b      	lsrs	r3, r3, #1
 80152ac:	f100 0001 	add.w	r0, r0, #1
 80152b0:	d005      	beq.n	80152be <__lo0bits+0x5a>
 80152b2:	600b      	str	r3, [r1, #0]
 80152b4:	4770      	bx	lr
 80152b6:	4610      	mov	r0, r2
 80152b8:	e7e9      	b.n	801528e <__lo0bits+0x2a>
 80152ba:	2000      	movs	r0, #0
 80152bc:	4770      	bx	lr
 80152be:	2020      	movs	r0, #32
 80152c0:	4770      	bx	lr
	...

080152c4 <__i2b>:
 80152c4:	b510      	push	{r4, lr}
 80152c6:	460c      	mov	r4, r1
 80152c8:	2101      	movs	r1, #1
 80152ca:	f7ff ff03 	bl	80150d4 <_Balloc>
 80152ce:	4602      	mov	r2, r0
 80152d0:	b928      	cbnz	r0, 80152de <__i2b+0x1a>
 80152d2:	4b05      	ldr	r3, [pc, #20]	; (80152e8 <__i2b+0x24>)
 80152d4:	4805      	ldr	r0, [pc, #20]	; (80152ec <__i2b+0x28>)
 80152d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80152da:	f7fe ff33 	bl	8014144 <__assert_func>
 80152de:	2301      	movs	r3, #1
 80152e0:	6144      	str	r4, [r0, #20]
 80152e2:	6103      	str	r3, [r0, #16]
 80152e4:	bd10      	pop	{r4, pc}
 80152e6:	bf00      	nop
 80152e8:	080187e9 	.word	0x080187e9
 80152ec:	080187fa 	.word	0x080187fa

080152f0 <__multiply>:
 80152f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152f4:	4691      	mov	r9, r2
 80152f6:	690a      	ldr	r2, [r1, #16]
 80152f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	bfb8      	it	lt
 8015300:	460b      	movlt	r3, r1
 8015302:	460c      	mov	r4, r1
 8015304:	bfbc      	itt	lt
 8015306:	464c      	movlt	r4, r9
 8015308:	4699      	movlt	r9, r3
 801530a:	6927      	ldr	r7, [r4, #16]
 801530c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015310:	68a3      	ldr	r3, [r4, #8]
 8015312:	6861      	ldr	r1, [r4, #4]
 8015314:	eb07 060a 	add.w	r6, r7, sl
 8015318:	42b3      	cmp	r3, r6
 801531a:	b085      	sub	sp, #20
 801531c:	bfb8      	it	lt
 801531e:	3101      	addlt	r1, #1
 8015320:	f7ff fed8 	bl	80150d4 <_Balloc>
 8015324:	b930      	cbnz	r0, 8015334 <__multiply+0x44>
 8015326:	4602      	mov	r2, r0
 8015328:	4b44      	ldr	r3, [pc, #272]	; (801543c <__multiply+0x14c>)
 801532a:	4845      	ldr	r0, [pc, #276]	; (8015440 <__multiply+0x150>)
 801532c:	f240 115d 	movw	r1, #349	; 0x15d
 8015330:	f7fe ff08 	bl	8014144 <__assert_func>
 8015334:	f100 0514 	add.w	r5, r0, #20
 8015338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801533c:	462b      	mov	r3, r5
 801533e:	2200      	movs	r2, #0
 8015340:	4543      	cmp	r3, r8
 8015342:	d321      	bcc.n	8015388 <__multiply+0x98>
 8015344:	f104 0314 	add.w	r3, r4, #20
 8015348:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801534c:	f109 0314 	add.w	r3, r9, #20
 8015350:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015354:	9202      	str	r2, [sp, #8]
 8015356:	1b3a      	subs	r2, r7, r4
 8015358:	3a15      	subs	r2, #21
 801535a:	f022 0203 	bic.w	r2, r2, #3
 801535e:	3204      	adds	r2, #4
 8015360:	f104 0115 	add.w	r1, r4, #21
 8015364:	428f      	cmp	r7, r1
 8015366:	bf38      	it	cc
 8015368:	2204      	movcc	r2, #4
 801536a:	9201      	str	r2, [sp, #4]
 801536c:	9a02      	ldr	r2, [sp, #8]
 801536e:	9303      	str	r3, [sp, #12]
 8015370:	429a      	cmp	r2, r3
 8015372:	d80c      	bhi.n	801538e <__multiply+0x9e>
 8015374:	2e00      	cmp	r6, #0
 8015376:	dd03      	ble.n	8015380 <__multiply+0x90>
 8015378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801537c:	2b00      	cmp	r3, #0
 801537e:	d05a      	beq.n	8015436 <__multiply+0x146>
 8015380:	6106      	str	r6, [r0, #16]
 8015382:	b005      	add	sp, #20
 8015384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015388:	f843 2b04 	str.w	r2, [r3], #4
 801538c:	e7d8      	b.n	8015340 <__multiply+0x50>
 801538e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015392:	f1ba 0f00 	cmp.w	sl, #0
 8015396:	d024      	beq.n	80153e2 <__multiply+0xf2>
 8015398:	f104 0e14 	add.w	lr, r4, #20
 801539c:	46a9      	mov	r9, r5
 801539e:	f04f 0c00 	mov.w	ip, #0
 80153a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80153a6:	f8d9 1000 	ldr.w	r1, [r9]
 80153aa:	fa1f fb82 	uxth.w	fp, r2
 80153ae:	b289      	uxth	r1, r1
 80153b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80153b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80153b8:	f8d9 2000 	ldr.w	r2, [r9]
 80153bc:	4461      	add	r1, ip
 80153be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80153c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80153c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80153ca:	b289      	uxth	r1, r1
 80153cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80153d0:	4577      	cmp	r7, lr
 80153d2:	f849 1b04 	str.w	r1, [r9], #4
 80153d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80153da:	d8e2      	bhi.n	80153a2 <__multiply+0xb2>
 80153dc:	9a01      	ldr	r2, [sp, #4]
 80153de:	f845 c002 	str.w	ip, [r5, r2]
 80153e2:	9a03      	ldr	r2, [sp, #12]
 80153e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80153e8:	3304      	adds	r3, #4
 80153ea:	f1b9 0f00 	cmp.w	r9, #0
 80153ee:	d020      	beq.n	8015432 <__multiply+0x142>
 80153f0:	6829      	ldr	r1, [r5, #0]
 80153f2:	f104 0c14 	add.w	ip, r4, #20
 80153f6:	46ae      	mov	lr, r5
 80153f8:	f04f 0a00 	mov.w	sl, #0
 80153fc:	f8bc b000 	ldrh.w	fp, [ip]
 8015400:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015404:	fb09 220b 	mla	r2, r9, fp, r2
 8015408:	4492      	add	sl, r2
 801540a:	b289      	uxth	r1, r1
 801540c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015410:	f84e 1b04 	str.w	r1, [lr], #4
 8015414:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015418:	f8be 1000 	ldrh.w	r1, [lr]
 801541c:	0c12      	lsrs	r2, r2, #16
 801541e:	fb09 1102 	mla	r1, r9, r2, r1
 8015422:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015426:	4567      	cmp	r7, ip
 8015428:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801542c:	d8e6      	bhi.n	80153fc <__multiply+0x10c>
 801542e:	9a01      	ldr	r2, [sp, #4]
 8015430:	50a9      	str	r1, [r5, r2]
 8015432:	3504      	adds	r5, #4
 8015434:	e79a      	b.n	801536c <__multiply+0x7c>
 8015436:	3e01      	subs	r6, #1
 8015438:	e79c      	b.n	8015374 <__multiply+0x84>
 801543a:	bf00      	nop
 801543c:	080187e9 	.word	0x080187e9
 8015440:	080187fa 	.word	0x080187fa

08015444 <__pow5mult>:
 8015444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015448:	4615      	mov	r5, r2
 801544a:	f012 0203 	ands.w	r2, r2, #3
 801544e:	4606      	mov	r6, r0
 8015450:	460f      	mov	r7, r1
 8015452:	d007      	beq.n	8015464 <__pow5mult+0x20>
 8015454:	4c25      	ldr	r4, [pc, #148]	; (80154ec <__pow5mult+0xa8>)
 8015456:	3a01      	subs	r2, #1
 8015458:	2300      	movs	r3, #0
 801545a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801545e:	f7ff fe9b 	bl	8015198 <__multadd>
 8015462:	4607      	mov	r7, r0
 8015464:	10ad      	asrs	r5, r5, #2
 8015466:	d03d      	beq.n	80154e4 <__pow5mult+0xa0>
 8015468:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801546a:	b97c      	cbnz	r4, 801548c <__pow5mult+0x48>
 801546c:	2010      	movs	r0, #16
 801546e:	f7fd fbdd 	bl	8012c2c <malloc>
 8015472:	4602      	mov	r2, r0
 8015474:	6270      	str	r0, [r6, #36]	; 0x24
 8015476:	b928      	cbnz	r0, 8015484 <__pow5mult+0x40>
 8015478:	4b1d      	ldr	r3, [pc, #116]	; (80154f0 <__pow5mult+0xac>)
 801547a:	481e      	ldr	r0, [pc, #120]	; (80154f4 <__pow5mult+0xb0>)
 801547c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015480:	f7fe fe60 	bl	8014144 <__assert_func>
 8015484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015488:	6004      	str	r4, [r0, #0]
 801548a:	60c4      	str	r4, [r0, #12]
 801548c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015494:	b94c      	cbnz	r4, 80154aa <__pow5mult+0x66>
 8015496:	f240 2171 	movw	r1, #625	; 0x271
 801549a:	4630      	mov	r0, r6
 801549c:	f7ff ff12 	bl	80152c4 <__i2b>
 80154a0:	2300      	movs	r3, #0
 80154a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80154a6:	4604      	mov	r4, r0
 80154a8:	6003      	str	r3, [r0, #0]
 80154aa:	f04f 0900 	mov.w	r9, #0
 80154ae:	07eb      	lsls	r3, r5, #31
 80154b0:	d50a      	bpl.n	80154c8 <__pow5mult+0x84>
 80154b2:	4639      	mov	r1, r7
 80154b4:	4622      	mov	r2, r4
 80154b6:	4630      	mov	r0, r6
 80154b8:	f7ff ff1a 	bl	80152f0 <__multiply>
 80154bc:	4639      	mov	r1, r7
 80154be:	4680      	mov	r8, r0
 80154c0:	4630      	mov	r0, r6
 80154c2:	f7ff fe47 	bl	8015154 <_Bfree>
 80154c6:	4647      	mov	r7, r8
 80154c8:	106d      	asrs	r5, r5, #1
 80154ca:	d00b      	beq.n	80154e4 <__pow5mult+0xa0>
 80154cc:	6820      	ldr	r0, [r4, #0]
 80154ce:	b938      	cbnz	r0, 80154e0 <__pow5mult+0x9c>
 80154d0:	4622      	mov	r2, r4
 80154d2:	4621      	mov	r1, r4
 80154d4:	4630      	mov	r0, r6
 80154d6:	f7ff ff0b 	bl	80152f0 <__multiply>
 80154da:	6020      	str	r0, [r4, #0]
 80154dc:	f8c0 9000 	str.w	r9, [r0]
 80154e0:	4604      	mov	r4, r0
 80154e2:	e7e4      	b.n	80154ae <__pow5mult+0x6a>
 80154e4:	4638      	mov	r0, r7
 80154e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154ea:	bf00      	nop
 80154ec:	08018948 	.word	0x08018948
 80154f0:	08018548 	.word	0x08018548
 80154f4:	080187fa 	.word	0x080187fa

080154f8 <__lshift>:
 80154f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154fc:	460c      	mov	r4, r1
 80154fe:	6849      	ldr	r1, [r1, #4]
 8015500:	6923      	ldr	r3, [r4, #16]
 8015502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015506:	68a3      	ldr	r3, [r4, #8]
 8015508:	4607      	mov	r7, r0
 801550a:	4691      	mov	r9, r2
 801550c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015510:	f108 0601 	add.w	r6, r8, #1
 8015514:	42b3      	cmp	r3, r6
 8015516:	db0b      	blt.n	8015530 <__lshift+0x38>
 8015518:	4638      	mov	r0, r7
 801551a:	f7ff fddb 	bl	80150d4 <_Balloc>
 801551e:	4605      	mov	r5, r0
 8015520:	b948      	cbnz	r0, 8015536 <__lshift+0x3e>
 8015522:	4602      	mov	r2, r0
 8015524:	4b2a      	ldr	r3, [pc, #168]	; (80155d0 <__lshift+0xd8>)
 8015526:	482b      	ldr	r0, [pc, #172]	; (80155d4 <__lshift+0xdc>)
 8015528:	f240 11d9 	movw	r1, #473	; 0x1d9
 801552c:	f7fe fe0a 	bl	8014144 <__assert_func>
 8015530:	3101      	adds	r1, #1
 8015532:	005b      	lsls	r3, r3, #1
 8015534:	e7ee      	b.n	8015514 <__lshift+0x1c>
 8015536:	2300      	movs	r3, #0
 8015538:	f100 0114 	add.w	r1, r0, #20
 801553c:	f100 0210 	add.w	r2, r0, #16
 8015540:	4618      	mov	r0, r3
 8015542:	4553      	cmp	r3, sl
 8015544:	db37      	blt.n	80155b6 <__lshift+0xbe>
 8015546:	6920      	ldr	r0, [r4, #16]
 8015548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801554c:	f104 0314 	add.w	r3, r4, #20
 8015550:	f019 091f 	ands.w	r9, r9, #31
 8015554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015558:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801555c:	d02f      	beq.n	80155be <__lshift+0xc6>
 801555e:	f1c9 0e20 	rsb	lr, r9, #32
 8015562:	468a      	mov	sl, r1
 8015564:	f04f 0c00 	mov.w	ip, #0
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	fa02 f209 	lsl.w	r2, r2, r9
 801556e:	ea42 020c 	orr.w	r2, r2, ip
 8015572:	f84a 2b04 	str.w	r2, [sl], #4
 8015576:	f853 2b04 	ldr.w	r2, [r3], #4
 801557a:	4298      	cmp	r0, r3
 801557c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015580:	d8f2      	bhi.n	8015568 <__lshift+0x70>
 8015582:	1b03      	subs	r3, r0, r4
 8015584:	3b15      	subs	r3, #21
 8015586:	f023 0303 	bic.w	r3, r3, #3
 801558a:	3304      	adds	r3, #4
 801558c:	f104 0215 	add.w	r2, r4, #21
 8015590:	4290      	cmp	r0, r2
 8015592:	bf38      	it	cc
 8015594:	2304      	movcc	r3, #4
 8015596:	f841 c003 	str.w	ip, [r1, r3]
 801559a:	f1bc 0f00 	cmp.w	ip, #0
 801559e:	d001      	beq.n	80155a4 <__lshift+0xac>
 80155a0:	f108 0602 	add.w	r6, r8, #2
 80155a4:	3e01      	subs	r6, #1
 80155a6:	4638      	mov	r0, r7
 80155a8:	612e      	str	r6, [r5, #16]
 80155aa:	4621      	mov	r1, r4
 80155ac:	f7ff fdd2 	bl	8015154 <_Bfree>
 80155b0:	4628      	mov	r0, r5
 80155b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80155ba:	3301      	adds	r3, #1
 80155bc:	e7c1      	b.n	8015542 <__lshift+0x4a>
 80155be:	3904      	subs	r1, #4
 80155c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80155c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80155c8:	4298      	cmp	r0, r3
 80155ca:	d8f9      	bhi.n	80155c0 <__lshift+0xc8>
 80155cc:	e7ea      	b.n	80155a4 <__lshift+0xac>
 80155ce:	bf00      	nop
 80155d0:	080187e9 	.word	0x080187e9
 80155d4:	080187fa 	.word	0x080187fa

080155d8 <__mcmp>:
 80155d8:	b530      	push	{r4, r5, lr}
 80155da:	6902      	ldr	r2, [r0, #16]
 80155dc:	690c      	ldr	r4, [r1, #16]
 80155de:	1b12      	subs	r2, r2, r4
 80155e0:	d10e      	bne.n	8015600 <__mcmp+0x28>
 80155e2:	f100 0314 	add.w	r3, r0, #20
 80155e6:	3114      	adds	r1, #20
 80155e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80155ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80155f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80155f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80155f8:	42a5      	cmp	r5, r4
 80155fa:	d003      	beq.n	8015604 <__mcmp+0x2c>
 80155fc:	d305      	bcc.n	801560a <__mcmp+0x32>
 80155fe:	2201      	movs	r2, #1
 8015600:	4610      	mov	r0, r2
 8015602:	bd30      	pop	{r4, r5, pc}
 8015604:	4283      	cmp	r3, r0
 8015606:	d3f3      	bcc.n	80155f0 <__mcmp+0x18>
 8015608:	e7fa      	b.n	8015600 <__mcmp+0x28>
 801560a:	f04f 32ff 	mov.w	r2, #4294967295
 801560e:	e7f7      	b.n	8015600 <__mcmp+0x28>

08015610 <__mdiff>:
 8015610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015614:	460c      	mov	r4, r1
 8015616:	4606      	mov	r6, r0
 8015618:	4611      	mov	r1, r2
 801561a:	4620      	mov	r0, r4
 801561c:	4690      	mov	r8, r2
 801561e:	f7ff ffdb 	bl	80155d8 <__mcmp>
 8015622:	1e05      	subs	r5, r0, #0
 8015624:	d110      	bne.n	8015648 <__mdiff+0x38>
 8015626:	4629      	mov	r1, r5
 8015628:	4630      	mov	r0, r6
 801562a:	f7ff fd53 	bl	80150d4 <_Balloc>
 801562e:	b930      	cbnz	r0, 801563e <__mdiff+0x2e>
 8015630:	4b3a      	ldr	r3, [pc, #232]	; (801571c <__mdiff+0x10c>)
 8015632:	4602      	mov	r2, r0
 8015634:	f240 2132 	movw	r1, #562	; 0x232
 8015638:	4839      	ldr	r0, [pc, #228]	; (8015720 <__mdiff+0x110>)
 801563a:	f7fe fd83 	bl	8014144 <__assert_func>
 801563e:	2301      	movs	r3, #1
 8015640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015648:	bfa4      	itt	ge
 801564a:	4643      	movge	r3, r8
 801564c:	46a0      	movge	r8, r4
 801564e:	4630      	mov	r0, r6
 8015650:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015654:	bfa6      	itte	ge
 8015656:	461c      	movge	r4, r3
 8015658:	2500      	movge	r5, #0
 801565a:	2501      	movlt	r5, #1
 801565c:	f7ff fd3a 	bl	80150d4 <_Balloc>
 8015660:	b920      	cbnz	r0, 801566c <__mdiff+0x5c>
 8015662:	4b2e      	ldr	r3, [pc, #184]	; (801571c <__mdiff+0x10c>)
 8015664:	4602      	mov	r2, r0
 8015666:	f44f 7110 	mov.w	r1, #576	; 0x240
 801566a:	e7e5      	b.n	8015638 <__mdiff+0x28>
 801566c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015670:	6926      	ldr	r6, [r4, #16]
 8015672:	60c5      	str	r5, [r0, #12]
 8015674:	f104 0914 	add.w	r9, r4, #20
 8015678:	f108 0514 	add.w	r5, r8, #20
 801567c:	f100 0e14 	add.w	lr, r0, #20
 8015680:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015684:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015688:	f108 0210 	add.w	r2, r8, #16
 801568c:	46f2      	mov	sl, lr
 801568e:	2100      	movs	r1, #0
 8015690:	f859 3b04 	ldr.w	r3, [r9], #4
 8015694:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015698:	fa1f f883 	uxth.w	r8, r3
 801569c:	fa11 f18b 	uxtah	r1, r1, fp
 80156a0:	0c1b      	lsrs	r3, r3, #16
 80156a2:	eba1 0808 	sub.w	r8, r1, r8
 80156a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80156aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80156ae:	fa1f f888 	uxth.w	r8, r8
 80156b2:	1419      	asrs	r1, r3, #16
 80156b4:	454e      	cmp	r6, r9
 80156b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80156ba:	f84a 3b04 	str.w	r3, [sl], #4
 80156be:	d8e7      	bhi.n	8015690 <__mdiff+0x80>
 80156c0:	1b33      	subs	r3, r6, r4
 80156c2:	3b15      	subs	r3, #21
 80156c4:	f023 0303 	bic.w	r3, r3, #3
 80156c8:	3304      	adds	r3, #4
 80156ca:	3415      	adds	r4, #21
 80156cc:	42a6      	cmp	r6, r4
 80156ce:	bf38      	it	cc
 80156d0:	2304      	movcc	r3, #4
 80156d2:	441d      	add	r5, r3
 80156d4:	4473      	add	r3, lr
 80156d6:	469e      	mov	lr, r3
 80156d8:	462e      	mov	r6, r5
 80156da:	4566      	cmp	r6, ip
 80156dc:	d30e      	bcc.n	80156fc <__mdiff+0xec>
 80156de:	f10c 0203 	add.w	r2, ip, #3
 80156e2:	1b52      	subs	r2, r2, r5
 80156e4:	f022 0203 	bic.w	r2, r2, #3
 80156e8:	3d03      	subs	r5, #3
 80156ea:	45ac      	cmp	ip, r5
 80156ec:	bf38      	it	cc
 80156ee:	2200      	movcc	r2, #0
 80156f0:	441a      	add	r2, r3
 80156f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80156f6:	b17b      	cbz	r3, 8015718 <__mdiff+0x108>
 80156f8:	6107      	str	r7, [r0, #16]
 80156fa:	e7a3      	b.n	8015644 <__mdiff+0x34>
 80156fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8015700:	fa11 f288 	uxtah	r2, r1, r8
 8015704:	1414      	asrs	r4, r2, #16
 8015706:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801570a:	b292      	uxth	r2, r2
 801570c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015710:	f84e 2b04 	str.w	r2, [lr], #4
 8015714:	1421      	asrs	r1, r4, #16
 8015716:	e7e0      	b.n	80156da <__mdiff+0xca>
 8015718:	3f01      	subs	r7, #1
 801571a:	e7ea      	b.n	80156f2 <__mdiff+0xe2>
 801571c:	080187e9 	.word	0x080187e9
 8015720:	080187fa 	.word	0x080187fa

08015724 <__d2b>:
 8015724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015728:	4689      	mov	r9, r1
 801572a:	2101      	movs	r1, #1
 801572c:	ec57 6b10 	vmov	r6, r7, d0
 8015730:	4690      	mov	r8, r2
 8015732:	f7ff fccf 	bl	80150d4 <_Balloc>
 8015736:	4604      	mov	r4, r0
 8015738:	b930      	cbnz	r0, 8015748 <__d2b+0x24>
 801573a:	4602      	mov	r2, r0
 801573c:	4b25      	ldr	r3, [pc, #148]	; (80157d4 <__d2b+0xb0>)
 801573e:	4826      	ldr	r0, [pc, #152]	; (80157d8 <__d2b+0xb4>)
 8015740:	f240 310a 	movw	r1, #778	; 0x30a
 8015744:	f7fe fcfe 	bl	8014144 <__assert_func>
 8015748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801574c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015750:	bb35      	cbnz	r5, 80157a0 <__d2b+0x7c>
 8015752:	2e00      	cmp	r6, #0
 8015754:	9301      	str	r3, [sp, #4]
 8015756:	d028      	beq.n	80157aa <__d2b+0x86>
 8015758:	4668      	mov	r0, sp
 801575a:	9600      	str	r6, [sp, #0]
 801575c:	f7ff fd82 	bl	8015264 <__lo0bits>
 8015760:	9900      	ldr	r1, [sp, #0]
 8015762:	b300      	cbz	r0, 80157a6 <__d2b+0x82>
 8015764:	9a01      	ldr	r2, [sp, #4]
 8015766:	f1c0 0320 	rsb	r3, r0, #32
 801576a:	fa02 f303 	lsl.w	r3, r2, r3
 801576e:	430b      	orrs	r3, r1
 8015770:	40c2      	lsrs	r2, r0
 8015772:	6163      	str	r3, [r4, #20]
 8015774:	9201      	str	r2, [sp, #4]
 8015776:	9b01      	ldr	r3, [sp, #4]
 8015778:	61a3      	str	r3, [r4, #24]
 801577a:	2b00      	cmp	r3, #0
 801577c:	bf14      	ite	ne
 801577e:	2202      	movne	r2, #2
 8015780:	2201      	moveq	r2, #1
 8015782:	6122      	str	r2, [r4, #16]
 8015784:	b1d5      	cbz	r5, 80157bc <__d2b+0x98>
 8015786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801578a:	4405      	add	r5, r0
 801578c:	f8c9 5000 	str.w	r5, [r9]
 8015790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015794:	f8c8 0000 	str.w	r0, [r8]
 8015798:	4620      	mov	r0, r4
 801579a:	b003      	add	sp, #12
 801579c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80157a4:	e7d5      	b.n	8015752 <__d2b+0x2e>
 80157a6:	6161      	str	r1, [r4, #20]
 80157a8:	e7e5      	b.n	8015776 <__d2b+0x52>
 80157aa:	a801      	add	r0, sp, #4
 80157ac:	f7ff fd5a 	bl	8015264 <__lo0bits>
 80157b0:	9b01      	ldr	r3, [sp, #4]
 80157b2:	6163      	str	r3, [r4, #20]
 80157b4:	2201      	movs	r2, #1
 80157b6:	6122      	str	r2, [r4, #16]
 80157b8:	3020      	adds	r0, #32
 80157ba:	e7e3      	b.n	8015784 <__d2b+0x60>
 80157bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80157c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80157c4:	f8c9 0000 	str.w	r0, [r9]
 80157c8:	6918      	ldr	r0, [r3, #16]
 80157ca:	f7ff fd2b 	bl	8015224 <__hi0bits>
 80157ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80157d2:	e7df      	b.n	8015794 <__d2b+0x70>
 80157d4:	080187e9 	.word	0x080187e9
 80157d8:	080187fa 	.word	0x080187fa

080157dc <_calloc_r>:
 80157dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157de:	fba1 2402 	umull	r2, r4, r1, r2
 80157e2:	b94c      	cbnz	r4, 80157f8 <_calloc_r+0x1c>
 80157e4:	4611      	mov	r1, r2
 80157e6:	9201      	str	r2, [sp, #4]
 80157e8:	f7fd fd24 	bl	8013234 <_malloc_r>
 80157ec:	9a01      	ldr	r2, [sp, #4]
 80157ee:	4605      	mov	r5, r0
 80157f0:	b930      	cbnz	r0, 8015800 <_calloc_r+0x24>
 80157f2:	4628      	mov	r0, r5
 80157f4:	b003      	add	sp, #12
 80157f6:	bd30      	pop	{r4, r5, pc}
 80157f8:	220c      	movs	r2, #12
 80157fa:	6002      	str	r2, [r0, #0]
 80157fc:	2500      	movs	r5, #0
 80157fe:	e7f8      	b.n	80157f2 <_calloc_r+0x16>
 8015800:	4621      	mov	r1, r4
 8015802:	f7fd fa31 	bl	8012c68 <memset>
 8015806:	e7f4      	b.n	80157f2 <_calloc_r+0x16>

08015808 <__ssputs_r>:
 8015808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801580c:	688e      	ldr	r6, [r1, #8]
 801580e:	429e      	cmp	r6, r3
 8015810:	4682      	mov	sl, r0
 8015812:	460c      	mov	r4, r1
 8015814:	4690      	mov	r8, r2
 8015816:	461f      	mov	r7, r3
 8015818:	d838      	bhi.n	801588c <__ssputs_r+0x84>
 801581a:	898a      	ldrh	r2, [r1, #12]
 801581c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015820:	d032      	beq.n	8015888 <__ssputs_r+0x80>
 8015822:	6825      	ldr	r5, [r4, #0]
 8015824:	6909      	ldr	r1, [r1, #16]
 8015826:	eba5 0901 	sub.w	r9, r5, r1
 801582a:	6965      	ldr	r5, [r4, #20]
 801582c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015834:	3301      	adds	r3, #1
 8015836:	444b      	add	r3, r9
 8015838:	106d      	asrs	r5, r5, #1
 801583a:	429d      	cmp	r5, r3
 801583c:	bf38      	it	cc
 801583e:	461d      	movcc	r5, r3
 8015840:	0553      	lsls	r3, r2, #21
 8015842:	d531      	bpl.n	80158a8 <__ssputs_r+0xa0>
 8015844:	4629      	mov	r1, r5
 8015846:	f7fd fcf5 	bl	8013234 <_malloc_r>
 801584a:	4606      	mov	r6, r0
 801584c:	b950      	cbnz	r0, 8015864 <__ssputs_r+0x5c>
 801584e:	230c      	movs	r3, #12
 8015850:	f8ca 3000 	str.w	r3, [sl]
 8015854:	89a3      	ldrh	r3, [r4, #12]
 8015856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801585a:	81a3      	strh	r3, [r4, #12]
 801585c:	f04f 30ff 	mov.w	r0, #4294967295
 8015860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015864:	6921      	ldr	r1, [r4, #16]
 8015866:	464a      	mov	r2, r9
 8015868:	f7fd f9f0 	bl	8012c4c <memcpy>
 801586c:	89a3      	ldrh	r3, [r4, #12]
 801586e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015876:	81a3      	strh	r3, [r4, #12]
 8015878:	6126      	str	r6, [r4, #16]
 801587a:	6165      	str	r5, [r4, #20]
 801587c:	444e      	add	r6, r9
 801587e:	eba5 0509 	sub.w	r5, r5, r9
 8015882:	6026      	str	r6, [r4, #0]
 8015884:	60a5      	str	r5, [r4, #8]
 8015886:	463e      	mov	r6, r7
 8015888:	42be      	cmp	r6, r7
 801588a:	d900      	bls.n	801588e <__ssputs_r+0x86>
 801588c:	463e      	mov	r6, r7
 801588e:	6820      	ldr	r0, [r4, #0]
 8015890:	4632      	mov	r2, r6
 8015892:	4641      	mov	r1, r8
 8015894:	f000 feb2 	bl	80165fc <memmove>
 8015898:	68a3      	ldr	r3, [r4, #8]
 801589a:	1b9b      	subs	r3, r3, r6
 801589c:	60a3      	str	r3, [r4, #8]
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	4433      	add	r3, r6
 80158a2:	6023      	str	r3, [r4, #0]
 80158a4:	2000      	movs	r0, #0
 80158a6:	e7db      	b.n	8015860 <__ssputs_r+0x58>
 80158a8:	462a      	mov	r2, r5
 80158aa:	f000 fec1 	bl	8016630 <_realloc_r>
 80158ae:	4606      	mov	r6, r0
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d1e1      	bne.n	8015878 <__ssputs_r+0x70>
 80158b4:	6921      	ldr	r1, [r4, #16]
 80158b6:	4650      	mov	r0, sl
 80158b8:	f7fd fc50 	bl	801315c <_free_r>
 80158bc:	e7c7      	b.n	801584e <__ssputs_r+0x46>
	...

080158c0 <_svfiprintf_r>:
 80158c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c4:	4698      	mov	r8, r3
 80158c6:	898b      	ldrh	r3, [r1, #12]
 80158c8:	061b      	lsls	r3, r3, #24
 80158ca:	b09d      	sub	sp, #116	; 0x74
 80158cc:	4607      	mov	r7, r0
 80158ce:	460d      	mov	r5, r1
 80158d0:	4614      	mov	r4, r2
 80158d2:	d50e      	bpl.n	80158f2 <_svfiprintf_r+0x32>
 80158d4:	690b      	ldr	r3, [r1, #16]
 80158d6:	b963      	cbnz	r3, 80158f2 <_svfiprintf_r+0x32>
 80158d8:	2140      	movs	r1, #64	; 0x40
 80158da:	f7fd fcab 	bl	8013234 <_malloc_r>
 80158de:	6028      	str	r0, [r5, #0]
 80158e0:	6128      	str	r0, [r5, #16]
 80158e2:	b920      	cbnz	r0, 80158ee <_svfiprintf_r+0x2e>
 80158e4:	230c      	movs	r3, #12
 80158e6:	603b      	str	r3, [r7, #0]
 80158e8:	f04f 30ff 	mov.w	r0, #4294967295
 80158ec:	e0d1      	b.n	8015a92 <_svfiprintf_r+0x1d2>
 80158ee:	2340      	movs	r3, #64	; 0x40
 80158f0:	616b      	str	r3, [r5, #20]
 80158f2:	2300      	movs	r3, #0
 80158f4:	9309      	str	r3, [sp, #36]	; 0x24
 80158f6:	2320      	movs	r3, #32
 80158f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015900:	2330      	movs	r3, #48	; 0x30
 8015902:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015aac <_svfiprintf_r+0x1ec>
 8015906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801590a:	f04f 0901 	mov.w	r9, #1
 801590e:	4623      	mov	r3, r4
 8015910:	469a      	mov	sl, r3
 8015912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015916:	b10a      	cbz	r2, 801591c <_svfiprintf_r+0x5c>
 8015918:	2a25      	cmp	r2, #37	; 0x25
 801591a:	d1f9      	bne.n	8015910 <_svfiprintf_r+0x50>
 801591c:	ebba 0b04 	subs.w	fp, sl, r4
 8015920:	d00b      	beq.n	801593a <_svfiprintf_r+0x7a>
 8015922:	465b      	mov	r3, fp
 8015924:	4622      	mov	r2, r4
 8015926:	4629      	mov	r1, r5
 8015928:	4638      	mov	r0, r7
 801592a:	f7ff ff6d 	bl	8015808 <__ssputs_r>
 801592e:	3001      	adds	r0, #1
 8015930:	f000 80aa 	beq.w	8015a88 <_svfiprintf_r+0x1c8>
 8015934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015936:	445a      	add	r2, fp
 8015938:	9209      	str	r2, [sp, #36]	; 0x24
 801593a:	f89a 3000 	ldrb.w	r3, [sl]
 801593e:	2b00      	cmp	r3, #0
 8015940:	f000 80a2 	beq.w	8015a88 <_svfiprintf_r+0x1c8>
 8015944:	2300      	movs	r3, #0
 8015946:	f04f 32ff 	mov.w	r2, #4294967295
 801594a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801594e:	f10a 0a01 	add.w	sl, sl, #1
 8015952:	9304      	str	r3, [sp, #16]
 8015954:	9307      	str	r3, [sp, #28]
 8015956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801595a:	931a      	str	r3, [sp, #104]	; 0x68
 801595c:	4654      	mov	r4, sl
 801595e:	2205      	movs	r2, #5
 8015960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015964:	4851      	ldr	r0, [pc, #324]	; (8015aac <_svfiprintf_r+0x1ec>)
 8015966:	f7ea fc13 	bl	8000190 <memchr>
 801596a:	9a04      	ldr	r2, [sp, #16]
 801596c:	b9d8      	cbnz	r0, 80159a6 <_svfiprintf_r+0xe6>
 801596e:	06d0      	lsls	r0, r2, #27
 8015970:	bf44      	itt	mi
 8015972:	2320      	movmi	r3, #32
 8015974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015978:	0711      	lsls	r1, r2, #28
 801597a:	bf44      	itt	mi
 801597c:	232b      	movmi	r3, #43	; 0x2b
 801597e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015982:	f89a 3000 	ldrb.w	r3, [sl]
 8015986:	2b2a      	cmp	r3, #42	; 0x2a
 8015988:	d015      	beq.n	80159b6 <_svfiprintf_r+0xf6>
 801598a:	9a07      	ldr	r2, [sp, #28]
 801598c:	4654      	mov	r4, sl
 801598e:	2000      	movs	r0, #0
 8015990:	f04f 0c0a 	mov.w	ip, #10
 8015994:	4621      	mov	r1, r4
 8015996:	f811 3b01 	ldrb.w	r3, [r1], #1
 801599a:	3b30      	subs	r3, #48	; 0x30
 801599c:	2b09      	cmp	r3, #9
 801599e:	d94e      	bls.n	8015a3e <_svfiprintf_r+0x17e>
 80159a0:	b1b0      	cbz	r0, 80159d0 <_svfiprintf_r+0x110>
 80159a2:	9207      	str	r2, [sp, #28]
 80159a4:	e014      	b.n	80159d0 <_svfiprintf_r+0x110>
 80159a6:	eba0 0308 	sub.w	r3, r0, r8
 80159aa:	fa09 f303 	lsl.w	r3, r9, r3
 80159ae:	4313      	orrs	r3, r2
 80159b0:	9304      	str	r3, [sp, #16]
 80159b2:	46a2      	mov	sl, r4
 80159b4:	e7d2      	b.n	801595c <_svfiprintf_r+0x9c>
 80159b6:	9b03      	ldr	r3, [sp, #12]
 80159b8:	1d19      	adds	r1, r3, #4
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	9103      	str	r1, [sp, #12]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	bfbb      	ittet	lt
 80159c2:	425b      	neglt	r3, r3
 80159c4:	f042 0202 	orrlt.w	r2, r2, #2
 80159c8:	9307      	strge	r3, [sp, #28]
 80159ca:	9307      	strlt	r3, [sp, #28]
 80159cc:	bfb8      	it	lt
 80159ce:	9204      	strlt	r2, [sp, #16]
 80159d0:	7823      	ldrb	r3, [r4, #0]
 80159d2:	2b2e      	cmp	r3, #46	; 0x2e
 80159d4:	d10c      	bne.n	80159f0 <_svfiprintf_r+0x130>
 80159d6:	7863      	ldrb	r3, [r4, #1]
 80159d8:	2b2a      	cmp	r3, #42	; 0x2a
 80159da:	d135      	bne.n	8015a48 <_svfiprintf_r+0x188>
 80159dc:	9b03      	ldr	r3, [sp, #12]
 80159de:	1d1a      	adds	r2, r3, #4
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	9203      	str	r2, [sp, #12]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	bfb8      	it	lt
 80159e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80159ec:	3402      	adds	r4, #2
 80159ee:	9305      	str	r3, [sp, #20]
 80159f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015abc <_svfiprintf_r+0x1fc>
 80159f4:	7821      	ldrb	r1, [r4, #0]
 80159f6:	2203      	movs	r2, #3
 80159f8:	4650      	mov	r0, sl
 80159fa:	f7ea fbc9 	bl	8000190 <memchr>
 80159fe:	b140      	cbz	r0, 8015a12 <_svfiprintf_r+0x152>
 8015a00:	2340      	movs	r3, #64	; 0x40
 8015a02:	eba0 000a 	sub.w	r0, r0, sl
 8015a06:	fa03 f000 	lsl.w	r0, r3, r0
 8015a0a:	9b04      	ldr	r3, [sp, #16]
 8015a0c:	4303      	orrs	r3, r0
 8015a0e:	3401      	adds	r4, #1
 8015a10:	9304      	str	r3, [sp, #16]
 8015a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a16:	4826      	ldr	r0, [pc, #152]	; (8015ab0 <_svfiprintf_r+0x1f0>)
 8015a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a1c:	2206      	movs	r2, #6
 8015a1e:	f7ea fbb7 	bl	8000190 <memchr>
 8015a22:	2800      	cmp	r0, #0
 8015a24:	d038      	beq.n	8015a98 <_svfiprintf_r+0x1d8>
 8015a26:	4b23      	ldr	r3, [pc, #140]	; (8015ab4 <_svfiprintf_r+0x1f4>)
 8015a28:	bb1b      	cbnz	r3, 8015a72 <_svfiprintf_r+0x1b2>
 8015a2a:	9b03      	ldr	r3, [sp, #12]
 8015a2c:	3307      	adds	r3, #7
 8015a2e:	f023 0307 	bic.w	r3, r3, #7
 8015a32:	3308      	adds	r3, #8
 8015a34:	9303      	str	r3, [sp, #12]
 8015a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a38:	4433      	add	r3, r6
 8015a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a3c:	e767      	b.n	801590e <_svfiprintf_r+0x4e>
 8015a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a42:	460c      	mov	r4, r1
 8015a44:	2001      	movs	r0, #1
 8015a46:	e7a5      	b.n	8015994 <_svfiprintf_r+0xd4>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	3401      	adds	r4, #1
 8015a4c:	9305      	str	r3, [sp, #20]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	f04f 0c0a 	mov.w	ip, #10
 8015a54:	4620      	mov	r0, r4
 8015a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a5a:	3a30      	subs	r2, #48	; 0x30
 8015a5c:	2a09      	cmp	r2, #9
 8015a5e:	d903      	bls.n	8015a68 <_svfiprintf_r+0x1a8>
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d0c5      	beq.n	80159f0 <_svfiprintf_r+0x130>
 8015a64:	9105      	str	r1, [sp, #20]
 8015a66:	e7c3      	b.n	80159f0 <_svfiprintf_r+0x130>
 8015a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a6c:	4604      	mov	r4, r0
 8015a6e:	2301      	movs	r3, #1
 8015a70:	e7f0      	b.n	8015a54 <_svfiprintf_r+0x194>
 8015a72:	ab03      	add	r3, sp, #12
 8015a74:	9300      	str	r3, [sp, #0]
 8015a76:	462a      	mov	r2, r5
 8015a78:	4b0f      	ldr	r3, [pc, #60]	; (8015ab8 <_svfiprintf_r+0x1f8>)
 8015a7a:	a904      	add	r1, sp, #16
 8015a7c:	4638      	mov	r0, r7
 8015a7e:	f7fd fced 	bl	801345c <_printf_float>
 8015a82:	1c42      	adds	r2, r0, #1
 8015a84:	4606      	mov	r6, r0
 8015a86:	d1d6      	bne.n	8015a36 <_svfiprintf_r+0x176>
 8015a88:	89ab      	ldrh	r3, [r5, #12]
 8015a8a:	065b      	lsls	r3, r3, #25
 8015a8c:	f53f af2c 	bmi.w	80158e8 <_svfiprintf_r+0x28>
 8015a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a92:	b01d      	add	sp, #116	; 0x74
 8015a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a98:	ab03      	add	r3, sp, #12
 8015a9a:	9300      	str	r3, [sp, #0]
 8015a9c:	462a      	mov	r2, r5
 8015a9e:	4b06      	ldr	r3, [pc, #24]	; (8015ab8 <_svfiprintf_r+0x1f8>)
 8015aa0:	a904      	add	r1, sp, #16
 8015aa2:	4638      	mov	r0, r7
 8015aa4:	f7fd ff7e 	bl	80139a4 <_printf_i>
 8015aa8:	e7eb      	b.n	8015a82 <_svfiprintf_r+0x1c2>
 8015aaa:	bf00      	nop
 8015aac:	08018954 	.word	0x08018954
 8015ab0:	0801895e 	.word	0x0801895e
 8015ab4:	0801345d 	.word	0x0801345d
 8015ab8:	08015809 	.word	0x08015809
 8015abc:	0801895a 	.word	0x0801895a

08015ac0 <__sfputc_r>:
 8015ac0:	6893      	ldr	r3, [r2, #8]
 8015ac2:	3b01      	subs	r3, #1
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	b410      	push	{r4}
 8015ac8:	6093      	str	r3, [r2, #8]
 8015aca:	da08      	bge.n	8015ade <__sfputc_r+0x1e>
 8015acc:	6994      	ldr	r4, [r2, #24]
 8015ace:	42a3      	cmp	r3, r4
 8015ad0:	db01      	blt.n	8015ad6 <__sfputc_r+0x16>
 8015ad2:	290a      	cmp	r1, #10
 8015ad4:	d103      	bne.n	8015ade <__sfputc_r+0x1e>
 8015ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ada:	f000 ba57 	b.w	8015f8c <__swbuf_r>
 8015ade:	6813      	ldr	r3, [r2, #0]
 8015ae0:	1c58      	adds	r0, r3, #1
 8015ae2:	6010      	str	r0, [r2, #0]
 8015ae4:	7019      	strb	r1, [r3, #0]
 8015ae6:	4608      	mov	r0, r1
 8015ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aec:	4770      	bx	lr

08015aee <__sfputs_r>:
 8015aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015af0:	4606      	mov	r6, r0
 8015af2:	460f      	mov	r7, r1
 8015af4:	4614      	mov	r4, r2
 8015af6:	18d5      	adds	r5, r2, r3
 8015af8:	42ac      	cmp	r4, r5
 8015afa:	d101      	bne.n	8015b00 <__sfputs_r+0x12>
 8015afc:	2000      	movs	r0, #0
 8015afe:	e007      	b.n	8015b10 <__sfputs_r+0x22>
 8015b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b04:	463a      	mov	r2, r7
 8015b06:	4630      	mov	r0, r6
 8015b08:	f7ff ffda 	bl	8015ac0 <__sfputc_r>
 8015b0c:	1c43      	adds	r3, r0, #1
 8015b0e:	d1f3      	bne.n	8015af8 <__sfputs_r+0xa>
 8015b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b14 <_vfiprintf_r>:
 8015b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b18:	460d      	mov	r5, r1
 8015b1a:	b09d      	sub	sp, #116	; 0x74
 8015b1c:	4614      	mov	r4, r2
 8015b1e:	4698      	mov	r8, r3
 8015b20:	4606      	mov	r6, r0
 8015b22:	b118      	cbz	r0, 8015b2c <_vfiprintf_r+0x18>
 8015b24:	6983      	ldr	r3, [r0, #24]
 8015b26:	b90b      	cbnz	r3, 8015b2c <_vfiprintf_r+0x18>
 8015b28:	f000 fc40 	bl	80163ac <__sinit>
 8015b2c:	4b89      	ldr	r3, [pc, #548]	; (8015d54 <_vfiprintf_r+0x240>)
 8015b2e:	429d      	cmp	r5, r3
 8015b30:	d11b      	bne.n	8015b6a <_vfiprintf_r+0x56>
 8015b32:	6875      	ldr	r5, [r6, #4]
 8015b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b36:	07d9      	lsls	r1, r3, #31
 8015b38:	d405      	bmi.n	8015b46 <_vfiprintf_r+0x32>
 8015b3a:	89ab      	ldrh	r3, [r5, #12]
 8015b3c:	059a      	lsls	r2, r3, #22
 8015b3e:	d402      	bmi.n	8015b46 <_vfiprintf_r+0x32>
 8015b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b42:	f7ff fab7 	bl	80150b4 <__retarget_lock_acquire_recursive>
 8015b46:	89ab      	ldrh	r3, [r5, #12]
 8015b48:	071b      	lsls	r3, r3, #28
 8015b4a:	d501      	bpl.n	8015b50 <_vfiprintf_r+0x3c>
 8015b4c:	692b      	ldr	r3, [r5, #16]
 8015b4e:	b9eb      	cbnz	r3, 8015b8c <_vfiprintf_r+0x78>
 8015b50:	4629      	mov	r1, r5
 8015b52:	4630      	mov	r0, r6
 8015b54:	f000 fa7e 	bl	8016054 <__swsetup_r>
 8015b58:	b1c0      	cbz	r0, 8015b8c <_vfiprintf_r+0x78>
 8015b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b5c:	07dc      	lsls	r4, r3, #31
 8015b5e:	d50e      	bpl.n	8015b7e <_vfiprintf_r+0x6a>
 8015b60:	f04f 30ff 	mov.w	r0, #4294967295
 8015b64:	b01d      	add	sp, #116	; 0x74
 8015b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b6a:	4b7b      	ldr	r3, [pc, #492]	; (8015d58 <_vfiprintf_r+0x244>)
 8015b6c:	429d      	cmp	r5, r3
 8015b6e:	d101      	bne.n	8015b74 <_vfiprintf_r+0x60>
 8015b70:	68b5      	ldr	r5, [r6, #8]
 8015b72:	e7df      	b.n	8015b34 <_vfiprintf_r+0x20>
 8015b74:	4b79      	ldr	r3, [pc, #484]	; (8015d5c <_vfiprintf_r+0x248>)
 8015b76:	429d      	cmp	r5, r3
 8015b78:	bf08      	it	eq
 8015b7a:	68f5      	ldreq	r5, [r6, #12]
 8015b7c:	e7da      	b.n	8015b34 <_vfiprintf_r+0x20>
 8015b7e:	89ab      	ldrh	r3, [r5, #12]
 8015b80:	0598      	lsls	r0, r3, #22
 8015b82:	d4ed      	bmi.n	8015b60 <_vfiprintf_r+0x4c>
 8015b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b86:	f7ff fa97 	bl	80150b8 <__retarget_lock_release_recursive>
 8015b8a:	e7e9      	b.n	8015b60 <_vfiprintf_r+0x4c>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b90:	2320      	movs	r3, #32
 8015b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b9a:	2330      	movs	r3, #48	; 0x30
 8015b9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015d60 <_vfiprintf_r+0x24c>
 8015ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ba4:	f04f 0901 	mov.w	r9, #1
 8015ba8:	4623      	mov	r3, r4
 8015baa:	469a      	mov	sl, r3
 8015bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bb0:	b10a      	cbz	r2, 8015bb6 <_vfiprintf_r+0xa2>
 8015bb2:	2a25      	cmp	r2, #37	; 0x25
 8015bb4:	d1f9      	bne.n	8015baa <_vfiprintf_r+0x96>
 8015bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8015bba:	d00b      	beq.n	8015bd4 <_vfiprintf_r+0xc0>
 8015bbc:	465b      	mov	r3, fp
 8015bbe:	4622      	mov	r2, r4
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f7ff ff93 	bl	8015aee <__sfputs_r>
 8015bc8:	3001      	adds	r0, #1
 8015bca:	f000 80aa 	beq.w	8015d22 <_vfiprintf_r+0x20e>
 8015bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bd0:	445a      	add	r2, fp
 8015bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8015bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f000 80a2 	beq.w	8015d22 <_vfiprintf_r+0x20e>
 8015bde:	2300      	movs	r3, #0
 8015be0:	f04f 32ff 	mov.w	r2, #4294967295
 8015be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015be8:	f10a 0a01 	add.w	sl, sl, #1
 8015bec:	9304      	str	r3, [sp, #16]
 8015bee:	9307      	str	r3, [sp, #28]
 8015bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8015bf6:	4654      	mov	r4, sl
 8015bf8:	2205      	movs	r2, #5
 8015bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bfe:	4858      	ldr	r0, [pc, #352]	; (8015d60 <_vfiprintf_r+0x24c>)
 8015c00:	f7ea fac6 	bl	8000190 <memchr>
 8015c04:	9a04      	ldr	r2, [sp, #16]
 8015c06:	b9d8      	cbnz	r0, 8015c40 <_vfiprintf_r+0x12c>
 8015c08:	06d1      	lsls	r1, r2, #27
 8015c0a:	bf44      	itt	mi
 8015c0c:	2320      	movmi	r3, #32
 8015c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c12:	0713      	lsls	r3, r2, #28
 8015c14:	bf44      	itt	mi
 8015c16:	232b      	movmi	r3, #43	; 0x2b
 8015c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c20:	2b2a      	cmp	r3, #42	; 0x2a
 8015c22:	d015      	beq.n	8015c50 <_vfiprintf_r+0x13c>
 8015c24:	9a07      	ldr	r2, [sp, #28]
 8015c26:	4654      	mov	r4, sl
 8015c28:	2000      	movs	r0, #0
 8015c2a:	f04f 0c0a 	mov.w	ip, #10
 8015c2e:	4621      	mov	r1, r4
 8015c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c34:	3b30      	subs	r3, #48	; 0x30
 8015c36:	2b09      	cmp	r3, #9
 8015c38:	d94e      	bls.n	8015cd8 <_vfiprintf_r+0x1c4>
 8015c3a:	b1b0      	cbz	r0, 8015c6a <_vfiprintf_r+0x156>
 8015c3c:	9207      	str	r2, [sp, #28]
 8015c3e:	e014      	b.n	8015c6a <_vfiprintf_r+0x156>
 8015c40:	eba0 0308 	sub.w	r3, r0, r8
 8015c44:	fa09 f303 	lsl.w	r3, r9, r3
 8015c48:	4313      	orrs	r3, r2
 8015c4a:	9304      	str	r3, [sp, #16]
 8015c4c:	46a2      	mov	sl, r4
 8015c4e:	e7d2      	b.n	8015bf6 <_vfiprintf_r+0xe2>
 8015c50:	9b03      	ldr	r3, [sp, #12]
 8015c52:	1d19      	adds	r1, r3, #4
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	9103      	str	r1, [sp, #12]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	bfbb      	ittet	lt
 8015c5c:	425b      	neglt	r3, r3
 8015c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8015c62:	9307      	strge	r3, [sp, #28]
 8015c64:	9307      	strlt	r3, [sp, #28]
 8015c66:	bfb8      	it	lt
 8015c68:	9204      	strlt	r2, [sp, #16]
 8015c6a:	7823      	ldrb	r3, [r4, #0]
 8015c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8015c6e:	d10c      	bne.n	8015c8a <_vfiprintf_r+0x176>
 8015c70:	7863      	ldrb	r3, [r4, #1]
 8015c72:	2b2a      	cmp	r3, #42	; 0x2a
 8015c74:	d135      	bne.n	8015ce2 <_vfiprintf_r+0x1ce>
 8015c76:	9b03      	ldr	r3, [sp, #12]
 8015c78:	1d1a      	adds	r2, r3, #4
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	9203      	str	r2, [sp, #12]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	bfb8      	it	lt
 8015c82:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c86:	3402      	adds	r4, #2
 8015c88:	9305      	str	r3, [sp, #20]
 8015c8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015d70 <_vfiprintf_r+0x25c>
 8015c8e:	7821      	ldrb	r1, [r4, #0]
 8015c90:	2203      	movs	r2, #3
 8015c92:	4650      	mov	r0, sl
 8015c94:	f7ea fa7c 	bl	8000190 <memchr>
 8015c98:	b140      	cbz	r0, 8015cac <_vfiprintf_r+0x198>
 8015c9a:	2340      	movs	r3, #64	; 0x40
 8015c9c:	eba0 000a 	sub.w	r0, r0, sl
 8015ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8015ca4:	9b04      	ldr	r3, [sp, #16]
 8015ca6:	4303      	orrs	r3, r0
 8015ca8:	3401      	adds	r4, #1
 8015caa:	9304      	str	r3, [sp, #16]
 8015cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb0:	482c      	ldr	r0, [pc, #176]	; (8015d64 <_vfiprintf_r+0x250>)
 8015cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015cb6:	2206      	movs	r2, #6
 8015cb8:	f7ea fa6a 	bl	8000190 <memchr>
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	d03f      	beq.n	8015d40 <_vfiprintf_r+0x22c>
 8015cc0:	4b29      	ldr	r3, [pc, #164]	; (8015d68 <_vfiprintf_r+0x254>)
 8015cc2:	bb1b      	cbnz	r3, 8015d0c <_vfiprintf_r+0x1f8>
 8015cc4:	9b03      	ldr	r3, [sp, #12]
 8015cc6:	3307      	adds	r3, #7
 8015cc8:	f023 0307 	bic.w	r3, r3, #7
 8015ccc:	3308      	adds	r3, #8
 8015cce:	9303      	str	r3, [sp, #12]
 8015cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd2:	443b      	add	r3, r7
 8015cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8015cd6:	e767      	b.n	8015ba8 <_vfiprintf_r+0x94>
 8015cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cdc:	460c      	mov	r4, r1
 8015cde:	2001      	movs	r0, #1
 8015ce0:	e7a5      	b.n	8015c2e <_vfiprintf_r+0x11a>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	3401      	adds	r4, #1
 8015ce6:	9305      	str	r3, [sp, #20]
 8015ce8:	4619      	mov	r1, r3
 8015cea:	f04f 0c0a 	mov.w	ip, #10
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cf4:	3a30      	subs	r2, #48	; 0x30
 8015cf6:	2a09      	cmp	r2, #9
 8015cf8:	d903      	bls.n	8015d02 <_vfiprintf_r+0x1ee>
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d0c5      	beq.n	8015c8a <_vfiprintf_r+0x176>
 8015cfe:	9105      	str	r1, [sp, #20]
 8015d00:	e7c3      	b.n	8015c8a <_vfiprintf_r+0x176>
 8015d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d06:	4604      	mov	r4, r0
 8015d08:	2301      	movs	r3, #1
 8015d0a:	e7f0      	b.n	8015cee <_vfiprintf_r+0x1da>
 8015d0c:	ab03      	add	r3, sp, #12
 8015d0e:	9300      	str	r3, [sp, #0]
 8015d10:	462a      	mov	r2, r5
 8015d12:	4b16      	ldr	r3, [pc, #88]	; (8015d6c <_vfiprintf_r+0x258>)
 8015d14:	a904      	add	r1, sp, #16
 8015d16:	4630      	mov	r0, r6
 8015d18:	f7fd fba0 	bl	801345c <_printf_float>
 8015d1c:	4607      	mov	r7, r0
 8015d1e:	1c78      	adds	r0, r7, #1
 8015d20:	d1d6      	bne.n	8015cd0 <_vfiprintf_r+0x1bc>
 8015d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d24:	07d9      	lsls	r1, r3, #31
 8015d26:	d405      	bmi.n	8015d34 <_vfiprintf_r+0x220>
 8015d28:	89ab      	ldrh	r3, [r5, #12]
 8015d2a:	059a      	lsls	r2, r3, #22
 8015d2c:	d402      	bmi.n	8015d34 <_vfiprintf_r+0x220>
 8015d2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d30:	f7ff f9c2 	bl	80150b8 <__retarget_lock_release_recursive>
 8015d34:	89ab      	ldrh	r3, [r5, #12]
 8015d36:	065b      	lsls	r3, r3, #25
 8015d38:	f53f af12 	bmi.w	8015b60 <_vfiprintf_r+0x4c>
 8015d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d3e:	e711      	b.n	8015b64 <_vfiprintf_r+0x50>
 8015d40:	ab03      	add	r3, sp, #12
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	462a      	mov	r2, r5
 8015d46:	4b09      	ldr	r3, [pc, #36]	; (8015d6c <_vfiprintf_r+0x258>)
 8015d48:	a904      	add	r1, sp, #16
 8015d4a:	4630      	mov	r0, r6
 8015d4c:	f7fd fe2a 	bl	80139a4 <_printf_i>
 8015d50:	e7e4      	b.n	8015d1c <_vfiprintf_r+0x208>
 8015d52:	bf00      	nop
 8015d54:	08018a88 	.word	0x08018a88
 8015d58:	08018aa8 	.word	0x08018aa8
 8015d5c:	08018a68 	.word	0x08018a68
 8015d60:	08018954 	.word	0x08018954
 8015d64:	0801895e 	.word	0x0801895e
 8015d68:	0801345d 	.word	0x0801345d
 8015d6c:	08015aef 	.word	0x08015aef
 8015d70:	0801895a 	.word	0x0801895a

08015d74 <siscanf>:
 8015d74:	b40e      	push	{r1, r2, r3}
 8015d76:	b510      	push	{r4, lr}
 8015d78:	b09f      	sub	sp, #124	; 0x7c
 8015d7a:	ac21      	add	r4, sp, #132	; 0x84
 8015d7c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015d80:	f854 2b04 	ldr.w	r2, [r4], #4
 8015d84:	9201      	str	r2, [sp, #4]
 8015d86:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015d8a:	9004      	str	r0, [sp, #16]
 8015d8c:	9008      	str	r0, [sp, #32]
 8015d8e:	f7ea f9f7 	bl	8000180 <strlen>
 8015d92:	4b0c      	ldr	r3, [pc, #48]	; (8015dc4 <siscanf+0x50>)
 8015d94:	9005      	str	r0, [sp, #20]
 8015d96:	9009      	str	r0, [sp, #36]	; 0x24
 8015d98:	930d      	str	r3, [sp, #52]	; 0x34
 8015d9a:	480b      	ldr	r0, [pc, #44]	; (8015dc8 <siscanf+0x54>)
 8015d9c:	9a01      	ldr	r2, [sp, #4]
 8015d9e:	6800      	ldr	r0, [r0, #0]
 8015da0:	9403      	str	r4, [sp, #12]
 8015da2:	2300      	movs	r3, #0
 8015da4:	9311      	str	r3, [sp, #68]	; 0x44
 8015da6:	9316      	str	r3, [sp, #88]	; 0x58
 8015da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015db0:	a904      	add	r1, sp, #16
 8015db2:	4623      	mov	r3, r4
 8015db4:	f000 fcc6 	bl	8016744 <__ssvfiscanf_r>
 8015db8:	b01f      	add	sp, #124	; 0x7c
 8015dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dbe:	b003      	add	sp, #12
 8015dc0:	4770      	bx	lr
 8015dc2:	bf00      	nop
 8015dc4:	08015def 	.word	0x08015def
 8015dc8:	20000020 	.word	0x20000020

08015dcc <__sread>:
 8015dcc:	b510      	push	{r4, lr}
 8015dce:	460c      	mov	r4, r1
 8015dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dd4:	f000 ff80 	bl	8016cd8 <_read_r>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	bfab      	itete	ge
 8015ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015dde:	89a3      	ldrhlt	r3, [r4, #12]
 8015de0:	181b      	addge	r3, r3, r0
 8015de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015de6:	bfac      	ite	ge
 8015de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015dea:	81a3      	strhlt	r3, [r4, #12]
 8015dec:	bd10      	pop	{r4, pc}

08015dee <__seofread>:
 8015dee:	2000      	movs	r0, #0
 8015df0:	4770      	bx	lr

08015df2 <__swrite>:
 8015df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015df6:	461f      	mov	r7, r3
 8015df8:	898b      	ldrh	r3, [r1, #12]
 8015dfa:	05db      	lsls	r3, r3, #23
 8015dfc:	4605      	mov	r5, r0
 8015dfe:	460c      	mov	r4, r1
 8015e00:	4616      	mov	r6, r2
 8015e02:	d505      	bpl.n	8015e10 <__swrite+0x1e>
 8015e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e08:	2302      	movs	r3, #2
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	f000 fb6c 	bl	80164e8 <_lseek_r>
 8015e10:	89a3      	ldrh	r3, [r4, #12]
 8015e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e1a:	81a3      	strh	r3, [r4, #12]
 8015e1c:	4632      	mov	r2, r6
 8015e1e:	463b      	mov	r3, r7
 8015e20:	4628      	mov	r0, r5
 8015e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e26:	f000 b903 	b.w	8016030 <_write_r>

08015e2a <__sseek>:
 8015e2a:	b510      	push	{r4, lr}
 8015e2c:	460c      	mov	r4, r1
 8015e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e32:	f000 fb59 	bl	80164e8 <_lseek_r>
 8015e36:	1c43      	adds	r3, r0, #1
 8015e38:	89a3      	ldrh	r3, [r4, #12]
 8015e3a:	bf15      	itete	ne
 8015e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e46:	81a3      	strheq	r3, [r4, #12]
 8015e48:	bf18      	it	ne
 8015e4a:	81a3      	strhne	r3, [r4, #12]
 8015e4c:	bd10      	pop	{r4, pc}

08015e4e <__sclose>:
 8015e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e52:	f000 b975 	b.w	8016140 <_close_r>

08015e56 <strcpy>:
 8015e56:	4603      	mov	r3, r0
 8015e58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e5c:	f803 2b01 	strb.w	r2, [r3], #1
 8015e60:	2a00      	cmp	r2, #0
 8015e62:	d1f9      	bne.n	8015e58 <strcpy+0x2>
 8015e64:	4770      	bx	lr

08015e66 <strncmp>:
 8015e66:	b510      	push	{r4, lr}
 8015e68:	b17a      	cbz	r2, 8015e8a <strncmp+0x24>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	3901      	subs	r1, #1
 8015e6e:	1884      	adds	r4, r0, r2
 8015e70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015e78:	4290      	cmp	r0, r2
 8015e7a:	d101      	bne.n	8015e80 <strncmp+0x1a>
 8015e7c:	42a3      	cmp	r3, r4
 8015e7e:	d101      	bne.n	8015e84 <strncmp+0x1e>
 8015e80:	1a80      	subs	r0, r0, r2
 8015e82:	bd10      	pop	{r4, pc}
 8015e84:	2800      	cmp	r0, #0
 8015e86:	d1f3      	bne.n	8015e70 <strncmp+0xa>
 8015e88:	e7fa      	b.n	8015e80 <strncmp+0x1a>
 8015e8a:	4610      	mov	r0, r2
 8015e8c:	e7f9      	b.n	8015e82 <strncmp+0x1c>
	...

08015e90 <_strtoul_l.constprop.0>:
 8015e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e94:	4f36      	ldr	r7, [pc, #216]	; (8015f70 <_strtoul_l.constprop.0+0xe0>)
 8015e96:	4686      	mov	lr, r0
 8015e98:	460d      	mov	r5, r1
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015ea0:	5de6      	ldrb	r6, [r4, r7]
 8015ea2:	f016 0608 	ands.w	r6, r6, #8
 8015ea6:	d1f8      	bne.n	8015e9a <_strtoul_l.constprop.0+0xa>
 8015ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8015eaa:	d12f      	bne.n	8015f0c <_strtoul_l.constprop.0+0x7c>
 8015eac:	782c      	ldrb	r4, [r5, #0]
 8015eae:	2601      	movs	r6, #1
 8015eb0:	1c85      	adds	r5, r0, #2
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d057      	beq.n	8015f66 <_strtoul_l.constprop.0+0xd6>
 8015eb6:	2b10      	cmp	r3, #16
 8015eb8:	d109      	bne.n	8015ece <_strtoul_l.constprop.0+0x3e>
 8015eba:	2c30      	cmp	r4, #48	; 0x30
 8015ebc:	d107      	bne.n	8015ece <_strtoul_l.constprop.0+0x3e>
 8015ebe:	7828      	ldrb	r0, [r5, #0]
 8015ec0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015ec4:	2858      	cmp	r0, #88	; 0x58
 8015ec6:	d149      	bne.n	8015f5c <_strtoul_l.constprop.0+0xcc>
 8015ec8:	786c      	ldrb	r4, [r5, #1]
 8015eca:	2310      	movs	r3, #16
 8015ecc:	3502      	adds	r5, #2
 8015ece:	f04f 38ff 	mov.w	r8, #4294967295
 8015ed2:	2700      	movs	r7, #0
 8015ed4:	fbb8 f8f3 	udiv	r8, r8, r3
 8015ed8:	fb03 f908 	mul.w	r9, r3, r8
 8015edc:	ea6f 0909 	mvn.w	r9, r9
 8015ee0:	4638      	mov	r0, r7
 8015ee2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015ee6:	f1bc 0f09 	cmp.w	ip, #9
 8015eea:	d814      	bhi.n	8015f16 <_strtoul_l.constprop.0+0x86>
 8015eec:	4664      	mov	r4, ip
 8015eee:	42a3      	cmp	r3, r4
 8015ef0:	dd22      	ble.n	8015f38 <_strtoul_l.constprop.0+0xa8>
 8015ef2:	2f00      	cmp	r7, #0
 8015ef4:	db1d      	blt.n	8015f32 <_strtoul_l.constprop.0+0xa2>
 8015ef6:	4580      	cmp	r8, r0
 8015ef8:	d31b      	bcc.n	8015f32 <_strtoul_l.constprop.0+0xa2>
 8015efa:	d101      	bne.n	8015f00 <_strtoul_l.constprop.0+0x70>
 8015efc:	45a1      	cmp	r9, r4
 8015efe:	db18      	blt.n	8015f32 <_strtoul_l.constprop.0+0xa2>
 8015f00:	fb00 4003 	mla	r0, r0, r3, r4
 8015f04:	2701      	movs	r7, #1
 8015f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f0a:	e7ea      	b.n	8015ee2 <_strtoul_l.constprop.0+0x52>
 8015f0c:	2c2b      	cmp	r4, #43	; 0x2b
 8015f0e:	bf04      	itt	eq
 8015f10:	782c      	ldrbeq	r4, [r5, #0]
 8015f12:	1c85      	addeq	r5, r0, #2
 8015f14:	e7cd      	b.n	8015eb2 <_strtoul_l.constprop.0+0x22>
 8015f16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015f1a:	f1bc 0f19 	cmp.w	ip, #25
 8015f1e:	d801      	bhi.n	8015f24 <_strtoul_l.constprop.0+0x94>
 8015f20:	3c37      	subs	r4, #55	; 0x37
 8015f22:	e7e4      	b.n	8015eee <_strtoul_l.constprop.0+0x5e>
 8015f24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015f28:	f1bc 0f19 	cmp.w	ip, #25
 8015f2c:	d804      	bhi.n	8015f38 <_strtoul_l.constprop.0+0xa8>
 8015f2e:	3c57      	subs	r4, #87	; 0x57
 8015f30:	e7dd      	b.n	8015eee <_strtoul_l.constprop.0+0x5e>
 8015f32:	f04f 37ff 	mov.w	r7, #4294967295
 8015f36:	e7e6      	b.n	8015f06 <_strtoul_l.constprop.0+0x76>
 8015f38:	2f00      	cmp	r7, #0
 8015f3a:	da07      	bge.n	8015f4c <_strtoul_l.constprop.0+0xbc>
 8015f3c:	2322      	movs	r3, #34	; 0x22
 8015f3e:	f8ce 3000 	str.w	r3, [lr]
 8015f42:	f04f 30ff 	mov.w	r0, #4294967295
 8015f46:	b932      	cbnz	r2, 8015f56 <_strtoul_l.constprop.0+0xc6>
 8015f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f4c:	b106      	cbz	r6, 8015f50 <_strtoul_l.constprop.0+0xc0>
 8015f4e:	4240      	negs	r0, r0
 8015f50:	2a00      	cmp	r2, #0
 8015f52:	d0f9      	beq.n	8015f48 <_strtoul_l.constprop.0+0xb8>
 8015f54:	b107      	cbz	r7, 8015f58 <_strtoul_l.constprop.0+0xc8>
 8015f56:	1e69      	subs	r1, r5, #1
 8015f58:	6011      	str	r1, [r2, #0]
 8015f5a:	e7f5      	b.n	8015f48 <_strtoul_l.constprop.0+0xb8>
 8015f5c:	2430      	movs	r4, #48	; 0x30
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1b5      	bne.n	8015ece <_strtoul_l.constprop.0+0x3e>
 8015f62:	2308      	movs	r3, #8
 8015f64:	e7b3      	b.n	8015ece <_strtoul_l.constprop.0+0x3e>
 8015f66:	2c30      	cmp	r4, #48	; 0x30
 8015f68:	d0a9      	beq.n	8015ebe <_strtoul_l.constprop.0+0x2e>
 8015f6a:	230a      	movs	r3, #10
 8015f6c:	e7af      	b.n	8015ece <_strtoul_l.constprop.0+0x3e>
 8015f6e:	bf00      	nop
 8015f70:	08018966 	.word	0x08018966

08015f74 <_strtoul_r>:
 8015f74:	f7ff bf8c 	b.w	8015e90 <_strtoul_l.constprop.0>

08015f78 <strtoul>:
 8015f78:	4613      	mov	r3, r2
 8015f7a:	460a      	mov	r2, r1
 8015f7c:	4601      	mov	r1, r0
 8015f7e:	4802      	ldr	r0, [pc, #8]	; (8015f88 <strtoul+0x10>)
 8015f80:	6800      	ldr	r0, [r0, #0]
 8015f82:	f7ff bf85 	b.w	8015e90 <_strtoul_l.constprop.0>
 8015f86:	bf00      	nop
 8015f88:	20000020 	.word	0x20000020

08015f8c <__swbuf_r>:
 8015f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f8e:	460e      	mov	r6, r1
 8015f90:	4614      	mov	r4, r2
 8015f92:	4605      	mov	r5, r0
 8015f94:	b118      	cbz	r0, 8015f9e <__swbuf_r+0x12>
 8015f96:	6983      	ldr	r3, [r0, #24]
 8015f98:	b90b      	cbnz	r3, 8015f9e <__swbuf_r+0x12>
 8015f9a:	f000 fa07 	bl	80163ac <__sinit>
 8015f9e:	4b21      	ldr	r3, [pc, #132]	; (8016024 <__swbuf_r+0x98>)
 8015fa0:	429c      	cmp	r4, r3
 8015fa2:	d12b      	bne.n	8015ffc <__swbuf_r+0x70>
 8015fa4:	686c      	ldr	r4, [r5, #4]
 8015fa6:	69a3      	ldr	r3, [r4, #24]
 8015fa8:	60a3      	str	r3, [r4, #8]
 8015faa:	89a3      	ldrh	r3, [r4, #12]
 8015fac:	071a      	lsls	r2, r3, #28
 8015fae:	d52f      	bpl.n	8016010 <__swbuf_r+0x84>
 8015fb0:	6923      	ldr	r3, [r4, #16]
 8015fb2:	b36b      	cbz	r3, 8016010 <__swbuf_r+0x84>
 8015fb4:	6923      	ldr	r3, [r4, #16]
 8015fb6:	6820      	ldr	r0, [r4, #0]
 8015fb8:	1ac0      	subs	r0, r0, r3
 8015fba:	6963      	ldr	r3, [r4, #20]
 8015fbc:	b2f6      	uxtb	r6, r6
 8015fbe:	4283      	cmp	r3, r0
 8015fc0:	4637      	mov	r7, r6
 8015fc2:	dc04      	bgt.n	8015fce <__swbuf_r+0x42>
 8015fc4:	4621      	mov	r1, r4
 8015fc6:	4628      	mov	r0, r5
 8015fc8:	f000 f95c 	bl	8016284 <_fflush_r>
 8015fcc:	bb30      	cbnz	r0, 801601c <__swbuf_r+0x90>
 8015fce:	68a3      	ldr	r3, [r4, #8]
 8015fd0:	3b01      	subs	r3, #1
 8015fd2:	60a3      	str	r3, [r4, #8]
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	1c5a      	adds	r2, r3, #1
 8015fd8:	6022      	str	r2, [r4, #0]
 8015fda:	701e      	strb	r6, [r3, #0]
 8015fdc:	6963      	ldr	r3, [r4, #20]
 8015fde:	3001      	adds	r0, #1
 8015fe0:	4283      	cmp	r3, r0
 8015fe2:	d004      	beq.n	8015fee <__swbuf_r+0x62>
 8015fe4:	89a3      	ldrh	r3, [r4, #12]
 8015fe6:	07db      	lsls	r3, r3, #31
 8015fe8:	d506      	bpl.n	8015ff8 <__swbuf_r+0x6c>
 8015fea:	2e0a      	cmp	r6, #10
 8015fec:	d104      	bne.n	8015ff8 <__swbuf_r+0x6c>
 8015fee:	4621      	mov	r1, r4
 8015ff0:	4628      	mov	r0, r5
 8015ff2:	f000 f947 	bl	8016284 <_fflush_r>
 8015ff6:	b988      	cbnz	r0, 801601c <__swbuf_r+0x90>
 8015ff8:	4638      	mov	r0, r7
 8015ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ffc:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <__swbuf_r+0x9c>)
 8015ffe:	429c      	cmp	r4, r3
 8016000:	d101      	bne.n	8016006 <__swbuf_r+0x7a>
 8016002:	68ac      	ldr	r4, [r5, #8]
 8016004:	e7cf      	b.n	8015fa6 <__swbuf_r+0x1a>
 8016006:	4b09      	ldr	r3, [pc, #36]	; (801602c <__swbuf_r+0xa0>)
 8016008:	429c      	cmp	r4, r3
 801600a:	bf08      	it	eq
 801600c:	68ec      	ldreq	r4, [r5, #12]
 801600e:	e7ca      	b.n	8015fa6 <__swbuf_r+0x1a>
 8016010:	4621      	mov	r1, r4
 8016012:	4628      	mov	r0, r5
 8016014:	f000 f81e 	bl	8016054 <__swsetup_r>
 8016018:	2800      	cmp	r0, #0
 801601a:	d0cb      	beq.n	8015fb4 <__swbuf_r+0x28>
 801601c:	f04f 37ff 	mov.w	r7, #4294967295
 8016020:	e7ea      	b.n	8015ff8 <__swbuf_r+0x6c>
 8016022:	bf00      	nop
 8016024:	08018a88 	.word	0x08018a88
 8016028:	08018aa8 	.word	0x08018aa8
 801602c:	08018a68 	.word	0x08018a68

08016030 <_write_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4d07      	ldr	r5, [pc, #28]	; (8016050 <_write_r+0x20>)
 8016034:	4604      	mov	r4, r0
 8016036:	4608      	mov	r0, r1
 8016038:	4611      	mov	r1, r2
 801603a:	2200      	movs	r2, #0
 801603c:	602a      	str	r2, [r5, #0]
 801603e:	461a      	mov	r2, r3
 8016040:	f7f4 fc69 	bl	800a916 <_write>
 8016044:	1c43      	adds	r3, r0, #1
 8016046:	d102      	bne.n	801604e <_write_r+0x1e>
 8016048:	682b      	ldr	r3, [r5, #0]
 801604a:	b103      	cbz	r3, 801604e <_write_r+0x1e>
 801604c:	6023      	str	r3, [r4, #0]
 801604e:	bd38      	pop	{r3, r4, r5, pc}
 8016050:	2000a7b4 	.word	0x2000a7b4

08016054 <__swsetup_r>:
 8016054:	4b32      	ldr	r3, [pc, #200]	; (8016120 <__swsetup_r+0xcc>)
 8016056:	b570      	push	{r4, r5, r6, lr}
 8016058:	681d      	ldr	r5, [r3, #0]
 801605a:	4606      	mov	r6, r0
 801605c:	460c      	mov	r4, r1
 801605e:	b125      	cbz	r5, 801606a <__swsetup_r+0x16>
 8016060:	69ab      	ldr	r3, [r5, #24]
 8016062:	b913      	cbnz	r3, 801606a <__swsetup_r+0x16>
 8016064:	4628      	mov	r0, r5
 8016066:	f000 f9a1 	bl	80163ac <__sinit>
 801606a:	4b2e      	ldr	r3, [pc, #184]	; (8016124 <__swsetup_r+0xd0>)
 801606c:	429c      	cmp	r4, r3
 801606e:	d10f      	bne.n	8016090 <__swsetup_r+0x3c>
 8016070:	686c      	ldr	r4, [r5, #4]
 8016072:	89a3      	ldrh	r3, [r4, #12]
 8016074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016078:	0719      	lsls	r1, r3, #28
 801607a:	d42c      	bmi.n	80160d6 <__swsetup_r+0x82>
 801607c:	06dd      	lsls	r5, r3, #27
 801607e:	d411      	bmi.n	80160a4 <__swsetup_r+0x50>
 8016080:	2309      	movs	r3, #9
 8016082:	6033      	str	r3, [r6, #0]
 8016084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016088:	81a3      	strh	r3, [r4, #12]
 801608a:	f04f 30ff 	mov.w	r0, #4294967295
 801608e:	e03e      	b.n	801610e <__swsetup_r+0xba>
 8016090:	4b25      	ldr	r3, [pc, #148]	; (8016128 <__swsetup_r+0xd4>)
 8016092:	429c      	cmp	r4, r3
 8016094:	d101      	bne.n	801609a <__swsetup_r+0x46>
 8016096:	68ac      	ldr	r4, [r5, #8]
 8016098:	e7eb      	b.n	8016072 <__swsetup_r+0x1e>
 801609a:	4b24      	ldr	r3, [pc, #144]	; (801612c <__swsetup_r+0xd8>)
 801609c:	429c      	cmp	r4, r3
 801609e:	bf08      	it	eq
 80160a0:	68ec      	ldreq	r4, [r5, #12]
 80160a2:	e7e6      	b.n	8016072 <__swsetup_r+0x1e>
 80160a4:	0758      	lsls	r0, r3, #29
 80160a6:	d512      	bpl.n	80160ce <__swsetup_r+0x7a>
 80160a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160aa:	b141      	cbz	r1, 80160be <__swsetup_r+0x6a>
 80160ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160b0:	4299      	cmp	r1, r3
 80160b2:	d002      	beq.n	80160ba <__swsetup_r+0x66>
 80160b4:	4630      	mov	r0, r6
 80160b6:	f7fd f851 	bl	801315c <_free_r>
 80160ba:	2300      	movs	r3, #0
 80160bc:	6363      	str	r3, [r4, #52]	; 0x34
 80160be:	89a3      	ldrh	r3, [r4, #12]
 80160c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80160c4:	81a3      	strh	r3, [r4, #12]
 80160c6:	2300      	movs	r3, #0
 80160c8:	6063      	str	r3, [r4, #4]
 80160ca:	6923      	ldr	r3, [r4, #16]
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	89a3      	ldrh	r3, [r4, #12]
 80160d0:	f043 0308 	orr.w	r3, r3, #8
 80160d4:	81a3      	strh	r3, [r4, #12]
 80160d6:	6923      	ldr	r3, [r4, #16]
 80160d8:	b94b      	cbnz	r3, 80160ee <__swsetup_r+0x9a>
 80160da:	89a3      	ldrh	r3, [r4, #12]
 80160dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160e4:	d003      	beq.n	80160ee <__swsetup_r+0x9a>
 80160e6:	4621      	mov	r1, r4
 80160e8:	4630      	mov	r0, r6
 80160ea:	f000 fa35 	bl	8016558 <__smakebuf_r>
 80160ee:	89a0      	ldrh	r0, [r4, #12]
 80160f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160f4:	f010 0301 	ands.w	r3, r0, #1
 80160f8:	d00a      	beq.n	8016110 <__swsetup_r+0xbc>
 80160fa:	2300      	movs	r3, #0
 80160fc:	60a3      	str	r3, [r4, #8]
 80160fe:	6963      	ldr	r3, [r4, #20]
 8016100:	425b      	negs	r3, r3
 8016102:	61a3      	str	r3, [r4, #24]
 8016104:	6923      	ldr	r3, [r4, #16]
 8016106:	b943      	cbnz	r3, 801611a <__swsetup_r+0xc6>
 8016108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801610c:	d1ba      	bne.n	8016084 <__swsetup_r+0x30>
 801610e:	bd70      	pop	{r4, r5, r6, pc}
 8016110:	0781      	lsls	r1, r0, #30
 8016112:	bf58      	it	pl
 8016114:	6963      	ldrpl	r3, [r4, #20]
 8016116:	60a3      	str	r3, [r4, #8]
 8016118:	e7f4      	b.n	8016104 <__swsetup_r+0xb0>
 801611a:	2000      	movs	r0, #0
 801611c:	e7f7      	b.n	801610e <__swsetup_r+0xba>
 801611e:	bf00      	nop
 8016120:	20000020 	.word	0x20000020
 8016124:	08018a88 	.word	0x08018a88
 8016128:	08018aa8 	.word	0x08018aa8
 801612c:	08018a68 	.word	0x08018a68

08016130 <abort>:
 8016130:	b508      	push	{r3, lr}
 8016132:	2006      	movs	r0, #6
 8016134:	f000 fe42 	bl	8016dbc <raise>
 8016138:	2001      	movs	r0, #1
 801613a:	f7f4 fbc5 	bl	800a8c8 <_exit>
	...

08016140 <_close_r>:
 8016140:	b538      	push	{r3, r4, r5, lr}
 8016142:	4d06      	ldr	r5, [pc, #24]	; (801615c <_close_r+0x1c>)
 8016144:	2300      	movs	r3, #0
 8016146:	4604      	mov	r4, r0
 8016148:	4608      	mov	r0, r1
 801614a:	602b      	str	r3, [r5, #0]
 801614c:	f7f4 fbff 	bl	800a94e <_close>
 8016150:	1c43      	adds	r3, r0, #1
 8016152:	d102      	bne.n	801615a <_close_r+0x1a>
 8016154:	682b      	ldr	r3, [r5, #0]
 8016156:	b103      	cbz	r3, 801615a <_close_r+0x1a>
 8016158:	6023      	str	r3, [r4, #0]
 801615a:	bd38      	pop	{r3, r4, r5, pc}
 801615c:	2000a7b4 	.word	0x2000a7b4

08016160 <__env_lock>:
 8016160:	4801      	ldr	r0, [pc, #4]	; (8016168 <__env_lock+0x8>)
 8016162:	f7fe bfa7 	b.w	80150b4 <__retarget_lock_acquire_recursive>
 8016166:	bf00      	nop
 8016168:	2000a7ac 	.word	0x2000a7ac

0801616c <__env_unlock>:
 801616c:	4801      	ldr	r0, [pc, #4]	; (8016174 <__env_unlock+0x8>)
 801616e:	f7fe bfa3 	b.w	80150b8 <__retarget_lock_release_recursive>
 8016172:	bf00      	nop
 8016174:	2000a7ac 	.word	0x2000a7ac

08016178 <__sflush_r>:
 8016178:	898a      	ldrh	r2, [r1, #12]
 801617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801617e:	4605      	mov	r5, r0
 8016180:	0710      	lsls	r0, r2, #28
 8016182:	460c      	mov	r4, r1
 8016184:	d458      	bmi.n	8016238 <__sflush_r+0xc0>
 8016186:	684b      	ldr	r3, [r1, #4]
 8016188:	2b00      	cmp	r3, #0
 801618a:	dc05      	bgt.n	8016198 <__sflush_r+0x20>
 801618c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801618e:	2b00      	cmp	r3, #0
 8016190:	dc02      	bgt.n	8016198 <__sflush_r+0x20>
 8016192:	2000      	movs	r0, #0
 8016194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801619a:	2e00      	cmp	r6, #0
 801619c:	d0f9      	beq.n	8016192 <__sflush_r+0x1a>
 801619e:	2300      	movs	r3, #0
 80161a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80161a4:	682f      	ldr	r7, [r5, #0]
 80161a6:	602b      	str	r3, [r5, #0]
 80161a8:	d032      	beq.n	8016210 <__sflush_r+0x98>
 80161aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80161ac:	89a3      	ldrh	r3, [r4, #12]
 80161ae:	075a      	lsls	r2, r3, #29
 80161b0:	d505      	bpl.n	80161be <__sflush_r+0x46>
 80161b2:	6863      	ldr	r3, [r4, #4]
 80161b4:	1ac0      	subs	r0, r0, r3
 80161b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161b8:	b10b      	cbz	r3, 80161be <__sflush_r+0x46>
 80161ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161bc:	1ac0      	subs	r0, r0, r3
 80161be:	2300      	movs	r3, #0
 80161c0:	4602      	mov	r2, r0
 80161c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161c4:	6a21      	ldr	r1, [r4, #32]
 80161c6:	4628      	mov	r0, r5
 80161c8:	47b0      	blx	r6
 80161ca:	1c43      	adds	r3, r0, #1
 80161cc:	89a3      	ldrh	r3, [r4, #12]
 80161ce:	d106      	bne.n	80161de <__sflush_r+0x66>
 80161d0:	6829      	ldr	r1, [r5, #0]
 80161d2:	291d      	cmp	r1, #29
 80161d4:	d82c      	bhi.n	8016230 <__sflush_r+0xb8>
 80161d6:	4a2a      	ldr	r2, [pc, #168]	; (8016280 <__sflush_r+0x108>)
 80161d8:	40ca      	lsrs	r2, r1
 80161da:	07d6      	lsls	r6, r2, #31
 80161dc:	d528      	bpl.n	8016230 <__sflush_r+0xb8>
 80161de:	2200      	movs	r2, #0
 80161e0:	6062      	str	r2, [r4, #4]
 80161e2:	04d9      	lsls	r1, r3, #19
 80161e4:	6922      	ldr	r2, [r4, #16]
 80161e6:	6022      	str	r2, [r4, #0]
 80161e8:	d504      	bpl.n	80161f4 <__sflush_r+0x7c>
 80161ea:	1c42      	adds	r2, r0, #1
 80161ec:	d101      	bne.n	80161f2 <__sflush_r+0x7a>
 80161ee:	682b      	ldr	r3, [r5, #0]
 80161f0:	b903      	cbnz	r3, 80161f4 <__sflush_r+0x7c>
 80161f2:	6560      	str	r0, [r4, #84]	; 0x54
 80161f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161f6:	602f      	str	r7, [r5, #0]
 80161f8:	2900      	cmp	r1, #0
 80161fa:	d0ca      	beq.n	8016192 <__sflush_r+0x1a>
 80161fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016200:	4299      	cmp	r1, r3
 8016202:	d002      	beq.n	801620a <__sflush_r+0x92>
 8016204:	4628      	mov	r0, r5
 8016206:	f7fc ffa9 	bl	801315c <_free_r>
 801620a:	2000      	movs	r0, #0
 801620c:	6360      	str	r0, [r4, #52]	; 0x34
 801620e:	e7c1      	b.n	8016194 <__sflush_r+0x1c>
 8016210:	6a21      	ldr	r1, [r4, #32]
 8016212:	2301      	movs	r3, #1
 8016214:	4628      	mov	r0, r5
 8016216:	47b0      	blx	r6
 8016218:	1c41      	adds	r1, r0, #1
 801621a:	d1c7      	bne.n	80161ac <__sflush_r+0x34>
 801621c:	682b      	ldr	r3, [r5, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d0c4      	beq.n	80161ac <__sflush_r+0x34>
 8016222:	2b1d      	cmp	r3, #29
 8016224:	d001      	beq.n	801622a <__sflush_r+0xb2>
 8016226:	2b16      	cmp	r3, #22
 8016228:	d101      	bne.n	801622e <__sflush_r+0xb6>
 801622a:	602f      	str	r7, [r5, #0]
 801622c:	e7b1      	b.n	8016192 <__sflush_r+0x1a>
 801622e:	89a3      	ldrh	r3, [r4, #12]
 8016230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016234:	81a3      	strh	r3, [r4, #12]
 8016236:	e7ad      	b.n	8016194 <__sflush_r+0x1c>
 8016238:	690f      	ldr	r7, [r1, #16]
 801623a:	2f00      	cmp	r7, #0
 801623c:	d0a9      	beq.n	8016192 <__sflush_r+0x1a>
 801623e:	0793      	lsls	r3, r2, #30
 8016240:	680e      	ldr	r6, [r1, #0]
 8016242:	bf08      	it	eq
 8016244:	694b      	ldreq	r3, [r1, #20]
 8016246:	600f      	str	r7, [r1, #0]
 8016248:	bf18      	it	ne
 801624a:	2300      	movne	r3, #0
 801624c:	eba6 0807 	sub.w	r8, r6, r7
 8016250:	608b      	str	r3, [r1, #8]
 8016252:	f1b8 0f00 	cmp.w	r8, #0
 8016256:	dd9c      	ble.n	8016192 <__sflush_r+0x1a>
 8016258:	6a21      	ldr	r1, [r4, #32]
 801625a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801625c:	4643      	mov	r3, r8
 801625e:	463a      	mov	r2, r7
 8016260:	4628      	mov	r0, r5
 8016262:	47b0      	blx	r6
 8016264:	2800      	cmp	r0, #0
 8016266:	dc06      	bgt.n	8016276 <__sflush_r+0xfe>
 8016268:	89a3      	ldrh	r3, [r4, #12]
 801626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801626e:	81a3      	strh	r3, [r4, #12]
 8016270:	f04f 30ff 	mov.w	r0, #4294967295
 8016274:	e78e      	b.n	8016194 <__sflush_r+0x1c>
 8016276:	4407      	add	r7, r0
 8016278:	eba8 0800 	sub.w	r8, r8, r0
 801627c:	e7e9      	b.n	8016252 <__sflush_r+0xda>
 801627e:	bf00      	nop
 8016280:	20400001 	.word	0x20400001

08016284 <_fflush_r>:
 8016284:	b538      	push	{r3, r4, r5, lr}
 8016286:	690b      	ldr	r3, [r1, #16]
 8016288:	4605      	mov	r5, r0
 801628a:	460c      	mov	r4, r1
 801628c:	b913      	cbnz	r3, 8016294 <_fflush_r+0x10>
 801628e:	2500      	movs	r5, #0
 8016290:	4628      	mov	r0, r5
 8016292:	bd38      	pop	{r3, r4, r5, pc}
 8016294:	b118      	cbz	r0, 801629e <_fflush_r+0x1a>
 8016296:	6983      	ldr	r3, [r0, #24]
 8016298:	b90b      	cbnz	r3, 801629e <_fflush_r+0x1a>
 801629a:	f000 f887 	bl	80163ac <__sinit>
 801629e:	4b14      	ldr	r3, [pc, #80]	; (80162f0 <_fflush_r+0x6c>)
 80162a0:	429c      	cmp	r4, r3
 80162a2:	d11b      	bne.n	80162dc <_fflush_r+0x58>
 80162a4:	686c      	ldr	r4, [r5, #4]
 80162a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d0ef      	beq.n	801628e <_fflush_r+0xa>
 80162ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80162b0:	07d0      	lsls	r0, r2, #31
 80162b2:	d404      	bmi.n	80162be <_fflush_r+0x3a>
 80162b4:	0599      	lsls	r1, r3, #22
 80162b6:	d402      	bmi.n	80162be <_fflush_r+0x3a>
 80162b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162ba:	f7fe fefb 	bl	80150b4 <__retarget_lock_acquire_recursive>
 80162be:	4628      	mov	r0, r5
 80162c0:	4621      	mov	r1, r4
 80162c2:	f7ff ff59 	bl	8016178 <__sflush_r>
 80162c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162c8:	07da      	lsls	r2, r3, #31
 80162ca:	4605      	mov	r5, r0
 80162cc:	d4e0      	bmi.n	8016290 <_fflush_r+0xc>
 80162ce:	89a3      	ldrh	r3, [r4, #12]
 80162d0:	059b      	lsls	r3, r3, #22
 80162d2:	d4dd      	bmi.n	8016290 <_fflush_r+0xc>
 80162d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162d6:	f7fe feef 	bl	80150b8 <__retarget_lock_release_recursive>
 80162da:	e7d9      	b.n	8016290 <_fflush_r+0xc>
 80162dc:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <_fflush_r+0x70>)
 80162de:	429c      	cmp	r4, r3
 80162e0:	d101      	bne.n	80162e6 <_fflush_r+0x62>
 80162e2:	68ac      	ldr	r4, [r5, #8]
 80162e4:	e7df      	b.n	80162a6 <_fflush_r+0x22>
 80162e6:	4b04      	ldr	r3, [pc, #16]	; (80162f8 <_fflush_r+0x74>)
 80162e8:	429c      	cmp	r4, r3
 80162ea:	bf08      	it	eq
 80162ec:	68ec      	ldreq	r4, [r5, #12]
 80162ee:	e7da      	b.n	80162a6 <_fflush_r+0x22>
 80162f0:	08018a88 	.word	0x08018a88
 80162f4:	08018aa8 	.word	0x08018aa8
 80162f8:	08018a68 	.word	0x08018a68

080162fc <std>:
 80162fc:	2300      	movs	r3, #0
 80162fe:	b510      	push	{r4, lr}
 8016300:	4604      	mov	r4, r0
 8016302:	e9c0 3300 	strd	r3, r3, [r0]
 8016306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801630a:	6083      	str	r3, [r0, #8]
 801630c:	8181      	strh	r1, [r0, #12]
 801630e:	6643      	str	r3, [r0, #100]	; 0x64
 8016310:	81c2      	strh	r2, [r0, #14]
 8016312:	6183      	str	r3, [r0, #24]
 8016314:	4619      	mov	r1, r3
 8016316:	2208      	movs	r2, #8
 8016318:	305c      	adds	r0, #92	; 0x5c
 801631a:	f7fc fca5 	bl	8012c68 <memset>
 801631e:	4b05      	ldr	r3, [pc, #20]	; (8016334 <std+0x38>)
 8016320:	6263      	str	r3, [r4, #36]	; 0x24
 8016322:	4b05      	ldr	r3, [pc, #20]	; (8016338 <std+0x3c>)
 8016324:	62a3      	str	r3, [r4, #40]	; 0x28
 8016326:	4b05      	ldr	r3, [pc, #20]	; (801633c <std+0x40>)
 8016328:	62e3      	str	r3, [r4, #44]	; 0x2c
 801632a:	4b05      	ldr	r3, [pc, #20]	; (8016340 <std+0x44>)
 801632c:	6224      	str	r4, [r4, #32]
 801632e:	6323      	str	r3, [r4, #48]	; 0x30
 8016330:	bd10      	pop	{r4, pc}
 8016332:	bf00      	nop
 8016334:	08015dcd 	.word	0x08015dcd
 8016338:	08015df3 	.word	0x08015df3
 801633c:	08015e2b 	.word	0x08015e2b
 8016340:	08015e4f 	.word	0x08015e4f

08016344 <_cleanup_r>:
 8016344:	4901      	ldr	r1, [pc, #4]	; (801634c <_cleanup_r+0x8>)
 8016346:	f000 b8af 	b.w	80164a8 <_fwalk_reent>
 801634a:	bf00      	nop
 801634c:	08016285 	.word	0x08016285

08016350 <__sfmoreglue>:
 8016350:	b570      	push	{r4, r5, r6, lr}
 8016352:	2268      	movs	r2, #104	; 0x68
 8016354:	1e4d      	subs	r5, r1, #1
 8016356:	4355      	muls	r5, r2
 8016358:	460e      	mov	r6, r1
 801635a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801635e:	f7fc ff69 	bl	8013234 <_malloc_r>
 8016362:	4604      	mov	r4, r0
 8016364:	b140      	cbz	r0, 8016378 <__sfmoreglue+0x28>
 8016366:	2100      	movs	r1, #0
 8016368:	e9c0 1600 	strd	r1, r6, [r0]
 801636c:	300c      	adds	r0, #12
 801636e:	60a0      	str	r0, [r4, #8]
 8016370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016374:	f7fc fc78 	bl	8012c68 <memset>
 8016378:	4620      	mov	r0, r4
 801637a:	bd70      	pop	{r4, r5, r6, pc}

0801637c <__sfp_lock_acquire>:
 801637c:	4801      	ldr	r0, [pc, #4]	; (8016384 <__sfp_lock_acquire+0x8>)
 801637e:	f7fe be99 	b.w	80150b4 <__retarget_lock_acquire_recursive>
 8016382:	bf00      	nop
 8016384:	2000a7ae 	.word	0x2000a7ae

08016388 <__sfp_lock_release>:
 8016388:	4801      	ldr	r0, [pc, #4]	; (8016390 <__sfp_lock_release+0x8>)
 801638a:	f7fe be95 	b.w	80150b8 <__retarget_lock_release_recursive>
 801638e:	bf00      	nop
 8016390:	2000a7ae 	.word	0x2000a7ae

08016394 <__sinit_lock_acquire>:
 8016394:	4801      	ldr	r0, [pc, #4]	; (801639c <__sinit_lock_acquire+0x8>)
 8016396:	f7fe be8d 	b.w	80150b4 <__retarget_lock_acquire_recursive>
 801639a:	bf00      	nop
 801639c:	2000a7af 	.word	0x2000a7af

080163a0 <__sinit_lock_release>:
 80163a0:	4801      	ldr	r0, [pc, #4]	; (80163a8 <__sinit_lock_release+0x8>)
 80163a2:	f7fe be89 	b.w	80150b8 <__retarget_lock_release_recursive>
 80163a6:	bf00      	nop
 80163a8:	2000a7af 	.word	0x2000a7af

080163ac <__sinit>:
 80163ac:	b510      	push	{r4, lr}
 80163ae:	4604      	mov	r4, r0
 80163b0:	f7ff fff0 	bl	8016394 <__sinit_lock_acquire>
 80163b4:	69a3      	ldr	r3, [r4, #24]
 80163b6:	b11b      	cbz	r3, 80163c0 <__sinit+0x14>
 80163b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163bc:	f7ff bff0 	b.w	80163a0 <__sinit_lock_release>
 80163c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80163c4:	6523      	str	r3, [r4, #80]	; 0x50
 80163c6:	4b13      	ldr	r3, [pc, #76]	; (8016414 <__sinit+0x68>)
 80163c8:	4a13      	ldr	r2, [pc, #76]	; (8016418 <__sinit+0x6c>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80163ce:	42a3      	cmp	r3, r4
 80163d0:	bf04      	itt	eq
 80163d2:	2301      	moveq	r3, #1
 80163d4:	61a3      	streq	r3, [r4, #24]
 80163d6:	4620      	mov	r0, r4
 80163d8:	f000 f820 	bl	801641c <__sfp>
 80163dc:	6060      	str	r0, [r4, #4]
 80163de:	4620      	mov	r0, r4
 80163e0:	f000 f81c 	bl	801641c <__sfp>
 80163e4:	60a0      	str	r0, [r4, #8]
 80163e6:	4620      	mov	r0, r4
 80163e8:	f000 f818 	bl	801641c <__sfp>
 80163ec:	2200      	movs	r2, #0
 80163ee:	60e0      	str	r0, [r4, #12]
 80163f0:	2104      	movs	r1, #4
 80163f2:	6860      	ldr	r0, [r4, #4]
 80163f4:	f7ff ff82 	bl	80162fc <std>
 80163f8:	68a0      	ldr	r0, [r4, #8]
 80163fa:	2201      	movs	r2, #1
 80163fc:	2109      	movs	r1, #9
 80163fe:	f7ff ff7d 	bl	80162fc <std>
 8016402:	68e0      	ldr	r0, [r4, #12]
 8016404:	2202      	movs	r2, #2
 8016406:	2112      	movs	r1, #18
 8016408:	f7ff ff78 	bl	80162fc <std>
 801640c:	2301      	movs	r3, #1
 801640e:	61a3      	str	r3, [r4, #24]
 8016410:	e7d2      	b.n	80163b8 <__sinit+0xc>
 8016412:	bf00      	nop
 8016414:	08018544 	.word	0x08018544
 8016418:	08016345 	.word	0x08016345

0801641c <__sfp>:
 801641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641e:	4607      	mov	r7, r0
 8016420:	f7ff ffac 	bl	801637c <__sfp_lock_acquire>
 8016424:	4b1e      	ldr	r3, [pc, #120]	; (80164a0 <__sfp+0x84>)
 8016426:	681e      	ldr	r6, [r3, #0]
 8016428:	69b3      	ldr	r3, [r6, #24]
 801642a:	b913      	cbnz	r3, 8016432 <__sfp+0x16>
 801642c:	4630      	mov	r0, r6
 801642e:	f7ff ffbd 	bl	80163ac <__sinit>
 8016432:	3648      	adds	r6, #72	; 0x48
 8016434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016438:	3b01      	subs	r3, #1
 801643a:	d503      	bpl.n	8016444 <__sfp+0x28>
 801643c:	6833      	ldr	r3, [r6, #0]
 801643e:	b30b      	cbz	r3, 8016484 <__sfp+0x68>
 8016440:	6836      	ldr	r6, [r6, #0]
 8016442:	e7f7      	b.n	8016434 <__sfp+0x18>
 8016444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016448:	b9d5      	cbnz	r5, 8016480 <__sfp+0x64>
 801644a:	4b16      	ldr	r3, [pc, #88]	; (80164a4 <__sfp+0x88>)
 801644c:	60e3      	str	r3, [r4, #12]
 801644e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016452:	6665      	str	r5, [r4, #100]	; 0x64
 8016454:	f7fe fe2c 	bl	80150b0 <__retarget_lock_init_recursive>
 8016458:	f7ff ff96 	bl	8016388 <__sfp_lock_release>
 801645c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016464:	6025      	str	r5, [r4, #0]
 8016466:	61a5      	str	r5, [r4, #24]
 8016468:	2208      	movs	r2, #8
 801646a:	4629      	mov	r1, r5
 801646c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016470:	f7fc fbfa 	bl	8012c68 <memset>
 8016474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801647c:	4620      	mov	r0, r4
 801647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016480:	3468      	adds	r4, #104	; 0x68
 8016482:	e7d9      	b.n	8016438 <__sfp+0x1c>
 8016484:	2104      	movs	r1, #4
 8016486:	4638      	mov	r0, r7
 8016488:	f7ff ff62 	bl	8016350 <__sfmoreglue>
 801648c:	4604      	mov	r4, r0
 801648e:	6030      	str	r0, [r6, #0]
 8016490:	2800      	cmp	r0, #0
 8016492:	d1d5      	bne.n	8016440 <__sfp+0x24>
 8016494:	f7ff ff78 	bl	8016388 <__sfp_lock_release>
 8016498:	230c      	movs	r3, #12
 801649a:	603b      	str	r3, [r7, #0]
 801649c:	e7ee      	b.n	801647c <__sfp+0x60>
 801649e:	bf00      	nop
 80164a0:	08018544 	.word	0x08018544
 80164a4:	ffff0001 	.word	0xffff0001

080164a8 <_fwalk_reent>:
 80164a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164ac:	4606      	mov	r6, r0
 80164ae:	4688      	mov	r8, r1
 80164b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80164b4:	2700      	movs	r7, #0
 80164b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80164ba:	f1b9 0901 	subs.w	r9, r9, #1
 80164be:	d505      	bpl.n	80164cc <_fwalk_reent+0x24>
 80164c0:	6824      	ldr	r4, [r4, #0]
 80164c2:	2c00      	cmp	r4, #0
 80164c4:	d1f7      	bne.n	80164b6 <_fwalk_reent+0xe>
 80164c6:	4638      	mov	r0, r7
 80164c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164cc:	89ab      	ldrh	r3, [r5, #12]
 80164ce:	2b01      	cmp	r3, #1
 80164d0:	d907      	bls.n	80164e2 <_fwalk_reent+0x3a>
 80164d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164d6:	3301      	adds	r3, #1
 80164d8:	d003      	beq.n	80164e2 <_fwalk_reent+0x3a>
 80164da:	4629      	mov	r1, r5
 80164dc:	4630      	mov	r0, r6
 80164de:	47c0      	blx	r8
 80164e0:	4307      	orrs	r7, r0
 80164e2:	3568      	adds	r5, #104	; 0x68
 80164e4:	e7e9      	b.n	80164ba <_fwalk_reent+0x12>
	...

080164e8 <_lseek_r>:
 80164e8:	b538      	push	{r3, r4, r5, lr}
 80164ea:	4d07      	ldr	r5, [pc, #28]	; (8016508 <_lseek_r+0x20>)
 80164ec:	4604      	mov	r4, r0
 80164ee:	4608      	mov	r0, r1
 80164f0:	4611      	mov	r1, r2
 80164f2:	2200      	movs	r2, #0
 80164f4:	602a      	str	r2, [r5, #0]
 80164f6:	461a      	mov	r2, r3
 80164f8:	f7f4 fa50 	bl	800a99c <_lseek>
 80164fc:	1c43      	adds	r3, r0, #1
 80164fe:	d102      	bne.n	8016506 <_lseek_r+0x1e>
 8016500:	682b      	ldr	r3, [r5, #0]
 8016502:	b103      	cbz	r3, 8016506 <_lseek_r+0x1e>
 8016504:	6023      	str	r3, [r4, #0]
 8016506:	bd38      	pop	{r3, r4, r5, pc}
 8016508:	2000a7b4 	.word	0x2000a7b4

0801650c <__swhatbuf_r>:
 801650c:	b570      	push	{r4, r5, r6, lr}
 801650e:	460e      	mov	r6, r1
 8016510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016514:	2900      	cmp	r1, #0
 8016516:	b096      	sub	sp, #88	; 0x58
 8016518:	4614      	mov	r4, r2
 801651a:	461d      	mov	r5, r3
 801651c:	da08      	bge.n	8016530 <__swhatbuf_r+0x24>
 801651e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016522:	2200      	movs	r2, #0
 8016524:	602a      	str	r2, [r5, #0]
 8016526:	061a      	lsls	r2, r3, #24
 8016528:	d410      	bmi.n	801654c <__swhatbuf_r+0x40>
 801652a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801652e:	e00e      	b.n	801654e <__swhatbuf_r+0x42>
 8016530:	466a      	mov	r2, sp
 8016532:	f000 fd2b 	bl	8016f8c <_fstat_r>
 8016536:	2800      	cmp	r0, #0
 8016538:	dbf1      	blt.n	801651e <__swhatbuf_r+0x12>
 801653a:	9a01      	ldr	r2, [sp, #4]
 801653c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016540:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016544:	425a      	negs	r2, r3
 8016546:	415a      	adcs	r2, r3
 8016548:	602a      	str	r2, [r5, #0]
 801654a:	e7ee      	b.n	801652a <__swhatbuf_r+0x1e>
 801654c:	2340      	movs	r3, #64	; 0x40
 801654e:	2000      	movs	r0, #0
 8016550:	6023      	str	r3, [r4, #0]
 8016552:	b016      	add	sp, #88	; 0x58
 8016554:	bd70      	pop	{r4, r5, r6, pc}
	...

08016558 <__smakebuf_r>:
 8016558:	898b      	ldrh	r3, [r1, #12]
 801655a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801655c:	079d      	lsls	r5, r3, #30
 801655e:	4606      	mov	r6, r0
 8016560:	460c      	mov	r4, r1
 8016562:	d507      	bpl.n	8016574 <__smakebuf_r+0x1c>
 8016564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016568:	6023      	str	r3, [r4, #0]
 801656a:	6123      	str	r3, [r4, #16]
 801656c:	2301      	movs	r3, #1
 801656e:	6163      	str	r3, [r4, #20]
 8016570:	b002      	add	sp, #8
 8016572:	bd70      	pop	{r4, r5, r6, pc}
 8016574:	ab01      	add	r3, sp, #4
 8016576:	466a      	mov	r2, sp
 8016578:	f7ff ffc8 	bl	801650c <__swhatbuf_r>
 801657c:	9900      	ldr	r1, [sp, #0]
 801657e:	4605      	mov	r5, r0
 8016580:	4630      	mov	r0, r6
 8016582:	f7fc fe57 	bl	8013234 <_malloc_r>
 8016586:	b948      	cbnz	r0, 801659c <__smakebuf_r+0x44>
 8016588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801658c:	059a      	lsls	r2, r3, #22
 801658e:	d4ef      	bmi.n	8016570 <__smakebuf_r+0x18>
 8016590:	f023 0303 	bic.w	r3, r3, #3
 8016594:	f043 0302 	orr.w	r3, r3, #2
 8016598:	81a3      	strh	r3, [r4, #12]
 801659a:	e7e3      	b.n	8016564 <__smakebuf_r+0xc>
 801659c:	4b0d      	ldr	r3, [pc, #52]	; (80165d4 <__smakebuf_r+0x7c>)
 801659e:	62b3      	str	r3, [r6, #40]	; 0x28
 80165a0:	89a3      	ldrh	r3, [r4, #12]
 80165a2:	6020      	str	r0, [r4, #0]
 80165a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165a8:	81a3      	strh	r3, [r4, #12]
 80165aa:	9b00      	ldr	r3, [sp, #0]
 80165ac:	6163      	str	r3, [r4, #20]
 80165ae:	9b01      	ldr	r3, [sp, #4]
 80165b0:	6120      	str	r0, [r4, #16]
 80165b2:	b15b      	cbz	r3, 80165cc <__smakebuf_r+0x74>
 80165b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165b8:	4630      	mov	r0, r6
 80165ba:	f000 fcf9 	bl	8016fb0 <_isatty_r>
 80165be:	b128      	cbz	r0, 80165cc <__smakebuf_r+0x74>
 80165c0:	89a3      	ldrh	r3, [r4, #12]
 80165c2:	f023 0303 	bic.w	r3, r3, #3
 80165c6:	f043 0301 	orr.w	r3, r3, #1
 80165ca:	81a3      	strh	r3, [r4, #12]
 80165cc:	89a0      	ldrh	r0, [r4, #12]
 80165ce:	4305      	orrs	r5, r0
 80165d0:	81a5      	strh	r5, [r4, #12]
 80165d2:	e7cd      	b.n	8016570 <__smakebuf_r+0x18>
 80165d4:	08016345 	.word	0x08016345

080165d8 <__ascii_mbtowc>:
 80165d8:	b082      	sub	sp, #8
 80165da:	b901      	cbnz	r1, 80165de <__ascii_mbtowc+0x6>
 80165dc:	a901      	add	r1, sp, #4
 80165de:	b142      	cbz	r2, 80165f2 <__ascii_mbtowc+0x1a>
 80165e0:	b14b      	cbz	r3, 80165f6 <__ascii_mbtowc+0x1e>
 80165e2:	7813      	ldrb	r3, [r2, #0]
 80165e4:	600b      	str	r3, [r1, #0]
 80165e6:	7812      	ldrb	r2, [r2, #0]
 80165e8:	1e10      	subs	r0, r2, #0
 80165ea:	bf18      	it	ne
 80165ec:	2001      	movne	r0, #1
 80165ee:	b002      	add	sp, #8
 80165f0:	4770      	bx	lr
 80165f2:	4610      	mov	r0, r2
 80165f4:	e7fb      	b.n	80165ee <__ascii_mbtowc+0x16>
 80165f6:	f06f 0001 	mvn.w	r0, #1
 80165fa:	e7f8      	b.n	80165ee <__ascii_mbtowc+0x16>

080165fc <memmove>:
 80165fc:	4288      	cmp	r0, r1
 80165fe:	b510      	push	{r4, lr}
 8016600:	eb01 0402 	add.w	r4, r1, r2
 8016604:	d902      	bls.n	801660c <memmove+0x10>
 8016606:	4284      	cmp	r4, r0
 8016608:	4623      	mov	r3, r4
 801660a:	d807      	bhi.n	801661c <memmove+0x20>
 801660c:	1e43      	subs	r3, r0, #1
 801660e:	42a1      	cmp	r1, r4
 8016610:	d008      	beq.n	8016624 <memmove+0x28>
 8016612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016616:	f803 2f01 	strb.w	r2, [r3, #1]!
 801661a:	e7f8      	b.n	801660e <memmove+0x12>
 801661c:	4402      	add	r2, r0
 801661e:	4601      	mov	r1, r0
 8016620:	428a      	cmp	r2, r1
 8016622:	d100      	bne.n	8016626 <memmove+0x2a>
 8016624:	bd10      	pop	{r4, pc}
 8016626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801662a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801662e:	e7f7      	b.n	8016620 <memmove+0x24>

08016630 <_realloc_r>:
 8016630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016634:	4680      	mov	r8, r0
 8016636:	4614      	mov	r4, r2
 8016638:	460e      	mov	r6, r1
 801663a:	b921      	cbnz	r1, 8016646 <_realloc_r+0x16>
 801663c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016640:	4611      	mov	r1, r2
 8016642:	f7fc bdf7 	b.w	8013234 <_malloc_r>
 8016646:	b92a      	cbnz	r2, 8016654 <_realloc_r+0x24>
 8016648:	f7fc fd88 	bl	801315c <_free_r>
 801664c:	4625      	mov	r5, r4
 801664e:	4628      	mov	r0, r5
 8016650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016654:	f000 fcbc 	bl	8016fd0 <_malloc_usable_size_r>
 8016658:	4284      	cmp	r4, r0
 801665a:	4607      	mov	r7, r0
 801665c:	d802      	bhi.n	8016664 <_realloc_r+0x34>
 801665e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016662:	d812      	bhi.n	801668a <_realloc_r+0x5a>
 8016664:	4621      	mov	r1, r4
 8016666:	4640      	mov	r0, r8
 8016668:	f7fc fde4 	bl	8013234 <_malloc_r>
 801666c:	4605      	mov	r5, r0
 801666e:	2800      	cmp	r0, #0
 8016670:	d0ed      	beq.n	801664e <_realloc_r+0x1e>
 8016672:	42bc      	cmp	r4, r7
 8016674:	4622      	mov	r2, r4
 8016676:	4631      	mov	r1, r6
 8016678:	bf28      	it	cs
 801667a:	463a      	movcs	r2, r7
 801667c:	f7fc fae6 	bl	8012c4c <memcpy>
 8016680:	4631      	mov	r1, r6
 8016682:	4640      	mov	r0, r8
 8016684:	f7fc fd6a 	bl	801315c <_free_r>
 8016688:	e7e1      	b.n	801664e <_realloc_r+0x1e>
 801668a:	4635      	mov	r5, r6
 801668c:	e7df      	b.n	801664e <_realloc_r+0x1e>

0801668e <_sungetc_r>:
 801668e:	b538      	push	{r3, r4, r5, lr}
 8016690:	1c4b      	adds	r3, r1, #1
 8016692:	4614      	mov	r4, r2
 8016694:	d103      	bne.n	801669e <_sungetc_r+0x10>
 8016696:	f04f 35ff 	mov.w	r5, #4294967295
 801669a:	4628      	mov	r0, r5
 801669c:	bd38      	pop	{r3, r4, r5, pc}
 801669e:	8993      	ldrh	r3, [r2, #12]
 80166a0:	f023 0320 	bic.w	r3, r3, #32
 80166a4:	8193      	strh	r3, [r2, #12]
 80166a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80166a8:	6852      	ldr	r2, [r2, #4]
 80166aa:	b2cd      	uxtb	r5, r1
 80166ac:	b18b      	cbz	r3, 80166d2 <_sungetc_r+0x44>
 80166ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80166b0:	4293      	cmp	r3, r2
 80166b2:	dd08      	ble.n	80166c6 <_sungetc_r+0x38>
 80166b4:	6823      	ldr	r3, [r4, #0]
 80166b6:	1e5a      	subs	r2, r3, #1
 80166b8:	6022      	str	r2, [r4, #0]
 80166ba:	f803 5c01 	strb.w	r5, [r3, #-1]
 80166be:	6863      	ldr	r3, [r4, #4]
 80166c0:	3301      	adds	r3, #1
 80166c2:	6063      	str	r3, [r4, #4]
 80166c4:	e7e9      	b.n	801669a <_sungetc_r+0xc>
 80166c6:	4621      	mov	r1, r4
 80166c8:	f000 fc18 	bl	8016efc <__submore>
 80166cc:	2800      	cmp	r0, #0
 80166ce:	d0f1      	beq.n	80166b4 <_sungetc_r+0x26>
 80166d0:	e7e1      	b.n	8016696 <_sungetc_r+0x8>
 80166d2:	6921      	ldr	r1, [r4, #16]
 80166d4:	6823      	ldr	r3, [r4, #0]
 80166d6:	b151      	cbz	r1, 80166ee <_sungetc_r+0x60>
 80166d8:	4299      	cmp	r1, r3
 80166da:	d208      	bcs.n	80166ee <_sungetc_r+0x60>
 80166dc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80166e0:	42a9      	cmp	r1, r5
 80166e2:	d104      	bne.n	80166ee <_sungetc_r+0x60>
 80166e4:	3b01      	subs	r3, #1
 80166e6:	3201      	adds	r2, #1
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	6062      	str	r2, [r4, #4]
 80166ec:	e7d5      	b.n	801669a <_sungetc_r+0xc>
 80166ee:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80166f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166f6:	6363      	str	r3, [r4, #52]	; 0x34
 80166f8:	2303      	movs	r3, #3
 80166fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80166fc:	4623      	mov	r3, r4
 80166fe:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016702:	6023      	str	r3, [r4, #0]
 8016704:	2301      	movs	r3, #1
 8016706:	e7dc      	b.n	80166c2 <_sungetc_r+0x34>

08016708 <__ssrefill_r>:
 8016708:	b510      	push	{r4, lr}
 801670a:	460c      	mov	r4, r1
 801670c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801670e:	b169      	cbz	r1, 801672c <__ssrefill_r+0x24>
 8016710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016714:	4299      	cmp	r1, r3
 8016716:	d001      	beq.n	801671c <__ssrefill_r+0x14>
 8016718:	f7fc fd20 	bl	801315c <_free_r>
 801671c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801671e:	6063      	str	r3, [r4, #4]
 8016720:	2000      	movs	r0, #0
 8016722:	6360      	str	r0, [r4, #52]	; 0x34
 8016724:	b113      	cbz	r3, 801672c <__ssrefill_r+0x24>
 8016726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016728:	6023      	str	r3, [r4, #0]
 801672a:	bd10      	pop	{r4, pc}
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	6023      	str	r3, [r4, #0]
 8016730:	2300      	movs	r3, #0
 8016732:	6063      	str	r3, [r4, #4]
 8016734:	89a3      	ldrh	r3, [r4, #12]
 8016736:	f043 0320 	orr.w	r3, r3, #32
 801673a:	81a3      	strh	r3, [r4, #12]
 801673c:	f04f 30ff 	mov.w	r0, #4294967295
 8016740:	e7f3      	b.n	801672a <__ssrefill_r+0x22>
	...

08016744 <__ssvfiscanf_r>:
 8016744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016748:	460c      	mov	r4, r1
 801674a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801674e:	2100      	movs	r1, #0
 8016750:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016754:	49a6      	ldr	r1, [pc, #664]	; (80169f0 <__ssvfiscanf_r+0x2ac>)
 8016756:	91a0      	str	r1, [sp, #640]	; 0x280
 8016758:	f10d 0804 	add.w	r8, sp, #4
 801675c:	49a5      	ldr	r1, [pc, #660]	; (80169f4 <__ssvfiscanf_r+0x2b0>)
 801675e:	4fa6      	ldr	r7, [pc, #664]	; (80169f8 <__ssvfiscanf_r+0x2b4>)
 8016760:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80169fc <__ssvfiscanf_r+0x2b8>
 8016764:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016768:	4606      	mov	r6, r0
 801676a:	91a1      	str	r1, [sp, #644]	; 0x284
 801676c:	9300      	str	r3, [sp, #0]
 801676e:	7813      	ldrb	r3, [r2, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	f000 815a 	beq.w	8016a2a <__ssvfiscanf_r+0x2e6>
 8016776:	5dd9      	ldrb	r1, [r3, r7]
 8016778:	f011 0108 	ands.w	r1, r1, #8
 801677c:	f102 0501 	add.w	r5, r2, #1
 8016780:	d019      	beq.n	80167b6 <__ssvfiscanf_r+0x72>
 8016782:	6863      	ldr	r3, [r4, #4]
 8016784:	2b00      	cmp	r3, #0
 8016786:	dd0f      	ble.n	80167a8 <__ssvfiscanf_r+0x64>
 8016788:	6823      	ldr	r3, [r4, #0]
 801678a:	781a      	ldrb	r2, [r3, #0]
 801678c:	5cba      	ldrb	r2, [r7, r2]
 801678e:	0712      	lsls	r2, r2, #28
 8016790:	d401      	bmi.n	8016796 <__ssvfiscanf_r+0x52>
 8016792:	462a      	mov	r2, r5
 8016794:	e7eb      	b.n	801676e <__ssvfiscanf_r+0x2a>
 8016796:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016798:	3201      	adds	r2, #1
 801679a:	9245      	str	r2, [sp, #276]	; 0x114
 801679c:	6862      	ldr	r2, [r4, #4]
 801679e:	3301      	adds	r3, #1
 80167a0:	3a01      	subs	r2, #1
 80167a2:	6062      	str	r2, [r4, #4]
 80167a4:	6023      	str	r3, [r4, #0]
 80167a6:	e7ec      	b.n	8016782 <__ssvfiscanf_r+0x3e>
 80167a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80167aa:	4621      	mov	r1, r4
 80167ac:	4630      	mov	r0, r6
 80167ae:	4798      	blx	r3
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d0e9      	beq.n	8016788 <__ssvfiscanf_r+0x44>
 80167b4:	e7ed      	b.n	8016792 <__ssvfiscanf_r+0x4e>
 80167b6:	2b25      	cmp	r3, #37	; 0x25
 80167b8:	d012      	beq.n	80167e0 <__ssvfiscanf_r+0x9c>
 80167ba:	469a      	mov	sl, r3
 80167bc:	6863      	ldr	r3, [r4, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f340 8091 	ble.w	80168e6 <__ssvfiscanf_r+0x1a2>
 80167c4:	6822      	ldr	r2, [r4, #0]
 80167c6:	7813      	ldrb	r3, [r2, #0]
 80167c8:	4553      	cmp	r3, sl
 80167ca:	f040 812e 	bne.w	8016a2a <__ssvfiscanf_r+0x2e6>
 80167ce:	6863      	ldr	r3, [r4, #4]
 80167d0:	3b01      	subs	r3, #1
 80167d2:	6063      	str	r3, [r4, #4]
 80167d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80167d6:	3201      	adds	r2, #1
 80167d8:	3301      	adds	r3, #1
 80167da:	6022      	str	r2, [r4, #0]
 80167dc:	9345      	str	r3, [sp, #276]	; 0x114
 80167de:	e7d8      	b.n	8016792 <__ssvfiscanf_r+0x4e>
 80167e0:	9141      	str	r1, [sp, #260]	; 0x104
 80167e2:	9143      	str	r1, [sp, #268]	; 0x10c
 80167e4:	7853      	ldrb	r3, [r2, #1]
 80167e6:	2b2a      	cmp	r3, #42	; 0x2a
 80167e8:	bf02      	ittt	eq
 80167ea:	2310      	moveq	r3, #16
 80167ec:	1c95      	addeq	r5, r2, #2
 80167ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80167f0:	220a      	movs	r2, #10
 80167f2:	46aa      	mov	sl, r5
 80167f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80167f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80167fc:	2b09      	cmp	r3, #9
 80167fe:	d91d      	bls.n	801683c <__ssvfiscanf_r+0xf8>
 8016800:	487e      	ldr	r0, [pc, #504]	; (80169fc <__ssvfiscanf_r+0x2b8>)
 8016802:	2203      	movs	r2, #3
 8016804:	f7e9 fcc4 	bl	8000190 <memchr>
 8016808:	b140      	cbz	r0, 801681c <__ssvfiscanf_r+0xd8>
 801680a:	2301      	movs	r3, #1
 801680c:	eba0 0009 	sub.w	r0, r0, r9
 8016810:	fa03 f000 	lsl.w	r0, r3, r0
 8016814:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016816:	4318      	orrs	r0, r3
 8016818:	9041      	str	r0, [sp, #260]	; 0x104
 801681a:	4655      	mov	r5, sl
 801681c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016820:	2b78      	cmp	r3, #120	; 0x78
 8016822:	d806      	bhi.n	8016832 <__ssvfiscanf_r+0xee>
 8016824:	2b57      	cmp	r3, #87	; 0x57
 8016826:	d810      	bhi.n	801684a <__ssvfiscanf_r+0x106>
 8016828:	2b25      	cmp	r3, #37	; 0x25
 801682a:	d0c6      	beq.n	80167ba <__ssvfiscanf_r+0x76>
 801682c:	d856      	bhi.n	80168dc <__ssvfiscanf_r+0x198>
 801682e:	2b00      	cmp	r3, #0
 8016830:	d064      	beq.n	80168fc <__ssvfiscanf_r+0x1b8>
 8016832:	2303      	movs	r3, #3
 8016834:	9347      	str	r3, [sp, #284]	; 0x11c
 8016836:	230a      	movs	r3, #10
 8016838:	9342      	str	r3, [sp, #264]	; 0x108
 801683a:	e071      	b.n	8016920 <__ssvfiscanf_r+0x1dc>
 801683c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801683e:	fb02 1103 	mla	r1, r2, r3, r1
 8016842:	3930      	subs	r1, #48	; 0x30
 8016844:	9143      	str	r1, [sp, #268]	; 0x10c
 8016846:	4655      	mov	r5, sl
 8016848:	e7d3      	b.n	80167f2 <__ssvfiscanf_r+0xae>
 801684a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801684e:	2a20      	cmp	r2, #32
 8016850:	d8ef      	bhi.n	8016832 <__ssvfiscanf_r+0xee>
 8016852:	a101      	add	r1, pc, #4	; (adr r1, 8016858 <__ssvfiscanf_r+0x114>)
 8016854:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016858:	0801690b 	.word	0x0801690b
 801685c:	08016833 	.word	0x08016833
 8016860:	08016833 	.word	0x08016833
 8016864:	08016969 	.word	0x08016969
 8016868:	08016833 	.word	0x08016833
 801686c:	08016833 	.word	0x08016833
 8016870:	08016833 	.word	0x08016833
 8016874:	08016833 	.word	0x08016833
 8016878:	08016833 	.word	0x08016833
 801687c:	08016833 	.word	0x08016833
 8016880:	08016833 	.word	0x08016833
 8016884:	0801697f 	.word	0x0801697f
 8016888:	08016955 	.word	0x08016955
 801688c:	080168e3 	.word	0x080168e3
 8016890:	080168e3 	.word	0x080168e3
 8016894:	080168e3 	.word	0x080168e3
 8016898:	08016833 	.word	0x08016833
 801689c:	08016959 	.word	0x08016959
 80168a0:	08016833 	.word	0x08016833
 80168a4:	08016833 	.word	0x08016833
 80168a8:	08016833 	.word	0x08016833
 80168ac:	08016833 	.word	0x08016833
 80168b0:	0801698f 	.word	0x0801698f
 80168b4:	08016961 	.word	0x08016961
 80168b8:	08016903 	.word	0x08016903
 80168bc:	08016833 	.word	0x08016833
 80168c0:	08016833 	.word	0x08016833
 80168c4:	0801698b 	.word	0x0801698b
 80168c8:	08016833 	.word	0x08016833
 80168cc:	08016955 	.word	0x08016955
 80168d0:	08016833 	.word	0x08016833
 80168d4:	08016833 	.word	0x08016833
 80168d8:	0801690b 	.word	0x0801690b
 80168dc:	3b45      	subs	r3, #69	; 0x45
 80168de:	2b02      	cmp	r3, #2
 80168e0:	d8a7      	bhi.n	8016832 <__ssvfiscanf_r+0xee>
 80168e2:	2305      	movs	r3, #5
 80168e4:	e01b      	b.n	801691e <__ssvfiscanf_r+0x1da>
 80168e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80168e8:	4621      	mov	r1, r4
 80168ea:	4630      	mov	r0, r6
 80168ec:	4798      	blx	r3
 80168ee:	2800      	cmp	r0, #0
 80168f0:	f43f af68 	beq.w	80167c4 <__ssvfiscanf_r+0x80>
 80168f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80168f6:	2800      	cmp	r0, #0
 80168f8:	f040 808d 	bne.w	8016a16 <__ssvfiscanf_r+0x2d2>
 80168fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016900:	e08f      	b.n	8016a22 <__ssvfiscanf_r+0x2de>
 8016902:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016904:	f042 0220 	orr.w	r2, r2, #32
 8016908:	9241      	str	r2, [sp, #260]	; 0x104
 801690a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801690c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016910:	9241      	str	r2, [sp, #260]	; 0x104
 8016912:	2210      	movs	r2, #16
 8016914:	2b6f      	cmp	r3, #111	; 0x6f
 8016916:	9242      	str	r2, [sp, #264]	; 0x108
 8016918:	bf34      	ite	cc
 801691a:	2303      	movcc	r3, #3
 801691c:	2304      	movcs	r3, #4
 801691e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016920:	6863      	ldr	r3, [r4, #4]
 8016922:	2b00      	cmp	r3, #0
 8016924:	dd42      	ble.n	80169ac <__ssvfiscanf_r+0x268>
 8016926:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016928:	0659      	lsls	r1, r3, #25
 801692a:	d404      	bmi.n	8016936 <__ssvfiscanf_r+0x1f2>
 801692c:	6823      	ldr	r3, [r4, #0]
 801692e:	781a      	ldrb	r2, [r3, #0]
 8016930:	5cba      	ldrb	r2, [r7, r2]
 8016932:	0712      	lsls	r2, r2, #28
 8016934:	d441      	bmi.n	80169ba <__ssvfiscanf_r+0x276>
 8016936:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016938:	2b02      	cmp	r3, #2
 801693a:	dc50      	bgt.n	80169de <__ssvfiscanf_r+0x29a>
 801693c:	466b      	mov	r3, sp
 801693e:	4622      	mov	r2, r4
 8016940:	a941      	add	r1, sp, #260	; 0x104
 8016942:	4630      	mov	r0, r6
 8016944:	f000 f876 	bl	8016a34 <_scanf_chars>
 8016948:	2801      	cmp	r0, #1
 801694a:	d06e      	beq.n	8016a2a <__ssvfiscanf_r+0x2e6>
 801694c:	2802      	cmp	r0, #2
 801694e:	f47f af20 	bne.w	8016792 <__ssvfiscanf_r+0x4e>
 8016952:	e7cf      	b.n	80168f4 <__ssvfiscanf_r+0x1b0>
 8016954:	220a      	movs	r2, #10
 8016956:	e7dd      	b.n	8016914 <__ssvfiscanf_r+0x1d0>
 8016958:	2300      	movs	r3, #0
 801695a:	9342      	str	r3, [sp, #264]	; 0x108
 801695c:	2303      	movs	r3, #3
 801695e:	e7de      	b.n	801691e <__ssvfiscanf_r+0x1da>
 8016960:	2308      	movs	r3, #8
 8016962:	9342      	str	r3, [sp, #264]	; 0x108
 8016964:	2304      	movs	r3, #4
 8016966:	e7da      	b.n	801691e <__ssvfiscanf_r+0x1da>
 8016968:	4629      	mov	r1, r5
 801696a:	4640      	mov	r0, r8
 801696c:	f000 f9c6 	bl	8016cfc <__sccl>
 8016970:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016976:	9341      	str	r3, [sp, #260]	; 0x104
 8016978:	4605      	mov	r5, r0
 801697a:	2301      	movs	r3, #1
 801697c:	e7cf      	b.n	801691e <__ssvfiscanf_r+0x1da>
 801697e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016984:	9341      	str	r3, [sp, #260]	; 0x104
 8016986:	2300      	movs	r3, #0
 8016988:	e7c9      	b.n	801691e <__ssvfiscanf_r+0x1da>
 801698a:	2302      	movs	r3, #2
 801698c:	e7c7      	b.n	801691e <__ssvfiscanf_r+0x1da>
 801698e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016990:	06c3      	lsls	r3, r0, #27
 8016992:	f53f aefe 	bmi.w	8016792 <__ssvfiscanf_r+0x4e>
 8016996:	9b00      	ldr	r3, [sp, #0]
 8016998:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801699a:	1d19      	adds	r1, r3, #4
 801699c:	9100      	str	r1, [sp, #0]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	f010 0f01 	tst.w	r0, #1
 80169a4:	bf14      	ite	ne
 80169a6:	801a      	strhne	r2, [r3, #0]
 80169a8:	601a      	streq	r2, [r3, #0]
 80169aa:	e6f2      	b.n	8016792 <__ssvfiscanf_r+0x4e>
 80169ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80169ae:	4621      	mov	r1, r4
 80169b0:	4630      	mov	r0, r6
 80169b2:	4798      	blx	r3
 80169b4:	2800      	cmp	r0, #0
 80169b6:	d0b6      	beq.n	8016926 <__ssvfiscanf_r+0x1e2>
 80169b8:	e79c      	b.n	80168f4 <__ssvfiscanf_r+0x1b0>
 80169ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80169bc:	3201      	adds	r2, #1
 80169be:	9245      	str	r2, [sp, #276]	; 0x114
 80169c0:	6862      	ldr	r2, [r4, #4]
 80169c2:	3a01      	subs	r2, #1
 80169c4:	2a00      	cmp	r2, #0
 80169c6:	6062      	str	r2, [r4, #4]
 80169c8:	dd02      	ble.n	80169d0 <__ssvfiscanf_r+0x28c>
 80169ca:	3301      	adds	r3, #1
 80169cc:	6023      	str	r3, [r4, #0]
 80169ce:	e7ad      	b.n	801692c <__ssvfiscanf_r+0x1e8>
 80169d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80169d2:	4621      	mov	r1, r4
 80169d4:	4630      	mov	r0, r6
 80169d6:	4798      	blx	r3
 80169d8:	2800      	cmp	r0, #0
 80169da:	d0a7      	beq.n	801692c <__ssvfiscanf_r+0x1e8>
 80169dc:	e78a      	b.n	80168f4 <__ssvfiscanf_r+0x1b0>
 80169de:	2b04      	cmp	r3, #4
 80169e0:	dc0e      	bgt.n	8016a00 <__ssvfiscanf_r+0x2bc>
 80169e2:	466b      	mov	r3, sp
 80169e4:	4622      	mov	r2, r4
 80169e6:	a941      	add	r1, sp, #260	; 0x104
 80169e8:	4630      	mov	r0, r6
 80169ea:	f000 f87d 	bl	8016ae8 <_scanf_i>
 80169ee:	e7ab      	b.n	8016948 <__ssvfiscanf_r+0x204>
 80169f0:	0801668f 	.word	0x0801668f
 80169f4:	08016709 	.word	0x08016709
 80169f8:	08018966 	.word	0x08018966
 80169fc:	0801895a 	.word	0x0801895a
 8016a00:	4b0b      	ldr	r3, [pc, #44]	; (8016a30 <__ssvfiscanf_r+0x2ec>)
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	f43f aec5 	beq.w	8016792 <__ssvfiscanf_r+0x4e>
 8016a08:	466b      	mov	r3, sp
 8016a0a:	4622      	mov	r2, r4
 8016a0c:	a941      	add	r1, sp, #260	; 0x104
 8016a0e:	4630      	mov	r0, r6
 8016a10:	f3af 8000 	nop.w
 8016a14:	e798      	b.n	8016948 <__ssvfiscanf_r+0x204>
 8016a16:	89a3      	ldrh	r3, [r4, #12]
 8016a18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016a1c:	bf18      	it	ne
 8016a1e:	f04f 30ff 	movne.w	r0, #4294967295
 8016a22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016a2c:	e7f9      	b.n	8016a22 <__ssvfiscanf_r+0x2de>
 8016a2e:	bf00      	nop
 8016a30:	00000000 	.word	0x00000000

08016a34 <_scanf_chars>:
 8016a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a38:	4615      	mov	r5, r2
 8016a3a:	688a      	ldr	r2, [r1, #8]
 8016a3c:	4680      	mov	r8, r0
 8016a3e:	460c      	mov	r4, r1
 8016a40:	b932      	cbnz	r2, 8016a50 <_scanf_chars+0x1c>
 8016a42:	698a      	ldr	r2, [r1, #24]
 8016a44:	2a00      	cmp	r2, #0
 8016a46:	bf0c      	ite	eq
 8016a48:	2201      	moveq	r2, #1
 8016a4a:	f04f 32ff 	movne.w	r2, #4294967295
 8016a4e:	608a      	str	r2, [r1, #8]
 8016a50:	6822      	ldr	r2, [r4, #0]
 8016a52:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016ae4 <_scanf_chars+0xb0>
 8016a56:	06d1      	lsls	r1, r2, #27
 8016a58:	bf5f      	itttt	pl
 8016a5a:	681a      	ldrpl	r2, [r3, #0]
 8016a5c:	1d11      	addpl	r1, r2, #4
 8016a5e:	6019      	strpl	r1, [r3, #0]
 8016a60:	6816      	ldrpl	r6, [r2, #0]
 8016a62:	2700      	movs	r7, #0
 8016a64:	69a0      	ldr	r0, [r4, #24]
 8016a66:	b188      	cbz	r0, 8016a8c <_scanf_chars+0x58>
 8016a68:	2801      	cmp	r0, #1
 8016a6a:	d107      	bne.n	8016a7c <_scanf_chars+0x48>
 8016a6c:	682a      	ldr	r2, [r5, #0]
 8016a6e:	7811      	ldrb	r1, [r2, #0]
 8016a70:	6962      	ldr	r2, [r4, #20]
 8016a72:	5c52      	ldrb	r2, [r2, r1]
 8016a74:	b952      	cbnz	r2, 8016a8c <_scanf_chars+0x58>
 8016a76:	2f00      	cmp	r7, #0
 8016a78:	d031      	beq.n	8016ade <_scanf_chars+0xaa>
 8016a7a:	e022      	b.n	8016ac2 <_scanf_chars+0x8e>
 8016a7c:	2802      	cmp	r0, #2
 8016a7e:	d120      	bne.n	8016ac2 <_scanf_chars+0x8e>
 8016a80:	682b      	ldr	r3, [r5, #0]
 8016a82:	781b      	ldrb	r3, [r3, #0]
 8016a84:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016a88:	071b      	lsls	r3, r3, #28
 8016a8a:	d41a      	bmi.n	8016ac2 <_scanf_chars+0x8e>
 8016a8c:	6823      	ldr	r3, [r4, #0]
 8016a8e:	06da      	lsls	r2, r3, #27
 8016a90:	bf5e      	ittt	pl
 8016a92:	682b      	ldrpl	r3, [r5, #0]
 8016a94:	781b      	ldrbpl	r3, [r3, #0]
 8016a96:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016a9a:	682a      	ldr	r2, [r5, #0]
 8016a9c:	686b      	ldr	r3, [r5, #4]
 8016a9e:	3201      	adds	r2, #1
 8016aa0:	602a      	str	r2, [r5, #0]
 8016aa2:	68a2      	ldr	r2, [r4, #8]
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	3a01      	subs	r2, #1
 8016aa8:	606b      	str	r3, [r5, #4]
 8016aaa:	3701      	adds	r7, #1
 8016aac:	60a2      	str	r2, [r4, #8]
 8016aae:	b142      	cbz	r2, 8016ac2 <_scanf_chars+0x8e>
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	dcd7      	bgt.n	8016a64 <_scanf_chars+0x30>
 8016ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016ab8:	4629      	mov	r1, r5
 8016aba:	4640      	mov	r0, r8
 8016abc:	4798      	blx	r3
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	d0d0      	beq.n	8016a64 <_scanf_chars+0x30>
 8016ac2:	6823      	ldr	r3, [r4, #0]
 8016ac4:	f013 0310 	ands.w	r3, r3, #16
 8016ac8:	d105      	bne.n	8016ad6 <_scanf_chars+0xa2>
 8016aca:	68e2      	ldr	r2, [r4, #12]
 8016acc:	3201      	adds	r2, #1
 8016ace:	60e2      	str	r2, [r4, #12]
 8016ad0:	69a2      	ldr	r2, [r4, #24]
 8016ad2:	b102      	cbz	r2, 8016ad6 <_scanf_chars+0xa2>
 8016ad4:	7033      	strb	r3, [r6, #0]
 8016ad6:	6923      	ldr	r3, [r4, #16]
 8016ad8:	443b      	add	r3, r7
 8016ada:	6123      	str	r3, [r4, #16]
 8016adc:	2000      	movs	r0, #0
 8016ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ae2:	bf00      	nop
 8016ae4:	08018966 	.word	0x08018966

08016ae8 <_scanf_i>:
 8016ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aec:	4698      	mov	r8, r3
 8016aee:	4b76      	ldr	r3, [pc, #472]	; (8016cc8 <_scanf_i+0x1e0>)
 8016af0:	460c      	mov	r4, r1
 8016af2:	4682      	mov	sl, r0
 8016af4:	4616      	mov	r6, r2
 8016af6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016afa:	b087      	sub	sp, #28
 8016afc:	ab03      	add	r3, sp, #12
 8016afe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016b02:	4b72      	ldr	r3, [pc, #456]	; (8016ccc <_scanf_i+0x1e4>)
 8016b04:	69a1      	ldr	r1, [r4, #24]
 8016b06:	4a72      	ldr	r2, [pc, #456]	; (8016cd0 <_scanf_i+0x1e8>)
 8016b08:	2903      	cmp	r1, #3
 8016b0a:	bf18      	it	ne
 8016b0c:	461a      	movne	r2, r3
 8016b0e:	68a3      	ldr	r3, [r4, #8]
 8016b10:	9201      	str	r2, [sp, #4]
 8016b12:	1e5a      	subs	r2, r3, #1
 8016b14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016b18:	bf88      	it	hi
 8016b1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016b1e:	4627      	mov	r7, r4
 8016b20:	bf82      	ittt	hi
 8016b22:	eb03 0905 	addhi.w	r9, r3, r5
 8016b26:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016b2a:	60a3      	strhi	r3, [r4, #8]
 8016b2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016b30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016b34:	bf98      	it	ls
 8016b36:	f04f 0900 	movls.w	r9, #0
 8016b3a:	6023      	str	r3, [r4, #0]
 8016b3c:	463d      	mov	r5, r7
 8016b3e:	f04f 0b00 	mov.w	fp, #0
 8016b42:	6831      	ldr	r1, [r6, #0]
 8016b44:	ab03      	add	r3, sp, #12
 8016b46:	7809      	ldrb	r1, [r1, #0]
 8016b48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016b4c:	2202      	movs	r2, #2
 8016b4e:	f7e9 fb1f 	bl	8000190 <memchr>
 8016b52:	b328      	cbz	r0, 8016ba0 <_scanf_i+0xb8>
 8016b54:	f1bb 0f01 	cmp.w	fp, #1
 8016b58:	d159      	bne.n	8016c0e <_scanf_i+0x126>
 8016b5a:	6862      	ldr	r2, [r4, #4]
 8016b5c:	b92a      	cbnz	r2, 8016b6a <_scanf_i+0x82>
 8016b5e:	6822      	ldr	r2, [r4, #0]
 8016b60:	2308      	movs	r3, #8
 8016b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b66:	6063      	str	r3, [r4, #4]
 8016b68:	6022      	str	r2, [r4, #0]
 8016b6a:	6822      	ldr	r2, [r4, #0]
 8016b6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016b70:	6022      	str	r2, [r4, #0]
 8016b72:	68a2      	ldr	r2, [r4, #8]
 8016b74:	1e51      	subs	r1, r2, #1
 8016b76:	60a1      	str	r1, [r4, #8]
 8016b78:	b192      	cbz	r2, 8016ba0 <_scanf_i+0xb8>
 8016b7a:	6832      	ldr	r2, [r6, #0]
 8016b7c:	1c51      	adds	r1, r2, #1
 8016b7e:	6031      	str	r1, [r6, #0]
 8016b80:	7812      	ldrb	r2, [r2, #0]
 8016b82:	f805 2b01 	strb.w	r2, [r5], #1
 8016b86:	6872      	ldr	r2, [r6, #4]
 8016b88:	3a01      	subs	r2, #1
 8016b8a:	2a00      	cmp	r2, #0
 8016b8c:	6072      	str	r2, [r6, #4]
 8016b8e:	dc07      	bgt.n	8016ba0 <_scanf_i+0xb8>
 8016b90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016b94:	4631      	mov	r1, r6
 8016b96:	4650      	mov	r0, sl
 8016b98:	4790      	blx	r2
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	f040 8085 	bne.w	8016caa <_scanf_i+0x1c2>
 8016ba0:	f10b 0b01 	add.w	fp, fp, #1
 8016ba4:	f1bb 0f03 	cmp.w	fp, #3
 8016ba8:	d1cb      	bne.n	8016b42 <_scanf_i+0x5a>
 8016baa:	6863      	ldr	r3, [r4, #4]
 8016bac:	b90b      	cbnz	r3, 8016bb2 <_scanf_i+0xca>
 8016bae:	230a      	movs	r3, #10
 8016bb0:	6063      	str	r3, [r4, #4]
 8016bb2:	6863      	ldr	r3, [r4, #4]
 8016bb4:	4947      	ldr	r1, [pc, #284]	; (8016cd4 <_scanf_i+0x1ec>)
 8016bb6:	6960      	ldr	r0, [r4, #20]
 8016bb8:	1ac9      	subs	r1, r1, r3
 8016bba:	f000 f89f 	bl	8016cfc <__sccl>
 8016bbe:	f04f 0b00 	mov.w	fp, #0
 8016bc2:	68a3      	ldr	r3, [r4, #8]
 8016bc4:	6822      	ldr	r2, [r4, #0]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d03d      	beq.n	8016c46 <_scanf_i+0x15e>
 8016bca:	6831      	ldr	r1, [r6, #0]
 8016bcc:	6960      	ldr	r0, [r4, #20]
 8016bce:	f891 c000 	ldrb.w	ip, [r1]
 8016bd2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d035      	beq.n	8016c46 <_scanf_i+0x15e>
 8016bda:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016bde:	d124      	bne.n	8016c2a <_scanf_i+0x142>
 8016be0:	0510      	lsls	r0, r2, #20
 8016be2:	d522      	bpl.n	8016c2a <_scanf_i+0x142>
 8016be4:	f10b 0b01 	add.w	fp, fp, #1
 8016be8:	f1b9 0f00 	cmp.w	r9, #0
 8016bec:	d003      	beq.n	8016bf6 <_scanf_i+0x10e>
 8016bee:	3301      	adds	r3, #1
 8016bf0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016bf4:	60a3      	str	r3, [r4, #8]
 8016bf6:	6873      	ldr	r3, [r6, #4]
 8016bf8:	3b01      	subs	r3, #1
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	6073      	str	r3, [r6, #4]
 8016bfe:	dd1b      	ble.n	8016c38 <_scanf_i+0x150>
 8016c00:	6833      	ldr	r3, [r6, #0]
 8016c02:	3301      	adds	r3, #1
 8016c04:	6033      	str	r3, [r6, #0]
 8016c06:	68a3      	ldr	r3, [r4, #8]
 8016c08:	3b01      	subs	r3, #1
 8016c0a:	60a3      	str	r3, [r4, #8]
 8016c0c:	e7d9      	b.n	8016bc2 <_scanf_i+0xda>
 8016c0e:	f1bb 0f02 	cmp.w	fp, #2
 8016c12:	d1ae      	bne.n	8016b72 <_scanf_i+0x8a>
 8016c14:	6822      	ldr	r2, [r4, #0]
 8016c16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016c1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016c1e:	d1bf      	bne.n	8016ba0 <_scanf_i+0xb8>
 8016c20:	2310      	movs	r3, #16
 8016c22:	6063      	str	r3, [r4, #4]
 8016c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016c28:	e7a2      	b.n	8016b70 <_scanf_i+0x88>
 8016c2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016c2e:	6022      	str	r2, [r4, #0]
 8016c30:	780b      	ldrb	r3, [r1, #0]
 8016c32:	f805 3b01 	strb.w	r3, [r5], #1
 8016c36:	e7de      	b.n	8016bf6 <_scanf_i+0x10e>
 8016c38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c3c:	4631      	mov	r1, r6
 8016c3e:	4650      	mov	r0, sl
 8016c40:	4798      	blx	r3
 8016c42:	2800      	cmp	r0, #0
 8016c44:	d0df      	beq.n	8016c06 <_scanf_i+0x11e>
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	05db      	lsls	r3, r3, #23
 8016c4a:	d50d      	bpl.n	8016c68 <_scanf_i+0x180>
 8016c4c:	42bd      	cmp	r5, r7
 8016c4e:	d909      	bls.n	8016c64 <_scanf_i+0x17c>
 8016c50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016c54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c58:	4632      	mov	r2, r6
 8016c5a:	4650      	mov	r0, sl
 8016c5c:	4798      	blx	r3
 8016c5e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016c62:	464d      	mov	r5, r9
 8016c64:	42bd      	cmp	r5, r7
 8016c66:	d02d      	beq.n	8016cc4 <_scanf_i+0x1dc>
 8016c68:	6822      	ldr	r2, [r4, #0]
 8016c6a:	f012 0210 	ands.w	r2, r2, #16
 8016c6e:	d113      	bne.n	8016c98 <_scanf_i+0x1b0>
 8016c70:	702a      	strb	r2, [r5, #0]
 8016c72:	6863      	ldr	r3, [r4, #4]
 8016c74:	9e01      	ldr	r6, [sp, #4]
 8016c76:	4639      	mov	r1, r7
 8016c78:	4650      	mov	r0, sl
 8016c7a:	47b0      	blx	r6
 8016c7c:	6821      	ldr	r1, [r4, #0]
 8016c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8016c82:	f011 0f20 	tst.w	r1, #32
 8016c86:	d013      	beq.n	8016cb0 <_scanf_i+0x1c8>
 8016c88:	1d1a      	adds	r2, r3, #4
 8016c8a:	f8c8 2000 	str.w	r2, [r8]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	6018      	str	r0, [r3, #0]
 8016c92:	68e3      	ldr	r3, [r4, #12]
 8016c94:	3301      	adds	r3, #1
 8016c96:	60e3      	str	r3, [r4, #12]
 8016c98:	1bed      	subs	r5, r5, r7
 8016c9a:	44ab      	add	fp, r5
 8016c9c:	6925      	ldr	r5, [r4, #16]
 8016c9e:	445d      	add	r5, fp
 8016ca0:	6125      	str	r5, [r4, #16]
 8016ca2:	2000      	movs	r0, #0
 8016ca4:	b007      	add	sp, #28
 8016ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016caa:	f04f 0b00 	mov.w	fp, #0
 8016cae:	e7ca      	b.n	8016c46 <_scanf_i+0x15e>
 8016cb0:	1d1a      	adds	r2, r3, #4
 8016cb2:	f8c8 2000 	str.w	r2, [r8]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	f011 0f01 	tst.w	r1, #1
 8016cbc:	bf14      	ite	ne
 8016cbe:	8018      	strhne	r0, [r3, #0]
 8016cc0:	6018      	streq	r0, [r3, #0]
 8016cc2:	e7e6      	b.n	8016c92 <_scanf_i+0x1aa>
 8016cc4:	2001      	movs	r0, #1
 8016cc6:	e7ed      	b.n	8016ca4 <_scanf_i+0x1bc>
 8016cc8:	08018470 	.word	0x08018470
 8016ccc:	08015f75 	.word	0x08015f75
 8016cd0:	08016ef9 	.word	0x08016ef9
 8016cd4:	08018aeb 	.word	0x08018aeb

08016cd8 <_read_r>:
 8016cd8:	b538      	push	{r3, r4, r5, lr}
 8016cda:	4d07      	ldr	r5, [pc, #28]	; (8016cf8 <_read_r+0x20>)
 8016cdc:	4604      	mov	r4, r0
 8016cde:	4608      	mov	r0, r1
 8016ce0:	4611      	mov	r1, r2
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	602a      	str	r2, [r5, #0]
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	f7f3 fdf8 	bl	800a8dc <_read>
 8016cec:	1c43      	adds	r3, r0, #1
 8016cee:	d102      	bne.n	8016cf6 <_read_r+0x1e>
 8016cf0:	682b      	ldr	r3, [r5, #0]
 8016cf2:	b103      	cbz	r3, 8016cf6 <_read_r+0x1e>
 8016cf4:	6023      	str	r3, [r4, #0]
 8016cf6:	bd38      	pop	{r3, r4, r5, pc}
 8016cf8:	2000a7b4 	.word	0x2000a7b4

08016cfc <__sccl>:
 8016cfc:	b570      	push	{r4, r5, r6, lr}
 8016cfe:	780b      	ldrb	r3, [r1, #0]
 8016d00:	4604      	mov	r4, r0
 8016d02:	2b5e      	cmp	r3, #94	; 0x5e
 8016d04:	bf0b      	itete	eq
 8016d06:	784b      	ldrbeq	r3, [r1, #1]
 8016d08:	1c48      	addne	r0, r1, #1
 8016d0a:	1c88      	addeq	r0, r1, #2
 8016d0c:	2200      	movne	r2, #0
 8016d0e:	bf08      	it	eq
 8016d10:	2201      	moveq	r2, #1
 8016d12:	1e61      	subs	r1, r4, #1
 8016d14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016d18:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016d1c:	42a9      	cmp	r1, r5
 8016d1e:	d1fb      	bne.n	8016d18 <__sccl+0x1c>
 8016d20:	b90b      	cbnz	r3, 8016d26 <__sccl+0x2a>
 8016d22:	3801      	subs	r0, #1
 8016d24:	bd70      	pop	{r4, r5, r6, pc}
 8016d26:	f082 0201 	eor.w	r2, r2, #1
 8016d2a:	54e2      	strb	r2, [r4, r3]
 8016d2c:	4605      	mov	r5, r0
 8016d2e:	4628      	mov	r0, r5
 8016d30:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016d34:	292d      	cmp	r1, #45	; 0x2d
 8016d36:	d006      	beq.n	8016d46 <__sccl+0x4a>
 8016d38:	295d      	cmp	r1, #93	; 0x5d
 8016d3a:	d0f3      	beq.n	8016d24 <__sccl+0x28>
 8016d3c:	b909      	cbnz	r1, 8016d42 <__sccl+0x46>
 8016d3e:	4628      	mov	r0, r5
 8016d40:	e7f0      	b.n	8016d24 <__sccl+0x28>
 8016d42:	460b      	mov	r3, r1
 8016d44:	e7f1      	b.n	8016d2a <__sccl+0x2e>
 8016d46:	786e      	ldrb	r6, [r5, #1]
 8016d48:	2e5d      	cmp	r6, #93	; 0x5d
 8016d4a:	d0fa      	beq.n	8016d42 <__sccl+0x46>
 8016d4c:	42b3      	cmp	r3, r6
 8016d4e:	dcf8      	bgt.n	8016d42 <__sccl+0x46>
 8016d50:	3502      	adds	r5, #2
 8016d52:	4619      	mov	r1, r3
 8016d54:	3101      	adds	r1, #1
 8016d56:	428e      	cmp	r6, r1
 8016d58:	5462      	strb	r2, [r4, r1]
 8016d5a:	dcfb      	bgt.n	8016d54 <__sccl+0x58>
 8016d5c:	1af1      	subs	r1, r6, r3
 8016d5e:	3901      	subs	r1, #1
 8016d60:	1c58      	adds	r0, r3, #1
 8016d62:	42b3      	cmp	r3, r6
 8016d64:	bfa8      	it	ge
 8016d66:	2100      	movge	r1, #0
 8016d68:	1843      	adds	r3, r0, r1
 8016d6a:	e7e0      	b.n	8016d2e <__sccl+0x32>

08016d6c <_raise_r>:
 8016d6c:	291f      	cmp	r1, #31
 8016d6e:	b538      	push	{r3, r4, r5, lr}
 8016d70:	4604      	mov	r4, r0
 8016d72:	460d      	mov	r5, r1
 8016d74:	d904      	bls.n	8016d80 <_raise_r+0x14>
 8016d76:	2316      	movs	r3, #22
 8016d78:	6003      	str	r3, [r0, #0]
 8016d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d7e:	bd38      	pop	{r3, r4, r5, pc}
 8016d80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016d82:	b112      	cbz	r2, 8016d8a <_raise_r+0x1e>
 8016d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d88:	b94b      	cbnz	r3, 8016d9e <_raise_r+0x32>
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f000 f830 	bl	8016df0 <_getpid_r>
 8016d90:	462a      	mov	r2, r5
 8016d92:	4601      	mov	r1, r0
 8016d94:	4620      	mov	r0, r4
 8016d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d9a:	f000 b817 	b.w	8016dcc <_kill_r>
 8016d9e:	2b01      	cmp	r3, #1
 8016da0:	d00a      	beq.n	8016db8 <_raise_r+0x4c>
 8016da2:	1c59      	adds	r1, r3, #1
 8016da4:	d103      	bne.n	8016dae <_raise_r+0x42>
 8016da6:	2316      	movs	r3, #22
 8016da8:	6003      	str	r3, [r0, #0]
 8016daa:	2001      	movs	r0, #1
 8016dac:	e7e7      	b.n	8016d7e <_raise_r+0x12>
 8016dae:	2400      	movs	r4, #0
 8016db0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016db4:	4628      	mov	r0, r5
 8016db6:	4798      	blx	r3
 8016db8:	2000      	movs	r0, #0
 8016dba:	e7e0      	b.n	8016d7e <_raise_r+0x12>

08016dbc <raise>:
 8016dbc:	4b02      	ldr	r3, [pc, #8]	; (8016dc8 <raise+0xc>)
 8016dbe:	4601      	mov	r1, r0
 8016dc0:	6818      	ldr	r0, [r3, #0]
 8016dc2:	f7ff bfd3 	b.w	8016d6c <_raise_r>
 8016dc6:	bf00      	nop
 8016dc8:	20000020 	.word	0x20000020

08016dcc <_kill_r>:
 8016dcc:	b538      	push	{r3, r4, r5, lr}
 8016dce:	4d07      	ldr	r5, [pc, #28]	; (8016dec <_kill_r+0x20>)
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	4608      	mov	r0, r1
 8016dd6:	4611      	mov	r1, r2
 8016dd8:	602b      	str	r3, [r5, #0]
 8016dda:	f7f3 fd65 	bl	800a8a8 <_kill>
 8016dde:	1c43      	adds	r3, r0, #1
 8016de0:	d102      	bne.n	8016de8 <_kill_r+0x1c>
 8016de2:	682b      	ldr	r3, [r5, #0]
 8016de4:	b103      	cbz	r3, 8016de8 <_kill_r+0x1c>
 8016de6:	6023      	str	r3, [r4, #0]
 8016de8:	bd38      	pop	{r3, r4, r5, pc}
 8016dea:	bf00      	nop
 8016dec:	2000a7b4 	.word	0x2000a7b4

08016df0 <_getpid_r>:
 8016df0:	f7f3 bd52 	b.w	800a898 <_getpid>

08016df4 <_strtol_l.constprop.0>:
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dfa:	d001      	beq.n	8016e00 <_strtol_l.constprop.0+0xc>
 8016dfc:	2b24      	cmp	r3, #36	; 0x24
 8016dfe:	d906      	bls.n	8016e0e <_strtol_l.constprop.0+0x1a>
 8016e00:	f7fb fdd8 	bl	80129b4 <__errno>
 8016e04:	2316      	movs	r3, #22
 8016e06:	6003      	str	r3, [r0, #0]
 8016e08:	2000      	movs	r0, #0
 8016e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016ef4 <_strtol_l.constprop.0+0x100>
 8016e12:	460d      	mov	r5, r1
 8016e14:	462e      	mov	r6, r5
 8016e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e1a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016e1e:	f017 0708 	ands.w	r7, r7, #8
 8016e22:	d1f7      	bne.n	8016e14 <_strtol_l.constprop.0+0x20>
 8016e24:	2c2d      	cmp	r4, #45	; 0x2d
 8016e26:	d132      	bne.n	8016e8e <_strtol_l.constprop.0+0x9a>
 8016e28:	782c      	ldrb	r4, [r5, #0]
 8016e2a:	2701      	movs	r7, #1
 8016e2c:	1cb5      	adds	r5, r6, #2
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d05b      	beq.n	8016eea <_strtol_l.constprop.0+0xf6>
 8016e32:	2b10      	cmp	r3, #16
 8016e34:	d109      	bne.n	8016e4a <_strtol_l.constprop.0+0x56>
 8016e36:	2c30      	cmp	r4, #48	; 0x30
 8016e38:	d107      	bne.n	8016e4a <_strtol_l.constprop.0+0x56>
 8016e3a:	782c      	ldrb	r4, [r5, #0]
 8016e3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e40:	2c58      	cmp	r4, #88	; 0x58
 8016e42:	d14d      	bne.n	8016ee0 <_strtol_l.constprop.0+0xec>
 8016e44:	786c      	ldrb	r4, [r5, #1]
 8016e46:	2310      	movs	r3, #16
 8016e48:	3502      	adds	r5, #2
 8016e4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016e4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e52:	f04f 0c00 	mov.w	ip, #0
 8016e56:	fbb8 f9f3 	udiv	r9, r8, r3
 8016e5a:	4666      	mov	r6, ip
 8016e5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8016e60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016e64:	f1be 0f09 	cmp.w	lr, #9
 8016e68:	d816      	bhi.n	8016e98 <_strtol_l.constprop.0+0xa4>
 8016e6a:	4674      	mov	r4, lr
 8016e6c:	42a3      	cmp	r3, r4
 8016e6e:	dd24      	ble.n	8016eba <_strtol_l.constprop.0+0xc6>
 8016e70:	f1bc 0f00 	cmp.w	ip, #0
 8016e74:	db1e      	blt.n	8016eb4 <_strtol_l.constprop.0+0xc0>
 8016e76:	45b1      	cmp	r9, r6
 8016e78:	d31c      	bcc.n	8016eb4 <_strtol_l.constprop.0+0xc0>
 8016e7a:	d101      	bne.n	8016e80 <_strtol_l.constprop.0+0x8c>
 8016e7c:	45a2      	cmp	sl, r4
 8016e7e:	db19      	blt.n	8016eb4 <_strtol_l.constprop.0+0xc0>
 8016e80:	fb06 4603 	mla	r6, r6, r3, r4
 8016e84:	f04f 0c01 	mov.w	ip, #1
 8016e88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e8c:	e7e8      	b.n	8016e60 <_strtol_l.constprop.0+0x6c>
 8016e8e:	2c2b      	cmp	r4, #43	; 0x2b
 8016e90:	bf04      	itt	eq
 8016e92:	782c      	ldrbeq	r4, [r5, #0]
 8016e94:	1cb5      	addeq	r5, r6, #2
 8016e96:	e7ca      	b.n	8016e2e <_strtol_l.constprop.0+0x3a>
 8016e98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016e9c:	f1be 0f19 	cmp.w	lr, #25
 8016ea0:	d801      	bhi.n	8016ea6 <_strtol_l.constprop.0+0xb2>
 8016ea2:	3c37      	subs	r4, #55	; 0x37
 8016ea4:	e7e2      	b.n	8016e6c <_strtol_l.constprop.0+0x78>
 8016ea6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016eaa:	f1be 0f19 	cmp.w	lr, #25
 8016eae:	d804      	bhi.n	8016eba <_strtol_l.constprop.0+0xc6>
 8016eb0:	3c57      	subs	r4, #87	; 0x57
 8016eb2:	e7db      	b.n	8016e6c <_strtol_l.constprop.0+0x78>
 8016eb4:	f04f 3cff 	mov.w	ip, #4294967295
 8016eb8:	e7e6      	b.n	8016e88 <_strtol_l.constprop.0+0x94>
 8016eba:	f1bc 0f00 	cmp.w	ip, #0
 8016ebe:	da05      	bge.n	8016ecc <_strtol_l.constprop.0+0xd8>
 8016ec0:	2322      	movs	r3, #34	; 0x22
 8016ec2:	6003      	str	r3, [r0, #0]
 8016ec4:	4646      	mov	r6, r8
 8016ec6:	b942      	cbnz	r2, 8016eda <_strtol_l.constprop.0+0xe6>
 8016ec8:	4630      	mov	r0, r6
 8016eca:	e79e      	b.n	8016e0a <_strtol_l.constprop.0+0x16>
 8016ecc:	b107      	cbz	r7, 8016ed0 <_strtol_l.constprop.0+0xdc>
 8016ece:	4276      	negs	r6, r6
 8016ed0:	2a00      	cmp	r2, #0
 8016ed2:	d0f9      	beq.n	8016ec8 <_strtol_l.constprop.0+0xd4>
 8016ed4:	f1bc 0f00 	cmp.w	ip, #0
 8016ed8:	d000      	beq.n	8016edc <_strtol_l.constprop.0+0xe8>
 8016eda:	1e69      	subs	r1, r5, #1
 8016edc:	6011      	str	r1, [r2, #0]
 8016ede:	e7f3      	b.n	8016ec8 <_strtol_l.constprop.0+0xd4>
 8016ee0:	2430      	movs	r4, #48	; 0x30
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d1b1      	bne.n	8016e4a <_strtol_l.constprop.0+0x56>
 8016ee6:	2308      	movs	r3, #8
 8016ee8:	e7af      	b.n	8016e4a <_strtol_l.constprop.0+0x56>
 8016eea:	2c30      	cmp	r4, #48	; 0x30
 8016eec:	d0a5      	beq.n	8016e3a <_strtol_l.constprop.0+0x46>
 8016eee:	230a      	movs	r3, #10
 8016ef0:	e7ab      	b.n	8016e4a <_strtol_l.constprop.0+0x56>
 8016ef2:	bf00      	nop
 8016ef4:	08018966 	.word	0x08018966

08016ef8 <_strtol_r>:
 8016ef8:	f7ff bf7c 	b.w	8016df4 <_strtol_l.constprop.0>

08016efc <__submore>:
 8016efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f00:	460c      	mov	r4, r1
 8016f02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f08:	4299      	cmp	r1, r3
 8016f0a:	d11d      	bne.n	8016f48 <__submore+0x4c>
 8016f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f10:	f7fc f990 	bl	8013234 <_malloc_r>
 8016f14:	b918      	cbnz	r0, 8016f1e <__submore+0x22>
 8016f16:	f04f 30ff 	mov.w	r0, #4294967295
 8016f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f22:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016f28:	6360      	str	r0, [r4, #52]	; 0x34
 8016f2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016f2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016f32:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016f36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016f3a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016f3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016f42:	6020      	str	r0, [r4, #0]
 8016f44:	2000      	movs	r0, #0
 8016f46:	e7e8      	b.n	8016f1a <__submore+0x1e>
 8016f48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016f4a:	0077      	lsls	r7, r6, #1
 8016f4c:	463a      	mov	r2, r7
 8016f4e:	f7ff fb6f 	bl	8016630 <_realloc_r>
 8016f52:	4605      	mov	r5, r0
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d0de      	beq.n	8016f16 <__submore+0x1a>
 8016f58:	eb00 0806 	add.w	r8, r0, r6
 8016f5c:	4601      	mov	r1, r0
 8016f5e:	4632      	mov	r2, r6
 8016f60:	4640      	mov	r0, r8
 8016f62:	f7fb fe73 	bl	8012c4c <memcpy>
 8016f66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016f6a:	f8c4 8000 	str.w	r8, [r4]
 8016f6e:	e7e9      	b.n	8016f44 <__submore+0x48>

08016f70 <__ascii_wctomb>:
 8016f70:	b149      	cbz	r1, 8016f86 <__ascii_wctomb+0x16>
 8016f72:	2aff      	cmp	r2, #255	; 0xff
 8016f74:	bf85      	ittet	hi
 8016f76:	238a      	movhi	r3, #138	; 0x8a
 8016f78:	6003      	strhi	r3, [r0, #0]
 8016f7a:	700a      	strbls	r2, [r1, #0]
 8016f7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f80:	bf98      	it	ls
 8016f82:	2001      	movls	r0, #1
 8016f84:	4770      	bx	lr
 8016f86:	4608      	mov	r0, r1
 8016f88:	4770      	bx	lr
	...

08016f8c <_fstat_r>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	4d07      	ldr	r5, [pc, #28]	; (8016fac <_fstat_r+0x20>)
 8016f90:	2300      	movs	r3, #0
 8016f92:	4604      	mov	r4, r0
 8016f94:	4608      	mov	r0, r1
 8016f96:	4611      	mov	r1, r2
 8016f98:	602b      	str	r3, [r5, #0]
 8016f9a:	f7f3 fce4 	bl	800a966 <_fstat>
 8016f9e:	1c43      	adds	r3, r0, #1
 8016fa0:	d102      	bne.n	8016fa8 <_fstat_r+0x1c>
 8016fa2:	682b      	ldr	r3, [r5, #0]
 8016fa4:	b103      	cbz	r3, 8016fa8 <_fstat_r+0x1c>
 8016fa6:	6023      	str	r3, [r4, #0]
 8016fa8:	bd38      	pop	{r3, r4, r5, pc}
 8016faa:	bf00      	nop
 8016fac:	2000a7b4 	.word	0x2000a7b4

08016fb0 <_isatty_r>:
 8016fb0:	b538      	push	{r3, r4, r5, lr}
 8016fb2:	4d06      	ldr	r5, [pc, #24]	; (8016fcc <_isatty_r+0x1c>)
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	4604      	mov	r4, r0
 8016fb8:	4608      	mov	r0, r1
 8016fba:	602b      	str	r3, [r5, #0]
 8016fbc:	f7f3 fce3 	bl	800a986 <_isatty>
 8016fc0:	1c43      	adds	r3, r0, #1
 8016fc2:	d102      	bne.n	8016fca <_isatty_r+0x1a>
 8016fc4:	682b      	ldr	r3, [r5, #0]
 8016fc6:	b103      	cbz	r3, 8016fca <_isatty_r+0x1a>
 8016fc8:	6023      	str	r3, [r4, #0]
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	2000a7b4 	.word	0x2000a7b4

08016fd0 <_malloc_usable_size_r>:
 8016fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fd4:	1f18      	subs	r0, r3, #4
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	bfbc      	itt	lt
 8016fda:	580b      	ldrlt	r3, [r1, r0]
 8016fdc:	18c0      	addlt	r0, r0, r3
 8016fde:	4770      	bx	lr

08016fe0 <_init>:
 8016fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fe2:	bf00      	nop
 8016fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fe6:	bc08      	pop	{r3}
 8016fe8:	469e      	mov	lr, r3
 8016fea:	4770      	bx	lr

08016fec <_fini>:
 8016fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fee:	bf00      	nop
 8016ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ff2:	bc08      	pop	{r3}
 8016ff4:	469e      	mov	lr, r3
 8016ff6:	4770      	bx	lr

08016ff8 <__FLASH_Program_Fast_veneer>:
 8016ff8:	f85f f000 	ldr.w	pc, [pc]	; 8016ffc <__FLASH_Program_Fast_veneer+0x4>
 8016ffc:	20000255 	.word	0x20000255

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000005                                ....

20000010 <environ>:
20000010:	2000a6b8                                ... 

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <impure_data>:
20000024:	00000000 08018a88 08018aa8 08018a68     ............h...
	...

20000084 <_tzname>:
20000084:	0801870c 0801870c 00000000              ............

20000090 <tzinfo>:
20000090:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000c0:	0000004a 00000000 00000000 00000000     J...............
	...

200000e8 <__global_locale>:
200000e8:	00000043 00000000 00000000 00000000     C...............
	...
20000108:	00000043 00000000 00000000 00000000     C...............
	...
20000128:	00000043 00000000 00000000 00000000     C...............
	...
20000148:	00000043 00000000 00000000 00000000     C...............
	...
20000168:	00000043 00000000 00000000 00000000     C...............
	...
20000188:	00000043 00000000 00000000 00000000     C...............
	...
200001a8:	00000043 00000000 00000000 00000000     C...............
	...
200001c8:	08016f71 080165d9 00000000 08018965     qo...e......e...
200001d8:	08018ad0 08018780 08018780 08018780     ................
200001e8:	08018780 08018780 08018780 08018780     ................
200001f8:	08018780 08018780 ffffffff ffffffff     ................
20000208:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000230:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000254 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000254:	b480      	push	{r7}
20000256:	b089      	sub	sp, #36	; 0x24
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
2000025c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000025e:	2380      	movs	r3, #128	; 0x80
20000260:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b18      	ldr	r3, [pc, #96]	; (200002cc <FLASH_Program_Fast+0x78>)
2000026c:	695b      	ldr	r3, [r3, #20]
2000026e:	4a17      	ldr	r2, [pc, #92]	; (200002cc <FLASH_Program_Fast+0x78>)
20000270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000274:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000276:	f3ef 8310 	mrs	r3, PRIMASK
2000027a:	60fb      	str	r3, [r7, #12]
  return(result);
2000027c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000027e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000280:	b672      	cpsid	i
}
20000282:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000284:	697b      	ldr	r3, [r7, #20]
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	69bb      	ldr	r3, [r7, #24]
2000028a:	601a      	str	r2, [r3, #0]
    dest_addr++;
2000028c:	69bb      	ldr	r3, [r7, #24]
2000028e:	3304      	adds	r3, #4
20000290:	61bb      	str	r3, [r7, #24]
    src_addr++;
20000292:	697b      	ldr	r3, [r7, #20]
20000294:	3304      	adds	r3, #4
20000296:	617b      	str	r3, [r7, #20]
    row_index--;
20000298:	7ffb      	ldrb	r3, [r7, #31]
2000029a:	3b01      	subs	r3, #1
2000029c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000029e:	7ffb      	ldrb	r3, [r7, #31]
200002a0:	2b00      	cmp	r3, #0
200002a2:	d1ef      	bne.n	20000284 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200002a4:	bf00      	nop
200002a6:	4b09      	ldr	r3, [pc, #36]	; (200002cc <FLASH_Program_Fast+0x78>)
200002a8:	691b      	ldr	r3, [r3, #16]
200002aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200002ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200002b2:	d0f8      	beq.n	200002a6 <FLASH_Program_Fast+0x52>
200002b4:	693b      	ldr	r3, [r7, #16]
200002b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b8:	68bb      	ldr	r3, [r7, #8]
200002ba:	f383 8810 	msr	PRIMASK, r3
}
200002be:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002c0:	bf00      	nop
200002c2:	3724      	adds	r7, #36	; 0x24
200002c4:	46bd      	mov	sp, r7
200002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200002ca:	4770      	bx	lr
200002cc:	58004000 	.word	0x58004000
