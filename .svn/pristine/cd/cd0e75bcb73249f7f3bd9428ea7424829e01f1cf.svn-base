
Pack Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c388  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  0800c4c8  0800c4c8  0001c4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf2c  0800cf2c  0001cf2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf34  0800cf34  0001cf34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cf38  0800cf38  0001cf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800cf3c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cee0  2000007c  0800cfb0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000cf5c  0800cfb0  0002cf5c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd70  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004364  00000000  00000000  0004be1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002670  00000000  00000000  00050180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002528  00000000  00000000  000527f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026ad7  00000000  00000000  00054d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024447  00000000  00000000  0007b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f5330  00000000  00000000  0009fc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00194f66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b150  00000000  00000000  00194fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c4b0 	.word	0x0800c4b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800c4b0 	.word	0x0800c4b0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <PC_Initialize>:

/***************************************************************************************************************
*     P C _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PC_Initialize(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  pack.id = PACK_ID;
 800053a:	4b7b      	ldr	r3, [pc, #492]	; (8000728 <PC_Initialize+0x1f4>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 8000540:	4b79      	ldr	r3, [pc, #484]	; (8000728 <PC_Initialize+0x1f4>)
 8000542:	2200      	movs	r2, #0
 8000544:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8000546:	4b78      	ldr	r3, [pc, #480]	; (8000728 <PC_Initialize+0x1f4>)
 8000548:	2200      	movs	r2, #0
 800054a:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 800054c:	4b76      	ldr	r3, [pc, #472]	; (8000728 <PC_Initialize+0x1f4>)
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 8000552:	4b75      	ldr	r3, [pc, #468]	; (8000728 <PC_Initialize+0x1f4>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d103      	bne.n	8000562 <PC_Initialize+0x2e>
    pack.vcuCanOffset = 0;
 800055a:	4b73      	ldr	r3, [pc, #460]	; (8000728 <PC_Initialize+0x1f4>)
 800055c:	2200      	movs	r2, #0
 800055e:	815a      	strh	r2, [r3, #10]
 8000560:	e007      	b.n	8000572 <PC_Initialize+0x3e>
  else if (pack.id == 1)
 8000562:	4b71      	ldr	r3, [pc, #452]	; (8000728 <PC_Initialize+0x1f4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d103      	bne.n	8000572 <PC_Initialize+0x3e>
    pack.vcuCanOffset =0x100;
 800056a:	4b6f      	ldr	r3, [pc, #444]	; (8000728 <PC_Initialize+0x1f4>)
 800056c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000570:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 8000572:	4b6d      	ldr	r3, [pc, #436]	; (8000728 <PC_Initialize+0x1f4>)
 8000574:	2200      	movs	r2, #0
 8000576:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8000578:	4b6b      	ldr	r3, [pc, #428]	; (8000728 <PC_Initialize+0x1f4>)
 800057a:	2200      	movs	r2, #0
 800057c:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 800057e:	4b6a      	ldr	r3, [pc, #424]	; (8000728 <PC_Initialize+0x1f4>)
 8000580:	2200      	movs	r2, #0
 8000582:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 8000584:	4b68      	ldr	r3, [pc, #416]	; (8000728 <PC_Initialize+0x1f4>)
 8000586:	2200      	movs	r2, #0
 8000588:	81da      	strh	r2, [r3, #14]
  pack.moduleCount=0;
 800058a:	4b67      	ldr	r3, [pc, #412]	; (8000728 <PC_Initialize+0x1f4>)
 800058c:	2200      	movs	r2, #0
 800058e:	741a      	strb	r2, [r3, #16]
  pack.activeModules=0;
 8000590:	4b65      	ldr	r3, [pc, #404]	; (8000728 <PC_Initialize+0x1f4>)
 8000592:	2200      	movs	r2, #0
 8000594:	74da      	strb	r2, [r3, #19]
  pack.totalCells=0;
 8000596:	4b64      	ldr	r3, [pc, #400]	; (8000728 <PC_Initialize+0x1f4>)
 8000598:	2200      	movs	r2, #0
 800059a:	831a      	strh	r2, [r3, #24]
  pack.cellHiTemp=0;
 800059c:	4b62      	ldr	r3, [pc, #392]	; (8000728 <PC_Initialize+0x1f4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	835a      	strh	r2, [r3, #26]
  pack.cellLoTemp=0;
 80005a2:	4b61      	ldr	r3, [pc, #388]	; (8000728 <PC_Initialize+0x1f4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	839a      	strh	r2, [r3, #28]
  pack.cellAvgTemp=0;
 80005a8:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <PC_Initialize+0x1f4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	83da      	strh	r2, [r3, #30]
  pack.cellHiVolt=0;
 80005ae:	4b5e      	ldr	r3, [pc, #376]	; (8000728 <PC_Initialize+0x1f4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	841a      	strh	r2, [r3, #32]
  pack.cellLoVolt=0;
 80005b4:	4b5c      	ldr	r3, [pc, #368]	; (8000728 <PC_Initialize+0x1f4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	845a      	strh	r2, [r3, #34]	; 0x22
  pack.cellAvgVolt=0;
 80005ba:	4b5b      	ldr	r3, [pc, #364]	; (8000728 <PC_Initialize+0x1f4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	849a      	strh	r2, [r3, #36]	; 0x24
  pack.status=0;
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <PC_Initialize+0x1f4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pack.vcuStateChange=0;
 80005c8:	4b57      	ldr	r3, [pc, #348]	; (8000728 <PC_Initialize+0x1f4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pack.state=0;
 80005d0:	4b55      	ldr	r3, [pc, #340]	; (8000728 <PC_Initialize+0x1f4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  pack.vcuRequestedState=0;
 80005d8:	4b53      	ldr	r3, [pc, #332]	; (8000728 <PC_Initialize+0x1f4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pack.soc=0;
 80005e0:	4b51      	ldr	r3, [pc, #324]	; (8000728 <PC_Initialize+0x1f4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pack.soh=0;
 80005e8:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <PC_Initialize+0x1f4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pack.vcuLastContact.overflows=0;
 80005f0:	4b4d      	ldr	r3, [pc, #308]	; (8000728 <PC_Initialize+0x1f4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	631a      	str	r2, [r3, #48]	; 0x30
  pack.vcuLastContact.ticks=0;
 80005f6:	4b4c      	ldr	r3, [pc, #304]	; (8000728 <PC_Initialize+0x1f4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  pack.cellBalanceActive=0;
 80005fc:	4b4a      	ldr	r3, [pc, #296]	; (8000728 <PC_Initialize+0x1f4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	745a      	strb	r2, [r3, #17]
  pack.cellBalanceStatus=0;
 8000602:	4b49      	ldr	r3, [pc, #292]	; (8000728 <PC_Initialize+0x1f4>)
 8000604:	2200      	movs	r2, #0
 8000606:	749a      	strb	r2, [r3, #18]
  pack.faultedModules=0;
 8000608:	4b47      	ldr	r3, [pc, #284]	; (8000728 <PC_Initialize+0x1f4>)
 800060a:	2200      	movs	r2, #0
 800060c:	751a      	strb	r2, [r3, #20]


  bool passed;


  serialOut("");
 800060e:	4847      	ldr	r0, [pc, #284]	; (800072c <PC_Initialize+0x1f8>)
 8000610:	f004 f90e 	bl	8004830 <serialOut>
  serialOut("");
 8000614:	4845      	ldr	r0, [pc, #276]	; (800072c <PC_Initialize+0x1f8>)
 8000616:	f004 f90b 	bl	8004830 <serialOut>
  serialOut("        ██    ██");
 800061a:	4845      	ldr	r0, [pc, #276]	; (8000730 <PC_Initialize+0x1fc>)
 800061c:	f004 f908 	bl	8004830 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8000620:	4844      	ldr	r0, [pc, #272]	; (8000734 <PC_Initialize+0x200>)
 8000622:	f004 f905 	bl	8004830 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2023");
 8000626:	4844      	ldr	r0, [pc, #272]	; (8000738 <PC_Initialize+0x204>)
 8000628:	f004 f902 	bl	8004830 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 800062c:	4843      	ldr	r0, [pc, #268]	; (800073c <PC_Initialize+0x208>)
 800062e:	f004 f8ff 	bl	8004830 <serialOut>
  serialOut("     ██    ██    ██");
 8000632:	4843      	ldr	r0, [pc, #268]	; (8000740 <PC_Initialize+0x20c>)
 8000634:	f004 f8fc 	bl	8004830 <serialOut>
  serialOut("     m o d b a t t");
 8000638:	4842      	ldr	r0, [pc, #264]	; (8000744 <PC_Initialize+0x210>)
 800063a:	f004 f8f9 	bl	8004830 <serialOut>
  serialOut("");
 800063e:	483b      	ldr	r0, [pc, #236]	; (800072c <PC_Initialize+0x1f8>)
 8000640:	f004 f8f6 	bl	8004830 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8000644:	2000      	movs	r0, #0
 8000646:	f001 fd99 	bl	800217c <CAN_TestRamAccess>
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <PC_Initialize+0x130>
 8000654:	493c      	ldr	r1, [pc, #240]	; (8000748 <PC_Initialize+0x214>)
 8000656:	483d      	ldr	r0, [pc, #244]	; (800074c <PC_Initialize+0x218>)
 8000658:	f00a fd62 	bl	800b120 <siprintf>
 800065c:	483b      	ldr	r0, [pc, #236]	; (800074c <PC_Initialize+0x218>)
 800065e:	f004 f8e7 	bl	8004830 <serialOut>
 8000662:	e006      	b.n	8000672 <PC_Initialize+0x13e>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8000664:	493a      	ldr	r1, [pc, #232]	; (8000750 <PC_Initialize+0x21c>)
 8000666:	4839      	ldr	r0, [pc, #228]	; (800074c <PC_Initialize+0x218>)
 8000668:	f00a fd5a 	bl	800b120 <siprintf>
 800066c:	4837      	ldr	r0, [pc, #220]	; (800074c <PC_Initialize+0x218>)
 800066e:	f004 f8df 	bl	8004830 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8000672:	2000      	movs	r0, #0
 8000674:	f001 fd08 	bl	8002088 <CAN_TestRegisterAccess>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d007      	beq.n	8000692 <PC_Initialize+0x15e>
 8000682:	4934      	ldr	r1, [pc, #208]	; (8000754 <PC_Initialize+0x220>)
 8000684:	4831      	ldr	r0, [pc, #196]	; (800074c <PC_Initialize+0x218>)
 8000686:	f00a fd4b 	bl	800b120 <siprintf>
 800068a:	4830      	ldr	r0, [pc, #192]	; (800074c <PC_Initialize+0x218>)
 800068c:	f004 f8d0 	bl	8004830 <serialOut>
 8000690:	e006      	b.n	80006a0 <PC_Initialize+0x16c>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8000692:	4931      	ldr	r1, [pc, #196]	; (8000758 <PC_Initialize+0x224>)
 8000694:	482d      	ldr	r0, [pc, #180]	; (800074c <PC_Initialize+0x218>)
 8000696:	f00a fd43 	bl	800b120 <siprintf>
 800069a:	482c      	ldr	r0, [pc, #176]	; (800074c <PC_Initialize+0x218>)
 800069c:	f004 f8c8 	bl	8004830 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80006a0:	492e      	ldr	r1, [pc, #184]	; (800075c <PC_Initialize+0x228>)
 80006a2:	482a      	ldr	r0, [pc, #168]	; (800074c <PC_Initialize+0x218>)
 80006a4:	f00a fd3c 	bl	800b120 <siprintf>
 80006a8:	4828      	ldr	r0, [pc, #160]	; (800074c <PC_Initialize+0x218>)
 80006aa:	f004 f8c1 	bl	8004830 <serialOut>

  passed = CAN_TestRamAccess(CAN2);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 fd64 	bl	800217c <CAN_TestRamAccess>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d007      	beq.n	80006ce <PC_Initialize+0x19a>
 80006be:	4928      	ldr	r1, [pc, #160]	; (8000760 <PC_Initialize+0x22c>)
 80006c0:	4822      	ldr	r0, [pc, #136]	; (800074c <PC_Initialize+0x218>)
 80006c2:	f00a fd2d 	bl	800b120 <siprintf>
 80006c6:	4821      	ldr	r0, [pc, #132]	; (800074c <PC_Initialize+0x218>)
 80006c8:	f004 f8b2 	bl	8004830 <serialOut>
 80006cc:	e006      	b.n	80006dc <PC_Initialize+0x1a8>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 80006ce:	4925      	ldr	r1, [pc, #148]	; (8000764 <PC_Initialize+0x230>)
 80006d0:	481e      	ldr	r0, [pc, #120]	; (800074c <PC_Initialize+0x218>)
 80006d2:	f00a fd25 	bl	800b120 <siprintf>
 80006d6:	481d      	ldr	r0, [pc, #116]	; (800074c <PC_Initialize+0x218>)
 80006d8:	f004 f8aa 	bl	8004830 <serialOut>
  }

  passed = CAN_TestRegisterAccess(CAN2);
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 fcd3 	bl	8002088 <CAN_TestRegisterAccess>
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d007      	beq.n	80006fc <PC_Initialize+0x1c8>
 80006ec:	491e      	ldr	r1, [pc, #120]	; (8000768 <PC_Initialize+0x234>)
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <PC_Initialize+0x218>)
 80006f0:	f00a fd16 	bl	800b120 <siprintf>
 80006f4:	4815      	ldr	r0, [pc, #84]	; (800074c <PC_Initialize+0x218>)
 80006f6:	f004 f89b 	bl	8004830 <serialOut>
 80006fa:	e006      	b.n	800070a <PC_Initialize+0x1d6>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 80006fc:	491b      	ldr	r1, [pc, #108]	; (800076c <PC_Initialize+0x238>)
 80006fe:	4813      	ldr	r0, [pc, #76]	; (800074c <PC_Initialize+0x218>)
 8000700:	f00a fd0e 	bl	800b120 <siprintf>
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <PC_Initialize+0x218>)
 8000706:	f004 f893 	bl	8004830 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 800070a:	4914      	ldr	r1, [pc, #80]	; (800075c <PC_Initialize+0x228>)
 800070c:	480f      	ldr	r0, [pc, #60]	; (800074c <PC_Initialize+0x218>)
 800070e:	f00a fd07 	bl	800b120 <siprintf>
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <PC_Initialize+0x218>)
 8000714:	f004 f88c 	bl	8004830 <serialOut>

  appData.state = PC_STATE_INIT;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <PC_Initialize+0x23c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000c754 	.word	0x2000c754
 800072c:	0800c4c8 	.word	0x0800c4c8
 8000730:	0800c4cc 	.word	0x0800c4cc
 8000734:	0800c4e8 	.word	0x0800c4e8
 8000738:	0800c510 	.word	0x0800c510
 800073c:	0800c560 	.word	0x0800c560
 8000740:	0800c5b0 	.word	0x0800c5b0
 8000744:	0800c5d0 	.word	0x0800c5d0
 8000748:	0800c5e4 	.word	0x0800c5e4
 800074c:	2000ce88 	.word	0x2000ce88
 8000750:	0800c614 	.word	0x0800c614
 8000754:	0800c64c 	.word	0x0800c64c
 8000758:	0800c67c 	.word	0x0800c67c
 800075c:	0800c6b4 	.word	0x0800c6b4
 8000760:	0800c6b8 	.word	0x0800c6b8
 8000764:	0800c6e8 	.word	0x0800c6e8
 8000768:	0800c720 	.word	0x0800c720
 800076c:	0800c750 	.word	0x0800c750
 8000770:	20000098 	.word	0x20000098

08000774 <PC_Tasks>:

/***************************************************************************************************************
*     P C _ T a s k s                                                           P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PC_Tasks(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t firstModuleIndex;
 // uint8_t moduleId;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800077a:	4ba6      	ldr	r3, [pc, #664]	; (8000a14 <PC_Tasks+0x2a0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d127      	bne.n	80007d2 <PC_Tasks+0x5e>
      switchLedOn(GREEN_LED);
 8000782:	2001      	movs	r0, #1
 8000784:	f004 f8b0 	bl	80048e8 <switchLedOn>
      switchLedOn(RED_LED);
 8000788:	2000      	movs	r0, #0
 800078a:	f004 f8ad 	bl	80048e8 <switchLedOn>
      DRV_CANFDSPI_Init(CAN1);  // VCU interface
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fa7a 	bl	8000c88 <DRV_CANFDSPI_Init>
      DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fa77 	bl	8000c88 <DRV_CANFDSPI_Init>
      switchLedOff(GREEN_LED);
 800079a:	2001      	movs	r0, #1
 800079c:	f004 f8cc 	bl	8004938 <switchLedOff>
      switchLedOff(RED_LED);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f004 f8c9 	bl	8004938 <switchLedOff>

      MOD_IsolateAllModules();
 80007a6:	f000 fdf9 	bl	800139c <MOD_IsolateAllModules>
      MOD_DeRegisterAllModules();
 80007aa:	f000 fda7 	bl	80012fc <MOD_DeRegisterAllModules>

      pack.vcuRequestedState = packOff;
 80007ae:	4b9a      	ldr	r3, [pc, #616]	; (8000a18 <PC_Tasks+0x2a4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


     // set up a reference time
      pack.vcuLastContact.overflows = etTimerOverflows;
 80007b6:	4b99      	ldr	r3, [pc, #612]	; (8000a1c <PC_Tasks+0x2a8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a97      	ldr	r2, [pc, #604]	; (8000a18 <PC_Tasks+0x2a4>)
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
      pack.vcuLastContact.ticks = htim1.Instance->CNT;
 80007be:	4b98      	ldr	r3, [pc, #608]	; (8000a20 <PC_Tasks+0x2ac>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b94      	ldr	r3, [pc, #592]	; (8000a18 <PC_Tasks+0x2a4>)
 80007c8:	859a      	strh	r2, [r3, #44]	; 0x2c

      appData.state = PC_STATE_RUN;
 80007ca:	4b92      	ldr	r3, [pc, #584]	; (8000a14 <PC_Tasks+0x2a0>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
       }
     }
    // Send BMS State to VCU
    //VCU_TransmitBmsState();
  }
}
 80007d0:	e252      	b.n	8000c78 <PC_Tasks+0x504>
  }else if (appData.state == PC_STATE_RUN){
 80007d2:	4b90      	ldr	r3, [pc, #576]	; (8000a14 <PC_Tasks+0x2a0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f040 824e 	bne.w	8000c78 <PC_Tasks+0x504>
      if(can1RxInterrupt)
 80007dc:	4b91      	ldr	r3, [pc, #580]	; (8000a24 <PC_Tasks+0x2b0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <PC_Tasks+0x74>
        VCU_ReceiveMessages();
 80007e4:	f005 f8ea 	bl	80059bc <VCU_ReceiveMessages>
      if(can2RxInterrupt)
 80007e8:	4b8f      	ldr	r3, [pc, #572]	; (8000a28 <PC_Tasks+0x2b4>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <PC_Tasks+0x80>
        MOD_ReceiveMessages();
 80007f0:	f000 fafc 	bl	8000dec <MOD_ReceiveMessages>
      if(VCU_TicksSinceLastMessage() > VCU_ET_TIMEOUT){
 80007f4:	f005 fa38 	bl	8005c68 <VCU_TicksSinceLastMessage>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80007fe:	d91b      	bls.n	8000838 <PC_Tasks+0xc4>
        if ((pack.state == packOn) || (pack.state == packStandby)){
 8000800:	4b85      	ldr	r3, [pc, #532]	; (8000a18 <PC_Tasks+0x2a4>)
 8000802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000806:	2b03      	cmp	r3, #3
 8000808:	d004      	beq.n	8000814 <PC_Tasks+0xa0>
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <PC_Tasks+0x2a4>)
 800080c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000810:	2b01      	cmp	r3, #1
 8000812:	d132      	bne.n	800087a <PC_Tasks+0x106>
          if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 8000814:	4b85      	ldr	r3, [pc, #532]	; (8000a2c <PC_Tasks+0x2b8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <PC_Tasks+0xba>
 8000820:	4983      	ldr	r1, [pc, #524]	; (8000a30 <PC_Tasks+0x2bc>)
 8000822:	4884      	ldr	r0, [pc, #528]	; (8000a34 <PC_Tasks+0x2c0>)
 8000824:	f00a fc7c 	bl	800b120 <siprintf>
 8000828:	4882      	ldr	r0, [pc, #520]	; (8000a34 <PC_Tasks+0x2c0>)
 800082a:	f004 f801 	bl	8004830 <serialOut>
          pack.vcuRequestedState = packOff;
 800082e:	4b7a      	ldr	r3, [pc, #488]	; (8000a18 <PC_Tasks+0x2a4>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000836:	e020      	b.n	800087a <PC_Tasks+0x106>
      }else if(VCU_TicksSinceLastMessage() > VCU_ET_WARNING){
 8000838:	f005 fa16 	bl	8005c68 <VCU_TicksSinceLastMessage>
 800083c:	4603      	mov	r3, r0
 800083e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000842:	d91a      	bls.n	800087a <PC_Tasks+0x106>
        if ((pack.state == packOn) || (pack.state == packStandby)){
 8000844:	4b74      	ldr	r3, [pc, #464]	; (8000a18 <PC_Tasks+0x2a4>)
 8000846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800084a:	2b03      	cmp	r3, #3
 800084c:	d004      	beq.n	8000858 <PC_Tasks+0xe4>
 800084e:	4b72      	ldr	r3, [pc, #456]	; (8000a18 <PC_Tasks+0x2a4>)
 8000850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000854:	2b01      	cmp	r3, #1
 8000856:	d110      	bne.n	800087a <PC_Tasks+0x106>
          if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8000858:	4b74      	ldr	r3, [pc, #464]	; (8000a2c <PC_Tasks+0x2b8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <PC_Tasks+0xfe>
 8000864:	4974      	ldr	r1, [pc, #464]	; (8000a38 <PC_Tasks+0x2c4>)
 8000866:	4873      	ldr	r0, [pc, #460]	; (8000a34 <PC_Tasks+0x2c0>)
 8000868:	f00a fc5a 	bl	800b120 <siprintf>
 800086c:	4871      	ldr	r0, [pc, #452]	; (8000a34 <PC_Tasks+0x2c0>)
 800086e:	f003 ffdf 	bl	8004830 <serialOut>
          pack.vcuRequestedState = packStandby;
 8000872:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <PC_Tasks+0x2a4>)
 8000874:	2201      	movs	r2, #1
 8000876:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      for (index =0;index < pack.moduleCount;index++){
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	e08b      	b.n	8000998 <PC_Tasks+0x224>
        if(MOD_TicksSinceLastMessage(module[index].moduleId) > MOD_ET_TIMEOUT && (module[index].statusRequested == true)){
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4a6e      	ldr	r2, [pc, #440]	; (8000a3c <PC_Tasks+0x2c8>)
 8000884:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	4413      	add	r3, r2
 800088e:	3308      	adds	r3, #8
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fb94 	bl	8001fc0 <MOD_TicksSinceLastMessage>
 8000898:	4603      	mov	r3, r0
 800089a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800089e:	4293      	cmp	r3, r2
 80008a0:	d933      	bls.n	800090a <PC_Tasks+0x196>
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a65      	ldr	r2, [pc, #404]	; (8000a3c <PC_Tasks+0x2c8>)
 80008a6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80008aa:	fb01 f303 	mul.w	r3, r1, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d027      	beq.n	800090a <PC_Tasks+0x196>
          if( module[index].fault != 1){
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a5f      	ldr	r2, [pc, #380]	; (8000a3c <PC_Tasks+0x2c8>)
 80008be:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80008c2:	fb01 f303 	mul.w	r3, r1, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f083 0301 	eor.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d05c      	beq.n	8000992 <PC_Tasks+0x21e>
            MOD_TransmitState(module[index].moduleId,moduleOff);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4a58      	ldr	r2, [pc, #352]	; (8000a3c <PC_Tasks+0x2c8>)
 80008dc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	3308      	adds	r3, #8
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f947 	bl	8001b80 <MOD_TransmitState>
            module[index].fault = 1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <PC_Tasks+0x2c8>)
 80008f6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
          if( module[index].fault != 1){
 8000908:	e043      	b.n	8000992 <PC_Tasks+0x21e>
       }else if((MOD_TicksSinceLastMessage(module[index].moduleId) > MOD_ET_WARNING) && (module[index].statusRequested == false)){
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4a4b      	ldr	r2, [pc, #300]	; (8000a3c <PC_Tasks+0x2c8>)
 800090e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000912:	fb01 f303 	mul.w	r3, r1, r3
 8000916:	4413      	add	r3, r2
 8000918:	3308      	adds	r3, #8
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fb4f 	bl	8001fc0 <MOD_TicksSinceLastMessage>
 8000922:	4603      	mov	r3, r0
 8000924:	f242 7210 	movw	r2, #10000	; 0x2710
 8000928:	4293      	cmp	r3, r2
 800092a:	d91b      	bls.n	8000964 <PC_Tasks+0x1f0>
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <PC_Tasks+0x2c8>)
 8000930:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000934:	fb01 f303 	mul.w	r3, r1, r3
 8000938:	4413      	add	r3, r2
 800093a:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	f083 0301 	eor.w	r3, r3, #1
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00c      	beq.n	8000964 <PC_Tasks+0x1f0>
          MOD_RequestModuleStatus(module[index].moduleId);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a3b      	ldr	r2, [pc, #236]	; (8000a3c <PC_Tasks+0x2c8>)
 800094e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000952:	fb01 f303 	mul.w	r3, r1, r3
 8000956:	4413      	add	r3, r2
 8000958:	3308      	adds	r3, #8
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fd73 	bl	8001448 <MOD_RequestModuleStatus>
 8000962:	e016      	b.n	8000992 <PC_Tasks+0x21e>
          if(module[index].fault == 1){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a35      	ldr	r2, [pc, #212]	; (8000a3c <PC_Tasks+0x2c8>)
 8000968:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	4413      	add	r3, r2
 8000972:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00a      	beq.n	8000992 <PC_Tasks+0x21e>
            module[index].fault = 0;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <PC_Tasks+0x2c8>)
 8000980:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	4413      	add	r3, r2
 800098a:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
      for (index =0;index < pack.moduleCount;index++){
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	3301      	adds	r3, #1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <PC_Tasks+0x2a4>)
 800099a:	7c1b      	ldrb	r3, [r3, #16]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	429a      	cmp	r2, r3
 80009a0:	f4ff af6e 	bcc.w	8000880 <PC_Tasks+0x10c>
     if (pack.vcuRequestedState == packOn){
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <PC_Tasks+0x2a4>)
 80009a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	f040 8095 	bne.w	8000ada <PC_Tasks+0x366>
       if(pack.powerStatus.powerStage == stageFirstModule){
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <PC_Tasks+0x2a4>)
 80009b2:	7d9b      	ldrb	r3, [r3, #22]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d168      	bne.n	8000a8a <PC_Tasks+0x316>
         index = MOD_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <PC_Tasks+0x2a4>)
 80009ba:	7d5b      	ldrb	r3, [r3, #21]
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 facb 	bl	8001f58 <MOD_ModuleIndexFromId>
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
         if (index != pack.moduleCount){
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <PC_Tasks+0x2a4>)
 80009c8:	7c1b      	ldrb	r3, [r3, #16]
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	f000 8140 	beq.w	8000c52 <PC_Tasks+0x4de>
           if(module[index].current_state == moduleOn){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <PC_Tasks+0x2c8>)
 80009d6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80009da:	fb01 f303 	mul.w	r3, r1, r3
 80009de:	4413      	add	r3, r2
 80009e0:	331d      	adds	r3, #29
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	f040 8134 	bne.w	8000c52 <PC_Tasks+0x4de>
             module[index].command.commandStatus = commandActive;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <PC_Tasks+0x2c8>)
 80009ee:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	4413      	add	r3, r2
 80009f8:	331f      	adds	r3, #31
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
             pack.state = packOn;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <PC_Tasks+0x2a4>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
             pack.powerStatus.powerStage = stageIdle;
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <PC_Tasks+0x2a4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	759a      	strb	r2, [r3, #22]
             for (index =0;index < pack.moduleCount;index++){
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	e035      	b.n	8000a7e <PC_Tasks+0x30a>
 8000a12:	bf00      	nop
 8000a14:	20000098 	.word	0x20000098
 8000a18:	2000c754 	.word	0x2000c754
 8000a1c:	2000cef0 	.word	0x2000cef0
 8000a20:	2000ca68 	.word	0x2000ca68
 8000a24:	2000ceee 	.word	0x2000ceee
 8000a28:	2000ceec 	.word	0x2000ceec
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	0800c788 	.word	0x0800c788
 8000a34:	2000ce88 	.word	0x2000ce88
 8000a38:	0800c7a4 	.word	0x0800c7a4
 8000a3c:	20000154 	.word	0x20000154
               if (module[index].fault == false){
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4a8f      	ldr	r2, [pc, #572]	; (8000c80 <PC_Tasks+0x50c>)
 8000a44:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000a48:	fb01 f303 	mul.w	r3, r1, r3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	f083 0301 	eor.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00c      	beq.n	8000a78 <PC_Tasks+0x304>
                 MOD_TransmitState(module[index].moduleId,moduleOn);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a87      	ldr	r2, [pc, #540]	; (8000c80 <PC_Tasks+0x50c>)
 8000a62:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000a66:	fb01 f303 	mul.w	r3, r1, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2103      	movs	r1, #3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f884 	bl	8001b80 <MOD_TransmitState>
             for (index =0;index < pack.moduleCount;index++){
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	4b81      	ldr	r3, [pc, #516]	; (8000c84 <PC_Tasks+0x510>)
 8000a80:	7c1b      	ldrb	r3, [r3, #16]
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d3db      	bcc.n	8000a40 <PC_Tasks+0x2cc>
 8000a88:	e0e3      	b.n	8000c52 <PC_Tasks+0x4de>
         for (index =0;index < pack.moduleCount;index++){
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e01e      	b.n	8000ace <PC_Tasks+0x35a>
           if (module[index].fault == false){
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a7b      	ldr	r2, [pc, #492]	; (8000c80 <PC_Tasks+0x50c>)
 8000a94:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	f083 0301 	eor.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00c      	beq.n	8000ac8 <PC_Tasks+0x354>
             MOD_TransmitState(module[index].moduleId,moduleOn);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a73      	ldr	r2, [pc, #460]	; (8000c80 <PC_Tasks+0x50c>)
 8000ab2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000ab6:	fb01 f303 	mul.w	r3, r1, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	3308      	adds	r3, #8
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f85c 	bl	8001b80 <MOD_TransmitState>
         for (index =0;index < pack.moduleCount;index++){
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	3301      	adds	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <PC_Tasks+0x510>)
 8000ad0:	7c1b      	ldrb	r3, [r3, #16]
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3db      	bcc.n	8000a90 <PC_Tasks+0x31c>
 8000ad8:	e0bb      	b.n	8000c52 <PC_Tasks+0x4de>
     } else if (pack.vcuRequestedState == packPrecharge){
 8000ada:	4b6a      	ldr	r3, [pc, #424]	; (8000c84 <PC_Tasks+0x510>)
 8000adc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d15a      	bne.n	8000b9a <PC_Tasks+0x426>
         if(pack.powerStatus.powerStage == stageFirstModule){
 8000ae4:	4b67      	ldr	r3, [pc, #412]	; (8000c84 <PC_Tasks+0x510>)
 8000ae6:	7d9b      	ldrb	r3, [r3, #22]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f040 80b2 	bne.w	8000c52 <PC_Tasks+0x4de>
          firstModuleIndex = MOD_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8000aee:	4b65      	ldr	r3, [pc, #404]	; (8000c84 <PC_Tasks+0x510>)
 8000af0:	7d5b      	ldrb	r3, [r3, #21]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fa30 	bl	8001f58 <MOD_ModuleIndexFromId>
 8000af8:	4603      	mov	r3, r0
 8000afa:	71bb      	strb	r3, [r7, #6]
          if (firstModuleIndex != pack.moduleCount){
 8000afc:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <PC_Tasks+0x510>)
 8000afe:	7c1b      	ldrb	r3, [r3, #16]
 8000b00:	79ba      	ldrb	r2, [r7, #6]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	f000 80a5 	beq.w	8000c52 <PC_Tasks+0x4de>
            if(module[firstModuleIndex].current_state == moduleOn){
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <PC_Tasks+0x50c>)
 8000b0c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	331d      	adds	r3, #29
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	f040 8099 	bne.w	8000c52 <PC_Tasks+0x4de>
              module[firstModuleIndex].command.commandStatus = commandActive;
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	4a57      	ldr	r2, [pc, #348]	; (8000c80 <PC_Tasks+0x50c>)
 8000b24:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000b28:	fb01 f303 	mul.w	r3, r1, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	331f      	adds	r3, #31
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
              pack.state = packPrecharge;
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <PC_Tasks+0x510>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
              pack.powerStatus.powerStage = stageIdle;
 8000b3c:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <PC_Tasks+0x510>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	759a      	strb	r2, [r3, #22]
              for (index =0;index < pack.moduleCount;index++){
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e022      	b.n	8000b8e <PC_Tasks+0x41a>
                if (module[index].fault == false && (index != firstModuleIndex)){
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <PC_Tasks+0x50c>)
 8000b4c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000b50:	fb01 f303 	mul.w	r3, r1, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f083 0301 	eor.w	r3, r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d010      	beq.n	8000b88 <PC_Tasks+0x414>
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d00c      	beq.n	8000b88 <PC_Tasks+0x414>
                  MOD_TransmitState(module[index].moduleId,moduleStandby);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4a43      	ldr	r2, [pc, #268]	; (8000c80 <PC_Tasks+0x50c>)
 8000b72:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fffc 	bl	8001b80 <MOD_TransmitState>
              for (index =0;index < pack.moduleCount;index++){
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <PC_Tasks+0x510>)
 8000b90:	7c1b      	ldrb	r3, [r3, #16]
 8000b92:	79fa      	ldrb	r2, [r7, #7]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3d7      	bcc.n	8000b48 <PC_Tasks+0x3d4>
 8000b98:	e05b      	b.n	8000c52 <PC_Tasks+0x4de>
     } else if (pack.vcuRequestedState == packStandby){
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <PC_Tasks+0x510>)
 8000b9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d130      	bne.n	8000c06 <PC_Tasks+0x492>
       if(pack.state != packStandby){
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <PC_Tasks+0x510>)
 8000ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d051      	beq.n	8000c52 <PC_Tasks+0x4de>
         for (index =0;index < pack.moduleCount;index++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e01e      	b.n	8000bf2 <PC_Tasks+0x47e>
           if (module[index].fault == false ){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a32      	ldr	r2, [pc, #200]	; (8000c80 <PC_Tasks+0x50c>)
 8000bb8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00c      	beq.n	8000bec <PC_Tasks+0x478>
             MOD_TransmitState(module[index].moduleId,moduleStandby);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4a2a      	ldr	r2, [pc, #168]	; (8000c80 <PC_Tasks+0x50c>)
 8000bd6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	3308      	adds	r3, #8
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 ffca 	bl	8001b80 <MOD_TransmitState>
         for (index =0;index < pack.moduleCount;index++){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <PC_Tasks+0x510>)
 8000bf4:	7c1b      	ldrb	r3, [r3, #16]
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3db      	bcc.n	8000bb4 <PC_Tasks+0x440>
         pack.state = packStandby;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <PC_Tasks+0x510>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000c04:	e025      	b.n	8000c52 <PC_Tasks+0x4de>
     } else if (pack.vcuRequestedState == packOff){
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <PC_Tasks+0x510>)
 8000c08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d120      	bne.n	8000c52 <PC_Tasks+0x4de>
       if(pack.state != packOff){
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <PC_Tasks+0x510>)
 8000c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d01b      	beq.n	8000c52 <PC_Tasks+0x4de>
         for (index =0;index < pack.moduleCount;index++){
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	e00f      	b.n	8000c40 <PC_Tasks+0x4cc>
           MOD_TransmitState(module[index].moduleId,moduleOff);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <PC_Tasks+0x50c>)
 8000c24:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000c28:	fb01 f303 	mul.w	r3, r1, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	3308      	adds	r3, #8
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 ffa3 	bl	8001b80 <MOD_TransmitState>
         for (index =0;index < pack.moduleCount;index++){
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <PC_Tasks+0x510>)
 8000c42:	7c1b      	ldrb	r3, [r3, #16]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d3ea      	bcc.n	8000c20 <PC_Tasks+0x4ac>
         pack.state = packOff;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <PC_Tasks+0x510>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
     if(pack.state == pack.vcuRequestedState){
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <PC_Tasks+0x510>)
 8000c54:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <PC_Tasks+0x510>)
 8000c5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d10a      	bne.n	8000c78 <PC_Tasks+0x504>
       for (index =0;index < pack.moduleCount;index++){
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e002      	b.n	8000c6e <PC_Tasks+0x4fa>
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <PC_Tasks+0x510>)
 8000c70:	7c1b      	ldrb	r3, [r3, #16]
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3f7      	bcc.n	8000c68 <PC_Tasks+0x4f4>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000154 	.word	0x20000154
 8000c84:	2000c754 	.word	0x2000c754

08000c88 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fae7 	bl	8002268 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fd7c 	bl	800379a <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	21ff      	movs	r1, #255	; 0xff
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fdab 	bl	8003802 <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 8000cac:	484a      	ldr	r0, [pc, #296]	; (8000dd8 <DRV_CANFDSPI_Init+0x150>)
 8000cae:	f001 ffb7 	bl	8002c20 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 8000cb2:	4a49      	ldr	r2, [pc, #292]	; (8000dd8 <DRV_CANFDSPI_Init+0x150>)
 8000cb4:	7813      	ldrb	r3, [r2, #0]
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8000cbc:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <DRV_CANFDSPI_Init+0x150>)
 8000cbe:	7853      	ldrb	r3, [r2, #1]
 8000cc0:	f36f 1386 	bfc	r3, #6, #1
 8000cc4:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4943      	ldr	r1, [pc, #268]	; (8000dd8 <DRV_CANFDSPI_Init+0x150>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 ff1a 	bl	8002b04 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8000cd0:	4842      	ldr	r0, [pc, #264]	; (8000ddc <DRV_CANFDSPI_Init+0x154>)
 8000cd2:	f002 f8b5 	bl	8002e40 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8000cd6:	4a41      	ldr	r2, [pc, #260]	; (8000ddc <DRV_CANFDSPI_Init+0x154>)
 8000cd8:	7853      	ldrb	r3, [r2, #1]
 8000cda:	2107      	movs	r1, #7
 8000cdc:	f361 0304 	bfi	r3, r1, #0, #5
 8000ce0:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <DRV_CANFDSPI_Init+0x154>)
 8000ce4:	7853      	ldrb	r3, [r2, #1]
 8000ce6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000cea:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8000cec:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <DRV_CANFDSPI_Init+0x154>)
 8000cee:	7813      	ldrb	r3, [r2, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	f361 0345 	bfi	r3, r1, #1, #5
 8000cf6:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MOD_TX_FIFO, &txConfig);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4a38      	ldr	r2, [pc, #224]	; (8000ddc <DRV_CANFDSPI_Init+0x154>)
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 f846 	bl	8002d90 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8000d04:	4836      	ldr	r0, [pc, #216]	; (8000de0 <DRV_CANFDSPI_Init+0x158>)
 8000d06:	f002 fac9 	bl	800329c <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 8000d0a:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <DRV_CANFDSPI_Init+0x158>)
 8000d0c:	7813      	ldrb	r3, [r2, #0]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f361 0345 	bfi	r3, r1, #1, #5
 8000d14:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <DRV_CANFDSPI_Init+0x158>)
 8000d18:	8813      	ldrh	r3, [r2, #0]
 8000d1a:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8000d1e:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MOD_RX_FIFO, &rxConfig);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <DRV_CANFDSPI_Init+0x158>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fa6c 	bl	8003204 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <DRV_CANFDSPI_Init+0x15c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8000d32:	4a2c      	ldr	r2, [pc, #176]	; (8000de4 <DRV_CANFDSPI_Init+0x15c>)
 8000d34:	8813      	ldrh	r3, [r2, #0]
 8000d36:	f36f 030a 	bfc	r3, #0, #11
 8000d3a:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8000d3c:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <DRV_CANFDSPI_Init+0x15c>)
 8000d3e:	78d3      	ldrb	r3, [r2, #3]
 8000d40:	f36f 1386 	bfc	r3, #6, #1
 8000d44:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 8000d46:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <DRV_CANFDSPI_Init+0x15c>)
 8000d48:	6813      	ldr	r3, [r2, #0]
 8000d4a:	f36f 23dc 	bfc	r3, #11, #18
 8000d4e:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4a24      	ldr	r2, [pc, #144]	; (8000de4 <DRV_CANFDSPI_Init+0x15c>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 f9d6 	bl	8003108 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <DRV_CANFDSPI_Init+0x160>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8000d62:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <DRV_CANFDSPI_Init+0x160>)
 8000d64:	8813      	ldrh	r3, [r2, #0]
 8000d66:	f36f 030a 	bfc	r3, #0, #11
 8000d6a:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <DRV_CANFDSPI_Init+0x160>)
 8000d6e:	78d3      	ldrb	r3, [r2, #3]
 8000d70:	f36f 1386 	bfc	r3, #6, #1
 8000d74:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <DRV_CANFDSPI_Init+0x160>)
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	f36f 23dc 	bfc	r3, #11, #18
 8000d7e:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <DRV_CANFDSPI_Init+0x160>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f9e0 	bl	800314c <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MOD_RX_FIFO, true);
 8000d8c:	79f8      	ldrb	r0, [r7, #7]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2201      	movs	r2, #1
 8000d92:	2100      	movs	r1, #0
 8000d94:	f002 f9fe 	bl	8003194 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8000d98:	79f8      	ldrb	r0, [r7, #7]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	2101      	movs	r1, #1
 8000da0:	f002 fd6f 	bl	8003882 <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fc88 	bl	80046c0 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MOD_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MOD_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MOD_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2201      	movs	r2, #1
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fc6f 	bl	800369a <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fbbe 	bl	8003542 <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 ffa4 	bl	8002d18 <DRV_CANFDSPI_OperationModeSelect>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	200000a0 	.word	0x200000a0
 8000de0:	200000f4 	.word	0x200000f4
 8000de4:	200000f8 	.word	0x200000f8
 8000de8:	200000fc 	.word	0x200000fc

08000dec <MOD_ReceiveMessages>:

/***************************************************************************************************************
*     M O D _ R e c e i v e M o d u l e M e s s a g e s                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ReceiveMessages(void)
{
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b08b      	sub	sp, #44	; 0x2c
 8000df0:	af08      	add	r7, sp, #32

    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MOD_RX_FIFO, &rxFlags);
 8000df2:	4a5e      	ldr	r2, [pc, #376]	; (8000f6c <MOD_ReceiveMessages+0x180>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	2001      	movs	r0, #1
 8000df8:	f002 fc16 	bl	8003628 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000dfc:	e0a9      	b.n	8000f52 <MOD_ReceiveMessages+0x166>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MOD_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e04:	4a5b      	ldr	r2, [pc, #364]	; (8000f74 <MOD_ReceiveMessages+0x188>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f002 fa71 	bl	80032f0 <DRV_CANFDSPI_ReceiveMessageGet>

    if(debugLevel & (DBG_MCU + DBG_VERBOSE)){ sprintf(tempBuffer,"MC RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	; (8000f78 <MOD_ReceiveMessages+0x18c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	f003 030a 	and.w	r3, r3, #10
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d033      	beq.n	8000e82 <MOD_ReceiveMessages+0x96>
 8000e1a:	4b56      	ldr	r3, [pc, #344]	; (8000f74 <MOD_ReceiveMessages+0x188>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	469c      	mov	ip, r3
 8000e26:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <MOD_ReceiveMessages+0x188>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8000e2e:	469e      	mov	lr, r3
 8000e30:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	4618      	mov	r0, r3
 8000e42:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	461c      	mov	r4, r3
 8000e48:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e4a:	791b      	ldrb	r3, [r3, #4]
 8000e4c:	461d      	mov	r5, r3
 8000e4e:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e50:	795b      	ldrb	r3, [r3, #5]
 8000e52:	461e      	mov	r6, r3
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e56:	799b      	ldrb	r3, [r3, #6]
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b45      	ldr	r3, [pc, #276]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000e5c:	79db      	ldrb	r3, [r3, #7]
 8000e5e:	9307      	str	r3, [sp, #28]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	9306      	str	r3, [sp, #24]
 8000e64:	9605      	str	r6, [sp, #20]
 8000e66:	9504      	str	r5, [sp, #16]
 8000e68:	9403      	str	r4, [sp, #12]
 8000e6a:	9002      	str	r0, [sp, #8]
 8000e6c:	9101      	str	r1, [sp, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	4673      	mov	r3, lr
 8000e72:	4662      	mov	r2, ip
 8000e74:	4941      	ldr	r1, [pc, #260]	; (8000f7c <MOD_ReceiveMessages+0x190>)
 8000e76:	4842      	ldr	r0, [pc, #264]	; (8000f80 <MOD_ReceiveMessages+0x194>)
 8000e78:	f00a f952 	bl	800b120 <siprintf>
 8000e7c:	4840      	ldr	r0, [pc, #256]	; (8000f80 <MOD_ReceiveMessages+0x194>)
 8000e7e:	f003 fcd7 	bl	8004830 <serialOut>

    switch (rxObj.bF.id.SID) {
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <MOD_ReceiveMessages+0x188>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d81e      	bhi.n	8000ed2 <MOD_ReceiveMessages+0xe6>
 8000e94:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <MOD_ReceiveMessages+0xb0>)
 8000e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9a:	bf00      	nop
 8000e9c:	08000eb5 	.word	0x08000eb5
 8000ea0:	08000ed3 	.word	0x08000ed3
 8000ea4:	08000ec1 	.word	0x08000ec1
 8000ea8:	08000ec7 	.word	0x08000ec7
 8000eac:	08000ecd 	.word	0x08000ecd
 8000eb0:	08000ebb 	.word	0x08000ebb
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MOD_RegisterModule();
 8000eb4:	f000 f8c2 	bl	800103c <MOD_RegisterModule>

        break;
 8000eb8:	e046      	b.n	8000f48 <MOD_ReceiveMessages+0x15c>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MOD_ProcessCellDetail();
 8000eba:	f000 ff23 	bl	8001d04 <MOD_ProcessCellDetail>

        break;
 8000ebe:	e043      	b.n	8000f48 <MOD_ReceiveMessages+0x15c>

      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MOD_ProcessModuleStatus1();
 8000ec0:	f000 fb98 	bl	80015f4 <MOD_ProcessModuleStatus1>
        break;
 8000ec4:	e040      	b.n	8000f48 <MOD_ReceiveMessages+0x15c>

      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MOD_ProcessModuleStatus2();
 8000ec6:	f000 fccf 	bl	8001868 <MOD_ProcessModuleStatus2>
        break;
 8000eca:	e03d      	b.n	8000f48 <MOD_ReceiveMessages+0x15c>

      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MOD_ProcessModuleStatus3();
 8000ecc:	f000 fd92 	bl	80019f4 <MOD_ProcessModuleStatus3>
        break;
 8000ed0:	e03a      	b.n	8000f48 <MOD_ReceiveMessages+0x15c>

      default:
        // Unknown Message
         if(debugLevel & (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MC RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MOD_ReceiveMessages+0x18c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d033      	beq.n	8000f46 <MOD_ReceiveMessages+0x15a>
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MOD_ReceiveMessages+0x188>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	469c      	mov	ip, r3
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MOD_ReceiveMessages+0x188>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8000ef2:	469e      	mov	lr, r3
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000f02:	789b      	ldrb	r3, [r3, #2]
 8000f04:	4618      	mov	r0, r3
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	461d      	mov	r5, r3
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000f14:	795b      	ldrb	r3, [r3, #5]
 8000f16:	461e      	mov	r6, r3
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000f1a:	799b      	ldrb	r3, [r3, #6]
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MOD_ReceiveMessages+0x184>)
 8000f20:	79db      	ldrb	r3, [r3, #7]
 8000f22:	9307      	str	r3, [sp, #28]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	9306      	str	r3, [sp, #24]
 8000f28:	9605      	str	r6, [sp, #20]
 8000f2a:	9504      	str	r5, [sp, #16]
 8000f2c:	9403      	str	r4, [sp, #12]
 8000f2e:	9002      	str	r0, [sp, #8]
 8000f30:	9101      	str	r1, [sp, #4]
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	4673      	mov	r3, lr
 8000f36:	4662      	mov	r2, ip
 8000f38:	4912      	ldr	r1, [pc, #72]	; (8000f84 <MOD_ReceiveMessages+0x198>)
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MOD_ReceiveMessages+0x194>)
 8000f3c:	f00a f8f0 	bl	800b120 <siprintf>
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <MOD_ReceiveMessages+0x194>)
 8000f42:	f003 fc75 	bl	8004830 <serialOut>
        break;
 8000f46:	bf00      	nop

    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MOD_RX_FIFO, &rxFlags);
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <MOD_ReceiveMessages+0x180>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f002 fb6b 	bl	8003628 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MOD_ReceiveMessages+0x180>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f af4f 	bne.w	8000dfe <MOD_ReceiveMessages+0x12>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000100 	.word	0x20000100
 8000f70:	20000110 	.word	0x20000110
 8000f74:	20000104 	.word	0x20000104
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	0800c7c0 	.word	0x0800c7c0
 8000f80:	2000ce88 	.word	0x2000ce88
 8000f84:	0800c824 	.word	0x0800c824

08000f88 <MOD_TransmitMessageQueue>:
/***************************************************************************************************************
*     M O D _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8000f92:	2332      	movs	r3, #50	; 0x32
 8000f94:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
        DRV_CANFDSPI_TransmitChannelEventGet(index, MOD_TX_FIFO, &txFlags);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <MOD_TransmitMessageQueue+0x90>)
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fb10 	bl	80035c2 <DRV_CANFDSPI_TransmitChannelEventGet>
        if (attempts == 0) {
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d115      	bne.n	8000fd4 <MOD_TransmitMessageQueue+0x4c>
            Nop();
 8000fa8:	bf00      	nop
            Nop();
 8000faa:	bf00      	nop
            DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8000fac:	79f8      	ldrb	r0, [r7, #7]
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MOD_TransmitMessageQueue+0x94>)
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <MOD_TransmitMessageQueue+0x98>)
 8000fb2:	491c      	ldr	r1, [pc, #112]	; (8001024 <MOD_TransmitMessageQueue+0x9c>)
 8000fb4:	f002 fbbf 	bl	8003736 <DRV_CANFDSPI_ErrorCountStateGet>
            if(debugLevel & ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR!"); serialOut(tempBuffer);}
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MOD_TransmitMessageQueue+0xa0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d025      	beq.n	8001010 <MOD_TransmitMessageQueue+0x88>
 8000fc4:	4919      	ldr	r1, [pc, #100]	; (800102c <MOD_TransmitMessageQueue+0xa4>)
 8000fc6:	481a      	ldr	r0, [pc, #104]	; (8001030 <MOD_TransmitMessageQueue+0xa8>)
 8000fc8:	f00a f8aa 	bl	800b120 <siprintf>
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MOD_TransmitMessageQueue+0xa8>)
 8000fce:	f003 fc2f 	bl	8004830 <serialOut>
            return;
 8000fd2:	e01d      	b.n	8001010 <MOD_TransmitMessageQueue+0x88>
        }
        attempts--;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MOD_TransmitMessageQueue+0x90>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0d7      	beq.n	8000f96 <MOD_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MOD_TransmitMessageQueue+0xac>)
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fbad 	bl	8004750 <DRV_CANFDSPI_DlcToDataBytes>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MOD_TX_FIFO, &txObj, txd, n, true);
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	79f8      	ldrb	r0, [r7, #7]
 8000ffe:	2201      	movs	r2, #1
 8001000:	9201      	str	r2, [sp, #4]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MOD_TransmitMessageQueue+0xb0>)
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MOD_TransmitMessageQueue+0xac>)
 8001008:	2102      	movs	r1, #2
 800100a:	f001 ff55 	bl	8002eb8 <DRV_CANFDSPI_TransmitChannelLoad>
 800100e:	e000      	b.n	8001012 <MOD_TransmitMessageQueue+0x8a>
            return;
 8001010:	bf00      	nop
}
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000a4 	.word	0x200000a4
 800101c:	20000153 	.word	0x20000153
 8001020:	20000152 	.word	0x20000152
 8001024:	20000151 	.word	0x20000151
 8001028:	20000008 	.word	0x20000008
 800102c:	0800c890 	.word	0x0800c890
 8001030:	2000ce88 	.word	0x2000ce88
 8001034:	200000a8 	.word	0x200000a8
 8001038:	200000b4 	.word	0x200000b4

0800103c <MOD_RegisterModule>:

/***************************************************************************************************************
*     M O D _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_RegisterModule(void){
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,8);
 8001046:	4aa3      	ldr	r2, [pc, #652]	; (80012d4 <MOD_RegisterModule+0x298>)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001050:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MC RX 0x500 Announcement: FW=%02x, HW=%02x, MFG=%02x, PN=%02x, ID=%08x",announcement.moduleFw, announcement.moduleHw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 8001054:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <MOD_RegisterModule+0x29c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d012      	beq.n	8001086 <MOD_RegisterModule+0x4a>
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	4618      	mov	r0, r3
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	461c      	mov	r4, r3
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	9102      	str	r1, [sp, #8]
 8001070:	9201      	str	r2, [sp, #4]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4623      	mov	r3, r4
 8001076:	4602      	mov	r2, r0
 8001078:	4998      	ldr	r1, [pc, #608]	; (80012dc <MOD_RegisterModule+0x2a0>)
 800107a:	4899      	ldr	r0, [pc, #612]	; (80012e0 <MOD_RegisterModule+0x2a4>)
 800107c:	f00a f850 	bl	800b120 <siprintf>
 8001080:	4897      	ldr	r0, [pc, #604]	; (80012e0 <MOD_RegisterModule+0x2a4>)
 8001082:	f003 fbd5 	bl	8004830 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8001086:	4b97      	ldr	r3, [pc, #604]	; (80012e4 <MOD_RegisterModule+0x2a8>)
 8001088:	7c1b      	ldrb	r3, [r3, #16]
 800108a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800108c:	2300      	movs	r3, #0
 800108e:	75bb      	strb	r3, [r7, #22]
 8001090:	e027      	b.n	80010e2 <MOD_RegisterModule+0xa6>
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId))
 8001092:	7bba      	ldrb	r2, [r7, #14]
 8001094:	7dbb      	ldrb	r3, [r7, #22]
 8001096:	4994      	ldr	r1, [pc, #592]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 8001098:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800109c:	fb00 f303 	mul.w	r3, r0, r3
 80010a0:	440b      	add	r3, r1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d119      	bne.n	80010dc <MOD_RegisterModule+0xa0>
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	7dbb      	ldrb	r3, [r7, #22]
 80010ac:	498e      	ldr	r1, [pc, #568]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80010ae:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80010b2:	fb00 f303 	mul.w	r3, r0, r3
 80010b6:	440b      	add	r3, r1
 80010b8:	3301      	adds	r3, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d10d      	bne.n	80010dc <MOD_RegisterModule+0xa0>
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	7dbb      	ldrb	r3, [r7, #22]
 80010c4:	4988      	ldr	r1, [pc, #544]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80010c6:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80010ca:	fb00 f303 	mul.w	r3, r0, r3
 80010ce:	440b      	add	r3, r1
 80010d0:	3304      	adds	r3, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d101      	bne.n	80010dc <MOD_RegisterModule+0xa0>
      moduleIndex = index; // module is already registered, save the index
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80010dc:	7dbb      	ldrb	r3, [r7, #22]
 80010de:	3301      	adds	r3, #1
 80010e0:	75bb      	strb	r3, [r7, #22]
 80010e2:	4b80      	ldr	r3, [pc, #512]	; (80012e4 <MOD_RegisterModule+0x2a8>)
 80010e4:	7c1b      	ldrb	r3, [r3, #16]
 80010e6:	7dba      	ldrb	r2, [r7, #22]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3d2      	bcc.n	8001092 <MOD_RegisterModule+0x56>
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 80010ec:	4b7d      	ldr	r3, [pc, #500]	; (80012e4 <MOD_RegisterModule+0x2a8>)
 80010ee:	7c1b      	ldrb	r3, [r3, #16]
 80010f0:	7dfa      	ldrb	r2, [r7, #23]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d168      	bne.n	80011c8 <MOD_RegisterModule+0x18c>
    module[moduleIndex].fwVersion = announcement.moduleFw;
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	7b38      	ldrb	r0, [r7, #12]
 80010fa:	4a7b      	ldr	r2, [pc, #492]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80010fc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	4413      	add	r3, r2
 8001106:	330a      	adds	r3, #10
 8001108:	4602      	mov	r2, r0
 800110a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].hwVersion = announcement.moduleHw;
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	7b78      	ldrb	r0, [r7, #13]
 8001110:	4a75      	ldr	r2, [pc, #468]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 8001112:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001116:	fb01 f303 	mul.w	r3, r1, r3
 800111a:	4413      	add	r3, r2
 800111c:	3309      	adds	r3, #9
 800111e:	4602      	mov	r2, r0
 8001120:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].partId =  announcement.modulePartId;
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	7bf8      	ldrb	r0, [r7, #15]
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 8001128:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800112c:	fb01 f303 	mul.w	r3, r1, r3
 8001130:	4413      	add	r3, r2
 8001132:	3301      	adds	r3, #1
 8001134:	4602      	mov	r2, r0
 8001136:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId = announcement.moduleMfgId;
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	7bb8      	ldrb	r0, [r7, #14]
 800113c:	4a6a      	ldr	r2, [pc, #424]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 800113e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	4413      	add	r3, r2
 8001148:	4602      	mov	r2, r0
 800114a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId = announcement.moduleUniqueId;
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4965      	ldr	r1, [pc, #404]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 8001152:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001156:	fb00 f303 	mul.w	r3, r0, r3
 800115a:	440b      	add	r3, r1
 800115c:	3304      	adds	r3, #4
 800115e:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks = 0;
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	4a61      	ldr	r2, [pc, #388]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 8001164:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001168:	fb01 f303 	mul.w	r3, r1, r3
 800116c:	4413      	add	r3, r2
 800116e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <MOD_RegisterModule+0x2b0>)
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	495a      	ldr	r1, [pc, #360]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 800117e:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001182:	fb00 f303 	mul.w	r3, r0, r3
 8001186:	440b      	add	r3, r1
 8001188:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800118c:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusRequested = true;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 8001192:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	4413      	add	r3, r2
 800119c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <MOD_RegisterModule+0x2a8>)
 80011a6:	7c1b      	ldrb	r3, [r3, #16]
 80011a8:	3301      	adds	r3, #1
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <MOD_RegisterModule+0x2a8>)
 80011ae:	741a      	strb	r2, [r3, #16]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <MOD_RegisterModule+0x2a8>)
 80011b4:	7c10      	ldrb	r0, [r2, #16]
 80011b6:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80011b8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80011bc:	fb01 f303 	mul.w	r3, r1, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	3308      	adds	r3, #8
 80011c4:	4602      	mov	r2, r0
 80011c6:	701a      	strb	r2, [r3, #0]
  }
  // send the details back to the module
  registration.moduleId = module[moduleIndex].moduleId;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80011cc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	3308      	adds	r3, #8
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	713b      	strb	r3, [r7, #4]
  registration.controllerId = CONTROLLER_ID;
 80011dc:	2301      	movs	r3, #1
 80011de:	717b      	strb	r3, [r7, #5]
  registration.modulePartId = module[moduleIndex].partId;
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	4a41      	ldr	r2, [pc, #260]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80011e4:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	3301      	adds	r3, #1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId = module[moduleIndex].mfgId;
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	4a3c      	ldr	r2, [pc, #240]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 80011f8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	4a37      	ldr	r2, [pc, #220]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 800120a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	3304      	adds	r3, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, 8);
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <MOD_RegisterModule+0x2b8>)
 800122e:	461a      	mov	r2, r3
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001236:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 800123a:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 800123c:	8813      	ldrh	r3, [r2, #0]
 800123e:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8001242:	f361 030a 	bfi	r3, r1, #0, #11
 8001246:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <MOD_RegisterModule+0x2ac>)
 800124c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	4413      	add	r3, r2
 8001256:	3308      	adds	r3, #8
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001260:	4923      	ldr	r1, [pc, #140]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 8001262:	680b      	ldr	r3, [r1, #0]
 8001264:	f362 23dc 	bfi	r3, r2, #11, #18
 8001268:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800126a:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 800126c:	7913      	ldrb	r3, [r2, #4]
 800126e:	f36f 1386 	bfc	r3, #6, #1
 8001272:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8001274:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 8001276:	7913      	ldrb	r3, [r2, #4]
 8001278:	2108      	movs	r1, #8
 800127a:	f361 0303 	bfi	r3, r1, #0, #4
 800127e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 8001282:	7913      	ldrb	r3, [r2, #4]
 8001284:	f36f 13c7 	bfc	r3, #7, #1
 8001288:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <MOD_RegisterModule+0x2b4>)
 800128c:	7913      	ldrb	r3, [r2, #4]
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MOD_RegisterModule+0x29c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d012      	beq.n	80012c6 <MOD_RegisterModule+0x28a>
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	461c      	mov	r4, r3
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	9102      	str	r1, [sp, #8]
 80012b0:	9201      	str	r2, [sp, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4623      	mov	r3, r4
 80012b6:	4602      	mov	r2, r0
 80012b8:	490f      	ldr	r1, [pc, #60]	; (80012f8 <MOD_RegisterModule+0x2bc>)
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MOD_RegisterModule+0x2a4>)
 80012bc:	f009 ff30 	bl	800b120 <siprintf>
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MOD_RegisterModule+0x2a4>)
 80012c2:	f003 fab5 	bl	8004830 <serialOut>
  MOD_TransmitMessageQueue(CAN2);                     // Send it
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fe5e 	bl	8000f88 <MOD_TransmitMessageQueue>
}
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	20000110 	.word	0x20000110
 80012d8:	20000008 	.word	0x20000008
 80012dc:	0800c8a0 	.word	0x0800c8a0
 80012e0:	2000ce88 	.word	0x2000ce88
 80012e4:	2000c754 	.word	0x2000c754
 80012e8:	20000154 	.word	0x20000154
 80012ec:	2000cef0 	.word	0x2000cef0
 80012f0:	200000a8 	.word	0x200000a8
 80012f4:	200000b4 	.word	0x200000b4
 80012f8:	0800c8e8 	.word	0x0800c8e8

080012fc <MOD_DeRegisterAllModules>:

/***************************************************************************************************************
*     M O D _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_DeRegisterAllModules(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = CONTROLLER_ID;
 8001302:	2301      	movs	r3, #1
 8001304:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	793a      	ldrb	r2, [r7, #4]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, 1);
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MOD_DeRegisterAllModules+0x90>)
 800131c:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 8001320:	8813      	ldrh	r3, [r2, #0]
 8001322:	f240 511e 	movw	r1, #1310	; 0x51e
 8001326:	f361 030a 	bfi	r3, r1, #0, #11
 800132a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 800132c:	4a16      	ldr	r2, [pc, #88]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f36f 23dc 	bfc	r3, #11, #18
 8001334:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 8001338:	7913      	ldrb	r3, [r2, #4]
 800133a:	f36f 1386 	bfc	r3, #6, #1
 800133e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 8001342:	7913      	ldrb	r3, [r2, #4]
 8001344:	2101      	movs	r1, #1
 8001346:	f361 0303 	bfi	r3, r1, #0, #4
 800134a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 800134e:	7913      	ldrb	r3, [r2, #4]
 8001350:	f36f 13c7 	bfc	r3, #7, #1
 8001354:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <MOD_DeRegisterAllModules+0x8c>)
 8001358:	7913      	ldrb	r3, [r2, #4]
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MOD_DeRegisterAllModules+0x94>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <MOD_DeRegisterAllModules+0x7e>
 800136c:	4909      	ldr	r1, [pc, #36]	; (8001394 <MOD_DeRegisterAllModules+0x98>)
 800136e:	480a      	ldr	r0, [pc, #40]	; (8001398 <MOD_DeRegisterAllModules+0x9c>)
 8001370:	f009 fed6 	bl	800b120 <siprintf>
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <MOD_DeRegisterAllModules+0x9c>)
 8001376:	f003 fa5b 	bl	8004830 <serialOut>
    MOD_TransmitMessageQueue(CAN2);                     // Send it
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fe04 	bl	8000f88 <MOD_TransmitMessageQueue>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000a8 	.word	0x200000a8
 800138c:	200000b4 	.word	0x200000b4
 8001390:	20000008 	.word	0x20000008
 8001394:	0800c930 	.word	0x0800c930
 8001398:	2000ce88 	.word	0x2000ce88

0800139c <MOD_IsolateAllModules>:

/***************************************************************************************************************
*     M O D _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_IsolateAllModules(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2201      	movs	r2, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 fe73 	bl	800b094 <memset>

  // configure the packet
  isolate.controllerId = CONTROLLER_ID;
 80013ae:	2301      	movs	r3, #1
 80013b0:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	793a      	ldrb	r2, [r7, #4]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, 1);
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MOD_IsolateAllModules+0x9c>)
 80013c8:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013cc:	8813      	ldrh	r3, [r2, #0]
 80013ce:	f240 511f 	movw	r1, #1311	; 0x51f
 80013d2:	f361 030a 	bfi	r3, r1, #0, #11
 80013d6:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f36f 23dc 	bfc	r3, #11, #18
 80013e0:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013e4:	7913      	ldrb	r3, [r2, #4]
 80013e6:	f36f 1386 	bfc	r3, #6, #1
 80013ea:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013ee:	7913      	ldrb	r3, [r2, #4]
 80013f0:	2101      	movs	r1, #1
 80013f2:	f361 0303 	bfi	r3, r1, #0, #4
 80013f6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <MOD_IsolateAllModules+0x98>)
 80013fa:	7913      	ldrb	r3, [r2, #4]
 80013fc:	f36f 13c7 	bfc	r3, #7, #1
 8001400:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <MOD_IsolateAllModules+0x98>)
 8001404:	7913      	ldrb	r3, [r2, #4]
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MOD_IsolateAllModules+0xa0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <MOD_IsolateAllModules+0x8a>
 8001418:	4909      	ldr	r1, [pc, #36]	; (8001440 <MOD_IsolateAllModules+0xa4>)
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <MOD_IsolateAllModules+0xa8>)
 800141c:	f009 fe80 	bl	800b120 <siprintf>
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MOD_IsolateAllModules+0xa8>)
 8001422:	f003 fa05 	bl	8004830 <serialOut>
  MOD_TransmitMessageQueue(CAN2);                     // Send it
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fdae 	bl	8000f88 <MOD_TransmitMessageQueue>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000a8 	.word	0x200000a8
 8001438:	200000b4 	.word	0x200000b4
 800143c:	20000008 	.word	0x20000008
 8001440:	0800c954 	.word	0x0800c954
 8001444:	2000ce88 	.word	0x2000ce88

08001448 <MOD_RequestModuleStatus>:

/***************************************************************************************************************
*     M O D _ R e q u e s t M o d u l e S t a t u s                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_RequestModuleStatus(uint8_t moduleId){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <MOD_RequestModuleStatus+0xf4>)
 8001454:	7c1b      	ldrb	r3, [r3, #16]
 8001456:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]
 800145c:	e010      	b.n	8001480 <MOD_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	4a37      	ldr	r2, [pc, #220]	; (8001540 <MOD_RequestModuleStatus+0xf8>)
 8001462:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	4413      	add	r3, r2
 800146c:	3308      	adds	r3, #8
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	429a      	cmp	r2, r3
 8001474:	d101      	bne.n	800147a <MOD_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	3301      	adds	r3, #1
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <MOD_RequestModuleStatus+0xf4>)
 8001482:	7c1b      	ldrb	r3, [r3, #16]
 8001484:	7bba      	ldrb	r2, [r7, #14]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3e9      	bcc.n	800145e <MOD_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MOD_RequestModuleStatus+0xf4>)
 800148c:	7c1b      	ldrb	r3, [r3, #16]
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	429a      	cmp	r2, r3
 8001492:	d04e      	beq.n	8001532 <MOD_RequestModuleStatus+0xea>
    // TO DO Handle status from an unregistered module
  }else{

    // set request flag
    module[moduleIndex].statusRequested = true;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <MOD_RequestModuleStatus+0xf8>)
 8001498:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]

    // request cell detail packet for cell 0
    statusRequest.moduleId = moduleId;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	733b      	strb	r3, [r7, #12]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	7b3a      	ldrb	r2, [r7, #12]

    memcpy(txd, &statusRequest, 1);
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MOD_RequestModuleStatus+0x100>)
 80014c4:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014c8:	8813      	ldrh	r3, [r2, #0]
 80014ca:	f240 5112 	movw	r1, #1298	; 0x512
 80014ce:	f361 030a 	bfi	r3, r1, #0, #11
 80014d2:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014dc:	680b      	ldr	r3, [r1, #0]
 80014de:	f362 23dc 	bfi	r3, r2, #11, #18
 80014e2:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014e6:	7913      	ldrb	r3, [r2, #4]
 80014e8:	f36f 1386 	bfc	r3, #6, #1
 80014ec:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014f0:	7913      	ldrb	r3, [r2, #4]
 80014f2:	2101      	movs	r1, #1
 80014f4:	f361 0303 	bfi	r3, r1, #0, #4
 80014f8:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 80014fc:	7913      	ldrb	r3, [r2, #4]
 80014fe:	f36f 13c7 	bfc	r3, #7, #1
 8001502:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <MOD_RequestModuleStatus+0xfc>)
 8001506:	7913      	ldrb	r3, [r2, #4]
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MOD_RequestModuleStatus+0x104>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <MOD_RequestModuleStatus+0xe4>
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	461a      	mov	r2, r3
 800151e:	490c      	ldr	r1, [pc, #48]	; (8001550 <MOD_RequestModuleStatus+0x108>)
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MOD_RequestModuleStatus+0x10c>)
 8001522:	f009 fdfd 	bl	800b120 <siprintf>
 8001526:	480b      	ldr	r0, [pc, #44]	; (8001554 <MOD_RequestModuleStatus+0x10c>)
 8001528:	f003 f982 	bl	8004830 <serialOut>
    MOD_TransmitMessageQueue(CAN2);                    // Send it
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fd2b 	bl	8000f88 <MOD_TransmitMessageQueue>
  }
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000c754 	.word	0x2000c754
 8001540:	20000154 	.word	0x20000154
 8001544:	200000a8 	.word	0x200000a8
 8001548:	200000b4 	.word	0x200000b4
 800154c:	20000008 	.word	0x20000008
 8001550:	0800c974 	.word	0x0800c974
 8001554:	2000ce88 	.word	0x2000ce88

08001558 <MOD_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M O D _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MOD_FindMaxVoltageModule(void){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0

  uint8_t index;
  uint16_t maxVoltage = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <MOD_FindMaxVoltageModule+0x94>)
 8001564:	7c1b      	ldrb	r3, [r3, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e031      	b.n	80015d4 <MOD_FindMaxVoltageModule+0x7c>
    if(module[index].mmv > maxVoltage && module[index].fault == false){
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <MOD_FindMaxVoltageModule+0x98>)
 8001574:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	330c      	adds	r3, #12
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	88ba      	ldrh	r2, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d222      	bcs.n	80015ce <MOD_FindMaxVoltageModule+0x76>
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <MOD_FindMaxVoltageModule+0x98>)
 800158c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <MOD_FindMaxVoltageModule+0x76>
      maxVoltage = module[index].mmv;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <MOD_FindMaxVoltageModule+0x98>)
 80015aa:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	330c      	adds	r3, #12
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <MOD_FindMaxVoltageModule+0x98>)
 80015be:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	3308      	adds	r3, #8
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	70fb      	strb	r3, [r7, #3]
  for(index = 0; index < pack.moduleCount; index++){
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	3301      	adds	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <MOD_FindMaxVoltageModule+0x94>)
 80015d6:	7c1b      	ldrb	r3, [r3, #16]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3c8      	bcc.n	8001570 <MOD_FindMaxVoltageModule+0x18>
    }
  }
  return moduleId;
 80015de:	78fb      	ldrb	r3, [r7, #3]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	2000c754 	.word	0x2000c754
 80015f0:	20000154 	.word	0x20000154

080015f4 <MOD_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessModuleStatus1(void){
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	b08b      	sub	sp, #44	; 0x2c
 80015f8:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_1 status1;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status1,0,12);
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	220c      	movs	r2, #12
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f009 fd47 	bl	800b094 <memset>
  memcpy(&status1, rxd, 12);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	220c      	movs	r2, #12
 800160a:	498e      	ldr	r1, [pc, #568]	; (8001844 <MOD_ProcessModuleStatus1+0x250>)
 800160c:	4618      	mov	r0, r3
 800160e:	f009 fd33 	bl	800b078 <memcpy>

  //find the module index
  moduleIndex = pack.moduleCount;
 8001612:	4b8d      	ldr	r3, [pc, #564]	; (8001848 <MOD_ProcessModuleStatus1+0x254>)
 8001614:	7c1b      	ldrb	r3, [r3, #16]
 8001616:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001618:	2300      	movs	r3, #0
 800161a:	73bb      	strb	r3, [r7, #14]
 800161c:	e015      	b.n	800164a <MOD_ProcessModuleStatus1+0x56>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800161e:	4b8b      	ldr	r3, [pc, #556]	; (800184c <MOD_ProcessModuleStatus1+0x258>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	4989      	ldr	r1, [pc, #548]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 800162a:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800162e:	fb00 f303 	mul.w	r3, r0, r3
 8001632:	440b      	add	r3, r1
 8001634:	3308      	adds	r3, #8
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800163c:	429a      	cmp	r2, r3
 800163e:	d101      	bne.n	8001644 <MOD_ProcessModuleStatus1+0x50>
      moduleIndex = index; // found it - save the index
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	3301      	adds	r3, #1
 8001648:	73bb      	strb	r3, [r7, #14]
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <MOD_ProcessModuleStatus1+0x254>)
 800164c:	7c1b      	ldrb	r3, [r3, #16]
 800164e:	7bba      	ldrb	r2, [r7, #14]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3e4      	bcc.n	800161e <MOD_ProcessModuleStatus1+0x2a>
    }
  if (moduleIndex == pack.moduleCount){
 8001654:	4b7c      	ldr	r3, [pc, #496]	; (8001848 <MOD_ProcessModuleStatus1+0x254>)
 8001656:	7c1b      	ldrb	r3, [r3, #16]
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	429a      	cmp	r2, r3
 800165c:	f000 80ed 	beq.w	800183a <MOD_ProcessModuleStatus1+0x246>
    // TO DO Handle status from an unregistered module
  }else{
    //clear status request flag
    module[moduleIndex].statusRequested = false;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	4a7b      	ldr	r2, [pc, #492]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 8001664:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]

    // save the data
    module[moduleIndex].mmc                   = status1.moduleMmc;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	8938      	ldrh	r0, [r7, #8]
 800167a:	4a75      	ldr	r2, [pc, #468]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 800167c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	330e      	adds	r3, #14
 8001688:	4602      	mov	r2, r0
 800168a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv                   = status1.moduleMmv;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	8978      	ldrh	r0, [r7, #10]
 8001690:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 8001692:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4413      	add	r3, r2
 800169c:	330c      	adds	r3, #12
 800169e:	4602      	mov	r2, r0
 80016a0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc                   = status1.moduleSoc;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	7978      	ldrb	r0, [r7, #5]
 80016a6:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80016a8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3320      	adds	r3, #32
 80016b4:	4602      	mov	r2, r0
 80016b6:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh                   = status1.moduleSoh;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	79b8      	ldrb	r0, [r7, #6]
 80016bc:	4a64      	ldr	r2, [pc, #400]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80016be:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3321      	adds	r3, #33	; 0x21
 80016ca:	4602      	mov	r2, r0
 80016cc:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].current_state         = status1.moduleState;
 80016ce:	793b      	ldrb	r3, [r7, #4]
 80016d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	4610      	mov	r0, r2
 80016da:	4a5d      	ldr	r2, [pc, #372]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80016dc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	331d      	adds	r3, #29
 80016e8:	4602      	mov	r2, r0
 80016ea:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status                = status1.moduleStatus;
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	4610      	mov	r0, r2
 80016f8:	4a55      	ldr	r2, [pc, #340]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80016fa:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	331c      	adds	r3, #28
 8001706:	4602      	mov	r2, r0
 8001708:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount             = status1.cellCount;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	79f8      	ldrb	r0, [r7, #7]
 800170e:	4a50      	ldr	r2, [pc, #320]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 8001710:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	3322      	adds	r3, #34	; 0x22
 800171c:	4602      	mov	r2, r0
 800171e:	701a      	strb	r2, [r3, #0]

    // update last contact time
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <MOD_ProcessModuleStatus1+0x260>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	b290      	uxth	r0, r2
 800172a:	4a49      	ldr	r2, [pc, #292]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 800172c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800173a:	4602      	mov	r2, r0
 800173c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <MOD_ProcessModuleStatus1+0x264>)
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4942      	ldr	r1, [pc, #264]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 8001746:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800174a:	fb00 f303 	mul.w	r3, r0, r3
 800174e:	440b      	add	r3, r1
 8001750:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8001754:	601a      	str	r2, [r3, #0]

   if(module[moduleIndex].current_state ==  module[moduleIndex].command.commandedState){
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4a3d      	ldr	r2, [pc, #244]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 800175a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	331d      	adds	r3, #29
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	4939      	ldr	r1, [pc, #228]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 800176c:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001770:	fb00 f303 	mul.w	r3, r0, r3
 8001774:	440b      	add	r3, r1
 8001776:	331e      	adds	r3, #30
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d109      	bne.n	8001792 <MOD_ProcessModuleStatus1+0x19e>
     // update the command status if the current state is equal to the commmanded state
     module[moduleIndex].command.commandStatus = commandActive;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4a33      	ldr	r2, [pc, #204]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 8001782:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	331f      	adds	r3, #31
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
   }


    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <MOD_ProcessModuleStatus1+0x268>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d04d      	beq.n	800183a <MOD_ProcessModuleStatus1+0x246>
        rxObj.bF.id.EID,module[moduleIndex].current_state,module[moduleIndex].cellHiTemp,module[moduleIndex].cellLoTemp,
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <MOD_ProcessModuleStatus1+0x258>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 80017a6:	469c      	mov	ip, r3
        rxObj.bF.id.EID,module[moduleIndex].current_state,module[moduleIndex].cellHiTemp,module[moduleIndex].cellLoTemp,
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80017ac:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	331d      	adds	r3, #29
 80017b8:	781b      	ldrb	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 80017ba:	469e      	mov	lr, r3
        rxObj.bF.id.EID,module[moduleIndex].current_state,module[moduleIndex].cellHiTemp,module[moduleIndex].cellLoTemp,
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80017c0:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3310      	adds	r3, #16
 80017cc:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 80017ce:	4618      	mov	r0, r3
        rxObj.bF.id.EID,module[moduleIndex].current_state,module[moduleIndex].cellHiTemp,module[moduleIndex].cellLoTemp,
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80017d4:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3312      	adds	r3, #18
 80017e0:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 80017e2:	461c      	mov	r4, r3
        module[moduleIndex].mmv,module[moduleIndex].mmc,module[moduleIndex].soc); serialOut(tempBuffer);}
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80017e8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	330c      	adds	r3, #12
 80017f4:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 80017f6:	461d      	mov	r5, r3
        module[moduleIndex].mmv,module[moduleIndex].mmc,module[moduleIndex].soc); serialOut(tempBuffer);}
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 80017fc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	330e      	adds	r3, #14
 8001808:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 800180a:	461e      	mov	r6, r3
        module[moduleIndex].mmv,module[moduleIndex].mmc,module[moduleIndex].soc); serialOut(tempBuffer);}
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <MOD_ProcessModuleStatus1+0x25c>)
 8001810:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3320      	adds	r3, #32
 800181c:	781b      	ldrb	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, HIT=%d, LOT=%d, MMV=%d, MMC=%d, SOC=%d",
 800181e:	9304      	str	r3, [sp, #16]
 8001820:	9603      	str	r6, [sp, #12]
 8001822:	9502      	str	r5, [sp, #8]
 8001824:	9401      	str	r4, [sp, #4]
 8001826:	9000      	str	r0, [sp, #0]
 8001828:	4673      	mov	r3, lr
 800182a:	4662      	mov	r2, ip
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <MOD_ProcessModuleStatus1+0x26c>)
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MOD_ProcessModuleStatus1+0x270>)
 8001830:	f009 fc76 	bl	800b120 <siprintf>
        module[moduleIndex].mmv,module[moduleIndex].mmc,module[moduleIndex].soc); serialOut(tempBuffer);}
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <MOD_ProcessModuleStatus1+0x270>)
 8001836:	f002 fffb 	bl	8004830 <serialOut>


  }
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001842:	bf00      	nop
 8001844:	20000110 	.word	0x20000110
 8001848:	2000c754 	.word	0x2000c754
 800184c:	20000104 	.word	0x20000104
 8001850:	20000154 	.word	0x20000154
 8001854:	2000ca68 	.word	0x2000ca68
 8001858:	2000cef0 	.word	0x2000cef0
 800185c:	20000008 	.word	0x20000008
 8001860:	0800c998 	.word	0x0800c998
 8001864:	2000ce88 	.word	0x2000ce88

08001868 <MOD_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessModuleStatus2(void){
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,12);
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	220c      	movs	r2, #12
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f009 fc0d 	bl	800b094 <memset>
  memcpy(&status2, rxd, 12);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	220c      	movs	r2, #12
 800187e:	4954      	ldr	r1, [pc, #336]	; (80019d0 <MOD_ProcessModuleStatus2+0x168>)
 8001880:	4618      	mov	r0, r3
 8001882:	f009 fbf9 	bl	800b078 <memcpy>

  //find the module index
  moduleIndex = pack.moduleCount;
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <MOD_ProcessModuleStatus2+0x16c>)
 8001888:	7c1b      	ldrb	r3, [r3, #16]
 800188a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 800188c:	2300      	movs	r3, #0
 800188e:	73bb      	strb	r3, [r7, #14]
 8001890:	e015      	b.n	80018be <MOD_ProcessModuleStatus2+0x56>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8001892:	4b51      	ldr	r3, [pc, #324]	; (80019d8 <MOD_ProcessModuleStatus2+0x170>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	494f      	ldr	r1, [pc, #316]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 800189e:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80018a2:	fb00 f303 	mul.w	r3, r0, r3
 80018a6:	440b      	add	r3, r1
 80018a8:	3308      	adds	r3, #8
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d101      	bne.n	80018b8 <MOD_ProcessModuleStatus2+0x50>
      moduleIndex = index; // found it - save the index
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73bb      	strb	r3, [r7, #14]
 80018be:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <MOD_ProcessModuleStatus2+0x16c>)
 80018c0:	7c1b      	ldrb	r3, [r3, #16]
 80018c2:	7bba      	ldrb	r2, [r7, #14]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3e4      	bcc.n	8001892 <MOD_ProcessModuleStatus2+0x2a>
    }
  if (moduleIndex == pack.moduleCount){
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <MOD_ProcessModuleStatus2+0x16c>)
 80018ca:	7c1b      	ldrb	r3, [r3, #16]
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d079      	beq.n	80019c6 <MOD_ProcessModuleStatus2+0x15e>
    // TO DO Handle status from an unregistered module
  }else{
    //clear status request flag
    module[moduleIndex].statusRequested = false;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	4a41      	ldr	r2, [pc, #260]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 80018d6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

    // save the data
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	8938      	ldrh	r0, [r7, #8]
 80018ec:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 80018ee:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	331a      	adds	r3, #26
 80018fa:	4602      	mov	r2, r0
 80018fc:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	88f8      	ldrh	r0, [r7, #6]
 8001902:	4a36      	ldr	r2, [pc, #216]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 8001904:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3316      	adds	r3, #22
 8001910:	4602      	mov	r2, r0
 8001912:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	88b8      	ldrh	r0, [r7, #4]
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 800191a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3318      	adds	r3, #24
 8001926:	4602      	mov	r2, r0
 8001928:	801a      	strh	r2, [r3, #0]

    // update last contact time
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <MOD_ProcessModuleStatus2+0x178>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	b290      	uxth	r0, r2
 8001934:	4a29      	ldr	r2, [pc, #164]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 8001936:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001944:	4602      	mov	r2, r0
 8001946:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <MOD_ProcessModuleStatus2+0x17c>)
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4923      	ldr	r1, [pc, #140]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 8001950:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001954:	fb00 f303 	mul.w	r3, r0, r3
 8001958:	440b      	add	r3, r1
 800195a:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800195e:	601a      	str	r2, [r3, #0]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MOD_ProcessModuleStatus2+0x180>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d02c      	beq.n	80019c6 <MOD_ProcessModuleStatus2+0x15e>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MOD_ProcessModuleStatus2+0x170>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 8001974:	461c      	mov	r4, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 800197a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	331a      	adds	r3, #26
 8001986:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 8001988:	461d      	mov	r5, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 800198e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3316      	adds	r3, #22
 800199a:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 800199c:	4618      	mov	r0, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <MOD_ProcessModuleStatus2+0x174>)
 80019a2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3318      	adds	r3, #24
 80019ae:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	9000      	str	r0, [sp, #0]
 80019b4:	462b      	mov	r3, r5
 80019b6:	4622      	mov	r2, r4
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <MOD_ProcessModuleStatus2+0x184>)
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MOD_ProcessModuleStatus2+0x188>)
 80019bc:	f009 fbb0 	bl	800b120 <siprintf>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <MOD_ProcessModuleStatus2+0x188>)
 80019c2:	f002 ff35 	bl	8004830 <serialOut>

    //TODO - only do this when not on
    // if(pack.state != packOn) MOD_RequestCellDetail(module[moduleIndex].moduleId);
  }
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bdb0      	pop	{r4, r5, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000110 	.word	0x20000110
 80019d4:	2000c754 	.word	0x2000c754
 80019d8:	20000104 	.word	0x20000104
 80019dc:	20000154 	.word	0x20000154
 80019e0:	2000ca68 	.word	0x2000ca68
 80019e4:	2000cef0 	.word	0x2000cef0
 80019e8:	20000008 	.word	0x20000008
 80019ec:	0800c9e8 	.word	0x0800c9e8
 80019f0:	2000ce88 	.word	0x2000ce88

080019f4 <MOD_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessModuleStatus3(void){
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,12);
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	220c      	movs	r2, #12
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f009 fb47 	bl	800b094 <memset>
  memcpy(&status3, rxd, 12);
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	220c      	movs	r2, #12
 8001a0a:	4954      	ldr	r1, [pc, #336]	; (8001b5c <MOD_ProcessModuleStatus3+0x168>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f009 fb33 	bl	800b078 <memcpy>

  //find the module index
  moduleIndex = pack.moduleCount;
 8001a12:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <MOD_ProcessModuleStatus3+0x16c>)
 8001a14:	7c1b      	ldrb	r3, [r3, #16]
 8001a16:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73bb      	strb	r3, [r7, #14]
 8001a1c:	e015      	b.n	8001a4a <MOD_ProcessModuleStatus3+0x56>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8001a1e:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <MOD_ProcessModuleStatus3+0x170>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	494f      	ldr	r1, [pc, #316]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001a2a:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001a2e:	fb00 f303 	mul.w	r3, r0, r3
 8001a32:	440b      	add	r3, r1
 8001a34:	3308      	adds	r3, #8
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d101      	bne.n	8001a44 <MOD_ProcessModuleStatus3+0x50>
      moduleIndex = index; // found it - save the index
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001a44:	7bbb      	ldrb	r3, [r7, #14]
 8001a46:	3301      	adds	r3, #1
 8001a48:	73bb      	strb	r3, [r7, #14]
 8001a4a:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <MOD_ProcessModuleStatus3+0x16c>)
 8001a4c:	7c1b      	ldrb	r3, [r3, #16]
 8001a4e:	7bba      	ldrb	r2, [r7, #14]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3e4      	bcc.n	8001a1e <MOD_ProcessModuleStatus3+0x2a>
    }
  if (moduleIndex == pack.moduleCount){
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <MOD_ProcessModuleStatus3+0x16c>)
 8001a56:	7c1b      	ldrb	r3, [r3, #16]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d079      	beq.n	8001b52 <MOD_ProcessModuleStatus3+0x15e>
    // TO DO Handle status from an unregistered module
  }else{
    //clear status request flag
    module[moduleIndex].statusRequested = false;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	4a41      	ldr	r2, [pc, #260]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001a62:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

    // save the data
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	8938      	ldrh	r0, [r7, #8]
 8001a78:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001a7a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3314      	adds	r3, #20
 8001a86:	4602      	mov	r2, r0
 8001a88:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	88f8      	ldrh	r0, [r7, #6]
 8001a8e:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001a90:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	88b8      	ldrh	r0, [r7, #4]
 8001aa4:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001aa6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3312      	adds	r3, #18
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	801a      	strh	r2, [r3, #0]

    // update last contact time
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MOD_ProcessModuleStatus3+0x178>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	b290      	uxth	r0, r2
 8001ac0:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001ac2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <MOD_ProcessModuleStatus3+0x17c>)
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	4923      	ldr	r1, [pc, #140]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001adc:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001ae0:	fb00 f303 	mul.w	r3, r0, r3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8001aea:	601a      	str	r2, [r3, #0]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <MOD_ProcessModuleStatus3+0x180>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d02c      	beq.n	8001b52 <MOD_ProcessModuleStatus3+0x15e>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MOD_ProcessModuleStatus3+0x170>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8001b00:	461c      	mov	r4, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001b06:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3314      	adds	r3, #20
 8001b12:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8001b14:	461d      	mov	r5, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001b1a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3310      	adds	r3, #16
 8001b26:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8001b28:	4618      	mov	r0, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <MOD_ProcessModuleStatus3+0x174>)
 8001b2e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3312      	adds	r3, #18
 8001b3a:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	9000      	str	r0, [sp, #0]
 8001b40:	462b      	mov	r3, r5
 8001b42:	4622      	mov	r2, r4
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <MOD_ProcessModuleStatus3+0x184>)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MOD_ProcessModuleStatus3+0x188>)
 8001b48:	f009 faea 	bl	800b120 <siprintf>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <MOD_ProcessModuleStatus3+0x188>)
 8001b4e:	f002 fe6f 	bl	8004830 <serialOut>

    //TODO - only do this when not on
    // if(pack.state != packOn) MOD_RequestCellDetail(module[moduleIndex].moduleId);
  }
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000110 	.word	0x20000110
 8001b60:	2000c754 	.word	0x2000c754
 8001b64:	20000104 	.word	0x20000104
 8001b68:	20000154 	.word	0x20000154
 8001b6c:	2000ca68 	.word	0x2000ca68
 8001b70:	2000cef0 	.word	0x2000cef0
 8001b74:	20000008 	.word	0x20000008
 8001b78:	0800ca1c 	.word	0x0800ca1c
 8001b7c:	2000ce88 	.word	0x2000ce88

08001b80 <MOD_TransmitState>:


/***************************************************************************************************************
*     M O D _ T r a n s m i t S t a t e C h a n g e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_TransmitState(uint8_t moduleId, moduleState state){
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b08d      	sub	sp, #52	; 0x34
 8001b84:	af08      	add	r7, sp, #32
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // request cell detail packet for cell 0
  stateChange.moduleId = moduleId;
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	733b      	strb	r3, [r7, #12]
  stateChange.state = state;
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	7b7b      	ldrb	r3, [r7, #13]
 8001b9e:	f362 0303 	bfi	r3, r2, #0, #4
 8001ba2:	737b      	strb	r3, [r7, #13]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001baa:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	89ba      	ldrh	r2, [r7, #12]

  memcpy(txd, &stateChange, 2);
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001bba:	801a      	strh	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 8001bbc:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bbe:	8813      	ldrh	r3, [r2, #0]
 8001bc0:	f240 5114 	movw	r1, #1300	; 0x514
 8001bc4:	f361 030a 	bfi	r3, r1, #0, #11
 8001bc8:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001bd0:	4944      	ldr	r1, [pc, #272]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bd2:	680b      	ldr	r3, [r1, #0]
 8001bd4:	f362 23dc 	bfi	r3, r2, #11, #18
 8001bd8:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8001bda:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bdc:	7913      	ldrb	r3, [r2, #4]
 8001bde:	f36f 1386 	bfc	r3, #6, #1
 8001be2:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_2;                 // 2 bytes to transmit
 8001be4:	4a3f      	ldr	r2, [pc, #252]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001be6:	7913      	ldrb	r3, [r2, #4]
 8001be8:	2102      	movs	r1, #2
 8001bea:	f361 0303 	bfi	r3, r1, #0, #4
 8001bee:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001bf0:	4a3c      	ldr	r2, [pc, #240]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bf2:	7913      	ldrb	r3, [r2, #4]
 8001bf4:	f36f 13c7 	bfc	r3, #7, #1
 8001bf8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001bfc:	7913      	ldrb	r3, [r2, #4]
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x514 State Change ID=%02x, STATE=%02x",moduleId,state ); serialOut(tempBuffer);}
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <MOD_TransmitState+0x16c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <MOD_TransmitState+0xa2>
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <MOD_TransmitState+0x170>)
 8001c16:	4837      	ldr	r0, [pc, #220]	; (8001cf4 <MOD_TransmitState+0x174>)
 8001c18:	f009 fa82 	bl	800b120 <siprintf>
 8001c1c:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <MOD_TransmitState+0x174>)
 8001c1e:	f002 fe07 	bl	8004830 <serialOut>
  if(debugLevel & (DBG_MCU + DBG_VERBOSE)){ sprintf(tempBuffer,"TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",txObj.bF.id.SID,txObj.bF.id.EID,txd[0],txd[1],txd[2],txd[3],txd[4],txd[5],txd[6],txd[7]); serialOut(tempBuffer);}
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <MOD_TransmitState+0x16c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f003 030a 	and.w	r3, r3, #10
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d033      	beq.n	8001c96 <MOD_TransmitState+0x116>
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	469c      	mov	ip, r3
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MOD_TransmitState+0x164>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001c42:	469e      	mov	lr, r3
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c52:	789b      	ldrb	r3, [r3, #2]
 8001c54:	4618      	mov	r0, r3
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	461c      	mov	r4, r3
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	461d      	mov	r5, r3
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c64:	795b      	ldrb	r3, [r3, #5]
 8001c66:	461e      	mov	r6, r3
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c6a:	799b      	ldrb	r3, [r3, #6]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MOD_TransmitState+0x168>)
 8001c70:	79db      	ldrb	r3, [r3, #7]
 8001c72:	9307      	str	r3, [sp, #28]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	9306      	str	r3, [sp, #24]
 8001c78:	9605      	str	r6, [sp, #20]
 8001c7a:	9504      	str	r5, [sp, #16]
 8001c7c:	9403      	str	r4, [sp, #12]
 8001c7e:	9002      	str	r0, [sp, #8]
 8001c80:	9101      	str	r1, [sp, #4]
 8001c82:	9200      	str	r2, [sp, #0]
 8001c84:	4673      	mov	r3, lr
 8001c86:	4662      	mov	r2, ip
 8001c88:	491b      	ldr	r1, [pc, #108]	; (8001cf8 <MOD_TransmitState+0x178>)
 8001c8a:	481a      	ldr	r0, [pc, #104]	; (8001cf4 <MOD_TransmitState+0x174>)
 8001c8c:	f009 fa48 	bl	800b120 <siprintf>
 8001c90:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <MOD_TransmitState+0x174>)
 8001c92:	f002 fdcd 	bl	8004830 <serialOut>
  MOD_TransmitMessageQueue(CAN2);                    // Send it
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff f976 	bl	8000f88 <MOD_TransmitMessageQueue>

  // Update commanded state and command status
  index = MOD_ModuleIndexFromId(moduleId);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f95a 	bl	8001f58 <MOD_ModuleIndexFromId>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <MOD_TransmitState+0x17c>)
 8001caa:	7c1b      	ldrb	r3, [r3, #16]
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d013      	beq.n	8001cda <MOD_TransmitState+0x15a>
    module[index].command.commandedState = state;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <MOD_TransmitState+0x180>)
 8001cb6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	331e      	adds	r3, #30
 8001cc2:	79ba      	ldrb	r2, [r7, #6]
 8001cc4:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus = commandIssued;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <MOD_TransmitState+0x180>)
 8001cca:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	331f      	adds	r3, #31
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200000a8 	.word	0x200000a8
 8001ce8:	200000b4 	.word	0x200000b4
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	0800cadc 	.word	0x0800cadc
 8001cf4:	2000ce88 	.word	0x2000ce88
 8001cf8:	0800ca7c 	.word	0x0800ca7c
 8001cfc:	2000c754 	.word	0x2000c754
 8001d00:	20000154 	.word	0x20000154

08001d04 <MOD_ProcessCellDetail>:

/***************************************************************************************************************
*     M O D _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessCellDetail(void){
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,8);
 8001d0e:	4a86      	ldr	r2, [pc, #536]	; (8001f28 <MOD_ProcessCellDetail+0x224>)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d16:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 8001d1a:	4b84      	ldr	r3, [pc, #528]	; (8001f2c <MOD_ProcessCellDetail+0x228>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d017      	beq.n	8001d56 <MOD_ProcessCellDetail+0x52>
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <MOD_ProcessCellDetail+0x22c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001d2e:	461c      	mov	r4, r3
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	461d      	mov	r5, r3
 8001d34:	793b      	ldrb	r3, [r7, #4]
 8001d36:	7aba      	ldrb	r2, [r7, #10]
 8001d38:	88f9      	ldrh	r1, [r7, #6]
 8001d3a:	8938      	ldrh	r0, [r7, #8]
 8001d3c:	9003      	str	r0, [sp, #12]
 8001d3e:	9102      	str	r1, [sp, #8]
 8001d40:	9201      	str	r2, [sp, #4]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	462b      	mov	r3, r5
 8001d46:	4622      	mov	r2, r4
 8001d48:	497a      	ldr	r1, [pc, #488]	; (8001f34 <MOD_ProcessCellDetail+0x230>)
 8001d4a:	487b      	ldr	r0, [pc, #492]	; (8001f38 <MOD_ProcessCellDetail+0x234>)
 8001d4c:	f009 f9e8 	bl	800b120 <siprintf>
 8001d50:	4879      	ldr	r0, [pc, #484]	; (8001f38 <MOD_ProcessCellDetail+0x234>)
 8001d52:	f002 fd6d 	bl	8004830 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <MOD_ProcessCellDetail+0x238>)
 8001d58:	7c1b      	ldrb	r3, [r3, #16]
 8001d5a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	75bb      	strb	r3, [r7, #22]
 8001d60:	e015      	b.n	8001d8e <MOD_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <MOD_ProcessCellDetail+0x22c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8001d6a:	7dbb      	ldrb	r3, [r7, #22]
 8001d6c:	4974      	ldr	r1, [pc, #464]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001d6e:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001d72:	fb00 f303 	mul.w	r3, r0, r3
 8001d76:	440b      	add	r3, r1
 8001d78:	3308      	adds	r3, #8
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d101      	bne.n	8001d88 <MOD_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8001d88:	7dbb      	ldrb	r3, [r7, #22]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	75bb      	strb	r3, [r7, #22]
 8001d8e:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <MOD_ProcessCellDetail+0x238>)
 8001d90:	7c1b      	ldrb	r3, [r3, #16]
 8001d92:	7dba      	ldrb	r2, [r7, #22]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3e4      	bcc.n	8001d62 <MOD_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	7978      	ldrb	r0, [r7, #5]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001d9e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3322      	adds	r3, #34	; 0x22
 8001daa:	4602      	mov	r2, r0
 8001dac:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 8001dae:	7dfa      	ldrb	r2, [r7, #23]
 8001db0:	793b      	ldrb	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	7abc      	ldrb	r4, [r7, #10]
 8001db6:	4962      	ldr	r1, [pc, #392]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001db8:	4603      	mov	r3, r0
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4403      	add	r3, r0
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001dc4:	fb00 f202 	mul.w	r2, r0, r2
 8001dc8:	4413      	add	r3, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3328      	adds	r3, #40	; 0x28
 8001dce:	4622      	mov	r2, r4
 8001dd0:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 8001dd2:	7dfa      	ldrb	r2, [r7, #23]
 8001dd4:	793b      	ldrb	r3, [r7, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	7afc      	ldrb	r4, [r7, #11]
 8001dda:	4959      	ldr	r1, [pc, #356]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001ddc:	4603      	mov	r3, r0
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4403      	add	r3, r0
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001de8:	fb00 f202 	mul.w	r2, r0, r2
 8001dec:	4413      	add	r3, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	3329      	adds	r3, #41	; 0x29
 8001df2:	4622      	mov	r2, r4
 8001df4:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 8001df6:	7dfa      	ldrb	r2, [r7, #23]
 8001df8:	793b      	ldrb	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	88fc      	ldrh	r4, [r7, #6]
 8001dfe:	4950      	ldr	r1, [pc, #320]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4403      	add	r3, r0
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001e0c:	fb00 f202 	mul.w	r2, r0, r2
 8001e10:	4413      	add	r3, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	3326      	adds	r3, #38	; 0x26
 8001e16:	4622      	mov	r2, r4
 8001e18:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 8001e1a:	7dfa      	ldrb	r2, [r7, #23]
 8001e1c:	793b      	ldrb	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	893c      	ldrh	r4, [r7, #8]
 8001e22:	4947      	ldr	r1, [pc, #284]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001e24:	4603      	mov	r3, r0
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4403      	add	r3, r0
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001e30:	fb00 f202 	mul.w	r2, r0, r2
 8001e34:	4413      	add	r3, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	3324      	adds	r3, #36	; 0x24
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <MOD_ProcessCellDetail+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	b290      	uxth	r0, r2
 8001e48:	4a3d      	ldr	r2, [pc, #244]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001e4a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e58:	4602      	mov	r2, r0
 8001e5a:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <MOD_ProcessCellDetail+0x244>)
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4937      	ldr	r1, [pc, #220]	; (8001f40 <MOD_ProcessCellDetail+0x23c>)
 8001e64:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001e68:	fb00 f303 	mul.w	r3, r0, r3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8001e72:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 8001e74:	793b      	ldrb	r3, [r7, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	797b      	ldrb	r3, [r7, #5]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	da4e      	bge.n	8001f1e <MOD_ProcessCellDetail+0x21a>

    detailRequest.cellId = cellDetail.cellId +1;
 8001e80:	793b      	ldrb	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8001e8e:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, 3);
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	482b      	ldr	r0, [pc, #172]	; (8001f50 <MOD_ProcessCellDetail+0x24c>)
 8001ea4:	f009 f8e8 	bl	800b078 <memcpy>

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 8001ea8:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001eaa:	8813      	ldrh	r3, [r2, #0]
 8001eac:	f240 5115 	movw	r1, #1301	; 0x515
 8001eb0:	f361 030a 	bfi	r3, r1, #0, #11
 8001eb4:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MOD_ProcessCellDetail+0x22c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	f361 23dc 	bfi	r3, r1, #11, #18
 8001ec6:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001eca:	7913      	ldrb	r3, [r2, #4]
 8001ecc:	f36f 1386 	bfc	r3, #6, #1
 8001ed0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001ed4:	7913      	ldrb	r3, [r2, #4]
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	f361 0303 	bfi	r3, r1, #0, #4
 8001edc:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001ede:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001ee0:	7913      	ldrb	r3, [r2, #4]
 8001ee2:	f36f 13c7 	bfc	r3, #7, #1
 8001ee6:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001ee8:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MOD_ProcessCellDetail+0x248>)
 8001eea:	7913      	ldrb	r3, [r2, #4]
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MOD_ProcessCellDetail+0x228>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <MOD_ProcessCellDetail+0x214>
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MOD_ProcessCellDetail+0x22c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001f06:	461a      	mov	r2, r3
 8001f08:	7b7b      	ldrb	r3, [r7, #13]
 8001f0a:	4912      	ldr	r1, [pc, #72]	; (8001f54 <MOD_ProcessCellDetail+0x250>)
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <MOD_ProcessCellDetail+0x234>)
 8001f0e:	f009 f907 	bl	800b120 <siprintf>
 8001f12:	4809      	ldr	r0, [pc, #36]	; (8001f38 <MOD_ProcessCellDetail+0x234>)
 8001f14:	f002 fc8c 	bl	8004830 <serialOut>
    MOD_TransmitMessageQueue(CAN2);                     // Send it
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff f835 	bl	8000f88 <MOD_TransmitMessageQueue>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000110 	.word	0x20000110
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000104 	.word	0x20000104
 8001f34:	0800cb08 	.word	0x0800cb08
 8001f38:	2000ce88 	.word	0x2000ce88
 8001f3c:	2000c754 	.word	0x2000c754
 8001f40:	20000154 	.word	0x20000154
 8001f44:	2000ca68 	.word	0x2000ca68
 8001f48:	2000cef0 	.word	0x2000cef0
 8001f4c:	200000a8 	.word	0x200000a8
 8001f50:	200000b4 	.word	0x200000b4
 8001f54:	0800cb60 	.word	0x0800cb60

08001f58 <MOD_ModuleIndexFromId>:

/***************************************************************************************************************
*     M O D _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MOD_ModuleIndexFromId(uint8_t moduleId)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <MOD_ModuleIndexFromId+0x60>)
 8001f64:	7c1b      	ldrb	r3, [r3, #16]
 8001f66:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73bb      	strb	r3, [r7, #14]
 8001f6c:	e010      	b.n	8001f90 <MOD_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MOD_ModuleIndexFromId+0x64>)
 8001f72:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d101      	bne.n	8001f8a <MOD_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8001f8a:	7bbb      	ldrb	r3, [r7, #14]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	73bb      	strb	r3, [r7, #14]
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MOD_ModuleIndexFromId+0x60>)
 8001f92:	7c1b      	ldrb	r3, [r3, #16]
 8001f94:	7bba      	ldrb	r2, [r7, #14]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3e9      	bcc.n	8001f6e <MOD_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <MOD_ModuleIndexFromId+0x60>)
 8001f9c:	7c1b      	ldrb	r3, [r3, #16]
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <MOD_ModuleIndexFromId+0x50>
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	e001      	b.n	8001fac <MOD_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <MOD_ModuleIndexFromId+0x60>)
 8001faa:	7c1b      	ldrb	r3, [r3, #16]

}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	2000c754 	.word	0x2000c754
 8001fbc:	20000154 	.word	0x20000154

08001fc0 <MOD_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M O D _ L a s t M e s s a g e T i m e o u t                                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MOD_TicksSinceLastMessage(uint8_t moduleId)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint8_t moduleIndex = MOD_ModuleIndexFromId(moduleId);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffc3 	bl	8001f58 <MOD_ModuleIndexFromId>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <MOD_TicksSinceLastMessage+0xb8>)
 8001fd8:	7c1b      	ldrb	r3, [r3, #16]
 8001fda:	7afa      	ldrb	r2, [r7, #11]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d046      	beq.n	800206e <MOD_TicksSinceLastMessage+0xae>
    // Variables


    if ((etTimerOverflows - module[moduleIndex].lastContact.overflows) == 0){
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	4a26      	ldr	r2, [pc, #152]	; (800207c <MOD_TicksSinceLastMessage+0xbc>)
 8001fe4:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MOD_TicksSinceLastMessage+0xc0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d10f      	bne.n	800201c <MOD_TicksSinceLastMessage+0x5c>
      elapsedTicks = htim1.Instance->CNT - module[moduleIndex].lastContact.ticks;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MOD_TicksSinceLastMessage+0xc4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	7afa      	ldrb	r2, [r7, #11]
 8002004:	491d      	ldr	r1, [pc, #116]	; (800207c <MOD_TicksSinceLastMessage+0xbc>)
 8002006:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800200a:	fb00 f202 	mul.w	r2, r0, r2
 800200e:	440a      	add	r2, r1
 8002010:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002014:	8812      	ldrh	r2, [r2, #0]
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e026      	b.n	800206a <MOD_TicksSinceLastMessage+0xaa>
    }else{
      //             (ticks last contact to overflow point)         + (              ticks in completed overflows                                 )                               + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (etTimerOverflows - (module[moduleIndex].lastContact.overflows +1))) + (htim1.Instance->CNT);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MOD_TicksSinceLastMessage+0xc4>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	7afa      	ldrb	r2, [r7, #11]
 8002022:	4916      	ldr	r1, [pc, #88]	; (800207c <MOD_TicksSinceLastMessage+0xbc>)
 8002024:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002028:	fb00 f202 	mul.w	r2, r0, r2
 800202c:	440a      	add	r2, r1
 800202e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	1a9a      	subs	r2, r3, r2
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MOD_TicksSinceLastMessage+0xc4>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	4910      	ldr	r1, [pc, #64]	; (8002080 <MOD_TicksSinceLastMessage+0xc0>)
 800203e:	6808      	ldr	r0, [r1, #0]
 8002040:	7af9      	ldrb	r1, [r7, #11]
 8002042:	4c0e      	ldr	r4, [pc, #56]	; (800207c <MOD_TicksSinceLastMessage+0xbc>)
 8002044:	f44f 65c6 	mov.w	r5, #1584	; 0x630
 8002048:	fb05 f101 	mul.w	r1, r5, r1
 800204c:	4421      	add	r1, r4
 800204e:	f501 61c5 	add.w	r1, r1, #1576	; 0x628
 8002052:	6809      	ldr	r1, [r1, #0]
 8002054:	1a41      	subs	r1, r0, r1
 8002056:	3901      	subs	r1, #1
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	441a      	add	r2, r3
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MOD_TicksSinceLastMessage+0xc4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	4413      	add	r3, r2
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
    }
    return elapsedTicks;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	e000      	b.n	8002070 <MOD_TicksSinceLastMessage+0xb0>

  } else return 0; // TODO Handle this error
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}
 8002078:	2000c754 	.word	0x2000c754
 800207c:	20000154 	.word	0x20000154
 8002080:	2000cef0 	.word	0x2000cef0
 8002084:	2000ca68 	.word	0x2000ca68

08002088 <CAN_TestRegisterAccess>:
/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
    // Variables
    uint8_t length;
    bool good = false;
 8002092:	2300      	movs	r3, #0
 8002094:	73bb      	strb	r3, [r7, #14]
    Nop();
 8002096:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e05d      	b.n	800215a <CAN_TestRegisterAccess+0xd2>
        for (i = 0; i < length; i++) {
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	e016      	b.n	80020d4 <CAN_TestRegisterAccess+0x4c>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 80020a6:	f008 fffd 	bl	800b0a4 <rand>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b6:	b2d9      	uxtb	r1, r3
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <CAN_TestRegisterAccess+0xec>)
 80020ba:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <CAN_TestRegisterAccess+0xf0>)
 80020c4:	21ff      	movs	r1, #255	; 0xff
 80020c6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d8e3      	bhi.n	80020a6 <CAN_TestRegisterAccess+0x1e>
        }
        Nop();
 80020de:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	79f8      	ldrb	r0, [r7, #7]
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <CAN_TestRegisterAccess+0xec>)
 80020e8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80020ec:	f000 fbfa 	bl	80028e4 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	79f8      	ldrb	r0, [r7, #7]
 80020f6:	4a20      	ldr	r2, [pc, #128]	; (8002178 <CAN_TestRegisterAccess+0xf0>)
 80020f8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80020fc:	f000 fb72 	bl	80027e4 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8002100:	2300      	movs	r3, #0
 8002102:	73bb      	strb	r3, [r7, #14]
        for (i = 0; i < length; i++) {
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e01e      	b.n	800214a <CAN_TestRegisterAccess+0xc2>
            good = txd[i] == rxd[i];
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <CAN_TestRegisterAccess+0xec>)
 8002114:	5c9a      	ldrb	r2, [r3, r2]
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4619      	mov	r1, r3
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <CAN_TestRegisterAccess+0xf0>)
 800211e:	5c5b      	ldrb	r3, [r3, r1]
 8002120:	429a      	cmp	r2, r3
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	73bb      	strb	r3, [r7, #14]

            if (!good) {
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <CAN_TestRegisterAccess+0xb6>
                Nop();
 8002136:	bf00      	nop
                Nop();
 8002138:	bf00      	nop

                // Data mismatch
                return false;
 800213a:	2300      	movs	r3, #0
 800213c:	e013      	b.n	8002166 <CAN_TestRegisterAccess+0xde>
        for (i = 0; i < length; i++) {
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <CAN_TestRegisterAccess+0xe8>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	429a      	cmp	r2, r3
 8002152:	d8db      	bhi.n	800210c <CAN_TestRegisterAccess+0x84>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	3301      	adds	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d99e      	bls.n	800209e <CAN_TestRegisterAccess+0x16>
            }
        }
    }
    Nop();
 8002160:	bf00      	nop
    Nop();
 8002162:	bf00      	nop
    return true;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000150 	.word	0x20000150
 8002174:	200000b4 	.word	0x200000b4
 8002178:	20000110 	.word	0x20000110

0800217c <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
    // Variables
    uint8_t length;
    bool good = false;
 8002186:	2300      	movs	r3, #0
 8002188:	73bb      	strb	r3, [r7, #14]
    Nop();
 800218a:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800218c:	2304      	movs	r3, #4
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e05b      	b.n	800224a <CAN_TestRamAccess+0xce>
        for (i = 0; i < length; i++) {
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <CAN_TestRamAccess+0xe0>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e014      	b.n	80021c4 <CAN_TestRamAccess+0x48>
            txd[i] = rand() & 0xff;
 800219a:	f008 ff83 	bl	800b0a4 <rand>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	b2c9      	uxtb	r1, r1
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <CAN_TestRamAccess+0xe4>)
 80021aa:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <CAN_TestRamAccess+0xe8>)
 80021b4:	21ff      	movs	r1, #255	; 0xff
 80021b6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d8e5      	bhi.n	800219a <CAN_TestRamAccess+0x1e>
        }
        Nop();
 80021ce:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	79f8      	ldrb	r0, [r7, #7]
 80021d6:	4a22      	ldr	r2, [pc, #136]	; (8002260 <CAN_TestRamAccess+0xe4>)
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	f000 fb82 	bl	80028e4 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	79f8      	ldrb	r0, [r7, #7]
 80021e6:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <CAN_TestRamAccess+0xe8>)
 80021e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ec:	f000 fafa 	bl	80027e4 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73bb      	strb	r3, [r7, #14]
        for (i = 0; i < length; i++) {
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e01e      	b.n	800223a <CAN_TestRamAccess+0xbe>
            good = txd[i] == rxd[i];
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <CAN_TestRamAccess+0xe0>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <CAN_TestRamAccess+0xe4>)
 8002204:	5c9a      	ldrb	r2, [r3, r2]
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <CAN_TestRamAccess+0xe0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <CAN_TestRamAccess+0xe8>)
 800220e:	5c5b      	ldrb	r3, [r3, r1]
 8002210:	429a      	cmp	r2, r3
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	73bb      	strb	r3, [r7, #14]

            if (!good) {
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <CAN_TestRamAccess+0xb2>
                Nop();
 8002226:	bf00      	nop
                Nop();
 8002228:	bf00      	nop

                // Data mismatch
                return false;
 800222a:	2300      	movs	r3, #0
 800222c:	e011      	b.n	8002252 <CAN_TestRamAccess+0xd6>
        for (i = 0; i < length; i++) {
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <CAN_TestRamAccess+0xe0>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <CAN_TestRamAccess+0xe0>)
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <CAN_TestRamAccess+0xe0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8db      	bhi.n	80021fc <CAN_TestRamAccess+0x80>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	3304      	adds	r3, #4
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d9a0      	bls.n	8002192 <CAN_TestRamAccess+0x16>
            }
        }
    }
    return true;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000150 	.word	0x20000150
 8002260:	200000b4 	.word	0x200000b4
 8002264:	20000110 	.word	0x20000110

08002268 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8002272:	2302      	movs	r3, #2
 8002274:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <DRV_CANFDSPI_Reset+0x84>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <DRV_CANFDSPI_Reset+0x84>)
 800227e:	2200      	movs	r2, #0
 8002280:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);

	if(index==CAN2){
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d114      	bne.n	80022b2 <DRV_CANFDSPI_Reset+0x4a>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2120      	movs	r1, #32
 800228c:	4818      	ldr	r0, [pc, #96]	; (80022f0 <DRV_CANFDSPI_Reset+0x88>)
 800228e:	f004 f879 	bl	8006384 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	2264      	movs	r2, #100	; 0x64
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <DRV_CANFDSPI_Reset+0x8c>)
 800229a:	4914      	ldr	r1, [pc, #80]	; (80022ec <DRV_CANFDSPI_Reset+0x84>)
 800229c:	4816      	ldr	r0, [pc, #88]	; (80022f8 <DRV_CANFDSPI_Reset+0x90>)
 800229e:	f006 fbd7 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2120      	movs	r1, #32
 80022aa:	4811      	ldr	r0, [pc, #68]	; (80022f0 <DRV_CANFDSPI_Reset+0x88>)
 80022ac:	f004 f86a 	bl	8006384 <HAL_GPIO_WritePin>
 80022b0:	e015      	b.n	80022de <DRV_CANFDSPI_Reset+0x76>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2120      	movs	r1, #32
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f004 f863 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80022be:	89bb      	ldrh	r3, [r7, #12]
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	9200      	str	r2, [sp, #0]
 80022c4:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <DRV_CANFDSPI_Reset+0x8c>)
 80022c6:	4909      	ldr	r1, [pc, #36]	; (80022ec <DRV_CANFDSPI_Reset+0x84>)
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <DRV_CANFDSPI_Reset+0x90>)
 80022ca:	f006 fbc1 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	2120      	movs	r1, #32
 80022d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022da:	f004 f853 	bl	8006384 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000c788 	.word	0x2000c788
 80022f0:	48000800 	.word	0x48000800
 80022f4:	2000c7e8 	.word	0x2000c7e8
 80022f8:	2000c9a0 	.word	0x2000c9a0

080022fc <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af02      	add	r7, sp, #8
 8002302:	4603      	mov	r3, r0
 8002304:	603a      	str	r2, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	460b      	mov	r3, r1
 800230a:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 800230c:	2303      	movs	r3, #3
 800230e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3330      	adds	r3, #48	; 0x30
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002324:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <DRV_CANFDSPI_ReadByte+0xa8>)
 800232c:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002330:	2200      	movs	r2, #0
 8002332:	709a      	strb	r2, [r3, #2]

  if(index==CAN2){
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d114      	bne.n	8002364 <DRV_CANFDSPI_ReadByte+0x68>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	2120      	movs	r1, #32
 800233e:	481a      	ldr	r0, [pc, #104]	; (80023a8 <DRV_CANFDSPI_ReadByte+0xac>)
 8002340:	f004 f820 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	2264      	movs	r2, #100	; 0x64
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <DRV_CANFDSPI_ReadByte+0xb0>)
 800234c:	4915      	ldr	r1, [pc, #84]	; (80023a4 <DRV_CANFDSPI_ReadByte+0xa8>)
 800234e:	4818      	ldr	r0, [pc, #96]	; (80023b0 <DRV_CANFDSPI_ReadByte+0xb4>)
 8002350:	f006 fb7e 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	2120      	movs	r1, #32
 800235c:	4812      	ldr	r0, [pc, #72]	; (80023a8 <DRV_CANFDSPI_ReadByte+0xac>)
 800235e:	f004 f811 	bl	8006384 <HAL_GPIO_WritePin>
 8002362:	e015      	b.n	8002390 <DRV_CANFDSPI_ReadByte+0x94>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	2120      	movs	r1, #32
 8002368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236c:	f004 f80a 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002370:	89bb      	ldrh	r3, [r7, #12]
 8002372:	2264      	movs	r2, #100	; 0x64
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <DRV_CANFDSPI_ReadByte+0xb0>)
 8002378:	490a      	ldr	r1, [pc, #40]	; (80023a4 <DRV_CANFDSPI_ReadByte+0xa8>)
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <DRV_CANFDSPI_ReadByte+0xb4>)
 800237c:	f006 fb68 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	2120      	movs	r1, #32
 8002388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238c:	f003 fffa 	bl	8006384 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <DRV_CANFDSPI_ReadByte+0xb0>)
 8002392:	789a      	ldrb	r2, [r3, #2]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8002398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000c788 	.word	0x2000c788
 80023a8:	48000800 	.word	0x48000800
 80023ac:	2000c7e8 	.word	0x2000c7e8
 80023b0:	2000c9a0 	.word	0x2000c9a0

080023b4 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
 80023be:	460b      	mov	r3, r1
 80023c0:	80bb      	strh	r3, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 80023c6:	2303      	movs	r3, #3
 80023c8:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80023ca:	88bb      	ldrh	r3, [r7, #4]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3320      	adds	r3, #32
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <DRV_CANFDSPI_WriteByte+0xa4>)
 80023de:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <DRV_CANFDSPI_WriteByte+0xa4>)
 80023e6:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <DRV_CANFDSPI_WriteByte+0xa4>)
 80023ea:	79bb      	ldrb	r3, [r7, #6]
 80023ec:	7093      	strb	r3, [r2, #2]

  if(index==CAN2){
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d114      	bne.n	800241e <DRV_CANFDSPI_WriteByte+0x6a>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2120      	movs	r1, #32
 80023f8:	4818      	ldr	r0, [pc, #96]	; (800245c <DRV_CANFDSPI_WriteByte+0xa8>)
 80023fa:	f003 ffc3 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80023fe:	89bb      	ldrh	r3, [r7, #12]
 8002400:	2264      	movs	r2, #100	; 0x64
 8002402:	9200      	str	r2, [sp, #0]
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <DRV_CANFDSPI_WriteByte+0xac>)
 8002406:	4914      	ldr	r1, [pc, #80]	; (8002458 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002408:	4816      	ldr	r0, [pc, #88]	; (8002464 <DRV_CANFDSPI_WriteByte+0xb0>)
 800240a:	f006 fb21 	bl	8008a50 <HAL_SPI_TransmitReceive>
 800240e:	4603      	mov	r3, r0
 8002410:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002412:	2201      	movs	r2, #1
 8002414:	2120      	movs	r1, #32
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <DRV_CANFDSPI_WriteByte+0xa8>)
 8002418:	f003 ffb4 	bl	8006384 <HAL_GPIO_WritePin>
 800241c:	e015      	b.n	800244a <DRV_CANFDSPI_WriteByte+0x96>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2120      	movs	r1, #32
 8002422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002426:	f003 ffad 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800242a:	89bb      	ldrh	r3, [r7, #12]
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	9200      	str	r2, [sp, #0]
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <DRV_CANFDSPI_WriteByte+0xac>)
 8002432:	4909      	ldr	r1, [pc, #36]	; (8002458 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <DRV_CANFDSPI_WriteByte+0xb0>)
 8002436:	f006 fb0b 	bl	8008a50 <HAL_SPI_TransmitReceive>
 800243a:	4603      	mov	r3, r0
 800243c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2120      	movs	r1, #32
 8002442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002446:	f003 ff9d 	bl	8006384 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000c788 	.word	0x2000c788
 800245c:	48000800 	.word	0x48000800
 8002460:	2000c7e8 	.word	0x2000c7e8
 8002464:	2000c9a0 	.word	0x2000c9a0

08002468 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	4603      	mov	r3, r0
 8002470:	603a      	str	r2, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	460b      	mov	r3, r1
 8002476:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8002478:	2306      	movs	r3, #6
 800247a:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800247c:	88bb      	ldrh	r3, [r7, #4]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b29b      	uxth	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3330      	adds	r3, #48	; 0x30
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <DRV_CANFDSPI_ReadWord+0xdc>)
 8002490:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002492:	88bb      	ldrh	r3, [r7, #4]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <DRV_CANFDSPI_ReadWord+0xdc>)
 8002498:	705a      	strb	r2, [r3, #1]

  if(index==CAN2){
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d114      	bne.n	80024ca <DRV_CANFDSPI_ReadWord+0x62>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2120      	movs	r1, #32
 80024a4:	4828      	ldr	r0, [pc, #160]	; (8002548 <DRV_CANFDSPI_ReadWord+0xe0>)
 80024a6:	f003 ff6d 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80024aa:	89bb      	ldrh	r3, [r7, #12]
 80024ac:	2264      	movs	r2, #100	; 0x64
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <DRV_CANFDSPI_ReadWord+0xe4>)
 80024b2:	4924      	ldr	r1, [pc, #144]	; (8002544 <DRV_CANFDSPI_ReadWord+0xdc>)
 80024b4:	4826      	ldr	r0, [pc, #152]	; (8002550 <DRV_CANFDSPI_ReadWord+0xe8>)
 80024b6:	f006 facb 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2120      	movs	r1, #32
 80024c2:	4821      	ldr	r0, [pc, #132]	; (8002548 <DRV_CANFDSPI_ReadWord+0xe0>)
 80024c4:	f003 ff5e 	bl	8006384 <HAL_GPIO_WritePin>
 80024c8:	e015      	b.n	80024f6 <DRV_CANFDSPI_ReadWord+0x8e>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2120      	movs	r1, #32
 80024ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d2:	f003 ff57 	bl	8006384 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80024d6:	89bb      	ldrh	r3, [r7, #12]
 80024d8:	2264      	movs	r2, #100	; 0x64
 80024da:	9200      	str	r2, [sp, #0]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <DRV_CANFDSPI_ReadWord+0xe4>)
 80024de:	4919      	ldr	r1, [pc, #100]	; (8002544 <DRV_CANFDSPI_ReadWord+0xdc>)
 80024e0:	481b      	ldr	r0, [pc, #108]	; (8002550 <DRV_CANFDSPI_ReadWord+0xe8>)
 80024e2:	f006 fab5 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80024ea:	2201      	movs	r2, #1
 80024ec:	2120      	movs	r1, #32
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f2:	f003 ff47 	bl	8006384 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <DRV_CANFDSPI_ReadWord+0x9a>
      return spiTransferError;
 80024fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002500:	e01c      	b.n	800253c <DRV_CANFDSPI_ReadWord+0xd4>
  }

  // Update data
  *rxd = 0;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8002508:	2302      	movs	r3, #2
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e011      	b.n	8002532 <DRV_CANFDSPI_ReadWord+0xca>
      x = (uint32_t) spiReceiveBuffer[i];
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	4a0e      	ldr	r2, [pc, #56]	; (800254c <DRV_CANFDSPI_ReadWord+0xe4>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3b02      	subs	r3, #2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	441a      	add	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d9ea      	bls.n	800250e <DRV_CANFDSPI_ReadWord+0xa6>
  }

  return spiTransferError;
 8002538:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000c788 	.word	0x2000c788
 8002548:	48000800 	.word	0x48000800
 800254c:	2000c7e8 	.word	0x2000c7e8
 8002550:	2000c9a0 	.word	0x2000c9a0

08002554 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	4603      	mov	r3, r0
 800255c:	603a      	str	r2, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	460b      	mov	r3, r1
 8002562:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 8002564:	2306      	movs	r3, #6
 8002566:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8002568:	88bb      	ldrh	r3, [r7, #4]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3320      	adds	r3, #32
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <DRV_CANFDSPI_WriteWord+0xc0>)
 800257c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <DRV_CANFDSPI_WriteWord+0xc0>)
 8002584:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e00b      	b.n	80025a4 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	40da      	lsrs	r2, r3
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	3302      	adds	r3, #2
 8002598:	b2d1      	uxtb	r1, r2
 800259a:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <DRV_CANFDSPI_WriteWord+0xc0>)
 800259c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d9f0      	bls.n	800258c <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN2){
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d114      	bne.n	80025da <DRV_CANFDSPI_WriteWord+0x86>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2120      	movs	r1, #32
 80025b4:	4818      	ldr	r0, [pc, #96]	; (8002618 <DRV_CANFDSPI_WriteWord+0xc4>)
 80025b6:	f003 fee5 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80025ba:	89bb      	ldrh	r3, [r7, #12]
 80025bc:	2264      	movs	r2, #100	; 0x64
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	4a16      	ldr	r2, [pc, #88]	; (800261c <DRV_CANFDSPI_WriteWord+0xc8>)
 80025c2:	4914      	ldr	r1, [pc, #80]	; (8002614 <DRV_CANFDSPI_WriteWord+0xc0>)
 80025c4:	4816      	ldr	r0, [pc, #88]	; (8002620 <DRV_CANFDSPI_WriteWord+0xcc>)
 80025c6:	f006 fa43 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2120      	movs	r1, #32
 80025d2:	4811      	ldr	r0, [pc, #68]	; (8002618 <DRV_CANFDSPI_WriteWord+0xc4>)
 80025d4:	f003 fed6 	bl	8006384 <HAL_GPIO_WritePin>
 80025d8:	e015      	b.n	8002606 <DRV_CANFDSPI_WriteWord+0xb2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2120      	movs	r1, #32
 80025de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e2:	f003 fecf 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80025e6:	89bb      	ldrh	r3, [r7, #12]
 80025e8:	2264      	movs	r2, #100	; 0x64
 80025ea:	9200      	str	r2, [sp, #0]
 80025ec:	4a0b      	ldr	r2, [pc, #44]	; (800261c <DRV_CANFDSPI_WriteWord+0xc8>)
 80025ee:	4909      	ldr	r1, [pc, #36]	; (8002614 <DRV_CANFDSPI_WriteWord+0xc0>)
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <DRV_CANFDSPI_WriteWord+0xcc>)
 80025f2:	f006 fa2d 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80025fa:	2201      	movs	r2, #1
 80025fc:	2120      	movs	r1, #32
 80025fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002602:	f003 febf 	bl	8006384 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8002606:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000c788 	.word	0x2000c788
 8002618:	48000800 	.word	0x48000800
 800261c:	2000c7e8 	.word	0x2000c7e8
 8002620:	2000c9a0 	.word	0x2000c9a0

08002624 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af02      	add	r7, sp, #8
 800262a:	4603      	mov	r3, r0
 800262c:	603a      	str	r2, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	460b      	mov	r3, r1
 8002632:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 8002634:	2304      	movs	r3, #4
 8002636:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002638:	88bb      	ldrh	r3, [r7, #4]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29b      	uxth	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3330      	adds	r3, #48	; 0x30
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 800264c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 8002654:	705a      	strb	r2, [r3, #1]

    if(index==CAN2){
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d114      	bne.n	8002686 <DRV_CANFDSPI_ReadHalfWord+0x62>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	2120      	movs	r1, #32
 8002660:	4829      	ldr	r0, [pc, #164]	; (8002708 <DRV_CANFDSPI_ReadHalfWord+0xe4>)
 8002662:	f003 fe8f 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002666:	89bb      	ldrh	r3, [r7, #12]
 8002668:	2264      	movs	r2, #100	; 0x64
 800266a:	9200      	str	r2, [sp, #0]
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <DRV_CANFDSPI_ReadHalfWord+0xe8>)
 800266e:	4925      	ldr	r1, [pc, #148]	; (8002704 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 8002670:	4827      	ldr	r0, [pc, #156]	; (8002710 <DRV_CANFDSPI_ReadHalfWord+0xec>)
 8002672:	f006 f9ed 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002676:	4603      	mov	r3, r0
 8002678:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800267a:	2201      	movs	r2, #1
 800267c:	2120      	movs	r1, #32
 800267e:	4822      	ldr	r0, [pc, #136]	; (8002708 <DRV_CANFDSPI_ReadHalfWord+0xe4>)
 8002680:	f003 fe80 	bl	8006384 <HAL_GPIO_WritePin>
 8002684:	e015      	b.n	80026b2 <DRV_CANFDSPI_ReadHalfWord+0x8e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2120      	movs	r1, #32
 800268a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268e:	f003 fe79 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002692:	89bb      	ldrh	r3, [r7, #12]
 8002694:	2264      	movs	r2, #100	; 0x64
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <DRV_CANFDSPI_ReadHalfWord+0xe8>)
 800269a:	491a      	ldr	r1, [pc, #104]	; (8002704 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 800269c:	481c      	ldr	r0, [pc, #112]	; (8002710 <DRV_CANFDSPI_ReadHalfWord+0xec>)
 800269e:	f006 f9d7 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80026a6:	2201      	movs	r2, #1
 80026a8:	2120      	movs	r1, #32
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ae:	f003 fe69 	bl	8006384 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <DRV_CANFDSPI_ReadHalfWord+0x9a>
        return spiTransferError;
 80026b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026bc:	e01e      	b.n	80026fc <DRV_CANFDSPI_ReadHalfWord+0xd8>
    }

    // Update data
    *rxd = 0;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80026c4:	2302      	movs	r3, #2
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e013      	b.n	80026f2 <DRV_CANFDSPI_ReadHalfWord+0xce>
        x = (uint32_t) spiReceiveBuffer[i];
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <DRV_CANFDSPI_ReadHalfWord+0xe8>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	3b02      	subs	r3, #2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3301      	adds	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d9e8      	bls.n	80026ca <DRV_CANFDSPI_ReadHalfWord+0xa6>
    }

    return spiTransferError;
 80026f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000c788 	.word	0x2000c788
 8002708:	48000800 	.word	0x48000800
 800270c:	2000c7e8 	.word	0x2000c7e8
 8002710:	2000c9a0 	.word	0x2000c9a0

08002714 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	460b      	mov	r3, r1
 8002720:	80bb      	strh	r3, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 8002726:	2304      	movs	r3, #4
 8002728:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3320      	adds	r3, #32
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 800273e:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002740:	88bb      	ldrh	r3, [r7, #4]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002746:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	e00b      	b.n	8002766 <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	411a      	asrs	r2, r3
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3302      	adds	r3, #2
 800275a:	b2d1      	uxtb	r1, r2
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 800275e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	3301      	adds	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d9f0      	bls.n	800274e <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN2){
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d114      	bne.n	800279c <DRV_CANFDSPI_WriteHalfWord+0x88>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	2120      	movs	r1, #32
 8002776:	4818      	ldr	r0, [pc, #96]	; (80027d8 <DRV_CANFDSPI_WriteHalfWord+0xc4>)
 8002778:	f003 fe04 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800277c:	89bb      	ldrh	r3, [r7, #12]
 800277e:	2264      	movs	r2, #100	; 0x64
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <DRV_CANFDSPI_WriteHalfWord+0xc8>)
 8002784:	4913      	ldr	r1, [pc, #76]	; (80027d4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002786:	4816      	ldr	r0, [pc, #88]	; (80027e0 <DRV_CANFDSPI_WriteHalfWord+0xcc>)
 8002788:	f006 f962 	bl	8008a50 <HAL_SPI_TransmitReceive>
 800278c:	4603      	mov	r3, r0
 800278e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002790:	2201      	movs	r2, #1
 8002792:	2120      	movs	r1, #32
 8002794:	4810      	ldr	r0, [pc, #64]	; (80027d8 <DRV_CANFDSPI_WriteHalfWord+0xc4>)
 8002796:	f003 fdf5 	bl	8006384 <HAL_GPIO_WritePin>
 800279a:	e015      	b.n	80027c8 <DRV_CANFDSPI_WriteHalfWord+0xb4>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800279c:	2200      	movs	r2, #0
 800279e:	2120      	movs	r1, #32
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f003 fdee 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80027a8:	89bb      	ldrh	r3, [r7, #12]
 80027aa:	2264      	movs	r2, #100	; 0x64
 80027ac:	9200      	str	r2, [sp, #0]
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <DRV_CANFDSPI_WriteHalfWord+0xc8>)
 80027b0:	4908      	ldr	r1, [pc, #32]	; (80027d4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 80027b2:	480b      	ldr	r0, [pc, #44]	; (80027e0 <DRV_CANFDSPI_WriteHalfWord+0xcc>)
 80027b4:	f006 f94c 	bl	8008a50 <HAL_SPI_TransmitReceive>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80027bc:	2201      	movs	r2, #1
 80027be:	2120      	movs	r1, #32
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c4:	f003 fdde 	bl	8006384 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 80027c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000c788 	.word	0x2000c788
 80027d8:	48000800 	.word	0x48000800
 80027dc:	2000c7e8 	.word	0x2000c7e8
 80027e0:	2000c9a0 	.word	0x2000c9a0

080027e4 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60ba      	str	r2, [r7, #8]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	460b      	mov	r3, r1
 80027f4:	81bb      	strh	r3, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	3302      	adds	r3, #2
 80027fe:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8002800:	8a7b      	ldrh	r3, [r7, #18]
 8002802:	2b60      	cmp	r3, #96	; 0x60
 8002804:	d902      	bls.n	800280c <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e05e      	b.n	80028ca <DRV_CANFDSPI_ReadByteArray+0xe6>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800280c:	89bb      	ldrh	r3, [r7, #12]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3330      	adds	r3, #48	; 0x30
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8002820:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002822:	89bb      	ldrh	r3, [r7, #12]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8002828:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800282a:	2302      	movs	r3, #2
 800282c:	82fb      	strh	r3, [r7, #22]
 800282e:	e006      	b.n	800283e <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8002830:	8afb      	ldrh	r3, [r7, #22]
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8002834:	2100      	movs	r1, #0
 8002836:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8002838:	8afb      	ldrh	r3, [r7, #22]
 800283a:	3301      	adds	r3, #1
 800283c:	82fb      	strh	r3, [r7, #22]
 800283e:	8afa      	ldrh	r2, [r7, #22]
 8002840:	8a7b      	ldrh	r3, [r7, #18]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3f4      	bcc.n	8002830 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN2){
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d114      	bne.n	8002876 <DRV_CANFDSPI_ReadByteArray+0x92>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	2120      	movs	r1, #32
 8002850:	4821      	ldr	r0, [pc, #132]	; (80028d8 <DRV_CANFDSPI_ReadByteArray+0xf4>)
 8002852:	f003 fd97 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	2264      	movs	r2, #100	; 0x64
 800285a:	9200      	str	r2, [sp, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <DRV_CANFDSPI_ReadByteArray+0xf8>)
 800285e:	491d      	ldr	r1, [pc, #116]	; (80028d4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8002860:	481f      	ldr	r0, [pc, #124]	; (80028e0 <DRV_CANFDSPI_ReadByteArray+0xfc>)
 8002862:	f006 f8f5 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002866:	4603      	mov	r3, r0
 8002868:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800286a:	2201      	movs	r2, #1
 800286c:	2120      	movs	r1, #32
 800286e:	481a      	ldr	r0, [pc, #104]	; (80028d8 <DRV_CANFDSPI_ReadByteArray+0xf4>)
 8002870:	f003 fd88 	bl	8006384 <HAL_GPIO_WritePin>
 8002874:	e015      	b.n	80028a2 <DRV_CANFDSPI_ReadByteArray+0xbe>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	2120      	movs	r1, #32
 800287a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287e:	f003 fd81 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002882:	8a7b      	ldrh	r3, [r7, #18]
 8002884:	2264      	movs	r2, #100	; 0x64
 8002886:	9200      	str	r2, [sp, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <DRV_CANFDSPI_ReadByteArray+0xf8>)
 800288a:	4912      	ldr	r1, [pc, #72]	; (80028d4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 800288c:	4814      	ldr	r0, [pc, #80]	; (80028e0 <DRV_CANFDSPI_ReadByteArray+0xfc>)
 800288e:	f006 f8df 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002892:	4603      	mov	r3, r0
 8002894:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	2120      	movs	r1, #32
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f003 fd71 	bl	8006384 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	82fb      	strh	r3, [r7, #22]
 80028a6:	e00a      	b.n	80028be <DRV_CANFDSPI_ReadByteArray+0xda>
        rxd[i] = spiReceiveBuffer[i + 2];
 80028a8:	8afb      	ldrh	r3, [r7, #22]
 80028aa:	1c9a      	adds	r2, r3, #2
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	440b      	add	r3, r1
 80028b2:	490a      	ldr	r1, [pc, #40]	; (80028dc <DRV_CANFDSPI_ReadByteArray+0xf8>)
 80028b4:	5c8a      	ldrb	r2, [r1, r2]
 80028b6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 80028b8:	8afb      	ldrh	r3, [r7, #22]
 80028ba:	3301      	adds	r3, #1
 80028bc:	82fb      	strh	r3, [r7, #22]
 80028be:	8afa      	ldrh	r2, [r7, #22]
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3f0      	bcc.n	80028a8 <DRV_CANFDSPI_ReadByteArray+0xc4>
    }

    return spiTransferError;
 80028c6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000c788 	.word	0x2000c788
 80028d8:	48000800 	.word	0x48000800
 80028dc:	2000c7e8 	.word	0x2000c7e8
 80028e0:	2000c9a0 	.word	0x2000c9a0

080028e4 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60ba      	str	r2, [r7, #8]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	460b      	mov	r3, r1
 80028f4:	81bb      	strh	r3, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	3302      	adds	r3, #2
 80028fe:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8002900:	8a7b      	ldrh	r3, [r7, #18]
 8002902:	2b60      	cmp	r3, #96	; 0x60
 8002904:	d902      	bls.n	800290c <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e050      	b.n	80029ae <DRV_CANFDSPI_WriteByteArray+0xca>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800290c:	89bb      	ldrh	r3, [r7, #12]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3320      	adds	r3, #32
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8002920:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002922:	89bb      	ldrh	r3, [r7, #12]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8002928:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 800292a:	2300      	movs	r3, #0
 800292c:	82fb      	strh	r3, [r7, #22]
 800292e:	e00a      	b.n	8002946 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 8002930:	8afb      	ldrh	r3, [r7, #22]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	441a      	add	r2, r3
 8002936:	8afb      	ldrh	r3, [r7, #22]
 8002938:	3302      	adds	r3, #2
 800293a:	7811      	ldrb	r1, [r2, #0]
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 800293e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 8002940:	8afb      	ldrh	r3, [r7, #22]
 8002942:	3301      	adds	r3, #1
 8002944:	82fb      	strh	r3, [r7, #22]
 8002946:	8afa      	ldrh	r2, [r7, #22]
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3f0      	bcc.n	8002930 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN2){
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d114      	bne.n	800297e <DRV_CANFDSPI_WriteByteArray+0x9a>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2120      	movs	r1, #32
 8002958:	4818      	ldr	r0, [pc, #96]	; (80029bc <DRV_CANFDSPI_WriteByteArray+0xd8>)
 800295a:	f003 fd13 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800295e:	8a7b      	ldrh	r3, [r7, #18]
 8002960:	2264      	movs	r2, #100	; 0x64
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <DRV_CANFDSPI_WriteByteArray+0xdc>)
 8002966:	4914      	ldr	r1, [pc, #80]	; (80029b8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8002968:	4816      	ldr	r0, [pc, #88]	; (80029c4 <DRV_CANFDSPI_WriteByteArray+0xe0>)
 800296a:	f006 f871 	bl	8008a50 <HAL_SPI_TransmitReceive>
 800296e:	4603      	mov	r3, r0
 8002970:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	2120      	movs	r1, #32
 8002976:	4811      	ldr	r0, [pc, #68]	; (80029bc <DRV_CANFDSPI_WriteByteArray+0xd8>)
 8002978:	f003 fd04 	bl	8006384 <HAL_GPIO_WritePin>
 800297c:	e015      	b.n	80029aa <DRV_CANFDSPI_WriteByteArray+0xc6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	2120      	movs	r1, #32
 8002982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002986:	f003 fcfd 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800298a:	8a7b      	ldrh	r3, [r7, #18]
 800298c:	2264      	movs	r2, #100	; 0x64
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <DRV_CANFDSPI_WriteByteArray+0xdc>)
 8002992:	4909      	ldr	r1, [pc, #36]	; (80029b8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8002994:	480b      	ldr	r0, [pc, #44]	; (80029c4 <DRV_CANFDSPI_WriteByteArray+0xe0>)
 8002996:	f006 f85b 	bl	8008a50 <HAL_SPI_TransmitReceive>
 800299a:	4603      	mov	r3, r0
 800299c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800299e:	2201      	movs	r2, #1
 80029a0:	2120      	movs	r1, #32
 80029a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a6:	f003 fced 	bl	8006384 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 80029aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2000c788 	.word	0x2000c788
 80029bc:	48000800 	.word	0x48000800
 80029c0:	2000c7e8 	.word	0x2000c7e8
 80029c4:	2000c9a0 	.word	0x2000c9a0

080029c8 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60ba      	str	r2, [r7, #8]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	460b      	mov	r3, r1
 80029d8:	81bb      	strh	r3, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3302      	adds	r3, #2
 80029e6:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80029e8:	8afb      	ldrh	r3, [r7, #22]
 80029ea:	2b60      	cmp	r3, #96	; 0x60
 80029ec:	d902      	bls.n	80029f4 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	e07a      	b.n	8002aea <DRV_CANFDSPI_ReadWordArray+0x122>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 80029f4:	89bb      	ldrh	r3, [r7, #12]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3330      	adds	r3, #48	; 0x30
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8002a08:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8002a0a:	89bb      	ldrh	r3, [r7, #12]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8002a10:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8002a12:	2302      	movs	r3, #2
 8002a14:	83fb      	strh	r3, [r7, #30]
 8002a16:	e006      	b.n	8002a26 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8002a18:	8bfb      	ldrh	r3, [r7, #30]
 8002a1a:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8002a20:	8bfb      	ldrh	r3, [r7, #30]
 8002a22:	3301      	adds	r3, #1
 8002a24:	83fb      	strh	r3, [r7, #30]
 8002a26:	8bfa      	ldrh	r2, [r7, #30]
 8002a28:	8afb      	ldrh	r3, [r7, #22]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3f4      	bcc.n	8002a18 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN2){
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d114      	bne.n	8002a5e <DRV_CANFDSPI_ReadWordArray+0x96>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2120      	movs	r1, #32
 8002a38:	482f      	ldr	r0, [pc, #188]	; (8002af8 <DRV_CANFDSPI_ReadWordArray+0x130>)
 8002a3a:	f003 fca3 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002a3e:	8afb      	ldrh	r3, [r7, #22]
 8002a40:	2264      	movs	r2, #100	; 0x64
 8002a42:	9200      	str	r2, [sp, #0]
 8002a44:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <DRV_CANFDSPI_ReadWordArray+0x134>)
 8002a46:	492b      	ldr	r1, [pc, #172]	; (8002af4 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8002a48:	482d      	ldr	r0, [pc, #180]	; (8002b00 <DRV_CANFDSPI_ReadWordArray+0x138>)
 8002a4a:	f006 f801 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002a52:	2201      	movs	r2, #1
 8002a54:	2120      	movs	r1, #32
 8002a56:	4828      	ldr	r0, [pc, #160]	; (8002af8 <DRV_CANFDSPI_ReadWordArray+0x130>)
 8002a58:	f003 fc94 	bl	8006384 <HAL_GPIO_WritePin>
 8002a5c:	e015      	b.n	8002a8a <DRV_CANFDSPI_ReadWordArray+0xc2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2120      	movs	r1, #32
 8002a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a66:	f003 fc8d 	bl	8006384 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002a6a:	8afb      	ldrh	r3, [r7, #22]
 8002a6c:	2264      	movs	r2, #100	; 0x64
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <DRV_CANFDSPI_ReadWordArray+0x134>)
 8002a72:	4920      	ldr	r1, [pc, #128]	; (8002af4 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8002a74:	4822      	ldr	r0, [pc, #136]	; (8002b00 <DRV_CANFDSPI_ReadWordArray+0x138>)
 8002a76:	f005 ffeb 	bl	8008a50 <HAL_SPI_TransmitReceive>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2120      	movs	r1, #32
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a86:	f003 fc7d 	bl	8006384 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8002a8a:	7e7b      	ldrb	r3, [r7, #25]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <DRV_CANFDSPI_ReadWordArray+0xce>
        return spiTransferError;
 8002a90:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002a94:	e029      	b.n	8002aea <DRV_CANFDSPI_ReadWordArray+0x122>
    }

    // Convert Byte array to Word array
    n = 2;
 8002a96:	2302      	movs	r3, #2
 8002a98:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	83fb      	strh	r3, [r7, #30]
 8002a9e:	e01e      	b.n	8002ade <DRV_CANFDSPI_ReadWordArray+0x116>
        w.word = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	83bb      	strh	r3, [r7, #28]
 8002aa8:	e00d      	b.n	8002ac6 <DRV_CANFDSPI_ReadWordArray+0xfe>
            w.byte[j] = spiReceiveBuffer[n];
 8002aaa:	8b7a      	ldrh	r2, [r7, #26]
 8002aac:	8bbb      	ldrh	r3, [r7, #28]
 8002aae:	4913      	ldr	r1, [pc, #76]	; (8002afc <DRV_CANFDSPI_ReadWordArray+0x134>)
 8002ab0:	5c8a      	ldrb	r2, [r1, r2]
 8002ab2:	3320      	adds	r3, #32
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8002aba:	8bbb      	ldrh	r3, [r7, #28]
 8002abc:	3301      	adds	r3, #1
 8002abe:	83bb      	strh	r3, [r7, #28]
 8002ac0:	8b7b      	ldrh	r3, [r7, #26]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	837b      	strh	r3, [r7, #26]
 8002ac6:	8bbb      	ldrh	r3, [r7, #28]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d9ee      	bls.n	8002aaa <DRV_CANFDSPI_ReadWordArray+0xe2>
        }
        rxd[i] = w.word;
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8002ad8:	8bfb      	ldrh	r3, [r7, #30]
 8002ada:	3301      	adds	r3, #1
 8002adc:	83fb      	strh	r3, [r7, #30]
 8002ade:	8bfa      	ldrh	r2, [r7, #30]
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3dc      	bcc.n	8002aa0 <DRV_CANFDSPI_ReadWordArray+0xd8>
    }

    return spiTransferError;
 8002ae6:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000c788 	.word	0x2000c788
 8002af8:	48000800 	.word	0x48000800
 8002afc:	2000c7e8 	.word	0x2000c7e8
 8002b00:	2000c9a0 	.word	0x2000c9a0

08002b04 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <DRV_CANFDSPI_Configure+0x118>)
 8002b16:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	7a3b      	ldrb	r3, [r7, #8]
 8002b24:	f362 0304 	bfi	r3, r2, #0, #5
 8002b28:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	7a3b      	ldrb	r3, [r7, #8]
 8002b36:	f362 1345 	bfi	r3, r2, #5, #1
 8002b3a:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	7a3b      	ldrb	r3, [r7, #8]
 8002b48:	f362 1386 	bfi	r3, r2, #6, #1
 8002b4c:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	7a7b      	ldrb	r3, [r7, #9]
 8002b5a:	f362 0300 	bfi	r3, r2, #0, #1
 8002b5e:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	7a7b      	ldrb	r3, [r7, #9]
 8002b6c:	f362 0342 	bfi	r3, r2, #1, #2
 8002b70:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	7a7b      	ldrb	r3, [r7, #9]
 8002b7e:	f362 1304 	bfi	r3, r2, #4, #1
 8002b82:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	7abb      	ldrb	r3, [r7, #10]
 8002b90:	f362 0300 	bfi	r3, r2, #0, #1
 8002b94:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	7abb      	ldrb	r3, [r7, #10]
 8002ba2:	f362 0341 	bfi	r3, r2, #1, #1
 8002ba6:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	7abb      	ldrb	r3, [r7, #10]
 8002bb4:	f362 0382 	bfi	r3, r2, #2, #1
 8002bb8:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	7abb      	ldrb	r3, [r7, #10]
 8002bc6:	f362 03c3 	bfi	r3, r2, #3, #1
 8002bca:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	7abb      	ldrb	r3, [r7, #10]
 8002bd8:	f362 1304 	bfi	r3, r2, #4, #1
 8002bdc:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	789b      	ldrb	r3, [r3, #2]
 8002be2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	7afb      	ldrb	r3, [r7, #11]
 8002bea:	f362 1307 	bfi	r3, r2, #4, #4
 8002bee:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fcac 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	e001      	b.n	8002c12 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	04980760 	.word	0x04980760

08002c20 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8002c28:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8002c2a:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8002c2c:	7b3b      	ldrb	r3, [r7, #12]
 8002c2e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002c32:	b2d9      	uxtb	r1, r3
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	7813      	ldrb	r3, [r2, #0]
 8002c38:	f361 0304 	bfi	r3, r1, #0, #5
 8002c3c:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8002c3e:	7b3b      	ldrb	r3, [r7, #12]
 8002c40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	7813      	ldrb	r3, [r2, #0]
 8002c4a:	f361 1345 	bfi	r3, r1, #5, #1
 8002c4e:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c56:	b2d9      	uxtb	r1, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	7813      	ldrb	r3, [r2, #0]
 8002c5c:	f361 1386 	bfi	r3, r1, #6, #1
 8002c60:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8002c62:	7b7b      	ldrb	r3, [r7, #13]
 8002c64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c68:	b2d9      	uxtb	r1, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	7813      	ldrb	r3, [r2, #0]
 8002c6e:	f361 13c7 	bfi	r3, r1, #7, #1
 8002c72:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8002c74:	7b7b      	ldrb	r3, [r7, #13]
 8002c76:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002c7a:	b2d9      	uxtb	r1, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	7853      	ldrb	r3, [r2, #1]
 8002c80:	f361 0301 	bfi	r3, r1, #0, #2
 8002c84:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8002c86:	7b7b      	ldrb	r3, [r7, #13]
 8002c88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c8c:	b2d9      	uxtb	r1, r3
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	7853      	ldrb	r3, [r2, #1]
 8002c92:	f361 0382 	bfi	r3, r1, #2, #1
 8002c96:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8002c98:	7bbb      	ldrb	r3, [r7, #14]
 8002c9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c9e:	b2d9      	uxtb	r1, r3
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	7853      	ldrb	r3, [r2, #1]
 8002ca4:	f361 03c3 	bfi	r3, r1, #3, #1
 8002ca8:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8002caa:	7bbb      	ldrb	r3, [r7, #14]
 8002cac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002cb0:	b2d9      	uxtb	r1, r3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	7853      	ldrb	r3, [r2, #1]
 8002cb6:	f361 1304 	bfi	r3, r1, #4, #1
 8002cba:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	7853      	ldrb	r3, [r2, #1]
 8002cc8:	f361 1345 	bfi	r3, r1, #5, #1
 8002ccc:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8002cce:	7bbb      	ldrb	r3, [r7, #14]
 8002cd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002cd4:	b2d9      	uxtb	r1, r3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	7853      	ldrb	r3, [r2, #1]
 8002cda:	f361 1386 	bfi	r3, r1, #6, #1
 8002cde:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8002ce0:	7bbb      	ldrb	r3, [r7, #14]
 8002ce2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ce6:	b2d9      	uxtb	r1, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	7853      	ldrb	r3, [r2, #1]
 8002cec:	f361 13c7 	bfi	r3, r1, #7, #1
 8002cf0:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cf8:	b2d9      	uxtb	r1, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	7893      	ldrb	r3, [r2, #2]
 8002cfe:	f361 0303 	bfi	r3, r1, #0, #4
 8002d02:	7093      	strb	r3, [r2, #2]

    return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	04980760 	.word	0x04980760

08002d18 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460a      	mov	r2, r1
 8002d22:	71fb      	strb	r3, [r7, #7]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8002d30:	f107 020e 	add.w	r2, r7, #14
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2103      	movs	r1, #3
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fadf 	bl	80022fc <DRV_CANFDSPI_ReadByte>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e01a      	b.n	8002d86 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8002d50:	7bbb      	ldrb	r3, [r7, #14]
 8002d52:	f023 0307 	bic.w	r3, r3, #7
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8002d5a:	7bba      	ldrb	r2, [r7, #14]
 8002d5c:	79bb      	ldrb	r3, [r7, #6]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8002d64:	7bba      	ldrb	r2, [r7, #14]
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2103      	movs	r1, #3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fb22 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8002d7c:	f06f 0301 	mvn.w	r3, #1
 8002d80:	e001      	b.n	8002d86 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	603a      	str	r2, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8002daa:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8002dac:	7a3b      	ldrb	r3, [r7, #8]
 8002dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db2:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
 8002dc0:	f362 0304 	bfi	r3, r2, #0, #5
 8002dc4:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	785b      	ldrb	r3, [r3, #1]
 8002dca:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	7afb      	ldrb	r3, [r7, #11]
 8002dd2:	f362 1347 	bfi	r3, r2, #5, #3
 8002dd6:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	7abb      	ldrb	r3, [r7, #10]
 8002de4:	f362 1346 	bfi	r3, r2, #5, #2
 8002de8:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	7abb      	ldrb	r3, [r7, #10]
 8002df6:	f362 0304 	bfi	r3, r2, #0, #5
 8002dfa:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	7a3b      	ldrb	r3, [r7, #8]
 8002e08:	f362 1386 	bfi	r3, r2, #6, #1
 8002e0c:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	0052      	lsls	r2, r2, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3350      	adds	r3, #80	; 0x50
 8002e1e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	89b9      	ldrh	r1, [r7, #12]
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb94 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	00600400 	.word	0x00600400

08002e40 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8002e4a:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8002e4c:	7b3b      	ldrb	r3, [r7, #12]
 8002e4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e52:	b2d9      	uxtb	r1, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	7813      	ldrb	r3, [r2, #0]
 8002e58:	f361 0300 	bfi	r3, r1, #0, #1
 8002e5c:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002e64:	b2d9      	uxtb	r1, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	7813      	ldrb	r3, [r2, #0]
 8002e6a:	f361 0345 	bfi	r3, r1, #1, #5
 8002e6e:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8002e76:	b2d9      	uxtb	r1, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	7813      	ldrb	r3, [r2, #0]
 8002e7c:	f361 1387 	bfi	r3, r1, #6, #2
 8002e80:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002e88:	b2d9      	uxtb	r1, r3
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	7853      	ldrb	r3, [r2, #1]
 8002e8e:	f361 0304 	bfi	r3, r1, #0, #5
 8002e92:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002e9a:	b2d9      	uxtb	r1, r3
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	7853      	ldrb	r3, [r2, #1]
 8002ea0:	f361 1347 	bfi	r3, r1, #5, #3
 8002ea4:	7053      	strb	r3, [r2, #1]

    return 0;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	00600400 	.word	0x00600400

08002eb8 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0a0      	sub	sp, #128	; 0x80
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60ba      	str	r2, [r7, #8]
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002ed0:	7bbb      	ldrb	r3, [r7, #14]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	0052      	lsls	r2, r2, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3350      	adds	r3, #80	; 0x50
 8002ee0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002ee4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002ee8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8002eec:	7bf8      	ldrb	r0, [r7, #15]
 8002eee:	2303      	movs	r3, #3
 8002ef0:	f7ff fd6a 	bl	80029c8 <DRV_CANFDSPI_ReadWordArray>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8002efa:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e0c5      	b.n	8003094 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8002f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0a:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8002f0c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002f10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8002f1a:	f06f 0301 	mvn.w	r3, #1
 8002f1e:	e0b9      	b.n	8003094 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fc10 	bl	8004750 <DRV_CANFDSPI_DlcToDataBytes>
 8002f30:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8002f32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d202      	bcs.n	8002f42 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8002f3c:	f06f 0302 	mvn.w	r3, #2
 8002f40:	e0a8      	b.n	8003094 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f48:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002f4a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8002f58:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f60:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	789b      	ldrb	r3, [r3, #2]
 8002f74:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	78db      	ldrb	r3, [r3, #3]
 8002f7a:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	795b      	ldrb	r3, [r3, #5]
 8002f86:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	799b      	ldrb	r3, [r3, #6]
 8002f8c:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	79db      	ldrb	r3, [r3, #7]
 8002f92:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f9a:	e010      	b.n	8002fbe <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8002f9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	441a      	add	r2, r3
 8002fa4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002fa8:	3308      	adds	r3, #8
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	3380      	adds	r3, #128	; 0x80
 8002fae:	443b      	add	r3, r7
 8002fb0:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8002fb4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002fc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d8e8      	bhi.n	8002f9c <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8002fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d02b      	beq.n	800303a <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8002fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f1c3 0304 	rsb	r3, r3, #4
 8002ff2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8002ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8003002:	2300      	movs	r3, #0
 8003004:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003008:	e010      	b.n	800302c <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 800300a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800300e:	f103 0208 	add.w	r2, r3, #8
 8003012:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003016:	4413      	add	r3, r2
 8003018:	3380      	adds	r3, #128	; 0x80
 800301a:	443b      	add	r3, r7
 800301c:	2200      	movs	r2, #0
 800301e:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8003022:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003026:	3301      	adds	r3, #1
 8003028:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800302c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003030:	b29b      	uxth	r3, r3
 8003032:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8003036:	429a      	cmp	r2, r3
 8003038:	d8e7      	bhi.n	800300a <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 800303a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800303e:	b29a      	uxth	r2, r3
 8003040:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003044:	4413      	add	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	3308      	adds	r3, #8
 800304a:	b29b      	uxth	r3, r3
 800304c:	f107 0210 	add.w	r2, r7, #16
 8003050:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8003054:	7bf8      	ldrb	r0, [r7, #15]
 8003056:	f7ff fc45 	bl	80028e4 <DRV_CANFDSPI_WriteByteArray>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003060:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8003068:	f06f 0303 	mvn.w	r3, #3
 800306c:	e012      	b.n	8003094 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 800306e:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8003072:	7bb9      	ldrb	r1, [r7, #14]
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f810 	bl	800309c <DRV_CANFDSPI_TransmitChannelUpdate>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003082:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 800308a:	f06f 0304 	mvn.w	r3, #4
 800308e:	e001      	b.n	8003094 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8003090:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8003094:	4618      	mov	r0, r3
 8003096:	3780      	adds	r7, #128	; 0x80
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
 80030a6:	460b      	mov	r3, r1
 80030a8:	71bb      	strb	r3, [r7, #6]
 80030aa:	4613      	mov	r3, r2
 80030ac:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80030b2:	79bb      	ldrb	r3, [r7, #6]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	0052      	lsls	r2, r2, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3351      	adds	r3, #81	; 0x51
 80030c2:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 80030c8:	7a7b      	ldrb	r3, [r7, #9]
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 80030d0:	797b      	ldrb	r3, [r7, #5]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 80030d6:	7a7b      	ldrb	r3, [r7, #9]
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80030de:	7a7a      	ldrb	r2, [r7, #9]
 80030e0:	89b9      	ldrh	r1, [r7, #12]
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f965 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e001      	b.n	8003100 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80030fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	603a      	str	r2, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
 8003114:	460b      	mov	r3, r1
 8003116:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8003126:	79bb      	ldrb	r3, [r7, #6]
 8003128:	333e      	adds	r3, #62	; 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	89b9      	ldrh	r1, [r7, #12]
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fa0c 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	603a      	str	r2, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	460b      	mov	r3, r1
 800315a:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 800316a:	79bb      	ldrb	r3, [r7, #6]
 800316c:	b29b      	uxth	r3, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	b29b      	uxth	r3, r3
 8003172:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003176:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	89b9      	ldrh	r1, [r7, #12]
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f9e8 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	4604      	mov	r4, r0
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4623      	mov	r3, r4
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	4603      	mov	r3, r0
 80031a8:	71bb      	strb	r3, [r7, #6]
 80031aa:	460b      	mov	r3, r1
 80031ac:	717b      	strb	r3, [r7, #5]
 80031ae:	4613      	mov	r3, r2
 80031b0:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80031b6:	793b      	ldrb	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80031bc:	7a3b      	ldrb	r3, [r7, #8]
 80031be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c2:	723b      	strb	r3, [r7, #8]
 80031c4:	e003      	b.n	80031ce <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80031c6:	7a3b      	ldrb	r3, [r7, #8]
 80031c8:	f36f 13c7 	bfc	r3, #7, #1
 80031cc:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80031ce:	797b      	ldrb	r3, [r7, #5]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	7a3b      	ldrb	r3, [r7, #8]
 80031d8:	f362 0304 	bfi	r3, r2, #0, #5
 80031dc:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80031de:	79bb      	ldrb	r3, [r7, #6]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80031e6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80031e8:	7a3a      	ldrb	r2, [r7, #8]
 80031ea:	89b9      	ldrh	r1, [r7, #12]
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f8e0 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80031f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}

08003204 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	603a      	str	r2, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
 8003210:	460b      	mov	r3, r1
 8003212:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 800321c:	79bb      	ldrb	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 8003222:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003226:	e033      	b.n	8003290 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 800322a:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 800322c:	7a3b      	ldrb	r3, [r7, #8]
 800322e:	f36f 13c7 	bfc	r3, #7, #1
 8003232:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800323c:	b2da      	uxtb	r2, r3
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	f362 0304 	bfi	r3, r2, #0, #5
 8003244:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800324e:	b2da      	uxtb	r2, r3
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f362 1347 	bfi	r3, r2, #5, #3
 8003256:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	7a3b      	ldrb	r3, [r7, #8]
 8003264:	f362 1345 	bfi	r3, r2, #5, #1
 8003268:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800326a:	79bb      	ldrb	r3, [r7, #6]
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	0052      	lsls	r2, r2, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	b29b      	uxth	r3, r3
 8003278:	3350      	adds	r3, #80	; 0x50
 800327a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	89b9      	ldrh	r1, [r7, #12]
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f966 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800328c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	00600400 	.word	0x00600400

0800329c <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 80032a6:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80032ae:	b2d9      	uxtb	r1, r3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	7813      	ldrb	r3, [r2, #0]
 80032b4:	f361 0345 	bfi	r3, r1, #1, #5
 80032b8:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80032c0:	b2d9      	uxtb	r1, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	8813      	ldrh	r3, [r2, #0]
 80032c6:	f361 1388 	bfi	r3, r1, #6, #3
 80032ca:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80032cc:	7b3b      	ldrb	r3, [r7, #12]
 80032ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80032d2:	b2d9      	uxtb	r1, r3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	7813      	ldrb	r3, [r2, #0]
 80032d8:	f361 0300 	bfi	r3, r1, #0, #1
 80032dc:	7013      	strb	r3, [r2, #0]

    return 0;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	00600400 	.word	0x00600400

080032f0 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0a0      	sub	sp, #128	; 0x80
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60ba      	str	r2, [r7, #8]
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	460b      	mov	r3, r1
 8003300:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003314:	7bbb      	ldrb	r3, [r7, #14]
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	0052      	lsls	r2, r2, #1
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	b29b      	uxth	r3, r3
 8003322:	3350      	adds	r3, #80	; 0x50
 8003324:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8003328:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800332c:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8003330:	7bf8      	ldrb	r0, [r7, #15]
 8003332:	2303      	movs	r3, #3
 8003334:	f7ff fb48 	bl	80029c8 <DRV_CANFDSPI_ReadWordArray>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800333e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
 800334a:	e0cd      	b.n	80034e8 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8003350:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800335e:	f06f 0301 	mvn.w	r3, #1
 8003362:	e0c1      	b.n	80034e8 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8003364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003366:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 800336c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	b29b      	uxth	r3, r3
 8003376:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 800337a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800337e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003382:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 8003386:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800338a:	3308      	adds	r3, #8
 800338c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8003390:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 800339e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80033a2:	3304      	adds	r3, #4
 80033a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80033a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80033b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3304      	adds	r3, #4
 80033c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80033c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80033ca:	2b4c      	cmp	r3, #76	; 0x4c
 80033cc:	d902      	bls.n	80033d4 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80033ce:	234c      	movs	r3, #76	; 0x4c
 80033d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80033d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f107 0214 	add.w	r2, r7, #20
 80033de:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80033e2:	7bf8      	ldrb	r0, [r7, #15]
 80033e4:	f7ff f9fe 	bl	80027e4 <DRV_CANFDSPI_ReadByteArray>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80033ee:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80033f6:	f06f 0302 	mvn.w	r3, #2
 80033fa:	e075      	b.n	80034e8 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80033fc:	7d3b      	ldrb	r3, [r7, #20]
 80033fe:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 8003400:	7d7b      	ldrb	r3, [r7, #21]
 8003402:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8003404:	7dbb      	ldrb	r3, [r7, #22]
 8003406:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 8003412:	7e3b      	ldrb	r3, [r7, #24]
 8003414:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 8003416:	7e7b      	ldrb	r3, [r7, #25]
 8003418:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 800341a:	7ebb      	ldrb	r3, [r7, #26]
 800341c:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 800341e:	7efb      	ldrb	r3, [r7, #27]
 8003420:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8003428:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d027      	beq.n	8003486 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 8003436:	7f3b      	ldrb	r3, [r7, #28]
 8003438:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 800343a:	7f7b      	ldrb	r3, [r7, #29]
 800343c:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 800343e:	7fbb      	ldrb	r3, [r7, #30]
 8003440:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 8003442:	7ffb      	ldrb	r3, [r7, #31]
 8003444:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 800344c:	2300      	movs	r3, #0
 800344e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003452:	e011      	b.n	8003478 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8003454:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003458:	f103 020c 	add.w	r2, r3, #12
 800345c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	440b      	add	r3, r1
 8003464:	3280      	adds	r2, #128	; 0x80
 8003466:	443a      	add	r2, r7
 8003468:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 800346c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800346e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003472:	3301      	adds	r3, #1
 8003474:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003478:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800347c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003480:	429a      	cmp	r2, r3
 8003482:	d3e7      	bcc.n	8003454 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8003484:	e01e      	b.n	80034c4 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 800348c:	2300      	movs	r3, #0
 800348e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003492:	e011      	b.n	80034b8 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8003494:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003498:	f103 0208 	add.w	r2, r3, #8
 800349c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	440b      	add	r3, r1
 80034a4:	3280      	adds	r2, #128	; 0x80
 80034a6:	443a      	add	r2, r7
 80034a8:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80034ac:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80034ae:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80034b2:	3301      	adds	r3, #1
 80034b4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80034b8:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80034bc:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3e7      	bcc.n	8003494 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80034c4:	7bba      	ldrb	r2, [r7, #14]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f810 	bl	80034f0 <DRV_CANFDSPI_ReceiveChannelUpdate>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80034d6:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80034de:	f06f 0303 	mvn.w	r3, #3
 80034e2:	e001      	b.n	80034e8 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80034e4:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3780      	adds	r7, #128	; 0x80
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	460a      	mov	r2, r1
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 800350c:	79bb      	ldrb	r3, [r7, #6]
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	b29b      	uxth	r3, r3
 800351a:	3351      	adds	r3, #81	; 0x51
 800351c:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 800351e:	7a7b      	ldrb	r3, [r7, #9]
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8003526:	7a7a      	ldrb	r2, [r7, #9]
 8003528:	89f9      	ldrh	r1, [r7, #14]
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe ff41 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 8003532:	4603      	mov	r3, r0
 8003534:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8003536:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	460a      	mov	r2, r1
 800354c:	71fb      	strb	r3, [r7, #7]
 800354e:	4613      	mov	r3, r2
 8003550:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 800355a:	231e      	movs	r3, #30
 800355c:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 8003562:	f107 0208 	add.w	r2, r7, #8
 8003566:	89b9      	ldrh	r1, [r7, #12]
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f85a 	bl	8002624 <DRV_CANFDSPI_ReadHalfWord>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	e01b      	b.n	80035ba <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8003582:	893b      	ldrh	r3, [r7, #8]
 8003584:	b21a      	sxth	r2, r3
 8003586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800358a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800358e:	b21b      	sxth	r3, r3
 8003590:	4313      	orrs	r3, r2
 8003592:	b21b      	sxth	r3, r3
 8003594:	b29b      	uxth	r3, r3
 8003596:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8003598:	893a      	ldrh	r2, [r7, #8]
 800359a:	89b9      	ldrh	r1, [r7, #12]
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f8b8 	bl	8002714 <DRV_CANFDSPI_WriteHalfWord>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80035a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80035b0:	f06f 0301 	mvn.w	r3, #1
 80035b4:	e001      	b.n	80035ba <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4603      	mov	r3, r0
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	71fb      	strb	r3, [r7, #7]
 80035ce:	460b      	mov	r3, r1
 80035d0:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80035de:	79bb      	ldrb	r3, [r7, #6]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	0052      	lsls	r2, r2, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3354      	adds	r3, #84	; 0x54
 80035ee:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80035f0:	f107 0208 	add.w	r2, r7, #8
 80035f4:	89b9      	ldrh	r1, [r7, #12]
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe fe7f 	bl	80022fc <DRV_CANFDSPI_ReadByte>
 80035fe:	4603      	mov	r3, r0
 8003600:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	e007      	b.n	8003620 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8003610:	7a3b      	ldrb	r3, [r7, #8]
 8003612:	f003 0317 	and.w	r3, r3, #23
 8003616:	b2da      	uxtb	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800361c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	603a      	str	r2, [r7, #0]
 8003632:	71fb      	strb	r3, [r7, #7]
 8003634:	460b      	mov	r3, r1
 8003636:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8003640:	79bb      	ldrb	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8003646:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800364a:	e022      	b.n	8003692 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8003650:	79bb      	ldrb	r3, [r7, #6]
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	0052      	lsls	r2, r2, #1
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	b29b      	uxth	r3, r3
 800365e:	3354      	adds	r3, #84	; 0x54
 8003660:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8003662:	f107 0208 	add.w	r2, r7, #8
 8003666:	89b9      	ldrh	r1, [r7, #12]
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fe46 	bl	80022fc <DRV_CANFDSPI_ReadByte>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	e007      	b.n	8003692 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 8003682:	7a3b      	ldrb	r3, [r7, #8]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	b2da      	uxtb	r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	71fb      	strb	r3, [r7, #7]
 80036a4:	460b      	mov	r3, r1
 80036a6:	71bb      	strb	r3, [r7, #6]
 80036a8:	4613      	mov	r3, r2
 80036aa:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80036b4:	79bb      	ldrb	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80036ba:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80036be:	e036      	b.n	800372e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80036c0:	79bb      	ldrb	r3, [r7, #6]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	0052      	lsls	r2, r2, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3350      	adds	r3, #80	; 0x50
 80036d0:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80036d6:	f107 0208 	add.w	r2, r7, #8
 80036da:	89b9      	ldrh	r1, [r7, #12]
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fe0c 	bl	80022fc <DRV_CANFDSPI_ReadByte>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80036e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	e01b      	b.n	800372e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80036f6:	7a3b      	ldrb	r3, [r7, #8]
 80036f8:	b25a      	sxtb	r2, r3
 80036fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	b25b      	sxtb	r3, r3
 8003704:	4313      	orrs	r3, r2
 8003706:	b25b      	sxtb	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 800370c:	7a3a      	ldrb	r2, [r7, #8]
 800370e:	89b9      	ldrh	r1, [r7, #12]
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fe4e 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 8003718:	4603      	mov	r3, r0
 800371a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8003724:	f06f 0301 	mvn.w	r3, #1
 8003728:	e001      	b.n	800372e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800374e:	2334      	movs	r3, #52	; 0x34
 8003750:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8003756:	f107 0210 	add.w	r2, r7, #16
 800375a:	8ab9      	ldrh	r1, [r7, #20]
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fe82 	bl	8002468 <DRV_CANFDSPI_ReadWord>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e00d      	b.n	8003792 <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8003776:	7c7a      	ldrb	r2, [r7, #17]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 800377c:	7c3a      	ldrb	r2, [r7, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 8003782:	7cbb      	ldrb	r3, [r7, #18]
 8003784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003788:	b2da      	uxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800378e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80037ac:	f107 020e 	add.w	r2, r7, #14
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f640 610c 	movw	r1, #3596	; 0xe0c
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fda0 	bl	80022fc <DRV_CANFDSPI_ReadByte>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80037c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	e015      	b.n	80037fa <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80037d8:	7bba      	ldrb	r2, [r7, #14]
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f640 610c 	movw	r1, #3596	; 0xe0c
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fde7 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80037f2:	f06f 0301 	mvn.w	r3, #1
 80037f6:	e000      	b.n	80037fa <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b090      	sub	sp, #64	; 0x40
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	460a      	mov	r2, r1
 800380c:	71fb      	strb	r3, [r7, #7]
 800380e:	4613      	mov	r3, r2
 8003810:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8003818:	2300      	movs	r3, #0
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381c:	e008      	b.n	8003830 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 800381e:	f107 0208 	add.w	r2, r7, #8
 8003822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003824:	4413      	add	r3, r2
 8003826:	79ba      	ldrb	r2, [r7, #6]
 8003828:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	3301      	adds	r3, #1
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003832:	2b2f      	cmp	r3, #47	; 0x2f
 8003834:	d9f3      	bls.n	800381e <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8003836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800383a:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 800383c:	2300      	movs	r3, #0
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003840:	e016      	b.n	8003870 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8003842:	f107 0208 	add.w	r2, r7, #8
 8003846:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003848:	79f8      	ldrb	r0, [r7, #7]
 800384a:	2330      	movs	r3, #48	; 0x30
 800384c:	f7ff f84a 	bl	80028e4 <DRV_CANFDSPI_WriteByteArray>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8003856:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	e00a      	b.n	800387a <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8003864:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003866:	3330      	adds	r3, #48	; 0x30
 8003868:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 800386a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386c:	3301      	adds	r3, #1
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	2b29      	cmp	r3, #41	; 0x29
 8003874:	d9e5      	bls.n	8003842 <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8003876:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800387a:	4618      	mov	r0, r3
 800387c:	3740      	adds	r7, #64	; 0x40
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	4604      	mov	r4, r0
 800388a:	4608      	mov	r0, r1
 800388c:	4611      	mov	r1, r2
 800388e:	461a      	mov	r2, r3
 8003890:	4623      	mov	r3, r4
 8003892:	71fb      	strb	r3, [r7, #7]
 8003894:	4603      	mov	r3, r0
 8003896:	71bb      	strb	r3, [r7, #6]
 8003898:	460b      	mov	r3, r1
 800389a:	717b      	strb	r3, [r7, #5]
 800389c:	4613      	mov	r3, r2
 800389e:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80038a4:	793b      	ldrb	r3, [r7, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d036      	beq.n	8003918 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	dc4c      	bgt.n	8003948 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d018      	beq.n	80038e8 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80038b6:	e047      	b.n	8003948 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80038b8:	79ba      	ldrb	r2, [r7, #6]
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f84c 	bl	800395c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80038c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80038d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d4:	e03d      	b.n	8003952 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80038d6:	797a      	ldrb	r2, [r7, #5]
 80038d8:	79b9      	ldrb	r1, [r7, #6]
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f8c3 	bl	8003a68 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
            break;
 80038e6:	e032      	b.n	800394e <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 80038e8:	79ba      	ldrb	r2, [r7, #6]
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 faf2 	bl	8003ed8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80038f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003904:	e025      	b.n	8003952 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8003906:	797a      	ldrb	r2, [r7, #5]
 8003908:	79b9      	ldrb	r1, [r7, #6]
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fb6f 	bl	8003ff0 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8003912:	4603      	mov	r3, r0
 8003914:	73fb      	strb	r3, [r7, #15]
            break;
 8003916:	e01a      	b.n	800394e <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8003918:	79ba      	ldrb	r2, [r7, #6]
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fd10 	bl	8004344 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8003928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8003930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003934:	e00d      	b.n	8003952 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8003936:	797a      	ldrb	r2, [r7, #5]
 8003938:	79b9      	ldrb	r1, [r7, #6]
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fd8d 	bl	800445c <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8003942:	4603      	mov	r3, r0
 8003944:	73fb      	strb	r3, [r7, #15]
            break;
 8003946:	e002      	b.n	800394e <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8003948:	23ff      	movs	r3, #255	; 0xff
 800394a:	73fb      	strb	r3, [r7, #15]
            break;
 800394c:	bf00      	nop
    }

    return spiTransferError;
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bd90      	pop	{r4, r7, pc}
	...

0800395c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	460a      	mov	r2, r1
 8003966:	71fb      	strb	r3, [r7, #7]
 8003968:	4613      	mov	r3, r2
 800396a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003970:	4b3c      	ldr	r3, [pc, #240]	; (8003a64 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8003972:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003974:	79bb      	ldrb	r3, [r7, #6]
 8003976:	2b11      	cmp	r3, #17
 8003978:	d862      	bhi.n	8003a40 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039c9 	.word	0x080039c9
 8003984:	080039c9 	.word	0x080039c9
 8003988:	080039c9 	.word	0x080039c9
 800398c:	080039c9 	.word	0x080039c9
 8003990:	080039c9 	.word	0x080039c9
 8003994:	080039c9 	.word	0x080039c9
 8003998:	080039c9 	.word	0x080039c9
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	080039e7 	.word	0x080039e7
 80039a4:	080039e7 	.word	0x080039e7
 80039a8:	080039e7 	.word	0x080039e7
 80039ac:	080039e7 	.word	0x080039e7
 80039b0:	080039e7 	.word	0x080039e7
 80039b4:	080039e7 	.word	0x080039e7
 80039b8:	080039e7 	.word	0x080039e7
 80039bc:	08003a05 	.word	0x08003a05
 80039c0:	08003a05 	.word	0x08003a05
 80039c4:	08003a23 	.word	0x08003a23
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80039cc:	233e      	movs	r3, #62	; 0x3e
 80039ce:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80039d0:	7a7b      	ldrb	r3, [r7, #9]
 80039d2:	220f      	movs	r2, #15
 80039d4:	f362 0306 	bfi	r3, r2, #0, #7
 80039d8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80039da:	7a3b      	ldrb	r3, [r7, #8]
 80039dc:	220f      	movs	r2, #15
 80039de:	f362 0306 	bfi	r3, r2, #0, #7
 80039e2:	723b      	strb	r3, [r7, #8]
            break;
 80039e4:	e02f      	b.n	8003a46 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 80039ea:	237e      	movs	r3, #126	; 0x7e
 80039ec:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 80039ee:	7a7b      	ldrb	r3, [r7, #9]
 80039f0:	221f      	movs	r2, #31
 80039f2:	f362 0306 	bfi	r3, r2, #0, #7
 80039f6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80039f8:	7a3b      	ldrb	r3, [r7, #8]
 80039fa:	221f      	movs	r2, #31
 80039fc:	f362 0306 	bfi	r3, r2, #0, #7
 8003a00:	723b      	strb	r3, [r7, #8]
            break;
 8003a02:	e020      	b.n	8003a46 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003a08:	231e      	movs	r3, #30
 8003a0a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003a0c:	7a7b      	ldrb	r3, [r7, #9]
 8003a0e:	2207      	movs	r2, #7
 8003a10:	f362 0306 	bfi	r3, r2, #0, #7
 8003a14:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003a16:	7a3b      	ldrb	r3, [r7, #8]
 8003a18:	2207      	movs	r2, #7
 8003a1a:	f362 0306 	bfi	r3, r2, #0, #7
 8003a1e:	723b      	strb	r3, [r7, #8]
            break;
 8003a20:	e011      	b.n	8003a46 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8003a26:	23fe      	movs	r3, #254	; 0xfe
 8003a28:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8003a2a:	7a7b      	ldrb	r3, [r7, #9]
 8003a2c:	223f      	movs	r2, #63	; 0x3f
 8003a2e:	f362 0306 	bfi	r3, r2, #0, #7
 8003a32:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8003a34:	7a3b      	ldrb	r3, [r7, #8]
 8003a36:	223f      	movs	r2, #63	; 0x3f
 8003a38:	f362 0306 	bfi	r3, r2, #0, #7
 8003a3c:	723b      	strb	r3, [r7, #8]
            break;
 8003a3e:	e002      	b.n	8003a46 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	e009      	b.n	8003a5a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	2104      	movs	r1, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fd81 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8003a52:	4603      	mov	r3, r0
 8003a54:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	003e0f0f 	.word	0x003e0f0f

08003a68 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
 8003a72:	460b      	mov	r3, r1
 8003a74:	71bb      	strb	r3, [r7, #6]
 8003a76:	4613      	mov	r3, r2
 8003a78:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003a7e:	4be2      	ldr	r3, [pc, #904]	; (8003e08 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8003a80:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003a86:	7abb      	ldrb	r3, [r7, #10]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f362 0301 	bfi	r3, r2, #0, #2
 8003a8e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003a94:	79bb      	ldrb	r3, [r7, #6]
 8003a96:	2b11      	cmp	r3, #17
 8003a98:	f200 81f6 	bhi.w	8003e88 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003b2b 	.word	0x08003b2b
 8003aac:	08003b69 	.word	0x08003b69
 8003ab0:	08003ba7 	.word	0x08003ba7
 8003ab4:	08003be5 	.word	0x08003be5
 8003ab8:	08003c23 	.word	0x08003c23
 8003abc:	08003c5d 	.word	0x08003c5d
 8003ac0:	08003c91 	.word	0x08003c91
 8003ac4:	08003cc3 	.word	0x08003cc3
 8003ac8:	08003d09 	.word	0x08003d09
 8003acc:	08003d4f 	.word	0x08003d4f
 8003ad0:	08003d8d 	.word	0x08003d8d
 8003ad4:	08003dcb 	.word	0x08003dcb
 8003ad8:	08003e0d 	.word	0x08003e0d
 8003adc:	08003e4b 	.word	0x08003e4b
 8003ae0:	08003ba7 	.word	0x08003ba7
 8003ae4:	08003c5d 	.word	0x08003c5d
 8003ae8:	08003cc3 	.word	0x08003cc3
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	221e      	movs	r2, #30
 8003af4:	f362 0304 	bfi	r3, r2, #0, #5
 8003af8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003afa:	7b7b      	ldrb	r3, [r7, #13]
 8003afc:	2207      	movs	r2, #7
 8003afe:	f362 0303 	bfi	r3, r2, #0, #4
 8003b02:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003b04:	7b3b      	ldrb	r3, [r7, #12]
 8003b06:	2207      	movs	r2, #7
 8003b08:	f362 0303 	bfi	r3, r2, #0, #4
 8003b0c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003b0e:	7a7b      	ldrb	r3, [r7, #9]
 8003b10:	221f      	movs	r2, #31
 8003b12:	f362 0306 	bfi	r3, r2, #0, #7
 8003b16:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	7a3b      	ldrb	r3, [r7, #8]
 8003b22:	f362 0305 	bfi	r3, r2, #0, #6
 8003b26:	723b      	strb	r3, [r7, #8]
            break;
 8003b28:	e1b1      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	220e      	movs	r2, #14
 8003b32:	f362 0304 	bfi	r3, r2, #0, #5
 8003b36:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003b38:	7b7b      	ldrb	r3, [r7, #13]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	f362 0303 	bfi	r3, r2, #0, #4
 8003b40:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003b42:	7b3b      	ldrb	r3, [r7, #12]
 8003b44:	2203      	movs	r2, #3
 8003b46:	f362 0303 	bfi	r3, r2, #0, #4
 8003b4a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003b4c:	7a7b      	ldrb	r3, [r7, #9]
 8003b4e:	220f      	movs	r2, #15
 8003b50:	f362 0306 	bfi	r3, r2, #0, #7
 8003b54:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	7a3b      	ldrb	r3, [r7, #8]
 8003b60:	f362 0305 	bfi	r3, r2, #0, #6
 8003b64:	723b      	strb	r3, [r7, #8]
            break;
 8003b66:	e192      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	f362 0304 	bfi	r3, r2, #0, #5
 8003b74:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003b76:	7b7b      	ldrb	r3, [r7, #13]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f362 0303 	bfi	r3, r2, #0, #4
 8003b7e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003b80:	7b3b      	ldrb	r3, [r7, #12]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f362 0303 	bfi	r3, r2, #0, #4
 8003b88:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003b8a:	7a7b      	ldrb	r3, [r7, #9]
 8003b8c:	2209      	movs	r2, #9
 8003b8e:	f362 0306 	bfi	r3, r2, #0, #7
 8003b92:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	7a3b      	ldrb	r3, [r7, #8]
 8003b9e:	f362 0305 	bfi	r3, r2, #0, #6
 8003ba2:	723b      	strb	r3, [r7, #8]
            break;
 8003ba4:	e173      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003baa:	7bbb      	ldrb	r3, [r7, #14]
 8003bac:	2206      	movs	r2, #6
 8003bae:	f362 0304 	bfi	r3, r2, #0, #5
 8003bb2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003bb4:	7b7b      	ldrb	r3, [r7, #13]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f362 0303 	bfi	r3, r2, #0, #4
 8003bbc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003bbe:	7b3b      	ldrb	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f362 0303 	bfi	r3, r2, #0, #4
 8003bc6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003bc8:	7a7b      	ldrb	r3, [r7, #9]
 8003bca:	2207      	movs	r2, #7
 8003bcc:	f362 0306 	bfi	r3, r2, #0, #7
 8003bd0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	7a3b      	ldrb	r3, [r7, #8]
 8003bdc:	f362 0305 	bfi	r3, r2, #0, #6
 8003be0:	723b      	strb	r3, [r7, #8]
            break;
 8003be2:	e154      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8003be8:	7bbb      	ldrb	r3, [r7, #14]
 8003bea:	2204      	movs	r2, #4
 8003bec:	f362 0304 	bfi	r3, r2, #0, #5
 8003bf0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003bf2:	7b7b      	ldrb	r3, [r7, #13]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f362 0303 	bfi	r3, r2, #0, #4
 8003bfa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003bfc:	7b3b      	ldrb	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f362 0303 	bfi	r3, r2, #0, #4
 8003c04:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8003c06:	7a7b      	ldrb	r3, [r7, #9]
 8003c08:	2205      	movs	r2, #5
 8003c0a:	f362 0306 	bfi	r3, r2, #0, #7
 8003c0e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	7a3b      	ldrb	r3, [r7, #8]
 8003c1a:	f362 0305 	bfi	r3, r2, #0, #6
 8003c1e:	723b      	strb	r3, [r7, #8]
            break;
 8003c20:	e135      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	f362 0304 	bfi	r3, r2, #0, #5
 8003c2e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003c30:	7b7b      	ldrb	r3, [r7, #13]
 8003c32:	f36f 0303 	bfc	r3, #0, #4
 8003c36:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003c38:	7b3b      	ldrb	r3, [r7, #12]
 8003c3a:	f36f 0303 	bfc	r3, #0, #4
 8003c3e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8003c40:	7a7b      	ldrb	r3, [r7, #9]
 8003c42:	2204      	movs	r2, #4
 8003c44:	f362 0306 	bfi	r3, r2, #0, #7
 8003c48:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	7a3b      	ldrb	r3, [r7, #8]
 8003c54:	f362 0305 	bfi	r3, r2, #0, #6
 8003c58:	723b      	strb	r3, [r7, #8]
            break;
 8003c5a:	e118      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f362 0304 	bfi	r3, r2, #0, #5
 8003c68:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003c6a:	7b7b      	ldrb	r3, [r7, #13]
 8003c6c:	f36f 0303 	bfc	r3, #0, #4
 8003c70:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003c72:	7b3b      	ldrb	r3, [r7, #12]
 8003c74:	f36f 0303 	bfc	r3, #0, #4
 8003c78:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003c7a:	7a7b      	ldrb	r3, [r7, #9]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	f362 0306 	bfi	r3, r2, #0, #7
 8003c82:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8003c84:	7a3b      	ldrb	r3, [r7, #8]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f362 0305 	bfi	r3, r2, #0, #6
 8003c8c:	723b      	strb	r3, [r7, #8]
            break;
 8003c8e:	e0fe      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f362 0304 	bfi	r3, r2, #0, #5
 8003c9c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003c9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ca0:	f36f 0303 	bfc	r3, #0, #4
 8003ca4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003ca6:	7b3b      	ldrb	r3, [r7, #12]
 8003ca8:	f36f 0303 	bfc	r3, #0, #4
 8003cac:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003cae:	7a7b      	ldrb	r3, [r7, #9]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f362 0306 	bfi	r3, r2, #0, #7
 8003cb6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8003cb8:	7a3b      	ldrb	r3, [r7, #8]
 8003cba:	f36f 0305 	bfc	r3, #0, #6
 8003cbe:	723b      	strb	r3, [r7, #8]
            break;
 8003cc0:	e0e5      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	221e      	movs	r2, #30
 8003cca:	f362 0304 	bfi	r3, r2, #0, #5
 8003cce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003cd0:	7b7b      	ldrb	r3, [r7, #13]
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	f362 0303 	bfi	r3, r2, #0, #4
 8003cd8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003cda:	7b3b      	ldrb	r3, [r7, #12]
 8003cdc:	2207      	movs	r2, #7
 8003cde:	f362 0303 	bfi	r3, r2, #0, #4
 8003ce2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003ce4:	7a7b      	ldrb	r3, [r7, #9]
 8003ce6:	221f      	movs	r2, #31
 8003ce8:	f362 0306 	bfi	r3, r2, #0, #7
 8003cec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	7a3b      	ldrb	r3, [r7, #8]
 8003cf8:	f362 0305 	bfi	r3, r2, #0, #6
 8003cfc:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003cfe:	7abb      	ldrb	r3, [r7, #10]
 8003d00:	f36f 0301 	bfc	r3, #0, #2
 8003d04:	72bb      	strb	r3, [r7, #10]
            break;
 8003d06:	e0c2      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	2211      	movs	r2, #17
 8003d10:	f362 0304 	bfi	r3, r2, #0, #5
 8003d14:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	f362 0303 	bfi	r3, r2, #0, #4
 8003d1e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8003d20:	7b3b      	ldrb	r3, [r7, #12]
 8003d22:	2204      	movs	r2, #4
 8003d24:	f362 0303 	bfi	r3, r2, #0, #4
 8003d28:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8003d2a:	7a7b      	ldrb	r3, [r7, #9]
 8003d2c:	2212      	movs	r2, #18
 8003d2e:	f362 0306 	bfi	r3, r2, #0, #7
 8003d32:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	7a3b      	ldrb	r3, [r7, #8]
 8003d3e:	f362 0305 	bfi	r3, r2, #0, #6
 8003d42:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003d44:	7abb      	ldrb	r3, [r7, #10]
 8003d46:	f36f 0301 	bfc	r3, #0, #2
 8003d4a:	72bb      	strb	r3, [r7, #10]
            break;
 8003d4c:	e09f      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003d52:	7bbb      	ldrb	r3, [r7, #14]
 8003d54:	221e      	movs	r2, #30
 8003d56:	f362 0304 	bfi	r3, r2, #0, #5
 8003d5a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003d5c:	7b7b      	ldrb	r3, [r7, #13]
 8003d5e:	2207      	movs	r2, #7
 8003d60:	f362 0303 	bfi	r3, r2, #0, #4
 8003d64:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003d66:	7b3b      	ldrb	r3, [r7, #12]
 8003d68:	2207      	movs	r2, #7
 8003d6a:	f362 0303 	bfi	r3, r2, #0, #4
 8003d6e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003d70:	7a7b      	ldrb	r3, [r7, #9]
 8003d72:	221f      	movs	r2, #31
 8003d74:	f362 0306 	bfi	r3, r2, #0, #7
 8003d78:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	7a3b      	ldrb	r3, [r7, #8]
 8003d84:	f362 0305 	bfi	r3, r2, #0, #6
 8003d88:	723b      	strb	r3, [r7, #8]
            break;
 8003d8a:	e080      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8003d90:	7bbb      	ldrb	r3, [r7, #14]
 8003d92:	2212      	movs	r2, #18
 8003d94:	f362 0304 	bfi	r3, r2, #0, #5
 8003d98:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8003d9a:	7b7b      	ldrb	r3, [r7, #13]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f362 0303 	bfi	r3, r2, #0, #4
 8003da2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8003da4:	7b3b      	ldrb	r3, [r7, #12]
 8003da6:	2205      	movs	r2, #5
 8003da8:	f362 0303 	bfi	r3, r2, #0, #4
 8003dac:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8003dae:	7a7b      	ldrb	r3, [r7, #9]
 8003db0:	2213      	movs	r2, #19
 8003db2:	f362 0306 	bfi	r3, r2, #0, #7
 8003db6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	7a3b      	ldrb	r3, [r7, #8]
 8003dc2:	f362 0305 	bfi	r3, r2, #0, #6
 8003dc6:	723b      	strb	r3, [r7, #8]
            break;
 8003dc8:	e061      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003dce:	7bbb      	ldrb	r3, [r7, #14]
 8003dd0:	220e      	movs	r2, #14
 8003dd2:	f362 0304 	bfi	r3, r2, #0, #5
 8003dd6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003dd8:	7b7b      	ldrb	r3, [r7, #13]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	f362 0303 	bfi	r3, r2, #0, #4
 8003de0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003de2:	7b3b      	ldrb	r3, [r7, #12]
 8003de4:	2203      	movs	r2, #3
 8003de6:	f362 0303 	bfi	r3, r2, #0, #4
 8003dea:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003dec:	7a7b      	ldrb	r3, [r7, #9]
 8003dee:	220f      	movs	r2, #15
 8003df0:	f362 0306 	bfi	r3, r2, #0, #7
 8003df4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	7a3b      	ldrb	r3, [r7, #8]
 8003e00:	f362 0305 	bfi	r3, r2, #0, #6
 8003e04:	723b      	strb	r3, [r7, #8]
            break;
 8003e06:	e042      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8003e08:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003e10:	7bbb      	ldrb	r3, [r7, #14]
 8003e12:	2208      	movs	r2, #8
 8003e14:	f362 0304 	bfi	r3, r2, #0, #5
 8003e18:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003e1a:	7b7b      	ldrb	r3, [r7, #13]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f362 0303 	bfi	r3, r2, #0, #4
 8003e22:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003e24:	7b3b      	ldrb	r3, [r7, #12]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f362 0303 	bfi	r3, r2, #0, #4
 8003e2c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003e2e:	7a7b      	ldrb	r3, [r7, #9]
 8003e30:	2209      	movs	r2, #9
 8003e32:	f362 0306 	bfi	r3, r2, #0, #7
 8003e36:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	7a3b      	ldrb	r3, [r7, #8]
 8003e42:	f362 0305 	bfi	r3, r2, #0, #6
 8003e46:	723b      	strb	r3, [r7, #8]
            break;
 8003e48:	e021      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003e4e:	7bbb      	ldrb	r3, [r7, #14]
 8003e50:	2206      	movs	r2, #6
 8003e52:	f362 0304 	bfi	r3, r2, #0, #5
 8003e56:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003e58:	7b7b      	ldrb	r3, [r7, #13]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f362 0303 	bfi	r3, r2, #0, #4
 8003e60:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003e62:	7b3b      	ldrb	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f362 0303 	bfi	r3, r2, #0, #4
 8003e6a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003e6c:	7a7b      	ldrb	r3, [r7, #9]
 8003e6e:	2207      	movs	r2, #7
 8003e70:	f362 0306 	bfi	r3, r2, #0, #7
 8003e74:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	7a3b      	ldrb	r3, [r7, #8]
 8003e80:	f362 0305 	bfi	r3, r2, #0, #6
 8003e84:	723b      	strb	r3, [r7, #8]
            break;
 8003e86:	e002      	b.n	8003e8e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	e01f      	b.n	8003ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	2108      	movs	r1, #8
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe fb5d 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8003ea6:	f06f 0301 	mvn.w	r3, #1
 8003eaa:	e010      	b.n	8003ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	210c      	movs	r1, #12
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fb4e 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8003ec4:	f06f 0302 	mvn.w	r3, #2
 8003ec8:	e001      	b.n	8003ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8003eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003eec:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8003eee:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003ef0:	79bb      	ldrb	r3, [r7, #6]
 8003ef2:	2b11      	cmp	r3, #17
 8003ef4:	d862      	bhi.n	8003fbc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f45 	.word	0x08003f45
 8003f04:	08003fbd 	.word	0x08003fbd
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08003f45 	.word	0x08003f45
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f63 	.word	0x08003f63
 8003f20:	08003f63 	.word	0x08003f63
 8003f24:	08003f63 	.word	0x08003f63
 8003f28:	08003f63 	.word	0x08003f63
 8003f2c:	08003f63 	.word	0x08003f63
 8003f30:	08003f63 	.word	0x08003f63
 8003f34:	08003f63 	.word	0x08003f63
 8003f38:	08003f81 	.word	0x08003f81
 8003f3c:	08003f81 	.word	0x08003f81
 8003f40:	08003f9f 	.word	0x08003f9f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003f48:	231e      	movs	r3, #30
 8003f4a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003f4c:	7a7b      	ldrb	r3, [r7, #9]
 8003f4e:	2207      	movs	r2, #7
 8003f50:	f362 0306 	bfi	r3, r2, #0, #7
 8003f54:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003f56:	7a3b      	ldrb	r3, [r7, #8]
 8003f58:	2207      	movs	r2, #7
 8003f5a:	f362 0306 	bfi	r3, r2, #0, #7
 8003f5e:	723b      	strb	r3, [r7, #8]
            break;
 8003f60:	e02f      	b.n	8003fc2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003f66:	233e      	movs	r3, #62	; 0x3e
 8003f68:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003f6a:	7a7b      	ldrb	r3, [r7, #9]
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	f362 0306 	bfi	r3, r2, #0, #7
 8003f72:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003f74:	7a3b      	ldrb	r3, [r7, #8]
 8003f76:	220f      	movs	r2, #15
 8003f78:	f362 0306 	bfi	r3, r2, #0, #7
 8003f7c:	723b      	strb	r3, [r7, #8]
            break;
 8003f7e:	e020      	b.n	8003fc2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003f84:	230e      	movs	r3, #14
 8003f86:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003f88:	7a7b      	ldrb	r3, [r7, #9]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	f362 0306 	bfi	r3, r2, #0, #7
 8003f90:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8003f92:	7a3b      	ldrb	r3, [r7, #8]
 8003f94:	2203      	movs	r2, #3
 8003f96:	f362 0306 	bfi	r3, r2, #0, #7
 8003f9a:	723b      	strb	r3, [r7, #8]
            break;
 8003f9c:	e011      	b.n	8003fc2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8003fa2:	237e      	movs	r3, #126	; 0x7e
 8003fa4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8003fa6:	7a7b      	ldrb	r3, [r7, #9]
 8003fa8:	221f      	movs	r2, #31
 8003faa:	f362 0306 	bfi	r3, r2, #0, #7
 8003fae:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8003fb0:	7a3b      	ldrb	r3, [r7, #8]
 8003fb2:	221f      	movs	r2, #31
 8003fb4:	f362 0306 	bfi	r3, r2, #0, #7
 8003fb8:	723b      	strb	r3, [r7, #8]
            break;
 8003fba:	e002      	b.n	8003fc2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	e010      	b.n	8003fe4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	2104      	movs	r1, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fac3 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8003fda:	f06f 0301 	mvn.w	r3, #1
 8003fde:	e001      	b.n	8003fe4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8003fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	003e0f0f 	.word	0x003e0f0f

08003ff0 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	71bb      	strb	r3, [r7, #6]
 8003ffe:	4613      	mov	r3, r2
 8004000:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004006:	4bce      	ldr	r3, [pc, #824]	; (8004340 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8004008:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800400e:	7abb      	ldrb	r3, [r7, #10]
 8004010:	2202      	movs	r2, #2
 8004012:	f362 0301 	bfi	r3, r2, #0, #2
 8004016:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 800401c:	79bb      	ldrb	r3, [r7, #6]
 800401e:	2b11      	cmp	r3, #17
 8004020:	f200 8166 	bhi.w	80042f0 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004075 	.word	0x08004075
 8004030:	080040b3 	.word	0x080040b3
 8004034:	080042f1 	.word	0x080042f1
 8004038:	080040f1 	.word	0x080040f1
 800403c:	0800412b 	.word	0x0800412b
 8004040:	08004165 	.word	0x08004165
 8004044:	08004165 	.word	0x08004165
 8004048:	08004165 	.word	0x08004165
 800404c:	0800416b 	.word	0x0800416b
 8004050:	080041b1 	.word	0x080041b1
 8004054:	080041f7 	.word	0x080041f7
 8004058:	08004235 	.word	0x08004235
 800405c:	08004273 	.word	0x08004273
 8004060:	080042b1 	.word	0x080042b1
 8004064:	080042b7 	.word	0x080042b7
 8004068:	080040f1 	.word	0x080040f1
 800406c:	08004165 	.word	0x08004165
 8004070:	0800416b 	.word	0x0800416b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	220e      	movs	r2, #14
 800407c:	f362 0304 	bfi	r3, r2, #0, #5
 8004080:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004082:	7b7b      	ldrb	r3, [r7, #13]
 8004084:	2203      	movs	r2, #3
 8004086:	f362 0303 	bfi	r3, r2, #0, #4
 800408a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800408c:	7b3b      	ldrb	r3, [r7, #12]
 800408e:	2203      	movs	r2, #3
 8004090:	f362 0303 	bfi	r3, r2, #0, #4
 8004094:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004096:	7a7b      	ldrb	r3, [r7, #9]
 8004098:	220f      	movs	r2, #15
 800409a:	f362 0306 	bfi	r3, r2, #0, #7
 800409e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	7a3b      	ldrb	r3, [r7, #8]
 80040aa:	f362 0305 	bfi	r3, r2, #0, #6
 80040ae:	723b      	strb	r3, [r7, #8]
            break;
 80040b0:	e121      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80040b6:	7bbb      	ldrb	r3, [r7, #14]
 80040b8:	2206      	movs	r2, #6
 80040ba:	f362 0304 	bfi	r3, r2, #0, #5
 80040be:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80040c0:	7b7b      	ldrb	r3, [r7, #13]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f362 0303 	bfi	r3, r2, #0, #4
 80040c8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80040ca:	7b3b      	ldrb	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f362 0303 	bfi	r3, r2, #0, #4
 80040d2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80040d4:	7a7b      	ldrb	r3, [r7, #9]
 80040d6:	2207      	movs	r2, #7
 80040d8:	f362 0306 	bfi	r3, r2, #0, #7
 80040dc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	7a3b      	ldrb	r3, [r7, #8]
 80040e8:	f362 0305 	bfi	r3, r2, #0, #6
 80040ec:	723b      	strb	r3, [r7, #8]
            break;
 80040ee:	e102      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f362 0304 	bfi	r3, r2, #0, #5
 80040fc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	f36f 0303 	bfc	r3, #0, #4
 8004104:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004106:	7b3b      	ldrb	r3, [r7, #12]
 8004108:	f36f 0303 	bfc	r3, #0, #4
 800410c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800410e:	7a7b      	ldrb	r3, [r7, #9]
 8004110:	2203      	movs	r2, #3
 8004112:	f362 0306 	bfi	r3, r2, #0, #7
 8004116:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411e:	b2da      	uxtb	r2, r3
 8004120:	7a3b      	ldrb	r3, [r7, #8]
 8004122:	f362 0305 	bfi	r3, r2, #0, #6
 8004126:	723b      	strb	r3, [r7, #8]
            break;
 8004128:	e0e5      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800412e:	7bbb      	ldrb	r3, [r7, #14]
 8004130:	2201      	movs	r2, #1
 8004132:	f362 0304 	bfi	r3, r2, #0, #5
 8004136:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004138:	7b7b      	ldrb	r3, [r7, #13]
 800413a:	f36f 0303 	bfc	r3, #0, #4
 800413e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004140:	7b3b      	ldrb	r3, [r7, #12]
 8004142:	f36f 0303 	bfc	r3, #0, #4
 8004146:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8004148:	7a7b      	ldrb	r3, [r7, #9]
 800414a:	2202      	movs	r2, #2
 800414c:	f362 0306 	bfi	r3, r2, #0, #7
 8004150:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004158:	b2da      	uxtb	r2, r3
 800415a:	7a3b      	ldrb	r3, [r7, #8]
 800415c:	f362 0305 	bfi	r3, r2, #0, #6
 8004160:	723b      	strb	r3, [r7, #8]
            break;
 8004162:	e0c8      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
 8004168:	e0e5      	b.n	8004336 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800416e:	7bbb      	ldrb	r3, [r7, #14]
 8004170:	221e      	movs	r2, #30
 8004172:	f362 0304 	bfi	r3, r2, #0, #5
 8004176:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004178:	7b7b      	ldrb	r3, [r7, #13]
 800417a:	2207      	movs	r2, #7
 800417c:	f362 0303 	bfi	r3, r2, #0, #4
 8004180:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004182:	7b3b      	ldrb	r3, [r7, #12]
 8004184:	2207      	movs	r2, #7
 8004186:	f362 0303 	bfi	r3, r2, #0, #4
 800418a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 800418c:	7a7b      	ldrb	r3, [r7, #9]
 800418e:	221f      	movs	r2, #31
 8004190:	f362 0306 	bfi	r3, r2, #0, #7
 8004194:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	b2da      	uxtb	r2, r3
 800419e:	7a3b      	ldrb	r3, [r7, #8]
 80041a0:	f362 0305 	bfi	r3, r2, #0, #6
 80041a4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80041a6:	7abb      	ldrb	r3, [r7, #10]
 80041a8:	f36f 0301 	bfc	r3, #0, #2
 80041ac:	72bb      	strb	r3, [r7, #10]
            break;
 80041ae:	e0a2      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80041b4:	7bbb      	ldrb	r3, [r7, #14]
 80041b6:	2211      	movs	r2, #17
 80041b8:	f362 0304 	bfi	r3, r2, #0, #5
 80041bc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80041be:	7b7b      	ldrb	r3, [r7, #13]
 80041c0:	2204      	movs	r2, #4
 80041c2:	f362 0303 	bfi	r3, r2, #0, #4
 80041c6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80041c8:	7b3b      	ldrb	r3, [r7, #12]
 80041ca:	2204      	movs	r2, #4
 80041cc:	f362 0303 	bfi	r3, r2, #0, #4
 80041d0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80041d2:	7a7b      	ldrb	r3, [r7, #9]
 80041d4:	2212      	movs	r2, #18
 80041d6:	f362 0306 	bfi	r3, r2, #0, #7
 80041da:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	7a3b      	ldrb	r3, [r7, #8]
 80041e6:	f362 0305 	bfi	r3, r2, #0, #6
 80041ea:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80041ec:	7abb      	ldrb	r3, [r7, #10]
 80041ee:	f36f 0301 	bfc	r3, #0, #2
 80041f2:	72bb      	strb	r3, [r7, #10]
            break;
 80041f4:	e07f      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80041fa:	7bbb      	ldrb	r3, [r7, #14]
 80041fc:	220e      	movs	r2, #14
 80041fe:	f362 0304 	bfi	r3, r2, #0, #5
 8004202:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004204:	7b7b      	ldrb	r3, [r7, #13]
 8004206:	2203      	movs	r2, #3
 8004208:	f362 0303 	bfi	r3, r2, #0, #4
 800420c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800420e:	7b3b      	ldrb	r3, [r7, #12]
 8004210:	2203      	movs	r2, #3
 8004212:	f362 0303 	bfi	r3, r2, #0, #4
 8004216:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004218:	7a7b      	ldrb	r3, [r7, #9]
 800421a:	220f      	movs	r2, #15
 800421c:	f362 0306 	bfi	r3, r2, #0, #7
 8004220:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004228:	b2da      	uxtb	r2, r3
 800422a:	7a3b      	ldrb	r3, [r7, #8]
 800422c:	f362 0305 	bfi	r3, r2, #0, #6
 8004230:	723b      	strb	r3, [r7, #8]
            break;
 8004232:	e060      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	2208      	movs	r2, #8
 800423c:	f362 0304 	bfi	r3, r2, #0, #5
 8004240:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004242:	7b7b      	ldrb	r3, [r7, #13]
 8004244:	2202      	movs	r2, #2
 8004246:	f362 0303 	bfi	r3, r2, #0, #4
 800424a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 800424c:	7b3b      	ldrb	r3, [r7, #12]
 800424e:	2202      	movs	r2, #2
 8004250:	f362 0303 	bfi	r3, r2, #0, #4
 8004254:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8004256:	7a7b      	ldrb	r3, [r7, #9]
 8004258:	2209      	movs	r2, #9
 800425a:	f362 0306 	bfi	r3, r2, #0, #7
 800425e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004266:	b2da      	uxtb	r2, r3
 8004268:	7a3b      	ldrb	r3, [r7, #8]
 800426a:	f362 0305 	bfi	r3, r2, #0, #6
 800426e:	723b      	strb	r3, [r7, #8]
            break;
 8004270:	e041      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004276:	7bbb      	ldrb	r3, [r7, #14]
 8004278:	2206      	movs	r2, #6
 800427a:	f362 0304 	bfi	r3, r2, #0, #5
 800427e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004280:	7b7b      	ldrb	r3, [r7, #13]
 8004282:	2201      	movs	r2, #1
 8004284:	f362 0303 	bfi	r3, r2, #0, #4
 8004288:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800428a:	7b3b      	ldrb	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f362 0303 	bfi	r3, r2, #0, #4
 8004292:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004294:	7a7b      	ldrb	r3, [r7, #9]
 8004296:	2207      	movs	r2, #7
 8004298:	f362 0306 	bfi	r3, r2, #0, #7
 800429c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	7a3b      	ldrb	r3, [r7, #8]
 80042a8:	f362 0305 	bfi	r3, r2, #0, #6
 80042ac:	723b      	strb	r3, [r7, #8]
            break;
 80042ae:	e022      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	e03f      	b.n	8004336 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80042ba:	7bbb      	ldrb	r3, [r7, #14]
 80042bc:	2202      	movs	r2, #2
 80042be:	f362 0304 	bfi	r3, r2, #0, #5
 80042c2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80042c4:	7b7b      	ldrb	r3, [r7, #13]
 80042c6:	f36f 0303 	bfc	r3, #0, #4
 80042ca:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80042cc:	7b3b      	ldrb	r3, [r7, #12]
 80042ce:	f36f 0303 	bfc	r3, #0, #4
 80042d2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80042d4:	7a7b      	ldrb	r3, [r7, #9]
 80042d6:	2203      	movs	r2, #3
 80042d8:	f362 0306 	bfi	r3, r2, #0, #7
 80042dc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	7a3b      	ldrb	r3, [r7, #8]
 80042e8:	f362 0305 	bfi	r3, r2, #0, #6
 80042ec:	723b      	strb	r3, [r7, #8]
            break;
 80042ee:	e002      	b.n	80042f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	e01f      	b.n	8004336 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2108      	movs	r1, #8
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe f929 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8004302:	4603      	mov	r3, r0
 8004304:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 800430e:	f06f 0301 	mvn.w	r3, #1
 8004312:	e010      	b.n	8004336 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	210c      	movs	r1, #12
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f91a 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 800432c:	f06f 0302 	mvn.w	r3, #2
 8004330:	e001      	b.n	8004336 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8004332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	000e0303 	.word	0x000e0303

08004344 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	460a      	mov	r2, r1
 800434e:	71fb      	strb	r3, [r7, #7]
 8004350:	4613      	mov	r3, r2
 8004352:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 800435a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 800435c:	79bb      	ldrb	r3, [r7, #6]
 800435e:	2b11      	cmp	r3, #17
 8004360:	d862      	bhi.n	8004428 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	080043b1 	.word	0x080043b1
 800436c:	080043b1 	.word	0x080043b1
 8004370:	08004429 	.word	0x08004429
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043b1 	.word	0x080043b1
 8004384:	080043b1 	.word	0x080043b1
 8004388:	080043cf 	.word	0x080043cf
 800438c:	080043cf 	.word	0x080043cf
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043cf 	.word	0x080043cf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043ed 	.word	0x080043ed
 80043ac:	0800440b 	.word	0x0800440b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80043b4:	230e      	movs	r3, #14
 80043b6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80043b8:	7a7b      	ldrb	r3, [r7, #9]
 80043ba:	2203      	movs	r2, #3
 80043bc:	f362 0306 	bfi	r3, r2, #0, #7
 80043c0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80043c2:	7a3b      	ldrb	r3, [r7, #8]
 80043c4:	2203      	movs	r2, #3
 80043c6:	f362 0306 	bfi	r3, r2, #0, #7
 80043ca:	723b      	strb	r3, [r7, #8]
            break;
 80043cc:	e02f      	b.n	800442e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80043d2:	231e      	movs	r3, #30
 80043d4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80043d6:	7a7b      	ldrb	r3, [r7, #9]
 80043d8:	2207      	movs	r2, #7
 80043da:	f362 0306 	bfi	r3, r2, #0, #7
 80043de:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80043e0:	7a3b      	ldrb	r3, [r7, #8]
 80043e2:	2207      	movs	r2, #7
 80043e4:	f362 0306 	bfi	r3, r2, #0, #7
 80043e8:	723b      	strb	r3, [r7, #8]
            break;
 80043ea:	e020      	b.n	800442e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80043f0:	2307      	movs	r3, #7
 80043f2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80043f4:	7a7b      	ldrb	r3, [r7, #9]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f362 0306 	bfi	r3, r2, #0, #7
 80043fc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80043fe:	7a3b      	ldrb	r3, [r7, #8]
 8004400:	2202      	movs	r2, #2
 8004402:	f362 0306 	bfi	r3, r2, #0, #7
 8004406:	723b      	strb	r3, [r7, #8]
            break;
 8004408:	e011      	b.n	800442e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800440e:	233e      	movs	r3, #62	; 0x3e
 8004410:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004412:	7a7b      	ldrb	r3, [r7, #9]
 8004414:	220f      	movs	r2, #15
 8004416:	f362 0306 	bfi	r3, r2, #0, #7
 800441a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800441c:	7a3b      	ldrb	r3, [r7, #8]
 800441e:	220f      	movs	r2, #15
 8004420:	f362 0306 	bfi	r3, r2, #0, #7
 8004424:	723b      	strb	r3, [r7, #8]
            break;
 8004426:	e002      	b.n	800442e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
 800442c:	e010      	b.n	8004450 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	2104      	movs	r1, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe f88d 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8004446:	f06f 0301 	mvn.w	r3, #1
 800444a:	e001      	b.n	8004450 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 800444c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	003e0f0f 	.word	0x003e0f0f

0800445c <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
 8004466:	460b      	mov	r3, r1
 8004468:	71bb      	strb	r3, [r7, #6]
 800446a:	4613      	mov	r3, r2
 800446c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004472:	4b92      	ldr	r3, [pc, #584]	; (80046bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8004474:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800447a:	7abb      	ldrb	r3, [r7, #10]
 800447c:	2202      	movs	r2, #2
 800447e:	f362 0301 	bfi	r3, r2, #0, #2
 8004482:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8004488:	79bb      	ldrb	r3, [r7, #6]
 800448a:	2b11      	cmp	r3, #17
 800448c:	f200 80ef 	bhi.w	800466e <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044e1 	.word	0x080044e1
 800449c:	0800451f 	.word	0x0800451f
 80044a0:	0800466f 	.word	0x0800466f
 80044a4:	08004559 	.word	0x08004559
 80044a8:	08004559 	.word	0x08004559
 80044ac:	08004559 	.word	0x08004559
 80044b0:	08004559 	.word	0x08004559
 80044b4:	08004559 	.word	0x08004559
 80044b8:	0800455f 	.word	0x0800455f
 80044bc:	080045a5 	.word	0x080045a5
 80044c0:	080045eb 	.word	0x080045eb
 80044c4:	08004629 	.word	0x08004629
 80044c8:	0800462f 	.word	0x0800462f
 80044cc:	08004669 	.word	0x08004669
 80044d0:	08004669 	.word	0x08004669
 80044d4:	08004559 	.word	0x08004559
 80044d8:	08004559 	.word	0x08004559
 80044dc:	0800455f 	.word	0x0800455f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	2206      	movs	r2, #6
 80044e8:	f362 0304 	bfi	r3, r2, #0, #5
 80044ec:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80044ee:	7b7b      	ldrb	r3, [r7, #13]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f362 0303 	bfi	r3, r2, #0, #4
 80044f6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80044f8:	7b3b      	ldrb	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f362 0303 	bfi	r3, r2, #0, #4
 8004500:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004502:	7a7b      	ldrb	r3, [r7, #9]
 8004504:	2207      	movs	r2, #7
 8004506:	f362 0306 	bfi	r3, r2, #0, #7
 800450a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004512:	b2da      	uxtb	r2, r3
 8004514:	7a3b      	ldrb	r3, [r7, #8]
 8004516:	f362 0305 	bfi	r3, r2, #0, #6
 800451a:	723b      	strb	r3, [r7, #8]
            break;
 800451c:	e0aa      	b.n	8004674 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004522:	7bbb      	ldrb	r3, [r7, #14]
 8004524:	2202      	movs	r2, #2
 8004526:	f362 0304 	bfi	r3, r2, #0, #5
 800452a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800452c:	7b7b      	ldrb	r3, [r7, #13]
 800452e:	f36f 0303 	bfc	r3, #0, #4
 8004532:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004534:	7b3b      	ldrb	r3, [r7, #12]
 8004536:	f36f 0303 	bfc	r3, #0, #4
 800453a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800453c:	7a7b      	ldrb	r3, [r7, #9]
 800453e:	2203      	movs	r2, #3
 8004540:	f362 0306 	bfi	r3, r2, #0, #7
 8004544:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454c:	b2da      	uxtb	r2, r3
 800454e:	7a3b      	ldrb	r3, [r7, #8]
 8004550:	f362 0305 	bfi	r3, r2, #0, #6
 8004554:	723b      	strb	r3, [r7, #8]
            break;
 8004556:	e08d      	b.n	8004674 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	e0aa      	b.n	80046b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004562:	7bbb      	ldrb	r3, [r7, #14]
 8004564:	220e      	movs	r2, #14
 8004566:	f362 0304 	bfi	r3, r2, #0, #5
 800456a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800456c:	7b7b      	ldrb	r3, [r7, #13]
 800456e:	2203      	movs	r2, #3
 8004570:	f362 0303 	bfi	r3, r2, #0, #4
 8004574:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004576:	7b3b      	ldrb	r3, [r7, #12]
 8004578:	2203      	movs	r2, #3
 800457a:	f362 0303 	bfi	r3, r2, #0, #4
 800457e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004580:	7a7b      	ldrb	r3, [r7, #9]
 8004582:	220f      	movs	r2, #15
 8004584:	f362 0306 	bfi	r3, r2, #0, #7
 8004588:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004590:	b2da      	uxtb	r2, r3
 8004592:	7a3b      	ldrb	r3, [r7, #8]
 8004594:	f362 0305 	bfi	r3, r2, #0, #6
 8004598:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800459a:	7abb      	ldrb	r3, [r7, #10]
 800459c:	f36f 0301 	bfc	r3, #0, #2
 80045a0:	72bb      	strb	r3, [r7, #10]
            break;
 80045a2:	e067      	b.n	8004674 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	2207      	movs	r2, #7
 80045ac:	f362 0304 	bfi	r3, r2, #0, #5
 80045b0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80045b2:	7b7b      	ldrb	r3, [r7, #13]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f362 0303 	bfi	r3, r2, #0, #4
 80045ba:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80045bc:	7b3b      	ldrb	r3, [r7, #12]
 80045be:	2202      	movs	r2, #2
 80045c0:	f362 0303 	bfi	r3, r2, #0, #4
 80045c4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80045c6:	7a7b      	ldrb	r3, [r7, #9]
 80045c8:	2208      	movs	r2, #8
 80045ca:	f362 0306 	bfi	r3, r2, #0, #7
 80045ce:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	7a3b      	ldrb	r3, [r7, #8]
 80045da:	f362 0305 	bfi	r3, r2, #0, #6
 80045de:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80045e0:	7abb      	ldrb	r3, [r7, #10]
 80045e2:	f36f 0301 	bfc	r3, #0, #2
 80045e6:	72bb      	strb	r3, [r7, #10]
            break;
 80045e8:	e044      	b.n	8004674 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	2206      	movs	r2, #6
 80045f2:	f362 0304 	bfi	r3, r2, #0, #5
 80045f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80045f8:	7b7b      	ldrb	r3, [r7, #13]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f362 0303 	bfi	r3, r2, #0, #4
 8004600:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004602:	7b3b      	ldrb	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f362 0303 	bfi	r3, r2, #0, #4
 800460a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800460c:	7a7b      	ldrb	r3, [r7, #9]
 800460e:	2207      	movs	r2, #7
 8004610:	f362 0306 	bfi	r3, r2, #0, #7
 8004614:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	b2da      	uxtb	r2, r3
 800461e:	7a3b      	ldrb	r3, [r7, #8]
 8004620:	f362 0305 	bfi	r3, r2, #0, #6
 8004624:	723b      	strb	r3, [r7, #8]
            break;
 8004626:	e025      	b.n	8004674 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	e042      	b.n	80046b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004632:	7bbb      	ldrb	r3, [r7, #14]
 8004634:	2202      	movs	r2, #2
 8004636:	f362 0304 	bfi	r3, r2, #0, #5
 800463a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800463c:	7b7b      	ldrb	r3, [r7, #13]
 800463e:	f36f 0303 	bfc	r3, #0, #4
 8004642:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004644:	7b3b      	ldrb	r3, [r7, #12]
 8004646:	f36f 0303 	bfc	r3, #0, #4
 800464a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800464c:	7a7b      	ldrb	r3, [r7, #9]
 800464e:	2203      	movs	r2, #3
 8004650:	f362 0306 	bfi	r3, r2, #0, #7
 8004654:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	b2da      	uxtb	r2, r3
 800465e:	7a3b      	ldrb	r3, [r7, #8]
 8004660:	f362 0305 	bfi	r3, r2, #0, #6
 8004664:	723b      	strb	r3, [r7, #8]
            break;
 8004666:	e005      	b.n	8004674 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
 800466c:	e022      	b.n	80046b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	e01f      	b.n	80046b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	2108      	movs	r1, #8
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd ff6a 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 800468c:	f06f 0301 	mvn.w	r3, #1
 8004690:	e010      	b.n	80046b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	210c      	movs	r1, #12
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd ff5b 	bl	8002554 <DRV_CANFDSPI_WriteWord>
 800469e:	4603      	mov	r3, r0
 80046a0:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80046a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80046aa:	f06f 0302 	mvn.w	r3, #2
 80046ae:	e001      	b.n	80046b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80046b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	000e0303 	.word	0x000e0303

080046c0 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
 80046ca:	460b      	mov	r3, r1
 80046cc:	71bb      	strb	r3, [r7, #6]
 80046ce:	4613      	mov	r3, r2
 80046d0:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80046da:	f640 6307 	movw	r3, #3591	; 0xe07
 80046de:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	1cda      	adds	r2, r3, #3
 80046ea:	89b9      	ldrh	r1, [r7, #12]
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fe04 	bl	80022fc <DRV_CANFDSPI_ReadByte>
 80046f4:	4603      	mov	r3, r0
 80046f6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80046f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	e020      	b.n	8004748 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8004706:	79bb      	ldrb	r3, [r7, #6]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	f362 0300 	bfi	r3, r2, #0, #1
 8004714:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8004716:	797b      	ldrb	r3, [r7, #5]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	f362 0341 	bfi	r3, r2, #1, #1
 8004724:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8004726:	7afa      	ldrb	r2, [r7, #11]
 8004728:	89b9      	ldrh	r1, [r7, #12]
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd fe41 	bl	80023b4 <DRV_CANFDSPI_WriteByte>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 800473e:	f06f 0301 	mvn.w	r3, #1
 8004742:	e001      	b.n	8004748 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8004744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d802      	bhi.n	800476a <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e02a      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	3b09      	subs	r3, #9
 800476e:	2b06      	cmp	r3, #6
 8004770:	d825      	bhi.n	80047be <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	08004795 	.word	0x08004795
 800477c:	0800479b 	.word	0x0800479b
 8004780:	080047a1 	.word	0x080047a1
 8004784:	080047a7 	.word	0x080047a7
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b3 	.word	0x080047b3
 8004790:	080047b9 	.word	0x080047b9
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8004794:	230c      	movs	r3, #12
 8004796:	60fb      	str	r3, [r7, #12]
                break;
 8004798:	e012      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 800479a:	2310      	movs	r3, #16
 800479c:	60fb      	str	r3, [r7, #12]
                break;
 800479e:	e00f      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80047a0:	2314      	movs	r3, #20
 80047a2:	60fb      	str	r3, [r7, #12]
                break;
 80047a4:	e00c      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80047a6:	2318      	movs	r3, #24
 80047a8:	60fb      	str	r3, [r7, #12]
                break;
 80047aa:	e009      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80047ac:	2320      	movs	r3, #32
 80047ae:	60fb      	str	r3, [r7, #12]
                break;
 80047b0:	e006      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80047b2:	2330      	movs	r3, #48	; 0x30
 80047b4:	60fb      	str	r3, [r7, #12]
                break;
 80047b6:	e003      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80047b8:	2340      	movs	r3, #64	; 0x40
 80047ba:	60fb      	str	r3, [r7, #12]
                break;
 80047bc:	e000      	b.n	80047c0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80047be:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80047c0:	68fb      	ldr	r3, [r7, #12]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80047d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f023 0218 	bic.w	r2, r3, #24
 80047e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800480a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4313      	orrs	r3, r2
 8004812:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4013      	ands	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004820:	68fb      	ldr	r3, [r7, #12]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  getTime();
 8004838:	f000 f822 	bl	8004880 <getTime>
  sprintf(txBuffer,"%s %s\r\n",time, message);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <serialOut+0x40>)
 8004840:	490c      	ldr	r1, [pc, #48]	; (8004874 <serialOut+0x44>)
 8004842:	480d      	ldr	r0, [pc, #52]	; (8004878 <serialOut+0x48>)
 8004844:	f006 fc6c 	bl	800b120 <siprintf>

  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8004848:	480b      	ldr	r0, [pc, #44]	; (8004878 <serialOut+0x48>)
 800484a:	f7fb fc99 	bl	8000180 <strlen>
 800484e:	4603      	mov	r3, r0
 8004850:	b29a      	uxth	r2, r3
 8004852:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004856:	4908      	ldr	r1, [pc, #32]	; (8004878 <serialOut+0x48>)
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <serialOut+0x4c>)
 800485a:	f005 fdd5 	bl	800a408 <HAL_UART_Transmit>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <serialOut+0x38>
    Error_Handler();
 8004864:	f000 fcd8 	bl	8005218 <Error_Handler>
  }
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	2000ce18 	.word	0x2000ce18
 8004874:	0800cb8c 	.word	0x0800cb8c
 8004878:	2000ce24 	.word	0x2000ce24
 800487c:	2000c8dc 	.word	0x2000c8dc

08004880 <getTime>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTime(void){
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	609a      	str	r2, [r3, #8]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	2201      	movs	r2, #1
 80048a0:	4619      	mov	r1, r3
 80048a2:	480e      	ldr	r0, [pc, #56]	; (80048dc <getTime+0x5c>)
 80048a4:	f003 fe4e 	bl	8008544 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	2201      	movs	r2, #1
 80048ac:	4619      	mov	r1, r3
 80048ae:	480b      	ldr	r0, [pc, #44]	; (80048dc <getTime+0x5c>)
 80048b0:	f003 ff52 	bl	8008758 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80048b4:	7abb      	ldrb	r3, [r7, #10]
 80048b6:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80048b8:	7a7b      	ldrb	r3, [r7, #9]
 80048ba:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80048bc:	7a3b      	ldrb	r3, [r7, #8]
 80048be:	777b      	strb	r3, [r7, #29]
  sprintf(time,"%02x:%02x:%02x",hours,minutes,seconds);
 80048c0:	7f7a      	ldrb	r2, [r7, #29]
 80048c2:	7fb9      	ldrb	r1, [r7, #30]
 80048c4:	7ffb      	ldrb	r3, [r7, #31]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	460b      	mov	r3, r1
 80048ca:	4905      	ldr	r1, [pc, #20]	; (80048e0 <getTime+0x60>)
 80048cc:	4805      	ldr	r0, [pc, #20]	; (80048e4 <getTime+0x64>)
 80048ce:	f006 fc27 	bl	800b120 <siprintf>
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000c97c 	.word	0x2000c97c
 80048e0:	0800cb94 	.word	0x0800cb94
 80048e4:	2000ce18 	.word	0x2000ce18

080048e8 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d012      	beq.n	800491e <switchLedOn+0x36>
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	dc16      	bgt.n	800492a <switchLedOn+0x42>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <switchLedOn+0x1e>
 8004900:	2b01      	cmp	r3, #1
 8004902:	d006      	beq.n	8004912 <switchLedOn+0x2a>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 8004904:	e011      	b.n	800492a <switchLedOn+0x42>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 8004906:	2201      	movs	r2, #1
 8004908:	2102      	movs	r1, #2
 800490a:	480a      	ldr	r0, [pc, #40]	; (8004934 <switchLedOn+0x4c>)
 800490c:	f001 fd3a 	bl	8006384 <HAL_GPIO_WritePin>
            break;
 8004910:	e00c      	b.n	800492c <switchLedOn+0x44>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 8004912:	2201      	movs	r2, #1
 8004914:	2101      	movs	r1, #1
 8004916:	4807      	ldr	r0, [pc, #28]	; (8004934 <switchLedOn+0x4c>)
 8004918:	f001 fd34 	bl	8006384 <HAL_GPIO_WritePin>
            break;
 800491c:	e006      	b.n	800492c <switchLedOn+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 800491e:	2201      	movs	r2, #1
 8004920:	2120      	movs	r1, #32
 8004922:	4804      	ldr	r0, [pc, #16]	; (8004934 <switchLedOn+0x4c>)
 8004924:	f001 fd2e 	bl	8006384 <HAL_GPIO_WritePin>
            break;
 8004928:	e000      	b.n	800492c <switchLedOn+0x44>
        default: break;
 800492a:	bf00      	nop
    }
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	48000400 	.word	0x48000400

08004938 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d012      	beq.n	800496e <switchLedOff+0x36>
 8004948:	2b02      	cmp	r3, #2
 800494a:	dc16      	bgt.n	800497a <switchLedOff+0x42>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <switchLedOff+0x1e>
 8004950:	2b01      	cmp	r3, #1
 8004952:	d006      	beq.n	8004962 <switchLedOff+0x2a>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8004954:	e011      	b.n	800497a <switchLedOff+0x42>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8004956:	2200      	movs	r2, #0
 8004958:	2102      	movs	r1, #2
 800495a:	480a      	ldr	r0, [pc, #40]	; (8004984 <switchLedOff+0x4c>)
 800495c:	f001 fd12 	bl	8006384 <HAL_GPIO_WritePin>
            break;
 8004960:	e00c      	b.n	800497c <switchLedOff+0x44>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 8004962:	2200      	movs	r2, #0
 8004964:	2101      	movs	r1, #1
 8004966:	4807      	ldr	r0, [pc, #28]	; (8004984 <switchLedOff+0x4c>)
 8004968:	f001 fd0c 	bl	8006384 <HAL_GPIO_WritePin>
            break;
 800496c:	e006      	b.n	800497c <switchLedOff+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 800496e:	2200      	movs	r2, #0
 8004970:	2120      	movs	r1, #32
 8004972:	4804      	ldr	r0, [pc, #16]	; (8004984 <switchLedOff+0x4c>)
 8004974:	f001 fd06 	bl	8006384 <HAL_GPIO_WritePin>
            break;
 8004978:	e000      	b.n	800497c <switchLedOff+0x44>
        default: break;
 800497a:	bf00      	nop
    }
}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	48000400 	.word	0x48000400

08004988 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN1_INT_Pin){
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004998:	d04e      	beq.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a0:	d103      	bne.n	80049aa <HAL_GPIO_EXTI_Callback+0x22>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <HAL_GPIO_EXTI_Callback+0xb8>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON2_Pin){

  }else if(GPIO_Pin == BUTTON3_Pin){

  }
}
 80049a8:	e046      	b.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d119      	bne.n	80049e6 <HAL_GPIO_EXTI_Callback+0x5e>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 80049b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049b6:	4823      	ldr	r0, [pc, #140]	; (8004a44 <HAL_GPIO_EXTI_Callback+0xbc>)
 80049b8:	f001 fccc 	bl	8006354 <HAL_GPIO_ReadPin>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <HAL_GPIO_EXTI_Callback+0xc0>)
 80049cc:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_GPIO_EXTI_Callback+0xc0>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_EXTI_Callback+0x56>
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7ff ff86 	bl	80048e8 <switchLedOn>
}
 80049dc:	e02c      	b.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
     else switchLedOff(VCU_RX_LED);
 80049de:	2000      	movs	r0, #0
 80049e0:	f7ff ffaa 	bl	8004938 <switchLedOff>
}
 80049e4:	e028      	b.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d024      	beq.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f4:	d103      	bne.n	80049fe <HAL_GPIO_EXTI_Callback+0x76>
    can2TxInterrupt = 1;
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <HAL_GPIO_EXTI_Callback+0xc4>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]
}
 80049fc:	e01c      	b.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a04:	d118      	bne.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8004a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a0a:	480e      	ldr	r0, [pc, #56]	; (8004a44 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004a0c:	f001 fca2 	bl	8006354 <HAL_GPIO_ReadPin>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8004a20:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_EXTI_Callback+0xaa>
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f7ff ff5c 	bl	80048e8 <switchLedOn>
}
 8004a30:	e002      	b.n	8004a38 <HAL_GPIO_EXTI_Callback+0xb0>
    else switchLedOff(MCU_RX_LED);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f7ff ff80 	bl	8004938 <switchLedOff>
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	2000ceef 	.word	0x2000ceef
 8004a44:	48000400 	.word	0x48000400
 8004a48:	2000ceee 	.word	0x2000ceee
 8004a4c:	2000ceed 	.word	0x2000ceed
 8004a50:	2000ceec 	.word	0x2000ceec

08004a54 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d108      	bne.n	8004a7a <HAL_TIM_PeriodElapsedCallback+0x26>
    // last contact timer overflow
    etTimerOverflows++;
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a06      	ldr	r2, [pc, #24]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004a70:	6013      	str	r3, [r2, #0]


    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin);
 8004a72:	2120      	movs	r1, #32
 8004a74:	4805      	ldr	r0, [pc, #20]	; (8004a8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004a76:	f001 fc9d 	bl	80063b4 <HAL_GPIO_TogglePin>
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000ca68 	.word	0x2000ca68
 8004a88:	2000cef0 	.word	0x2000cef0
 8004a8c:	48000400 	.word	0x48000400

08004a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a94:	f001 f958 	bl	8005d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a98:	f000 f824 	bl	8004ae4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004a9c:	f000 f88e 	bl	8004bbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aa0:	f000 fb06 	bl	80050b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004aa4:	f000 f9b2 	bl	8004e0c <MX_SPI1_Init>
  MX_SPI2_Init();
 8004aa8:	f000 f9ee 	bl	8004e88 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004aac:	f000 f8f0 	bl	8004c90 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8004ab0:	f000 fad6 	bl	8005060 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8004ab4:	f000 f938 	bl	8004d28 <MX_PKA_Init>
  MX_RTC_Init();
 8004ab8:	f000 f94a 	bl	8004d50 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8004abc:	f000 f89c 	bl	8004bf8 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8004ac0:	f000 fa20 	bl	8004f04 <MX_TIM1_Init>


  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  DRV_CANFDSPI_Reset(CAN2);
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	f7fd fbcf 	bl	8002268 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN1);
 8004aca:	2000      	movs	r0, #0
 8004acc:	f7fd fbcc 	bl	8002268 <DRV_CANFDSPI_Reset>
  PC_Initialize();
 8004ad0:	f7fb fd30 	bl	8000534 <PC_Initialize>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <main+0x50>)
 8004ad6:	f004 fb97 	bl	8009208 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PC_Tasks();
 8004ada:	f7fb fe4b 	bl	8000774 <PC_Tasks>
 8004ade:	e7fc      	b.n	8004ada <main+0x4a>
 8004ae0:	2000ca68 	.word	0x2000ca68

08004ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b09a      	sub	sp, #104	; 0x68
 8004ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aea:	f107 0320 	add.w	r3, r7, #32
 8004aee:	2248      	movs	r2, #72	; 0x48
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f006 face 	bl	800b094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	609a      	str	r2, [r3, #8]
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	611a      	str	r2, [r3, #16]
 8004b06:	615a      	str	r2, [r3, #20]
 8004b08:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004b0a:	f001 fddb 	bl	80066c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8004b0e:	2010      	movs	r0, #16
 8004b10:	f7ff fe5e 	bl	80047d0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <SystemClock_Config+0xd4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <SystemClock_Config+0xd4>)
 8004b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <SystemClock_Config+0xd4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004b30:	2307      	movs	r3, #7
 8004b32:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b44:	2340      	movs	r3, #64	; 0x40
 8004b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004b50:	2310      	movs	r3, #16
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004b54:	2308      	movs	r3, #8
 8004b56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b68:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b6a:	f107 0320 	add.w	r3, r7, #32
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 f93c 	bl	8006dec <HAL_RCC_OscConfig>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004b7a:	f000 fb4d 	bl	8005218 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004b7e:	236f      	movs	r3, #111	; 0x6f
 8004b80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b82:	2303      	movs	r3, #3
 8004b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	2103      	movs	r1, #3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 fc98 	bl	80074d4 <HAL_RCC_ClockConfig>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004baa:	f000 fb35 	bl	8005218 <Error_Handler>
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3768      	adds	r7, #104	; 0x68
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	58000400 	.word	0x58000400

08004bbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b094      	sub	sp, #80	; 0x50
 8004bc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	2250      	movs	r2, #80	; 0x50
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f006 fa63 	bl	800b094 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8004bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bd2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004bd8:	2310      	movs	r3, #16
 8004bda:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bdc:	463b      	mov	r3, r7
 8004bde:	4618      	mov	r0, r3
 8004be0:	f003 f8b5 	bl	8007d4e <HAL_RCCEx_PeriphCLKConfig>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8004bea:	f000 fb15 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004bee:	bf00      	nop
 8004bf0:	3750      	adds	r7, #80	; 0x50
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004bfe:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <MX_LPUART1_UART_Init+0x94>)
 8004c00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004c10:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004c16:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c1e:	220c      	movs	r2, #12
 8004c20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c22:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004c40:	4811      	ldr	r0, [pc, #68]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c42:	f005 fb91 	bl	800a368 <HAL_UART_Init>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004c4c:	f000 fae4 	bl	8005218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c50:	2100      	movs	r1, #0
 8004c52:	480d      	ldr	r0, [pc, #52]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c54:	f006 f8e0 	bl	800ae18 <HAL_UARTEx_SetTxFifoThreshold>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004c5e:	f000 fadb 	bl	8005218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c62:	2100      	movs	r1, #0
 8004c64:	4808      	ldr	r0, [pc, #32]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c66:	f006 f915 	bl	800ae94 <HAL_UARTEx_SetRxFifoThreshold>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004c70:	f000 fad2 	bl	8005218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004c74:	4804      	ldr	r0, [pc, #16]	; (8004c88 <MX_LPUART1_UART_Init+0x90>)
 8004c76:	f006 f896 	bl	800ada6 <HAL_UARTEx_DisableFifoMode>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004c80:	f000 faca 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2000c848 	.word	0x2000c848
 8004c8c:	40008000 	.word	0x40008000

08004c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c94:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004c96:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <MX_USART1_UART_Init+0x94>)
 8004c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cae:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cb6:	220c      	movs	r2, #12
 8004cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cba:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cd8:	4811      	ldr	r0, [pc, #68]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cda:	f005 fb45 	bl	800a368 <HAL_UART_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004ce4:	f000 fa98 	bl	8005218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ce8:	2100      	movs	r1, #0
 8004cea:	480d      	ldr	r0, [pc, #52]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cec:	f006 f894 	bl	800ae18 <HAL_UARTEx_SetTxFifoThreshold>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004cf6:	f000 fa8f 	bl	8005218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4808      	ldr	r0, [pc, #32]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cfe:	f006 f8c9 	bl	800ae94 <HAL_UARTEx_SetRxFifoThreshold>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004d08:	f000 fa86 	bl	8005218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004d0c:	4804      	ldr	r0, [pc, #16]	; (8004d20 <MX_USART1_UART_Init+0x90>)
 8004d0e:	f006 f84a 	bl	800ada6 <HAL_UARTEx_DisableFifoMode>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004d18:	f000 fa7e 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	2000c8dc 	.word	0x2000c8dc
 8004d24:	40013800 	.word	0x40013800

08004d28 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <MX_PKA_Init+0x20>)
 8004d2e:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <MX_PKA_Init+0x24>)
 8004d30:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8004d32:	4805      	ldr	r0, [pc, #20]	; (8004d48 <MX_PKA_Init+0x20>)
 8004d34:	f001 fc97 	bl	8006666 <HAL_PKA_Init>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8004d3e:	f000 fa6b 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	2000c970 	.word	0x2000c970
 8004d4c:	58002000 	.word	0x58002000

08004d50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  RTC_TimeTypeDef sTime = {0};
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004d68:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d6a:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <MX_RTC_Init+0xb8>)
 8004d6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004d6e:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004d74:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d76:	227f      	movs	r2, #127	; 0x7f
 8004d78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004d7a:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004d86:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004d98:	481a      	ldr	r0, [pc, #104]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004d9a:	f003 fa5f 	bl	800825c <HAL_RTC_Init>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8004da4:	f000 fa38 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	480f      	ldr	r0, [pc, #60]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004dc8:	f003 faf8 	bl	80083bc <HAL_RTC_SetTime>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8004dd2:	f000 fa21 	bl	8005218 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	70fb      	strb	r3, [r7, #3]


  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004de6:	463b      	mov	r3, r7
 8004de8:	2201      	movs	r2, #1
 8004dea:	4619      	mov	r1, r3
 8004dec:	4805      	ldr	r0, [pc, #20]	; (8004e04 <MX_RTC_Init+0xb4>)
 8004dee:	f003 fc05 	bl	80085fc <HAL_RTC_SetDate>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8004df8:	f000 fa0e 	bl	8005218 <Error_Handler>
  }
  /* USER CODE END RTC_Init 2 */

}
 8004dfc:	bf00      	nop
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	2000c97c 	.word	0x2000c97c
 8004e08:	40002800 	.word	0x40002800

08004e0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <MX_SPI1_Init+0x78>)
 8004e14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e42:	2208      	movs	r2, #8
 8004e44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e5a:	2207      	movs	r2, #7
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e6a:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_SPI1_Init+0x74>)
 8004e6c:	f003 fd4d 	bl	800890a <HAL_SPI_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004e76:	f000 f9cf 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000c9a0 	.word	0x2000c9a0
 8004e84:	40013000 	.word	0x40013000

08004e88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <MX_SPI2_Init+0x74>)
 8004e8e:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <MX_SPI2_Init+0x78>)
 8004e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <MX_SPI2_Init+0x74>)
 8004e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004e9a:	4b18      	ldr	r3, [pc, #96]	; (8004efc <MX_SPI2_Init+0x74>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ea2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004ea6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <MX_SPI2_Init+0x74>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <MX_SPI2_Init+0x74>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <MX_SPI2_Init+0x74>)
 8004eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <MX_SPI2_Init+0x74>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004ed4:	4b09      	ldr	r3, [pc, #36]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ed6:	2207      	movs	r2, #7
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <MX_SPI2_Init+0x74>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004ee6:	4805      	ldr	r0, [pc, #20]	; (8004efc <MX_SPI2_Init+0x74>)
 8004ee8:	f003 fd0f 	bl	800890a <HAL_SPI_Init>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004ef2:	f000 f991 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2000ca04 	.word	0x2000ca04
 8004f00:	40003800 	.word	0x40003800

08004f04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b09c      	sub	sp, #112	; 0x70
 8004f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
 8004f14:	609a      	str	r2, [r3, #8]
 8004f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	605a      	str	r2, [r3, #4]
 8004f22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	60da      	str	r2, [r3, #12]
 8004f32:	611a      	str	r2, [r3, #16]
 8004f34:	615a      	str	r2, [r3, #20]
 8004f36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	2234      	movs	r2, #52	; 0x34
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f006 f8a8 	bl	800b094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f44:	4b44      	ldr	r3, [pc, #272]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f46:	4a45      	ldr	r2, [pc, #276]	; (800505c <MX_TIM1_Init+0x158>)
 8004f48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8004f4a:	4b43      	ldr	r3, [pc, #268]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f4c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004f50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8004f58:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f60:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f66:	4b3c      	ldr	r3, [pc, #240]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f6c:	4b3a      	ldr	r3, [pc, #232]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f72:	4839      	ldr	r0, [pc, #228]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f74:	f004 f8e4 	bl	8009140 <HAL_TIM_Base_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8004f7e:	f000 f94b 	bl	8005218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f86:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4832      	ldr	r0, [pc, #200]	; (8005058 <MX_TIM1_Init+0x154>)
 8004f90:	f004 fbb2 	bl	80096f8 <HAL_TIM_ConfigClockSource>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8004f9a:	f000 f93d 	bl	8005218 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004f9e:	482e      	ldr	r0, [pc, #184]	; (8005058 <MX_TIM1_Init+0x154>)
 8004fa0:	f004 f980 	bl	80092a4 <HAL_TIM_OC_Init>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8004faa:	f000 f935 	bl	8005218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4825      	ldr	r0, [pc, #148]	; (8005058 <MX_TIM1_Init+0x154>)
 8004fc2:	f005 f899 	bl	800a0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8004fcc:	f000 f924 	bl	8005218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4818      	ldr	r0, [pc, #96]	; (8005058 <MX_TIM1_Init+0x154>)
 8004ff6:	f004 fb05 	bl	8009604 <HAL_TIM_OC_ConfigChannel>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005000:	f000 f90a 	bl	8005218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005008:	2300      	movs	r3, #0
 800500a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800501c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005022:	2300      	movs	r3, #0
 8005024:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800502a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005034:	2300      	movs	r3, #0
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005038:	2300      	movs	r3, #0
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4805      	ldr	r0, [pc, #20]	; (8005058 <MX_TIM1_Init+0x154>)
 8005042:	f005 f8b9 	bl	800a1b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800504c:	f000 f8e4 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005050:	bf00      	nop
 8005052:	3770      	adds	r7, #112	; 0x70
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	2000ca68 	.word	0x2000ca68
 800505c:	40012c00 	.word	0x40012c00

08005060 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 8005066:	4a11      	ldr	r2, [pc, #68]	; (80050ac <MX_USB_PCD_Init+0x4c>)
 8005068:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 800506c:	2208      	movs	r2, #8
 800506e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 8005072:	2202      	movs	r2, #2
 8005074:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 8005078:	2202      	movs	r2, #2
 800507a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 800507e:	2200      	movs	r2, #0
 8005080:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 800508a:	2200      	movs	r2, #0
 800508c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 8005090:	2200      	movs	r2, #0
 8005092:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005094:	4804      	ldr	r0, [pc, #16]	; (80050a8 <MX_USB_PCD_Init+0x48>)
 8005096:	f001 f9e3 	bl	8006460 <HAL_PCD_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80050a0:	f000 f8ba 	bl	8005218 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80050a4:	bf00      	nop
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	2000cb24 	.word	0x2000cb24
 80050ac:	40006800 	.word	0x40006800

080050b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c4:	2004      	movs	r0, #4
 80050c6:	f7ff fb99 	bl	80047fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ca:	2002      	movs	r0, #2
 80050cc:	f7ff fb96 	bl	80047fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7ff fb93 	bl	80047fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050d6:	2008      	movs	r0, #8
 80050d8:	f7ff fb90 	bl	80047fc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80050dc:	2200      	movs	r2, #0
 80050de:	2129      	movs	r1, #41	; 0x29
 80050e0:	484a      	ldr	r0, [pc, #296]	; (800520c <MX_GPIO_Init+0x15c>)
 80050e2:	f001 f94f 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80050e6:	2200      	movs	r2, #0
 80050e8:	2120      	movs	r1, #32
 80050ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ee:	f001 f949 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80050f2:	2200      	movs	r2, #0
 80050f4:	2123      	movs	r1, #35	; 0x23
 80050f6:	4846      	ldr	r0, [pc, #280]	; (8005210 <MX_GPIO_Init+0x160>)
 80050f8:	f001 f944 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin
                           CAN2_INT1_Pin */
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 80050fc:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8005100:	607b      	str	r3, [r7, #4]
                          |CAN2_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005102:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800510c:	1d3b      	adds	r3, r7, #4
 800510e:	4619      	mov	r1, r3
 8005110:	483f      	ldr	r0, [pc, #252]	; (8005210 <MX_GPIO_Init+0x160>)
 8005112:	f000 ffaf 	bl	8006074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 8005116:	2329      	movs	r3, #41	; 0x29
 8005118:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511a:	2301      	movs	r3, #1
 800511c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4838      	ldr	r0, [pc, #224]	; (800520c <MX_GPIO_Init+0x15c>)
 800512c:	f000 ffa2 	bl	8006074 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8005130:	2320      	movs	r3, #32
 8005132:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005134:	2301      	movs	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8005140:	1d3b      	adds	r3, r7, #4
 8005142:	4619      	mov	r1, r3
 8005144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005148:	f000 ff94 	bl	8006074 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 800514c:	2310      	movs	r3, #16
 800514e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005150:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005156:	2301      	movs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	4619      	mov	r1, r3
 800515e:	482b      	ldr	r0, [pc, #172]	; (800520c <MX_GPIO_Init+0x15c>)
 8005160:	f000 ff88 	bl	8006074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005164:	2323      	movs	r3, #35	; 0x23
 8005166:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005168:	2301      	movs	r3, #1
 800516a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005170:	2300      	movs	r3, #0
 8005172:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4825      	ldr	r0, [pc, #148]	; (8005210 <MX_GPIO_Init+0x160>)
 800517a:	f000 ff7b 	bl	8006074 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin;
 800517e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005184:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	4619      	mov	r1, r3
 8005192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005196:	f000 ff6d 	bl	8006074 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 800519a:	2303      	movs	r3, #3
 800519c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800519e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80051a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051a4:	2301      	movs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4819      	ldr	r0, [pc, #100]	; (8005214 <MX_GPIO_Init+0x164>)
 80051ae:	f000 ff61 	bl	8006074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2100      	movs	r1, #0
 80051b6:	2006      	movs	r0, #6
 80051b8:	f000 ff27 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80051bc:	2006      	movs	r0, #6
 80051be:	f000 ff3e 	bl	800603e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	2007      	movs	r0, #7
 80051c8:	f000 ff1f 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80051cc:	2007      	movs	r0, #7
 80051ce:	f000 ff36 	bl	800603e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2100      	movs	r1, #0
 80051d6:	200a      	movs	r0, #10
 80051d8:	f000 ff17 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80051dc:	200a      	movs	r0, #10
 80051de:	f000 ff2e 	bl	800603e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	2017      	movs	r0, #23
 80051e8:	f000 ff0f 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80051ec:	2017      	movs	r0, #23
 80051ee:	f000 ff26 	bl	800603e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	2028      	movs	r0, #40	; 0x28
 80051f8:	f000 ff07 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80051fc:	2028      	movs	r0, #40	; 0x28
 80051fe:	f000 ff1e 	bl	800603e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005202:	bf00      	nop
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	48000800 	.word	0x48000800
 8005210:	48000400 	.word	0x48000400
 8005214:	48000c00 	.word	0x48000c00

08005218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800521c:	b672      	cpsid	i
}
 800521e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8005220:	4904      	ldr	r1, [pc, #16]	; (8005234 <Error_Handler+0x1c>)
 8005222:	4805      	ldr	r0, [pc, #20]	; (8005238 <Error_Handler+0x20>)
 8005224:	f005 ff7c 	bl	800b120 <siprintf>
 8005228:	4803      	ldr	r0, [pc, #12]	; (8005238 <Error_Handler+0x20>)
 800522a:	f7ff fb01 	bl	8004830 <serialOut>
  return;
 800522e:	bf00      	nop
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	0800cba4 	.word	0x0800cba4
 8005238:	2000ce88 	.word	0x2000ce88

0800523c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <LL_AHB2_GRP1_EnableClock>:
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800526c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4313      	orrs	r3, r2
 8005274:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4013      	ands	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800529e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4013      	ands	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4313      	orrs	r3, r2
 800530a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4313      	orrs	r3, r2
 800533c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4013      	ands	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800535c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005360:	f7ff ff96 	bl	8005290 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8005364:	2200      	movs	r2, #0
 8005366:	2100      	movs	r1, #0
 8005368:	202e      	movs	r0, #46	; 0x2e
 800536a:	f000 fe4e 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800536e:	202e      	movs	r0, #46	; 0x2e
 8005370:	f000 fe65 	bl	800603e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005374:	bf00      	nop
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b09c      	sub	sp, #112	; 0x70
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	2250      	movs	r2, #80	; 0x50
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f005 fe7b 	bl	800b094 <memset>
  if(huart->Instance==LPUART1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2b      	ldr	r2, [pc, #172]	; (8005450 <HAL_UART_MspInit+0xd8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d125      	bne.n	80053f4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80053a8:	2302      	movs	r3, #2
 80053aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80053ac:	2300      	movs	r3, #0
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 fcca 	bl	8007d4e <HAL_RCCEx_PeriphCLKConfig>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80053c0:	f7ff ff2a 	bl	8005218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80053c4:	2001      	movs	r0, #1
 80053c6:	f7ff ff95 	bl	80052f4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ca:	2001      	movs	r0, #1
 80053cc:	f7ff ff47 	bl	800525e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053d0:	230c      	movs	r3, #12
 80053d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d4:	2302      	movs	r3, #2
 80053d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053dc:	2300      	movs	r3, #0
 80053de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80053e0:	2308      	movs	r3, #8
 80053e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80053e8:	4619      	mov	r1, r3
 80053ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053ee:	f000 fe41 	bl	8006074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053f2:	e029      	b.n	8005448 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_UART_MspInit+0xdc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d124      	bne.n	8005448 <HAL_UART_MspInit+0xd0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80053fe:	2301      	movs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005402:	2302      	movs	r3, #2
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005406:	f107 030c 	add.w	r3, r7, #12
 800540a:	4618      	mov	r0, r3
 800540c:	f002 fc9f 	bl	8007d4e <HAL_RCCEx_PeriphCLKConfig>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8005416:	f7ff feff 	bl	8005218 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800541a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800541e:	f7ff ff82 	bl	8005326 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005422:	2002      	movs	r0, #2
 8005424:	f7ff ff1b 	bl	800525e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005428:	23c0      	movs	r3, #192	; 0xc0
 800542a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542c:	2302      	movs	r3, #2
 800542e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005430:	2300      	movs	r3, #0
 8005432:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005434:	2300      	movs	r3, #0
 8005436:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005438:	2307      	movs	r3, #7
 800543a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800543c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005440:	4619      	mov	r1, r3
 8005442:	4805      	ldr	r0, [pc, #20]	; (8005458 <HAL_UART_MspInit+0xe0>)
 8005444:	f000 fe16 	bl	8006074 <HAL_GPIO_Init>
}
 8005448:	bf00      	nop
 800544a:	3770      	adds	r7, #112	; 0x70
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40008000 	.word	0x40008000
 8005454:	40013800 	.word	0x40013800
 8005458:	48000400 	.word	0x48000400

0800545c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a05      	ldr	r2, [pc, #20]	; (8005480 <HAL_PKA_MspInit+0x24>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d103      	bne.n	8005476 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800546e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005472:	f7ff ff0d 	bl	8005290 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	58002000 	.word	0x58002000

08005484 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b096      	sub	sp, #88	; 0x58
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	2250      	movs	r2, #80	; 0x50
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f005 fdfd 	bl	800b094 <memset>
  if(hrtc->Instance==RTC)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <HAL_RTC_MspInit+0x54>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d115      	bne.n	80054d0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80054aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054b0:	f107 0308 	add.w	r3, r7, #8
 80054b4:	4618      	mov	r0, r3
 80054b6:	f002 fc4a 	bl	8007d4e <HAL_RCCEx_PeriphCLKConfig>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80054c0:	f7ff feaa 	bl	8005218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80054c4:	f7ff feba 	bl	800523c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80054c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80054cc:	f7ff fef9 	bl	80052c2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80054d0:	bf00      	nop
 80054d2:	3758      	adds	r7, #88	; 0x58
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40002800 	.word	0x40002800

080054dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e4:	f107 030c 	add.w	r3, r7, #12
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a30      	ldr	r2, [pc, #192]	; (80055bc <HAL_SPI_MspInit+0xe0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d118      	bne.n	8005530 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005502:	f7ff ff10 	bl	8005326 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005506:	2001      	movs	r0, #1
 8005508:	f7ff fea9 	bl	800525e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800550c:	23c2      	movs	r3, #194	; 0xc2
 800550e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005510:	2302      	movs	r3, #2
 8005512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005518:	2300      	movs	r3, #0
 800551a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800551c:	2305      	movs	r3, #5
 800551e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005520:	f107 030c 	add.w	r3, r7, #12
 8005524:	4619      	mov	r1, r3
 8005526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800552a:	f000 fda3 	bl	8006074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800552e:	e040      	b.n	80055b2 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <HAL_SPI_MspInit+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d13b      	bne.n	80055b2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800553a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800553e:	f7ff fec0 	bl	80052c2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005542:	2004      	movs	r0, #4
 8005544:	f7ff fe8b 	bl	800525e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005548:	2001      	movs	r0, #1
 800554a:	f7ff fe88 	bl	800525e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800554e:	2302      	movs	r3, #2
 8005550:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005552:	2302      	movs	r3, #2
 8005554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800555e:	2303      	movs	r3, #3
 8005560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005562:	f107 030c 	add.w	r3, r7, #12
 8005566:	4619      	mov	r1, r3
 8005568:	4816      	ldr	r0, [pc, #88]	; (80055c4 <HAL_SPI_MspInit+0xe8>)
 800556a:	f000 fd83 	bl	8006074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800556e:	2304      	movs	r3, #4
 8005570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005572:	2302      	movs	r3, #2
 8005574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800557e:	2305      	movs	r3, #5
 8005580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	4619      	mov	r1, r3
 8005588:	480e      	ldr	r0, [pc, #56]	; (80055c4 <HAL_SPI_MspInit+0xe8>)
 800558a:	f000 fd73 	bl	8006074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800558e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005594:	2302      	movs	r3, #2
 8005596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800559c:	2300      	movs	r3, #0
 800559e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055a0:	2305      	movs	r3, #5
 80055a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a4:	f107 030c 	add.w	r3, r7, #12
 80055a8:	4619      	mov	r1, r3
 80055aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055ae:	f000 fd61 	bl	8006074 <HAL_GPIO_Init>
}
 80055b2:	bf00      	nop
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40013000 	.word	0x40013000
 80055c0:	40003800 	.word	0x40003800
 80055c4:	48000800 	.word	0x48000800

080055c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a09      	ldr	r2, [pc, #36]	; (80055fc <HAL_TIM_Base_MspInit+0x34>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d10b      	bne.n	80055f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055de:	f7ff fea2 	bl	8005326 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80055e2:	2200      	movs	r2, #0
 80055e4:	2100      	movs	r1, #0
 80055e6:	2019      	movs	r0, #25
 80055e8:	f000 fd0f 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80055ec:	2019      	movs	r0, #25
 80055ee:	f000 fd26 	bl	800603e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00

08005600 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b09c      	sub	sp, #112	; 0x70
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005618:	f107 030c 	add.w	r3, r7, #12
 800561c:	2250      	movs	r2, #80	; 0x50
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f005 fd37 	bl	800b094 <memset>
  if(hpcd->Instance==USB)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <HAL_PCD_MspInit+0xa8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d136      	bne.n	800569e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005634:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8005636:	2306      	movs	r3, #6
 8005638:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800563a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800563e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8005640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005644:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8005646:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800564a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800564c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005650:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005652:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005656:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	4618      	mov	r0, r3
 800565e:	f002 fb76 	bl	8007d4e <HAL_RCCEx_PeriphCLKConfig>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8005668:	f7ff fdd6 	bl	8005218 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800566c:	2001      	movs	r0, #1
 800566e:	f7ff fdf6 	bl	800525e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005672:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005676:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	2302      	movs	r3, #2
 800567a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	2300      	movs	r3, #0
 8005682:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005684:	230a      	movs	r3, #10
 8005686:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005688:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800568c:	4619      	mov	r1, r3
 800568e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005692:	f000 fcef 	bl	8006074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005696:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800569a:	f7ff fe12 	bl	80052c2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800569e:	bf00      	nop
 80056a0:	3770      	adds	r7, #112	; 0x70
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40006800 	.word	0x40006800

080056ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056b0:	e7fe      	b.n	80056b0 <NMI_Handler+0x4>

080056b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056b2:	b480      	push	{r7}
 80056b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056b6:	e7fe      	b.n	80056b6 <HardFault_Handler+0x4>

080056b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056bc:	e7fe      	b.n	80056bc <MemManage_Handler+0x4>

080056be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056be:	b480      	push	{r7}
 80056c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056c2:	e7fe      	b.n	80056c2 <BusFault_Handler+0x4>

080056c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056c8:	e7fe      	b.n	80056c8 <UsageFault_Handler+0x4>

080056ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056ca:	b480      	push	{r7}
 80056cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056f8:	f000 fb80 	bl	8005dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}

08005700 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8005704:	2001      	movs	r0, #1
 8005706:	f000 fe6f 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}

0800570e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8005712:	2002      	movs	r0, #2
 8005714:	f000 fe68 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005718:	bf00      	nop
 800571a:	bd80      	pop	{r7, pc}

0800571c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8005720:	2010      	movs	r0, #16
 8005722:	f000 fe61 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}

0800572a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800572e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005732:	f000 fe59 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 8005736:	f44f 7000 	mov.w	r0, #512	; 0x200
 800573a:	f000 fe55 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800573e:	bf00      	nop
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005748:	4802      	ldr	r0, [pc, #8]	; (8005754 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800574a:	f003 fe19 	bl	8009380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	2000ca68 	.word	0x2000ca68

08005758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800575c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005760:	f000 fe42 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 8005764:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005768:	f000 fe3e 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800576c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005770:	f000 fe3a 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 8005774:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005778:	f000 fe36 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800577c:	bf00      	nop
 800577e:	bd80      	pop	{r7, pc}

08005780 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005784:	f000 fe48 	bl	8006418 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}

0800578c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return 1;
 8005790:	2301      	movs	r3, #1
}
 8005792:	4618      	mov	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <_kill>:

int _kill(int pid, int sig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80057a6:	f005 fc3d 	bl	800b024 <__errno>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2216      	movs	r2, #22
 80057ae:	601a      	str	r2, [r3, #0]
  return -1;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <_exit>:

void _exit (int status)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057c4:	f04f 31ff 	mov.w	r1, #4294967295
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ffe7 	bl	800579c <_kill>
  while (1) {}    /* Make sure we hang here */
 80057ce:	e7fe      	b.n	80057ce <_exit+0x12>

080057d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e00a      	b.n	80057f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057e2:	f3af 8000 	nop.w
 80057e6:	4601      	mov	r1, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	60ba      	str	r2, [r7, #8]
 80057ee:	b2ca      	uxtb	r2, r1
 80057f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	3301      	adds	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	dbf0      	blt.n	80057e2 <_read+0x12>
  }

  return len;
 8005800:	687b      	ldr	r3, [r7, #4]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e009      	b.n	8005830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	60ba      	str	r2, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	3301      	adds	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	dbf1      	blt.n	800581c <_write+0x12>
  }
  return len;
 8005838:	687b      	ldr	r3, [r7, #4]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <_close>:

int _close(int file)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800584a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800586a:	605a      	str	r2, [r3, #4]
  return 0;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <_isatty>:

int _isatty(int file)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005882:	2301      	movs	r3, #1
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <_sbrk+0x5c>)
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <_sbrk+0x60>)
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <_sbrk+0x64>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <_sbrk+0x64>)
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <_sbrk+0x68>)
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <_sbrk+0x64>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d207      	bcs.n	80058ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058dc:	f005 fba2 	bl	800b024 <__errno>
 80058e0:	4603      	mov	r3, r0
 80058e2:	220c      	movs	r2, #12
 80058e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	e009      	b.n	8005900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <_sbrk+0x64>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <_sbrk+0x64>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	4a05      	ldr	r2, [pc, #20]	; (8005910 <_sbrk+0x64>)
 80058fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058fe:	68fb      	ldr	r3, [r7, #12]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20030000 	.word	0x20030000
 800590c:	00000400 	.word	0x00000400
 8005910:	2000cef4 	.word	0x2000cef4
 8005914:	2000cf60 	.word	0x2000cf60

08005918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800591c:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <SystemInit+0x98>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <SystemInit+0x98>)
 8005924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800592c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005944:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005950:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <SystemInit+0x9c>)
 8005952:	4013      	ands	r3, r2
 8005954:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005962:	f023 0305 	bic.w	r3, r3, #5
 8005966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	4a0d      	ldr	r2, [pc, #52]	; (80059b8 <SystemInit+0xa0>)
 8005984:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <SystemInit+0xa0>)
 800598c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000ed00 	.word	0xe000ed00
 80059b4:	faf6fefb 	.word	0xfaf6fefb
 80059b8:	22041000 	.word	0x22041000

080059bc <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M o d u l e M e s s a g e s                            P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	b08b      	sub	sp, #44	; 0x2c
 80059c0:	af08      	add	r7, sp, #32
    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 80059c2:	4a4d      	ldr	r2, [pc, #308]	; (8005af8 <VCU_ReceiveMessages+0x13c>)
 80059c4:	2101      	movs	r1, #1
 80059c6:	2000      	movs	r0, #0
 80059c8:	f7fd fe2e 	bl	8003628 <DRV_CANFDSPI_ReceiveChannelEventGet>

    while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 80059cc:	e088      	b.n	8005ae0 <VCU_ReceiveMessages+0x124>

      // Get message
      DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4b4a      	ldr	r3, [pc, #296]	; (8005afc <VCU_ReceiveMessages+0x140>)
 80059d4:	4a4a      	ldr	r2, [pc, #296]	; (8005b00 <VCU_ReceiveMessages+0x144>)
 80059d6:	2101      	movs	r1, #1
 80059d8:	2000      	movs	r0, #0
 80059da:	f7fd fc89 	bl	80032f0 <DRV_CANFDSPI_ReceiveMessageGet>

      if(debugLevel & (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 80059de:	4b49      	ldr	r3, [pc, #292]	; (8005b04 <VCU_ReceiveMessages+0x148>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d02c      	beq.n	8005a44 <VCU_ReceiveMessages+0x88>
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <VCU_ReceiveMessages+0x144>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	469c      	mov	ip, r3
 80059f6:	4b41      	ldr	r3, [pc, #260]	; (8005afc <VCU_ReceiveMessages+0x140>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	469e      	mov	lr, r3
 80059fc:	4b3f      	ldr	r3, [pc, #252]	; (8005afc <VCU_ReceiveMessages+0x140>)
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a04:	789b      	ldrb	r3, [r3, #2]
 8005a06:	4619      	mov	r1, r3
 8005a08:	4b3c      	ldr	r3, [pc, #240]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a0a:	78db      	ldrb	r3, [r3, #3]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a10:	791b      	ldrb	r3, [r3, #4]
 8005a12:	461c      	mov	r4, r3
 8005a14:	4b39      	ldr	r3, [pc, #228]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a16:	795b      	ldrb	r3, [r3, #5]
 8005a18:	461d      	mov	r5, r3
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a1c:	799b      	ldrb	r3, [r3, #6]
 8005a1e:	461e      	mov	r6, r3
 8005a20:	4b36      	ldr	r3, [pc, #216]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a22:	79db      	ldrb	r3, [r3, #7]
 8005a24:	9306      	str	r3, [sp, #24]
 8005a26:	9605      	str	r6, [sp, #20]
 8005a28:	9504      	str	r5, [sp, #16]
 8005a2a:	9403      	str	r4, [sp, #12]
 8005a2c:	9002      	str	r0, [sp, #8]
 8005a2e:	9101      	str	r1, [sp, #4]
 8005a30:	9200      	str	r2, [sp, #0]
 8005a32:	4673      	mov	r3, lr
 8005a34:	4662      	mov	r2, ip
 8005a36:	4934      	ldr	r1, [pc, #208]	; (8005b08 <VCU_ReceiveMessages+0x14c>)
 8005a38:	4834      	ldr	r0, [pc, #208]	; (8005b0c <VCU_ReceiveMessages+0x150>)
 8005a3a:	f005 fb71 	bl	800b120 <siprintf>
 8005a3e:	4833      	ldr	r0, [pc, #204]	; (8005b0c <VCU_ReceiveMessages+0x150>)
 8005a40:	f7fe fef6 	bl	8004830 <serialOut>

      //VCU_COMMAND
      if (vcu_rxObj.bF.id.SID == (ID_VCU_COMMAND +  pack.vcuCanOffset) ){
 8005a44:	4b2e      	ldr	r3, [pc, #184]	; (8005b00 <VCU_ReceiveMessages+0x144>)
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b2f      	ldr	r3, [pc, #188]	; (8005b10 <VCU_ReceiveMessages+0x154>)
 8005a52:	895b      	ldrh	r3, [r3, #10]
 8005a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d102      	bne.n	8005a62 <VCU_ReceiveMessages+0xa6>

          VCU_ProcessVcuCommand();
 8005a5c:	f000 f85c 	bl	8005b18 <VCU_ProcessVcuCommand>
 8005a60:	e039      	b.n	8005ad6 <VCU_ReceiveMessages+0x11a>
      } else{
          // Unknown Message
          if(debugLevel & ( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 8005a62:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <VCU_ReceiveMessages+0x148>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 0305 	and.w	r3, r3, #5
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d033      	beq.n	8005ad6 <VCU_ReceiveMessages+0x11a>
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <VCU_ReceiveMessages+0x144>)
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	469c      	mov	ip, r3
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <VCU_ReceiveMessages+0x144>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8005a82:	469e      	mov	lr, r3
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a92:	789b      	ldrb	r3, [r3, #2]
 8005a94:	4618      	mov	r0, r3
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a98:	78db      	ldrb	r3, [r3, #3]
 8005a9a:	461c      	mov	r4, r3
 8005a9c:	4b17      	ldr	r3, [pc, #92]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005aa4:	795b      	ldrb	r3, [r3, #5]
 8005aa6:	461e      	mov	r6, r3
 8005aa8:	4b14      	ldr	r3, [pc, #80]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005aaa:	799b      	ldrb	r3, [r3, #6]
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <VCU_ReceiveMessages+0x140>)
 8005ab0:	79db      	ldrb	r3, [r3, #7]
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	9306      	str	r3, [sp, #24]
 8005ab8:	9605      	str	r6, [sp, #20]
 8005aba:	9504      	str	r5, [sp, #16]
 8005abc:	9403      	str	r4, [sp, #12]
 8005abe:	9002      	str	r0, [sp, #8]
 8005ac0:	9101      	str	r1, [sp, #4]
 8005ac2:	9200      	str	r2, [sp, #0]
 8005ac4:	4673      	mov	r3, lr
 8005ac6:	4662      	mov	r2, ip
 8005ac8:	4912      	ldr	r1, [pc, #72]	; (8005b14 <VCU_ReceiveMessages+0x158>)
 8005aca:	4810      	ldr	r0, [pc, #64]	; (8005b0c <VCU_ReceiveMessages+0x150>)
 8005acc:	f005 fb28 	bl	800b120 <siprintf>
 8005ad0:	480e      	ldr	r0, [pc, #56]	; (8005b0c <VCU_ReceiveMessages+0x150>)
 8005ad2:	f7fe fead 	bl	8004830 <serialOut>
      }

      // check for any more messages
      DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 8005ad6:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <VCU_ReceiveMessages+0x13c>)
 8005ad8:	2101      	movs	r1, #1
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7fd fda4 	bl	8003628 <DRV_CANFDSPI_ReceiveChannelEventGet>
    while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <VCU_ReceiveMessages+0x13c>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f af70 	bne.w	80059ce <VCU_ReceiveMessages+0x12>
    }

    //    VCU_LED_Clear(VCU_RX_LED);
    //canRxInterrupt = 0;
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af8:	2000cef8 	.word	0x2000cef8
 8005afc:	2000cf08 	.word	0x2000cf08
 8005b00:	2000cefc 	.word	0x2000cefc
 8005b04:	20000008 	.word	0x20000008
 8005b08:	0800cbb4 	.word	0x0800cbb4
 8005b0c:	2000ce88 	.word	0x2000ce88
 8005b10:	2000c754 	.word	0x2000c754
 8005b14:	0800cc0c 	.word	0x0800cc0c

08005b18 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0

  uint8_t moduleId;
  //uint8_t index;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 8005b1e:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <VCU_ProcessVcuCommand+0x130>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4a      	ldr	r2, [pc, #296]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005b24:	6313      	str	r3, [r2, #48]	; 0x30
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 8005b26:	4b4a      	ldr	r3, [pc, #296]	; (8005c50 <VCU_ProcessVcuCommand+0x138>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	4b47      	ldr	r3, [pc, #284]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005b30:	859a      	strh	r2, [r3, #44]	; 0x2c

  // copy received data to status structure
  memset(&command,0,12);
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	220c      	movs	r2, #12
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f005 faab 	bl	800b094 <memset>
  memcpy(&command, vcu_rxd, 12);
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	220c      	movs	r2, #12
 8005b42:	4944      	ldr	r1, [pc, #272]	; (8005c54 <VCU_ProcessVcuCommand+0x13c>)
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 fa97 	bl	800b078 <memcpy>

  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 8005b4a:	4b40      	ldr	r3, [pc, #256]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005b4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b50:	793a      	ldrb	r2, [r7, #4]
 8005b52:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d055      	beq.n	8005c08 <VCU_ProcessVcuCommand+0xf0>

    // change of state!
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 8005b5c:	793b      	ldrb	r3, [r7, #4]
 8005b5e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005b68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    switch (pack.vcuRequestedState) {
 8005b6c:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005b6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d836      	bhi.n	8005be4 <VCU_ProcessVcuCommand+0xcc>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <VCU_ProcessVcuCommand+0x64>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005c0d 	.word	0x08005c0d
 8005b80:	08005c0d 	.word	0x08005c0d
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005b8d 	.word	0x08005b8d
            case packOn:
              // We need to select the module with the highest voltage
              moduleId = MOD_FindMaxVoltageModule();
 8005b8c:	f7fb fce4 	bl	8001558 <MOD_FindMaxVoltageModule>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
              if (moduleId != pack.moduleCount +1){ //we have a valid ID
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005b98:	7c1b      	ldrb	r3, [r3, #16]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d037      	beq.n	8005c10 <VCU_ProcessVcuCommand+0xf8>
                // set the power stage
                pack.powerStatus.powerStage = stageFirstModule;
 8005ba0:	4b2a      	ldr	r3, [pc, #168]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	759a      	strb	r2, [r3, #22]
                // store the module Id
                pack.powerStatus.firstModuleId = moduleId;
 8005ba6:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	7553      	strb	r3, [r2, #21]
                // Enable the module
                MOD_TransmitState(moduleId, moduleOn);
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2103      	movs	r1, #3
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fb ffe5 	bl	8001b80 <MOD_TransmitState>
              }else{
                // No module was selected!
              }

              break;
 8005bb6:	e02b      	b.n	8005c10 <VCU_ProcessVcuCommand+0xf8>
            case packPrecharge:
              // Mechanical on for all modules, FET on for one module only
              // We need to select the module with the highest voltage and power it on - the rest will be issues the standby command
              moduleId = MOD_FindMaxVoltageModule();
 8005bb8:	f7fb fcce 	bl	8001558 <MOD_FindMaxVoltageModule>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
              if (moduleId != pack.moduleCount +1 ){ //we have a valid ID
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005bc4:	7c1b      	ldrb	r3, [r3, #16]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d023      	beq.n	8005c14 <VCU_ProcessVcuCommand+0xfc>
                // set the power stage
                pack.powerStatus.powerStage = stageFirstModule;
 8005bcc:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	759a      	strb	r2, [r3, #22]
                // store the module Id
                pack.powerStatus.firstModuleId = moduleId;
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	7553      	strb	r3, [r2, #21]
                // Enable the module
                MOD_TransmitState(moduleId, moduleOn);
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2103      	movs	r1, #3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fb ffcf 	bl	8001b80 <MOD_TransmitState>
              }else{
                  // No module was selected!
              }
              break;
 8005be2:	e017      	b.n	8005c14 <VCU_ProcessVcuCommand+0xfc>
            case packStandby:
              // Mechanical on, FET off for all modules (handled in app.c)
              break;
            default:
              // Unknown Message
              if(debugLevel & (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 8005be4:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <VCU_ProcessVcuCommand+0x140>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 0305 	and.w	r3, r3, #5
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <VCU_ProcessVcuCommand+0x100>
 8005bf0:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005bf2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4918      	ldr	r1, [pc, #96]	; (8005c5c <VCU_ProcessVcuCommand+0x144>)
 8005bfa:	4819      	ldr	r0, [pc, #100]	; (8005c60 <VCU_ProcessVcuCommand+0x148>)
 8005bfc:	f005 fa90 	bl	800b120 <siprintf>
 8005c00:	4817      	ldr	r0, [pc, #92]	; (8005c60 <VCU_ProcessVcuCommand+0x148>)
 8005c02:	f7fe fe15 	bl	8004830 <serialOut>
              break;
 8005c06:	e007      	b.n	8005c18 <VCU_ProcessVcuCommand+0x100>
    }

  }
 8005c08:	bf00      	nop
 8005c0a:	e006      	b.n	8005c1a <VCU_ProcessVcuCommand+0x102>
              break;
 8005c0c:	bf00      	nop
 8005c0e:	e004      	b.n	8005c1a <VCU_ProcessVcuCommand+0x102>
              break;
 8005c10:	bf00      	nop
 8005c12:	e002      	b.n	8005c1a <VCU_ProcessVcuCommand+0x102>
              break;
 8005c14:	bf00      	nop
 8005c16:	e000      	b.n	8005c1a <VCU_ProcessVcuCommand+0x102>
              break;
 8005c18:	bf00      	nop

  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x", ID_VCU_COMMAND + PACK_ID, pack.vcuRequestedState); serialOut(tempBuffer);}
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <VCU_ProcessVcuCommand+0x140>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <VCU_ProcessVcuCommand+0x126>
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <VCU_ProcessVcuCommand+0x134>)
 8005c28:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c30:	490c      	ldr	r1, [pc, #48]	; (8005c64 <VCU_ProcessVcuCommand+0x14c>)
 8005c32:	480b      	ldr	r0, [pc, #44]	; (8005c60 <VCU_ProcessVcuCommand+0x148>)
 8005c34:	f005 fa74 	bl	800b120 <siprintf>
 8005c38:	4809      	ldr	r0, [pc, #36]	; (8005c60 <VCU_ProcessVcuCommand+0x148>)
 8005c3a:	f7fe fdf9 	bl	8004830 <serialOut>

}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	2000cef0 	.word	0x2000cef0
 8005c4c:	2000c754 	.word	0x2000c754
 8005c50:	2000ca68 	.word	0x2000ca68
 8005c54:	2000cf08 	.word	0x2000cf08
 8005c58:	20000008 	.word	0x20000008
 8005c5c:	0800cc88 	.word	0x0800cc88
 8005c60:	2000ce88 	.word	0x2000ce88
 8005c64:	0800ccb0 	.word	0x0800ccb0

08005c68 <VCU_TicksSinceLastMessage>:
/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;

    if ((etTimerOverflows - pack.vcuLastContact.overflows) == 0){
 8005c6e:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <VCU_TicksSinceLastMessage+0x60>)
 8005c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c72:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <VCU_TicksSinceLastMessage+0x64>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d107      	bne.n	8005c8a <VCU_TicksSinceLastMessage+0x22>
      elapsedTicks = htim1.Instance->CNT - pack.vcuLastContact.ticks;
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <VCU_TicksSinceLastMessage+0x68>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <VCU_TicksSinceLastMessage+0x60>)
 8005c82:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e016      	b.n	8005cb8 <VCU_TicksSinceLastMessage+0x50>
    }else{
      //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (etTimerOverflows - (pack.vcuLastContact.overflows +1))) + (htim1.Instance->CNT);
 8005c8a:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <VCU_TicksSinceLastMessage+0x68>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <VCU_TicksSinceLastMessage+0x60>)
 8005c90:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005c92:	1a9a      	subs	r2, r3, r2
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <VCU_TicksSinceLastMessage+0x68>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	490c      	ldr	r1, [pc, #48]	; (8005ccc <VCU_TicksSinceLastMessage+0x64>)
 8005c9c:	6808      	ldr	r0, [r1, #0]
 8005c9e:	490a      	ldr	r1, [pc, #40]	; (8005cc8 <VCU_TicksSinceLastMessage+0x60>)
 8005ca0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8005ca2:	1a41      	subs	r1, r0, r1
 8005ca4:	3901      	subs	r1, #1
 8005ca6:	fb01 f303 	mul.w	r3, r1, r3
 8005caa:	441a      	add	r2, r3
 8005cac:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <VCU_TicksSinceLastMessage+0x68>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	607b      	str	r3, [r7, #4]
    }
    return elapsedTicks;
 8005cb8:	687b      	ldr	r3, [r7, #4]


}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	2000c754 	.word	0x2000c754
 8005ccc:	2000cef0 	.word	0x2000cef0
 8005cd0:	2000ca68 	.word	0x2000ca68

08005cd4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005cd4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cd8:	3304      	adds	r3, #4

08005cda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cdc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005cde:	d3f9      	bcc.n	8005cd4 <CopyDataInit>
  bx lr
 8005ce0:	4770      	bx	lr

08005ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005ce2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005ce4:	3004      	adds	r0, #4

08005ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005ce6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005ce8:	d3fb      	bcc.n	8005ce2 <FillZerobss>
  bx lr
 8005cea:	4770      	bx	lr

08005cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cec:	480c      	ldr	r0, [pc, #48]	; (8005d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005cf0:	f7ff fe12 	bl	8005918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005cf4:	480b      	ldr	r0, [pc, #44]	; (8005d24 <LoopForever+0x6>)
 8005cf6:	490c      	ldr	r1, [pc, #48]	; (8005d28 <LoopForever+0xa>)
 8005cf8:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <LoopForever+0xe>)
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f7ff ffed 	bl	8005cda <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005d00:	480b      	ldr	r0, [pc, #44]	; (8005d30 <LoopForever+0x12>)
 8005d02:	490c      	ldr	r1, [pc, #48]	; (8005d34 <LoopForever+0x16>)
 8005d04:	4a0c      	ldr	r2, [pc, #48]	; (8005d38 <LoopForever+0x1a>)
 8005d06:	2300      	movs	r3, #0
 8005d08:	f7ff ffe7 	bl	8005cda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005d0c:	480b      	ldr	r0, [pc, #44]	; (8005d3c <LoopForever+0x1e>)
 8005d0e:	490c      	ldr	r1, [pc, #48]	; (8005d40 <LoopForever+0x22>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	f7ff ffe8 	bl	8005ce6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005d16:	f005 f98b 	bl	800b030 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005d1a:	f7fe feb9 	bl	8004a90 <main>

08005d1e <LoopForever>:

LoopForever:
  b LoopForever
 8005d1e:	e7fe      	b.n	8005d1e <LoopForever>
  ldr   r0, =_estack
 8005d20:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005d24:	20000008 	.word	0x20000008
 8005d28:	2000007c 	.word	0x2000007c
 8005d2c:	0800cf3c 	.word	0x0800cf3c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005d30:	20030000 	.word	0x20030000
 8005d34:	20030000 	.word	0x20030000
 8005d38:	0800cfb0 	.word	0x0800cfb0
  INIT_BSS _sbss, _ebss
 8005d3c:	2000007c 	.word	0x2000007c
 8005d40:	2000cf5c 	.word	0x2000cf5c

08005d44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d44:	e7fe      	b.n	8005d44 <ADC1_IRQHandler>
	...

08005d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <HAL_Init+0x3c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a0b      	ldr	r2, [pc, #44]	; (8005d84 <HAL_Init+0x3c>)
 8005d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d5e:	2003      	movs	r0, #3
 8005d60:	f000 f948 	bl	8005ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d64:	200f      	movs	r0, #15
 8005d66:	f000 f80f 	bl	8005d88 <HAL_InitTick>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	71fb      	strb	r3, [r7, #7]
 8005d74:	e001      	b.n	8005d7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d76:	f7ff faef 	bl	8005358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	58004000 	.word	0x58004000

08005d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <HAL_InitTick+0x6c>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d024      	beq.n	8005de6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005d9c:	f001 fd46 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <HAL_InitTick+0x6c>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dac:	fbb3 f3f1 	udiv	r3, r3, r1
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f950 	bl	800605a <HAL_SYSTICK_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d809      	bhi.n	8005dda <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	f04f 30ff 	mov.w	r0, #4294967295
 8005dce:	f000 f91c 	bl	800600a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dd2:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <HAL_InitTick+0x70>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e007      	b.n	8005dea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	e004      	b.n	8005dea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	e001      	b.n	8005dea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000014 	.word	0x20000014
 8005df8:	20000010 	.word	0x20000010

08005dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_IncTick+0x20>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_IncTick+0x24>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4a04      	ldr	r2, [pc, #16]	; (8005e20 <HAL_IncTick+0x24>)
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000014 	.word	0x20000014
 8005e20:	2000cf48 	.word	0x2000cf48

08005e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return uwTick;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <HAL_GetTick+0x14>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	2000cf48 	.word	0x2000cf48

08005e3c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <HAL_GetTickPrio+0x14>)
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000010 	.word	0x20000010

08005e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <__NVIC_SetPriorityGrouping+0x44>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e70:	4013      	ands	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e86:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <__NVIC_SetPriorityGrouping+0x44>)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	60d3      	str	r3, [r2, #12]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	e000ed00 	.word	0xe000ed00

08005e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	f003 0307 	and.w	r3, r3, #7
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db0b      	blt.n	8005ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	f003 021f 	and.w	r2, r3, #31
 8005ed0:	4907      	ldr	r1, [pc, #28]	; (8005ef0 <__NVIC_EnableIRQ+0x38>)
 8005ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2001      	movs	r0, #1
 8005eda:	fa00 f202 	lsl.w	r2, r0, r2
 8005ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	e000e100 	.word	0xe000e100

08005ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	db0a      	blt.n	8005f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	490c      	ldr	r1, [pc, #48]	; (8005f40 <__NVIC_SetPriority+0x4c>)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	0112      	lsls	r2, r2, #4
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	440b      	add	r3, r1
 8005f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f1c:	e00a      	b.n	8005f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4908      	ldr	r1, [pc, #32]	; (8005f44 <__NVIC_SetPriority+0x50>)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	3b04      	subs	r3, #4
 8005f2c:	0112      	lsls	r2, r2, #4
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	440b      	add	r3, r1
 8005f32:	761a      	strb	r2, [r3, #24]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	e000e100 	.word	0xe000e100
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f1c3 0307 	rsb	r3, r3, #7
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	bf28      	it	cs
 8005f66:	2304      	movcs	r3, #4
 8005f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d902      	bls.n	8005f78 <NVIC_EncodePriority+0x30>
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3b03      	subs	r3, #3
 8005f76:	e000      	b.n	8005f7a <NVIC_EncodePriority+0x32>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	43da      	mvns	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f90:	f04f 31ff 	mov.w	r1, #4294967295
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	43d9      	mvns	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa0:	4313      	orrs	r3, r2
         );
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3724      	adds	r7, #36	; 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fc0:	d301      	bcc.n	8005fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e00f      	b.n	8005fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <SysTick_Config+0x40>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fce:	210f      	movs	r1, #15
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	f7ff ff8e 	bl	8005ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <SysTick_Config+0x40>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <SysTick_Config+0x40>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000e010 	.word	0xe000e010

08005ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff29 	bl	8005e54 <__NVIC_SetPriorityGrouping>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	4603      	mov	r3, r0
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006018:	f7ff ff40 	bl	8005e9c <__NVIC_GetPriorityGrouping>
 800601c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	6978      	ldr	r0, [r7, #20]
 8006024:	f7ff ff90 	bl	8005f48 <NVIC_EncodePriority>
 8006028:	4602      	mov	r2, r0
 800602a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff ff5f 	bl	8005ef4 <__NVIC_SetPriority>
}
 8006036:	bf00      	nop
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	4603      	mov	r3, r0
 8006046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ff33 	bl	8005eb8 <__NVIC_EnableIRQ>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ffa4 	bl	8005fb0 <SysTick_Config>
 8006068:	4603      	mov	r3, r0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006082:	e14c      	b.n	800631e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2101      	movs	r1, #1
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 813e 	beq.w	8006318 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d005      	beq.n	80060b4 <HAL_GPIO_Init+0x40>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d130      	bne.n	8006116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	2203      	movs	r2, #3
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4013      	ands	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ea:	2201      	movs	r2, #1
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	f003 0201 	and.w	r2, r3, #1
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d017      	beq.n	8006152 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	2203      	movs	r2, #3
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43db      	mvns	r3, r3
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4013      	ands	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d123      	bne.n	80061a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	08da      	lsrs	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3208      	adds	r2, #8
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	220f      	movs	r2, #15
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	08da      	lsrs	r2, r3, #3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3208      	adds	r2, #8
 80061a0:	6939      	ldr	r1, [r7, #16]
 80061a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	2203      	movs	r2, #3
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4013      	ands	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f003 0203 	and.w	r2, r3, #3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8098 	beq.w	8006318 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80061e8:	4a54      	ldr	r2, [pc, #336]	; (800633c <HAL_GPIO_Init+0x2c8>)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	089b      	lsrs	r3, r3, #2
 80061ee:	3302      	adds	r3, #2
 80061f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	220f      	movs	r2, #15
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4013      	ands	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006212:	d019      	beq.n	8006248 <HAL_GPIO_Init+0x1d4>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a4a      	ldr	r2, [pc, #296]	; (8006340 <HAL_GPIO_Init+0x2cc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_GPIO_Init+0x1d0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a49      	ldr	r2, [pc, #292]	; (8006344 <HAL_GPIO_Init+0x2d0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00d      	beq.n	8006240 <HAL_GPIO_Init+0x1cc>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a48      	ldr	r2, [pc, #288]	; (8006348 <HAL_GPIO_Init+0x2d4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <HAL_GPIO_Init+0x1c8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a47      	ldr	r2, [pc, #284]	; (800634c <HAL_GPIO_Init+0x2d8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_GPIO_Init+0x1c4>
 8006234:	2304      	movs	r3, #4
 8006236:	e008      	b.n	800624a <HAL_GPIO_Init+0x1d6>
 8006238:	2307      	movs	r3, #7
 800623a:	e006      	b.n	800624a <HAL_GPIO_Init+0x1d6>
 800623c:	2303      	movs	r3, #3
 800623e:	e004      	b.n	800624a <HAL_GPIO_Init+0x1d6>
 8006240:	2302      	movs	r3, #2
 8006242:	e002      	b.n	800624a <HAL_GPIO_Init+0x1d6>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_GPIO_Init+0x1d6>
 8006248:	2300      	movs	r3, #0
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	4093      	lsls	r3, r2
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800625a:	4938      	ldr	r1, [pc, #224]	; (800633c <HAL_GPIO_Init+0x2c8>)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006268:	4b39      	ldr	r3, [pc, #228]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	43db      	mvns	r3, r3
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4013      	ands	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800628c:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006292:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062b6:	4a26      	ldr	r2, [pc, #152]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 80062be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80062ea:	4b19      	ldr	r3, [pc, #100]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 80062ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4013      	ands	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006310:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <HAL_GPIO_Init+0x2dc>)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3301      	adds	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f aeab 	bne.w	8006084 <HAL_GPIO_Init+0x10>
  }
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40010000 	.word	0x40010000
 8006340:	48000400 	.word	0x48000400
 8006344:	48000800 	.word	0x48000800
 8006348:	48000c00 	.word	0x48000c00
 800634c:	48001000 	.word	0x48001000
 8006350:	58000800 	.word	0x58000800

08006354 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	887b      	ldrh	r3, [r7, #2]
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	e001      	b.n	8006376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	807b      	strh	r3, [r7, #2]
 8006390:	4613      	mov	r3, r2
 8006392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006394:	787b      	ldrb	r3, [r7, #1]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800639a:	887a      	ldrh	r2, [r7, #2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063a0:	e002      	b.n	80063a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063c6:	887a      	ldrh	r2, [r7, #2]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4013      	ands	r3, r2
 80063cc:	041a      	lsls	r2, r3, #16
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	43d9      	mvns	r1, r3
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	400b      	ands	r3, r1
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	619a      	str	r2, [r3, #24]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063f2:	4b08      	ldr	r3, [pc, #32]	; (8006414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d006      	beq.n	800640c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063fe:	4a05      	ldr	r2, [pc, #20]	; (8006414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fabe 	bl	8004988 <HAL_GPIO_EXTI_Callback>
  }
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	58000800 	.word	0x58000800

08006418 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800641e:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <HAL_HSEM_IRQHandler+0x30>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <HAL_HSEM_IRQHandler+0x30>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	43db      	mvns	r3, r3
 800642c:	4906      	ldr	r1, [pc, #24]	; (8006448 <HAL_HSEM_IRQHandler+0x30>)
 800642e:	4013      	ands	r3, r2
 8006430:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006432:	4a05      	ldr	r2, [pc, #20]	; (8006448 <HAL_HSEM_IRQHandler+0x30>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f807 	bl	800644c <HAL_HSEM_FreeCallback>
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58001500 	.word	0x58001500

0800644c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	b08b      	sub	sp, #44	; 0x2c
 8006464:	af06      	add	r7, sp, #24
 8006466:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e0cb      	b.n	800660a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff f8ba 	bl	8005600 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2203      	movs	r2, #3
 8006490:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f004 fd87 	bl	800afac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	e040      	b.n	8006526 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	440b      	add	r3, r1
 80064b4:	3301      	adds	r3, #1
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	440b      	add	r3, r1
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	440b      	add	r3, r1
 80064de:	3303      	adds	r3, #3
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80064e4:	7bfa      	ldrb	r2, [r7, #15]
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3338      	adds	r3, #56	; 0x38
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80064f8:	7bfa      	ldrb	r2, [r7, #15]
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	440b      	add	r3, r1
 8006506:	333c      	adds	r3, #60	; 0x3c
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800650c:	7bfa      	ldrb	r2, [r7, #15]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	440b      	add	r3, r1
 800651a:	3340      	adds	r3, #64	; 0x40
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	3301      	adds	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	7bfa      	ldrb	r2, [r7, #15]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d3b9      	bcc.n	80064a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
 8006534:	e044      	b.n	80065c0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006536:	7bfa      	ldrb	r2, [r7, #15]
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	440b      	add	r3, r1
 8006544:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	440b      	add	r3, r1
 800655a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	440b      	add	r3, r1
 8006570:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006578:	7bfa      	ldrb	r2, [r7, #15]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	440b      	add	r3, r1
 800659c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065a4:	7bfa      	ldrb	r2, [r7, #15]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	440b      	add	r3, r1
 80065b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	3301      	adds	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	7bfa      	ldrb	r2, [r7, #15]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3b5      	bcc.n	8006536 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	687e      	ldr	r6, [r7, #4]
 80065d2:	466d      	mov	r5, sp
 80065d4:	f106 0410 	add.w	r4, r6, #16
 80065d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	1d33      	adds	r3, r6, #4
 80065e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065e4:	6838      	ldr	r0, [r7, #0]
 80065e6:	f004 fcfc 	bl	800afe2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d102      	bne.n	8006608 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f805 	bl	8006612 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006612 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006636:	b29b      	uxth	r3, r3
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800664a:	b29b      	uxth	r3, r3
 800664c:	f043 0302 	orr.w	r3, r3, #2
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01d      	beq.n	80066b4 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	791b      	ldrb	r3, [r3, #4]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fe feea 	bl	800545c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2201      	movs	r2, #1
 8006694:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 80066a4:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	711a      	strb	r2, [r3, #4]
 80066b2:	e001      	b.n	80066b8 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a04      	ldr	r2, [pc, #16]	; (80066e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d2:	6013      	str	r3, [r2, #0]
}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	58000400 	.word	0x58000400

080066e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <HAL_PWREx_GetVoltageRange+0x18>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	58000400 	.word	0x58000400

08006700 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006712:	d101      	bne.n	8006718 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <LL_RCC_HSE_Enable>:
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006736:	6013      	str	r3, [r2, #0]
}
 8006738:	bf00      	nop
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <LL_RCC_HSE_Disable>:
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
}
 8006756:	bf00      	nop
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <LL_RCC_HSE_IsReady>:
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006772:	d101      	bne.n	8006778 <LL_RCC_HSE_IsReady+0x18>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <LL_RCC_HSE_IsReady+0x1a>
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <LL_RCC_HSI_Enable>:
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006796:	6013      	str	r3, [r2, #0]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <LL_RCC_HSI_Disable>:
{
 80067a2:	b480      	push	{r7}
 80067a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80067a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_RCC_HSI_IsReady>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80067c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d2:	d101      	bne.n	80067d8 <LL_RCC_HSI_IsReady+0x18>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <LL_RCC_HSI_IsReady+0x1a>
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80067ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	061b      	lsls	r3, r3, #24
 80067fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067fe:	4313      	orrs	r3, r2
 8006800:	604b      	str	r3, [r1, #4]
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <LL_RCC_HSI48_Enable>:
{
 800680e:	b480      	push	{r7}
 8006810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800681a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006826:	bf00      	nop
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <LL_RCC_HSI48_Disable>:
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800683c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006848:	bf00      	nop
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <LL_RCC_HSI48_IsReady>:
{
 8006852:	b480      	push	{r7}
 8006854:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b02      	cmp	r3, #2
 8006864:	d101      	bne.n	800686a <LL_RCC_HSI48_IsReady+0x18>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <LL_RCC_HSI48_IsReady+0x1a>
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <LL_RCC_LSE_Enable>:
{
 8006876:	b480      	push	{r7}
 8006878:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800687a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800688e:	bf00      	nop
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_RCC_LSE_Disable>:
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800689c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068b0:	bf00      	nop
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <LL_RCC_LSE_EnableBypass>:
{
 80068ba:	b480      	push	{r7}
 80068bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80068be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ca:	f043 0304 	orr.w	r3, r3, #4
 80068ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <LL_RCC_LSE_DisableBypass>:
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80068e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <LL_RCC_LSE_IsReady>:
{
 80068fe:	b480      	push	{r7}
 8006900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b02      	cmp	r3, #2
 8006910:	d101      	bne.n	8006916 <LL_RCC_LSE_IsReady+0x18>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <LL_RCC_LSE_IsReady+0x1a>
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <LL_RCC_LSI1_Enable>:
{
 8006922:	b480      	push	{r7}
 8006924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800693a:	bf00      	nop
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <LL_RCC_LSI1_Disable>:
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <LL_RCC_LSI1_IsReady>:
{
 8006966:	b480      	push	{r7}
 8006968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800696a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d101      	bne.n	800697e <LL_RCC_LSI1_IsReady+0x18>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <LL_RCC_LSI1_IsReady+0x1a>
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <LL_RCC_LSI2_Enable>:
{
 800698a:	b480      	push	{r7}
 800698c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800698e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800699a:	f043 0304 	orr.w	r3, r3, #4
 800699e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <LL_RCC_LSI2_Disable>:
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069bc:	f023 0304 	bic.w	r3, r3, #4
 80069c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <LL_RCC_LSI2_IsReady>:
{
 80069ce:	b480      	push	{r7}
 80069d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80069d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d101      	bne.n	80069e6 <LL_RCC_LSI2_IsReady+0x18>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <LL_RCC_LSI2_IsReady+0x1a>
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <LL_RCC_LSI2_SetTrimming>:
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_RCC_MSI_Enable>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6013      	str	r3, [r2, #0]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <LL_RCC_MSI_Disable>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	6013      	str	r3, [r2, #0]
}
 8006a52:	bf00      	nop
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <LL_RCC_MSI_IsReady>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d101      	bne.n	8006a72 <LL_RCC_MSI_IsReady+0x16>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <LL_RCC_MSI_IsReady+0x18>
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <LL_RCC_MSI_SetRange>:
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <LL_RCC_MSI_GetRange>:
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ab6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2bb0      	cmp	r3, #176	; 0xb0
 8006abc:	d901      	bls.n	8006ac2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006abe:	23b0      	movs	r3, #176	; 0xb0
 8006ac0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006ac2:	687b      	ldr	r3, [r7, #4]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aea:	4313      	orrs	r3, r2
 8006aec:	604b      	str	r3, [r1, #4]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_RCC_SetSysClkSource>:
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f023 0203 	bic.w	r2, r3, #3
 8006b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	608b      	str	r3, [r1, #8]
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_RCC_GetSysClkSource>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_SetAHBPrescaler>:
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	608b      	str	r3, [r1, #8]
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_RCC_SetAHB4Prescaler>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b9e:	f023 020f 	bic.w	r2, r3, #15
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	091b      	lsrs	r3, r3, #4
 8006ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <LL_RCC_SetAPB1Prescaler>:
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	608b      	str	r3, [r1, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_RCC_SetAPB2Prescaler>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	608b      	str	r3, [r1, #8]
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <LL_RCC_GetAHBPrescaler>:
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <LL_RCC_GetAHB4Prescaler>:
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_GetAPB1Prescaler>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <LL_RCC_GetAPB2Prescaler>:
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c82:	6013      	str	r3, [r2, #0]
}
 8006c84:	bf00      	nop
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cbe:	d101      	bne.n	8006cc4 <LL_RCC_PLL_IsReady+0x18>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <LL_RCC_PLL_IsReady+0x1a>
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006cea:	b480      	push	{r7}
 8006cec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d02:	b480      	push	{r7}
 8006d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0303 	and.w	r3, r3, #3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d44:	d101      	bne.n	8006d4a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006d56:	b480      	push	{r7}
 8006d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6a:	d101      	bne.n	8006d70 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d90:	d101      	bne.n	8006d96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006da2:	b480      	push	{r7}
 8006da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db4:	d101      	bne.n	8006dba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd8:	d101      	bne.n	8006dde <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
	...

08006dec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b08d      	sub	sp, #52	; 0x34
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e363      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 808d 	beq.w	8006f26 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e0c:	f7ff fe89 	bl	8006b22 <LL_RCC_GetSysClkSource>
 8006e10:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e12:	f7ff ff82 	bl	8006d1a <LL_RCC_PLL_GetMainSource>
 8006e16:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_RCC_OscConfig+0x3e>
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	2b0c      	cmp	r3, #12
 8006e22:	d147      	bne.n	8006eb4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d144      	bne.n	8006eb4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e347      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006e3a:	f7ff fe34 	bl	8006aa6 <LL_RCC_MSI_GetRange>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d914      	bls.n	8006e6e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fd2f 	bl	80078ac <RCC_SetFlashLatencyFromMSIRange>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e336      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fe0e 	bl	8006a7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff fe32 	bl	8006ad0 <LL_RCC_MSI_SetCalibTrimming>
 8006e6c:	e013      	b.n	8006e96 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fe03 	bl	8006a7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fe27 	bl	8006ad0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fd10 	bl	80078ac <RCC_SetFlashLatencyFromMSIRange>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e317      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006e96:	f000 fcc9 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4aa4      	ldr	r2, [pc, #656]	; (8007130 <HAL_RCC_OscConfig+0x344>)
 8006e9e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ea0:	4ba4      	ldr	r3, [pc, #656]	; (8007134 <HAL_RCC_OscConfig+0x348>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe ff6f 	bl	8005d88 <HAL_InitTick>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d039      	beq.n	8006f24 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e308      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01e      	beq.n	8006efa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ebc:	f7ff fdb0 	bl	8006a20 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ec0:	f7fe ffb0 	bl	8005e24 <HAL_GetTick>
 8006ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ec8:	f7fe ffac 	bl	8005e24 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e2f5      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006eda:	f7ff fdbf 	bl	8006a5c <LL_RCC_MSI_IsReady>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f1      	beq.n	8006ec8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff fdc8 	bl	8006a7e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fdec 	bl	8006ad0 <LL_RCC_MSI_SetCalibTrimming>
 8006ef8:	e015      	b.n	8006f26 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006efa:	f7ff fda0 	bl	8006a3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006efe:	f7fe ff91 	bl	8005e24 <HAL_GetTick>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f06:	f7fe ff8d 	bl	8005e24 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e2d6      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f18:	f7ff fda0 	bl	8006a5c <LL_RCC_MSI_IsReady>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f1      	bne.n	8006f06 <HAL_RCC_OscConfig+0x11a>
 8006f22:	e000      	b.n	8006f26 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f24:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d047      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f32:	f7ff fdf6 	bl	8006b22 <LL_RCC_GetSysClkSource>
 8006f36:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f38:	f7ff feef 	bl	8006d1a <LL_RCC_PLL_GetMainSource>
 8006f3c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d005      	beq.n	8006f50 <HAL_RCC_OscConfig+0x164>
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b0c      	cmp	r3, #12
 8006f48:	d108      	bne.n	8006f5c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d134      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e2b4      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d102      	bne.n	8006f6c <HAL_RCC_OscConfig+0x180>
 8006f66:	f7ff fbdd 	bl	8006724 <LL_RCC_HSE_Enable>
 8006f6a:	e001      	b.n	8006f70 <HAL_RCC_OscConfig+0x184>
 8006f6c:	f7ff fbe9 	bl	8006742 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d012      	beq.n	8006f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fe ff54 	bl	8005e24 <HAL_GetTick>
 8006f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f80:	f7fe ff50 	bl	8005e24 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b64      	cmp	r3, #100	; 0x64
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e299      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006f92:	f7ff fbe5 	bl	8006760 <LL_RCC_HSE_IsReady>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f1      	beq.n	8006f80 <HAL_RCC_OscConfig+0x194>
 8006f9c:	e011      	b.n	8006fc2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9e:	f7fe ff41 	bl	8005e24 <HAL_GetTick>
 8006fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa6:	f7fe ff3d 	bl	8005e24 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b64      	cmp	r3, #100	; 0x64
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e286      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006fb8:	f7ff fbd2 	bl	8006760 <LL_RCC_HSE_IsReady>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f1      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d04c      	beq.n	8007068 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fce:	f7ff fda8 	bl	8006b22 <LL_RCC_GetSysClkSource>
 8006fd2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fd4:	f7ff fea1 	bl	8006d1a <LL_RCC_PLL_GetMainSource>
 8006fd8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d005      	beq.n	8006fec <HAL_RCC_OscConfig+0x200>
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b0c      	cmp	r3, #12
 8006fe4:	d10e      	bne.n	8007004 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d10b      	bne.n	8007004 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e266      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fbf1 	bl	80067e4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007002:	e031      	b.n	8007068 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d019      	beq.n	8007040 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	f7ff fbba 	bl	8006784 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fe ff08 	bl	8005e24 <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007018:	f7fe ff04 	bl	8005e24 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e24d      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800702a:	f7ff fbc9 	bl	80067c0 <LL_RCC_HSI_IsReady>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0f1      	beq.n	8007018 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fbd3 	bl	80067e4 <LL_RCC_HSI_SetCalibTrimming>
 800703e:	e013      	b.n	8007068 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007040:	f7ff fbaf 	bl	80067a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fe feee 	bl	8005e24 <HAL_GetTick>
 8007048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704c:	f7fe feea 	bl	8005e24 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e233      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800705e:	f7ff fbaf 	bl	80067c0 <LL_RCC_HSI_IsReady>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f1      	bne.n	800704c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80a3 	beq.w	80071c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d076      	beq.n	8007178 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b00      	cmp	r3, #0
 8007094:	d046      	beq.n	8007124 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007096:	f7ff fc66 	bl	8006966 <LL_RCC_LSI1_IsReady>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d113      	bne.n	80070c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80070a0:	f7ff fc3f 	bl	8006922 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070a4:	f7fe febe 	bl	8005e24 <HAL_GetTick>
 80070a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80070ac:	f7fe feba 	bl	8005e24 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e203      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80070be:	f7ff fc52 	bl	8006966 <LL_RCC_LSI1_IsReady>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f1      	beq.n	80070ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80070c8:	f7ff fc5f 	bl	800698a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070cc:	f7fe feaa 	bl	8005e24 <HAL_GetTick>
 80070d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80070d4:	f7fe fea6 	bl	8005e24 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e1ef      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80070e6:	f7ff fc72 	bl	80069ce <LL_RCC_LSI2_IsReady>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f1      	beq.n	80070d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fc7c 	bl	80069f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80070fa:	f7ff fc23 	bl	8006944 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fe:	f7fe fe91 	bl	8005e24 <HAL_GetTick>
 8007102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007106:	f7fe fe8d 	bl	8005e24 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e1d6      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007118:	f7ff fc25 	bl	8006966 <LL_RCC_LSI1_IsReady>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f1      	bne.n	8007106 <HAL_RCC_OscConfig+0x31a>
 8007122:	e051      	b.n	80071c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007124:	f7ff fbfd 	bl	8006922 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007128:	f7fe fe7c 	bl	8005e24 <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800712e:	e00c      	b.n	800714a <HAL_RCC_OscConfig+0x35e>
 8007130:	2000000c 	.word	0x2000000c
 8007134:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007138:	f7fe fe74 	bl	8005e24 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e1bd      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800714a:	f7ff fc0c 	bl	8006966 <LL_RCC_LSI1_IsReady>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f1      	beq.n	8007138 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007154:	f7ff fc2a 	bl	80069ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800715a:	f7fe fe63 	bl	8005e24 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b03      	cmp	r3, #3
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e1ac      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800716c:	f7ff fc2f 	bl	80069ce <LL_RCC_LSI2_IsReady>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f1      	bne.n	800715a <HAL_RCC_OscConfig+0x36e>
 8007176:	e027      	b.n	80071c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007178:	f7ff fc18 	bl	80069ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717c:	f7fe fe52 	bl	8005e24 <HAL_GetTick>
 8007180:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007184:	f7fe fe4e 	bl	8005e24 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e197      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007196:	f7ff fc1a 	bl	80069ce <LL_RCC_LSI2_IsReady>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f1      	bne.n	8007184 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80071a0:	f7ff fbd0 	bl	8006944 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a4:	f7fe fe3e 	bl	8005e24 <HAL_GetTick>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80071ac:	f7fe fe3a 	bl	8005e24 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e183      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80071be:	f7ff fbd2 	bl	8006966 <LL_RCC_LSI1_IsReady>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f1      	bne.n	80071ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d05b      	beq.n	800728c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d4:	4ba7      	ldr	r3, [pc, #668]	; (8007474 <HAL_RCC_OscConfig+0x688>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d114      	bne.n	800720a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80071e0:	f7ff fa70 	bl	80066c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071e4:	f7fe fe1e 	bl	8005e24 <HAL_GetTick>
 80071e8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ec:	f7fe fe1a 	bl	8005e24 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e163      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071fe:	4b9d      	ldr	r3, [pc, #628]	; (8007474 <HAL_RCC_OscConfig+0x688>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d102      	bne.n	8007218 <HAL_RCC_OscConfig+0x42c>
 8007212:	f7ff fb30 	bl	8006876 <LL_RCC_LSE_Enable>
 8007216:	e00c      	b.n	8007232 <HAL_RCC_OscConfig+0x446>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b05      	cmp	r3, #5
 800721e:	d104      	bne.n	800722a <HAL_RCC_OscConfig+0x43e>
 8007220:	f7ff fb4b 	bl	80068ba <LL_RCC_LSE_EnableBypass>
 8007224:	f7ff fb27 	bl	8006876 <LL_RCC_LSE_Enable>
 8007228:	e003      	b.n	8007232 <HAL_RCC_OscConfig+0x446>
 800722a:	f7ff fb35 	bl	8006898 <LL_RCC_LSE_Disable>
 800722e:	f7ff fb55 	bl	80068dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d014      	beq.n	8007264 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723a:	f7fe fdf3 	bl	8005e24 <HAL_GetTick>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007240:	e00a      	b.n	8007258 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f7fe fdef 	bl	8005e24 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e136      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007258:	f7ff fb51 	bl	80068fe <LL_RCC_LSE_IsReady>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0ef      	beq.n	8007242 <HAL_RCC_OscConfig+0x456>
 8007262:	e013      	b.n	800728c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fe fdde 	bl	8005e24 <HAL_GetTick>
 8007268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800726a:	e00a      	b.n	8007282 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726c:	f7fe fdda 	bl	8005e24 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	f241 3288 	movw	r2, #5000	; 0x1388
 800727a:	4293      	cmp	r3, r2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e121      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007282:	f7ff fb3c 	bl	80068fe <LL_RCC_LSE_IsReady>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1ef      	bne.n	800726c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02c      	beq.n	80072f2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	2b00      	cmp	r3, #0
 800729e:	d014      	beq.n	80072ca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072a0:	f7ff fab5 	bl	800680e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fe fdbe 	bl	8005e24 <HAL_GetTick>
 80072a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072ac:	f7fe fdba 	bl	8005e24 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e103      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80072be:	f7ff fac8 	bl	8006852 <LL_RCC_HSI48_IsReady>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f1      	beq.n	80072ac <HAL_RCC_OscConfig+0x4c0>
 80072c8:	e013      	b.n	80072f2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072ca:	f7ff fab1 	bl	8006830 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ce:	f7fe fda9 	bl	8005e24 <HAL_GetTick>
 80072d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072d6:	f7fe fda5 	bl	8005e24 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e0ee      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80072e8:	f7ff fab3 	bl	8006852 <LL_RCC_HSI48_IsReady>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f1      	bne.n	80072d6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80e4 	beq.w	80074c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072fc:	f7ff fc11 	bl	8006b22 <LL_RCC_GetSysClkSource>
 8007300:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	2b02      	cmp	r3, #2
 8007310:	f040 80b4 	bne.w	800747c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0203 	and.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	429a      	cmp	r2, r3
 8007320:	d123      	bne.n	800736a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732c:	429a      	cmp	r2, r3
 800732e:	d11c      	bne.n	800736a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d114      	bne.n	800736a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800734a:	429a      	cmp	r2, r3
 800734c:	d10d      	bne.n	800736a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007358:	429a      	cmp	r2, r3
 800735a:	d106      	bne.n	800736a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007366:	429a      	cmp	r2, r3
 8007368:	d05d      	beq.n	8007426 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b0c      	cmp	r3, #12
 800736e:	d058      	beq.n	8007422 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e0a1      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007382:	f7ff fc84 	bl	8006c8e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007386:	f7fe fd4d 	bl	8005e24 <HAL_GetTick>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800738e:	f7fe fd49 	bl	8005e24 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e092      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1ef      	bne.n	800738e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	4b30      	ldr	r3, [pc, #192]	; (8007478 <HAL_RCC_OscConfig+0x68c>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073c0:	4311      	orrs	r1, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073c6:	0212      	lsls	r2, r2, #8
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073ce:	4311      	orrs	r1, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073d4:	4311      	orrs	r1, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80073da:	430a      	orrs	r2, r1
 80073dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073e4:	f7ff fc44 	bl	8006c70 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073f8:	f7fe fd14 	bl	8005e24 <HAL_GetTick>
 80073fc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007400:	f7fe fd10 	bl	8005e24 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e059      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ef      	beq.n	8007400 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007420:	e050      	b.n	80074c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e04f      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d147      	bne.n	80074c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007434:	f7ff fc1c 	bl	8006c70 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007446:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007448:	f7fe fcec 	bl	8005e24 <HAL_GetTick>
 800744c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007450:	f7fe fce8 	bl	8005e24 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e031      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0ef      	beq.n	8007450 <HAL_RCC_OscConfig+0x664>
 8007470:	e028      	b.n	80074c4 <HAL_RCC_OscConfig+0x6d8>
 8007472:	bf00      	nop
 8007474:	58000400 	.word	0x58000400
 8007478:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b0c      	cmp	r3, #12
 8007480:	d01e      	beq.n	80074c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007482:	f7ff fc04 	bl	8006c8e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fe fccd 	bl	8005e24 <HAL_GetTick>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748e:	f7fe fcc9 	bl	8005e24 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e012      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1ef      	bne.n	800748e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80074ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <HAL_RCC_OscConfig+0x6e4>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	60cb      	str	r3, [r1, #12]
 80074be:	e001      	b.n	80074c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3734      	adds	r7, #52	; 0x34
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd90      	pop	{r4, r7, pc}
 80074ce:	bf00      	nop
 80074d0:	eefefffc 	.word	0xeefefffc

080074d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e12d      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b98      	ldr	r3, [pc, #608]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d91b      	bls.n	800752e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b95      	ldr	r3, [pc, #596]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 0207 	bic.w	r2, r3, #7
 80074fe:	4993      	ldr	r1, [pc, #588]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007506:	f7fe fc8d 	bl	8005e24 <HAL_GetTick>
 800750a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750c:	e008      	b.n	8007520 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800750e:	f7fe fc89 	bl	8005e24 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e111      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007520:	4b8a      	ldr	r3, [pc, #552]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d1ef      	bne.n	800750e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d016      	beq.n	8007568 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff fafb 	bl	8006b3a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007544:	f7fe fc6e 	bl	8005e24 <HAL_GetTick>
 8007548:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800754c:	f7fe fc6a 	bl	8005e24 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e0f2      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800755e:	f7ff fbe8 	bl	8006d32 <LL_RCC_IsActiveFlag_HPRE>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f1      	beq.n	800754c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d016      	beq.n	80075a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff faf2 	bl	8006b62 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800757e:	f7fe fc51 	bl	8005e24 <HAL_GetTick>
 8007582:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007584:	e008      	b.n	8007598 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007586:	f7fe fc4d 	bl	8005e24 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e0d5      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007598:	f7ff fbdd 	bl	8006d56 <LL_RCC_IsActiveFlag_C2HPRE>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f1      	beq.n	8007586 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d016      	beq.n	80075dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff faeb 	bl	8006b8e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075b8:	f7fe fc34 	bl	8005e24 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075c0:	f7fe fc30 	bl	8005e24 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e0b8      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80075d2:	f7ff fbd3 	bl	8006d7c <LL_RCC_IsActiveFlag_SHDHPRE>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0f1      	beq.n	80075c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d016      	beq.n	8007616 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fae5 	bl	8006bbc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075f2:	f7fe fc17 	bl	8005e24 <HAL_GetTick>
 80075f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80075f8:	e008      	b.n	800760c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075fa:	f7fe fc13 	bl	8005e24 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e09b      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800760c:	f7ff fbc9 	bl	8006da2 <LL_RCC_IsActiveFlag_PPRE1>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f1      	beq.n	80075fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d017      	beq.n	8007652 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fadb 	bl	8006be4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800762e:	f7fe fbf9 	bl	8005e24 <HAL_GetTick>
 8007632:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007634:	e008      	b.n	8007648 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007636:	f7fe fbf5 	bl	8005e24 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e07d      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007648:	f7ff fbbd 	bl	8006dc6 <LL_RCC_IsActiveFlag_PPRE2>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f1      	beq.n	8007636 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d043      	beq.n	80076e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b02      	cmp	r3, #2
 8007664:	d106      	bne.n	8007674 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007666:	f7ff f87b 	bl	8006760 <LL_RCC_HSE_IsReady>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11e      	bne.n	80076ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e067      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b03      	cmp	r3, #3
 800767a:	d106      	bne.n	800768a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800767c:	f7ff fb16 	bl	8006cac <LL_RCC_PLL_IsReady>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d113      	bne.n	80076ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e05c      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007692:	f7ff f9e3 	bl	8006a5c <LL_RCC_MSI_IsReady>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d108      	bne.n	80076ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e051      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80076a0:	f7ff f88e 	bl	80067c0 <LL_RCC_HSI_IsReady>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e04a      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fa21 	bl	8006afa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fe fbb4 	bl	8005e24 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	e00a      	b.n	80076d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c0:	f7fe fbb0 	bl	8005e24 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e036      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d6:	f7ff fa24 	bl	8006b22 <LL_RCC_GetSysClkSource>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d1ec      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076e6:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d21b      	bcs.n	800772c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 0207 	bic.w	r2, r3, #7
 80076fc:	4913      	ldr	r1, [pc, #76]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	4313      	orrs	r3, r2
 8007702:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fe fb8e 	bl	8005e24 <HAL_GetTick>
 8007708:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800770a:	e008      	b.n	800771e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800770c:	f7fe fb8a 	bl	8005e24 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e012      	b.n	8007744 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800771e:	4b0b      	ldr	r3, [pc, #44]	; (800774c <HAL_RCC_ClockConfig+0x278>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d1ef      	bne.n	800770c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800772c:	f000 f87e 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8007730:	4603      	mov	r3, r0
 8007732:	4a07      	ldr	r2, [pc, #28]	; (8007750 <HAL_RCC_ClockConfig+0x27c>)
 8007734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007736:	f7fe fb81 	bl	8005e3c <HAL_GetTickPrio>
 800773a:	4603      	mov	r3, r0
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fb23 	bl	8005d88 <HAL_InitTick>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	58004000 	.word	0x58004000
 8007750:	2000000c 	.word	0x2000000c

08007754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800775a:	f7ff f9e2 	bl	8006b22 <LL_RCC_GetSysClkSource>
 800775e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007766:	f7ff f99e 	bl	8006aa6 <LL_RCC_MSI_GetRange>
 800776a:	4603      	mov	r3, r0
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	4a2b      	ldr	r2, [pc, #172]	; (8007820 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e04b      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d102      	bne.n	8007788 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007782:	4b28      	ldr	r3, [pc, #160]	; (8007824 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	e045      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b08      	cmp	r3, #8
 800778c:	d10a      	bne.n	80077a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800778e:	f7fe ffb7 	bl	8006700 <LL_RCC_HSE_IsEnabledDiv2>
 8007792:	4603      	mov	r3, r0
 8007794:	2b01      	cmp	r3, #1
 8007796:	d102      	bne.n	800779e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007798:	4b22      	ldr	r3, [pc, #136]	; (8007824 <HAL_RCC_GetSysClockFreq+0xd0>)
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e03a      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800779e:	4b22      	ldr	r3, [pc, #136]	; (8007828 <HAL_RCC_GetSysClockFreq+0xd4>)
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e037      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80077a4:	f7ff fab9 	bl	8006d1a <LL_RCC_PLL_GetMainSource>
 80077a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d003      	beq.n	80077b8 <HAL_RCC_GetSysClockFreq+0x64>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d003      	beq.n	80077be <HAL_RCC_GetSysClockFreq+0x6a>
 80077b6:	e00d      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80077ba:	60bb      	str	r3, [r7, #8]
        break;
 80077bc:	e015      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80077be:	f7fe ff9f 	bl	8006700 <LL_RCC_HSE_IsEnabledDiv2>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d102      	bne.n	80077ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80077c8:	4b16      	ldr	r3, [pc, #88]	; (8007824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80077ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80077cc:	e00d      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80077ce:	4b16      	ldr	r3, [pc, #88]	; (8007828 <HAL_RCC_GetSysClockFreq+0xd4>)
 80077d0:	60bb      	str	r3, [r7, #8]
        break;
 80077d2:	e00a      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80077d4:	f7ff f967 	bl	8006aa6 <LL_RCC_MSI_GetRange>
 80077d8:	4603      	mov	r3, r0
 80077da:	091b      	lsrs	r3, r3, #4
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	4a0f      	ldr	r2, [pc, #60]	; (8007820 <HAL_RCC_GetSysClockFreq+0xcc>)
 80077e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e6:	60bb      	str	r3, [r7, #8]
        break;
 80077e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80077ea:	f7ff fa71 	bl	8006cd0 <LL_RCC_PLL_GetN>
 80077ee:	4602      	mov	r2, r0
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	fb03 f402 	mul.w	r4, r3, r2
 80077f6:	f7ff fa84 	bl	8006d02 <LL_RCC_PLL_GetDivider>
 80077fa:	4603      	mov	r3, r0
 80077fc:	091b      	lsrs	r3, r3, #4
 80077fe:	3301      	adds	r3, #1
 8007800:	fbb4 f4f3 	udiv	r4, r4, r3
 8007804:	f7ff fa71 	bl	8006cea <LL_RCC_PLL_GetR>
 8007808:	4603      	mov	r3, r0
 800780a:	0f5b      	lsrs	r3, r3, #29
 800780c:	3301      	adds	r3, #1
 800780e:	fbb4 f3f3 	udiv	r3, r4, r3
 8007812:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007814:	68fb      	ldr	r3, [r7, #12]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}
 800781e:	bf00      	nop
 8007820:	0800cd7c 	.word	0x0800cd7c
 8007824:	00f42400 	.word	0x00f42400
 8007828:	01e84800 	.word	0x01e84800

0800782c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800782c:	b598      	push	{r3, r4, r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007830:	f7ff ff90 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8007834:	4604      	mov	r4, r0
 8007836:	f7ff f9e9 	bl	8006c0c <LL_RCC_GetAHBPrescaler>
 800783a:	4603      	mov	r3, r0
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	4a03      	ldr	r2, [pc, #12]	; (8007850 <HAL_RCC_GetHCLKFreq+0x24>)
 8007844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007848:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800784c:	4618      	mov	r0, r3
 800784e:	bd98      	pop	{r3, r4, r7, pc}
 8007850:	0800cd1c 	.word	0x0800cd1c

08007854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007854:	b598      	push	{r3, r4, r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007858:	f7ff ffe8 	bl	800782c <HAL_RCC_GetHCLKFreq>
 800785c:	4604      	mov	r4, r0
 800785e:	f7ff f9ef 	bl	8006c40 <LL_RCC_GetAPB1Prescaler>
 8007862:	4603      	mov	r3, r0
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	4a04      	ldr	r2, [pc, #16]	; (800787c <HAL_RCC_GetPCLK1Freq+0x28>)
 800786c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007878:	4618      	mov	r0, r3
 800787a:	bd98      	pop	{r3, r4, r7, pc}
 800787c:	0800cd5c 	.word	0x0800cd5c

08007880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007880:	b598      	push	{r3, r4, r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007884:	f7ff ffd2 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8007888:	4604      	mov	r4, r0
 800788a:	f7ff f9e5 	bl	8006c58 <LL_RCC_GetAPB2Prescaler>
 800788e:	4603      	mov	r3, r0
 8007890:	0adb      	lsrs	r3, r3, #11
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	4a04      	ldr	r2, [pc, #16]	; (80078a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd98      	pop	{r3, r4, r7, pc}
 80078a8:	0800cd5c 	.word	0x0800cd5c

080078ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2bb0      	cmp	r3, #176	; 0xb0
 80078b8:	d903      	bls.n	80078c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80078ba:	4b15      	ldr	r3, [pc, #84]	; (8007910 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e007      	b.n	80078d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	4a11      	ldr	r2, [pc, #68]	; (8007910 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80078cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80078d2:	f7ff f9a7 	bl	8006c24 <LL_RCC_GetAHB4Prescaler>
 80078d6:	4603      	mov	r3, r0
 80078d8:	091b      	lsrs	r3, r3, #4
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80078e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80078f0:	fba2 2303 	umull	r2, r3, r2, r3
 80078f4:	0c9c      	lsrs	r4, r3, #18
 80078f6:	f7fe fef5 	bl	80066e4 <HAL_PWREx_GetVoltageRange>
 80078fa:	4603      	mov	r3, r0
 80078fc:	4619      	mov	r1, r3
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 f80c 	bl	800791c <RCC_SetFlashLatency>
 8007904:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	bd90      	pop	{r4, r7, pc}
 800790e:	bf00      	nop
 8007910:	0800cd7c 	.word	0x0800cd7c
 8007914:	0800cd1c 	.word	0x0800cd1c
 8007918:	431bde83 	.word	0x431bde83

0800791c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b093      	sub	sp, #76	; 0x4c
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007926:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <RCC_SetFlashLatency+0xe8>)
 8007928:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800792c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800792e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007932:	4a35      	ldr	r2, [pc, #212]	; (8007a08 <RCC_SetFlashLatency+0xec>)
 8007934:	f107 031c 	add.w	r3, r7, #28
 8007938:	ca07      	ldmia	r2, {r0, r1, r2}
 800793a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800793e:	4b33      	ldr	r3, [pc, #204]	; (8007a0c <RCC_SetFlashLatency+0xf0>)
 8007940:	f107 040c 	add.w	r4, r7, #12
 8007944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800794a:	2300      	movs	r3, #0
 800794c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007954:	d11a      	bne.n	800798c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007956:	2300      	movs	r3, #0
 8007958:	643b      	str	r3, [r7, #64]	; 0x40
 800795a:	e013      	b.n	8007984 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800795c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3348      	adds	r3, #72	; 0x48
 8007962:	443b      	add	r3, r7
 8007964:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	429a      	cmp	r2, r3
 800796c:	d807      	bhi.n	800797e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800796e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	3348      	adds	r3, #72	; 0x48
 8007974:	443b      	add	r3, r7
 8007976:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800797a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800797c:	e020      	b.n	80079c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007980:	3301      	adds	r3, #1
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	2b03      	cmp	r3, #3
 8007988:	d9e8      	bls.n	800795c <RCC_SetFlashLatency+0x40>
 800798a:	e019      	b.n	80079c0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007990:	e013      	b.n	80079ba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	3348      	adds	r3, #72	; 0x48
 8007998:	443b      	add	r3, r7
 800799a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d807      	bhi.n	80079b4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	3348      	adds	r3, #72	; 0x48
 80079aa:	443b      	add	r3, r7
 80079ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80079b2:	e005      	b.n	80079c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	3301      	adds	r3, #1
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d9e8      	bls.n	8007992 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80079c0:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <RCC_SetFlashLatency+0xf4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f023 0207 	bic.w	r2, r3, #7
 80079c8:	4911      	ldr	r1, [pc, #68]	; (8007a10 <RCC_SetFlashLatency+0xf4>)
 80079ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079cc:	4313      	orrs	r3, r2
 80079ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079d0:	f7fe fa28 	bl	8005e24 <HAL_GetTick>
 80079d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80079d6:	e008      	b.n	80079ea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079d8:	f7fe fa24 	bl	8005e24 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e007      	b.n	80079fa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <RCC_SetFlashLatency+0xf4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d1ef      	bne.n	80079d8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	374c      	adds	r7, #76	; 0x4c
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd90      	pop	{r4, r7, pc}
 8007a02:	bf00      	nop
 8007a04:	0800ccf0 	.word	0x0800ccf0
 8007a08:	0800cd00 	.word	0x0800cd00
 8007a0c:	0800cd0c 	.word	0x0800cd0c
 8007a10:	58004000 	.word	0x58004000

08007a14 <LL_RCC_LSE_IsEnabled>:
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <LL_RCC_LSE_IsEnabled+0x18>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <LL_RCC_LSE_IsEnabled+0x1a>
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <LL_RCC_LSE_IsReady>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d101      	bne.n	8007a50 <LL_RCC_LSE_IsReady+0x18>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <LL_RCC_LSE_IsReady+0x1a>
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <LL_RCC_SetRFWKPClockSource>:
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <LL_RCC_SetSMPSClockSource>:
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	f023 0203 	bic.w	r2, r3, #3
 8007a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <LL_RCC_SetSMPSPrescaler>:
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <LL_RCC_SetUSARTClockSource>:
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae8:	f023 0203 	bic.w	r2, r3, #3
 8007aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <LL_RCC_SetLPUARTClockSource>:
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <LL_RCC_SetI2CClockSource>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	091b      	lsrs	r3, r3, #4
 8007b44:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <LL_RCC_SetLPTIMClockSource>:
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	041b      	lsls	r3, r3, #16
 8007b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <LL_RCC_SetSAIClockSource>:
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <LL_RCC_SetRNGClockSource>:
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <LL_RCC_SetCLK48ClockSource>:
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <LL_RCC_SetUSBClockSource>:
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff ffe3 	bl	8007bf6 <LL_RCC_SetCLK48ClockSource>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <LL_RCC_SetADCClockSource>:
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <LL_RCC_SetRTCClockSource>:
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <LL_RCC_GetRTCClockSource>:
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <LL_RCC_ForceBackupDomainReset>:
{
 8007caa:	b480      	push	{r7}
 8007cac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007cc2:	bf00      	nop
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_RCC_ReleaseBackupDomainReset>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <LL_RCC_PLLSAI1_Enable>:
{
 8007cee:	b480      	push	{r7}
 8007cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d00:	6013      	str	r3, [r2, #0]
}
 8007d02:	bf00      	nop
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <LL_RCC_PLLSAI1_Disable>:
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d1e:	6013      	str	r3, [r2, #0]
}
 8007d20:	bf00      	nop
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <LL_RCC_PLLSAI1_IsReady>:
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d3c:	d101      	bne.n	8007d42 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b088      	sub	sp, #32
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007d56:	2300      	movs	r3, #0
 8007d58:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d034      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d72:	d021      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007d74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d78:	d81b      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d7e:	d01d      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d84:	d815      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d8e:	d110      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d9e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007da0:	e00d      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f947 	bl	800803a <RCCEx_PLLSAI1_ConfigNP>
 8007dac:	4603      	mov	r3, r0
 8007dae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007db0:	e005      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	77fb      	strb	r3, [r7, #31]
        break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbe:	7ffb      	ldrb	r3, [r7, #31]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fee8 	bl	8007b9e <LL_RCC_SetSAIClockSource>
 8007dce:	e001      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d046      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007de0:	f7ff ff56 	bl	8007c90 <LL_RCC_GetRTCClockSource>
 8007de4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d03c      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007df0:	f7fe fc68 	bl	80066c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff ff30 	bl	8007c64 <LL_RCC_SetRTCClockSource>
 8007e04:	e02e      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007e10:	f7ff ff4b 	bl	8007caa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007e14:	f7ff ff5a 	bl	8007ccc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007e30:	f7ff fdf0 	bl	8007a14 <LL_RCC_LSE_IsEnabled>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d114      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e3a:	f7fd fff3 	bl	8005e24 <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007e40:	e00b      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e42:	f7fd ffef 	bl	8005e24 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d902      	bls.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	77fb      	strb	r3, [r7, #31]
              break;
 8007e58:	e004      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007e5a:	f7ff fded 	bl	8007a38 <LL_RCC_LSE_IsReady>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d1ee      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007e64:	7ffb      	ldrb	r3, [r7, #31]
 8007e66:	77bb      	strb	r3, [r7, #30]
 8007e68:	e001      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff fe2a 	bl	8007ad8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fe35 	bl	8007b04 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff fe5d 	bl	8007b6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d004      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff fe52 	bl	8007b6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d004      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fe2a 	bl	8007b30 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fe1f 	bl	8007b30 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d022      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fe8d 	bl	8007c22 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f10:	d107      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f20:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f2a:	d10b      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f8dd 	bl	80080f0 <RCCEx_PLLSAI1_ConfigNQ>
 8007f36:	4603      	mov	r3, r0
 8007f38:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007f40:	7ffb      	ldrb	r3, [r7, #31]
 8007f42:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d02b      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d008      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f62:	d003      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fe2a 	bl	8007bca <LL_RCC_SetRNGClockSource>
 8007f76:	e00a      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	2000      	movs	r0, #0
 8007f84:	f7ff fe21 	bl	8007bca <LL_RCC_SetRNGClockSource>
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff fe34 	bl	8007bf6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d022      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff fe3d 	bl	8007c38 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc6:	d107      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe0:	d10b      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f8dd 	bl	80081a6 <RCCEx_PLLSAI1_ConfigNR>
 8007fec:	4603      	mov	r3, r0
 8007fee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007ff0:	7ffb      	ldrb	r3, [r7, #31]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007ff6:	7ffb      	ldrb	r3, [r7, #31]
 8007ff8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff fd26 	bl	8007a5c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fd45 	bl	8007ab0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fd2c 	bl	8007a88 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008030:	7fbb      	ldrb	r3, [r7, #30]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008046:	f7ff fe61 	bl	8007d0c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800804a:	f7fd feeb 	bl	8005e24 <HAL_GetTick>
 800804e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008050:	e009      	b.n	8008066 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008052:	f7fd fee7 	bl	8005e24 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d902      	bls.n	8008066 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	73fb      	strb	r3, [r7, #15]
      break;
 8008064:	e004      	b.n	8008070 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008066:	f7ff fe60 	bl	8007d2a <LL_RCC_PLLSAI1_IsReady>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f0      	bne.n	8008052 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d137      	bne.n	80080e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800808a:	4313      	orrs	r3, r2
 800808c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800808e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080a0:	4313      	orrs	r3, r2
 80080a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80080a4:	f7ff fe23 	bl	8007cee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a8:	f7fd febc 	bl	8005e24 <HAL_GetTick>
 80080ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80080ae:	e009      	b.n	80080c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080b0:	f7fd feb8 	bl	8005e24 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d902      	bls.n	80080c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	73fb      	strb	r3, [r7, #15]
        break;
 80080c2:	e004      	b.n	80080ce <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80080c4:	f7ff fe31 	bl	8007d2a <LL_RCC_PLLSAI1_IsReady>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d1f0      	bne.n	80080b0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d108      	bne.n	80080e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80080d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080e2:	4313      	orrs	r3, r2
 80080e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80080fc:	f7ff fe06 	bl	8007d0c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008100:	f7fd fe90 	bl	8005e24 <HAL_GetTick>
 8008104:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008106:	e009      	b.n	800811c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008108:	f7fd fe8c 	bl	8005e24 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d902      	bls.n	800811c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	73fb      	strb	r3, [r7, #15]
      break;
 800811a:	e004      	b.n	8008126 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800811c:	f7ff fe05 	bl	8007d2a <LL_RCC_PLLSAI1_IsReady>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1f0      	bne.n	8008108 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d137      	bne.n	800819c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800812c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008140:	4313      	orrs	r3, r2
 8008142:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008156:	4313      	orrs	r3, r2
 8008158:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800815a:	f7ff fdc8 	bl	8007cee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800815e:	f7fd fe61 	bl	8005e24 <HAL_GetTick>
 8008162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008164:	e009      	b.n	800817a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008166:	f7fd fe5d 	bl	8005e24 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d902      	bls.n	800817a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	73fb      	strb	r3, [r7, #15]
        break;
 8008178:	e004      	b.n	8008184 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800817a:	f7ff fdd6 	bl	8007d2a <LL_RCC_PLLSAI1_IsReady>
 800817e:	4603      	mov	r3, r0
 8008180:	2b01      	cmp	r3, #1
 8008182:	d1f0      	bne.n	8008166 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d108      	bne.n	800819c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800818a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008198:	4313      	orrs	r3, r2
 800819a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80081b2:	f7ff fdab 	bl	8007d0c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081b6:	f7fd fe35 	bl	8005e24 <HAL_GetTick>
 80081ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081bc:	e009      	b.n	80081d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081be:	f7fd fe31 	bl	8005e24 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d902      	bls.n	80081d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	73fb      	strb	r3, [r7, #15]
      break;
 80081d0:	e004      	b.n	80081dc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081d2:	f7ff fdaa 	bl	8007d2a <LL_RCC_PLLSAI1_IsReady>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1f0      	bne.n	80081be <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d137      	bne.n	8008252 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80081e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081f6:	4313      	orrs	r3, r2
 80081f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80081fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800820c:	4313      	orrs	r3, r2
 800820e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008210:	f7ff fd6d 	bl	8007cee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008214:	f7fd fe06 	bl	8005e24 <HAL_GetTick>
 8008218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800821a:	e009      	b.n	8008230 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800821c:	f7fd fe02 	bl	8005e24 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d902      	bls.n	8008230 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
        break;
 800822e:	e004      	b.n	800823a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008230:	f7ff fd7b 	bl	8007d2a <LL_RCC_PLLSAI1_IsReady>
 8008234:	4603      	mov	r3, r0
 8008236:	2b01      	cmp	r3, #1
 8008238:	d1f0      	bne.n	800821c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d108      	bne.n	8008252 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800824e:	4313      	orrs	r3, r2
 8008250:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e09f      	b.n	80083ae <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fd f8fe 	bl	8005484 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008290:	4b49      	ldr	r3, [pc, #292]	; (80083b8 <HAL_RTC_Init+0x15c>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b10      	cmp	r3, #16
 800829a:	d07e      	beq.n	800839a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	22ca      	movs	r2, #202	; 0xca
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2253      	movs	r2, #83	; 0x53
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fac6 	bl	800883e <RTC_EnterInitMode>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	22ff      	movs	r2, #255	; 0xff
 80082be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2204      	movs	r2, #4
 80082c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
 80082cc:	e067      	b.n	800839e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6899      	ldr	r1, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68d2      	ldr	r2, [r2, #12]
 8008308:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6919      	ldr	r1, [r3, #16]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	041a      	lsls	r2, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800832c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0203 	bic.w	r2, r2, #3
 800833c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69da      	ldr	r2, [r3, #28]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d113      	bne.n	800838c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa44 	bl	80087f2 <HAL_RTC_WaitForSynchro>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00d      	beq.n	800838c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e010      	b.n	80083ae <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	22ff      	movs	r2, #255	; 0xff
 8008392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
 8008398:	e001      	b.n	800839e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40002800 	.word	0x40002800

080083bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_RTC_SetTime+0x1a>
 80083d2:	2302      	movs	r3, #2
 80083d4:	e0b2      	b.n	800853c <HAL_RTC_SetTime+0x180>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2202      	movs	r2, #2
 80083e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d126      	bne.n	800843a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fa44 	bl	8008892 <RTC_ByteToBcd2>
 800840a:	4603      	mov	r3, r0
 800840c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fa3d 	bl	8008892 <RTC_ByteToBcd2>
 8008418:	4603      	mov	r3, r0
 800841a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800841c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	789b      	ldrb	r3, [r3, #2]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fa35 	bl	8008892 <RTC_ByteToBcd2>
 8008428:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800842a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	78db      	ldrb	r3, [r3, #3]
 8008432:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e018      	b.n	800846c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d102      	bne.n	800844e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	785b      	ldrb	r3, [r3, #1]
 8008458:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800845a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008460:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	22ca      	movs	r2, #202	; 0xca
 8008472:	625a      	str	r2, [r3, #36]	; 0x24
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2253      	movs	r2, #83	; 0x53
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f9de 	bl	800883e <RTC_EnterInitMode>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	22ff      	movs	r2, #255	; 0xff
 800848e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2204      	movs	r2, #4
 8008494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04b      	b.n	800853c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80084ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084b2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084c2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6899      	ldr	r1, [r3, #8]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d113      	bne.n	8008522 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f979 	bl	80087f2 <HAL_RTC_WaitForSynchro>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	22ff      	movs	r2, #255	; 0xff
 800850c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2204      	movs	r2, #4
 8008512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e00c      	b.n	800853c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	22ff      	movs	r2, #255	; 0xff
 8008528:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800853a:	2300      	movs	r3, #0
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd90      	pop	{r4, r7, pc}

08008544 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008572:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008576:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008582:	b2da      	uxtb	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	b2db      	uxtb	r3, r3
 800858e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008592:	b2da      	uxtb	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	0c1b      	lsrs	r3, r3, #16
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d11a      	bne.n	80085f2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f986 	bl	80088d2 <RTC_Bcd2ToByte>
 80085c6:	4603      	mov	r3, r0
 80085c8:	461a      	mov	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f97d 	bl	80088d2 <RTC_Bcd2ToByte>
 80085d8:	4603      	mov	r3, r0
 80085da:	461a      	mov	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	789b      	ldrb	r3, [r3, #2]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f974 	bl	80088d2 <RTC_Bcd2ToByte>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_RTC_SetDate+0x1a>
 8008612:	2302      	movs	r3, #2
 8008614:	e09c      	b.n	8008750 <HAL_RTC_SetDate+0x154>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2202      	movs	r2, #2
 8008622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10e      	bne.n	800864a <HAL_RTC_SetDate+0x4e>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	2b00      	cmp	r3, #0
 8008636:	d008      	beq.n	800864a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	f023 0310 	bic.w	r3, r3, #16
 8008640:	b2db      	uxtb	r3, r3
 8008642:	330a      	adds	r3, #10
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d11c      	bne.n	800868a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	78db      	ldrb	r3, [r3, #3]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f91c 	bl	8008892 <RTC_ByteToBcd2>
 800865a:	4603      	mov	r3, r0
 800865c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f915 	bl	8008892 <RTC_ByteToBcd2>
 8008668:	4603      	mov	r3, r0
 800866a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800866c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	789b      	ldrb	r3, [r3, #2]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f90d 	bl	8008892 <RTC_ByteToBcd2>
 8008678:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800867a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e00e      	b.n	80086a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	78db      	ldrb	r3, [r3, #3]
 800868e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008696:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800869c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	22ca      	movs	r2, #202	; 0xca
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2253      	movs	r2, #83	; 0x53
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f8c0 	bl	800883e <RTC_EnterInitMode>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00d      	beq.n	80086e0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2204      	movs	r2, #4
 80086d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e037      	b.n	8008750 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d113      	bne.n	8008736 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 f86f 	bl	80087f2 <HAL_RTC_WaitForSynchro>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	22ff      	movs	r2, #255	; 0xff
 8008720:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2204      	movs	r2, #4
 8008726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e00c      	b.n	8008750 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	22ff      	movs	r2, #255	; 0xff
 800873c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800874e:	2300      	movs	r3, #0
  }
}
 8008750:	4618      	mov	r0, r3
 8008752:	371c      	adds	r7, #28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd90      	pop	{r4, r7, pc}

08008758 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800876e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008772:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	b2da      	uxtb	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	0a1b      	lsrs	r3, r3, #8
 8008782:	b2db      	uxtb	r3, r3
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	0b5b      	lsrs	r3, r3, #13
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d11a      	bne.n	80087e8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	78db      	ldrb	r3, [r3, #3]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f88b 	bl	80088d2 <RTC_Bcd2ToByte>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f882 	bl	80088d2 <RTC_Bcd2ToByte>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	789b      	ldrb	r3, [r3, #2]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f879 	bl	80088d2 <RTC_Bcd2ToByte>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008808:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800880a:	f7fd fb0b 	bl	8005e24 <HAL_GetTick>
 800880e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008810:	e009      	b.n	8008826 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008812:	f7fd fb07 	bl	8005e24 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008820:	d901      	bls.n	8008826 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e007      	b.n	8008836 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0ee      	beq.n	8008812 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d119      	bne.n	8008888 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f04f 32ff 	mov.w	r2, #4294967295
 800885c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800885e:	f7fd fae1 	bl	8005e24 <HAL_GetTick>
 8008862:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008864:	e009      	b.n	800887a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008866:	f7fd fadd 	bl	8005e24 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008874:	d901      	bls.n	800887a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e007      	b.n	800888a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0ee      	beq.n	8008866 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008892:	b480      	push	{r7}
 8008894:	b085      	sub	sp, #20
 8008896:	af00      	add	r7, sp, #0
 8008898:	4603      	mov	r3, r0
 800889a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 80088a4:	e005      	b.n	80088b2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	3b0a      	subs	r3, #10
 80088b0:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d8f6      	bhi.n	80088a6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b2db      	uxtb	r3, r3
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	4603      	mov	r3, r0
 80088da:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	091b      	lsrs	r3, r3, #4
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	461a      	mov	r2, r3
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	4413      	add	r3, r2
 80088fc:	b2db      	uxtb	r3, r3
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e095      	b.n	8008a48 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d108      	bne.n	8008936 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800892c:	d009      	beq.n	8008942 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	61da      	str	r2, [r3, #28]
 8008934:	e005      	b.n	8008942 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7fc fdbd 	bl	80054dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008978:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008982:	d902      	bls.n	800898a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]
 8008988:	e002      	b.n	8008990 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800898a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800898e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008998:	d007      	beq.n	80089aa <HAL_SPI_Init+0xa0>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089a2:	d002      	beq.n	80089aa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089ba:	431a      	orrs	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ec:	ea42 0103 	orr.w	r1, r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	0c1b      	lsrs	r3, r3, #16
 8008a06:	f003 0204 	and.w	r2, r3, #4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	f003 0310 	and.w	r3, r3, #16
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a26:	ea42 0103 	orr.w	r1, r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x26>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e1fb      	b.n	8008e6e <HAL_SPI_TransmitReceive+0x41e>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a7e:	f7fd f9d1 	bl	8005e24 <HAL_GetTick>
 8008a82:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008a92:	887b      	ldrh	r3, [r7, #2]
 8008a94:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008a96:	887b      	ldrh	r3, [r7, #2]
 8008a98:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a9a:	7efb      	ldrb	r3, [r7, #27]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d00e      	beq.n	8008abe <HAL_SPI_TransmitReceive+0x6e>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aa6:	d106      	bne.n	8008ab6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <HAL_SPI_TransmitReceive+0x66>
 8008ab0:	7efb      	ldrb	r3, [r7, #27]
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d003      	beq.n	8008abe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008abc:	e1cd      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_SPI_TransmitReceive+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_SPI_TransmitReceive+0x80>
 8008aca:	887b      	ldrh	r3, [r7, #2]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008ad6:	e1c0      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d003      	beq.n	8008aec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2205      	movs	r2, #5
 8008ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	887a      	ldrh	r2, [r7, #2]
 8008afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	887a      	ldrh	r2, [r7, #2]
 8008b04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	887a      	ldrh	r2, [r7, #2]
 8008b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	887a      	ldrh	r2, [r7, #2]
 8008b18:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b2e:	d802      	bhi.n	8008b36 <HAL_SPI_TransmitReceive+0xe6>
 8008b30:	8a3b      	ldrh	r3, [r7, #16]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d908      	bls.n	8008b48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	e007      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b40      	cmp	r3, #64	; 0x40
 8008b64:	d007      	beq.n	8008b76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b7e:	d97c      	bls.n	8008c7a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x13e>
 8008b88:	8a7b      	ldrh	r3, [r7, #18]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d169      	bne.n	8008c62 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	881a      	ldrh	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	1c9a      	adds	r2, r3, #2
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb2:	e056      	b.n	8008c62 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d11b      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x1aa>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <HAL_SPI_TransmitReceive+0x1aa>
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d113      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	881a      	ldrh	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	1c9a      	adds	r2, r3, #2
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d11c      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x1f2>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d016      	beq.n	8008c42 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	b292      	uxth	r2, r2
 8008c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	1c9a      	adds	r2, r3, #2
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	3b01      	subs	r3, #1
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c42:	f7fd f8ef 	bl	8005e24 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d807      	bhi.n	8008c62 <HAL_SPI_TransmitReceive+0x212>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d003      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008c60:	e0fb      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1a3      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x164>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d19d      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x164>
 8008c78:	e0df      	b.n	8008e3a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_SPI_TransmitReceive+0x23a>
 8008c82:	8a7b      	ldrh	r3, [r7, #18]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f040 80cb 	bne.w	8008e20 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d912      	bls.n	8008cba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	881a      	ldrh	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	1c9a      	adds	r2, r3, #2
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b02      	subs	r3, #2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cb8:	e0b2      	b.n	8008e20 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	330c      	adds	r3, #12
 8008cc4:	7812      	ldrb	r2, [r2, #0]
 8008cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ce0:	e09e      	b.n	8008e20 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d134      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x30a>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d02f      	beq.n	8008d5a <HAL_SPI_TransmitReceive+0x30a>
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d12c      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d912      	bls.n	8008d30 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	881a      	ldrh	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	1c9a      	adds	r2, r3, #2
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b02      	subs	r3, #2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d2e:	e012      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d148      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x3aa>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d042      	beq.n	8008dfa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d923      	bls.n	8008dc8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	1c9a      	adds	r2, r3, #2
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b02      	subs	r3, #2
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d81f      	bhi.n	8008df6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	e016      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f103 020c 	add.w	r2, r3, #12
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd4:	7812      	ldrb	r2, [r2, #0]
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008df6:	2301      	movs	r3, #1
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dfa:	f7fd f813 	bl	8005e24 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d803      	bhi.n	8008e12 <HAL_SPI_TransmitReceive+0x3c2>
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e10:	d102      	bne.n	8008e18 <HAL_SPI_TransmitReceive+0x3c8>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008e1e:	e01c      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f47f af5b 	bne.w	8008ce2 <HAL_SPI_TransmitReceive+0x292>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f47f af54 	bne.w	8008ce2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f938 	bl	80090b4 <SPI_EndRxTxTransaction>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	661a      	str	r2, [r3, #96]	; 0x60
 8008e56:	e000      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3728      	adds	r7, #40	; 0x28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e88:	f7fc ffcc 	bl	8005e24 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e98:	f7fc ffc4 	bl	8005e24 <HAL_GetTick>
 8008e9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e9e:	4b39      	ldr	r3, [pc, #228]	; (8008f84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	015b      	lsls	r3, r3, #5
 8008ea4:	0d1b      	lsrs	r3, r3, #20
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eae:	e054      	b.n	8008f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d050      	beq.n	8008f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008eb8:	f7fc ffb4 	bl	8005e24 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d902      	bls.n	8008ece <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d13d      	bne.n	8008f4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ee6:	d111      	bne.n	8008f0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef0:	d004      	beq.n	8008efc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008efa:	d107      	bne.n	8008f0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f14:	d10f      	bne.n	8008f36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e017      	b.n	8008f7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4013      	ands	r3, r2
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	bf0c      	ite	eq
 8008f6a:	2301      	moveq	r3, #1
 8008f6c:	2300      	movne	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d19b      	bne.n	8008eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	2000000c 	.word	0x2000000c

08008f88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	; 0x28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f9a:	f7fc ff43 	bl	8005e24 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008faa:	f7fc ff3b 	bl	8005e24 <HAL_GetTick>
 8008fae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	330c      	adds	r3, #12
 8008fb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008fb8:	4b3d      	ldr	r3, [pc, #244]	; (80090b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	00da      	lsls	r2, r3, #3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	0d1b      	lsrs	r3, r3, #20
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008fd0:	e060      	b.n	8009094 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008fd8:	d107      	bne.n	8008fea <SPI_WaitFifoStateUntilTimeout+0x62>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff0:	d050      	beq.n	8009094 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ff2:	f7fc ff17 	bl	8005e24 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d902      	bls.n	8009008 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d13d      	bne.n	8009084 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009020:	d111      	bne.n	8009046 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800902a:	d004      	beq.n	8009036 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009034:	d107      	bne.n	8009046 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904e:	d10f      	bne.n	8009070 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800906e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e010      	b.n	80090a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	3b01      	subs	r3, #1
 8009092:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4013      	ands	r3, r2
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d196      	bne.n	8008fd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3728      	adds	r7, #40	; 0x28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	2000000c 	.word	0x2000000c

080090b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7ff ff5b 	bl	8008f88 <SPI_WaitFifoStateUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090dc:	f043 0220 	orr.w	r2, r3, #32
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e027      	b.n	8009138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2200      	movs	r2, #0
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fec0 	bl	8008e78 <SPI_WaitFlagStateUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009102:	f043 0220 	orr.w	r2, r3, #32
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e014      	b.n	8009138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2200      	movs	r2, #0
 8009116:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff ff34 	bl	8008f88 <SPI_WaitFifoStateUntilTimeout>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800912a:	f043 0220 	orr.w	r2, r3, #32
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e000      	b.n	8009138 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e054      	b.n	80091fc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d111      	bne.n	8009182 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 ff68 	bl	800a03c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a23      	ldr	r2, [pc, #140]	; (8009204 <HAL_TIM_Base_Init+0xc4>)
 8009178:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2202      	movs	r2, #2
 8009186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3304      	adds	r3, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f000 fbd3 	bl	8009940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	080055c9 	.word	0x080055c9

08009208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d001      	beq.n	8009220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e036      	b.n	800928e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a17      	ldr	r2, [pc, #92]	; (800929c <HAL_TIM_Base_Start_IT+0x94>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d004      	beq.n	800924c <HAL_TIM_Base_Start_IT+0x44>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800924a:	d115      	bne.n	8009278 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <HAL_TIM_Base_Start_IT+0x98>)
 8009254:	4013      	ands	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b06      	cmp	r3, #6
 800925c:	d015      	beq.n	800928a <HAL_TIM_Base_Start_IT+0x82>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009264:	d011      	beq.n	800928a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f042 0201 	orr.w	r2, r2, #1
 8009274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009276:	e008      	b.n	800928a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	e000      	b.n	800928c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	40012c00 	.word	0x40012c00
 80092a0:	00010007 	.word	0x00010007

080092a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e054      	b.n	8009360 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d111      	bne.n	80092e6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 feb6 	bl	800a03c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a23      	ldr	r2, [pc, #140]	; (8009368 <HAL_TIM_OC_Init+0xc4>)
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f000 fb21 	bl	8009940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	0800936d 	.word	0x0800936d

0800936c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b02      	cmp	r3, #2
 8009394:	d128      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d121      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0202 	mvn.w	r2, #2
 80093ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	4798      	blx	r3
 80093cc:	e009      	b.n	80093e2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d128      	bne.n	8009448 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b04      	cmp	r3, #4
 8009402:	d121      	bne.n	8009448 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0204 	mvn.w	r2, #4
 800940c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2202      	movs	r2, #2
 8009412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
 800942c:	e009      	b.n	8009442 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b08      	cmp	r3, #8
 8009454:	d128      	bne.n	80094a8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b08      	cmp	r3, #8
 8009462:	d121      	bne.n	80094a8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f06f 0208 	mvn.w	r2, #8
 800946c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2204      	movs	r2, #4
 8009472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f003 0303 	and.w	r3, r3, #3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	4798      	blx	r3
 800948c:	e009      	b.n	80094a2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0310 	and.w	r3, r3, #16
 80094b2:	2b10      	cmp	r3, #16
 80094b4:	d128      	bne.n	8009508 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b10      	cmp	r3, #16
 80094c2:	d121      	bne.n	8009508 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f06f 0210 	mvn.w	r2, #16
 80094cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2208      	movs	r2, #8
 80094d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
 80094ec:	e009      	b.n	8009502 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b01      	cmp	r3, #1
 8009514:	d110      	bne.n	8009538 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b01      	cmp	r3, #1
 8009522:	d109      	bne.n	8009538 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f06f 0201 	mvn.w	r2, #1
 800952c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009542:	2b80      	cmp	r3, #128	; 0x80
 8009544:	d110      	bne.n	8009568 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009550:	2b80      	cmp	r3, #128	; 0x80
 8009552:	d109      	bne.n	8009568 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800955c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009576:	d110      	bne.n	800959a <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d109      	bne.n	800959a <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800958e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	d110      	bne.n	80095ca <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d109      	bne.n	80095ca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	d110      	bne.n	80095fa <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	d109      	bne.n	80095fa <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f06f 0220 	mvn.w	r2, #32
 80095ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_TIM_OC_ConfigChannel+0x1e>
 800961e:	2302      	movs	r3, #2
 8009620:	e066      	b.n	80096f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b14      	cmp	r3, #20
 800962e:	d857      	bhi.n	80096e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009630:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	0800968d 	.word	0x0800968d
 800963c:	080096e1 	.word	0x080096e1
 8009640:	080096e1 	.word	0x080096e1
 8009644:	080096e1 	.word	0x080096e1
 8009648:	0800969b 	.word	0x0800969b
 800964c:	080096e1 	.word	0x080096e1
 8009650:	080096e1 	.word	0x080096e1
 8009654:	080096e1 	.word	0x080096e1
 8009658:	080096a9 	.word	0x080096a9
 800965c:	080096e1 	.word	0x080096e1
 8009660:	080096e1 	.word	0x080096e1
 8009664:	080096e1 	.word	0x080096e1
 8009668:	080096b7 	.word	0x080096b7
 800966c:	080096e1 	.word	0x080096e1
 8009670:	080096e1 	.word	0x080096e1
 8009674:	080096e1 	.word	0x080096e1
 8009678:	080096c5 	.word	0x080096c5
 800967c:	080096e1 	.word	0x080096e1
 8009680:	080096e1 	.word	0x080096e1
 8009684:	080096e1 	.word	0x080096e1
 8009688:	080096d3 	.word	0x080096d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f9b8 	bl	8009a08 <TIM_OC1_SetConfig>
      break;
 8009698:	e025      	b.n	80096e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fa2d 	bl	8009b00 <TIM_OC2_SetConfig>
      break;
 80096a6:	e01e      	b.n	80096e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 faa0 	bl	8009bf4 <TIM_OC3_SetConfig>
      break;
 80096b4:	e017      	b.n	80096e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fb11 	bl	8009ce4 <TIM_OC4_SetConfig>
      break;
 80096c2:	e010      	b.n	80096e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fb68 	bl	8009da0 <TIM_OC5_SetConfig>
      break;
 80096d0:	e009      	b.n	80096e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fbb9 	bl	8009e50 <TIM_OC6_SetConfig>
      break;
 80096de:	e002      	b.n	80096e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
      break;
 80096e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_TIM_ConfigClockSource+0x1c>
 8009710:	2302      	movs	r3, #2
 8009712:	e0b6      	b.n	8009882 <HAL_TIM_ConfigClockSource+0x18a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2202      	movs	r2, #2
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800973e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009750:	d03e      	beq.n	80097d0 <HAL_TIM_ConfigClockSource+0xd8>
 8009752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009756:	f200 8087 	bhi.w	8009868 <HAL_TIM_ConfigClockSource+0x170>
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975e:	f000 8086 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x176>
 8009762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009766:	d87f      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009768:	2b70      	cmp	r3, #112	; 0x70
 800976a:	d01a      	beq.n	80097a2 <HAL_TIM_ConfigClockSource+0xaa>
 800976c:	2b70      	cmp	r3, #112	; 0x70
 800976e:	d87b      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009770:	2b60      	cmp	r3, #96	; 0x60
 8009772:	d050      	beq.n	8009816 <HAL_TIM_ConfigClockSource+0x11e>
 8009774:	2b60      	cmp	r3, #96	; 0x60
 8009776:	d877      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009778:	2b50      	cmp	r3, #80	; 0x50
 800977a:	d03c      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0xfe>
 800977c:	2b50      	cmp	r3, #80	; 0x50
 800977e:	d873      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	d058      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x13e>
 8009784:	2b40      	cmp	r3, #64	; 0x40
 8009786:	d86f      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009788:	2b30      	cmp	r3, #48	; 0x30
 800978a:	d064      	beq.n	8009856 <HAL_TIM_ConfigClockSource+0x15e>
 800978c:	2b30      	cmp	r3, #48	; 0x30
 800978e:	d86b      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009790:	2b20      	cmp	r3, #32
 8009792:	d060      	beq.n	8009856 <HAL_TIM_ConfigClockSource+0x15e>
 8009794:	2b20      	cmp	r3, #32
 8009796:	d867      	bhi.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d05c      	beq.n	8009856 <HAL_TIM_ConfigClockSource+0x15e>
 800979c:	2b10      	cmp	r3, #16
 800979e:	d05a      	beq.n	8009856 <HAL_TIM_ConfigClockSource+0x15e>
 80097a0:	e062      	b.n	8009868 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f000 fc23 	bl	8009ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	609a      	str	r2, [r3, #8]
      break;
 80097ce:	e04f      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	6899      	ldr	r1, [r3, #8]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f000 fc0c 	bl	8009ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097f2:	609a      	str	r2, [r3, #8]
      break;
 80097f4:	e03c      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6859      	ldr	r1, [r3, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	461a      	mov	r2, r3
 8009804:	f000 fb7e 	bl	8009f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2150      	movs	r1, #80	; 0x50
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fbd7 	bl	8009fc2 <TIM_ITRx_SetConfig>
      break;
 8009814:	e02c      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6859      	ldr	r1, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	461a      	mov	r2, r3
 8009824:	f000 fb9d 	bl	8009f62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2160      	movs	r1, #96	; 0x60
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fbc7 	bl	8009fc2 <TIM_ITRx_SetConfig>
      break;
 8009834:	e01c      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	6859      	ldr	r1, [r3, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	461a      	mov	r2, r3
 8009844:	f000 fb5e 	bl	8009f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2140      	movs	r1, #64	; 0x40
 800984e:	4618      	mov	r0, r3
 8009850:	f000 fbb7 	bl	8009fc2 <TIM_ITRx_SetConfig>
      break;
 8009854:	e00c      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f000 fbae 	bl	8009fc2 <TIM_ITRx_SetConfig>
      break;
 8009866:	e003      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
      break;
 800986c:	e000      	b.n	8009870 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800986e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009880:	7bfb      	ldrb	r3, [r7, #15]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
	...

08009940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a2a      	ldr	r2, [pc, #168]	; (80099fc <TIM_Base_SetConfig+0xbc>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d003      	beq.n	8009960 <TIM_Base_SetConfig+0x20>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800995e:	d108      	bne.n	8009972 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a21      	ldr	r2, [pc, #132]	; (80099fc <TIM_Base_SetConfig+0xbc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00b      	beq.n	8009992 <TIM_Base_SetConfig+0x52>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009980:	d007      	beq.n	8009992 <TIM_Base_SetConfig+0x52>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a1e      	ldr	r2, [pc, #120]	; (8009a00 <TIM_Base_SetConfig+0xc0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d003      	beq.n	8009992 <TIM_Base_SetConfig+0x52>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <TIM_Base_SetConfig+0xc4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d108      	bne.n	80099a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a0c      	ldr	r2, [pc, #48]	; (80099fc <TIM_Base_SetConfig+0xbc>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d007      	beq.n	80099e0 <TIM_Base_SetConfig+0xa0>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a0b      	ldr	r2, [pc, #44]	; (8009a00 <TIM_Base_SetConfig+0xc0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_Base_SetConfig+0xa0>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <TIM_Base_SetConfig+0xc4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d103      	bne.n	80099e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	615a      	str	r2, [r3, #20]
}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	40012c00 	.word	0x40012c00
 8009a00:	40014400 	.word	0x40014400
 8009a04:	40014800 	.word	0x40014800

08009a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	f023 0201 	bic.w	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0303 	bic.w	r3, r3, #3
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f023 0302 	bic.w	r3, r3, #2
 8009a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a24      	ldr	r2, [pc, #144]	; (8009af4 <TIM_OC1_SetConfig+0xec>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d007      	beq.n	8009a78 <TIM_OC1_SetConfig+0x70>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a23      	ldr	r2, [pc, #140]	; (8009af8 <TIM_OC1_SetConfig+0xf0>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d003      	beq.n	8009a78 <TIM_OC1_SetConfig+0x70>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a22      	ldr	r2, [pc, #136]	; (8009afc <TIM_OC1_SetConfig+0xf4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d10c      	bne.n	8009a92 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f023 0308 	bic.w	r3, r3, #8
 8009a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f023 0304 	bic.w	r3, r3, #4
 8009a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a17      	ldr	r2, [pc, #92]	; (8009af4 <TIM_OC1_SetConfig+0xec>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_OC1_SetConfig+0xa2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a17      	ldr	r2, [pc, #92]	; (8009afc <TIM_OC1_SetConfig+0xf4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_OC1_SetConfig+0xa2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a14      	ldr	r2, [pc, #80]	; (8009af8 <TIM_OC1_SetConfig+0xf0>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d111      	bne.n	8009ace <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	621a      	str	r2, [r3, #32]
}
 8009ae8:	bf00      	nop
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	40012c00 	.word	0x40012c00
 8009af8:	40014800 	.word	0x40014800
 8009afc:	40014400 	.word	0x40014400

08009b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f023 0210 	bic.w	r2, r3, #16
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	021b      	lsls	r3, r3, #8
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f023 0320 	bic.w	r3, r3, #32
 8009b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a22      	ldr	r2, [pc, #136]	; (8009be8 <TIM_OC2_SetConfig+0xe8>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d10d      	bne.n	8009b80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a19      	ldr	r2, [pc, #100]	; (8009be8 <TIM_OC2_SetConfig+0xe8>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d007      	beq.n	8009b98 <TIM_OC2_SetConfig+0x98>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a18      	ldr	r2, [pc, #96]	; (8009bec <TIM_OC2_SetConfig+0xec>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d003      	beq.n	8009b98 <TIM_OC2_SetConfig+0x98>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a17      	ldr	r2, [pc, #92]	; (8009bf0 <TIM_OC2_SetConfig+0xf0>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d113      	bne.n	8009bc0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	621a      	str	r2, [r3, #32]
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	40012c00 	.word	0x40012c00
 8009bec:	40014400 	.word	0x40014400
 8009bf0:	40014800 	.word	0x40014800

08009bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0303 	bic.w	r3, r3, #3
 8009c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a21      	ldr	r2, [pc, #132]	; (8009cd8 <TIM_OC3_SetConfig+0xe4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d10d      	bne.n	8009c72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a18      	ldr	r2, [pc, #96]	; (8009cd8 <TIM_OC3_SetConfig+0xe4>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d007      	beq.n	8009c8a <TIM_OC3_SetConfig+0x96>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a17      	ldr	r2, [pc, #92]	; (8009cdc <TIM_OC3_SetConfig+0xe8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d003      	beq.n	8009c8a <TIM_OC3_SetConfig+0x96>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <TIM_OC3_SetConfig+0xec>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d113      	bne.n	8009cb2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	621a      	str	r2, [r3, #32]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	40012c00 	.word	0x40012c00
 8009cdc:	40014400 	.word	0x40014400
 8009ce0:	40014800 	.word	0x40014800

08009ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	031b      	lsls	r3, r3, #12
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a14      	ldr	r2, [pc, #80]	; (8009d94 <TIM_OC4_SetConfig+0xb0>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d007      	beq.n	8009d58 <TIM_OC4_SetConfig+0x74>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a13      	ldr	r2, [pc, #76]	; (8009d98 <TIM_OC4_SetConfig+0xb4>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_OC4_SetConfig+0x74>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a12      	ldr	r2, [pc, #72]	; (8009d9c <TIM_OC4_SetConfig+0xb8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d109      	bne.n	8009d6c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	019b      	lsls	r3, r3, #6
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	40012c00 	.word	0x40012c00
 8009d98:	40014400 	.word	0x40014400
 8009d9c:	40014800 	.word	0x40014800

08009da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009de4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	041b      	lsls	r3, r3, #16
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a13      	ldr	r2, [pc, #76]	; (8009e44 <TIM_OC5_SetConfig+0xa4>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d007      	beq.n	8009e0a <TIM_OC5_SetConfig+0x6a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a12      	ldr	r2, [pc, #72]	; (8009e48 <TIM_OC5_SetConfig+0xa8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <TIM_OC5_SetConfig+0x6a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a11      	ldr	r2, [pc, #68]	; (8009e4c <TIM_OC5_SetConfig+0xac>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d109      	bne.n	8009e1e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	697a      	ldr	r2, [r7, #20]
 8009e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	621a      	str	r2, [r3, #32]
}
 8009e38:	bf00      	nop
 8009e3a:	371c      	adds	r7, #28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	40012c00 	.word	0x40012c00
 8009e48:	40014400 	.word	0x40014400
 8009e4c:	40014800 	.word	0x40014800

08009e50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	051b      	lsls	r3, r3, #20
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a14      	ldr	r2, [pc, #80]	; (8009ef8 <TIM_OC6_SetConfig+0xa8>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d007      	beq.n	8009ebc <TIM_OC6_SetConfig+0x6c>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a13      	ldr	r2, [pc, #76]	; (8009efc <TIM_OC6_SetConfig+0xac>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_OC6_SetConfig+0x6c>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a12      	ldr	r2, [pc, #72]	; (8009f00 <TIM_OC6_SetConfig+0xb0>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d109      	bne.n	8009ed0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	621a      	str	r2, [r3, #32]
}
 8009eea:	bf00      	nop
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	40012c00 	.word	0x40012c00
 8009efc:	40014400 	.word	0x40014400
 8009f00:	40014800 	.word	0x40014800

08009f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	f023 0201 	bic.w	r2, r3, #1
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f023 030a 	bic.w	r3, r3, #10
 8009f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b087      	sub	sp, #28
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	f023 0210 	bic.w	r2, r3, #16
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	031b      	lsls	r3, r3, #12
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	621a      	str	r2, [r3, #32]
}
 8009fb6:	bf00      	nop
 8009fb8:	371c      	adds	r7, #28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f043 0307 	orr.w	r3, r3, #7
 8009fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	609a      	str	r2, [r3, #8]
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b087      	sub	sp, #28
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	021a      	lsls	r2, r3, #8
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	431a      	orrs	r2, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	4313      	orrs	r3, r2
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	4313      	orrs	r3, r2
 800a028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	609a      	str	r2, [r3, #8]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <TIM_ResetCallback+0x84>)
 800a048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a1d      	ldr	r2, [pc, #116]	; (800a0c4 <TIM_ResetCallback+0x88>)
 800a050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a1c      	ldr	r2, [pc, #112]	; (800a0c8 <TIM_ResetCallback+0x8c>)
 800a058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a1b      	ldr	r2, [pc, #108]	; (800a0cc <TIM_ResetCallback+0x90>)
 800a060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a1a      	ldr	r2, [pc, #104]	; (800a0d0 <TIM_ResetCallback+0x94>)
 800a068:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <TIM_ResetCallback+0x98>)
 800a070:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <TIM_ResetCallback+0x9c>)
 800a078:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a17      	ldr	r2, [pc, #92]	; (800a0dc <TIM_ResetCallback+0xa0>)
 800a080:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a16      	ldr	r2, [pc, #88]	; (800a0e0 <TIM_ResetCallback+0xa4>)
 800a088:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a15      	ldr	r2, [pc, #84]	; (800a0e4 <TIM_ResetCallback+0xa8>)
 800a090:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a14      	ldr	r2, [pc, #80]	; (800a0e8 <TIM_ResetCallback+0xac>)
 800a098:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <TIM_ResetCallback+0xb0>)
 800a0a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a12      	ldr	r2, [pc, #72]	; (800a0f0 <TIM_ResetCallback+0xb4>)
 800a0a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a11      	ldr	r2, [pc, #68]	; (800a0f4 <TIM_ResetCallback+0xb8>)
 800a0b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	08004a55 	.word	0x08004a55
 800a0c4:	0800988b 	.word	0x0800988b
 800a0c8:	08009903 	.word	0x08009903
 800a0cc:	08009917 	.word	0x08009917
 800a0d0:	080098b3 	.word	0x080098b3
 800a0d4:	080098c7 	.word	0x080098c7
 800a0d8:	0800989f 	.word	0x0800989f
 800a0dc:	080098db 	.word	0x080098db
 800a0e0:	080098ef 	.word	0x080098ef
 800a0e4:	0800992b 	.word	0x0800992b
 800a0e8:	0800a2d9 	.word	0x0800a2d9
 800a0ec:	0800a2ed 	.word	0x0800a2ed
 800a0f0:	0800a301 	.word	0x0800a301
 800a0f4:	0800a315 	.word	0x0800a315

0800a0f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d101      	bne.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a10c:	2302      	movs	r3, #2
 800a10e:	e04a      	b.n	800a1a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1f      	ldr	r2, [pc, #124]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d108      	bne.n	800a14c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a140:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4313      	orrs	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a12      	ldr	r2, [pc, #72]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d004      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a178:	d10c      	bne.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	4313      	orrs	r3, r2
 800a18a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40012c00 	.word	0x40012c00

0800a1b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e078      	b.n	800a2c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4313      	orrs	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23a:	4313      	orrs	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	041b      	lsls	r3, r3, #16
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a20      	ldr	r2, [pc, #128]	; (800a2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d106      	bne.n	800a266 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a1a      	ldr	r2, [pc, #104]	; (800a2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d121      	bne.n	800a2b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27a:	051b      	lsls	r3, r3, #20
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	4313      	orrs	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d106      	bne.n	800a2b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	40012c00 	.word	0x40012c00

0800a2d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <LL_RCC_GetUSARTClockSource>:
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800a330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4013      	ands	r3, r2
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <LL_RCC_GetLPUARTClockSource>:
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a354:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4013      	ands	r3, r2
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e042      	b.n	800a400 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7fa fff3 	bl	8005378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	; 0x24
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0201 	bic.w	r2, r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f8ba 	bl	800a524 <UART_SetConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e022      	b.n	800a400 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fad6 	bl	800a974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0201 	orr.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fb5d 	bl	800aab8 <UART_CheckIdleState>
 800a3fe:	4603      	mov	r3, r0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41e:	2b20      	cmp	r3, #32
 800a420:	d17b      	bne.n	800a51a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <HAL_UART_Transmit+0x26>
 800a428:	88fb      	ldrh	r3, [r7, #6]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e074      	b.n	800a51c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2221      	movs	r2, #33	; 0x21
 800a43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a442:	f7fb fcef 	bl	8005e24 <HAL_GetTick>
 800a446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a460:	d108      	bne.n	800a474 <HAL_UART_Transmit+0x6c>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d104      	bne.n	800a474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	61bb      	str	r3, [r7, #24]
 800a472:	e003      	b.n	800a47c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a47c:	e030      	b.n	800a4e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2200      	movs	r2, #0
 800a486:	2180      	movs	r1, #128	; 0x80
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 fbbf 	bl	800ac0c <UART_WaitOnFlagUntilTimeout>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e03d      	b.n	800a51c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	e007      	b.n	800a4ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	781a      	ldrb	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1c8      	bne.n	800a47e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2140      	movs	r1, #64	; 0x40
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 fb88 	bl	800ac0c <UART_WaitOnFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e006      	b.n	800a51c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2220      	movs	r2, #32
 800a512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	e000      	b.n	800a51c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a51a:	2302      	movs	r3, #2
  }
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3720      	adds	r7, #32
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a528:	b08c      	sub	sp, #48	; 0x30
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	431a      	orrs	r2, r3
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	431a      	orrs	r2, r3
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	69db      	ldr	r3, [r3, #28]
 800a548:	4313      	orrs	r3, r2
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4baf      	ldr	r3, [pc, #700]	; (800a810 <UART_SetConfig+0x2ec>)
 800a554:	4013      	ands	r3, r2
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a55c:	430b      	orrs	r3, r1
 800a55e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	68da      	ldr	r2, [r3, #12]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4aa4      	ldr	r2, [pc, #656]	; (800a814 <UART_SetConfig+0x2f0>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d004      	beq.n	800a590 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a58c:	4313      	orrs	r3, r2
 800a58e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a59a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5a4:	430b      	orrs	r3, r1
 800a5a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ae:	f023 010f 	bic.w	r1, r3, #15
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a95      	ldr	r2, [pc, #596]	; (800a818 <UART_SetConfig+0x2f4>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d125      	bne.n	800a614 <UART_SetConfig+0xf0>
 800a5c8:	2003      	movs	r0, #3
 800a5ca:	f7ff fead 	bl	800a328 <LL_RCC_GetUSARTClockSource>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d81b      	bhi.n	800a60c <UART_SetConfig+0xe8>
 800a5d4:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <UART_SetConfig+0xb8>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a5ed 	.word	0x0800a5ed
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a605 	.word	0x0800a605
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5f2:	e042      	b.n	800a67a <UART_SetConfig+0x156>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5fa:	e03e      	b.n	800a67a <UART_SetConfig+0x156>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a602:	e03a      	b.n	800a67a <UART_SetConfig+0x156>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a60a:	e036      	b.n	800a67a <UART_SetConfig+0x156>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a612:	e032      	b.n	800a67a <UART_SetConfig+0x156>
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a7e      	ldr	r2, [pc, #504]	; (800a814 <UART_SetConfig+0x2f0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d12a      	bne.n	800a674 <UART_SetConfig+0x150>
 800a61e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a622:	f7ff fe91 	bl	800a348 <LL_RCC_GetLPUARTClockSource>
 800a626:	4603      	mov	r3, r0
 800a628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a62c:	d01a      	beq.n	800a664 <UART_SetConfig+0x140>
 800a62e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a632:	d81b      	bhi.n	800a66c <UART_SetConfig+0x148>
 800a634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a638:	d00c      	beq.n	800a654 <UART_SetConfig+0x130>
 800a63a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a63e:	d815      	bhi.n	800a66c <UART_SetConfig+0x148>
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <UART_SetConfig+0x128>
 800a644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a648:	d008      	beq.n	800a65c <UART_SetConfig+0x138>
 800a64a:	e00f      	b.n	800a66c <UART_SetConfig+0x148>
 800a64c:	2300      	movs	r3, #0
 800a64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a652:	e012      	b.n	800a67a <UART_SetConfig+0x156>
 800a654:	2302      	movs	r3, #2
 800a656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a65a:	e00e      	b.n	800a67a <UART_SetConfig+0x156>
 800a65c:	2304      	movs	r3, #4
 800a65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a662:	e00a      	b.n	800a67a <UART_SetConfig+0x156>
 800a664:	2308      	movs	r3, #8
 800a666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a66a:	e006      	b.n	800a67a <UART_SetConfig+0x156>
 800a66c:	2310      	movs	r3, #16
 800a66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a672:	e002      	b.n	800a67a <UART_SetConfig+0x156>
 800a674:	2310      	movs	r3, #16
 800a676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a65      	ldr	r2, [pc, #404]	; (800a814 <UART_SetConfig+0x2f0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	f040 8097 	bne.w	800a7b4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a68a:	2b08      	cmp	r3, #8
 800a68c:	d823      	bhi.n	800a6d6 <UART_SetConfig+0x1b2>
 800a68e:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <UART_SetConfig+0x170>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6b9 	.word	0x0800a6b9
 800a698:	0800a6d7 	.word	0x0800a6d7
 800a69c:	0800a6c1 	.word	0x0800a6c1
 800a6a0:	0800a6d7 	.word	0x0800a6d7
 800a6a4:	0800a6c7 	.word	0x0800a6c7
 800a6a8:	0800a6d7 	.word	0x0800a6d7
 800a6ac:	0800a6d7 	.word	0x0800a6d7
 800a6b0:	0800a6d7 	.word	0x0800a6d7
 800a6b4:	0800a6cf 	.word	0x0800a6cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6b8:	f7fd f8cc 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 800a6bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6be:	e010      	b.n	800a6e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6c0:	4b56      	ldr	r3, [pc, #344]	; (800a81c <UART_SetConfig+0x2f8>)
 800a6c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6c4:	e00d      	b.n	800a6e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6c6:	f7fd f845 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a6ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6cc:	e009      	b.n	800a6e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6d4:	e005      	b.n	800a6e2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 812b 	beq.w	800a940 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	4a4c      	ldr	r2, [pc, #304]	; (800a820 <UART_SetConfig+0x2fc>)
 800a6f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	4413      	add	r3, r2
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d305      	bcc.n	800a71a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	429a      	cmp	r2, r3
 800a718:	d903      	bls.n	800a722 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a720:	e10e      	b.n	800a940 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	2200      	movs	r2, #0
 800a726:	60bb      	str	r3, [r7, #8]
 800a728:	60fa      	str	r2, [r7, #12]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	4a3c      	ldr	r2, [pc, #240]	; (800a820 <UART_SetConfig+0x2fc>)
 800a730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a734:	b29b      	uxth	r3, r3
 800a736:	2200      	movs	r2, #0
 800a738:	603b      	str	r3, [r7, #0]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a744:	f7f5 fd74 	bl	8000230 <__aeabi_uldivmod>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4610      	mov	r0, r2
 800a74e:	4619      	mov	r1, r3
 800a750:	f04f 0200 	mov.w	r2, #0
 800a754:	f04f 0300 	mov.w	r3, #0
 800a758:	020b      	lsls	r3, r1, #8
 800a75a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a75e:	0202      	lsls	r2, r0, #8
 800a760:	6979      	ldr	r1, [r7, #20]
 800a762:	6849      	ldr	r1, [r1, #4]
 800a764:	0849      	lsrs	r1, r1, #1
 800a766:	2000      	movs	r0, #0
 800a768:	460c      	mov	r4, r1
 800a76a:	4605      	mov	r5, r0
 800a76c:	eb12 0804 	adds.w	r8, r2, r4
 800a770:	eb43 0905 	adc.w	r9, r3, r5
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	469a      	mov	sl, r3
 800a77c:	4693      	mov	fp, r2
 800a77e:	4652      	mov	r2, sl
 800a780:	465b      	mov	r3, fp
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f5 fd53 	bl	8000230 <__aeabi_uldivmod>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4613      	mov	r3, r2
 800a790:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a798:	d308      	bcc.n	800a7ac <UART_SetConfig+0x288>
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a0:	d204      	bcs.n	800a7ac <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6a3a      	ldr	r2, [r7, #32]
 800a7a8:	60da      	str	r2, [r3, #12]
 800a7aa:	e0c9      	b.n	800a940 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a7b2:	e0c5      	b.n	800a940 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7bc:	d16d      	bne.n	800a89a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800a7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	2b07      	cmp	r3, #7
 800a7c6:	d82d      	bhi.n	800a824 <UART_SetConfig+0x300>
 800a7c8:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <UART_SetConfig+0x2ac>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a7f1 	.word	0x0800a7f1
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a825 	.word	0x0800a825
 800a7dc:	0800a7ff 	.word	0x0800a7ff
 800a7e0:	0800a825 	.word	0x0800a825
 800a7e4:	0800a825 	.word	0x0800a825
 800a7e8:	0800a825 	.word	0x0800a825
 800a7ec:	0800a807 	.word	0x0800a807
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7f0:	f7fd f846 	bl	8007880 <HAL_RCC_GetPCLK2Freq>
 800a7f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7f6:	e01b      	b.n	800a830 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7f8:	4b08      	ldr	r3, [pc, #32]	; (800a81c <UART_SetConfig+0x2f8>)
 800a7fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7fc:	e018      	b.n	800a830 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7fe:	f7fc ffa9 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a802:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a804:	e014      	b.n	800a830 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a80c:	e010      	b.n	800a830 <UART_SetConfig+0x30c>
 800a80e:	bf00      	nop
 800a810:	cfff69f3 	.word	0xcfff69f3
 800a814:	40008000 	.word	0x40008000
 800a818:	40013800 	.word	0x40013800
 800a81c:	00f42400 	.word	0x00f42400
 800a820:	0800cdbc 	.word	0x0800cdbc
      default:
        pclk = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a82e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 8084 	beq.w	800a940 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	4a4b      	ldr	r2, [pc, #300]	; (800a96c <UART_SetConfig+0x448>)
 800a83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a842:	461a      	mov	r2, r3
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84a:	005a      	lsls	r2, r3, #1
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	441a      	add	r2, r3
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	2b0f      	cmp	r3, #15
 800a862:	d916      	bls.n	800a892 <UART_SetConfig+0x36e>
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86a:	d212      	bcs.n	800a892 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	f023 030f 	bic.w	r3, r3, #15
 800a874:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	085b      	lsrs	r3, r3, #1
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	b29a      	uxth	r2, r3
 800a882:	8bfb      	ldrh	r3, [r7, #30]
 800a884:	4313      	orrs	r3, r2
 800a886:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	8bfa      	ldrh	r2, [r7, #30]
 800a88e:	60da      	str	r2, [r3, #12]
 800a890:	e056      	b.n	800a940 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a898:	e052      	b.n	800a940 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a89a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	2b07      	cmp	r3, #7
 800a8a2:	d822      	bhi.n	800a8ea <UART_SetConfig+0x3c6>
 800a8a4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <UART_SetConfig+0x388>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8cd 	.word	0x0800a8cd
 800a8b0:	0800a8d5 	.word	0x0800a8d5
 800a8b4:	0800a8eb 	.word	0x0800a8eb
 800a8b8:	0800a8db 	.word	0x0800a8db
 800a8bc:	0800a8eb 	.word	0x0800a8eb
 800a8c0:	0800a8eb 	.word	0x0800a8eb
 800a8c4:	0800a8eb 	.word	0x0800a8eb
 800a8c8:	0800a8e3 	.word	0x0800a8e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8cc:	f7fc ffd8 	bl	8007880 <HAL_RCC_GetPCLK2Freq>
 800a8d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8d2:	e010      	b.n	800a8f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8d4:	4b26      	ldr	r3, [pc, #152]	; (800a970 <UART_SetConfig+0x44c>)
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8d8:	e00d      	b.n	800a8f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8da:	f7fc ff3b 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a8de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8e0:	e009      	b.n	800a8f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8e8:	e005      	b.n	800a8f6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a8f4:	bf00      	nop
    }

    if (pclk != 0U)
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d021      	beq.n	800a940 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	4a1a      	ldr	r2, [pc, #104]	; (800a96c <UART_SetConfig+0x448>)
 800a902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a906:	461a      	mov	r2, r3
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	441a      	add	r2, r3
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	2b0f      	cmp	r3, #15
 800a924:	d909      	bls.n	800a93a <UART_SetConfig+0x416>
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a92c:	d205      	bcs.n	800a93a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	b29a      	uxth	r2, r3
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	60da      	str	r2, [r3, #12]
 800a938:	e002      	b.n	800a940 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2201      	movs	r2, #1
 800a944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2200      	movs	r2, #0
 800a954:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2200      	movs	r2, #0
 800a95a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a95c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a960:	4618      	mov	r0, r3
 800a962:	3730      	adds	r7, #48	; 0x30
 800a964:	46bd      	mov	sp, r7
 800a966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a96a:	bf00      	nop
 800a96c:	0800cdbc 	.word	0x0800cdbc
 800a970:	00f42400 	.word	0x00f42400

0800a974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00a      	beq.n	800a99e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	430a      	orrs	r2, r1
 800a99c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	f003 0308 	and.w	r3, r3, #8
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	430a      	orrs	r2, r1
 800aa02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00a      	beq.n	800aa26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2a:	f003 0320 	and.w	r3, r3, #32
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00a      	beq.n	800aa48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01a      	beq.n	800aa8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa72:	d10a      	bne.n	800aa8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00a      	beq.n	800aaac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	605a      	str	r2, [r3, #4]
  }
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b098      	sub	sp, #96	; 0x60
 800aabc:	af02      	add	r7, sp, #8
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aac8:	f7fb f9ac 	bl	8005e24 <HAL_GetTick>
 800aacc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b08      	cmp	r3, #8
 800aada:	d12f      	bne.n	800ab3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aadc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aae4:	2200      	movs	r2, #0
 800aae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f88e 	bl	800ac0c <UART_WaitOnFlagUntilTimeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d022      	beq.n	800ab3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab0a:	653b      	str	r3, [r7, #80]	; 0x50
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab14:	647b      	str	r3, [r7, #68]	; 0x44
 800ab16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e6      	bne.n	800aaf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e063      	b.n	800ac04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	d149      	bne.n	800abde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab52:	2200      	movs	r2, #0
 800ab54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f857 	bl	800ac0c <UART_WaitOnFlagUntilTimeout>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d03c      	beq.n	800abde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	623b      	str	r3, [r7, #32]
   return(result);
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab82:	633b      	str	r3, [r7, #48]	; 0x30
 800ab84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e6      	bne.n	800ab64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	64bb      	str	r3, [r7, #72]	; 0x48
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3308      	adds	r3, #8
 800abb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb6:	61fa      	str	r2, [r7, #28]
 800abb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	69b9      	ldr	r1, [r7, #24]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	617b      	str	r3, [r7, #20]
   return(result);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e5      	bne.n	800ab96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abda:	2303      	movs	r3, #3
 800abdc:	e012      	b.n	800ac04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2220      	movs	r2, #32
 800abe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2220      	movs	r2, #32
 800abea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3758      	adds	r7, #88	; 0x58
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac1c:	e049      	b.n	800acb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac24:	d045      	beq.n	800acb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac26:	f7fb f8fd 	bl	8005e24 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d302      	bcc.n	800ac3c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e048      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d031      	beq.n	800acb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	f003 0308 	and.w	r3, r3, #8
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d110      	bne.n	800ac7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2208      	movs	r2, #8
 800ac62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 f838 	bl	800acda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e029      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac8c:	d111      	bne.n	800acb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f81e 	bl	800acda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e00f      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69da      	ldr	r2, [r3, #28]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	4013      	ands	r3, r2
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	bf0c      	ite	eq
 800acc2:	2301      	moveq	r3, #1
 800acc4:	2300      	movne	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	429a      	cmp	r2, r3
 800acce:	d0a6      	beq.n	800ac1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acda:	b480      	push	{r7}
 800acdc:	b095      	sub	sp, #84	; 0x54
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad00:	643b      	str	r3, [r7, #64]	; 0x40
 800ad02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e6      	bne.n	800ace2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3308      	adds	r3, #8
 800ad1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	e853 3f00 	ldrex	r3, [r3]
 800ad22:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad2a:	f023 0301 	bic.w	r3, r3, #1
 800ad2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3308      	adds	r3, #8
 800ad36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad38:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad40:	e841 2300 	strex	r3, r2, [r1]
 800ad44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e3      	bne.n	800ad14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d118      	bne.n	800ad86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f023 0310 	bic.w	r3, r3, #16
 800ad68:	647b      	str	r3, [r7, #68]	; 0x44
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6979      	ldr	r1, [r7, #20]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e6      	bne.n	800ad54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ad9a:	bf00      	nop
 800ad9c:	3754      	adds	r7, #84	; 0x54
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_UARTEx_DisableFifoMode+0x16>
 800adb8:	2302      	movs	r3, #2
 800adba:	e027      	b.n	800ae0c <HAL_UARTEx_DisableFifoMode+0x66>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2224      	movs	r2, #36	; 0x24
 800adc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0201 	bic.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800adea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e02d      	b.n	800ae8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2224      	movs	r2, #36	; 0x24
 800ae3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f84f 	bl	800af10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e02d      	b.n	800af08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2224      	movs	r2, #36	; 0x24
 800aeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f811 	bl	800af10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d108      	bne.n	800af32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af30:	e031      	b.n	800af96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af32:	2308      	movs	r3, #8
 800af34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af36:	2308      	movs	r3, #8
 800af38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	0e5b      	lsrs	r3, r3, #25
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	0f5b      	lsrs	r3, r3, #29
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	7b3a      	ldrb	r2, [r7, #12]
 800af5e:	4911      	ldr	r1, [pc, #68]	; (800afa4 <UARTEx_SetNbDataToProcess+0x94>)
 800af60:	5c8a      	ldrb	r2, [r1, r2]
 800af62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af66:	7b3a      	ldrb	r2, [r7, #12]
 800af68:	490f      	ldr	r1, [pc, #60]	; (800afa8 <UARTEx_SetNbDataToProcess+0x98>)
 800af6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af70:	b29a      	uxth	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	7b7a      	ldrb	r2, [r7, #13]
 800af7c:	4909      	ldr	r1, [pc, #36]	; (800afa4 <UARTEx_SetNbDataToProcess+0x94>)
 800af7e:	5c8a      	ldrb	r2, [r1, r2]
 800af80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af84:	7b7a      	ldrb	r2, [r7, #13]
 800af86:	4908      	ldr	r1, [pc, #32]	; (800afa8 <UARTEx_SetNbDataToProcess+0x98>)
 800af88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	0800cdd4 	.word	0x0800cdd4
 800afa8:	0800cddc 	.word	0x0800cddc

0800afac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800afb4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800afb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	43db      	mvns	r3, r3
 800afc8:	b29b      	uxth	r3, r3
 800afca:	4013      	ands	r3, r2
 800afcc:	b29a      	uxth	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800afe2:	b084      	sub	sp, #16
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	f107 0014 	add.w	r0, r7, #20
 800aff0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	b004      	add	sp, #16
 800b022:	4770      	bx	lr

0800b024 <__errno>:
 800b024:	4b01      	ldr	r3, [pc, #4]	; (800b02c <__errno+0x8>)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	20000018 	.word	0x20000018

0800b030 <__libc_init_array>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	4d0d      	ldr	r5, [pc, #52]	; (800b068 <__libc_init_array+0x38>)
 800b034:	4c0d      	ldr	r4, [pc, #52]	; (800b06c <__libc_init_array+0x3c>)
 800b036:	1b64      	subs	r4, r4, r5
 800b038:	10a4      	asrs	r4, r4, #2
 800b03a:	2600      	movs	r6, #0
 800b03c:	42a6      	cmp	r6, r4
 800b03e:	d109      	bne.n	800b054 <__libc_init_array+0x24>
 800b040:	4d0b      	ldr	r5, [pc, #44]	; (800b070 <__libc_init_array+0x40>)
 800b042:	4c0c      	ldr	r4, [pc, #48]	; (800b074 <__libc_init_array+0x44>)
 800b044:	f001 fa34 	bl	800c4b0 <_init>
 800b048:	1b64      	subs	r4, r4, r5
 800b04a:	10a4      	asrs	r4, r4, #2
 800b04c:	2600      	movs	r6, #0
 800b04e:	42a6      	cmp	r6, r4
 800b050:	d105      	bne.n	800b05e <__libc_init_array+0x2e>
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	f855 3b04 	ldr.w	r3, [r5], #4
 800b058:	4798      	blx	r3
 800b05a:	3601      	adds	r6, #1
 800b05c:	e7ee      	b.n	800b03c <__libc_init_array+0xc>
 800b05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b062:	4798      	blx	r3
 800b064:	3601      	adds	r6, #1
 800b066:	e7f2      	b.n	800b04e <__libc_init_array+0x1e>
 800b068:	0800cf34 	.word	0x0800cf34
 800b06c:	0800cf34 	.word	0x0800cf34
 800b070:	0800cf34 	.word	0x0800cf34
 800b074:	0800cf38 	.word	0x0800cf38

0800b078 <memcpy>:
 800b078:	440a      	add	r2, r1
 800b07a:	4291      	cmp	r1, r2
 800b07c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b080:	d100      	bne.n	800b084 <memcpy+0xc>
 800b082:	4770      	bx	lr
 800b084:	b510      	push	{r4, lr}
 800b086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b08a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b08e:	4291      	cmp	r1, r2
 800b090:	d1f9      	bne.n	800b086 <memcpy+0xe>
 800b092:	bd10      	pop	{r4, pc}

0800b094 <memset>:
 800b094:	4402      	add	r2, r0
 800b096:	4603      	mov	r3, r0
 800b098:	4293      	cmp	r3, r2
 800b09a:	d100      	bne.n	800b09e <memset+0xa>
 800b09c:	4770      	bx	lr
 800b09e:	f803 1b01 	strb.w	r1, [r3], #1
 800b0a2:	e7f9      	b.n	800b098 <memset+0x4>

0800b0a4 <rand>:
 800b0a4:	4b16      	ldr	r3, [pc, #88]	; (800b100 <rand+0x5c>)
 800b0a6:	b510      	push	{r4, lr}
 800b0a8:	681c      	ldr	r4, [r3, #0]
 800b0aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0ac:	b9b3      	cbnz	r3, 800b0dc <rand+0x38>
 800b0ae:	2018      	movs	r0, #24
 800b0b0:	f000 f886 	bl	800b1c0 <malloc>
 800b0b4:	63a0      	str	r0, [r4, #56]	; 0x38
 800b0b6:	b928      	cbnz	r0, 800b0c4 <rand+0x20>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	4b12      	ldr	r3, [pc, #72]	; (800b104 <rand+0x60>)
 800b0bc:	4812      	ldr	r0, [pc, #72]	; (800b108 <rand+0x64>)
 800b0be:	214e      	movs	r1, #78	; 0x4e
 800b0c0:	f000 f84e 	bl	800b160 <__assert_func>
 800b0c4:	4a11      	ldr	r2, [pc, #68]	; (800b10c <rand+0x68>)
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <rand+0x6c>)
 800b0c8:	e9c0 2300 	strd	r2, r3, [r0]
 800b0cc:	4b11      	ldr	r3, [pc, #68]	; (800b114 <rand+0x70>)
 800b0ce:	6083      	str	r3, [r0, #8]
 800b0d0:	230b      	movs	r3, #11
 800b0d2:	8183      	strh	r3, [r0, #12]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b0dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b0de:	4a0e      	ldr	r2, [pc, #56]	; (800b118 <rand+0x74>)
 800b0e0:	6920      	ldr	r0, [r4, #16]
 800b0e2:	6963      	ldr	r3, [r4, #20]
 800b0e4:	490d      	ldr	r1, [pc, #52]	; (800b11c <rand+0x78>)
 800b0e6:	4342      	muls	r2, r0
 800b0e8:	fb01 2203 	mla	r2, r1, r3, r2
 800b0ec:	fba0 0101 	umull	r0, r1, r0, r1
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	eb42 0001 	adc.w	r0, r2, r1
 800b0f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b0fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b0fe:	bd10      	pop	{r4, pc}
 800b100:	20000018 	.word	0x20000018
 800b104:	0800cde8 	.word	0x0800cde8
 800b108:	0800cdff 	.word	0x0800cdff
 800b10c:	abcd330e 	.word	0xabcd330e
 800b110:	e66d1234 	.word	0xe66d1234
 800b114:	0005deec 	.word	0x0005deec
 800b118:	5851f42d 	.word	0x5851f42d
 800b11c:	4c957f2d 	.word	0x4c957f2d

0800b120 <siprintf>:
 800b120:	b40e      	push	{r1, r2, r3}
 800b122:	b500      	push	{lr}
 800b124:	b09c      	sub	sp, #112	; 0x70
 800b126:	ab1d      	add	r3, sp, #116	; 0x74
 800b128:	9002      	str	r0, [sp, #8]
 800b12a:	9006      	str	r0, [sp, #24]
 800b12c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b130:	4809      	ldr	r0, [pc, #36]	; (800b158 <siprintf+0x38>)
 800b132:	9107      	str	r1, [sp, #28]
 800b134:	9104      	str	r1, [sp, #16]
 800b136:	4909      	ldr	r1, [pc, #36]	; (800b15c <siprintf+0x3c>)
 800b138:	f853 2b04 	ldr.w	r2, [r3], #4
 800b13c:	9105      	str	r1, [sp, #20]
 800b13e:	6800      	ldr	r0, [r0, #0]
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	a902      	add	r1, sp, #8
 800b144:	f000 f980 	bl	800b448 <_svfiprintf_r>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
 800b14e:	b01c      	add	sp, #112	; 0x70
 800b150:	f85d eb04 	ldr.w	lr, [sp], #4
 800b154:	b003      	add	sp, #12
 800b156:	4770      	bx	lr
 800b158:	20000018 	.word	0x20000018
 800b15c:	ffff0208 	.word	0xffff0208

0800b160 <__assert_func>:
 800b160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b162:	4614      	mov	r4, r2
 800b164:	461a      	mov	r2, r3
 800b166:	4b09      	ldr	r3, [pc, #36]	; (800b18c <__assert_func+0x2c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4605      	mov	r5, r0
 800b16c:	68d8      	ldr	r0, [r3, #12]
 800b16e:	b14c      	cbz	r4, 800b184 <__assert_func+0x24>
 800b170:	4b07      	ldr	r3, [pc, #28]	; (800b190 <__assert_func+0x30>)
 800b172:	9100      	str	r1, [sp, #0]
 800b174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b178:	4906      	ldr	r1, [pc, #24]	; (800b194 <__assert_func+0x34>)
 800b17a:	462b      	mov	r3, r5
 800b17c:	f000 f80e 	bl	800b19c <fiprintf>
 800b180:	f000 fe20 	bl	800bdc4 <abort>
 800b184:	4b04      	ldr	r3, [pc, #16]	; (800b198 <__assert_func+0x38>)
 800b186:	461c      	mov	r4, r3
 800b188:	e7f3      	b.n	800b172 <__assert_func+0x12>
 800b18a:	bf00      	nop
 800b18c:	20000018 	.word	0x20000018
 800b190:	0800ce5a 	.word	0x0800ce5a
 800b194:	0800ce67 	.word	0x0800ce67
 800b198:	0800ce95 	.word	0x0800ce95

0800b19c <fiprintf>:
 800b19c:	b40e      	push	{r1, r2, r3}
 800b19e:	b503      	push	{r0, r1, lr}
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	ab03      	add	r3, sp, #12
 800b1a4:	4805      	ldr	r0, [pc, #20]	; (800b1bc <fiprintf+0x20>)
 800b1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	f000 fa75 	bl	800b69c <_vfiprintf_r>
 800b1b2:	b002      	add	sp, #8
 800b1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1b8:	b003      	add	sp, #12
 800b1ba:	4770      	bx	lr
 800b1bc:	20000018 	.word	0x20000018

0800b1c0 <malloc>:
 800b1c0:	4b02      	ldr	r3, [pc, #8]	; (800b1cc <malloc+0xc>)
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	f000 b86f 	b.w	800b2a8 <_malloc_r>
 800b1ca:	bf00      	nop
 800b1cc:	20000018 	.word	0x20000018

0800b1d0 <_free_r>:
 800b1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1d2:	2900      	cmp	r1, #0
 800b1d4:	d044      	beq.n	800b260 <_free_r+0x90>
 800b1d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1da:	9001      	str	r0, [sp, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f1a1 0404 	sub.w	r4, r1, #4
 800b1e2:	bfb8      	it	lt
 800b1e4:	18e4      	addlt	r4, r4, r3
 800b1e6:	f001 f82f 	bl	800c248 <__malloc_lock>
 800b1ea:	4a1e      	ldr	r2, [pc, #120]	; (800b264 <_free_r+0x94>)
 800b1ec:	9801      	ldr	r0, [sp, #4]
 800b1ee:	6813      	ldr	r3, [r2, #0]
 800b1f0:	b933      	cbnz	r3, 800b200 <_free_r+0x30>
 800b1f2:	6063      	str	r3, [r4, #4]
 800b1f4:	6014      	str	r4, [r2, #0]
 800b1f6:	b003      	add	sp, #12
 800b1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1fc:	f001 b82a 	b.w	800c254 <__malloc_unlock>
 800b200:	42a3      	cmp	r3, r4
 800b202:	d908      	bls.n	800b216 <_free_r+0x46>
 800b204:	6825      	ldr	r5, [r4, #0]
 800b206:	1961      	adds	r1, r4, r5
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf01      	itttt	eq
 800b20c:	6819      	ldreq	r1, [r3, #0]
 800b20e:	685b      	ldreq	r3, [r3, #4]
 800b210:	1949      	addeq	r1, r1, r5
 800b212:	6021      	streq	r1, [r4, #0]
 800b214:	e7ed      	b.n	800b1f2 <_free_r+0x22>
 800b216:	461a      	mov	r2, r3
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	b10b      	cbz	r3, 800b220 <_free_r+0x50>
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d9fa      	bls.n	800b216 <_free_r+0x46>
 800b220:	6811      	ldr	r1, [r2, #0]
 800b222:	1855      	adds	r5, r2, r1
 800b224:	42a5      	cmp	r5, r4
 800b226:	d10b      	bne.n	800b240 <_free_r+0x70>
 800b228:	6824      	ldr	r4, [r4, #0]
 800b22a:	4421      	add	r1, r4
 800b22c:	1854      	adds	r4, r2, r1
 800b22e:	42a3      	cmp	r3, r4
 800b230:	6011      	str	r1, [r2, #0]
 800b232:	d1e0      	bne.n	800b1f6 <_free_r+0x26>
 800b234:	681c      	ldr	r4, [r3, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	6053      	str	r3, [r2, #4]
 800b23a:	4421      	add	r1, r4
 800b23c:	6011      	str	r1, [r2, #0]
 800b23e:	e7da      	b.n	800b1f6 <_free_r+0x26>
 800b240:	d902      	bls.n	800b248 <_free_r+0x78>
 800b242:	230c      	movs	r3, #12
 800b244:	6003      	str	r3, [r0, #0]
 800b246:	e7d6      	b.n	800b1f6 <_free_r+0x26>
 800b248:	6825      	ldr	r5, [r4, #0]
 800b24a:	1961      	adds	r1, r4, r5
 800b24c:	428b      	cmp	r3, r1
 800b24e:	bf04      	itt	eq
 800b250:	6819      	ldreq	r1, [r3, #0]
 800b252:	685b      	ldreq	r3, [r3, #4]
 800b254:	6063      	str	r3, [r4, #4]
 800b256:	bf04      	itt	eq
 800b258:	1949      	addeq	r1, r1, r5
 800b25a:	6021      	streq	r1, [r4, #0]
 800b25c:	6054      	str	r4, [r2, #4]
 800b25e:	e7ca      	b.n	800b1f6 <_free_r+0x26>
 800b260:	b003      	add	sp, #12
 800b262:	bd30      	pop	{r4, r5, pc}
 800b264:	2000cf4c 	.word	0x2000cf4c

0800b268 <sbrk_aligned>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	4e0e      	ldr	r6, [pc, #56]	; (800b2a4 <sbrk_aligned+0x3c>)
 800b26c:	460c      	mov	r4, r1
 800b26e:	6831      	ldr	r1, [r6, #0]
 800b270:	4605      	mov	r5, r0
 800b272:	b911      	cbnz	r1, 800b27a <sbrk_aligned+0x12>
 800b274:	f000 fcd6 	bl	800bc24 <_sbrk_r>
 800b278:	6030      	str	r0, [r6, #0]
 800b27a:	4621      	mov	r1, r4
 800b27c:	4628      	mov	r0, r5
 800b27e:	f000 fcd1 	bl	800bc24 <_sbrk_r>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	d00a      	beq.n	800b29c <sbrk_aligned+0x34>
 800b286:	1cc4      	adds	r4, r0, #3
 800b288:	f024 0403 	bic.w	r4, r4, #3
 800b28c:	42a0      	cmp	r0, r4
 800b28e:	d007      	beq.n	800b2a0 <sbrk_aligned+0x38>
 800b290:	1a21      	subs	r1, r4, r0
 800b292:	4628      	mov	r0, r5
 800b294:	f000 fcc6 	bl	800bc24 <_sbrk_r>
 800b298:	3001      	adds	r0, #1
 800b29a:	d101      	bne.n	800b2a0 <sbrk_aligned+0x38>
 800b29c:	f04f 34ff 	mov.w	r4, #4294967295
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	2000cf50 	.word	0x2000cf50

0800b2a8 <_malloc_r>:
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	1ccd      	adds	r5, r1, #3
 800b2ae:	f025 0503 	bic.w	r5, r5, #3
 800b2b2:	3508      	adds	r5, #8
 800b2b4:	2d0c      	cmp	r5, #12
 800b2b6:	bf38      	it	cc
 800b2b8:	250c      	movcc	r5, #12
 800b2ba:	2d00      	cmp	r5, #0
 800b2bc:	4607      	mov	r7, r0
 800b2be:	db01      	blt.n	800b2c4 <_malloc_r+0x1c>
 800b2c0:	42a9      	cmp	r1, r5
 800b2c2:	d905      	bls.n	800b2d0 <_malloc_r+0x28>
 800b2c4:	230c      	movs	r3, #12
 800b2c6:	603b      	str	r3, [r7, #0]
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	4e2e      	ldr	r6, [pc, #184]	; (800b38c <_malloc_r+0xe4>)
 800b2d2:	f000 ffb9 	bl	800c248 <__malloc_lock>
 800b2d6:	6833      	ldr	r3, [r6, #0]
 800b2d8:	461c      	mov	r4, r3
 800b2da:	bb34      	cbnz	r4, 800b32a <_malloc_r+0x82>
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7ff ffc2 	bl	800b268 <sbrk_aligned>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	d14d      	bne.n	800b386 <_malloc_r+0xde>
 800b2ea:	6834      	ldr	r4, [r6, #0]
 800b2ec:	4626      	mov	r6, r4
 800b2ee:	2e00      	cmp	r6, #0
 800b2f0:	d140      	bne.n	800b374 <_malloc_r+0xcc>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	eb04 0803 	add.w	r8, r4, r3
 800b2fc:	f000 fc92 	bl	800bc24 <_sbrk_r>
 800b300:	4580      	cmp	r8, r0
 800b302:	d13a      	bne.n	800b37a <_malloc_r+0xd2>
 800b304:	6821      	ldr	r1, [r4, #0]
 800b306:	3503      	adds	r5, #3
 800b308:	1a6d      	subs	r5, r5, r1
 800b30a:	f025 0503 	bic.w	r5, r5, #3
 800b30e:	3508      	adds	r5, #8
 800b310:	2d0c      	cmp	r5, #12
 800b312:	bf38      	it	cc
 800b314:	250c      	movcc	r5, #12
 800b316:	4629      	mov	r1, r5
 800b318:	4638      	mov	r0, r7
 800b31a:	f7ff ffa5 	bl	800b268 <sbrk_aligned>
 800b31e:	3001      	adds	r0, #1
 800b320:	d02b      	beq.n	800b37a <_malloc_r+0xd2>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	442b      	add	r3, r5
 800b326:	6023      	str	r3, [r4, #0]
 800b328:	e00e      	b.n	800b348 <_malloc_r+0xa0>
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	1b52      	subs	r2, r2, r5
 800b32e:	d41e      	bmi.n	800b36e <_malloc_r+0xc6>
 800b330:	2a0b      	cmp	r2, #11
 800b332:	d916      	bls.n	800b362 <_malloc_r+0xba>
 800b334:	1961      	adds	r1, r4, r5
 800b336:	42a3      	cmp	r3, r4
 800b338:	6025      	str	r5, [r4, #0]
 800b33a:	bf18      	it	ne
 800b33c:	6059      	strne	r1, [r3, #4]
 800b33e:	6863      	ldr	r3, [r4, #4]
 800b340:	bf08      	it	eq
 800b342:	6031      	streq	r1, [r6, #0]
 800b344:	5162      	str	r2, [r4, r5]
 800b346:	604b      	str	r3, [r1, #4]
 800b348:	4638      	mov	r0, r7
 800b34a:	f104 060b 	add.w	r6, r4, #11
 800b34e:	f000 ff81 	bl	800c254 <__malloc_unlock>
 800b352:	f026 0607 	bic.w	r6, r6, #7
 800b356:	1d23      	adds	r3, r4, #4
 800b358:	1af2      	subs	r2, r6, r3
 800b35a:	d0b6      	beq.n	800b2ca <_malloc_r+0x22>
 800b35c:	1b9b      	subs	r3, r3, r6
 800b35e:	50a3      	str	r3, [r4, r2]
 800b360:	e7b3      	b.n	800b2ca <_malloc_r+0x22>
 800b362:	6862      	ldr	r2, [r4, #4]
 800b364:	42a3      	cmp	r3, r4
 800b366:	bf0c      	ite	eq
 800b368:	6032      	streq	r2, [r6, #0]
 800b36a:	605a      	strne	r2, [r3, #4]
 800b36c:	e7ec      	b.n	800b348 <_malloc_r+0xa0>
 800b36e:	4623      	mov	r3, r4
 800b370:	6864      	ldr	r4, [r4, #4]
 800b372:	e7b2      	b.n	800b2da <_malloc_r+0x32>
 800b374:	4634      	mov	r4, r6
 800b376:	6876      	ldr	r6, [r6, #4]
 800b378:	e7b9      	b.n	800b2ee <_malloc_r+0x46>
 800b37a:	230c      	movs	r3, #12
 800b37c:	603b      	str	r3, [r7, #0]
 800b37e:	4638      	mov	r0, r7
 800b380:	f000 ff68 	bl	800c254 <__malloc_unlock>
 800b384:	e7a1      	b.n	800b2ca <_malloc_r+0x22>
 800b386:	6025      	str	r5, [r4, #0]
 800b388:	e7de      	b.n	800b348 <_malloc_r+0xa0>
 800b38a:	bf00      	nop
 800b38c:	2000cf4c 	.word	0x2000cf4c

0800b390 <__ssputs_r>:
 800b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	688e      	ldr	r6, [r1, #8]
 800b396:	429e      	cmp	r6, r3
 800b398:	4682      	mov	sl, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	4690      	mov	r8, r2
 800b39e:	461f      	mov	r7, r3
 800b3a0:	d838      	bhi.n	800b414 <__ssputs_r+0x84>
 800b3a2:	898a      	ldrh	r2, [r1, #12]
 800b3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a8:	d032      	beq.n	800b410 <__ssputs_r+0x80>
 800b3aa:	6825      	ldr	r5, [r4, #0]
 800b3ac:	6909      	ldr	r1, [r1, #16]
 800b3ae:	eba5 0901 	sub.w	r9, r5, r1
 800b3b2:	6965      	ldr	r5, [r4, #20]
 800b3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3bc:	3301      	adds	r3, #1
 800b3be:	444b      	add	r3, r9
 800b3c0:	106d      	asrs	r5, r5, #1
 800b3c2:	429d      	cmp	r5, r3
 800b3c4:	bf38      	it	cc
 800b3c6:	461d      	movcc	r5, r3
 800b3c8:	0553      	lsls	r3, r2, #21
 800b3ca:	d531      	bpl.n	800b430 <__ssputs_r+0xa0>
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	f7ff ff6b 	bl	800b2a8 <_malloc_r>
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	b950      	cbnz	r0, 800b3ec <__ssputs_r+0x5c>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	f8ca 3000 	str.w	r3, [sl]
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ec:	6921      	ldr	r1, [r4, #16]
 800b3ee:	464a      	mov	r2, r9
 800b3f0:	f7ff fe42 	bl	800b078 <memcpy>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	6126      	str	r6, [r4, #16]
 800b402:	6165      	str	r5, [r4, #20]
 800b404:	444e      	add	r6, r9
 800b406:	eba5 0509 	sub.w	r5, r5, r9
 800b40a:	6026      	str	r6, [r4, #0]
 800b40c:	60a5      	str	r5, [r4, #8]
 800b40e:	463e      	mov	r6, r7
 800b410:	42be      	cmp	r6, r7
 800b412:	d900      	bls.n	800b416 <__ssputs_r+0x86>
 800b414:	463e      	mov	r6, r7
 800b416:	6820      	ldr	r0, [r4, #0]
 800b418:	4632      	mov	r2, r6
 800b41a:	4641      	mov	r1, r8
 800b41c:	f000 fefa 	bl	800c214 <memmove>
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	1b9b      	subs	r3, r3, r6
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	4433      	add	r3, r6
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7db      	b.n	800b3e8 <__ssputs_r+0x58>
 800b430:	462a      	mov	r2, r5
 800b432:	f000 ff15 	bl	800c260 <_realloc_r>
 800b436:	4606      	mov	r6, r0
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1e1      	bne.n	800b400 <__ssputs_r+0x70>
 800b43c:	6921      	ldr	r1, [r4, #16]
 800b43e:	4650      	mov	r0, sl
 800b440:	f7ff fec6 	bl	800b1d0 <_free_r>
 800b444:	e7c7      	b.n	800b3d6 <__ssputs_r+0x46>
	...

0800b448 <_svfiprintf_r>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4698      	mov	r8, r3
 800b44e:	898b      	ldrh	r3, [r1, #12]
 800b450:	061b      	lsls	r3, r3, #24
 800b452:	b09d      	sub	sp, #116	; 0x74
 800b454:	4607      	mov	r7, r0
 800b456:	460d      	mov	r5, r1
 800b458:	4614      	mov	r4, r2
 800b45a:	d50e      	bpl.n	800b47a <_svfiprintf_r+0x32>
 800b45c:	690b      	ldr	r3, [r1, #16]
 800b45e:	b963      	cbnz	r3, 800b47a <_svfiprintf_r+0x32>
 800b460:	2140      	movs	r1, #64	; 0x40
 800b462:	f7ff ff21 	bl	800b2a8 <_malloc_r>
 800b466:	6028      	str	r0, [r5, #0]
 800b468:	6128      	str	r0, [r5, #16]
 800b46a:	b920      	cbnz	r0, 800b476 <_svfiprintf_r+0x2e>
 800b46c:	230c      	movs	r3, #12
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	f04f 30ff 	mov.w	r0, #4294967295
 800b474:	e0d1      	b.n	800b61a <_svfiprintf_r+0x1d2>
 800b476:	2340      	movs	r3, #64	; 0x40
 800b478:	616b      	str	r3, [r5, #20]
 800b47a:	2300      	movs	r3, #0
 800b47c:	9309      	str	r3, [sp, #36]	; 0x24
 800b47e:	2320      	movs	r3, #32
 800b480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b484:	f8cd 800c 	str.w	r8, [sp, #12]
 800b488:	2330      	movs	r3, #48	; 0x30
 800b48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b634 <_svfiprintf_r+0x1ec>
 800b48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b492:	f04f 0901 	mov.w	r9, #1
 800b496:	4623      	mov	r3, r4
 800b498:	469a      	mov	sl, r3
 800b49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b49e:	b10a      	cbz	r2, 800b4a4 <_svfiprintf_r+0x5c>
 800b4a0:	2a25      	cmp	r2, #37	; 0x25
 800b4a2:	d1f9      	bne.n	800b498 <_svfiprintf_r+0x50>
 800b4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a8:	d00b      	beq.n	800b4c2 <_svfiprintf_r+0x7a>
 800b4aa:	465b      	mov	r3, fp
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7ff ff6d 	bl	800b390 <__ssputs_r>
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	f000 80aa 	beq.w	800b610 <_svfiprintf_r+0x1c8>
 800b4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4be:	445a      	add	r2, fp
 800b4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 80a2 	beq.w	800b610 <_svfiprintf_r+0x1c8>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d6:	f10a 0a01 	add.w	sl, sl, #1
 800b4da:	9304      	str	r3, [sp, #16]
 800b4dc:	9307      	str	r3, [sp, #28]
 800b4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e4:	4654      	mov	r4, sl
 800b4e6:	2205      	movs	r2, #5
 800b4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ec:	4851      	ldr	r0, [pc, #324]	; (800b634 <_svfiprintf_r+0x1ec>)
 800b4ee:	f7f4 fe4f 	bl	8000190 <memchr>
 800b4f2:	9a04      	ldr	r2, [sp, #16]
 800b4f4:	b9d8      	cbnz	r0, 800b52e <_svfiprintf_r+0xe6>
 800b4f6:	06d0      	lsls	r0, r2, #27
 800b4f8:	bf44      	itt	mi
 800b4fa:	2320      	movmi	r3, #32
 800b4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b500:	0711      	lsls	r1, r2, #28
 800b502:	bf44      	itt	mi
 800b504:	232b      	movmi	r3, #43	; 0x2b
 800b506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50a:	f89a 3000 	ldrb.w	r3, [sl]
 800b50e:	2b2a      	cmp	r3, #42	; 0x2a
 800b510:	d015      	beq.n	800b53e <_svfiprintf_r+0xf6>
 800b512:	9a07      	ldr	r2, [sp, #28]
 800b514:	4654      	mov	r4, sl
 800b516:	2000      	movs	r0, #0
 800b518:	f04f 0c0a 	mov.w	ip, #10
 800b51c:	4621      	mov	r1, r4
 800b51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b522:	3b30      	subs	r3, #48	; 0x30
 800b524:	2b09      	cmp	r3, #9
 800b526:	d94e      	bls.n	800b5c6 <_svfiprintf_r+0x17e>
 800b528:	b1b0      	cbz	r0, 800b558 <_svfiprintf_r+0x110>
 800b52a:	9207      	str	r2, [sp, #28]
 800b52c:	e014      	b.n	800b558 <_svfiprintf_r+0x110>
 800b52e:	eba0 0308 	sub.w	r3, r0, r8
 800b532:	fa09 f303 	lsl.w	r3, r9, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	46a2      	mov	sl, r4
 800b53c:	e7d2      	b.n	800b4e4 <_svfiprintf_r+0x9c>
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	1d19      	adds	r1, r3, #4
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	9103      	str	r1, [sp, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	bfbb      	ittet	lt
 800b54a:	425b      	neglt	r3, r3
 800b54c:	f042 0202 	orrlt.w	r2, r2, #2
 800b550:	9307      	strge	r3, [sp, #28]
 800b552:	9307      	strlt	r3, [sp, #28]
 800b554:	bfb8      	it	lt
 800b556:	9204      	strlt	r2, [sp, #16]
 800b558:	7823      	ldrb	r3, [r4, #0]
 800b55a:	2b2e      	cmp	r3, #46	; 0x2e
 800b55c:	d10c      	bne.n	800b578 <_svfiprintf_r+0x130>
 800b55e:	7863      	ldrb	r3, [r4, #1]
 800b560:	2b2a      	cmp	r3, #42	; 0x2a
 800b562:	d135      	bne.n	800b5d0 <_svfiprintf_r+0x188>
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	1d1a      	adds	r2, r3, #4
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	9203      	str	r2, [sp, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	bfb8      	it	lt
 800b570:	f04f 33ff 	movlt.w	r3, #4294967295
 800b574:	3402      	adds	r4, #2
 800b576:	9305      	str	r3, [sp, #20]
 800b578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b644 <_svfiprintf_r+0x1fc>
 800b57c:	7821      	ldrb	r1, [r4, #0]
 800b57e:	2203      	movs	r2, #3
 800b580:	4650      	mov	r0, sl
 800b582:	f7f4 fe05 	bl	8000190 <memchr>
 800b586:	b140      	cbz	r0, 800b59a <_svfiprintf_r+0x152>
 800b588:	2340      	movs	r3, #64	; 0x40
 800b58a:	eba0 000a 	sub.w	r0, r0, sl
 800b58e:	fa03 f000 	lsl.w	r0, r3, r0
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	4303      	orrs	r3, r0
 800b596:	3401      	adds	r4, #1
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59e:	4826      	ldr	r0, [pc, #152]	; (800b638 <_svfiprintf_r+0x1f0>)
 800b5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a4:	2206      	movs	r2, #6
 800b5a6:	f7f4 fdf3 	bl	8000190 <memchr>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d038      	beq.n	800b620 <_svfiprintf_r+0x1d8>
 800b5ae:	4b23      	ldr	r3, [pc, #140]	; (800b63c <_svfiprintf_r+0x1f4>)
 800b5b0:	bb1b      	cbnz	r3, 800b5fa <_svfiprintf_r+0x1b2>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	3307      	adds	r3, #7
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	9303      	str	r3, [sp, #12]
 800b5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c0:	4433      	add	r3, r6
 800b5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c4:	e767      	b.n	800b496 <_svfiprintf_r+0x4e>
 800b5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	e7a5      	b.n	800b51c <_svfiprintf_r+0xd4>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	3401      	adds	r4, #1
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f04f 0c0a 	mov.w	ip, #10
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e2:	3a30      	subs	r2, #48	; 0x30
 800b5e4:	2a09      	cmp	r2, #9
 800b5e6:	d903      	bls.n	800b5f0 <_svfiprintf_r+0x1a8>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0c5      	beq.n	800b578 <_svfiprintf_r+0x130>
 800b5ec:	9105      	str	r1, [sp, #20]
 800b5ee:	e7c3      	b.n	800b578 <_svfiprintf_r+0x130>
 800b5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e7f0      	b.n	800b5dc <_svfiprintf_r+0x194>
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	462a      	mov	r2, r5
 800b600:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <_svfiprintf_r+0x1f8>)
 800b602:	a904      	add	r1, sp, #16
 800b604:	4638      	mov	r0, r7
 800b606:	f3af 8000 	nop.w
 800b60a:	1c42      	adds	r2, r0, #1
 800b60c:	4606      	mov	r6, r0
 800b60e:	d1d6      	bne.n	800b5be <_svfiprintf_r+0x176>
 800b610:	89ab      	ldrh	r3, [r5, #12]
 800b612:	065b      	lsls	r3, r3, #25
 800b614:	f53f af2c 	bmi.w	800b470 <_svfiprintf_r+0x28>
 800b618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61a:	b01d      	add	sp, #116	; 0x74
 800b61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b620:	ab03      	add	r3, sp, #12
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	462a      	mov	r2, r5
 800b626:	4b06      	ldr	r3, [pc, #24]	; (800b640 <_svfiprintf_r+0x1f8>)
 800b628:	a904      	add	r1, sp, #16
 800b62a:	4638      	mov	r0, r7
 800b62c:	f000 f9d4 	bl	800b9d8 <_printf_i>
 800b630:	e7eb      	b.n	800b60a <_svfiprintf_r+0x1c2>
 800b632:	bf00      	nop
 800b634:	0800ce96 	.word	0x0800ce96
 800b638:	0800cea0 	.word	0x0800cea0
 800b63c:	00000000 	.word	0x00000000
 800b640:	0800b391 	.word	0x0800b391
 800b644:	0800ce9c 	.word	0x0800ce9c

0800b648 <__sfputc_r>:
 800b648:	6893      	ldr	r3, [r2, #8]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	b410      	push	{r4}
 800b650:	6093      	str	r3, [r2, #8]
 800b652:	da08      	bge.n	800b666 <__sfputc_r+0x1e>
 800b654:	6994      	ldr	r4, [r2, #24]
 800b656:	42a3      	cmp	r3, r4
 800b658:	db01      	blt.n	800b65e <__sfputc_r+0x16>
 800b65a:	290a      	cmp	r1, #10
 800b65c:	d103      	bne.n	800b666 <__sfputc_r+0x1e>
 800b65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b662:	f000 baef 	b.w	800bc44 <__swbuf_r>
 800b666:	6813      	ldr	r3, [r2, #0]
 800b668:	1c58      	adds	r0, r3, #1
 800b66a:	6010      	str	r0, [r2, #0]
 800b66c:	7019      	strb	r1, [r3, #0]
 800b66e:	4608      	mov	r0, r1
 800b670:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <__sfputs_r>:
 800b676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b678:	4606      	mov	r6, r0
 800b67a:	460f      	mov	r7, r1
 800b67c:	4614      	mov	r4, r2
 800b67e:	18d5      	adds	r5, r2, r3
 800b680:	42ac      	cmp	r4, r5
 800b682:	d101      	bne.n	800b688 <__sfputs_r+0x12>
 800b684:	2000      	movs	r0, #0
 800b686:	e007      	b.n	800b698 <__sfputs_r+0x22>
 800b688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68c:	463a      	mov	r2, r7
 800b68e:	4630      	mov	r0, r6
 800b690:	f7ff ffda 	bl	800b648 <__sfputc_r>
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	d1f3      	bne.n	800b680 <__sfputs_r+0xa>
 800b698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b69c <_vfiprintf_r>:
 800b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	460d      	mov	r5, r1
 800b6a2:	b09d      	sub	sp, #116	; 0x74
 800b6a4:	4614      	mov	r4, r2
 800b6a6:	4698      	mov	r8, r3
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	b118      	cbz	r0, 800b6b4 <_vfiprintf_r+0x18>
 800b6ac:	6983      	ldr	r3, [r0, #24]
 800b6ae:	b90b      	cbnz	r3, 800b6b4 <_vfiprintf_r+0x18>
 800b6b0:	f000 fcaa 	bl	800c008 <__sinit>
 800b6b4:	4b89      	ldr	r3, [pc, #548]	; (800b8dc <_vfiprintf_r+0x240>)
 800b6b6:	429d      	cmp	r5, r3
 800b6b8:	d11b      	bne.n	800b6f2 <_vfiprintf_r+0x56>
 800b6ba:	6875      	ldr	r5, [r6, #4]
 800b6bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6be:	07d9      	lsls	r1, r3, #31
 800b6c0:	d405      	bmi.n	800b6ce <_vfiprintf_r+0x32>
 800b6c2:	89ab      	ldrh	r3, [r5, #12]
 800b6c4:	059a      	lsls	r2, r3, #22
 800b6c6:	d402      	bmi.n	800b6ce <_vfiprintf_r+0x32>
 800b6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ca:	f000 fd3b 	bl	800c144 <__retarget_lock_acquire_recursive>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	071b      	lsls	r3, r3, #28
 800b6d2:	d501      	bpl.n	800b6d8 <_vfiprintf_r+0x3c>
 800b6d4:	692b      	ldr	r3, [r5, #16]
 800b6d6:	b9eb      	cbnz	r3, 800b714 <_vfiprintf_r+0x78>
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f000 fb04 	bl	800bce8 <__swsetup_r>
 800b6e0:	b1c0      	cbz	r0, 800b714 <_vfiprintf_r+0x78>
 800b6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6e4:	07dc      	lsls	r4, r3, #31
 800b6e6:	d50e      	bpl.n	800b706 <_vfiprintf_r+0x6a>
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	b01d      	add	sp, #116	; 0x74
 800b6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f2:	4b7b      	ldr	r3, [pc, #492]	; (800b8e0 <_vfiprintf_r+0x244>)
 800b6f4:	429d      	cmp	r5, r3
 800b6f6:	d101      	bne.n	800b6fc <_vfiprintf_r+0x60>
 800b6f8:	68b5      	ldr	r5, [r6, #8]
 800b6fa:	e7df      	b.n	800b6bc <_vfiprintf_r+0x20>
 800b6fc:	4b79      	ldr	r3, [pc, #484]	; (800b8e4 <_vfiprintf_r+0x248>)
 800b6fe:	429d      	cmp	r5, r3
 800b700:	bf08      	it	eq
 800b702:	68f5      	ldreq	r5, [r6, #12]
 800b704:	e7da      	b.n	800b6bc <_vfiprintf_r+0x20>
 800b706:	89ab      	ldrh	r3, [r5, #12]
 800b708:	0598      	lsls	r0, r3, #22
 800b70a:	d4ed      	bmi.n	800b6e8 <_vfiprintf_r+0x4c>
 800b70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b70e:	f000 fd1a 	bl	800c146 <__retarget_lock_release_recursive>
 800b712:	e7e9      	b.n	800b6e8 <_vfiprintf_r+0x4c>
 800b714:	2300      	movs	r3, #0
 800b716:	9309      	str	r3, [sp, #36]	; 0x24
 800b718:	2320      	movs	r3, #32
 800b71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b722:	2330      	movs	r3, #48	; 0x30
 800b724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8e8 <_vfiprintf_r+0x24c>
 800b728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b72c:	f04f 0901 	mov.w	r9, #1
 800b730:	4623      	mov	r3, r4
 800b732:	469a      	mov	sl, r3
 800b734:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b738:	b10a      	cbz	r2, 800b73e <_vfiprintf_r+0xa2>
 800b73a:	2a25      	cmp	r2, #37	; 0x25
 800b73c:	d1f9      	bne.n	800b732 <_vfiprintf_r+0x96>
 800b73e:	ebba 0b04 	subs.w	fp, sl, r4
 800b742:	d00b      	beq.n	800b75c <_vfiprintf_r+0xc0>
 800b744:	465b      	mov	r3, fp
 800b746:	4622      	mov	r2, r4
 800b748:	4629      	mov	r1, r5
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff ff93 	bl	800b676 <__sfputs_r>
 800b750:	3001      	adds	r0, #1
 800b752:	f000 80aa 	beq.w	800b8aa <_vfiprintf_r+0x20e>
 800b756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b758:	445a      	add	r2, fp
 800b75a:	9209      	str	r2, [sp, #36]	; 0x24
 800b75c:	f89a 3000 	ldrb.w	r3, [sl]
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80a2 	beq.w	800b8aa <_vfiprintf_r+0x20e>
 800b766:	2300      	movs	r3, #0
 800b768:	f04f 32ff 	mov.w	r2, #4294967295
 800b76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b770:	f10a 0a01 	add.w	sl, sl, #1
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	9307      	str	r3, [sp, #28]
 800b778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b77c:	931a      	str	r3, [sp, #104]	; 0x68
 800b77e:	4654      	mov	r4, sl
 800b780:	2205      	movs	r2, #5
 800b782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b786:	4858      	ldr	r0, [pc, #352]	; (800b8e8 <_vfiprintf_r+0x24c>)
 800b788:	f7f4 fd02 	bl	8000190 <memchr>
 800b78c:	9a04      	ldr	r2, [sp, #16]
 800b78e:	b9d8      	cbnz	r0, 800b7c8 <_vfiprintf_r+0x12c>
 800b790:	06d1      	lsls	r1, r2, #27
 800b792:	bf44      	itt	mi
 800b794:	2320      	movmi	r3, #32
 800b796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b79a:	0713      	lsls	r3, r2, #28
 800b79c:	bf44      	itt	mi
 800b79e:	232b      	movmi	r3, #43	; 0x2b
 800b7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7aa:	d015      	beq.n	800b7d8 <_vfiprintf_r+0x13c>
 800b7ac:	9a07      	ldr	r2, [sp, #28]
 800b7ae:	4654      	mov	r4, sl
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	f04f 0c0a 	mov.w	ip, #10
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7bc:	3b30      	subs	r3, #48	; 0x30
 800b7be:	2b09      	cmp	r3, #9
 800b7c0:	d94e      	bls.n	800b860 <_vfiprintf_r+0x1c4>
 800b7c2:	b1b0      	cbz	r0, 800b7f2 <_vfiprintf_r+0x156>
 800b7c4:	9207      	str	r2, [sp, #28]
 800b7c6:	e014      	b.n	800b7f2 <_vfiprintf_r+0x156>
 800b7c8:	eba0 0308 	sub.w	r3, r0, r8
 800b7cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	46a2      	mov	sl, r4
 800b7d6:	e7d2      	b.n	800b77e <_vfiprintf_r+0xe2>
 800b7d8:	9b03      	ldr	r3, [sp, #12]
 800b7da:	1d19      	adds	r1, r3, #4
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	9103      	str	r1, [sp, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	bfbb      	ittet	lt
 800b7e4:	425b      	neglt	r3, r3
 800b7e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ea:	9307      	strge	r3, [sp, #28]
 800b7ec:	9307      	strlt	r3, [sp, #28]
 800b7ee:	bfb8      	it	lt
 800b7f0:	9204      	strlt	r2, [sp, #16]
 800b7f2:	7823      	ldrb	r3, [r4, #0]
 800b7f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b7f6:	d10c      	bne.n	800b812 <_vfiprintf_r+0x176>
 800b7f8:	7863      	ldrb	r3, [r4, #1]
 800b7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fc:	d135      	bne.n	800b86a <_vfiprintf_r+0x1ce>
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	9203      	str	r2, [sp, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	bfb8      	it	lt
 800b80a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b80e:	3402      	adds	r4, #2
 800b810:	9305      	str	r3, [sp, #20]
 800b812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8f8 <_vfiprintf_r+0x25c>
 800b816:	7821      	ldrb	r1, [r4, #0]
 800b818:	2203      	movs	r2, #3
 800b81a:	4650      	mov	r0, sl
 800b81c:	f7f4 fcb8 	bl	8000190 <memchr>
 800b820:	b140      	cbz	r0, 800b834 <_vfiprintf_r+0x198>
 800b822:	2340      	movs	r3, #64	; 0x40
 800b824:	eba0 000a 	sub.w	r0, r0, sl
 800b828:	fa03 f000 	lsl.w	r0, r3, r0
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	4303      	orrs	r3, r0
 800b830:	3401      	adds	r4, #1
 800b832:	9304      	str	r3, [sp, #16]
 800b834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b838:	482c      	ldr	r0, [pc, #176]	; (800b8ec <_vfiprintf_r+0x250>)
 800b83a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b83e:	2206      	movs	r2, #6
 800b840:	f7f4 fca6 	bl	8000190 <memchr>
 800b844:	2800      	cmp	r0, #0
 800b846:	d03f      	beq.n	800b8c8 <_vfiprintf_r+0x22c>
 800b848:	4b29      	ldr	r3, [pc, #164]	; (800b8f0 <_vfiprintf_r+0x254>)
 800b84a:	bb1b      	cbnz	r3, 800b894 <_vfiprintf_r+0x1f8>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	3307      	adds	r3, #7
 800b850:	f023 0307 	bic.w	r3, r3, #7
 800b854:	3308      	adds	r3, #8
 800b856:	9303      	str	r3, [sp, #12]
 800b858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85a:	443b      	add	r3, r7
 800b85c:	9309      	str	r3, [sp, #36]	; 0x24
 800b85e:	e767      	b.n	800b730 <_vfiprintf_r+0x94>
 800b860:	fb0c 3202 	mla	r2, ip, r2, r3
 800b864:	460c      	mov	r4, r1
 800b866:	2001      	movs	r0, #1
 800b868:	e7a5      	b.n	800b7b6 <_vfiprintf_r+0x11a>
 800b86a:	2300      	movs	r3, #0
 800b86c:	3401      	adds	r4, #1
 800b86e:	9305      	str	r3, [sp, #20]
 800b870:	4619      	mov	r1, r3
 800b872:	f04f 0c0a 	mov.w	ip, #10
 800b876:	4620      	mov	r0, r4
 800b878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b87c:	3a30      	subs	r2, #48	; 0x30
 800b87e:	2a09      	cmp	r2, #9
 800b880:	d903      	bls.n	800b88a <_vfiprintf_r+0x1ee>
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0c5      	beq.n	800b812 <_vfiprintf_r+0x176>
 800b886:	9105      	str	r1, [sp, #20]
 800b888:	e7c3      	b.n	800b812 <_vfiprintf_r+0x176>
 800b88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b88e:	4604      	mov	r4, r0
 800b890:	2301      	movs	r3, #1
 800b892:	e7f0      	b.n	800b876 <_vfiprintf_r+0x1da>
 800b894:	ab03      	add	r3, sp, #12
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	462a      	mov	r2, r5
 800b89a:	4b16      	ldr	r3, [pc, #88]	; (800b8f4 <_vfiprintf_r+0x258>)
 800b89c:	a904      	add	r1, sp, #16
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f3af 8000 	nop.w
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	1c78      	adds	r0, r7, #1
 800b8a8:	d1d6      	bne.n	800b858 <_vfiprintf_r+0x1bc>
 800b8aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ac:	07d9      	lsls	r1, r3, #31
 800b8ae:	d405      	bmi.n	800b8bc <_vfiprintf_r+0x220>
 800b8b0:	89ab      	ldrh	r3, [r5, #12]
 800b8b2:	059a      	lsls	r2, r3, #22
 800b8b4:	d402      	bmi.n	800b8bc <_vfiprintf_r+0x220>
 800b8b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8b8:	f000 fc45 	bl	800c146 <__retarget_lock_release_recursive>
 800b8bc:	89ab      	ldrh	r3, [r5, #12]
 800b8be:	065b      	lsls	r3, r3, #25
 800b8c0:	f53f af12 	bmi.w	800b6e8 <_vfiprintf_r+0x4c>
 800b8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8c6:	e711      	b.n	800b6ec <_vfiprintf_r+0x50>
 800b8c8:	ab03      	add	r3, sp, #12
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <_vfiprintf_r+0x258>)
 800b8d0:	a904      	add	r1, sp, #16
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f000 f880 	bl	800b9d8 <_printf_i>
 800b8d8:	e7e4      	b.n	800b8a4 <_vfiprintf_r+0x208>
 800b8da:	bf00      	nop
 800b8dc:	0800ceec 	.word	0x0800ceec
 800b8e0:	0800cf0c 	.word	0x0800cf0c
 800b8e4:	0800cecc 	.word	0x0800cecc
 800b8e8:	0800ce96 	.word	0x0800ce96
 800b8ec:	0800cea0 	.word	0x0800cea0
 800b8f0:	00000000 	.word	0x00000000
 800b8f4:	0800b677 	.word	0x0800b677
 800b8f8:	0800ce9c 	.word	0x0800ce9c

0800b8fc <_printf_common>:
 800b8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b900:	4616      	mov	r6, r2
 800b902:	4699      	mov	r9, r3
 800b904:	688a      	ldr	r2, [r1, #8]
 800b906:	690b      	ldr	r3, [r1, #16]
 800b908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	bfb8      	it	lt
 800b910:	4613      	movlt	r3, r2
 800b912:	6033      	str	r3, [r6, #0]
 800b914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b918:	4607      	mov	r7, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	b10a      	cbz	r2, 800b922 <_printf_common+0x26>
 800b91e:	3301      	adds	r3, #1
 800b920:	6033      	str	r3, [r6, #0]
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	0699      	lsls	r1, r3, #26
 800b926:	bf42      	ittt	mi
 800b928:	6833      	ldrmi	r3, [r6, #0]
 800b92a:	3302      	addmi	r3, #2
 800b92c:	6033      	strmi	r3, [r6, #0]
 800b92e:	6825      	ldr	r5, [r4, #0]
 800b930:	f015 0506 	ands.w	r5, r5, #6
 800b934:	d106      	bne.n	800b944 <_printf_common+0x48>
 800b936:	f104 0a19 	add.w	sl, r4, #25
 800b93a:	68e3      	ldr	r3, [r4, #12]
 800b93c:	6832      	ldr	r2, [r6, #0]
 800b93e:	1a9b      	subs	r3, r3, r2
 800b940:	42ab      	cmp	r3, r5
 800b942:	dc26      	bgt.n	800b992 <_printf_common+0x96>
 800b944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b948:	1e13      	subs	r3, r2, #0
 800b94a:	6822      	ldr	r2, [r4, #0]
 800b94c:	bf18      	it	ne
 800b94e:	2301      	movne	r3, #1
 800b950:	0692      	lsls	r2, r2, #26
 800b952:	d42b      	bmi.n	800b9ac <_printf_common+0xb0>
 800b954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b958:	4649      	mov	r1, r9
 800b95a:	4638      	mov	r0, r7
 800b95c:	47c0      	blx	r8
 800b95e:	3001      	adds	r0, #1
 800b960:	d01e      	beq.n	800b9a0 <_printf_common+0xa4>
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	68e5      	ldr	r5, [r4, #12]
 800b966:	6832      	ldr	r2, [r6, #0]
 800b968:	f003 0306 	and.w	r3, r3, #6
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	bf08      	it	eq
 800b970:	1aad      	subeq	r5, r5, r2
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	6922      	ldr	r2, [r4, #16]
 800b976:	bf0c      	ite	eq
 800b978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b97c:	2500      	movne	r5, #0
 800b97e:	4293      	cmp	r3, r2
 800b980:	bfc4      	itt	gt
 800b982:	1a9b      	subgt	r3, r3, r2
 800b984:	18ed      	addgt	r5, r5, r3
 800b986:	2600      	movs	r6, #0
 800b988:	341a      	adds	r4, #26
 800b98a:	42b5      	cmp	r5, r6
 800b98c:	d11a      	bne.n	800b9c4 <_printf_common+0xc8>
 800b98e:	2000      	movs	r0, #0
 800b990:	e008      	b.n	800b9a4 <_printf_common+0xa8>
 800b992:	2301      	movs	r3, #1
 800b994:	4652      	mov	r2, sl
 800b996:	4649      	mov	r1, r9
 800b998:	4638      	mov	r0, r7
 800b99a:	47c0      	blx	r8
 800b99c:	3001      	adds	r0, #1
 800b99e:	d103      	bne.n	800b9a8 <_printf_common+0xac>
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	e7c6      	b.n	800b93a <_printf_common+0x3e>
 800b9ac:	18e1      	adds	r1, r4, r3
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	2030      	movs	r0, #48	; 0x30
 800b9b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9b6:	4422      	add	r2, r4
 800b9b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9c0:	3302      	adds	r3, #2
 800b9c2:	e7c7      	b.n	800b954 <_printf_common+0x58>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	4622      	mov	r2, r4
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	47c0      	blx	r8
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	d0e6      	beq.n	800b9a0 <_printf_common+0xa4>
 800b9d2:	3601      	adds	r6, #1
 800b9d4:	e7d9      	b.n	800b98a <_printf_common+0x8e>
	...

0800b9d8 <_printf_i>:
 800b9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9dc:	7e0f      	ldrb	r7, [r1, #24]
 800b9de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9e0:	2f78      	cmp	r7, #120	; 0x78
 800b9e2:	4691      	mov	r9, r2
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	469a      	mov	sl, r3
 800b9ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9ee:	d807      	bhi.n	800ba00 <_printf_i+0x28>
 800b9f0:	2f62      	cmp	r7, #98	; 0x62
 800b9f2:	d80a      	bhi.n	800ba0a <_printf_i+0x32>
 800b9f4:	2f00      	cmp	r7, #0
 800b9f6:	f000 80d8 	beq.w	800bbaa <_printf_i+0x1d2>
 800b9fa:	2f58      	cmp	r7, #88	; 0x58
 800b9fc:	f000 80a3 	beq.w	800bb46 <_printf_i+0x16e>
 800ba00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba08:	e03a      	b.n	800ba80 <_printf_i+0xa8>
 800ba0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba0e:	2b15      	cmp	r3, #21
 800ba10:	d8f6      	bhi.n	800ba00 <_printf_i+0x28>
 800ba12:	a101      	add	r1, pc, #4	; (adr r1, 800ba18 <_printf_i+0x40>)
 800ba14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba18:	0800ba71 	.word	0x0800ba71
 800ba1c:	0800ba85 	.word	0x0800ba85
 800ba20:	0800ba01 	.word	0x0800ba01
 800ba24:	0800ba01 	.word	0x0800ba01
 800ba28:	0800ba01 	.word	0x0800ba01
 800ba2c:	0800ba01 	.word	0x0800ba01
 800ba30:	0800ba85 	.word	0x0800ba85
 800ba34:	0800ba01 	.word	0x0800ba01
 800ba38:	0800ba01 	.word	0x0800ba01
 800ba3c:	0800ba01 	.word	0x0800ba01
 800ba40:	0800ba01 	.word	0x0800ba01
 800ba44:	0800bb91 	.word	0x0800bb91
 800ba48:	0800bab5 	.word	0x0800bab5
 800ba4c:	0800bb73 	.word	0x0800bb73
 800ba50:	0800ba01 	.word	0x0800ba01
 800ba54:	0800ba01 	.word	0x0800ba01
 800ba58:	0800bbb3 	.word	0x0800bbb3
 800ba5c:	0800ba01 	.word	0x0800ba01
 800ba60:	0800bab5 	.word	0x0800bab5
 800ba64:	0800ba01 	.word	0x0800ba01
 800ba68:	0800ba01 	.word	0x0800ba01
 800ba6c:	0800bb7b 	.word	0x0800bb7b
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	1d1a      	adds	r2, r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	602a      	str	r2, [r5, #0]
 800ba78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba80:	2301      	movs	r3, #1
 800ba82:	e0a3      	b.n	800bbcc <_printf_i+0x1f4>
 800ba84:	6820      	ldr	r0, [r4, #0]
 800ba86:	6829      	ldr	r1, [r5, #0]
 800ba88:	0606      	lsls	r6, r0, #24
 800ba8a:	f101 0304 	add.w	r3, r1, #4
 800ba8e:	d50a      	bpl.n	800baa6 <_printf_i+0xce>
 800ba90:	680e      	ldr	r6, [r1, #0]
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	da03      	bge.n	800baa0 <_printf_i+0xc8>
 800ba98:	232d      	movs	r3, #45	; 0x2d
 800ba9a:	4276      	negs	r6, r6
 800ba9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa0:	485e      	ldr	r0, [pc, #376]	; (800bc1c <_printf_i+0x244>)
 800baa2:	230a      	movs	r3, #10
 800baa4:	e019      	b.n	800bada <_printf_i+0x102>
 800baa6:	680e      	ldr	r6, [r1, #0]
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800baae:	bf18      	it	ne
 800bab0:	b236      	sxthne	r6, r6
 800bab2:	e7ef      	b.n	800ba94 <_printf_i+0xbc>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	6820      	ldr	r0, [r4, #0]
 800bab8:	1d19      	adds	r1, r3, #4
 800baba:	6029      	str	r1, [r5, #0]
 800babc:	0601      	lsls	r1, r0, #24
 800babe:	d501      	bpl.n	800bac4 <_printf_i+0xec>
 800bac0:	681e      	ldr	r6, [r3, #0]
 800bac2:	e002      	b.n	800baca <_printf_i+0xf2>
 800bac4:	0646      	lsls	r6, r0, #25
 800bac6:	d5fb      	bpl.n	800bac0 <_printf_i+0xe8>
 800bac8:	881e      	ldrh	r6, [r3, #0]
 800baca:	4854      	ldr	r0, [pc, #336]	; (800bc1c <_printf_i+0x244>)
 800bacc:	2f6f      	cmp	r7, #111	; 0x6f
 800bace:	bf0c      	ite	eq
 800bad0:	2308      	moveq	r3, #8
 800bad2:	230a      	movne	r3, #10
 800bad4:	2100      	movs	r1, #0
 800bad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bada:	6865      	ldr	r5, [r4, #4]
 800badc:	60a5      	str	r5, [r4, #8]
 800bade:	2d00      	cmp	r5, #0
 800bae0:	bfa2      	ittt	ge
 800bae2:	6821      	ldrge	r1, [r4, #0]
 800bae4:	f021 0104 	bicge.w	r1, r1, #4
 800bae8:	6021      	strge	r1, [r4, #0]
 800baea:	b90e      	cbnz	r6, 800baf0 <_printf_i+0x118>
 800baec:	2d00      	cmp	r5, #0
 800baee:	d04d      	beq.n	800bb8c <_printf_i+0x1b4>
 800baf0:	4615      	mov	r5, r2
 800baf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800baf6:	fb03 6711 	mls	r7, r3, r1, r6
 800bafa:	5dc7      	ldrb	r7, [r0, r7]
 800bafc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb00:	4637      	mov	r7, r6
 800bb02:	42bb      	cmp	r3, r7
 800bb04:	460e      	mov	r6, r1
 800bb06:	d9f4      	bls.n	800baf2 <_printf_i+0x11a>
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	d10b      	bne.n	800bb24 <_printf_i+0x14c>
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	07de      	lsls	r6, r3, #31
 800bb10:	d508      	bpl.n	800bb24 <_printf_i+0x14c>
 800bb12:	6923      	ldr	r3, [r4, #16]
 800bb14:	6861      	ldr	r1, [r4, #4]
 800bb16:	4299      	cmp	r1, r3
 800bb18:	bfde      	ittt	le
 800bb1a:	2330      	movle	r3, #48	; 0x30
 800bb1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb24:	1b52      	subs	r2, r2, r5
 800bb26:	6122      	str	r2, [r4, #16]
 800bb28:	f8cd a000 	str.w	sl, [sp]
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	aa03      	add	r2, sp, #12
 800bb30:	4621      	mov	r1, r4
 800bb32:	4640      	mov	r0, r8
 800bb34:	f7ff fee2 	bl	800b8fc <_printf_common>
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d14c      	bne.n	800bbd6 <_printf_i+0x1fe>
 800bb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb40:	b004      	add	sp, #16
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	4835      	ldr	r0, [pc, #212]	; (800bc1c <_printf_i+0x244>)
 800bb48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb4c:	6829      	ldr	r1, [r5, #0]
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb54:	6029      	str	r1, [r5, #0]
 800bb56:	061d      	lsls	r5, r3, #24
 800bb58:	d514      	bpl.n	800bb84 <_printf_i+0x1ac>
 800bb5a:	07df      	lsls	r7, r3, #31
 800bb5c:	bf44      	itt	mi
 800bb5e:	f043 0320 	orrmi.w	r3, r3, #32
 800bb62:	6023      	strmi	r3, [r4, #0]
 800bb64:	b91e      	cbnz	r6, 800bb6e <_printf_i+0x196>
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	f023 0320 	bic.w	r3, r3, #32
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	2310      	movs	r3, #16
 800bb70:	e7b0      	b.n	800bad4 <_printf_i+0xfc>
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	f043 0320 	orr.w	r3, r3, #32
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	2378      	movs	r3, #120	; 0x78
 800bb7c:	4828      	ldr	r0, [pc, #160]	; (800bc20 <_printf_i+0x248>)
 800bb7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb82:	e7e3      	b.n	800bb4c <_printf_i+0x174>
 800bb84:	0659      	lsls	r1, r3, #25
 800bb86:	bf48      	it	mi
 800bb88:	b2b6      	uxthmi	r6, r6
 800bb8a:	e7e6      	b.n	800bb5a <_printf_i+0x182>
 800bb8c:	4615      	mov	r5, r2
 800bb8e:	e7bb      	b.n	800bb08 <_printf_i+0x130>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	6826      	ldr	r6, [r4, #0]
 800bb94:	6961      	ldr	r1, [r4, #20]
 800bb96:	1d18      	adds	r0, r3, #4
 800bb98:	6028      	str	r0, [r5, #0]
 800bb9a:	0635      	lsls	r5, r6, #24
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	d501      	bpl.n	800bba4 <_printf_i+0x1cc>
 800bba0:	6019      	str	r1, [r3, #0]
 800bba2:	e002      	b.n	800bbaa <_printf_i+0x1d2>
 800bba4:	0670      	lsls	r0, r6, #25
 800bba6:	d5fb      	bpl.n	800bba0 <_printf_i+0x1c8>
 800bba8:	8019      	strh	r1, [r3, #0]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	6123      	str	r3, [r4, #16]
 800bbae:	4615      	mov	r5, r2
 800bbb0:	e7ba      	b.n	800bb28 <_printf_i+0x150>
 800bbb2:	682b      	ldr	r3, [r5, #0]
 800bbb4:	1d1a      	adds	r2, r3, #4
 800bbb6:	602a      	str	r2, [r5, #0]
 800bbb8:	681d      	ldr	r5, [r3, #0]
 800bbba:	6862      	ldr	r2, [r4, #4]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f7f4 fae6 	bl	8000190 <memchr>
 800bbc4:	b108      	cbz	r0, 800bbca <_printf_i+0x1f2>
 800bbc6:	1b40      	subs	r0, r0, r5
 800bbc8:	6060      	str	r0, [r4, #4]
 800bbca:	6863      	ldr	r3, [r4, #4]
 800bbcc:	6123      	str	r3, [r4, #16]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd4:	e7a8      	b.n	800bb28 <_printf_i+0x150>
 800bbd6:	6923      	ldr	r3, [r4, #16]
 800bbd8:	462a      	mov	r2, r5
 800bbda:	4649      	mov	r1, r9
 800bbdc:	4640      	mov	r0, r8
 800bbde:	47d0      	blx	sl
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d0ab      	beq.n	800bb3c <_printf_i+0x164>
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	079b      	lsls	r3, r3, #30
 800bbe8:	d413      	bmi.n	800bc12 <_printf_i+0x23a>
 800bbea:	68e0      	ldr	r0, [r4, #12]
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	4298      	cmp	r0, r3
 800bbf0:	bfb8      	it	lt
 800bbf2:	4618      	movlt	r0, r3
 800bbf4:	e7a4      	b.n	800bb40 <_printf_i+0x168>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	4632      	mov	r2, r6
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	47d0      	blx	sl
 800bc00:	3001      	adds	r0, #1
 800bc02:	d09b      	beq.n	800bb3c <_printf_i+0x164>
 800bc04:	3501      	adds	r5, #1
 800bc06:	68e3      	ldr	r3, [r4, #12]
 800bc08:	9903      	ldr	r1, [sp, #12]
 800bc0a:	1a5b      	subs	r3, r3, r1
 800bc0c:	42ab      	cmp	r3, r5
 800bc0e:	dcf2      	bgt.n	800bbf6 <_printf_i+0x21e>
 800bc10:	e7eb      	b.n	800bbea <_printf_i+0x212>
 800bc12:	2500      	movs	r5, #0
 800bc14:	f104 0619 	add.w	r6, r4, #25
 800bc18:	e7f5      	b.n	800bc06 <_printf_i+0x22e>
 800bc1a:	bf00      	nop
 800bc1c:	0800cea7 	.word	0x0800cea7
 800bc20:	0800ceb8 	.word	0x0800ceb8

0800bc24 <_sbrk_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d06      	ldr	r5, [pc, #24]	; (800bc40 <_sbrk_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f9 fe3c 	bl	80058ac <_sbrk>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_sbrk_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_sbrk_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	2000cf58 	.word	0x2000cf58

0800bc44 <__swbuf_r>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	460e      	mov	r6, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	b118      	cbz	r0, 800bc56 <__swbuf_r+0x12>
 800bc4e:	6983      	ldr	r3, [r0, #24]
 800bc50:	b90b      	cbnz	r3, 800bc56 <__swbuf_r+0x12>
 800bc52:	f000 f9d9 	bl	800c008 <__sinit>
 800bc56:	4b21      	ldr	r3, [pc, #132]	; (800bcdc <__swbuf_r+0x98>)
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	d12b      	bne.n	800bcb4 <__swbuf_r+0x70>
 800bc5c:	686c      	ldr	r4, [r5, #4]
 800bc5e:	69a3      	ldr	r3, [r4, #24]
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	071a      	lsls	r2, r3, #28
 800bc66:	d52f      	bpl.n	800bcc8 <__swbuf_r+0x84>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	b36b      	cbz	r3, 800bcc8 <__swbuf_r+0x84>
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	6820      	ldr	r0, [r4, #0]
 800bc70:	1ac0      	subs	r0, r0, r3
 800bc72:	6963      	ldr	r3, [r4, #20]
 800bc74:	b2f6      	uxtb	r6, r6
 800bc76:	4283      	cmp	r3, r0
 800bc78:	4637      	mov	r7, r6
 800bc7a:	dc04      	bgt.n	800bc86 <__swbuf_r+0x42>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f92e 	bl	800bee0 <_fflush_r>
 800bc84:	bb30      	cbnz	r0, 800bcd4 <__swbuf_r+0x90>
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	701e      	strb	r6, [r3, #0]
 800bc94:	6963      	ldr	r3, [r4, #20]
 800bc96:	3001      	adds	r0, #1
 800bc98:	4283      	cmp	r3, r0
 800bc9a:	d004      	beq.n	800bca6 <__swbuf_r+0x62>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	07db      	lsls	r3, r3, #31
 800bca0:	d506      	bpl.n	800bcb0 <__swbuf_r+0x6c>
 800bca2:	2e0a      	cmp	r6, #10
 800bca4:	d104      	bne.n	800bcb0 <__swbuf_r+0x6c>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f919 	bl	800bee0 <_fflush_r>
 800bcae:	b988      	cbnz	r0, 800bcd4 <__swbuf_r+0x90>
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <__swbuf_r+0x9c>)
 800bcb6:	429c      	cmp	r4, r3
 800bcb8:	d101      	bne.n	800bcbe <__swbuf_r+0x7a>
 800bcba:	68ac      	ldr	r4, [r5, #8]
 800bcbc:	e7cf      	b.n	800bc5e <__swbuf_r+0x1a>
 800bcbe:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <__swbuf_r+0xa0>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	bf08      	it	eq
 800bcc4:	68ec      	ldreq	r4, [r5, #12]
 800bcc6:	e7ca      	b.n	800bc5e <__swbuf_r+0x1a>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f80c 	bl	800bce8 <__swsetup_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0cb      	beq.n	800bc6c <__swbuf_r+0x28>
 800bcd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bcd8:	e7ea      	b.n	800bcb0 <__swbuf_r+0x6c>
 800bcda:	bf00      	nop
 800bcdc:	0800ceec 	.word	0x0800ceec
 800bce0:	0800cf0c 	.word	0x0800cf0c
 800bce4:	0800cecc 	.word	0x0800cecc

0800bce8 <__swsetup_r>:
 800bce8:	4b32      	ldr	r3, [pc, #200]	; (800bdb4 <__swsetup_r+0xcc>)
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	4606      	mov	r6, r0
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	b125      	cbz	r5, 800bcfe <__swsetup_r+0x16>
 800bcf4:	69ab      	ldr	r3, [r5, #24]
 800bcf6:	b913      	cbnz	r3, 800bcfe <__swsetup_r+0x16>
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f000 f985 	bl	800c008 <__sinit>
 800bcfe:	4b2e      	ldr	r3, [pc, #184]	; (800bdb8 <__swsetup_r+0xd0>)
 800bd00:	429c      	cmp	r4, r3
 800bd02:	d10f      	bne.n	800bd24 <__swsetup_r+0x3c>
 800bd04:	686c      	ldr	r4, [r5, #4]
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd0c:	0719      	lsls	r1, r3, #28
 800bd0e:	d42c      	bmi.n	800bd6a <__swsetup_r+0x82>
 800bd10:	06dd      	lsls	r5, r3, #27
 800bd12:	d411      	bmi.n	800bd38 <__swsetup_r+0x50>
 800bd14:	2309      	movs	r3, #9
 800bd16:	6033      	str	r3, [r6, #0]
 800bd18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd1c:	81a3      	strh	r3, [r4, #12]
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	e03e      	b.n	800bda2 <__swsetup_r+0xba>
 800bd24:	4b25      	ldr	r3, [pc, #148]	; (800bdbc <__swsetup_r+0xd4>)
 800bd26:	429c      	cmp	r4, r3
 800bd28:	d101      	bne.n	800bd2e <__swsetup_r+0x46>
 800bd2a:	68ac      	ldr	r4, [r5, #8]
 800bd2c:	e7eb      	b.n	800bd06 <__swsetup_r+0x1e>
 800bd2e:	4b24      	ldr	r3, [pc, #144]	; (800bdc0 <__swsetup_r+0xd8>)
 800bd30:	429c      	cmp	r4, r3
 800bd32:	bf08      	it	eq
 800bd34:	68ec      	ldreq	r4, [r5, #12]
 800bd36:	e7e6      	b.n	800bd06 <__swsetup_r+0x1e>
 800bd38:	0758      	lsls	r0, r3, #29
 800bd3a:	d512      	bpl.n	800bd62 <__swsetup_r+0x7a>
 800bd3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd3e:	b141      	cbz	r1, 800bd52 <__swsetup_r+0x6a>
 800bd40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d002      	beq.n	800bd4e <__swsetup_r+0x66>
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff fa41 	bl	800b1d0 <_free_r>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	6363      	str	r3, [r4, #52]	; 0x34
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0308 	orr.w	r3, r3, #8
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	b94b      	cbnz	r3, 800bd82 <__swsetup_r+0x9a>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd78:	d003      	beq.n	800bd82 <__swsetup_r+0x9a>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 fa09 	bl	800c194 <__smakebuf_r>
 800bd82:	89a0      	ldrh	r0, [r4, #12]
 800bd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd88:	f010 0301 	ands.w	r3, r0, #1
 800bd8c:	d00a      	beq.n	800bda4 <__swsetup_r+0xbc>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60a3      	str	r3, [r4, #8]
 800bd92:	6963      	ldr	r3, [r4, #20]
 800bd94:	425b      	negs	r3, r3
 800bd96:	61a3      	str	r3, [r4, #24]
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	b943      	cbnz	r3, 800bdae <__swsetup_r+0xc6>
 800bd9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bda0:	d1ba      	bne.n	800bd18 <__swsetup_r+0x30>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	0781      	lsls	r1, r0, #30
 800bda6:	bf58      	it	pl
 800bda8:	6963      	ldrpl	r3, [r4, #20]
 800bdaa:	60a3      	str	r3, [r4, #8]
 800bdac:	e7f4      	b.n	800bd98 <__swsetup_r+0xb0>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	e7f7      	b.n	800bda2 <__swsetup_r+0xba>
 800bdb2:	bf00      	nop
 800bdb4:	20000018 	.word	0x20000018
 800bdb8:	0800ceec 	.word	0x0800ceec
 800bdbc:	0800cf0c 	.word	0x0800cf0c
 800bdc0:	0800cecc 	.word	0x0800cecc

0800bdc4 <abort>:
 800bdc4:	b508      	push	{r3, lr}
 800bdc6:	2006      	movs	r0, #6
 800bdc8:	f000 faa2 	bl	800c310 <raise>
 800bdcc:	2001      	movs	r0, #1
 800bdce:	f7f9 fcf5 	bl	80057bc <_exit>
	...

0800bdd4 <__sflush_r>:
 800bdd4:	898a      	ldrh	r2, [r1, #12]
 800bdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdda:	4605      	mov	r5, r0
 800bddc:	0710      	lsls	r0, r2, #28
 800bdde:	460c      	mov	r4, r1
 800bde0:	d458      	bmi.n	800be94 <__sflush_r+0xc0>
 800bde2:	684b      	ldr	r3, [r1, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dc05      	bgt.n	800bdf4 <__sflush_r+0x20>
 800bde8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	dc02      	bgt.n	800bdf4 <__sflush_r+0x20>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdf6:	2e00      	cmp	r6, #0
 800bdf8:	d0f9      	beq.n	800bdee <__sflush_r+0x1a>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be00:	682f      	ldr	r7, [r5, #0]
 800be02:	602b      	str	r3, [r5, #0]
 800be04:	d032      	beq.n	800be6c <__sflush_r+0x98>
 800be06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	075a      	lsls	r2, r3, #29
 800be0c:	d505      	bpl.n	800be1a <__sflush_r+0x46>
 800be0e:	6863      	ldr	r3, [r4, #4]
 800be10:	1ac0      	subs	r0, r0, r3
 800be12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be14:	b10b      	cbz	r3, 800be1a <__sflush_r+0x46>
 800be16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be18:	1ac0      	subs	r0, r0, r3
 800be1a:	2300      	movs	r3, #0
 800be1c:	4602      	mov	r2, r0
 800be1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be20:	6a21      	ldr	r1, [r4, #32]
 800be22:	4628      	mov	r0, r5
 800be24:	47b0      	blx	r6
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	d106      	bne.n	800be3a <__sflush_r+0x66>
 800be2c:	6829      	ldr	r1, [r5, #0]
 800be2e:	291d      	cmp	r1, #29
 800be30:	d82c      	bhi.n	800be8c <__sflush_r+0xb8>
 800be32:	4a2a      	ldr	r2, [pc, #168]	; (800bedc <__sflush_r+0x108>)
 800be34:	40ca      	lsrs	r2, r1
 800be36:	07d6      	lsls	r6, r2, #31
 800be38:	d528      	bpl.n	800be8c <__sflush_r+0xb8>
 800be3a:	2200      	movs	r2, #0
 800be3c:	6062      	str	r2, [r4, #4]
 800be3e:	04d9      	lsls	r1, r3, #19
 800be40:	6922      	ldr	r2, [r4, #16]
 800be42:	6022      	str	r2, [r4, #0]
 800be44:	d504      	bpl.n	800be50 <__sflush_r+0x7c>
 800be46:	1c42      	adds	r2, r0, #1
 800be48:	d101      	bne.n	800be4e <__sflush_r+0x7a>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	b903      	cbnz	r3, 800be50 <__sflush_r+0x7c>
 800be4e:	6560      	str	r0, [r4, #84]	; 0x54
 800be50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be52:	602f      	str	r7, [r5, #0]
 800be54:	2900      	cmp	r1, #0
 800be56:	d0ca      	beq.n	800bdee <__sflush_r+0x1a>
 800be58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be5c:	4299      	cmp	r1, r3
 800be5e:	d002      	beq.n	800be66 <__sflush_r+0x92>
 800be60:	4628      	mov	r0, r5
 800be62:	f7ff f9b5 	bl	800b1d0 <_free_r>
 800be66:	2000      	movs	r0, #0
 800be68:	6360      	str	r0, [r4, #52]	; 0x34
 800be6a:	e7c1      	b.n	800bdf0 <__sflush_r+0x1c>
 800be6c:	6a21      	ldr	r1, [r4, #32]
 800be6e:	2301      	movs	r3, #1
 800be70:	4628      	mov	r0, r5
 800be72:	47b0      	blx	r6
 800be74:	1c41      	adds	r1, r0, #1
 800be76:	d1c7      	bne.n	800be08 <__sflush_r+0x34>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0c4      	beq.n	800be08 <__sflush_r+0x34>
 800be7e:	2b1d      	cmp	r3, #29
 800be80:	d001      	beq.n	800be86 <__sflush_r+0xb2>
 800be82:	2b16      	cmp	r3, #22
 800be84:	d101      	bne.n	800be8a <__sflush_r+0xb6>
 800be86:	602f      	str	r7, [r5, #0]
 800be88:	e7b1      	b.n	800bdee <__sflush_r+0x1a>
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	e7ad      	b.n	800bdf0 <__sflush_r+0x1c>
 800be94:	690f      	ldr	r7, [r1, #16]
 800be96:	2f00      	cmp	r7, #0
 800be98:	d0a9      	beq.n	800bdee <__sflush_r+0x1a>
 800be9a:	0793      	lsls	r3, r2, #30
 800be9c:	680e      	ldr	r6, [r1, #0]
 800be9e:	bf08      	it	eq
 800bea0:	694b      	ldreq	r3, [r1, #20]
 800bea2:	600f      	str	r7, [r1, #0]
 800bea4:	bf18      	it	ne
 800bea6:	2300      	movne	r3, #0
 800bea8:	eba6 0807 	sub.w	r8, r6, r7
 800beac:	608b      	str	r3, [r1, #8]
 800beae:	f1b8 0f00 	cmp.w	r8, #0
 800beb2:	dd9c      	ble.n	800bdee <__sflush_r+0x1a>
 800beb4:	6a21      	ldr	r1, [r4, #32]
 800beb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beb8:	4643      	mov	r3, r8
 800beba:	463a      	mov	r2, r7
 800bebc:	4628      	mov	r0, r5
 800bebe:	47b0      	blx	r6
 800bec0:	2800      	cmp	r0, #0
 800bec2:	dc06      	bgt.n	800bed2 <__sflush_r+0xfe>
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	e78e      	b.n	800bdf0 <__sflush_r+0x1c>
 800bed2:	4407      	add	r7, r0
 800bed4:	eba8 0800 	sub.w	r8, r8, r0
 800bed8:	e7e9      	b.n	800beae <__sflush_r+0xda>
 800beda:	bf00      	nop
 800bedc:	20400001 	.word	0x20400001

0800bee0 <_fflush_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	690b      	ldr	r3, [r1, #16]
 800bee4:	4605      	mov	r5, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	b913      	cbnz	r3, 800bef0 <_fflush_r+0x10>
 800beea:	2500      	movs	r5, #0
 800beec:	4628      	mov	r0, r5
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	b118      	cbz	r0, 800befa <_fflush_r+0x1a>
 800bef2:	6983      	ldr	r3, [r0, #24]
 800bef4:	b90b      	cbnz	r3, 800befa <_fflush_r+0x1a>
 800bef6:	f000 f887 	bl	800c008 <__sinit>
 800befa:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <_fflush_r+0x6c>)
 800befc:	429c      	cmp	r4, r3
 800befe:	d11b      	bne.n	800bf38 <_fflush_r+0x58>
 800bf00:	686c      	ldr	r4, [r5, #4]
 800bf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0ef      	beq.n	800beea <_fflush_r+0xa>
 800bf0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf0c:	07d0      	lsls	r0, r2, #31
 800bf0e:	d404      	bmi.n	800bf1a <_fflush_r+0x3a>
 800bf10:	0599      	lsls	r1, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_fflush_r+0x3a>
 800bf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf16:	f000 f915 	bl	800c144 <__retarget_lock_acquire_recursive>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f7ff ff59 	bl	800bdd4 <__sflush_r>
 800bf22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf24:	07da      	lsls	r2, r3, #31
 800bf26:	4605      	mov	r5, r0
 800bf28:	d4e0      	bmi.n	800beec <_fflush_r+0xc>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	059b      	lsls	r3, r3, #22
 800bf2e:	d4dd      	bmi.n	800beec <_fflush_r+0xc>
 800bf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf32:	f000 f908 	bl	800c146 <__retarget_lock_release_recursive>
 800bf36:	e7d9      	b.n	800beec <_fflush_r+0xc>
 800bf38:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <_fflush_r+0x70>)
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d101      	bne.n	800bf42 <_fflush_r+0x62>
 800bf3e:	68ac      	ldr	r4, [r5, #8]
 800bf40:	e7df      	b.n	800bf02 <_fflush_r+0x22>
 800bf42:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <_fflush_r+0x74>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	bf08      	it	eq
 800bf48:	68ec      	ldreq	r4, [r5, #12]
 800bf4a:	e7da      	b.n	800bf02 <_fflush_r+0x22>
 800bf4c:	0800ceec 	.word	0x0800ceec
 800bf50:	0800cf0c 	.word	0x0800cf0c
 800bf54:	0800cecc 	.word	0x0800cecc

0800bf58 <std>:
 800bf58:	2300      	movs	r3, #0
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf66:	6083      	str	r3, [r0, #8]
 800bf68:	8181      	strh	r1, [r0, #12]
 800bf6a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf6c:	81c2      	strh	r2, [r0, #14]
 800bf6e:	6183      	str	r3, [r0, #24]
 800bf70:	4619      	mov	r1, r3
 800bf72:	2208      	movs	r2, #8
 800bf74:	305c      	adds	r0, #92	; 0x5c
 800bf76:	f7ff f88d 	bl	800b094 <memset>
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <std+0x38>)
 800bf7c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <std+0x3c>)
 800bf80:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf82:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <std+0x40>)
 800bf84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <std+0x44>)
 800bf88:	6224      	str	r4, [r4, #32]
 800bf8a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf8c:	bd10      	pop	{r4, pc}
 800bf8e:	bf00      	nop
 800bf90:	0800c349 	.word	0x0800c349
 800bf94:	0800c36b 	.word	0x0800c36b
 800bf98:	0800c3a3 	.word	0x0800c3a3
 800bf9c:	0800c3c7 	.word	0x0800c3c7

0800bfa0 <_cleanup_r>:
 800bfa0:	4901      	ldr	r1, [pc, #4]	; (800bfa8 <_cleanup_r+0x8>)
 800bfa2:	f000 b8af 	b.w	800c104 <_fwalk_reent>
 800bfa6:	bf00      	nop
 800bfa8:	0800bee1 	.word	0x0800bee1

0800bfac <__sfmoreglue>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	2268      	movs	r2, #104	; 0x68
 800bfb0:	1e4d      	subs	r5, r1, #1
 800bfb2:	4355      	muls	r5, r2
 800bfb4:	460e      	mov	r6, r1
 800bfb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfba:	f7ff f975 	bl	800b2a8 <_malloc_r>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	b140      	cbz	r0, 800bfd4 <__sfmoreglue+0x28>
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	e9c0 1600 	strd	r1, r6, [r0]
 800bfc8:	300c      	adds	r0, #12
 800bfca:	60a0      	str	r0, [r4, #8]
 800bfcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfd0:	f7ff f860 	bl	800b094 <memset>
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}

0800bfd8 <__sfp_lock_acquire>:
 800bfd8:	4801      	ldr	r0, [pc, #4]	; (800bfe0 <__sfp_lock_acquire+0x8>)
 800bfda:	f000 b8b3 	b.w	800c144 <__retarget_lock_acquire_recursive>
 800bfde:	bf00      	nop
 800bfe0:	2000cf55 	.word	0x2000cf55

0800bfe4 <__sfp_lock_release>:
 800bfe4:	4801      	ldr	r0, [pc, #4]	; (800bfec <__sfp_lock_release+0x8>)
 800bfe6:	f000 b8ae 	b.w	800c146 <__retarget_lock_release_recursive>
 800bfea:	bf00      	nop
 800bfec:	2000cf55 	.word	0x2000cf55

0800bff0 <__sinit_lock_acquire>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__sinit_lock_acquire+0x8>)
 800bff2:	f000 b8a7 	b.w	800c144 <__retarget_lock_acquire_recursive>
 800bff6:	bf00      	nop
 800bff8:	2000cf56 	.word	0x2000cf56

0800bffc <__sinit_lock_release>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__sinit_lock_release+0x8>)
 800bffe:	f000 b8a2 	b.w	800c146 <__retarget_lock_release_recursive>
 800c002:	bf00      	nop
 800c004:	2000cf56 	.word	0x2000cf56

0800c008 <__sinit>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	4604      	mov	r4, r0
 800c00c:	f7ff fff0 	bl	800bff0 <__sinit_lock_acquire>
 800c010:	69a3      	ldr	r3, [r4, #24]
 800c012:	b11b      	cbz	r3, 800c01c <__sinit+0x14>
 800c014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c018:	f7ff bff0 	b.w	800bffc <__sinit_lock_release>
 800c01c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c020:	6523      	str	r3, [r4, #80]	; 0x50
 800c022:	4b13      	ldr	r3, [pc, #76]	; (800c070 <__sinit+0x68>)
 800c024:	4a13      	ldr	r2, [pc, #76]	; (800c074 <__sinit+0x6c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	62a2      	str	r2, [r4, #40]	; 0x28
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	bf04      	itt	eq
 800c02e:	2301      	moveq	r3, #1
 800c030:	61a3      	streq	r3, [r4, #24]
 800c032:	4620      	mov	r0, r4
 800c034:	f000 f820 	bl	800c078 <__sfp>
 800c038:	6060      	str	r0, [r4, #4]
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 f81c 	bl	800c078 <__sfp>
 800c040:	60a0      	str	r0, [r4, #8]
 800c042:	4620      	mov	r0, r4
 800c044:	f000 f818 	bl	800c078 <__sfp>
 800c048:	2200      	movs	r2, #0
 800c04a:	60e0      	str	r0, [r4, #12]
 800c04c:	2104      	movs	r1, #4
 800c04e:	6860      	ldr	r0, [r4, #4]
 800c050:	f7ff ff82 	bl	800bf58 <std>
 800c054:	68a0      	ldr	r0, [r4, #8]
 800c056:	2201      	movs	r2, #1
 800c058:	2109      	movs	r1, #9
 800c05a:	f7ff ff7d 	bl	800bf58 <std>
 800c05e:	68e0      	ldr	r0, [r4, #12]
 800c060:	2202      	movs	r2, #2
 800c062:	2112      	movs	r1, #18
 800c064:	f7ff ff78 	bl	800bf58 <std>
 800c068:	2301      	movs	r3, #1
 800c06a:	61a3      	str	r3, [r4, #24]
 800c06c:	e7d2      	b.n	800c014 <__sinit+0xc>
 800c06e:	bf00      	nop
 800c070:	0800cde4 	.word	0x0800cde4
 800c074:	0800bfa1 	.word	0x0800bfa1

0800c078 <__sfp>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	4607      	mov	r7, r0
 800c07c:	f7ff ffac 	bl	800bfd8 <__sfp_lock_acquire>
 800c080:	4b1e      	ldr	r3, [pc, #120]	; (800c0fc <__sfp+0x84>)
 800c082:	681e      	ldr	r6, [r3, #0]
 800c084:	69b3      	ldr	r3, [r6, #24]
 800c086:	b913      	cbnz	r3, 800c08e <__sfp+0x16>
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff ffbd 	bl	800c008 <__sinit>
 800c08e:	3648      	adds	r6, #72	; 0x48
 800c090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c094:	3b01      	subs	r3, #1
 800c096:	d503      	bpl.n	800c0a0 <__sfp+0x28>
 800c098:	6833      	ldr	r3, [r6, #0]
 800c09a:	b30b      	cbz	r3, 800c0e0 <__sfp+0x68>
 800c09c:	6836      	ldr	r6, [r6, #0]
 800c09e:	e7f7      	b.n	800c090 <__sfp+0x18>
 800c0a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0a4:	b9d5      	cbnz	r5, 800c0dc <__sfp+0x64>
 800c0a6:	4b16      	ldr	r3, [pc, #88]	; (800c100 <__sfp+0x88>)
 800c0a8:	60e3      	str	r3, [r4, #12]
 800c0aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c0b0:	f000 f847 	bl	800c142 <__retarget_lock_init_recursive>
 800c0b4:	f7ff ff96 	bl	800bfe4 <__sfp_lock_release>
 800c0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0c0:	6025      	str	r5, [r4, #0]
 800c0c2:	61a5      	str	r5, [r4, #24]
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0cc:	f7fe ffe2 	bl	800b094 <memset>
 800c0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0d8:	4620      	mov	r0, r4
 800c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0dc:	3468      	adds	r4, #104	; 0x68
 800c0de:	e7d9      	b.n	800c094 <__sfp+0x1c>
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	f7ff ff62 	bl	800bfac <__sfmoreglue>
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	6030      	str	r0, [r6, #0]
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d1d5      	bne.n	800c09c <__sfp+0x24>
 800c0f0:	f7ff ff78 	bl	800bfe4 <__sfp_lock_release>
 800c0f4:	230c      	movs	r3, #12
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	e7ee      	b.n	800c0d8 <__sfp+0x60>
 800c0fa:	bf00      	nop
 800c0fc:	0800cde4 	.word	0x0800cde4
 800c100:	ffff0001 	.word	0xffff0001

0800c104 <_fwalk_reent>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	4606      	mov	r6, r0
 800c10a:	4688      	mov	r8, r1
 800c10c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c110:	2700      	movs	r7, #0
 800c112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c116:	f1b9 0901 	subs.w	r9, r9, #1
 800c11a:	d505      	bpl.n	800c128 <_fwalk_reent+0x24>
 800c11c:	6824      	ldr	r4, [r4, #0]
 800c11e:	2c00      	cmp	r4, #0
 800c120:	d1f7      	bne.n	800c112 <_fwalk_reent+0xe>
 800c122:	4638      	mov	r0, r7
 800c124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c128:	89ab      	ldrh	r3, [r5, #12]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d907      	bls.n	800c13e <_fwalk_reent+0x3a>
 800c12e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c132:	3301      	adds	r3, #1
 800c134:	d003      	beq.n	800c13e <_fwalk_reent+0x3a>
 800c136:	4629      	mov	r1, r5
 800c138:	4630      	mov	r0, r6
 800c13a:	47c0      	blx	r8
 800c13c:	4307      	orrs	r7, r0
 800c13e:	3568      	adds	r5, #104	; 0x68
 800c140:	e7e9      	b.n	800c116 <_fwalk_reent+0x12>

0800c142 <__retarget_lock_init_recursive>:
 800c142:	4770      	bx	lr

0800c144 <__retarget_lock_acquire_recursive>:
 800c144:	4770      	bx	lr

0800c146 <__retarget_lock_release_recursive>:
 800c146:	4770      	bx	lr

0800c148 <__swhatbuf_r>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	460e      	mov	r6, r1
 800c14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c150:	2900      	cmp	r1, #0
 800c152:	b096      	sub	sp, #88	; 0x58
 800c154:	4614      	mov	r4, r2
 800c156:	461d      	mov	r5, r3
 800c158:	da08      	bge.n	800c16c <__swhatbuf_r+0x24>
 800c15a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	602a      	str	r2, [r5, #0]
 800c162:	061a      	lsls	r2, r3, #24
 800c164:	d410      	bmi.n	800c188 <__swhatbuf_r+0x40>
 800c166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16a:	e00e      	b.n	800c18a <__swhatbuf_r+0x42>
 800c16c:	466a      	mov	r2, sp
 800c16e:	f000 f951 	bl	800c414 <_fstat_r>
 800c172:	2800      	cmp	r0, #0
 800c174:	dbf1      	blt.n	800c15a <__swhatbuf_r+0x12>
 800c176:	9a01      	ldr	r2, [sp, #4]
 800c178:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c17c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c180:	425a      	negs	r2, r3
 800c182:	415a      	adcs	r2, r3
 800c184:	602a      	str	r2, [r5, #0]
 800c186:	e7ee      	b.n	800c166 <__swhatbuf_r+0x1e>
 800c188:	2340      	movs	r3, #64	; 0x40
 800c18a:	2000      	movs	r0, #0
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	b016      	add	sp, #88	; 0x58
 800c190:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c194 <__smakebuf_r>:
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c198:	079d      	lsls	r5, r3, #30
 800c19a:	4606      	mov	r6, r0
 800c19c:	460c      	mov	r4, r1
 800c19e:	d507      	bpl.n	800c1b0 <__smakebuf_r+0x1c>
 800c1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	b002      	add	sp, #8
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	ab01      	add	r3, sp, #4
 800c1b2:	466a      	mov	r2, sp
 800c1b4:	f7ff ffc8 	bl	800c148 <__swhatbuf_r>
 800c1b8:	9900      	ldr	r1, [sp, #0]
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff f873 	bl	800b2a8 <_malloc_r>
 800c1c2:	b948      	cbnz	r0, 800c1d8 <__smakebuf_r+0x44>
 800c1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c8:	059a      	lsls	r2, r3, #22
 800c1ca:	d4ef      	bmi.n	800c1ac <__smakebuf_r+0x18>
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	f043 0302 	orr.w	r3, r3, #2
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	e7e3      	b.n	800c1a0 <__smakebuf_r+0xc>
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <__smakebuf_r+0x7c>)
 800c1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	6020      	str	r0, [r4, #0]
 800c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	9b00      	ldr	r3, [sp, #0]
 800c1e8:	6163      	str	r3, [r4, #20]
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	6120      	str	r0, [r4, #16]
 800c1ee:	b15b      	cbz	r3, 800c208 <__smakebuf_r+0x74>
 800c1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f000 f91f 	bl	800c438 <_isatty_r>
 800c1fa:	b128      	cbz	r0, 800c208 <__smakebuf_r+0x74>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f023 0303 	bic.w	r3, r3, #3
 800c202:	f043 0301 	orr.w	r3, r3, #1
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	89a0      	ldrh	r0, [r4, #12]
 800c20a:	4305      	orrs	r5, r0
 800c20c:	81a5      	strh	r5, [r4, #12]
 800c20e:	e7cd      	b.n	800c1ac <__smakebuf_r+0x18>
 800c210:	0800bfa1 	.word	0x0800bfa1

0800c214 <memmove>:
 800c214:	4288      	cmp	r0, r1
 800c216:	b510      	push	{r4, lr}
 800c218:	eb01 0402 	add.w	r4, r1, r2
 800c21c:	d902      	bls.n	800c224 <memmove+0x10>
 800c21e:	4284      	cmp	r4, r0
 800c220:	4623      	mov	r3, r4
 800c222:	d807      	bhi.n	800c234 <memmove+0x20>
 800c224:	1e43      	subs	r3, r0, #1
 800c226:	42a1      	cmp	r1, r4
 800c228:	d008      	beq.n	800c23c <memmove+0x28>
 800c22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c22e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c232:	e7f8      	b.n	800c226 <memmove+0x12>
 800c234:	4402      	add	r2, r0
 800c236:	4601      	mov	r1, r0
 800c238:	428a      	cmp	r2, r1
 800c23a:	d100      	bne.n	800c23e <memmove+0x2a>
 800c23c:	bd10      	pop	{r4, pc}
 800c23e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c246:	e7f7      	b.n	800c238 <memmove+0x24>

0800c248 <__malloc_lock>:
 800c248:	4801      	ldr	r0, [pc, #4]	; (800c250 <__malloc_lock+0x8>)
 800c24a:	f7ff bf7b 	b.w	800c144 <__retarget_lock_acquire_recursive>
 800c24e:	bf00      	nop
 800c250:	2000cf54 	.word	0x2000cf54

0800c254 <__malloc_unlock>:
 800c254:	4801      	ldr	r0, [pc, #4]	; (800c25c <__malloc_unlock+0x8>)
 800c256:	f7ff bf76 	b.w	800c146 <__retarget_lock_release_recursive>
 800c25a:	bf00      	nop
 800c25c:	2000cf54 	.word	0x2000cf54

0800c260 <_realloc_r>:
 800c260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c264:	4680      	mov	r8, r0
 800c266:	4614      	mov	r4, r2
 800c268:	460e      	mov	r6, r1
 800c26a:	b921      	cbnz	r1, 800c276 <_realloc_r+0x16>
 800c26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c270:	4611      	mov	r1, r2
 800c272:	f7ff b819 	b.w	800b2a8 <_malloc_r>
 800c276:	b92a      	cbnz	r2, 800c284 <_realloc_r+0x24>
 800c278:	f7fe ffaa 	bl	800b1d0 <_free_r>
 800c27c:	4625      	mov	r5, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c284:	f000 f8fa 	bl	800c47c <_malloc_usable_size_r>
 800c288:	4284      	cmp	r4, r0
 800c28a:	4607      	mov	r7, r0
 800c28c:	d802      	bhi.n	800c294 <_realloc_r+0x34>
 800c28e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c292:	d812      	bhi.n	800c2ba <_realloc_r+0x5a>
 800c294:	4621      	mov	r1, r4
 800c296:	4640      	mov	r0, r8
 800c298:	f7ff f806 	bl	800b2a8 <_malloc_r>
 800c29c:	4605      	mov	r5, r0
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d0ed      	beq.n	800c27e <_realloc_r+0x1e>
 800c2a2:	42bc      	cmp	r4, r7
 800c2a4:	4622      	mov	r2, r4
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	bf28      	it	cs
 800c2aa:	463a      	movcs	r2, r7
 800c2ac:	f7fe fee4 	bl	800b078 <memcpy>
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	f7fe ff8c 	bl	800b1d0 <_free_r>
 800c2b8:	e7e1      	b.n	800c27e <_realloc_r+0x1e>
 800c2ba:	4635      	mov	r5, r6
 800c2bc:	e7df      	b.n	800c27e <_realloc_r+0x1e>

0800c2be <_raise_r>:
 800c2be:	291f      	cmp	r1, #31
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	460d      	mov	r5, r1
 800c2c6:	d904      	bls.n	800c2d2 <_raise_r+0x14>
 800c2c8:	2316      	movs	r3, #22
 800c2ca:	6003      	str	r3, [r0, #0]
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	bd38      	pop	{r3, r4, r5, pc}
 800c2d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2d4:	b112      	cbz	r2, 800c2dc <_raise_r+0x1e>
 800c2d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2da:	b94b      	cbnz	r3, 800c2f0 <_raise_r+0x32>
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f000 f831 	bl	800c344 <_getpid_r>
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ec:	f000 b818 	b.w	800c320 <_kill_r>
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d00a      	beq.n	800c30a <_raise_r+0x4c>
 800c2f4:	1c59      	adds	r1, r3, #1
 800c2f6:	d103      	bne.n	800c300 <_raise_r+0x42>
 800c2f8:	2316      	movs	r3, #22
 800c2fa:	6003      	str	r3, [r0, #0]
 800c2fc:	2001      	movs	r0, #1
 800c2fe:	e7e7      	b.n	800c2d0 <_raise_r+0x12>
 800c300:	2400      	movs	r4, #0
 800c302:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c306:	4628      	mov	r0, r5
 800c308:	4798      	blx	r3
 800c30a:	2000      	movs	r0, #0
 800c30c:	e7e0      	b.n	800c2d0 <_raise_r+0x12>
	...

0800c310 <raise>:
 800c310:	4b02      	ldr	r3, [pc, #8]	; (800c31c <raise+0xc>)
 800c312:	4601      	mov	r1, r0
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	f7ff bfd2 	b.w	800c2be <_raise_r>
 800c31a:	bf00      	nop
 800c31c:	20000018 	.word	0x20000018

0800c320 <_kill_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d07      	ldr	r5, [pc, #28]	; (800c340 <_kill_r+0x20>)
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	4611      	mov	r1, r2
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	f7f9 fa35 	bl	800579c <_kill>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	d102      	bne.n	800c33c <_kill_r+0x1c>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	b103      	cbz	r3, 800c33c <_kill_r+0x1c>
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	bd38      	pop	{r3, r4, r5, pc}
 800c33e:	bf00      	nop
 800c340:	2000cf58 	.word	0x2000cf58

0800c344 <_getpid_r>:
 800c344:	f7f9 ba22 	b.w	800578c <_getpid>

0800c348 <__sread>:
 800c348:	b510      	push	{r4, lr}
 800c34a:	460c      	mov	r4, r1
 800c34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c350:	f000 f89c 	bl	800c48c <_read_r>
 800c354:	2800      	cmp	r0, #0
 800c356:	bfab      	itete	ge
 800c358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c35a:	89a3      	ldrhlt	r3, [r4, #12]
 800c35c:	181b      	addge	r3, r3, r0
 800c35e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c362:	bfac      	ite	ge
 800c364:	6563      	strge	r3, [r4, #84]	; 0x54
 800c366:	81a3      	strhlt	r3, [r4, #12]
 800c368:	bd10      	pop	{r4, pc}

0800c36a <__swrite>:
 800c36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36e:	461f      	mov	r7, r3
 800c370:	898b      	ldrh	r3, [r1, #12]
 800c372:	05db      	lsls	r3, r3, #23
 800c374:	4605      	mov	r5, r0
 800c376:	460c      	mov	r4, r1
 800c378:	4616      	mov	r6, r2
 800c37a:	d505      	bpl.n	800c388 <__swrite+0x1e>
 800c37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c380:	2302      	movs	r3, #2
 800c382:	2200      	movs	r2, #0
 800c384:	f000 f868 	bl	800c458 <_lseek_r>
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c38e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	4632      	mov	r2, r6
 800c396:	463b      	mov	r3, r7
 800c398:	4628      	mov	r0, r5
 800c39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c39e:	f000 b817 	b.w	800c3d0 <_write_r>

0800c3a2 <__sseek>:
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3aa:	f000 f855 	bl	800c458 <_lseek_r>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	bf15      	itete	ne
 800c3b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3be:	81a3      	strheq	r3, [r4, #12]
 800c3c0:	bf18      	it	ne
 800c3c2:	81a3      	strhne	r3, [r4, #12]
 800c3c4:	bd10      	pop	{r4, pc}

0800c3c6 <__sclose>:
 800c3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ca:	f000 b813 	b.w	800c3f4 <_close_r>
	...

0800c3d0 <_write_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d07      	ldr	r5, [pc, #28]	; (800c3f0 <_write_r+0x20>)
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	4611      	mov	r1, r2
 800c3da:	2200      	movs	r2, #0
 800c3dc:	602a      	str	r2, [r5, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f7f9 fa13 	bl	800580a <_write>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_write_r+0x1e>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_write_r+0x1e>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	2000cf58 	.word	0x2000cf58

0800c3f4 <_close_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4d06      	ldr	r5, [pc, #24]	; (800c410 <_close_r+0x1c>)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	f7f9 fa1f 	bl	8005842 <_close>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_close_r+0x1a>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_close_r+0x1a>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	2000cf58 	.word	0x2000cf58

0800c414 <_fstat_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d07      	ldr	r5, [pc, #28]	; (800c434 <_fstat_r+0x20>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	f7f9 fa1a 	bl	800585a <_fstat>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d102      	bne.n	800c430 <_fstat_r+0x1c>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	b103      	cbz	r3, 800c430 <_fstat_r+0x1c>
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	bd38      	pop	{r3, r4, r5, pc}
 800c432:	bf00      	nop
 800c434:	2000cf58 	.word	0x2000cf58

0800c438 <_isatty_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d06      	ldr	r5, [pc, #24]	; (800c454 <_isatty_r+0x1c>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7f9 fa19 	bl	800587a <_isatty>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_isatty_r+0x1a>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_isatty_r+0x1a>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	2000cf58 	.word	0x2000cf58

0800c458 <_lseek_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	; (800c478 <_lseek_r+0x20>)
 800c45c:	4604      	mov	r4, r0
 800c45e:	4608      	mov	r0, r1
 800c460:	4611      	mov	r1, r2
 800c462:	2200      	movs	r2, #0
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	f7f9 fa12 	bl	8005890 <_lseek>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_lseek_r+0x1e>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_lseek_r+0x1e>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	2000cf58 	.word	0x2000cf58

0800c47c <_malloc_usable_size_r>:
 800c47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c480:	1f18      	subs	r0, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	bfbc      	itt	lt
 800c486:	580b      	ldrlt	r3, [r1, r0]
 800c488:	18c0      	addlt	r0, r0, r3
 800c48a:	4770      	bx	lr

0800c48c <_read_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4d07      	ldr	r5, [pc, #28]	; (800c4ac <_read_r+0x20>)
 800c490:	4604      	mov	r4, r0
 800c492:	4608      	mov	r0, r1
 800c494:	4611      	mov	r1, r2
 800c496:	2200      	movs	r2, #0
 800c498:	602a      	str	r2, [r5, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f7f9 f998 	bl	80057d0 <_read>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_read_r+0x1e>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_read_r+0x1e>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	2000cf58 	.word	0x2000cf58

0800c4b0 <_init>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	bf00      	nop
 800c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	469e      	mov	lr, r3
 800c4ba:	4770      	bx	lr

0800c4bc <_fini>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	bf00      	nop
 800c4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c2:	bc08      	pop	{r3}
 800c4c4:	469e      	mov	lr, r3
 800c4c6:	4770      	bx	lr
