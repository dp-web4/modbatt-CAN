
Pack Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009710  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a148  0800a148  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a150  0800a150  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800a158  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          0000ca30  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000cb00  2000cb00  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001494c  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025a7  00000000  00000000  00034a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  00037038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cce  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022f24  00000000  00000000  00038d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001254d  00000000  00000000  0005bcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0ff6  00000000  00000000  0006e1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055f4  00000000  00000000  0013f1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  001447e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009888 	.word	0x08009888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08009888 	.word	0x08009888

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <APP_LED_Clear>:
*                   Section: Application Local Functions                               P A C K   E M U L A T O R
*
***************************************************************************************************************/

void APP_LED_Clear(uint8_t led)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d014      	beq.n	8000676 <APP_LED_Clear+0x3a>
 800064c:	2b02      	cmp	r3, #2
 800064e:	dc19      	bgt.n	8000684 <APP_LED_Clear+0x48>
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <APP_LED_Clear+0x1e>
 8000654:	2b01      	cmp	r3, #1
 8000656:	d007      	beq.n	8000668 <APP_LED_Clear+0x2c>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8000658:	e014      	b.n	8000684 <APP_LED_Clear+0x48>
        	HAL_GPIO_WritePin(LED5_RED_GPIO_Port,  LED5_RED_Pin , GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <APP_LED_Clear+0x54>)
 8000662:	f004 fe09 	bl	8005278 <HAL_GPIO_WritePin>
            break;
 8000666:	e00e      	b.n	8000686 <APP_LED_Clear+0x4a>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <APP_LED_Clear+0x54>)
 8000670:	f004 fe02 	bl	8005278 <HAL_GPIO_WritePin>
            break;
 8000674:	e007      	b.n	8000686 <APP_LED_Clear+0x4a>
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <APP_LED_Clear+0x54>)
 800067e:	f004 fdfb 	bl	8005278 <HAL_GPIO_WritePin>
            break;
 8000682:	e000      	b.n	8000686 <APP_LED_Clear+0x4a>
        default: break;
 8000684:	bf00      	nop
    }
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020c00 	.word	0x40020c00

08000694 <APP_LED_Set>:

void APP_LED_Set(uint8_t led)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d014      	beq.n	80006ce <APP_LED_Set+0x3a>
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dc19      	bgt.n	80006dc <APP_LED_Set+0x48>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <APP_LED_Set+0x1e>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d007      	beq.n	80006c0 <APP_LED_Set+0x2c>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_SET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80006b0:	e014      	b.n	80006dc <APP_LED_Set+0x48>
        	HAL_GPIO_WritePin(LED5_RED_GPIO_Port,  LED5_RED_Pin , GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <APP_LED_Set+0x54>)
 80006ba:	f004 fddd 	bl	8005278 <HAL_GPIO_WritePin>
            break;
 80006be:	e00e      	b.n	80006de <APP_LED_Set+0x4a>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <APP_LED_Set+0x54>)
 80006c8:	f004 fdd6 	bl	8005278 <HAL_GPIO_WritePin>
            break;
 80006cc:	e007      	b.n	80006de <APP_LED_Set+0x4a>
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <APP_LED_Set+0x54>)
 80006d6:	f004 fdcf 	bl	8005278 <HAL_GPIO_WritePin>
            break;
 80006da:	e000      	b.n	80006de <APP_LED_Set+0x4a>
        default: break;
 80006dc:	bf00      	nop
    }
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40020c00 	.word	0x40020c00

080006ec <APP_Initialize>:

/***************************************************************************************************************
*     A P P _ I n i t i a l i z e                                                      P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_Initialize(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0


  //clear the batteryModule Array
  memset(module,0,sizeof(module));
 80006f0:	f24c 5280 	movw	r2, #50560	; 0xc580
 80006f4:	2100      	movs	r1, #0
 80006f6:	48ba      	ldr	r0, [pc, #744]	; (80009e0 <APP_Initialize+0x2f4>)
 80006f8:	f006 fe9f 	bl	800743a <memset>

  //set up a couple of modules
  //module[0]
  module[0].mfgId           = 0xDC;
 80006fc:	4bb8      	ldr	r3, [pc, #736]	; (80009e0 <APP_Initialize+0x2f4>)
 80006fe:	22dc      	movs	r2, #220	; 0xdc
 8000700:	701a      	strb	r2, [r3, #0]
  module[0].partId          = 0x01;
 8000702:	4bb7      	ldr	r3, [pc, #732]	; (80009e0 <APP_Initialize+0x2f4>)
 8000704:	2201      	movs	r2, #1
 8000706:	705a      	strb	r2, [r3, #1]
  module[0].uniqueId        = 0xBA770001;
 8000708:	4bb5      	ldr	r3, [pc, #724]	; (80009e0 <APP_Initialize+0x2f4>)
 800070a:	4ab6      	ldr	r2, [pc, #728]	; (80009e4 <APP_Initialize+0x2f8>)
 800070c:	605a      	str	r2, [r3, #4]
  module[0].mmv             = (uint16_t)( 400  /MODULE_VOLTAGE_FACTOR);
 800070e:	4bb4      	ldr	r3, [pc, #720]	; (80009e0 <APP_Initialize+0x2f4>)
 8000710:	f646 022a 	movw	r2, #26666	; 0x682a
 8000714:	829a      	strh	r2, [r3, #20]
  module[0].mmc             = (uint16_t)( 300  /MODULE_CURRENT_FACTOR - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR));
 8000716:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <APP_Initialize+0x2f4>)
 8000718:	f64b 2298 	movw	r2, #47768	; 0xba98
 800071c:	82da      	strh	r2, [r3, #22]
  module[0].state           = moduleOff;
 800071e:	4bb0      	ldr	r3, [pc, #704]	; (80009e0 <APP_Initialize+0x2f4>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  module[0].fwVersion       = 8200;
 8000726:	4bae      	ldr	r3, [pc, #696]	; (80009e0 <APP_Initialize+0x2f4>)
 8000728:	f242 0208 	movw	r2, #8200	; 0x2008
 800072c:	815a      	strh	r2, [r3, #10]
  module[0].hwVersion       = 1000;
 800072e:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <APP_Initialize+0x2f4>)
 8000730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000734:	819a      	strh	r2, [r3, #12]
  module[0].maxChargeA      = (uint16_t)( 500/MODULE_CURRENT_FACTOR - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR));
 8000736:	4baa      	ldr	r3, [pc, #680]	; (80009e0 <APP_Initialize+0x2f4>)
 8000738:	f24e 12a8 	movw	r2, #57768	; 0xe1a8
 800073c:	81da      	strh	r2, [r3, #14]
  module[0].maxDischargeA   = (uint16_t)( 500/MODULE_CURRENT_FACTOR - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR));
 800073e:	4ba8      	ldr	r3, [pc, #672]	; (80009e0 <APP_Initialize+0x2f4>)
 8000740:	f24e 12a8 	movw	r2, #57768	; 0xe1a8
 8000744:	821a      	strh	r2, [r3, #16]
  module[0].maxChargeEndV   = (uint16_t)( 500/MODULE_VOLTAGE_FACTOR);
 8000746:	4ba6      	ldr	r3, [pc, #664]	; (80009e0 <APP_Initialize+0x2f4>)
 8000748:	f248 2235 	movw	r2, #33333	; 0x8235
 800074c:	825a      	strh	r2, [r3, #18]
  module[0].voltHi          = (uint16_t)( 3.6    /CELL_VOLTAGE_FACTOR);
 800074e:	4ba4      	ldr	r3, [pc, #656]	; (80009e0 <APP_Initialize+0x2f4>)
 8000750:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000754:	83da      	strh	r2, [r3, #30]
  module[0].voltLo          = (uint16_t)( 3.4    /CELL_VOLTAGE_FACTOR);
 8000756:	4ba2      	ldr	r3, [pc, #648]	; (80009e0 <APP_Initialize+0x2f4>)
 8000758:	f640 5248 	movw	r2, #3400	; 0xd48
 800075c:	841a      	strh	r2, [r3, #32]
  module[0].voltAvg         = (uint16_t)( 3.5    /CELL_VOLTAGE_FACTOR);
 800075e:	4ba0      	ldr	r3, [pc, #640]	; (80009e0 <APP_Initialize+0x2f4>)
 8000760:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000764:	845a      	strh	r2, [r3, #34]	; 0x22
  module[0].tempHi          = (uint16_t)( 51    /TEMPERATURE_FACTOR - (TEMPERATURE_BASE/TEMPERATURE_FACTOR));
 8000766:	4b9e      	ldr	r3, [pc, #632]	; (80009e0 <APP_Initialize+0x2f4>)
 8000768:	f642 128b 	movw	r2, #10635	; 0x298b
 800076c:	831a      	strh	r2, [r3, #24]
  module[0].tempLo          = (uint16_t)( 48    /TEMPERATURE_FACTOR - (TEMPERATURE_BASE/TEMPERATURE_FACTOR));
 800076e:	4b9c      	ldr	r3, [pc, #624]	; (80009e0 <APP_Initialize+0x2f4>)
 8000770:	f642 025f 	movw	r2, #10335	; 0x285f
 8000774:	835a      	strh	r2, [r3, #26]
  module[0].tempAvg         = (uint16_t)( 49    /TEMPERATURE_FACTOR - (TEMPERATURE_BASE/TEMPERATURE_FACTOR));
 8000776:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <APP_Initialize+0x2f4>)
 8000778:	f642 02c3 	movw	r2, #10435	; 0x28c3
 800077c:	839a      	strh	r2, [r3, #28]
  module[0].soc             = (uint8_t) ( 95/PERCENTAGE_FACTOR);
 800077e:	4b98      	ldr	r3, [pc, #608]	; (80009e0 <APP_Initialize+0x2f4>)
 8000780:	22be      	movs	r2, #190	; 0xbe
 8000782:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  module[0].soh             = (uint8_t) ( 95/PERCENTAGE_FACTOR);
 8000786:	4b96      	ldr	r3, [pc, #600]	; (80009e0 <APP_Initialize+0x2f4>)
 8000788:	22be      	movs	r2, #190	; 0xbe
 800078a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  module[0].cellCount       = 5;
 800078e:	4b94      	ldr	r3, [pc, #592]	; (80009e0 <APP_Initialize+0x2f4>)
 8000790:	2205      	movs	r2, #5
 8000792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  module[0].cell[0].voltage = 1;
 8000796:	4b92      	ldr	r3, [pc, #584]	; (80009e0 <APP_Initialize+0x2f4>)
 8000798:	2201      	movs	r2, #1
 800079a:	855a      	strh	r2, [r3, #42]	; 0x2a
  module[0].cell[0].temp    = 48;
 800079c:	4b90      	ldr	r3, [pc, #576]	; (80009e0 <APP_Initialize+0x2f4>)
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  module[0].cell[0].soc     = 90;
 80007a2:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <APP_Initialize+0x2f4>)
 80007a4:	225a      	movs	r2, #90	; 0x5a
 80007a6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  module[0].cell[0].soh     = 100;
 80007aa:	4b8d      	ldr	r3, [pc, #564]	; (80009e0 <APP_Initialize+0x2f4>)
 80007ac:	2264      	movs	r2, #100	; 0x64
 80007ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  module[0].cell[1].voltage = 1;
 80007b2:	4b8b      	ldr	r3, [pc, #556]	; (80009e0 <APP_Initialize+0x2f4>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	861a      	strh	r2, [r3, #48]	; 0x30
  module[0].cell[1].temp    = 48;
 80007b8:	4b89      	ldr	r3, [pc, #548]	; (80009e0 <APP_Initialize+0x2f4>)
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	865a      	strh	r2, [r3, #50]	; 0x32
  module[0].cell[1].soc     = 90;
 80007be:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <APP_Initialize+0x2f4>)
 80007c0:	225a      	movs	r2, #90	; 0x5a
 80007c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  module[0].cell[1].soh     = 90;
 80007c6:	4b86      	ldr	r3, [pc, #536]	; (80009e0 <APP_Initialize+0x2f4>)
 80007c8:	225a      	movs	r2, #90	; 0x5a
 80007ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  module[0].cell[2].voltage = 1;
 80007ce:	4b84      	ldr	r3, [pc, #528]	; (80009e0 <APP_Initialize+0x2f4>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	86da      	strh	r2, [r3, #54]	; 0x36
  module[0].cell[2].temp    = 48;
 80007d4:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <APP_Initialize+0x2f4>)
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	871a      	strh	r2, [r3, #56]	; 0x38
  module[0].cell[2].soc     = 90;
 80007da:	4b81      	ldr	r3, [pc, #516]	; (80009e0 <APP_Initialize+0x2f4>)
 80007dc:	225a      	movs	r2, #90	; 0x5a
 80007de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  module[0].cell[2].soh     = 100;
 80007e2:	4b7f      	ldr	r3, [pc, #508]	; (80009e0 <APP_Initialize+0x2f4>)
 80007e4:	2264      	movs	r2, #100	; 0x64
 80007e6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  module[0].cell[3].voltage = 1;
 80007ea:	4b7d      	ldr	r3, [pc, #500]	; (80009e0 <APP_Initialize+0x2f4>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  module[0].cell[3].temp    = 49;
 80007f0:	4b7b      	ldr	r3, [pc, #492]	; (80009e0 <APP_Initialize+0x2f4>)
 80007f2:	2231      	movs	r2, #49	; 0x31
 80007f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  module[0].cell[3].soc     = 90;
 80007f6:	4b7a      	ldr	r3, [pc, #488]	; (80009e0 <APP_Initialize+0x2f4>)
 80007f8:	225a      	movs	r2, #90	; 0x5a
 80007fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  module[0].cell[3].soh     = 99;
 80007fe:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <APP_Initialize+0x2f4>)
 8000800:	2263      	movs	r2, #99	; 0x63
 8000802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  module[0].cell[4].voltage = 1;
 8000806:	4b76      	ldr	r3, [pc, #472]	; (80009e0 <APP_Initialize+0x2f4>)
 8000808:	2201      	movs	r2, #1
 800080a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  module[0].cell[4].temp    = 50;
 800080e:	4b74      	ldr	r3, [pc, #464]	; (80009e0 <APP_Initialize+0x2f4>)
 8000810:	2232      	movs	r2, #50	; 0x32
 8000812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  module[0].cell[4].soc     = 91;
 8000816:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <APP_Initialize+0x2f4>)
 8000818:	225b      	movs	r2, #91	; 0x5b
 800081a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  module[0].cell[4].soh     = 100;
 800081e:	4b70      	ldr	r3, [pc, #448]	; (80009e0 <APP_Initialize+0x2f4>)
 8000820:	2264      	movs	r2, #100	; 0x64
 8000822:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  moduleCount++;
 8000826:	4b70      	ldr	r3, [pc, #448]	; (80009e8 <APP_Initialize+0x2fc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <APP_Initialize+0x2fc>)
 8000830:	701a      	strb	r2, [r3, #0]

  //module[1]
  module[1].mfgId           = 0xDC;
 8000832:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <APP_Initialize+0x2f4>)
 8000834:	22dc      	movs	r2, #220	; 0xdc
 8000836:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
  module[1].partId          = 0x01;
 800083a:	4b69      	ldr	r3, [pc, #420]	; (80009e0 <APP_Initialize+0x2f4>)
 800083c:	2201      	movs	r2, #1
 800083e:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
  module[1].uniqueId        = 0xBA770002;
 8000842:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <APP_Initialize+0x2f4>)
 8000844:	4a69      	ldr	r2, [pc, #420]	; (80009ec <APP_Initialize+0x300>)
 8000846:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
  module[1].mmv             = (uint16_t)( 400.5  /MODULE_VOLTAGE_FACTOR);
 800084a:	4b65      	ldr	r3, [pc, #404]	; (80009e0 <APP_Initialize+0x2f4>)
 800084c:	f646 024c 	movw	r2, #26700	; 0x684c
 8000850:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  module[1].mmc             = (uint16_t)( 200    /MODULE_CURRENT_FACTOR - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR));
 8000854:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <APP_Initialize+0x2f4>)
 8000856:	f24a 7210 	movw	r2, #42768	; 0xa710
 800085a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
  module[1].state           = moduleOff;
 800085e:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <APP_Initialize+0x2f4>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  module[1].fwVersion       = 8200;
 8000866:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <APP_Initialize+0x2f4>)
 8000868:	f242 0208 	movw	r2, #8200	; 0x2008
 800086c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  module[1].hwVersion       = 1000;
 8000870:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <APP_Initialize+0x2f4>)
 8000872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000876:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
  module[1].maxChargeA      = (uint16_t)( 500  /MODULE_CURRENT_FACTOR - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR));
 800087a:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <APP_Initialize+0x2f4>)
 800087c:	f24e 12a8 	movw	r2, #57768	; 0xe1a8
 8000880:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
  module[1].maxDischargeA   = (uint16_t)( 500  /MODULE_CURRENT_FACTOR - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR));
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <APP_Initialize+0x2f4>)
 8000886:	f24e 12a8 	movw	r2, #57768	; 0xe1a8
 800088a:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
  module[1].maxChargeEndV   = (uint16_t)( 400  /MODULE_VOLTAGE_FACTOR);
 800088e:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <APP_Initialize+0x2f4>)
 8000890:	f646 022a 	movw	r2, #26666	; 0x682a
 8000894:	f8a3 263e 	strh.w	r2, [r3, #1598]	; 0x63e
  module[1].voltHi          = (uint16_t)( 3.7  /CELL_VOLTAGE_FACTOR);
 8000898:	4b51      	ldr	r3, [pc, #324]	; (80009e0 <APP_Initialize+0x2f4>)
 800089a:	f640 6274 	movw	r2, #3700	; 0xe74
 800089e:	f8a3 264a 	strh.w	r2, [r3, #1610]	; 0x64a
  module[1].voltLo          = (uint16_t)( 3.5  /CELL_VOLTAGE_FACTOR);
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <APP_Initialize+0x2f4>)
 80008a4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80008a8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
  module[1].voltAvg         = (uint16_t)( 3.6  /CELL_VOLTAGE_FACTOR);
 80008ac:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <APP_Initialize+0x2f4>)
 80008ae:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80008b2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
  module[1].tempHi          = (uint16_t)( 50   /TEMPERATURE_FACTOR - (TEMPERATURE_BASE/TEMPERATURE_FACTOR));
 80008b6:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <APP_Initialize+0x2f4>)
 80008b8:	f642 1227 	movw	r2, #10535	; 0x2927
 80008bc:	f8a3 2644 	strh.w	r2, [r3, #1604]	; 0x644
  module[1].tempLo          = (uint16_t)( 47   /TEMPERATURE_FACTOR - (TEMPERATURE_BASE/TEMPERATURE_FACTOR));
 80008c0:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <APP_Initialize+0x2f4>)
 80008c2:	f242 72fb 	movw	r2, #10235	; 0x27fb
 80008c6:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
  module[1].tempAvg         = (uint16_t)( 49   /TEMPERATURE_FACTOR - (TEMPERATURE_BASE/TEMPERATURE_FACTOR));
 80008ca:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <APP_Initialize+0x2f4>)
 80008cc:	f642 02c3 	movw	r2, #10435	; 0x28c3
 80008d0:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
  module[1].soc             = (uint8_t) ( 90   /PERCENTAGE_FACTOR);
 80008d4:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <APP_Initialize+0x2f4>)
 80008d6:	22b4      	movs	r2, #180	; 0xb4
 80008d8:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
  module[1].soh             = (uint8_t) ( 90   /PERCENTAGE_FACTOR);
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <APP_Initialize+0x2f4>)
 80008de:	22b4      	movs	r2, #180	; 0xb4
 80008e0:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
  module[1].cellCount       = 5;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <APP_Initialize+0x2f4>)
 80008e6:	2205      	movs	r2, #5
 80008e8:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
  module[1].cell[0].voltage = 1;
 80008ec:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <APP_Initialize+0x2f4>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	f8a3 2656 	strh.w	r2, [r3, #1622]	; 0x656
  module[1].cell[0].temp    = 48;
 80008f4:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <APP_Initialize+0x2f4>)
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	f8a3 2658 	strh.w	r2, [r3, #1624]	; 0x658
  module[1].cell[0].soc     = 90;
 80008fc:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <APP_Initialize+0x2f4>)
 80008fe:	225a      	movs	r2, #90	; 0x5a
 8000900:	f883 265a 	strb.w	r2, [r3, #1626]	; 0x65a
  module[1].cell[0].soh     = 96;
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <APP_Initialize+0x2f4>)
 8000906:	2260      	movs	r2, #96	; 0x60
 8000908:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
  module[1].cell[1].voltage = 1;
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <APP_Initialize+0x2f4>)
 800090e:	2201      	movs	r2, #1
 8000910:	f8a3 265c 	strh.w	r2, [r3, #1628]	; 0x65c
  module[1].cell[1].temp    = 48;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <APP_Initialize+0x2f4>)
 8000916:	2230      	movs	r2, #48	; 0x30
 8000918:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
  module[1].cell[1].soc     = 90;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <APP_Initialize+0x2f4>)
 800091e:	225a      	movs	r2, #90	; 0x5a
 8000920:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
  module[1].cell[1].soh     = 97;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <APP_Initialize+0x2f4>)
 8000926:	2261      	movs	r2, #97	; 0x61
 8000928:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
  module[1].cell[2].voltage = 1;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <APP_Initialize+0x2f4>)
 800092e:	2201      	movs	r2, #1
 8000930:	f8a3 2662 	strh.w	r2, [r3, #1634]	; 0x662
  module[1].cell[2].temp    = 48;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <APP_Initialize+0x2f4>)
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	f8a3 2664 	strh.w	r2, [r3, #1636]	; 0x664
  module[1].cell[2].soc     = 90;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <APP_Initialize+0x2f4>)
 800093e:	225a      	movs	r2, #90	; 0x5a
 8000940:	f883 2666 	strb.w	r2, [r3, #1638]	; 0x666
  module[1].cell[2].soh     = 98;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <APP_Initialize+0x2f4>)
 8000946:	2262      	movs	r2, #98	; 0x62
 8000948:	f883 2667 	strb.w	r2, [r3, #1639]	; 0x667
  module[1].cell[3].voltage = 1;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <APP_Initialize+0x2f4>)
 800094e:	2201      	movs	r2, #1
 8000950:	f8a3 2668 	strh.w	r2, [r3, #1640]	; 0x668
  module[1].cell[3].temp    = 49;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <APP_Initialize+0x2f4>)
 8000956:	2231      	movs	r2, #49	; 0x31
 8000958:	f8a3 266a 	strh.w	r2, [r3, #1642]	; 0x66a
  module[1].cell[3].soc     = 90;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <APP_Initialize+0x2f4>)
 800095e:	225a      	movs	r2, #90	; 0x5a
 8000960:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
  module[1].cell[3].soh     = 99;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <APP_Initialize+0x2f4>)
 8000966:	2263      	movs	r2, #99	; 0x63
 8000968:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
  module[1].cell[4].voltage = 1;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <APP_Initialize+0x2f4>)
 800096e:	2201      	movs	r2, #1
 8000970:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
  module[1].cell[4].temp    = 49;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <APP_Initialize+0x2f4>)
 8000976:	2231      	movs	r2, #49	; 0x31
 8000978:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
  module[1].cell[4].soc     = 91;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <APP_Initialize+0x2f4>)
 800097e:	225b      	movs	r2, #91	; 0x5b
 8000980:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
  module[1].cell[4].soh     = 100;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <APP_Initialize+0x2f4>)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
  moduleCount++;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <APP_Initialize+0x2fc>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <APP_Initialize+0x2fc>)
 8000996:	701a      	strb	r2, [r3, #0]


  serialOut("");
 8000998:	4815      	ldr	r0, [pc, #84]	; (80009f0 <APP_Initialize+0x304>)
 800099a:	f003 fc7d 	bl	8004298 <serialOut>
  serialOut("");
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <APP_Initialize+0x304>)
 80009a0:	f003 fc7a 	bl	8004298 <serialOut>
  serialOut("        ██    ██");
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <APP_Initialize+0x308>)
 80009a6:	f003 fc77 	bl	8004298 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <APP_Initialize+0x30c>)
 80009ac:	f003 fc74 	bl	8004298 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Module Emulator V1.0     (c) 2023");
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <APP_Initialize+0x310>)
 80009b2:	f003 fc71 	bl	8004298 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 80009b6:	4812      	ldr	r0, [pc, #72]	; (8000a00 <APP_Initialize+0x314>)
 80009b8:	f003 fc6e 	bl	8004298 <serialOut>
  serialOut("     ██    ██    ██");
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <APP_Initialize+0x318>)
 80009be:	f003 fc6b 	bl	8004298 <serialOut>
  serialOut("     m o d b a t t");
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <APP_Initialize+0x31c>)
 80009c4:	f003 fc68 	bl	8004298 <serialOut>
  serialOut("");
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <APP_Initialize+0x304>)
 80009ca:	f003 fc65 	bl	8004298 <serialOut>


	    // Switch state
    lastSwitchState.S1 = APP_SWITCH_RELEASED;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <APP_Initialize+0x320>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]

    appData.state = APP_STATE_TEST_RAM_ACCESS;

#else
    /* Place the App state machine in its initial state. */
    appData.state = APP_STATE_TEST_RAM_ACCESS;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <APP_Initialize+0x324>)
 80009d6:	2206      	movs	r2, #6
 80009d8:	701a      	strb	r2, [r3, #0]
#endif

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000ec 	.word	0x200000ec
 80009e4:	ba770001 	.word	0xba770001
 80009e8:	2000c66c 	.word	0x2000c66c
 80009ec:	ba770002 	.word	0xba770002
 80009f0:	080098a0 	.word	0x080098a0
 80009f4:	080098a4 	.word	0x080098a4
 80009f8:	080098c0 	.word	0x080098c0
 80009fc:	080098e8 	.word	0x080098e8
 8000a00:	08009938 	.word	0x08009938
 8000a04:	08009988 	.word	0x08009988
 8000a08:	080099a8 	.word	0x080099a8
 8000a0c:	2000c728 	.word	0x2000c728
 8000a10:	2000c670 	.word	0x2000c670

08000a14 <APP_Tasks>:

/***************************************************************************************************************
*     A P P _ T a s k s                                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_Tasks(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

    uint8_t index;

    /* Check the application's current state. */
    switch (appData.state) {
 8000a1a:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <APP_Tasks+0x158>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	f200 809b 	bhi.w	8000b5a <APP_Tasks+0x146>
 8000a24:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <APP_Tasks+0x18>)
 8000a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2a:	bf00      	nop
 8000a2c:	08000a4d 	.word	0x08000a4d
 8000a30:	08000a65 	.word	0x08000a65
 8000a34:	08000b5b 	.word	0x08000b5b
 8000a38:	08000b5b 	.word	0x08000b5b
 8000a3c:	08000b5b 	.word	0x08000b5b
 8000a40:	08000ad7 	.word	0x08000ad7
 8000a44:	08000ae5 	.word	0x08000ae5
 8000a48:	08000b19 	.word	0x08000b19
            /* Application's initial state. */
        case APP_STATE_INIT:
        {
          if (DEBUG > 1) serialOut("APP_STATE_INIT");
          //Nop();
          APP_LED_Set(APP_INIT_LED);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fe21 	bl	8000694 <APP_LED_Set>
          APP_CANFDSPI_Init();
 8000a52:	f000 f89d 	bl	8000b90 <APP_CANFDSPI_Init>
          APP_LED_Clear(APP_INIT_LED);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fdf0 	bl	800063c <APP_LED_Clear>

          appData.state = APP_STATE_IDLE;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <APP_Tasks+0x158>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
          break;
 8000a62:	e07e      	b.n	8000b62 <APP_Tasks+0x14e>
        }
        case APP_STATE_IDLE:
        {
           // Check for unregistered modules and send announcements
          APP_AnnounceUnregisteredModules();
 8000a64:	f000 fa06 	bl	8000e74 <APP_AnnounceUnregisteredModules>

          for(index = 0; index < moduleCount; index++){
 8000a68:	2300      	movs	r3, #0
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	e02d      	b.n	8000aca <APP_Tasks+0xb6>
            if(module[index].rtcValid == false && module[index].timeRequested == false){
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	4a3f      	ldr	r2, [pc, #252]	; (8000b70 <APP_Tasks+0x15c>)
 8000a72:	f240 612c 	movw	r1, #1580	; 0x62c
 8000a76:	fb01 f303 	mul.w	r3, r1, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f203 632a 	addw	r3, r3, #1578	; 0x62a
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d01b      	beq.n	8000ac4 <APP_Tasks+0xb0>
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <APP_Tasks+0x15c>)
 8000a90:	f240 612c 	movw	r1, #1580	; 0x62c
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	f203 632b 	addw	r3, r3, #1579	; 0x62b
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f083 0301 	eor.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00c      	beq.n	8000ac4 <APP_Tasks+0xb0>
               APP_RequestTime();
 8000aaa:	f000 fa81 	bl	8000fb0 <APP_RequestTime>
               module[index].timeRequested = true;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <APP_Tasks+0x15c>)
 8000ab2:	f240 612c 	movw	r1, #1580	; 0x62c
 8000ab6:	fb01 f303 	mul.w	r3, r1, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	f203 632b 	addw	r3, r3, #1579	; 0x62b
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
          for(index = 0; index < moduleCount; index++){
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	71fb      	strb	r3, [r7, #7]
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <APP_Tasks+0x160>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3cc      	bcc.n	8000a6e <APP_Tasks+0x5a>
             }
          }
          break;
 8000ad4:	e045      	b.n	8000b62 <APP_Tasks+0x14e>
        }
        case APP_STATE_RECEIVE:
        {
          appData.state = APP_ReceiveMessage_Tasks();
 8000ad6:	f000 f8fd 	bl	8000cd4 <APP_ReceiveMessage_Tasks>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <APP_Tasks+0x158>)
 8000ae0:	701a      	strb	r2, [r3, #0]
          break;
 8000ae2:	e03e      	b.n	8000b62 <APP_Tasks+0x14e>
        }
        case APP_STATE_TEST_RAM_ACCESS:             // RAM access test
        {
          bool passed = APP_TestRamAccess();
 8000ae4:	f001 f93a 	bl	8001d5c <APP_TestRamAccess>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	717b      	strb	r3, [r7, #5]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD RAM TEST      : PASSED"); serialOut(tempBuffer);
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <APP_Tasks+0xee>
 8000af2:	4921      	ldr	r1, [pc, #132]	; (8000b78 <APP_Tasks+0x164>)
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <APP_Tasks+0x168>)
 8000af6:	f006 fc3b 	bl	8007370 <siprintf>
 8000afa:	4820      	ldr	r0, [pc, #128]	; (8000b7c <APP_Tasks+0x168>)
 8000afc:	f003 fbcc 	bl	8004298 <serialOut>
 8000b00:	e006      	b.n	8000b10 <APP_Tasks+0xfc>
          }else{        sprintf(tempBuffer,"     MCP2518FD RAM TEST      : FAILED"); serialOut(tempBuffer);
 8000b02:	491f      	ldr	r1, [pc, #124]	; (8000b80 <APP_Tasks+0x16c>)
 8000b04:	481d      	ldr	r0, [pc, #116]	; (8000b7c <APP_Tasks+0x168>)
 8000b06:	f006 fc33 	bl	8007370 <siprintf>
 8000b0a:	481c      	ldr	r0, [pc, #112]	; (8000b7c <APP_Tasks+0x168>)
 8000b0c:	f003 fbc4 	bl	8004298 <serialOut>
          }
          appData.state = APP_STATE_TEST_REGISTER_ACCESS;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <APP_Tasks+0x158>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	701a      	strb	r2, [r3, #0]
          break;
 8000b16:	e024      	b.n	8000b62 <APP_Tasks+0x14e>
        }
        case APP_STATE_TEST_REGISTER_ACCESS: /* Register access test */
        {
          bool passed = APP_TestRegisterAccess();
 8000b18:	f001 f8a8 	bl	8001c6c <APP_TestRegisterAccess>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71bb      	strb	r3, [r7, #6]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : PASSED"); serialOut(tempBuffer);
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d007      	beq.n	8000b36 <APP_Tasks+0x122>
 8000b26:	4917      	ldr	r1, [pc, #92]	; (8000b84 <APP_Tasks+0x170>)
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <APP_Tasks+0x168>)
 8000b2a:	f006 fc21 	bl	8007370 <siprintf>
 8000b2e:	4813      	ldr	r0, [pc, #76]	; (8000b7c <APP_Tasks+0x168>)
 8000b30:	f003 fbb2 	bl	8004298 <serialOut>
 8000b34:	e006      	b.n	8000b44 <APP_Tasks+0x130>
          }else{        sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : FAILED"); serialOut(tempBuffer);
 8000b36:	4914      	ldr	r1, [pc, #80]	; (8000b88 <APP_Tasks+0x174>)
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <APP_Tasks+0x168>)
 8000b3a:	f006 fc19 	bl	8007370 <siprintf>
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <APP_Tasks+0x168>)
 8000b40:	f003 fbaa 	bl	8004298 <serialOut>
          }
          sprintf(tempBuffer," "); serialOut(tempBuffer);
 8000b44:	4911      	ldr	r1, [pc, #68]	; (8000b8c <APP_Tasks+0x178>)
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <APP_Tasks+0x168>)
 8000b48:	f006 fc12 	bl	8007370 <siprintf>
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <APP_Tasks+0x168>)
 8000b4e:	f003 fba3 	bl	8004298 <serialOut>
          appData.state = APP_STATE_INIT;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <APP_Tasks+0x158>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
          break;
 8000b58:	e003      	b.n	8000b62 <APP_Tasks+0x14e>
        }
        // The default state should never be executed
        default:
        {
          /* TODO: Handle error in application's state machine. */
          appData.state = APP_STATE_INIT;
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <APP_Tasks+0x158>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
          break;
 8000b60:	bf00      	nop
        }
    }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000c670 	.word	0x2000c670
 8000b70:	200000ec 	.word	0x200000ec
 8000b74:	2000c66c 	.word	0x2000c66c
 8000b78:	080099bc 	.word	0x080099bc
 8000b7c:	2000c91c 	.word	0x2000c91c
 8000b80:	080099e4 	.word	0x080099e4
 8000b84:	08009a0c 	.word	0x08009a0c
 8000b88:	08009a34 	.word	0x08009a34
 8000b8c:	08009a5c 	.word	0x08009a5c

08000b90 <APP_CANFDSPI_Init>:

/***************************************************************************************************************
*     A P P _ C A N F D S P I _ I n i t                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_CANFDSPI_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    // Reset device
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f001 f955 	bl	8001e44 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f002 fb62 	bl	8003264 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 8000ba0:	21ff      	movs	r1, #255	; 0xff
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f002 fb92 	bl	80032cc <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8000ba8:	4845      	ldr	r0, [pc, #276]	; (8000cc0 <APP_CANFDSPI_Init+0x130>)
 8000baa:	f001 fd37 	bl	800261c <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 8000bae:	4a44      	ldr	r2, [pc, #272]	; (8000cc0 <APP_CANFDSPI_Init+0x130>)
 8000bb0:	7813      	ldrb	r3, [r2, #0]
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 8000bb8:	4a41      	ldr	r2, [pc, #260]	; (8000cc0 <APP_CANFDSPI_Init+0x130>)
 8000bba:	7853      	ldrb	r3, [r2, #1]
 8000bbc:	f36f 1386 	bfc	r3, #6, #1
 8000bc0:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 8000bc2:	493f      	ldr	r1, [pc, #252]	; (8000cc0 <APP_CANFDSPI_Init+0x130>)
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f001 fc9b 	bl	8002500 <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8000bca:	483e      	ldr	r0, [pc, #248]	; (8000cc4 <APP_CANFDSPI_Init+0x134>)
 8000bcc:	f001 fe36 	bl	800283c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 8000bd0:	4a3c      	ldr	r2, [pc, #240]	; (8000cc4 <APP_CANFDSPI_Init+0x134>)
 8000bd2:	7853      	ldrb	r3, [r2, #1]
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	f361 0304 	bfi	r3, r1, #0, #5
 8000bda:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 8000bdc:	4a39      	ldr	r2, [pc, #228]	; (8000cc4 <APP_CANFDSPI_Init+0x134>)
 8000bde:	7853      	ldrb	r3, [r2, #1]
 8000be0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000be4:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <APP_CANFDSPI_Init+0x134>)
 8000be8:	7813      	ldrb	r3, [r2, #0]
 8000bea:	2101      	movs	r1, #1
 8000bec:	f361 0345 	bfi	r3, r1, #1, #5
 8000bf0:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 8000bf2:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <APP_CANFDSPI_Init+0x134>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f001 fdc8 	bl	800278c <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8000bfc:	4832      	ldr	r0, [pc, #200]	; (8000cc8 <APP_CANFDSPI_Init+0x138>)
 8000bfe:	f002 f889 	bl	8002d14 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <APP_CANFDSPI_Init+0x138>)
 8000c04:	7813      	ldrb	r3, [r2, #0]
 8000c06:	210f      	movs	r1, #15
 8000c08:	f361 0345 	bfi	r3, r1, #1, #5
 8000c0c:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8000c0e:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <APP_CANFDSPI_Init+0x138>)
 8000c10:	8813      	ldrh	r3, [r2, #0]
 8000c12:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8000c16:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxConfig);
 8000c18:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <APP_CANFDSPI_Init+0x138>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f002 f82d 	bl	8002c7c <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <APP_CANFDSPI_Init+0x13c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
    //fObj.bF.SID = 0xda;
    fObj.bF.SID = 0x00;
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <APP_CANFDSPI_Init+0x13c>)
 8000c2a:	8813      	ldrh	r3, [r2, #0]
 8000c2c:	f36f 030a 	bfc	r3, #0, #11
 8000c30:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 8000c32:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <APP_CANFDSPI_Init+0x13c>)
 8000c34:	78d3      	ldrb	r3, [r2, #3]
 8000c36:	f36f 1386 	bfc	r3, #6, #1
 8000c3a:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 8000c3c:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <APP_CANFDSPI_Init+0x13c>)
 8000c3e:	6813      	ldr	r3, [r2, #0]
 8000c40:	f36f 23dc 	bfc	r3, #11, #18
 8000c44:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &fObj.bF);
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <APP_CANFDSPI_Init+0x13c>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f001 ff97 	bl	8002b7e <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <APP_CANFDSPI_Init+0x140>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x0;
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <APP_CANFDSPI_Init+0x140>)
 8000c58:	8813      	ldrh	r3, [r2, #0]
 8000c5a:	f36f 030a 	bfc	r3, #0, #11
 8000c5e:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <APP_CANFDSPI_Init+0x140>)
 8000c62:	78d3      	ldrb	r3, [r2, #3]
 8000c64:	f36f 1386 	bfc	r3, #6, #1
 8000c68:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <APP_CANFDSPI_Init+0x140>)
 8000c6c:	6813      	ldr	r3, [r2, #0]
 8000c6e:	f36f 23dc 	bfc	r3, #11, #18
 8000c72:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &mObj.bF);
 8000c74:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <APP_CANFDSPI_Init+0x140>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 ffa2 	bl	8002bc2 <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, APP_RX_FIFO, true);
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 ffc0 	bl	8002c0a <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2000      	movs	r0, #0
 8000c92:	f002 fb5b 	bl	800334c <DRV_CANFDSPI_BitTimeConfigure>

    // Setup Transmit and Receive Interrupts
    DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_0, GPIO_MODE_INT, GPIO_MODE_INT);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f003 fa74 	bl	8004188 <DRV_CANFDSPI_GpioModeConfigure>
	#ifdef APP_USE_TX_INT
    DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
	#endif
    DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f002 fa5d 	bl	8003164 <DRV_CANFDSPI_ReceiveChannelEventEnable>
    DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_0, CAN_TX_EVENT | CAN_RX_EVENT);
 8000caa:	2103      	movs	r1, #3
 8000cac:	2000      	movs	r0, #0
 8000cae:	f002 f9ad 	bl	800300c <DRV_CANFDSPI_ModuleEventEnable>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f001 fd2d 	bl	8002714 <DRV_CANFDSPI_OperationModeSelect>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000c674 	.word	0x2000c674
 8000cc4:	2000c678 	.word	0x2000c678
 8000cc8:	2000c6cc 	.word	0x2000c6cc
 8000ccc:	2000c6d0 	.word	0x2000c6d0
 8000cd0:	2000c6d4 	.word	0x2000c6d4

08000cd4 <APP_ReceiveMessage_Tasks>:

/***************************************************************************************************************
*     A P P _ R e c e i v e M e s s a g e _ T a s k s                                  P A C K   E M U L A T O R
***************************************************************************************************************/
APP_STATES APP_ReceiveMessage_Tasks(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8
    APP_STATES nextState;
    // CANFRM_REGISTER registration;
    //uint8_t index;

    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 8000cda:	4a34      	ldr	r2, [pc, #208]	; (8000dac <APP_ReceiveMessage_Tasks+0xd8>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f002 fa07 	bl	80030f2 <DRV_CANFDSPI_ReceiveChannelEventGet>

    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000ce4:	e051      	b.n	8000d8a <APP_ReceiveMessage_Tasks+0xb6>

      // Get message
      DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <APP_ReceiveMessage_Tasks+0xdc>)
 8000cec:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <APP_ReceiveMessage_Tasks+0xe0>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f002 f839 	bl	8002d68 <DRV_CANFDSPI_ReceiveMessageGet>

      switch (rxObj.bF.id.SID) {
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <APP_ReceiveMessage_Tasks+0xe0>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d83a      	bhi.n	8000d7e <APP_ReceiveMessage_Tasks+0xaa>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <APP_ReceiveMessage_Tasks+0x3c>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d6f 	.word	0x08000d6f
 8000d18:	08000d69 	.word	0x08000d69
 8000d1c:	08000d7f 	.word	0x08000d7f
 8000d20:	08000d75 	.word	0x08000d75
 8000d24:	08000d63 	.word	0x08000d63
 8000d28:	08000d7b 	.word	0x08000d7b
 8000d2c:	08000d7f 	.word	0x08000d7f
 8000d30:	08000d7f 	.word	0x08000d7f
 8000d34:	08000d7f 	.word	0x08000d7f
 8000d38:	08000d7f 	.word	0x08000d7f
 8000d3c:	08000d7f 	.word	0x08000d7f
 8000d40:	08000d7f 	.word	0x08000d7f
 8000d44:	08000d7f 	.word	0x08000d7f
 8000d48:	08000d57 	.word	0x08000d57
 8000d4c:	08000d5d 	.word	0x08000d5d
        case ID_MODULE_REGISTRATION:
          APP_RegisterModule();
 8000d50:	f000 feb4 	bl	8001abc <APP_RegisterModule>
          break;
 8000d54:	e014      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_ALL_DEREGISTER   :
          APP_DeRegisterAllModules();
 8000d56:	f000 ff31 	bl	8001bbc <APP_DeRegisterAllModules>
          break;
 8000d5a:	e011      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_ALL_ISOLATE      :
          APP_IsolateAllModules();
 8000d5c:	f000 ff5a 	bl	8001c14 <APP_IsolateAllModules>
          break;
 8000d60:	e00e      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_DETAIL_REQUEST   :
          APP_ReplyToCellDetailRequest();
 8000d62:	f000 fdbd 	bl	80018e0 <APP_ReplyToCellDetailRequest>
          break;
 8000d66:	e00b      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_STATUS_REQUEST   :
          APP_ReplyToStatusRequest();
 8000d68:	f000 fcc0 	bl	80016ec <APP_ReplyToStatusRequest>
          break;
 8000d6c:	e008      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_HARDWARE_REQUEST:
          APP_ProcessHardwareRequest();
 8000d6e:	f000 fc77 	bl	8001660 <APP_ProcessHardwareRequest>
          break;
 8000d72:	e005      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_STATE_CHANGE   :
          APP_StateChange();
 8000d74:	f000 fd08 	bl	8001788 <APP_StateChange>
          break;
 8000d78:	e002      	b.n	8000d80 <APP_ReceiveMessage_Tasks+0xac>
        case ID_MODULE_TIME :
          APP_ProcessTime();
 8000d7a:	f000 fd6b 	bl	8001854 <APP_ProcessTime>
        default:
          break;
 8000d7e:	bf00      	nop
      }

      // check for any more messages
      DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <APP_ReceiveMessage_Tasks+0xd8>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2000      	movs	r0, #0
 8000d86:	f002 f9b4 	bl	80030f2 <DRV_CANFDSPI_ReceiveChannelEventGet>
    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <APP_ReceiveMessage_Tasks+0xd8>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1a7      	bne.n	8000ce6 <APP_ReceiveMessage_Tasks+0x12>
    }

    //    APP_LED_Clear(APP_RX_LED);

    nextState = APP_STATE_IDLE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
    canRxInterrupt = 0;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <APP_ReceiveMessage_Tasks+0xe4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]


    return nextState;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000c6d8 	.word	0x2000c6d8
 8000db0:	2000c6e8 	.word	0x2000c6e8
 8000db4:	2000c6dc 	.word	0x2000c6dc
 8000db8:	2000c980 	.word	0x2000c980

08000dbc <APP_TransmitMessageQueue>:
/***************************************************************************************************************
*     A P P _ T r a n s m i t M e s s a g e Q u e u e                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitMessageQueue(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af02      	add	r7, sp, #8
  APP_LED_Set(APP_TX_LED);
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f7ff fc66 	bl	8000694 <APP_LED_Set>

  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8000dc8:	2332      	movs	r3, #50	; 0x32
 8000dca:	71fb      	strb	r3, [r7, #7]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 8000dcc:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <APP_TransmitMessageQueue+0x98>)
 8000dce:	2102      	movs	r1, #2
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f002 f95b 	bl	800308c <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d117      	bne.n	8000e0c <APP_TransmitMessageQueue+0x50>
        Nop();
 8000ddc:	bf00      	nop
        Nop();
 8000dde:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(DRV_CANFDSPI_INDEX_0, &tec, &rec, &errorFlags);
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <APP_TransmitMessageQueue+0x9c>)
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <APP_TransmitMessageQueue+0xa0>)
 8000de4:	491e      	ldr	r1, [pc, #120]	; (8000e60 <APP_TransmitMessageQueue+0xa4>)
 8000de6:	2000      	movs	r0, #0
 8000de8:	f002 fa0a 	bl	8003200 <DRV_CANFDSPI_ErrorCountStateGet>
        sprintf(tempBuffer,"TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);
 8000dec:	491d      	ldr	r1, [pc, #116]	; (8000e64 <APP_TransmitMessageQueue+0xa8>)
 8000dee:	481e      	ldr	r0, [pc, #120]	; (8000e68 <APP_TransmitMessageQueue+0xac>)
 8000df0:	f006 fabe 	bl	8007370 <siprintf>
 8000df4:	481c      	ldr	r0, [pc, #112]	; (8000e68 <APP_TransmitMessageQueue+0xac>)
 8000df6:	f003 fa4f 	bl	8004298 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO);
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f001 fe4b 	bl	8002a98 <DRV_CANFDSPI_TransmitChannelFlush>
        DRV_CANFDSPI_TransmitChannelReset(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO);
 8000e02:	2102      	movs	r1, #2
 8000e04:	2000      	movs	r0, #0
 8000e06:	f001 fe71 	bl	8002aec <DRV_CANFDSPI_TransmitChannelReset>

        return;
 8000e0a:	e01f      	b.n	8000e4c <APP_TransmitMessageQueue+0x90>
    }
    attempts--;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	71fb      	strb	r3, [r7, #7]
  }
  while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <APP_TransmitMessageQueue+0x98>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0d6      	beq.n	8000dcc <APP_TransmitMessageQueue+0x10>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <APP_TransmitMessageQueue+0xb0>)
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 f9f5 	bl	8004218 <DRV_CANFDSPI_DlcToDataBytes>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71bb      	strb	r3, [r7, #6]

  DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, true);
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	2201      	movs	r2, #1
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <APP_TransmitMessageQueue+0xb4>)
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <APP_TransmitMessageQueue+0xb0>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	2000      	movs	r0, #0
 8000e42:	f001 fd37 	bl	80028b4 <DRV_CANFDSPI_TransmitChannelLoad>

  APP_LED_Clear(APP_TX_LED);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff fbf8 	bl	800063c <APP_LED_Clear>
}
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000c67c 	.word	0x2000c67c
 8000e58:	2000c72c 	.word	0x2000c72c
 8000e5c:	2000c72b 	.word	0x2000c72b
 8000e60:	2000c72a 	.word	0x2000c72a
 8000e64:	08009a60 	.word	0x08009a60
 8000e68:	2000c91c 	.word	0x2000c91c
 8000e6c:	2000c680 	.word	0x2000c680
 8000e70:	2000c68c 	.word	0x2000c68c

08000e74 <APP_AnnounceUnregisteredModules>:

/***************************************************************************************************************
*     A P P _ A n n o u n c e U n r e g i s t e r e d M o d u l e s                    P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_AnnounceUnregisteredModules(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8

  uint8_t index;
  CANFRM_MODULE_ANNOUNCEMENT announcement;

  // check for unregistered modules and send out ANNOUNCE packets
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e084      	b.n	8000f8a <APP_AnnounceUnregisteredModules+0x116>
    if((module[index].uniqueId != 0) && (module[index].moduleId == 0)){
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <APP_AnnounceUnregisteredModules+0x128>)
 8000e84:	f240 612c 	movw	r1, #1580	; 0x62c
 8000e88:	fb01 f303 	mul.w	r3, r1, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3304      	adds	r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d076      	beq.n	8000f84 <APP_AnnounceUnregisteredModules+0x110>
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4a40      	ldr	r2, [pc, #256]	; (8000f9c <APP_AnnounceUnregisteredModules+0x128>)
 8000e9a:	f240 612c 	movw	r1, #1580	; 0x62c
 8000e9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d16b      	bne.n	8000f84 <APP_AnnounceUnregisteredModules+0x110>

      announcement.moduleFw = module[index].fwVersion;        // fill in the details
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	4a3b      	ldr	r2, [pc, #236]	; (8000f9c <APP_AnnounceUnregisteredModules+0x128>)
 8000eb0:	f240 612c 	movw	r1, #1580	; 0x62c
 8000eb4:	fb01 f303 	mul.w	r3, r1, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	330a      	adds	r3, #10
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	80bb      	strh	r3, [r7, #4]
      announcement.modulePartId = module[index].partId;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4a36      	ldr	r2, [pc, #216]	; (8000f9c <APP_AnnounceUnregisteredModules+0x128>)
 8000ec4:	f240 612c 	movw	r1, #1580	; 0x62c
 8000ec8:	fb01 f303 	mul.w	r3, r1, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	3301      	adds	r3, #1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
      announcement.moduleMfgId = module[index].mfgId;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <APP_AnnounceUnregisteredModules+0x128>)
 8000ed8:	f240 612c 	movw	r1, #1580	; 0x62c
 8000edc:	fb01 f303 	mul.w	r3, r1, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	71bb      	strb	r3, [r7, #6]
      announcement.moduleUniqueId = module[index].uniqueId;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <APP_AnnounceUnregisteredModules+0x128>)
 8000eea:	f240 612c 	movw	r1, #1580	; 0x62c
 8000eee:	fb01 f303 	mul.w	r3, r1, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60bb      	str	r3, [r7, #8]

      txObj.word[0] = 0;                              // Configure transmit message
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
      txObj.word[1] = 0;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]

      memcpy(txd, &announcement, sizeof(announcement));
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <APP_AnnounceUnregisteredModules+0x130>)
 8000f08:	461a      	mov	r2, r3
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f10:	e882 0003 	stmia.w	r2, {r0, r1}

      txObj.bF.id.SID = ID_MODULE_ANNOUNCEMENT     ;  // Standard ID
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f16:	8813      	ldrh	r3, [r2, #0]
 8000f18:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f1c:	f361 030a 	bfi	r3, r1, #0, #11
 8000f20:	8013      	strh	r3, [r2, #0]
      txObj.bF.id.EID = 0;                            // Extended ID
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	f36f 23dc 	bfc	r3, #11, #18
 8000f2a:	6013      	str	r3, [r2, #0]

      txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f2e:	7913      	ldrb	r3, [r2, #4]
 8000f30:	f36f 1386 	bfc	r3, #6, #1
 8000f34:	7113      	strb	r3, [r2, #4]
      txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f38:	7913      	ldrb	r3, [r2, #4]
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	f361 0303 	bfi	r3, r1, #0, #4
 8000f40:	7113      	strb	r3, [r2, #4]
      txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f44:	7913      	ldrb	r3, [r2, #4]
 8000f46:	f36f 13c7 	bfc	r3, #7, #1
 8000f4a:	7113      	strb	r3, [r2, #4]
      txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <APP_AnnounceUnregisteredModules+0x12c>)
 8000f4e:	7913      	ldrb	r3, [r2, #4]
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	7113      	strb	r3, [r2, #4]

      sprintf(tempBuffer,"TX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, ID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	9201      	str	r2, [sp, #4]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	490f      	ldr	r1, [pc, #60]	; (8000fa8 <APP_AnnounceUnregisteredModules+0x134>)
 8000f6c:	480f      	ldr	r0, [pc, #60]	; (8000fac <APP_AnnounceUnregisteredModules+0x138>)
 8000f6e:	f006 f9ff 	bl	8007370 <siprintf>
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <APP_AnnounceUnregisteredModules+0x138>)
 8000f74:	f003 f990 	bl	8004298 <serialOut>

      APP_TransmitMessageQueue();                     // Send it
 8000f78:	f7ff ff20 	bl	8000dbc <APP_TransmitMessageQueue>

      HAL_Delay(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f003 fea8 	bl	8004cd4 <HAL_Delay>
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b1f      	cmp	r3, #31
 8000f8e:	f67f af77 	bls.w	8000e80 <APP_AnnounceUnregisteredModules+0xc>
    }
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000ec 	.word	0x200000ec
 8000fa0:	2000c680 	.word	0x2000c680
 8000fa4:	2000c68c 	.word	0x2000c68c
 8000fa8:	08009a8c 	.word	0x08009a8c
 8000fac:	2000c91c 	.word	0x2000c91c

08000fb0 <APP_RequestTime>:


/***************************************************************************************************************
*     A P P _ R e q u e s t T i m e                                                    P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_RequestTime(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  txObj.word[0] = 0;                              // Configure transmit message
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <APP_RequestTime+0x6c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <APP_RequestTime+0x6c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <APP_RequestTime+0x6c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]

  txObj.bF.id.SID = ID_MODULE_TIME_REQUEST ;      // Standard ID
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <APP_RequestTime+0x6c>)
 8000fc8:	8813      	ldrh	r3, [r2, #0]
 8000fca:	f240 5106 	movw	r1, #1286	; 0x506
 8000fce:	f361 030a 	bfi	r3, r1, #0, #11
 8000fd2:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;       // Extended ID
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <APP_RequestTime+0x6c>)
 8000fd6:	6813      	ldr	r3, [r2, #0]
 8000fd8:	f36f 23dc 	bfc	r3, #11, #18
 8000fdc:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <APP_RequestTime+0x6c>)
 8000fe0:	7913      	ldrb	r3, [r2, #4]
 8000fe2:	f36f 1386 	bfc	r3, #6, #1
 8000fe6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_0;                  // 8 bytes to transmit
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <APP_RequestTime+0x6c>)
 8000fea:	7913      	ldrb	r3, [r2, #4]
 8000fec:	f36f 0303 	bfc	r3, #0, #4
 8000ff0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <APP_RequestTime+0x6c>)
 8000ff4:	7913      	ldrb	r3, [r2, #4]
 8000ff6:	f36f 13c7 	bfc	r3, #7, #1
 8000ffa:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <APP_RequestTime+0x6c>)
 8000ffe:	7913      	ldrb	r3, [r2, #4]
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x506 Time Request"); serialOut(tempBuffer);
 8001006:	4906      	ldr	r1, [pc, #24]	; (8001020 <APP_RequestTime+0x70>)
 8001008:	4806      	ldr	r0, [pc, #24]	; (8001024 <APP_RequestTime+0x74>)
 800100a:	f006 f9b1 	bl	8007370 <siprintf>
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <APP_RequestTime+0x74>)
 8001010:	f003 f942 	bl	8004298 <serialOut>

  APP_TransmitMessageQueue();                     // Send it
 8001014:	f7ff fed2 	bl	8000dbc <APP_TransmitMessageQueue>

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000c680 	.word	0x2000c680
 8001020:	08009ac8 	.word	0x08009ac8
 8001024:	2000c91c 	.word	0x2000c91c

08001028 <APP_TransmitHardware>:

/***************************************************************************************************************
*     A P P _ T  r a n s m i t H a r d w a r e                                         P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitHardware(uint8_t index){
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_HARDWARE hardware;
  memset(&hardware,0,sizeof(hardware));
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2208      	movs	r2, #8
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f006 f9fd 	bl	800743a <memset>

  hardware.hwVersion = module[index].hwVersion;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a51      	ldr	r2, [pc, #324]	; (8001188 <APP_TransmitHardware+0x160>)
 8001044:	f240 612c 	movw	r1, #1580	; 0x62c
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	4413      	add	r3, r2
 800104e:	330c      	adds	r3, #12
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	81fb      	strh	r3, [r7, #14]
  hardware.maxChargeA = module[index].maxChargeA;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <APP_TransmitHardware+0x160>)
 8001058:	f240 612c 	movw	r1, #1580	; 0x62c
 800105c:	fb01 f303 	mul.w	r3, r1, r3
 8001060:	4413      	add	r3, r2
 8001062:	330e      	adds	r3, #14
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	813b      	strh	r3, [r7, #8]
  hardware.maxDischargeA = module[index].maxDischargeA;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a47      	ldr	r2, [pc, #284]	; (8001188 <APP_TransmitHardware+0x160>)
 800106c:	f240 612c 	movw	r1, #1580	; 0x62c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3310      	adds	r3, #16
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	817b      	strh	r3, [r7, #10]
  hardware.maxChargeEndV = module[index].maxChargeEndV;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a42      	ldr	r2, [pc, #264]	; (8001188 <APP_TransmitHardware+0x160>)
 8001080:	f240 612c 	movw	r1, #1580	; 0x62c
 8001084:	fb01 f303 	mul.w	r3, r1, r3
 8001088:	4413      	add	r3, r2
 800108a:	3312      	adds	r3, #18
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	81bb      	strh	r3, [r7, #12]


  txObj.word[0] = 0;                              // Configure transmit message
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <APP_TransmitHardware+0x164>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <APP_TransmitHardware+0x164>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800109c:	4b3b      	ldr	r3, [pc, #236]	; (800118c <APP_TransmitHardware+0x164>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]

  memcpy(txd, &hardware, sizeof(hardware));
 80010a2:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <APP_TransmitHardware+0x168>)
 80010a4:	461a      	mov	r2, r3
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010ae:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_HARDWARE ;          // Standard ID
 80010b2:	4a36      	ldr	r2, [pc, #216]	; (800118c <APP_TransmitHardware+0x164>)
 80010b4:	8813      	ldrh	r3, [r2, #0]
 80010b6:	f240 5101 	movw	r1, #1281	; 0x501
 80010ba:	f361 030a 	bfi	r3, r1, #0, #11
 80010be:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;       // Extended ID
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4a31      	ldr	r2, [pc, #196]	; (8001188 <APP_TransmitHardware+0x160>)
 80010c4:	f240 612c 	movw	r1, #1580	; 0x62c
 80010c8:	fb01 f303 	mul.w	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	3308      	adds	r3, #8
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80010d8:	492c      	ldr	r1, [pc, #176]	; (800118c <APP_TransmitHardware+0x164>)
 80010da:	680b      	ldr	r3, [r1, #0]
 80010dc:	f362 23dc 	bfi	r3, r2, #11, #18
 80010e0:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <APP_TransmitHardware+0x164>)
 80010e4:	7913      	ldrb	r3, [r2, #4]
 80010e6:	f36f 1386 	bfc	r3, #6, #1
 80010ea:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                 // 8 bytes to transmit
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <APP_TransmitHardware+0x164>)
 80010ee:	7913      	ldrb	r3, [r2, #4]
 80010f0:	2108      	movs	r1, #8
 80010f2:	f361 0303 	bfi	r3, r1, #0, #4
 80010f6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <APP_TransmitHardware+0x164>)
 80010fa:	7913      	ldrb	r3, [r2, #4]
 80010fc:	f36f 13c7 	bfc	r3, #7, #1
 8001100:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <APP_TransmitHardware+0x164>)
 8001104:	7913      	ldrb	r3, [r2, #4]
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x501 Hardware: ID=%02x, CHA=%d, DCA=%d, CHV=%d, HW=%d",
          rxObj.bF.id.EID, module[index].maxChargeA, module[index].maxDischargeA,  module[index].maxChargeEndV,module[index].hwVersion); serialOut(tempBuffer);
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <APP_TransmitHardware+0x16c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f3c3 23d1 	ubfx	r3, r3, #11, #18
  sprintf(tempBuffer,"TX 0x501 Hardware: ID=%02x, CHA=%d, DCA=%d, CHV=%d, HW=%d",
 8001114:	461d      	mov	r5, r3
          rxObj.bF.id.EID, module[index].maxChargeA, module[index].maxDischargeA,  module[index].maxChargeEndV,module[index].hwVersion); serialOut(tempBuffer);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <APP_TransmitHardware+0x160>)
 800111a:	f240 612c 	movw	r1, #1580	; 0x62c
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	330e      	adds	r3, #14
 8001126:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x501 Hardware: ID=%02x, CHA=%d, DCA=%d, CHV=%d, HW=%d",
 8001128:	461e      	mov	r6, r3
          rxObj.bF.id.EID, module[index].maxChargeA, module[index].maxDischargeA,  module[index].maxChargeEndV,module[index].hwVersion); serialOut(tempBuffer);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a16      	ldr	r2, [pc, #88]	; (8001188 <APP_TransmitHardware+0x160>)
 800112e:	f240 612c 	movw	r1, #1580	; 0x62c
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	4413      	add	r3, r2
 8001138:	3310      	adds	r3, #16
 800113a:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x501 Hardware: ID=%02x, CHA=%d, DCA=%d, CHV=%d, HW=%d",
 800113c:	4618      	mov	r0, r3
          rxObj.bF.id.EID, module[index].maxChargeA, module[index].maxDischargeA,  module[index].maxChargeEndV,module[index].hwVersion); serialOut(tempBuffer);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <APP_TransmitHardware+0x160>)
 8001142:	f240 612c 	movw	r1, #1580	; 0x62c
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	4413      	add	r3, r2
 800114c:	3312      	adds	r3, #18
 800114e:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x501 Hardware: ID=%02x, CHA=%d, DCA=%d, CHV=%d, HW=%d",
 8001150:	461c      	mov	r4, r3
          rxObj.bF.id.EID, module[index].maxChargeA, module[index].maxDischargeA,  module[index].maxChargeEndV,module[index].hwVersion); serialOut(tempBuffer);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <APP_TransmitHardware+0x160>)
 8001156:	f240 612c 	movw	r1, #1580	; 0x62c
 800115a:	fb01 f303 	mul.w	r3, r1, r3
 800115e:	4413      	add	r3, r2
 8001160:	330c      	adds	r3, #12
 8001162:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x501 Hardware: ID=%02x, CHA=%d, DCA=%d, CHV=%d, HW=%d",
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	9401      	str	r4, [sp, #4]
 8001168:	9000      	str	r0, [sp, #0]
 800116a:	4633      	mov	r3, r6
 800116c:	462a      	mov	r2, r5
 800116e:	490a      	ldr	r1, [pc, #40]	; (8001198 <APP_TransmitHardware+0x170>)
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <APP_TransmitHardware+0x174>)
 8001172:	f006 f8fd 	bl	8007370 <siprintf>
          rxObj.bF.id.EID, module[index].maxChargeA, module[index].maxDischargeA,  module[index].maxChargeEndV,module[index].hwVersion); serialOut(tempBuffer);
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <APP_TransmitHardware+0x174>)
 8001178:	f003 f88e 	bl	8004298 <serialOut>

  APP_TransmitMessageQueue();                     // Send it
 800117c:	f7ff fe1e 	bl	8000dbc <APP_TransmitMessageQueue>

}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001188:	200000ec 	.word	0x200000ec
 800118c:	2000c680 	.word	0x2000c680
 8001190:	2000c68c 	.word	0x2000c68c
 8001194:	2000c6dc 	.word	0x2000c6dc
 8001198:	08009ae0 	.word	0x08009ae0
 800119c:	2000c91c 	.word	0x2000c91c

080011a0 <APP_TransmitStatus1>:


/***************************************************************************************************************
*     A P P _ T  r a n s m i t S t a t u s 1                                           P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitStatus1(uint8_t index){
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af06      	add	r7, sp, #24
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_STATUS_1 status;
  memset(&status,0,sizeof(status));
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2208      	movs	r2, #8
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 f941 	bl	800743a <memset>

  status.moduleState = module[index].state;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a7a      	ldr	r2, [pc, #488]	; (80013a4 <APP_TransmitStatus1+0x204>)
 80011bc:	f240 612c 	movw	r1, #1580	; 0x62c
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	3324      	adds	r3, #36	; 0x24
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	f362 0303 	bfi	r3, r2, #0, #4
 80011d6:	723b      	strb	r3, [r7, #8]
  status.moduleSoc = module[index].soc;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <APP_TransmitStatus1+0x204>)
 80011dc:	f240 612c 	movw	r1, #1580	; 0x62c
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	3326      	adds	r3, #38	; 0x26
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	727b      	strb	r3, [r7, #9]
  status.cellCount = module[index].cellCount;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a6d      	ldr	r2, [pc, #436]	; (80013a4 <APP_TransmitStatus1+0x204>)
 80011f0:	f240 612c 	movw	r1, #1580	; 0x62c
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	3328      	adds	r3, #40	; 0x28
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	72fb      	strb	r3, [r7, #11]
  status.moduleSoh = module[index].soh;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a68      	ldr	r2, [pc, #416]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001204:	f240 612c 	movw	r1, #1580	; 0x62c
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	3327      	adds	r3, #39	; 0x27
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	72bb      	strb	r3, [r7, #10]
  status.moduleMmc = module[index].mmc;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4a63      	ldr	r2, [pc, #396]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001218:	f240 612c 	movw	r1, #1580	; 0x62c
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	3316      	adds	r3, #22
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	81bb      	strh	r3, [r7, #12]
  status.moduleMmv = module[index].mmv;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a5e      	ldr	r2, [pc, #376]	; (80013a4 <APP_TransmitStatus1+0x204>)
 800122c:	f240 612c 	movw	r1, #1580	; 0x62c
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	4413      	add	r3, r2
 8001236:	3314      	adds	r3, #20
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	81fb      	strh	r3, [r7, #14]
  status.moduleStatus = module[index].status;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4a59      	ldr	r2, [pc, #356]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001240:	f240 612c 	movw	r1, #1580	; 0x62c
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	4413      	add	r3, r2
 800124a:	3325      	adds	r3, #37	; 0x25
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	b2da      	uxtb	r2, r3
 8001254:	7a3b      	ldrb	r3, [r7, #8]
 8001256:	f362 1307 	bfi	r3, r2, #4, #4
 800125a:	723b      	strb	r3, [r7, #8]

  txObj.word[0] = 0;                              // Configure transmit message
 800125c:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <APP_TransmitStatus1+0x208>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001262:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <APP_TransmitStatus1+0x208>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8001268:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <APP_TransmitStatus1+0x208>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]

  memcpy(txd, &status, sizeof(status));
 800126e:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <APP_TransmitStatus1+0x20c>)
 8001270:	461a      	mov	r2, r3
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	e893 0003 	ldmia.w	r3, {r0, r1}
 800127a:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_STATUS_1 ;          // Standard ID
 800127e:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <APP_TransmitStatus1+0x208>)
 8001280:	8813      	ldrh	r3, [r2, #0]
 8001282:	f240 5102 	movw	r1, #1282	; 0x502
 8001286:	f361 030a 	bfi	r3, r1, #0, #11
 800128a:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;       // Extended ID
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001290:	f240 612c 	movw	r1, #1580	; 0x62c
 8001294:	fb01 f303 	mul.w	r3, r1, r3
 8001298:	4413      	add	r3, r2
 800129a:	3308      	adds	r3, #8
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80012a4:	4940      	ldr	r1, [pc, #256]	; (80013a8 <APP_TransmitStatus1+0x208>)
 80012a6:	680b      	ldr	r3, [r1, #0]
 80012a8:	f362 23dc 	bfi	r3, r2, #11, #18
 80012ac:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80012ae:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <APP_TransmitStatus1+0x208>)
 80012b0:	7913      	ldrb	r3, [r2, #4]
 80012b2:	f36f 1386 	bfc	r3, #6, #1
 80012b6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                 // 8 bytes to transmit
 80012b8:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <APP_TransmitStatus1+0x208>)
 80012ba:	7913      	ldrb	r3, [r2, #4]
 80012bc:	2108      	movs	r1, #8
 80012be:	f361 0303 	bfi	r3, r1, #0, #4
 80012c2:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80012c4:	4a38      	ldr	r2, [pc, #224]	; (80013a8 <APP_TransmitStatus1+0x208>)
 80012c6:	7913      	ldrb	r3, [r2, #4]
 80012c8:	f36f 13c7 	bfc	r3, #7, #1
 80012cc:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80012ce:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <APP_TransmitStatus1+0x208>)
 80012d0:	7913      	ldrb	r3, [r2, #4]
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <APP_TransmitStatus1+0x204>)
 80012dc:	f240 612c 	movw	r1, #1580	; 0x62c
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	3308      	adds	r3, #8
 80012e8:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 80012ea:	469c      	mov	ip, r3
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a2d      	ldr	r2, [pc, #180]	; (80013a4 <APP_TransmitStatus1+0x204>)
 80012f0:	f240 612c 	movw	r1, #1580	; 0x62c
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	3324      	adds	r3, #36	; 0x24
 80012fc:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 80012fe:	469e      	mov	lr, r3
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001304:	f240 612c 	movw	r1, #1580	; 0x62c
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	4413      	add	r3, r2
 800130e:	3325      	adds	r3, #37	; 0x25
 8001310:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8001312:	4618      	mov	r0, r3
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001318:	f240 612c 	movw	r1, #1580	; 0x62c
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	4413      	add	r3, r2
 8001322:	3328      	adds	r3, #40	; 0x28
 8001324:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8001326:	461c      	mov	r4, r3
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <APP_TransmitStatus1+0x204>)
 800132c:	f240 612c 	movw	r1, #1580	; 0x62c
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	4413      	add	r3, r2
 8001336:	3314      	adds	r3, #20
 8001338:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 800133a:	461d      	mov	r5, r3
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001340:	f240 612c 	movw	r1, #1580	; 0x62c
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	4413      	add	r3, r2
 800134a:	3316      	adds	r3, #22
 800134c:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 800134e:	461e      	mov	r6, r3
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001354:	f240 612c 	movw	r1, #1580	; 0x62c
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	4413      	add	r3, r2
 800135e:	3326      	adds	r3, #38	; 0x26
 8001360:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8001362:	603b      	str	r3, [r7, #0]
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <APP_TransmitStatus1+0x204>)
 8001368:	f240 612c 	movw	r1, #1580	; 0x62c
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	3326      	adds	r3, #38	; 0x26
 8001374:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8001376:	9305      	str	r3, [sp, #20]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	9304      	str	r3, [sp, #16]
 800137c:	9603      	str	r6, [sp, #12]
 800137e:	9502      	str	r5, [sp, #8]
 8001380:	9401      	str	r4, [sp, #4]
 8001382:	9000      	str	r0, [sp, #0]
 8001384:	4673      	mov	r3, lr
 8001386:	4662      	mov	r2, ip
 8001388:	4909      	ldr	r1, [pc, #36]	; (80013b0 <APP_TransmitStatus1+0x210>)
 800138a:	480a      	ldr	r0, [pc, #40]	; (80013b4 <APP_TransmitStatus1+0x214>)
 800138c:	f005 fff0 	bl	8007370 <siprintf>
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <APP_TransmitStatus1+0x214>)
 8001392:	f002 ff81 	bl	8004298 <serialOut>


  APP_TransmitMessageQueue();                     // Send it
 8001396:	f7ff fd11 	bl	8000dbc <APP_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000ec 	.word	0x200000ec
 80013a8:	2000c680 	.word	0x2000c680
 80013ac:	2000c68c 	.word	0x2000c68c
 80013b0:	08009b1c 	.word	0x08009b1c
 80013b4:	2000c91c 	.word	0x2000c91c

080013b8 <APP_TransmitStatus2>:

/***************************************************************************************************************
*     A P P _ T  r a n s m i t S t a t u s 2                                           P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitStatus2(uint8_t index){
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_STATUS_2 status;
  memset(&status,0,sizeof(status));
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2208      	movs	r2, #8
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 f835 	bl	800743a <memset>

  status.cellAvgVolt = module[index].voltAvg;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a49      	ldr	r2, [pc, #292]	; (80014f8 <APP_TransmitStatus2+0x140>)
 80013d4:	f240 612c 	movw	r1, #1580	; 0x62c
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	3322      	adds	r3, #34	; 0x22
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	81bb      	strh	r3, [r7, #12]
  status.cellHiVolt = module[index].voltHi;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <APP_TransmitStatus2+0x140>)
 80013e8:	f240 612c 	movw	r1, #1580	; 0x62c
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	331e      	adds	r3, #30
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	817b      	strh	r3, [r7, #10]
  status.cellLoVolt = module[index].voltLo;
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <APP_TransmitStatus2+0x140>)
 80013fc:	f240 612c 	movw	r1, #1580	; 0x62c
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	3320      	adds	r3, #32
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	813b      	strh	r3, [r7, #8]

  txObj.word[0] = 0;                              // Configure transmit message
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <APP_TransmitStatus2+0x144>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <APP_TransmitStatus2+0x144>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <APP_TransmitStatus2+0x144>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]

  memcpy(txd, &status, sizeof(status));
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <APP_TransmitStatus2+0x148>)
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800142a:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_STATUS_2           ;          // Standard ID
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <APP_TransmitStatus2+0x144>)
 8001430:	8813      	ldrh	r3, [r2, #0]
 8001432:	f240 5103 	movw	r1, #1283	; 0x503
 8001436:	f361 030a 	bfi	r3, r1, #0, #11
 800143a:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;                 // Extended ID
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <APP_TransmitStatus2+0x140>)
 8001440:	f240 612c 	movw	r1, #1580	; 0x62c
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4413      	add	r3, r2
 800144a:	3308      	adds	r3, #8
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001454:	4929      	ldr	r1, [pc, #164]	; (80014fc <APP_TransmitStatus2+0x144>)
 8001456:	680b      	ldr	r3, [r1, #0]
 8001458:	f362 23dc 	bfi	r3, r2, #11, #18
 800145c:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <APP_TransmitStatus2+0x144>)
 8001460:	7913      	ldrb	r3, [r2, #4]
 8001462:	f36f 1386 	bfc	r3, #6, #1
 8001466:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_6;                  // 8 bytes to transmit
 8001468:	4a24      	ldr	r2, [pc, #144]	; (80014fc <APP_TransmitStatus2+0x144>)
 800146a:	7913      	ldrb	r3, [r2, #4]
 800146c:	2106      	movs	r1, #6
 800146e:	f361 0303 	bfi	r3, r1, #0, #4
 8001472:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <APP_TransmitStatus2+0x144>)
 8001476:	7913      	ldrb	r3, [r2, #4]
 8001478:	f36f 13c7 	bfc	r3, #7, #1
 800147c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <APP_TransmitStatus2+0x144>)
 8001480:	7913      	ldrb	r3, [r2, #4]
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <APP_TransmitStatus2+0x140>)
 800148c:	f240 612c 	movw	r1, #1580	; 0x62c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	3308      	adds	r3, #8
 8001498:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 800149a:	461c      	mov	r4, r3
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <APP_TransmitStatus2+0x140>)
 80014a0:	f240 612c 	movw	r1, #1580	; 0x62c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	331e      	adds	r3, #30
 80014ac:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 80014ae:	461d      	mov	r5, r3
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <APP_TransmitStatus2+0x140>)
 80014b4:	f240 612c 	movw	r1, #1580	; 0x62c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	3320      	adds	r3, #32
 80014c0:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 80014c2:	4618      	mov	r0, r3
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <APP_TransmitStatus2+0x140>)
 80014c8:	f240 612c 	movw	r1, #1580	; 0x62c
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	3322      	adds	r3, #34	; 0x22
 80014d4:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	9000      	str	r0, [sp, #0]
 80014da:	462b      	mov	r3, r5
 80014dc:	4622      	mov	r2, r4
 80014de:	4909      	ldr	r1, [pc, #36]	; (8001504 <APP_TransmitStatus2+0x14c>)
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <APP_TransmitStatus2+0x150>)
 80014e2:	f005 ff45 	bl	8007370 <siprintf>
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <APP_TransmitStatus2+0x150>)
 80014e8:	f002 fed6 	bl	8004298 <serialOut>

  APP_TransmitMessageQueue();                     // Send it
 80014ec:	f7ff fc66 	bl	8000dbc <APP_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bdb0      	pop	{r4, r5, r7, pc}
 80014f8:	200000ec 	.word	0x200000ec
 80014fc:	2000c680 	.word	0x2000c680
 8001500:	2000c68c 	.word	0x2000c68c
 8001504:	08009b6c 	.word	0x08009b6c
 8001508:	2000c91c 	.word	0x2000c91c

0800150c <APP_TransmitStatus3>:

/***************************************************************************************************************
*     A P P _ T  r a n s m i t S t a t u s 3                                           P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitStatus3(uint8_t index){
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_STATUS_3 status;
  memset(&status,0,sizeof(status));
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2208      	movs	r2, #8
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f005 ff8b 	bl	800743a <memset>


  status.cellHiTemp = module[index].tempHi;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a49      	ldr	r2, [pc, #292]	; (800164c <APP_TransmitStatus3+0x140>)
 8001528:	f240 612c 	movw	r1, #1580	; 0x62c
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	4413      	add	r3, r2
 8001532:	3318      	adds	r3, #24
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	817b      	strh	r3, [r7, #10]
  status.cellLoTemp = module[index].tempLo;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4a44      	ldr	r2, [pc, #272]	; (800164c <APP_TransmitStatus3+0x140>)
 800153c:	f240 612c 	movw	r1, #1580	; 0x62c
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	4413      	add	r3, r2
 8001546:	331a      	adds	r3, #26
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	813b      	strh	r3, [r7, #8]
  status.cellAvgTemp = module[index].tempAvg;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a3f      	ldr	r2, [pc, #252]	; (800164c <APP_TransmitStatus3+0x140>)
 8001550:	f240 612c 	movw	r1, #1580	; 0x62c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	331c      	adds	r3, #28
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	81bb      	strh	r3, [r7, #12]

  txObj.word[0] = 0;                              // Configure transmit message
 8001560:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <APP_TransmitStatus3+0x144>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <APP_TransmitStatus3+0x144>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <APP_TransmitStatus3+0x144>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]

  memcpy(txd, &status, sizeof(status));
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <APP_TransmitStatus3+0x148>)
 8001574:	461a      	mov	r2, r3
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800157e:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_STATUS_3             ;          // Standard ID
 8001582:	4a33      	ldr	r2, [pc, #204]	; (8001650 <APP_TransmitStatus3+0x144>)
 8001584:	8813      	ldrh	r3, [r2, #0]
 8001586:	f240 5104 	movw	r1, #1284	; 0x504
 800158a:	f361 030a 	bfi	r3, r1, #0, #11
 800158e:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;                 // Extended ID
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4a2e      	ldr	r2, [pc, #184]	; (800164c <APP_TransmitStatus3+0x140>)
 8001594:	f240 612c 	movw	r1, #1580	; 0x62c
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	4413      	add	r3, r2
 800159e:	3308      	adds	r3, #8
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80015a8:	4929      	ldr	r1, [pc, #164]	; (8001650 <APP_TransmitStatus3+0x144>)
 80015aa:	680b      	ldr	r3, [r1, #0]
 80015ac:	f362 23dc 	bfi	r3, r2, #11, #18
 80015b0:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80015b2:	4a27      	ldr	r2, [pc, #156]	; (8001650 <APP_TransmitStatus3+0x144>)
 80015b4:	7913      	ldrb	r3, [r2, #4]
 80015b6:	f36f 1386 	bfc	r3, #6, #1
 80015ba:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <APP_TransmitStatus3+0x144>)
 80015be:	7913      	ldrb	r3, [r2, #4]
 80015c0:	2108      	movs	r1, #8
 80015c2:	f361 0303 	bfi	r3, r1, #0, #4
 80015c6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <APP_TransmitStatus3+0x144>)
 80015ca:	7913      	ldrb	r3, [r2, #4]
 80015cc:	f36f 13c7 	bfc	r3, #7, #1
 80015d0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <APP_TransmitStatus3+0x144>)
 80015d4:	7913      	ldrb	r3, [r2, #4]
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4a1b      	ldr	r2, [pc, #108]	; (800164c <APP_TransmitStatus3+0x140>)
 80015e0:	f240 612c 	movw	r1, #1580	; 0x62c
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	3308      	adds	r3, #8
 80015ec:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 80015ee:	461c      	mov	r4, r3
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <APP_TransmitStatus3+0x140>)
 80015f4:	f240 612c 	movw	r1, #1580	; 0x62c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	3318      	adds	r3, #24
 8001600:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 8001602:	461d      	mov	r5, r3
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <APP_TransmitStatus3+0x140>)
 8001608:	f240 612c 	movw	r1, #1580	; 0x62c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	331a      	adds	r3, #26
 8001614:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 8001616:	4618      	mov	r0, r3
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <APP_TransmitStatus3+0x140>)
 800161c:	f240 612c 	movw	r1, #1580	; 0x62c
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	331c      	adds	r3, #28
 8001628:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9000      	str	r0, [sp, #0]
 800162e:	462b      	mov	r3, r5
 8001630:	4622      	mov	r2, r4
 8001632:	4909      	ldr	r1, [pc, #36]	; (8001658 <APP_TransmitStatus3+0x14c>)
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <APP_TransmitStatus3+0x150>)
 8001636:	f005 fe9b 	bl	8007370 <siprintf>
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 800163a:	4808      	ldr	r0, [pc, #32]	; (800165c <APP_TransmitStatus3+0x150>)
 800163c:	f002 fe2c 	bl	8004298 <serialOut>

  APP_TransmitMessageQueue();                     // Send it
 8001640:	f7ff fbbc 	bl	8000dbc <APP_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	200000ec 	.word	0x200000ec
 8001650:	2000c680 	.word	0x2000c680
 8001654:	2000c68c 	.word	0x2000c68c
 8001658:	08009b9c 	.word	0x08009b9c
 800165c:	2000c91c 	.word	0x2000c91c

08001660 <APP_ProcessHardwareRequest>:


/***************************************************************************************************************
*     A P P _ P r o c e s s H a r d w a r e R e q u e s t                              P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_ProcessHardwareRequest(void){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

   uint8_t moduleIndex = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
   uint8_t index;
   uint8_t moduleId;

   moduleId = rxObj.bF.id.EID;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <APP_ProcessHardwareRequest+0x78>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001672:	717b      	strb	r3, [r7, #5]

   sprintf(tempBuffer,"RX 0x511 Hardware Request ID=%02x",moduleId); serialOut(tempBuffer);
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	461a      	mov	r2, r3
 8001678:	4918      	ldr	r1, [pc, #96]	; (80016dc <APP_ProcessHardwareRequest+0x7c>)
 800167a:	4819      	ldr	r0, [pc, #100]	; (80016e0 <APP_ProcessHardwareRequest+0x80>)
 800167c:	f005 fe78 	bl	8007370 <siprintf>
 8001680:	4817      	ldr	r0, [pc, #92]	; (80016e0 <APP_ProcessHardwareRequest+0x80>)
 8001682:	f002 fe09 	bl	8004298 <serialOut>

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <APP_ProcessHardwareRequest+0x84>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 800168c:	2300      	movs	r3, #0
 800168e:	71bb      	strb	r3, [r7, #6]
 8001690:	e010      	b.n	80016b4 <APP_ProcessHardwareRequest+0x54>
   if(moduleId == module[index].moduleId)
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <APP_ProcessHardwareRequest+0x88>)
 8001696:	f240 612c 	movw	r1, #1580	; 0x62c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	3308      	adds	r3, #8
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	797a      	ldrb	r2, [r7, #5]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d101      	bne.n	80016ae <APP_ProcessHardwareRequest+0x4e>
     moduleIndex = index; // module is already registered, save the index
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	3301      	adds	r3, #1
 80016b2:	71bb      	strb	r3, [r7, #6]
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <APP_ProcessHardwareRequest+0x84>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3e9      	bcc.n	8001692 <APP_ProcessHardwareRequest+0x32>
 }
 if(moduleIndex != moduleCount) {
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <APP_ProcessHardwareRequest+0x84>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d003      	beq.n	80016d0 <APP_ProcessHardwareRequest+0x70>
     // Transmit the hardware message
     APP_TransmitHardware(moduleIndex);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fcac 	bl	8001028 <APP_TransmitHardware>
    }
 }
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000c6dc 	.word	0x2000c6dc
 80016dc:	08009c24 	.word	0x08009c24
 80016e0:	2000c91c 	.word	0x2000c91c
 80016e4:	2000c66c 	.word	0x2000c66c
 80016e8:	200000ec 	.word	0x200000ec

080016ec <APP_ReplyToStatusRequest>:


/***************************************************************************************************************
*     A P P _ R e p l y T o S t a t u s R e q u e s t                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_ReplyToStatusRequest(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

   uint8_t moduleIndex = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
   uint8_t index;
   uint8_t moduleId;

   moduleId = rxObj.bF.id.EID;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <APP_ReplyToStatusRequest+0x88>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80016fe:	717b      	strb	r3, [r7, #5]

   sprintf(tempBuffer,"RX 0x512 Status Request ID=%02x",moduleId); serialOut(tempBuffer);
 8001700:	797b      	ldrb	r3, [r7, #5]
 8001702:	461a      	mov	r2, r3
 8001704:	491c      	ldr	r1, [pc, #112]	; (8001778 <APP_ReplyToStatusRequest+0x8c>)
 8001706:	481d      	ldr	r0, [pc, #116]	; (800177c <APP_ReplyToStatusRequest+0x90>)
 8001708:	f005 fe32 	bl	8007370 <siprintf>
 800170c:	481b      	ldr	r0, [pc, #108]	; (800177c <APP_ReplyToStatusRequest+0x90>)
 800170e:	f002 fdc3 	bl	8004298 <serialOut>

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <APP_ReplyToStatusRequest+0x94>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 8001718:	2300      	movs	r3, #0
 800171a:	71bb      	strb	r3, [r7, #6]
 800171c:	e010      	b.n	8001740 <APP_ReplyToStatusRequest+0x54>
   if(moduleId == module[index].moduleId)
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <APP_ReplyToStatusRequest+0x98>)
 8001722:	f240 612c 	movw	r1, #1580	; 0x62c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3308      	adds	r3, #8
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	797a      	ldrb	r2, [r7, #5]
 8001732:	429a      	cmp	r2, r3
 8001734:	d101      	bne.n	800173a <APP_ReplyToStatusRequest+0x4e>
     moduleIndex = index; // module is already registered, save the index
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	3301      	adds	r3, #1
 800173e:	71bb      	strb	r3, [r7, #6]
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <APP_ReplyToStatusRequest+0x94>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	79ba      	ldrb	r2, [r7, #6]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3e9      	bcc.n	800171e <APP_ReplyToStatusRequest+0x32>
 }
 if(moduleIndex != moduleCount) {
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <APP_ReplyToStatusRequest+0x94>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	429a      	cmp	r2, r3
 8001752:	d00b      	beq.n	800176c <APP_ReplyToStatusRequest+0x80>
     // Transmit the 3 status frames
     APP_TransmitStatus1(moduleIndex);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fd22 	bl	80011a0 <APP_TransmitStatus1>
     APP_TransmitStatus2(moduleIndex);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe2a 	bl	80013b8 <APP_TransmitStatus2>
     APP_TransmitStatus3(moduleIndex);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fed0 	bl	800150c <APP_TransmitStatus3>
    }
 }
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000c6dc 	.word	0x2000c6dc
 8001778:	08009c48 	.word	0x08009c48
 800177c:	2000c91c 	.word	0x2000c91c
 8001780:	2000c66c 	.word	0x2000c66c
 8001784:	200000ec 	.word	0x200000ec

08001788 <APP_StateChange>:


/***************************************************************************************************************
*     A P P _ R e p l y T o S t a t u s R e q u e s t                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_StateChange(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

   uint8_t moduleIndex = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
   uint8_t index;
   uint8_t moduleId;

   moduleId = rxObj.bF.id.EID;
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <APP_StateChange+0xb4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800179a:	717b      	strb	r3, [r7, #5]
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <APP_StateChange+0xb8>)
 800179e:	881b      	ldrh	r3, [r3, #0]

   CANFRM_MODULE_STATE_CHANGE state;
   memcpy(&state, rxd,2);
 80017a0:	803b      	strh	r3, [r7, #0]

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <APP_StateChange+0xbc>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 80017a8:	2300      	movs	r3, #0
 80017aa:	71bb      	strb	r3, [r7, #6]
 80017ac:	e010      	b.n	80017d0 <APP_StateChange+0x48>
   if(moduleId == module[index].moduleId)
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	4a25      	ldr	r2, [pc, #148]	; (8001848 <APP_StateChange+0xc0>)
 80017b2:	f240 612c 	movw	r1, #1580	; 0x62c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3308      	adds	r3, #8
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	797a      	ldrb	r2, [r7, #5]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d101      	bne.n	80017ca <APP_StateChange+0x42>
     moduleIndex = index; // module is already registered, save the index
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	3301      	adds	r3, #1
 80017ce:	71bb      	strb	r3, [r7, #6]
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <APP_StateChange+0xbc>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	79ba      	ldrb	r2, [r7, #6]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3e9      	bcc.n	80017ae <APP_StateChange+0x26>
 }
 if(moduleIndex != moduleCount){
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <APP_StateChange+0xbc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d026      	beq.n	8001832 <APP_StateChange+0xaa>
   module[moduleIndex].state = state.state;
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4610      	mov	r0, r2
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <APP_StateChange+0xc0>)
 80017f2:	f240 612c 	movw	r1, #1580	; 0x62c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3324      	adds	r3, #36	; 0x24
 80017fe:	4602      	mov	r2, r0
 8001800:	701a      	strb	r2, [r3, #0]

   sprintf(tempBuffer,"RX 0x514 State Change Request ID=%02x STATE=%02x",moduleId,state.state); serialOut(tempBuffer);
 8001802:	797a      	ldrb	r2, [r7, #5]
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800180a:	b2db      	uxtb	r3, r3
 800180c:	490f      	ldr	r1, [pc, #60]	; (800184c <APP_StateChange+0xc4>)
 800180e:	4810      	ldr	r0, [pc, #64]	; (8001850 <APP_StateChange+0xc8>)
 8001810:	f005 fdae 	bl	8007370 <siprintf>
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <APP_StateChange+0xc8>)
 8001816:	f002 fd3f 	bl	8004298 <serialOut>
   // Transmit the 3 status frames
        APP_TransmitStatus1(moduleIndex);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fcbf 	bl	80011a0 <APP_TransmitStatus1>
        APP_TransmitStatus2(moduleIndex);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fdc7 	bl	80013b8 <APP_TransmitStatus2>
        APP_TransmitStatus3(moduleIndex);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe6d 	bl	800150c <APP_TransmitStatus3>
   //APP_TransmitStatus(moduleIndex);
 }
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000c6dc 	.word	0x2000c6dc
 8001840:	2000c6e8 	.word	0x2000c6e8
 8001844:	2000c66c 	.word	0x2000c66c
 8001848:	200000ec 	.word	0x200000ec
 800184c:	08009c68 	.word	0x08009c68
 8001850:	2000c91c 	.word	0x2000c91c

08001854 <APP_ProcessTime>:


/***************************************************************************************************************
*     A P P _ P r o c e s s T i m e                                                    P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_ProcessTime(void){
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0

 uint8_t index;

 CANFRM_MODULE_TIME moduleTime;

 sprintf(tempBuffer,"RX 0x516 Set Time"); serialOut(tempBuffer);
 800185a:	491c      	ldr	r1, [pc, #112]	; (80018cc <APP_ProcessTime+0x78>)
 800185c:	481c      	ldr	r0, [pc, #112]	; (80018d0 <APP_ProcessTime+0x7c>)
 800185e:	f005 fd87 	bl	8007370 <siprintf>
 8001862:	481b      	ldr	r0, [pc, #108]	; (80018d0 <APP_ProcessTime+0x7c>)
 8001864:	f002 fd18 	bl	8004298 <serialOut>

 // copy received data to status structure
 memset(&moduleTime,0,sizeof(moduleTime));
 8001868:	463b      	mov	r3, r7
 800186a:	2208      	movs	r2, #8
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f005 fde3 	bl	800743a <memset>
 memcpy(&moduleTime, rxd, sizeof(moduleTime));
 8001874:	463b      	mov	r3, r7
 8001876:	2208      	movs	r2, #8
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <APP_ProcessTime+0x80>)
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fa4f 	bl	8007d1e <memcpy>

 time_t rtcTime    = moduleTime.time;
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f3c1 031e 	ubfx	r3, r1, #0, #31
 8001888:	e9c7 2302 	strd	r2, r3, [r7, #8]
 //uint8_t rtcValid  = moduleTime.rtcValid;

 //set the STM32 RTC based on the time received from the VCU
 writeRTC(rtcTime);
 800188c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001890:	f002 fd86 	bl	80043a0 <writeRTC>

 // tell each module that the time is valid (don't worry about the moduleTime.rtcValid for the moment)
 for(index = 0; index < moduleCount; index++){
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
 8001898:	e00d      	b.n	80018b6 <APP_ProcessTime+0x62>
   module[index].rtcValid = true;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <APP_ProcessTime+0x84>)
 800189e:	f240 612c 	movw	r1, #1580	; 0x62c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	f203 632a 	addw	r3, r3, #1578	; 0x62a
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
 for(index = 0; index < moduleCount; index++){
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	3301      	adds	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <APP_ProcessTime+0x88>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	7dfa      	ldrb	r2, [r7, #23]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3ec      	bcc.n	800189a <APP_ProcessTime+0x46>
 }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	08009c9c 	.word	0x08009c9c
 80018d0:	2000c91c 	.word	0x2000c91c
 80018d4:	2000c6e8 	.word	0x2000c6e8
 80018d8:	200000ec 	.word	0x200000ec
 80018dc:	2000c66c 	.word	0x2000c66c

080018e0 <APP_ReplyToCellDetailRequest>:

/***************************************************************************************************************
*     A P P _ R e p l y T o C e l l D e t a i l R e q u e s t                          P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_ReplyToCellDetailRequest(void){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
 CANFRM_MODULE_DETAIL cellDetail;
 uint8_t moduleIndex = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
 uint8_t index;

 // copy data to announcement structure
 memcpy(&detailRequest, rxd,3);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2203      	movs	r2, #3
 80018f0:	496a      	ldr	r1, [pc, #424]	; (8001a9c <APP_ReplyToCellDetailRequest+0x1bc>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f006 fa13 	bl	8007d1e <memcpy>
 sprintf(tempBuffer,"RX 0x515 Request detail: ID=%02x, CELL=%02x",detailRequest.moduleId,detailRequest.cellId ); serialOut(tempBuffer);
 80018f8:	7b3b      	ldrb	r3, [r7, #12]
 80018fa:	461a      	mov	r2, r3
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	4968      	ldr	r1, [pc, #416]	; (8001aa0 <APP_ReplyToCellDetailRequest+0x1c0>)
 8001900:	4868      	ldr	r0, [pc, #416]	; (8001aa4 <APP_ReplyToCellDetailRequest+0x1c4>)
 8001902:	f005 fd35 	bl	8007370 <siprintf>
 8001906:	4867      	ldr	r0, [pc, #412]	; (8001aa4 <APP_ReplyToCellDetailRequest+0x1c4>)
 8001908:	f002 fcc6 	bl	8004298 <serialOut>

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <APP_ReplyToCellDetailRequest+0x1c8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	75fb      	strb	r3, [r7, #23]
 for(index = 0; index < moduleCount; index++){
 8001912:	2300      	movs	r3, #0
 8001914:	75bb      	strb	r3, [r7, #22]
 8001916:	e010      	b.n	800193a <APP_ReplyToCellDetailRequest+0x5a>
   if(detailRequest.moduleId == module[index].moduleId)
 8001918:	7b3a      	ldrb	r2, [r7, #12]
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	4963      	ldr	r1, [pc, #396]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 800191e:	f240 602c 	movw	r0, #1580	; 0x62c
 8001922:	fb00 f303 	mul.w	r3, r0, r3
 8001926:	440b      	add	r3, r1
 8001928:	3308      	adds	r3, #8
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d101      	bne.n	8001934 <APP_ReplyToCellDetailRequest+0x54>
     moduleIndex = index; // module is already registered, save the index
 8001930:	7dbb      	ldrb	r3, [r7, #22]
 8001932:	75fb      	strb	r3, [r7, #23]
 for(index = 0; index < moduleCount; index++){
 8001934:	7dbb      	ldrb	r3, [r7, #22]
 8001936:	3301      	adds	r3, #1
 8001938:	75bb      	strb	r3, [r7, #22]
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <APP_ReplyToCellDetailRequest+0x1c8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	7dba      	ldrb	r2, [r7, #22]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3e9      	bcc.n	8001918 <APP_ReplyToCellDetailRequest+0x38>
 }
 if(moduleIndex != moduleCount){
 8001944:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <APP_ReplyToCellDetailRequest+0x1c8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	7dfa      	ldrb	r2, [r7, #23]
 800194a:	429a      	cmp	r2, r3
 800194c:	f000 80a2 	beq.w	8001a94 <APP_ReplyToCellDetailRequest+0x1b4>
    // store the details
    cellDetail.cellCount   = module[moduleIndex].cellCount;
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	4a56      	ldr	r2, [pc, #344]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 8001954:	f240 612c 	movw	r1, #1580	; 0x62c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3328      	adds	r3, #40	; 0x28
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	717b      	strb	r3, [r7, #5]
    cellDetail.cellId      = detailRequest.cellId;
 8001964:	7b7b      	ldrb	r3, [r7, #13]
 8001966:	713b      	strb	r3, [r7, #4]
    cellDetail.cellSoc     = module[moduleIndex].cell[detailRequest.cellId].soc;
 8001968:	7dfa      	ldrb	r2, [r7, #23]
 800196a:	7b7b      	ldrb	r3, [r7, #13]
 800196c:	4618      	mov	r0, r3
 800196e:	494f      	ldr	r1, [pc, #316]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 8001970:	4603      	mov	r3, r0
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4403      	add	r3, r0
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	f240 602c 	movw	r0, #1580	; 0x62c
 800197c:	fb00 f202 	mul.w	r2, r0, r2
 8001980:	4413      	add	r3, r2
 8001982:	440b      	add	r3, r1
 8001984:	332e      	adds	r3, #46	; 0x2e
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	72bb      	strb	r3, [r7, #10]
    cellDetail.cellSoh     = module[moduleIndex].cell[detailRequest.cellId].soh;
 800198a:	7dfa      	ldrb	r2, [r7, #23]
 800198c:	7b7b      	ldrb	r3, [r7, #13]
 800198e:	4618      	mov	r0, r3
 8001990:	4946      	ldr	r1, [pc, #280]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 8001992:	4603      	mov	r3, r0
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4403      	add	r3, r0
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	f240 602c 	movw	r0, #1580	; 0x62c
 800199e:	fb00 f202 	mul.w	r2, r0, r2
 80019a2:	4413      	add	r3, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	332f      	adds	r3, #47	; 0x2f
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	72fb      	strb	r3, [r7, #11]
    cellDetail.cellTemp    = module[moduleIndex].cell[detailRequest.cellId].temp ;
 80019ac:	7dfa      	ldrb	r2, [r7, #23]
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	4618      	mov	r0, r3
 80019b2:	493e      	ldr	r1, [pc, #248]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 80019b4:	4603      	mov	r3, r0
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4403      	add	r3, r0
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	f240 602c 	movw	r0, #1580	; 0x62c
 80019c0:	fb00 f202 	mul.w	r2, r0, r2
 80019c4:	4413      	add	r3, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	332c      	adds	r3, #44	; 0x2c
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	80fb      	strh	r3, [r7, #6]
    cellDetail.cellVoltage = module[moduleIndex].cell[detailRequest.cellId].voltage;
 80019ce:	7dfa      	ldrb	r2, [r7, #23]
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	4618      	mov	r0, r3
 80019d4:	4935      	ldr	r1, [pc, #212]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 80019d6:	4603      	mov	r3, r0
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4403      	add	r3, r0
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	f240 602c 	movw	r0, #1580	; 0x62c
 80019e2:	fb00 f202 	mul.w	r2, r0, r2
 80019e6:	4413      	add	r3, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	332a      	adds	r3, #42	; 0x2a
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	813b      	strh	r3, [r7, #8]

    // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]

    memcpy(txd, &cellDetail, 8);
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <APP_ReplyToCellDetailRequest+0x1d4>)
 8001a04:	461a      	mov	r2, r3
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a0c:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL;             // Standard ID
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001a12:	8813      	ldrh	r3, [r2, #0]
 8001a14:	f240 5105 	movw	r1, #1285	; 0x505
 8001a18:	f361 030a 	bfi	r3, r1, #0, #11
 8001a1c:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = module[index].moduleId;       // Extended ID
 8001a1e:	7dbb      	ldrb	r3, [r7, #22]
 8001a20:	4a22      	ldr	r2, [pc, #136]	; (8001aac <APP_ReplyToCellDetailRequest+0x1cc>)
 8001a22:	f240 612c 	movw	r1, #1580	; 0x62c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001a36:	491e      	ldr	r1, [pc, #120]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001a38:	680b      	ldr	r3, [r1, #0]
 8001a3a:	f362 23dc 	bfi	r3, r2, #11, #18
 8001a3e:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001a42:	7913      	ldrb	r3, [r2, #4]
 8001a44:	f36f 1386 	bfc	r3, #6, #1
 8001a48:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 3 bytes to transmit
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001a4c:	7913      	ldrb	r3, [r2, #4]
 8001a4e:	2108      	movs	r1, #8
 8001a50:	f361 0303 	bfi	r3, r1, #0, #4
 8001a54:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001a58:	7913      	ldrb	r3, [r2, #4]
 8001a5a:	f36f 13c7 	bfc	r3, #7, #1
 8001a5e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001a62:	7913      	ldrb	r3, [r2, #4]
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	7113      	strb	r3, [r2, #4]

    sprintf(tempBuffer,"TX 0x505 Cell Detail: CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x", cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);
 8001a6a:	797b      	ldrb	r3, [r7, #5]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	793b      	ldrb	r3, [r7, #4]
 8001a70:	461c      	mov	r4, r3
 8001a72:	7abb      	ldrb	r3, [r7, #10]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	8939      	ldrh	r1, [r7, #8]
 8001a78:	9102      	str	r1, [sp, #8]
 8001a7a:	9201      	str	r2, [sp, #4]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4623      	mov	r3, r4
 8001a80:	4602      	mov	r2, r0
 8001a82:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <APP_ReplyToCellDetailRequest+0x1d8>)
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <APP_ReplyToCellDetailRequest+0x1c4>)
 8001a86:	f005 fc73 	bl	8007370 <siprintf>
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <APP_ReplyToCellDetailRequest+0x1c4>)
 8001a8c:	f002 fc04 	bl	8004298 <serialOut>
     APP_TransmitMessageQueue();                     // Send it
 8001a90:	f7ff f994 	bl	8000dbc <APP_TransmitMessageQueue>
   }else{
     // TODO : We couldn't find the module.
   }
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	2000c6e8 	.word	0x2000c6e8
 8001aa0:	08009cb0 	.word	0x08009cb0
 8001aa4:	2000c91c 	.word	0x2000c91c
 8001aa8:	2000c66c 	.word	0x2000c66c
 8001aac:	200000ec 	.word	0x200000ec
 8001ab0:	2000c680 	.word	0x2000c680
 8001ab4:	2000c68c 	.word	0x2000c68c
 8001ab8:	08009cdc 	.word	0x08009cdc

08001abc <APP_RegisterModule>:

/***************************************************************************************************************
*     A P P _  R e g i s t e r M o d u l e                                             P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_RegisterModule(void){
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af04      	add	r7, sp, #16

  CANFRM_MODULE_REGISTRATION registration;
  uint8_t index = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  // copy data to announcement structure
  memcpy(&registration, rxd,8);
 8001ac6:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <APP_RegisterModule+0xe8>)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ace:	e883 0003 	stmia.w	r3, {r0, r1}
  //sprintf(tempBuffer,"RX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);
  sprintf(tempBuffer,"RX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",rxObj.bF.id.EID, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);
 8001ad2:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <APP_RegisterModule+0xec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001ada:	4618      	mov	r0, r3
 8001adc:	797b      	ldrb	r3, [r7, #5]
 8001ade:	461c      	mov	r4, r3
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	9102      	str	r1, [sp, #8]
 8001ae8:	9201      	str	r2, [sp, #4]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	4602      	mov	r2, r0
 8001af0:	492e      	ldr	r1, [pc, #184]	; (8001bac <APP_RegisterModule+0xf0>)
 8001af2:	482f      	ldr	r0, [pc, #188]	; (8001bb0 <APP_RegisterModule+0xf4>)
 8001af4:	f005 fc3c 	bl	8007370 <siprintf>
 8001af8:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <APP_RegisterModule+0xf4>)
 8001afa:	f002 fbcd 	bl	8004298 <serialOut>

  // update our record
  for(index = 0; index < moduleCount; index++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e044      	b.n	8001b8e <APP_RegisterModule+0xd2>
   if((registration.moduleMfgId == module[index].mfgId) && (registration.modulePartId == module[index].partId) && (registration.moduleUniqueId == module[index].uniqueId)){
 8001b04:	79ba      	ldrb	r2, [r7, #6]
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	492a      	ldr	r1, [pc, #168]	; (8001bb4 <APP_RegisterModule+0xf8>)
 8001b0a:	f240 602c 	movw	r0, #1580	; 0x62c
 8001b0e:	fb00 f303 	mul.w	r3, r0, r3
 8001b12:	440b      	add	r3, r1
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d136      	bne.n	8001b88 <APP_RegisterModule+0xcc>
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	4925      	ldr	r1, [pc, #148]	; (8001bb4 <APP_RegisterModule+0xf8>)
 8001b20:	f240 602c 	movw	r0, #1580	; 0x62c
 8001b24:	fb00 f303 	mul.w	r3, r0, r3
 8001b28:	440b      	add	r3, r1
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d12a      	bne.n	8001b88 <APP_RegisterModule+0xcc>
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	491f      	ldr	r1, [pc, #124]	; (8001bb4 <APP_RegisterModule+0xf8>)
 8001b38:	f240 602c 	movw	r0, #1580	; 0x62c
 8001b3c:	fb00 f303 	mul.w	r3, r0, r3
 8001b40:	440b      	add	r3, r1
 8001b42:	3304      	adds	r3, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11e      	bne.n	8001b88 <APP_RegisterModule+0xcc>
      //module[index].moduleId = registration.moduleId;
      module[index].moduleId = rxObj.bF.id.EID;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <APP_RegisterModule+0xec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	b2d0      	uxtb	r0, r2
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <APP_RegisterModule+0xf8>)
 8001b58:	f240 612c 	movw	r1, #1580	; 0x62c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3308      	adds	r3, #8
 8001b64:	4602      	mov	r2, r0
 8001b66:	701a      	strb	r2, [r3, #0]

      // Tranmist the 3 status frames
      APP_TransmitStatus1(index);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fb18 	bl	80011a0 <APP_TransmitStatus1>
      APP_TransmitStatus2(index);
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fc20 	bl	80013b8 <APP_TransmitStatus2>
      APP_TransmitStatus3(index);
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fcc6 	bl	800150c <APP_TransmitStatus3>
      APP_TransmitHardware(index);
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fa50 	bl	8001028 <APP_TransmitHardware>
  for(index = 0; index < moduleCount; index++){
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <APP_RegisterModule+0xfc>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3b5      	bcc.n	8001b04 <APP_RegisterModule+0x48>
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000c6e8 	.word	0x2000c6e8
 8001ba8:	2000c6dc 	.word	0x2000c6dc
 8001bac:	08009d2c 	.word	0x08009d2c
 8001bb0:	2000c91c 	.word	0x2000c91c
 8001bb4:	200000ec 	.word	0x200000ec
 8001bb8:	2000c66c 	.word	0x2000c66c

08001bbc <APP_DeRegisterAllModules>:

/***************************************************************************************************************
*     A P P _ D e R e g i s t e r A l l M o d u l e s                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_DeRegisterAllModules(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  uint8_t index;

  sprintf(tempBuffer,"RX 0x51E De-Register all modules"); serialOut(tempBuffer);
 8001bc2:	4910      	ldr	r1, [pc, #64]	; (8001c04 <APP_DeRegisterAllModules+0x48>)
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <APP_DeRegisterAllModules+0x4c>)
 8001bc6:	f005 fbd3 	bl	8007370 <siprintf>
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <APP_DeRegisterAllModules+0x4c>)
 8001bcc:	f002 fb64 	bl	8004298 <serialOut>
  for(index = 0; index < moduleCount; index++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	e00c      	b.n	8001bf0 <APP_DeRegisterAllModules+0x34>
    module[index].moduleId = 0;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <APP_DeRegisterAllModules+0x50>)
 8001bda:	f240 612c 	movw	r1, #1580	; 0x62c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3308      	adds	r3, #8
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < moduleCount; index++){
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	3301      	adds	r3, #1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <APP_DeRegisterAllModules+0x54>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3ed      	bcc.n	8001bd6 <APP_DeRegisterAllModules+0x1a>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	08009d74 	.word	0x08009d74
 8001c08:	2000c91c 	.word	0x2000c91c
 8001c0c:	200000ec 	.word	0x200000ec
 8001c10:	2000c66c 	.word	0x2000c66c

08001c14 <APP_IsolateAllModules>:


/***************************************************************************************************************
*     A P P _ I s o la t e A l l M o d u l e s                                         P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_IsolateAllModules(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  uint8_t index;

  sprintf(tempBuffer,"RX 0x51F Isolate all modules"); serialOut(tempBuffer);
 8001c1a:	4910      	ldr	r1, [pc, #64]	; (8001c5c <APP_IsolateAllModules+0x48>)
 8001c1c:	4810      	ldr	r0, [pc, #64]	; (8001c60 <APP_IsolateAllModules+0x4c>)
 8001c1e:	f005 fba7 	bl	8007370 <siprintf>
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <APP_IsolateAllModules+0x4c>)
 8001c24:	f002 fb38 	bl	8004298 <serialOut>
  for(index = 0; index < moduleCount; index++){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	e00c      	b.n	8001c48 <APP_IsolateAllModules+0x34>
    module[index].state = moduleOff;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <APP_IsolateAllModules+0x50>)
 8001c32:	f240 612c 	movw	r1, #1580	; 0x62c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3324      	adds	r3, #36	; 0x24
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < moduleCount; index++){
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	3301      	adds	r3, #1
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <APP_IsolateAllModules+0x54>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3ed      	bcc.n	8001c2e <APP_IsolateAllModules+0x1a>
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08009d98 	.word	0x08009d98
 8001c60:	2000c91c 	.word	0x2000c91c
 8001c64:	200000ec 	.word	0x200000ec
 8001c68:	2000c66c 	.word	0x2000c66c

08001c6c <APP_TestRegisterAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R e g i s t e r A c c e s s                                      P A C K   E M U L A T O R
***************************************************************************************************************/
bool APP_TestRegisterAccess(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8001c72:	2300      	movs	r3, #0
 8001c74:	71bb      	strb	r3, [r7, #6]

    Nop();
 8001c76:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8001c78:	2301      	movs	r3, #1
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	e05d      	b.n	8001d3a <APP_TestRegisterAccess+0xce>
        for (i = 0; i < length; i++) {
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e016      	b.n	8001cb4 <APP_TestRegisterAccess+0x48>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 8001c86:	f005 fa73 	bl	8007170 <rand>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4a30      	ldr	r2, [pc, #192]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c96:	b2d9      	uxtb	r1, r3
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <APP_TestRegisterAccess+0xe8>)
 8001c9a:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <APP_TestRegisterAccess+0xec>)
 8001ca4:	21ff      	movs	r1, #255	; 0xff
 8001ca6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d8e3      	bhi.n	8001c86 <APP_TestRegisterAccess+0x1a>
        }

        Nop();
 8001cbe:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, txd, length);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <APP_TestRegisterAccess+0xe8>)
 8001cc6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 fb38 	bl	8002340 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, rxd, length);
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <APP_TestRegisterAccess+0xec>)
 8001cd6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 fac8 	bl	8002270 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e01e      	b.n	8001d2a <APP_TestRegisterAccess+0xbe>
            good = txd[i] == rxd[i];
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <APP_TestRegisterAccess+0xe8>)
 8001cf4:	5c9a      	ldrb	r2, [r3, r2]
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <APP_TestRegisterAccess+0xec>)
 8001cfe:	5c5b      	ldrb	r3, [r3, r1]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <APP_TestRegisterAccess+0xb2>
                Nop();
 8001d16:	bf00      	nop
                Nop();
 8001d18:	bf00      	nop
                // Data mismatch
                return false;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e013      	b.n	8001d46 <APP_TestRegisterAccess+0xda>
        for (i = 0; i < length; i++) {
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <APP_TestRegisterAccess+0xe4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	79fa      	ldrb	r2, [r7, #7]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8db      	bhi.n	8001cec <APP_TestRegisterAccess+0x80>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	3301      	adds	r3, #1
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	d99e      	bls.n	8001c7e <APP_TestRegisterAccess+0x12>
            }
        }
    }
    Nop();
 8001d40:	bf00      	nop
    Nop();
 8001d42:	bf00      	nop
    return true;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000c729 	.word	0x2000c729
 8001d54:	2000c68c 	.word	0x2000c68c
 8001d58:	2000c6e8 	.word	0x2000c6e8

08001d5c <APP_TestRamAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R a m A c c e s s                                                P A C K   E M U L A T O R
***************************************************************************************************************/
bool APP_TestRamAccess(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	71bb      	strb	r3, [r7, #6]

    Nop();
 8001d66:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8001d68:	2304      	movs	r3, #4
 8001d6a:	71fb      	strb	r3, [r7, #7]
 8001d6c:	e05b      	b.n	8001e26 <APP_TestRamAccess+0xca>
        for (i = 0; i < length; i++) {
 8001d6e:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e014      	b.n	8001da0 <APP_TestRamAccess+0x44>
            txd[i] = rand() & 0xff;
 8001d76:	f005 f9fb 	bl	8007170 <rand>
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	b2c9      	uxtb	r1, r1
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <APP_TestRamAccess+0xe0>)
 8001d86:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <APP_TestRamAccess+0xe4>)
 8001d90:	21ff      	movs	r1, #255	; 0xff
 8001d92:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	79fa      	ldrb	r2, [r7, #7]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d8e5      	bhi.n	8001d76 <APP_TestRamAccess+0x1a>
        }

        Nop();
 8001daa:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, txd, length);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <APP_TestRamAccess+0xe0>)
 8001db2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 fac2 	bl	8002340 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, rxd, length);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <APP_TestRamAccess+0xe4>)
 8001dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 fa52 	bl	8002270 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e01e      	b.n	8001e16 <APP_TestRamAccess+0xba>
            good = txd[i] == rxd[i];
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <APP_TestRamAccess+0xe0>)
 8001de0:	5c9a      	ldrb	r2, [r3, r2]
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <APP_TestRamAccess+0xe4>)
 8001dea:	5c5b      	ldrb	r3, [r3, r1]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <APP_TestRamAccess+0xae>
                Nop();
 8001e02:	bf00      	nop
                Nop();
 8001e04:	bf00      	nop

                // Data mismatch
                return false;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e011      	b.n	8001e2e <APP_TestRamAccess+0xd2>
        for (i = 0; i < length; i++) {
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <APP_TestRamAccess+0xdc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8db      	bhi.n	8001dd8 <APP_TestRamAccess+0x7c>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	3304      	adds	r3, #4
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	d9a0      	bls.n	8001d6e <APP_TestRamAccess+0x12>
            }
        }
    }

    return true;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000c729 	.word	0x2000c729
 8001e3c:	2000c68c 	.word	0x2000c68c
 8001e40:	2000c6e8 	.word	0x2000c6e8

08001e44 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  uint16_t spiTransferSize = 2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <DRV_CANFDSPI_Reset+0x54>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = 0;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <DRV_CANFDSPI_Reset+0x54>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]

  //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);


	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <DRV_CANFDSPI_Reset+0x58>)
 8001e66:	f003 fa07 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	2264      	movs	r2, #100	; 0x64
 8001e6e:	9200      	str	r2, [sp, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <DRV_CANFDSPI_Reset+0x5c>)
 8001e72:	4909      	ldr	r1, [pc, #36]	; (8001e98 <DRV_CANFDSPI_Reset+0x54>)
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <DRV_CANFDSPI_Reset+0x60>)
 8001e76:	f004 fb4c 	bl	8006512 <HAL_SPI_TransmitReceive>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <DRV_CANFDSPI_Reset+0x58>)
 8001e86:	f003 f9f7 	bl	8005278 <HAL_GPIO_WritePin>

  return spiTransferError;
 8001e8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000c730 	.word	0x2000c730
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	2000c790 	.word	0x2000c790
 8001ea4:	2000c810 	.word	0x2000c810

08001ea8 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	603a      	str	r2, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001ebc:	88bb      	ldrh	r3, [r7, #4]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3330      	adds	r3, #48	; 0x30
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <DRV_CANFDSPI_ReadByte+0x78>)
 8001ed0:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001ed2:	88bb      	ldrh	r3, [r7, #4]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <DRV_CANFDSPI_ReadByte+0x78>)
 8001ed8:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <DRV_CANFDSPI_ReadByte+0x78>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee6:	480f      	ldr	r0, [pc, #60]	; (8001f24 <DRV_CANFDSPI_ReadByte+0x7c>)
 8001ee8:	f003 f9c6 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001eec:	89fb      	ldrh	r3, [r7, #14]
 8001eee:	2264      	movs	r2, #100	; 0x64
 8001ef0:	9200      	str	r2, [sp, #0]
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <DRV_CANFDSPI_ReadByte+0x80>)
 8001ef4:	490a      	ldr	r1, [pc, #40]	; (8001f20 <DRV_CANFDSPI_ReadByte+0x78>)
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <DRV_CANFDSPI_ReadByte+0x84>)
 8001ef8:	f004 fb0b 	bl	8006512 <HAL_SPI_TransmitReceive>
 8001efc:	4603      	mov	r3, r0
 8001efe:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <DRV_CANFDSPI_ReadByte+0x7c>)
 8001f08:	f003 f9b6 	bl	8005278 <HAL_GPIO_WritePin>

  // Update data
  *rxd = spiReceiveBuffer[2];
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <DRV_CANFDSPI_ReadByte+0x80>)
 8001f0e:	789a      	ldrb	r2, [r3, #2]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001f14:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000c730 	.word	0x2000c730
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	2000c790 	.word	0x2000c790
 8001f2c:	2000c810 	.word	0x2000c810

08001f30 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	80bb      	strh	r3, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 8001f42:	2303      	movs	r3, #3
 8001f44:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3320      	adds	r3, #32
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001f5a:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001f62:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <DRV_CANFDSPI_WriteByte+0x78>)
 8001f72:	f003 f981 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001f76:	89fb      	ldrh	r3, [r7, #14]
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	9200      	str	r2, [sp, #0]
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <DRV_CANFDSPI_WriteByte+0x7c>)
 8001f7e:	4909      	ldr	r1, [pc, #36]	; (8001fa4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <DRV_CANFDSPI_WriteByte+0x80>)
 8001f82:	f004 fac6 	bl	8006512 <HAL_SPI_TransmitReceive>
 8001f86:	4603      	mov	r3, r0
 8001f88:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <DRV_CANFDSPI_WriteByte+0x78>)
 8001f92:	f003 f971 	bl	8005278 <HAL_GPIO_WritePin>

  return spiTransferError;
 8001f96:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000c730 	.word	0x2000c730
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	2000c790 	.word	0x2000c790
 8001fb0:	2000c810 	.word	0x2000c810

08001fb4 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	4603      	mov	r3, r0
 8001fbc:	603a      	str	r2, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001fc8:	88bb      	ldrh	r3, [r7, #4]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3330      	adds	r3, #48	; 0x30
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <DRV_CANFDSPI_ReadWord+0xac>)
 8001fdc:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001fde:	88bb      	ldrh	r3, [r7, #4]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <DRV_CANFDSPI_ReadWord+0xac>)
 8001fe4:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	481d      	ldr	r0, [pc, #116]	; (8002064 <DRV_CANFDSPI_ReadWord+0xb0>)
 8001fee:	f003 f943 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001ff2:	8abb      	ldrh	r3, [r7, #20]
 8001ff4:	2264      	movs	r2, #100	; 0x64
 8001ff6:	9200      	str	r2, [sp, #0]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <DRV_CANFDSPI_ReadWord+0xb4>)
 8001ffa:	4919      	ldr	r1, [pc, #100]	; (8002060 <DRV_CANFDSPI_ReadWord+0xac>)
 8001ffc:	481b      	ldr	r0, [pc, #108]	; (800206c <DRV_CANFDSPI_ReadWord+0xb8>)
 8001ffe:	f004 fa88 	bl	8006512 <HAL_SPI_TransmitReceive>
 8002002:	4603      	mov	r3, r0
 8002004:	74fb      	strb	r3, [r7, #19]
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200c:	4815      	ldr	r0, [pc, #84]	; (8002064 <DRV_CANFDSPI_ReadWord+0xb0>)
 800200e:	f003 f933 	bl	8005278 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 8002012:	7cfb      	ldrb	r3, [r7, #19]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <DRV_CANFDSPI_ReadWord+0x6a>
      return spiTransferError;
 8002018:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800201c:	e01c      	b.n	8002058 <DRV_CANFDSPI_ReadWord+0xa4>
  }

  // Update data
  *rxd = 0;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8002024:	2302      	movs	r3, #2
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	e011      	b.n	800204e <DRV_CANFDSPI_ReadWord+0x9a>
      x = (uint32_t) spiReceiveBuffer[i];
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <DRV_CANFDSPI_ReadWord+0xb4>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	3b02      	subs	r3, #2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	441a      	add	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	3301      	adds	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d9ea      	bls.n	800202a <DRV_CANFDSPI_ReadWord+0x76>
  }

  return spiTransferError;
 8002054:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000c730 	.word	0x2000c730
 8002064:	40020c00 	.word	0x40020c00
 8002068:	2000c790 	.word	0x2000c790
 800206c:	2000c810 	.word	0x2000c810

08002070 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	603a      	str	r2, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	460b      	mov	r3, r1
 800207e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint16_t spiTransferSize = 6;
 8002080:	2306      	movs	r3, #6
 8002082:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b29b      	uxth	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3320      	adds	r3, #32
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <DRV_CANFDSPI_WriteWord+0x90>)
 8002098:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <DRV_CANFDSPI_WriteWord+0x90>)
 80020a0:	705a      	strb	r2, [r3, #1]

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e00b      	b.n	80020c0 <DRV_CANFDSPI_WriteWord+0x50>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	40da      	lsrs	r2, r3
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3302      	adds	r3, #2
 80020b4:	b2d1      	uxtb	r1, r2
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <DRV_CANFDSPI_WriteWord+0x90>)
 80020b8:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 4; i++) {
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3301      	adds	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9f0      	bls.n	80020a8 <DRV_CANFDSPI_WriteWord+0x38>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <DRV_CANFDSPI_WriteWord+0x94>)
 80020ce:	f003 f8d3 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80020d2:	89bb      	ldrh	r3, [r7, #12]
 80020d4:	2264      	movs	r2, #100	; 0x64
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <DRV_CANFDSPI_WriteWord+0x98>)
 80020da:	4909      	ldr	r1, [pc, #36]	; (8002100 <DRV_CANFDSPI_WriteWord+0x90>)
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <DRV_CANFDSPI_WriteWord+0x9c>)
 80020de:	f004 fa18 	bl	8006512 <HAL_SPI_TransmitReceive>
 80020e2:	4603      	mov	r3, r0
 80020e4:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <DRV_CANFDSPI_WriteWord+0x94>)
 80020ee:	f003 f8c3 	bl	8005278 <HAL_GPIO_WritePin>

  return spiTransferError;
 80020f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000c730 	.word	0x2000c730
 8002104:	40020c00 	.word	0x40020c00
 8002108:	2000c790 	.word	0x2000c790
 800210c:	2000c810 	.word	0x2000c810

08002110 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	4603      	mov	r3, r0
 8002118:	603a      	str	r2, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	460b      	mov	r3, r1
 800211e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 4;
 8002120:	2304      	movs	r3, #4
 8002122:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3330      	adds	r3, #48	; 0x30
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8002138:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800213a:	88bb      	ldrh	r3, [r7, #4]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8002140:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002148:	481e      	ldr	r0, [pc, #120]	; (80021c4 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 800214a:	f003 f895 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800214e:	8abb      	ldrh	r3, [r7, #20]
 8002150:	2264      	movs	r2, #100	; 0x64
 8002152:	9200      	str	r2, [sp, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <DRV_CANFDSPI_ReadHalfWord+0xb8>)
 8002156:	491a      	ldr	r1, [pc, #104]	; (80021c0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8002158:	481c      	ldr	r0, [pc, #112]	; (80021cc <DRV_CANFDSPI_ReadHalfWord+0xbc>)
 800215a:	f004 f9da 	bl	8006512 <HAL_SPI_TransmitReceive>
 800215e:	4603      	mov	r3, r0
 8002160:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002168:	4816      	ldr	r0, [pc, #88]	; (80021c4 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 800216a:	f003 f885 	bl	8005278 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <DRV_CANFDSPI_ReadHalfWord+0x6a>
      return spiTransferError;
 8002174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002178:	e01e      	b.n	80021b8 <DRV_CANFDSPI_ReadHalfWord+0xa8>
  }

  // Update data
  *rxd = 0;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 8002180:	2302      	movs	r3, #2
 8002182:	75fb      	strb	r3, [r7, #23]
 8002184:	e013      	b.n	80021ae <DRV_CANFDSPI_ReadHalfWord+0x9e>
      x = (uint32_t) spiReceiveBuffer[i];
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <DRV_CANFDSPI_ReadHalfWord+0xb8>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	3b02      	subs	r3, #2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	3301      	adds	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d9e8      	bls.n	8002186 <DRV_CANFDSPI_ReadHalfWord+0x76>
  }

  return spiTransferError;
 80021b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000c730 	.word	0x2000c730
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	2000c790 	.word	0x2000c790
 80021cc:	2000c810 	.word	0x2000c810

080021d0 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	460b      	mov	r3, r1
 80021dc:	80bb      	strh	r3, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  uint16_t spiTransferSize = 4;
 80021e2:	2304      	movs	r3, #4
 80021e4:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3320      	adds	r3, #32
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 80021fa:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80021fc:	88bb      	ldrh	r3, [r7, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 8002202:	705a      	strb	r2, [r3, #1]

  // Split word into 2 bytes and add them to buffer
  for (i = 0; i < 2; i++) {
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e00b      	b.n	8002222 <DRV_CANFDSPI_WriteHalfWord+0x52>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	411a      	asrs	r2, r3
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3302      	adds	r3, #2
 8002216:	b2d1      	uxtb	r1, r2
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 800221a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 2; i++) {
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	3301      	adds	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d9f0      	bls.n	800220a <DRV_CANFDSPI_WriteHalfWord+0x3a>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <DRV_CANFDSPI_WriteHalfWord+0x94>)
 8002230:	f003 f822 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002234:	89bb      	ldrh	r3, [r7, #12]
 8002236:	2264      	movs	r2, #100	; 0x64
 8002238:	9200      	str	r2, [sp, #0]
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <DRV_CANFDSPI_WriteHalfWord+0x98>)
 800223c:	4908      	ldr	r1, [pc, #32]	; (8002260 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 800223e:	480b      	ldr	r0, [pc, #44]	; (800226c <DRV_CANFDSPI_WriteHalfWord+0x9c>)
 8002240:	f004 f967 	bl	8006512 <HAL_SPI_TransmitReceive>
 8002244:	4603      	mov	r3, r0
 8002246:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <DRV_CANFDSPI_WriteHalfWord+0x94>)
 8002250:	f003 f812 	bl	8005278 <HAL_GPIO_WritePin>


    return spiTransferError;
 8002254:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000c730 	.word	0x2000c730
 8002264:	40020c00 	.word	0x40020c00
 8002268:	2000c790 	.word	0x2000c790
 800226c:	2000c810 	.word	0x2000c810

08002270 <DRV_CANFDSPI_ReadByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60ba      	str	r2, [r7, #8]
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	460b      	mov	r3, r1
 8002280:	81bb      	strh	r3, [r7, #12]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	3302      	adds	r3, #2
 800228a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 800228c:	8abb      	ldrh	r3, [r7, #20]
 800228e:	2b60      	cmp	r3, #96	; 0x60
 8002290:	d902      	bls.n	8002298 <DRV_CANFDSPI_ReadByteArray+0x28>
      return -1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e046      	b.n	8002326 <DRV_CANFDSPI_ReadByteArray+0xb6>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002298:	89bb      	ldrh	r3, [r7, #12]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3330      	adds	r3, #48	; 0x30
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 80022ac:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80022ae:	89bb      	ldrh	r3, [r7, #12]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 80022b4:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 80022b6:	2302      	movs	r3, #2
 80022b8:	82fb      	strh	r3, [r7, #22]
 80022ba:	e006      	b.n	80022ca <DRV_CANFDSPI_ReadByteArray+0x5a>
      spiTransmitBuffer[i] = 0;
 80022bc:	8afb      	ldrh	r3, [r7, #22]
 80022be:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 80022c0:	2100      	movs	r1, #0
 80022c2:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 80022c4:	8afb      	ldrh	r3, [r7, #22]
 80022c6:	3301      	adds	r3, #1
 80022c8:	82fb      	strh	r3, [r7, #22]
 80022ca:	8afa      	ldrh	r2, [r7, #22]
 80022cc:	8abb      	ldrh	r3, [r7, #20]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d3f4      	bcc.n	80022bc <DRV_CANFDSPI_ReadByteArray+0x4c>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	4816      	ldr	r0, [pc, #88]	; (8002334 <DRV_CANFDSPI_ReadByteArray+0xc4>)
 80022da:	f002 ffcd 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80022de:	8abb      	ldrh	r3, [r7, #20]
 80022e0:	2264      	movs	r2, #100	; 0x64
 80022e2:	9200      	str	r2, [sp, #0]
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <DRV_CANFDSPI_ReadByteArray+0xc8>)
 80022e6:	4912      	ldr	r1, [pc, #72]	; (8002330 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 80022e8:	4814      	ldr	r0, [pc, #80]	; (800233c <DRV_CANFDSPI_ReadByteArray+0xcc>)
 80022ea:	f004 f912 	bl	8006512 <HAL_SPI_TransmitReceive>
 80022ee:	4603      	mov	r3, r0
 80022f0:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f8:	480e      	ldr	r0, [pc, #56]	; (8002334 <DRV_CANFDSPI_ReadByteArray+0xc4>)
 80022fa:	f002 ffbd 	bl	8005278 <HAL_GPIO_WritePin>


  // Update data
  for (i = 0; i < nBytes; i++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	82fb      	strh	r3, [r7, #22]
 8002302:	e00a      	b.n	800231a <DRV_CANFDSPI_ReadByteArray+0xaa>
      rxd[i] = spiReceiveBuffer[i + 2];
 8002304:	8afb      	ldrh	r3, [r7, #22]
 8002306:	1c9a      	adds	r2, r3, #2
 8002308:	8afb      	ldrh	r3, [r7, #22]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	440b      	add	r3, r1
 800230e:	490a      	ldr	r1, [pc, #40]	; (8002338 <DRV_CANFDSPI_ReadByteArray+0xc8>)
 8002310:	5c8a      	ldrb	r2, [r1, r2]
 8002312:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < nBytes; i++) {
 8002314:	8afb      	ldrh	r3, [r7, #22]
 8002316:	3301      	adds	r3, #1
 8002318:	82fb      	strh	r3, [r7, #22]
 800231a:	8afa      	ldrh	r2, [r7, #22]
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	429a      	cmp	r2, r3
 8002320:	d3f0      	bcc.n	8002304 <DRV_CANFDSPI_ReadByteArray+0x94>
  }

  return spiTransferError;
 8002322:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000c730 	.word	0x2000c730
 8002334:	40020c00 	.word	0x40020c00
 8002338:	2000c790 	.word	0x2000c790
 800233c:	2000c810 	.word	0x2000c810

08002340 <DRV_CANFDSPI_WriteByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8
 8002346:	60ba      	str	r2, [r7, #8]
 8002348:	461a      	mov	r2, r3
 800234a:	4603      	mov	r3, r0
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	460b      	mov	r3, r1
 8002350:	81bb      	strh	r3, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	3302      	adds	r3, #2
 800235a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 800235c:	8abb      	ldrh	r3, [r7, #20]
 800235e:	2b60      	cmp	r3, #96	; 0x60
 8002360:	d902      	bls.n	8002368 <DRV_CANFDSPI_WriteByteArray+0x28>
      return -1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e038      	b.n	80023da <DRV_CANFDSPI_WriteByteArray+0x9a>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8002368:	89bb      	ldrh	r3, [r7, #12]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3320      	adds	r3, #32
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 800237c:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800237e:	89bb      	ldrh	r3, [r7, #12]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8002384:	705a      	strb	r2, [r3, #1]

  // Add data
  for (i = 0; i < nBytes; i++) {
 8002386:	2300      	movs	r3, #0
 8002388:	82fb      	strh	r3, [r7, #22]
 800238a:	e00a      	b.n	80023a2 <DRV_CANFDSPI_WriteByteArray+0x62>
      spiTransmitBuffer[i+2] = txd[i];
 800238c:	8afb      	ldrh	r3, [r7, #22]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	441a      	add	r2, r3
 8002392:	8afb      	ldrh	r3, [r7, #22]
 8002394:	3302      	adds	r3, #2
 8002396:	7811      	ldrb	r1, [r2, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 800239a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < nBytes; i++) {
 800239c:	8afb      	ldrh	r3, [r7, #22]
 800239e:	3301      	adds	r3, #1
 80023a0:	82fb      	strh	r3, [r7, #22]
 80023a2:	8afa      	ldrh	r2, [r7, #22]
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3f0      	bcc.n	800238c <DRV_CANFDSPI_WriteByteArray+0x4c>
  }
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <DRV_CANFDSPI_WriteByteArray+0xa8>)
 80023b2:	f002 ff61 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80023b6:	8abb      	ldrh	r3, [r7, #20]
 80023b8:	2264      	movs	r2, #100	; 0x64
 80023ba:	9200      	str	r2, [sp, #0]
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <DRV_CANFDSPI_WriteByteArray+0xac>)
 80023be:	4909      	ldr	r1, [pc, #36]	; (80023e4 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <DRV_CANFDSPI_WriteByteArray+0xb0>)
 80023c2:	f004 f8a6 	bl	8006512 <HAL_SPI_TransmitReceive>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <DRV_CANFDSPI_WriteByteArray+0xa8>)
 80023d2:	f002 ff51 	bl	8005278 <HAL_GPIO_WritePin>


  return spiTransferError;
 80023d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000c730 	.word	0x2000c730
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	2000c790 	.word	0x2000c790
 80023f0:	2000c810 	.word	0x2000c810

080023f4 <DRV_CANFDSPI_ReadWordArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	460b      	mov	r3, r1
 8002404:	81bb      	strh	r3, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	b29b      	uxth	r3, r3
 8002410:	3302      	adds	r3, #2
 8002412:	833b      	strh	r3, [r7, #24]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8002414:	8b3b      	ldrh	r3, [r7, #24]
 8002416:	2b60      	cmp	r3, #96	; 0x60
 8002418:	d902      	bls.n	8002420 <DRV_CANFDSPI_ReadWordArray+0x2c>
      return -1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e062      	b.n	80024e6 <DRV_CANFDSPI_ReadWordArray+0xf2>
  }

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8002420:	89bb      	ldrh	r3, [r7, #12]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29b      	uxth	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3330      	adds	r3, #48	; 0x30
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8002434:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = address & 0xFF;
 8002436:	89bb      	ldrh	r3, [r7, #12]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 800243c:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 800243e:	2302      	movs	r3, #2
 8002440:	83fb      	strh	r3, [r7, #30]
 8002442:	e006      	b.n	8002452 <DRV_CANFDSPI_ReadWordArray+0x5e>
      spiTransmitBuffer[i] = 0;
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8002448:	2100      	movs	r1, #0
 800244a:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 800244c:	8bfb      	ldrh	r3, [r7, #30]
 800244e:	3301      	adds	r3, #1
 8002450:	83fb      	strh	r3, [r7, #30]
 8002452:	8bfa      	ldrh	r2, [r7, #30]
 8002454:	8b3b      	ldrh	r3, [r7, #24]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3f4      	bcc.n	8002444 <DRV_CANFDSPI_ReadWordArray+0x50>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002460:	4824      	ldr	r0, [pc, #144]	; (80024f4 <DRV_CANFDSPI_ReadWordArray+0x100>)
 8002462:	f002 ff09 	bl	8005278 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002466:	8b3b      	ldrh	r3, [r7, #24]
 8002468:	2264      	movs	r2, #100	; 0x64
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <DRV_CANFDSPI_ReadWordArray+0x104>)
 800246e:	4920      	ldr	r1, [pc, #128]	; (80024f0 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8002470:	4822      	ldr	r0, [pc, #136]	; (80024fc <DRV_CANFDSPI_ReadWordArray+0x108>)
 8002472:	f004 f84e 	bl	8006512 <HAL_SPI_TransmitReceive>
 8002476:	4603      	mov	r3, r0
 8002478:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002480:	481c      	ldr	r0, [pc, #112]	; (80024f4 <DRV_CANFDSPI_ReadWordArray+0x100>)
 8002482:	f002 fef9 	bl	8005278 <HAL_GPIO_WritePin>

  if (spiTransferError) {
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <DRV_CANFDSPI_ReadWordArray+0x9e>
      return spiTransferError;
 800248c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002490:	e029      	b.n	80024e6 <DRV_CANFDSPI_ReadWordArray+0xf2>
  }

  // Convert Byte array to Word array
  n = 2;
 8002492:	2302      	movs	r3, #2
 8002494:	837b      	strh	r3, [r7, #26]
  for (i = 0; i < nWords; i++) {
 8002496:	2300      	movs	r3, #0
 8002498:	83fb      	strh	r3, [r7, #30]
 800249a:	e01e      	b.n	80024da <DRV_CANFDSPI_ReadWordArray+0xe6>
      w.word = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
      for (j = 0; j < 4; j++, n++) {
 80024a0:	2300      	movs	r3, #0
 80024a2:	83bb      	strh	r3, [r7, #28]
 80024a4:	e00d      	b.n	80024c2 <DRV_CANFDSPI_ReadWordArray+0xce>
          w.byte[j] = spiReceiveBuffer[n];
 80024a6:	8b7a      	ldrh	r2, [r7, #26]
 80024a8:	8bbb      	ldrh	r3, [r7, #28]
 80024aa:	4913      	ldr	r1, [pc, #76]	; (80024f8 <DRV_CANFDSPI_ReadWordArray+0x104>)
 80024ac:	5c8a      	ldrb	r2, [r1, r2]
 80024ae:	3320      	adds	r3, #32
 80024b0:	443b      	add	r3, r7
 80024b2:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (j = 0; j < 4; j++, n++) {
 80024b6:	8bbb      	ldrh	r3, [r7, #28]
 80024b8:	3301      	adds	r3, #1
 80024ba:	83bb      	strh	r3, [r7, #28]
 80024bc:	8b7b      	ldrh	r3, [r7, #26]
 80024be:	3301      	adds	r3, #1
 80024c0:	837b      	strh	r3, [r7, #26]
 80024c2:	8bbb      	ldrh	r3, [r7, #28]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d9ee      	bls.n	80024a6 <DRV_CANFDSPI_ReadWordArray+0xb2>
      }
      rxd[i] = w.word;
 80024c8:	8bfb      	ldrh	r3, [r7, #30]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	4413      	add	r3, r2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nWords; i++) {
 80024d4:	8bfb      	ldrh	r3, [r7, #30]
 80024d6:	3301      	adds	r3, #1
 80024d8:	83fb      	strh	r3, [r7, #30]
 80024da:	8bfa      	ldrh	r2, [r7, #30]
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3dc      	bcc.n	800249c <DRV_CANFDSPI_ReadWordArray+0xa8>
  }

  return spiTransferError;
 80024e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000c730 	.word	0x2000c730
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	2000c790 	.word	0x2000c790
 80024fc:	2000c810 	.word	0x2000c810

08002500 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  REG_CiCON ciCon;
  int8_t spiTransferError = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <DRV_CANFDSPI_Configure+0x118>)
 8002512:	60bb      	str	r3, [r7, #8]

  ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800251c:	b2da      	uxtb	r2, r3
 800251e:	7a3b      	ldrb	r3, [r7, #8]
 8002520:	f362 0304 	bfi	r3, r2, #0, #5
 8002524:	723b      	strb	r3, [r7, #8]
  ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	7a3b      	ldrb	r3, [r7, #8]
 8002532:	f362 1345 	bfi	r3, r2, #5, #1
 8002536:	723b      	strb	r3, [r7, #8]
  ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	7a3b      	ldrb	r3, [r7, #8]
 8002544:	f362 1386 	bfi	r3, r2, #6, #1
 8002548:	723b      	strb	r3, [r7, #8]
  ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	f362 0300 	bfi	r3, r2, #0, #1
 800255a:	727b      	strb	r3, [r7, #9]
  ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002564:	b2da      	uxtb	r2, r3
 8002566:	7a7b      	ldrb	r3, [r7, #9]
 8002568:	f362 0342 	bfi	r3, r2, #1, #2
 800256c:	727b      	strb	r3, [r7, #9]
  ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	7a7b      	ldrb	r3, [r7, #9]
 800257a:	f362 1304 	bfi	r3, r2, #4, #1
 800257e:	727b      	strb	r3, [r7, #9]
  ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	7abb      	ldrb	r3, [r7, #10]
 800258c:	f362 0300 	bfi	r3, r2, #0, #1
 8002590:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	7abb      	ldrb	r3, [r7, #10]
 800259e:	f362 0341 	bfi	r3, r2, #1, #1
 80025a2:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	7abb      	ldrb	r3, [r7, #10]
 80025b0:	f362 0382 	bfi	r3, r2, #2, #1
 80025b4:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.StoreInTEF = config->StoreInTEF;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	785b      	ldrb	r3, [r3, #1]
 80025ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	7abb      	ldrb	r3, [r7, #10]
 80025c2:	f362 03c3 	bfi	r3, r2, #3, #1
 80025c6:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TXQEnable = config->TXQEnable;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	7abb      	ldrb	r3, [r7, #10]
 80025d4:	f362 1304 	bfi	r3, r2, #4, #1
 80025d8:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	789b      	ldrb	r3, [r3, #2]
 80025de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	f362 1307 	bfi	r3, r2, #4, #4
 80025ea:	72fb      	strb	r3, [r7, #11]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fd3c 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <DRV_CANFDSPI_Configure+0x10a>
      return -1;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	e001      	b.n	800260e <DRV_CANFDSPI_Configure+0x10e>
  }

  return spiTransferError;
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	04980760 	.word	0x04980760

0800261c <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  REG_CiCON ciCon;
  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8002624:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8002626:	60fb      	str	r3, [r7, #12]

  config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8002628:	7b3b      	ldrb	r3, [r7, #12]
 800262a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800262e:	b2d9      	uxtb	r1, r3
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	7813      	ldrb	r3, [r2, #0]
 8002634:	f361 0304 	bfi	r3, r1, #0, #5
 8002638:	7013      	strb	r3, [r2, #0]
  config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 800263a:	7b3b      	ldrb	r3, [r7, #12]
 800263c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002640:	b2d9      	uxtb	r1, r3
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	7813      	ldrb	r3, [r2, #0]
 8002646:	f361 1345 	bfi	r3, r1, #5, #1
 800264a:	7013      	strb	r3, [r2, #0]
  config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 800264c:	7b3b      	ldrb	r3, [r7, #12]
 800264e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002652:	b2d9      	uxtb	r1, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	7813      	ldrb	r3, [r2, #0]
 8002658:	f361 1386 	bfi	r3, r1, #6, #1
 800265c:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002664:	b2d9      	uxtb	r1, r3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	7813      	ldrb	r3, [r2, #0]
 800266a:	f361 13c7 	bfi	r3, r1, #7, #1
 800266e:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8002670:	7b7b      	ldrb	r3, [r7, #13]
 8002672:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002676:	b2d9      	uxtb	r1, r3
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7853      	ldrb	r3, [r2, #1]
 800267c:	f361 0301 	bfi	r3, r1, #0, #2
 8002680:	7053      	strb	r3, [r2, #1]
  config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8002682:	7b7b      	ldrb	r3, [r7, #13]
 8002684:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002688:	b2d9      	uxtb	r1, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	7853      	ldrb	r3, [r2, #1]
 800268e:	f361 0382 	bfi	r3, r1, #2, #1
 8002692:	7053      	strb	r3, [r2, #1]
  config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800269a:	b2d9      	uxtb	r1, r3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	7853      	ldrb	r3, [r2, #1]
 80026a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80026a4:	7053      	strb	r3, [r2, #1]
  config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 80026a6:	7bbb      	ldrb	r3, [r7, #14]
 80026a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026ac:	b2d9      	uxtb	r1, r3
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	7853      	ldrb	r3, [r2, #1]
 80026b2:	f361 1304 	bfi	r3, r1, #4, #1
 80026b6:	7053      	strb	r3, [r2, #1]
  config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80026be:	b2d9      	uxtb	r1, r3
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	7853      	ldrb	r3, [r2, #1]
 80026c4:	f361 1345 	bfi	r3, r1, #5, #1
 80026c8:	7053      	strb	r3, [r2, #1]
  config->StoreInTEF = ciCon.bF.StoreInTEF;
 80026ca:	7bbb      	ldrb	r3, [r7, #14]
 80026cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80026d0:	b2d9      	uxtb	r1, r3
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	7853      	ldrb	r3, [r2, #1]
 80026d6:	f361 1386 	bfi	r3, r1, #6, #1
 80026da:	7053      	strb	r3, [r2, #1]
  config->TXQEnable = ciCon.bF.TXQEnable;
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80026e2:	b2d9      	uxtb	r1, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	7853      	ldrb	r3, [r2, #1]
 80026e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80026ec:	7053      	strb	r3, [r2, #1]
  config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026f4:	b2d9      	uxtb	r1, r3
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	7893      	ldrb	r3, [r2, #2]
 80026fa:	f361 0303 	bfi	r3, r1, #0, #4
 80026fe:	7093      	strb	r3, [r2, #2]

  return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	04980760 	.word	0x04980760

08002714 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	460a      	mov	r2, r1
 800271e:	71fb      	strb	r3, [r7, #7]
 8002720:	4613      	mov	r3, r2
 8002722:	71bb      	strb	r3, [r7, #6]
  uint8_t d = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	73bb      	strb	r3, [r7, #14]
  int8_t spiTransferError = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]

  // Read
  spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 800272c:	f107 020e 	add.w	r2, r7, #14
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2103      	movs	r1, #3
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fbb7 	bl	8001ea8 <DRV_CANFDSPI_ReadByte>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <DRV_CANFDSPI_OperationModeSelect+0x38>
      return -1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e01a      	b.n	8002782 <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  // Modify
  d &= ~0x07;
 800274c:	7bbb      	ldrb	r3, [r7, #14]
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	b2db      	uxtb	r3, r3
 8002754:	73bb      	strb	r3, [r7, #14]
  d |= opMode;
 8002756:	7bba      	ldrb	r2, [r7, #14]
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	4313      	orrs	r3, r2
 800275c:	b2db      	uxtb	r3, r3
 800275e:	73bb      	strb	r3, [r7, #14]

  // Write
  spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8002760:	7bba      	ldrb	r2, [r7, #14]
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2103      	movs	r1, #3
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fbe2 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8002770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <DRV_CANFDSPI_OperationModeSelect+0x6a>
      return -2;
 8002778:	f06f 0301 	mvn.w	r3, #1
 800277c:	e001      	b.n	8002782 <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  return spiTransferError;
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	603a      	str	r2, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	460b      	mov	r3, r1
 800279a:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	81bb      	strh	r3, [r7, #12]

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 80027a6:	60bb      	str	r3, [r7, #8]

  ciFifoCon.txBF.TxEnable = 1;
 80027a8:	7a3b      	ldrb	r3, [r7, #8]
 80027aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ae:	723b      	strb	r3, [r7, #8]
  ciFifoCon.txBF.FifoSize = config->FifoSize;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	f362 0304 	bfi	r3, r2, #0, #5
 80027c0:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	7afb      	ldrb	r3, [r7, #11]
 80027ce:	f362 1347 	bfi	r3, r2, #5, #3
 80027d2:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	7abb      	ldrb	r3, [r7, #10]
 80027e0:	f362 1346 	bfi	r3, r2, #5, #2
 80027e4:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.TxPriority = config->TxPriority;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	7abb      	ldrb	r3, [r7, #10]
 80027f2:	f362 0304 	bfi	r3, r2, #0, #5
 80027f6:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.RTREnable = config->RTREnable;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	7a3b      	ldrb	r3, [r7, #8]
 8002804:	f362 1386 	bfi	r3, r2, #6, #1
 8002808:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	0052      	lsls	r2, r2, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	b29b      	uxth	r3, r3
 8002818:	3350      	adds	r3, #80	; 0x50
 800281a:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	89b9      	ldrh	r1, [r7, #12]
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fc24 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 800282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00600400 	.word	0x00600400

0800283c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8002846:	60fb      	str	r3, [r7, #12]

  config->RTREnable = ciFifoCon.txBF.RTREnable;
 8002848:	7b3b      	ldrb	r3, [r7, #12]
 800284a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800284e:	b2d9      	uxtb	r1, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	7813      	ldrb	r3, [r2, #0]
 8002854:	f361 0300 	bfi	r3, r1, #0, #1
 8002858:	7013      	strb	r3, [r2, #0]
  config->TxPriority = ciFifoCon.txBF.TxPriority;
 800285a:	7bbb      	ldrb	r3, [r7, #14]
 800285c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002860:	b2d9      	uxtb	r1, r3
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	7813      	ldrb	r3, [r2, #0]
 8002866:	f361 0345 	bfi	r3, r1, #1, #5
 800286a:	7013      	strb	r3, [r2, #0]
  config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 800286c:	7bbb      	ldrb	r3, [r7, #14]
 800286e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8002872:	b2d9      	uxtb	r1, r3
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	7813      	ldrb	r3, [r2, #0]
 8002878:	f361 1387 	bfi	r3, r1, #6, #2
 800287c:	7013      	strb	r3, [r2, #0]
  config->FifoSize = ciFifoCon.txBF.FifoSize;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002884:	b2d9      	uxtb	r1, r3
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	7853      	ldrb	r3, [r2, #1]
 800288a:	f361 0304 	bfi	r3, r1, #0, #5
 800288e:	7053      	strb	r3, [r2, #1]
  config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002896:	b2d9      	uxtb	r1, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	7853      	ldrb	r3, [r2, #1]
 800289c:	f361 1347 	bfi	r3, r1, #5, #3
 80028a0:	7053      	strb	r3, [r2, #1]

  return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	00600400 	.word	0x00600400

080028b4 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0a0      	sub	sp, #128	; 0x80
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	4603      	mov	r3, r0
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	460b      	mov	r3, r1
 80028c4:	73bb      	strb	r3, [r7, #14]
  uint32_t fifoReg[3];
  uint32_t dataBytesInObject;
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	0052      	lsls	r2, r2, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3350      	adds	r3, #80	; 0x50
 80028dc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 80028e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80028e4:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80028e8:	7bf8      	ldrb	r0, [r7, #15]
 80028ea:	2303      	movs	r3, #3
 80028ec:	f7ff fd82 	bl	80023f4 <DRV_CANFDSPI_ReadWordArray>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 80028f6:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
      return -1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e0c5      	b.n	8002a90 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that it is a transmit buffer
  ciFifoCon.word = fifoReg[0];
 8002904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002906:	667b      	str	r3, [r7, #100]	; 0x64
  if (!ciFifoCon.txBF.TxEnable) {
 8002908:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800290c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <DRV_CANFDSPI_TransmitChannelLoad+0x68>
      return -2;
 8002916:	f06f 0301 	mvn.w	r3, #1
 800291a:	e0b9      	b.n	8002a90 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that DLC is big enough for data
  dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	791b      	ldrb	r3, [r3, #4]
 8002920:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fc76 	bl	8004218 <DRV_CANFDSPI_DlcToDataBytes>
 800292c:	6778      	str	r0, [r7, #116]	; 0x74
  if (dataBytesInObject < txdNumBytes) {
 800292e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002934:	429a      	cmp	r2, r3
 8002936:	d202      	bcs.n	800293e <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
      return -3;
 8002938:	f06f 0302 	mvn.w	r3, #2
 800293c:	e0a8      	b.n	8002a90 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Get status
  ciFifoSta.word = fifoReg[1];
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002940:	663b      	str	r3, [r7, #96]	; 0x60

  // Get address
  ciFifoUa.word = fifoReg[2];
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8002946:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	b29b      	uxth	r3, r3
 8002950:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
  a += cRAMADDR_START;
 8002954:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  uint8_t txBuffer[MAX_MSG_SIZE];

  txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	743b      	strb	r3, [r7, #16]
  txBuffer[1] = txObj->byte[1];
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	747b      	strb	r3, [r7, #17]
  txBuffer[2] = txObj->byte[2];
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	789b      	ldrb	r3, [r3, #2]
 8002970:	74bb      	strb	r3, [r7, #18]
  txBuffer[3] = txObj->byte[3];
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	74fb      	strb	r3, [r7, #19]

  txBuffer[4] = txObj->byte[4];
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	791b      	ldrb	r3, [r3, #4]
 800297c:	753b      	strb	r3, [r7, #20]
  txBuffer[5] = txObj->byte[5];
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	795b      	ldrb	r3, [r3, #5]
 8002982:	757b      	strb	r3, [r7, #21]
  txBuffer[6] = txObj->byte[6];
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	799b      	ldrb	r3, [r3, #6]
 8002988:	75bb      	strb	r3, [r7, #22]
  txBuffer[7] = txObj->byte[7];
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	79db      	ldrb	r3, [r3, #7]
 800298e:	75fb      	strb	r3, [r7, #23]

  uint8_t i;
  for (i = 0; i < txdNumBytes; i++) {
 8002990:	2300      	movs	r3, #0
 8002992:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002996:	e010      	b.n	80029ba <DRV_CANFDSPI_TransmitChannelLoad+0x106>
      txBuffer[i + 8] = txd[i];
 8002998:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	441a      	add	r2, r3
 80029a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80029a4:	3308      	adds	r3, #8
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	3380      	adds	r3, #128	; 0x80
 80029aa:	443b      	add	r3, r7
 80029ac:	f803 2c70 	strb.w	r2, [r3, #-112]
  for (i = 0; i < txdNumBytes; i++) {
 80029b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80029b4:	3301      	adds	r3, #1
 80029b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80029be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d8e8      	bhi.n	8002998 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
  }

  // Make sure we write a multiple of 4 bytes to RAM
  uint16_t n = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  uint8_t j = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  if (txdNumBytes % 4) {
 80029d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02b      	beq.n	8002a36 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
      // Need to add bytes
      n = 4 - (txdNumBytes % 4);
 80029de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f1c3 0304 	rsb	r3, r3, #4
 80029ee:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      i = txdNumBytes + 8;
 80029f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3308      	adds	r3, #8
 80029fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

      for (j = 0; j < n; j++) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002a04:	e010      	b.n	8002a28 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
          txBuffer[i + 8 + j] = 0;
 8002a06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002a0a:	f103 0208 	add.w	r2, r3, #8
 8002a0e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002a12:	4413      	add	r3, r2
 8002a14:	3380      	adds	r3, #128	; 0x80
 8002a16:	443b      	add	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f803 2c70 	strb.w	r2, [r3, #-112]
      for (j = 0; j < n; j++) {
 8002a1e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002a22:	3301      	adds	r3, #1
 8002a24:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002a28:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d8e7      	bhi.n	8002a06 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
      }
  }

  spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8002a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002a40:	4413      	add	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3308      	adds	r3, #8
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f107 0210 	add.w	r2, r7, #16
 8002a4c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8002a50:	7bf8      	ldrb	r0, [r7, #15]
 8002a52:	f7ff fc75 	bl	8002340 <DRV_CANFDSPI_WriteByteArray>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8002a5c:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
      return -4;
 8002a64:	f06f 0303 	mvn.w	r3, #3
 8002a68:	e012      	b.n	8002a90 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Set UINC and TXREQ
  spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8002a6a:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8002a6e:	7bb9      	ldrb	r1, [r7, #14]
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f84d 	bl	8002b12 <DRV_CANFDSPI_TransmitChannelUpdate>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8002a7e:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
      return -5;
 8002a86:	f06f 0304 	mvn.w	r3, #4
 8002a8a:	e001      	b.n	8002a90 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  return spiTransferError;
 8002a8c:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3780      	adds	r7, #128	; 0x80
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
  uint8_t d = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	81bb      	strh	r3, [r7, #12]
  int8_t spiTransferError = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	72fb      	strb	r3, [r7, #11]

  // Address of TXREQ
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002ab4:	79bb      	ldrb	r3, [r7, #6]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	0052      	lsls	r2, r2, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	81bb      	strh	r3, [r7, #12]
  a += 1;
 8002ac6:	89bb      	ldrh	r3, [r7, #12]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	81bb      	strh	r3, [r7, #12]

  // Set TXREQ
  d = 0x02;
 8002acc:	2302      	movs	r3, #2
 8002ace:	73fb      	strb	r3, [r7, #15]

  // Write
  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	89b9      	ldrh	r1, [r7, #12]
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fa2a 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 8002adc:	4603      	mov	r3, r0
 8002ade:	72fb      	strb	r3, [r7, #11]

  return spiTransferError;
 8002ae0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <DRV_CANFDSPI_TransmitChannelReset>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_TransmitChannelReset(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	460a      	mov	r2, r1
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71bb      	strb	r3, [r7, #6]
  return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
 8002afc:	79ba      	ldrb	r2, [r7, #6]
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fa30 	bl	8002f68 <DRV_CANFDSPI_ReceiveChannelReset>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <DRV_CANFDSPI_TransmitChannelUpdate>:

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	71bb      	strb	r3, [r7, #6]
 8002b20:	4613      	mov	r3, r2
 8002b22:	717b      	strb	r3, [r7, #5]
  uint16_t a;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002b28:	79bb      	ldrb	r3, [r7, #6]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	0052      	lsls	r2, r2, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3351      	adds	r3, #81	; 0x51
 8002b38:	81bb      	strh	r3, [r7, #12]
  ciFifoCon.word = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
  ciFifoCon.txBF.UINC = 1;
 8002b3e:	7a7b      	ldrb	r3, [r7, #9]
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	727b      	strb	r3, [r7, #9]

  // Set TXREQ
  if (flush) {
 8002b46:	797b      	ldrb	r3, [r7, #5]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
      ciFifoCon.txBF.TxRequest = 1;
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	f043 0302 	orr.w	r3, r3, #2
 8002b52:	727b      	strb	r3, [r7, #9]
  }

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002b54:	7a7a      	ldrb	r2, [r7, #9]
 8002b56:	89b9      	ldrh	r1, [r7, #12]
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f9e8 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8002b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
      return -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	e001      	b.n	8002b76 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
  }

  return spiTransferError;
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	603a      	str	r2, [r7, #0]
 8002b88:	71fb      	strb	r3, [r7, #7]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiFLTOBJ fObj;
  int8_t spiTransferError = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]

  // Setup
  fObj.word = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  fObj.bF = *id;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	333e      	adds	r3, #62	; 0x3e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	89b9      	ldrh	r1, [r7, #12]
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fa5f 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	603a      	str	r2, [r7, #0]
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiMASK mObj;
  int8_t spiTransferError = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]

  // Setup
  mObj.word = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  mObj.bF = *mask;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002be0:	79bb      	ldrb	r3, [r7, #6]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002bec:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	89b9      	ldrh	r1, [r7, #12]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fa3b 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8002c0a:	b590      	push	{r4, r7, lr}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4604      	mov	r4, r0
 8002c12:	4608      	mov	r0, r1
 8002c14:	4611      	mov	r1, r2
 8002c16:	461a      	mov	r2, r3
 8002c18:	4623      	mov	r3, r4
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71bb      	strb	r3, [r7, #6]
 8002c20:	460b      	mov	r3, r1
 8002c22:	717b      	strb	r3, [r7, #5]
 8002c24:	4613      	mov	r3, r2
 8002c26:	713b      	strb	r3, [r7, #4]
  uint16_t a;
  REG_CiFLTCON_BYTE fCtrl;
  int8_t spiTransferError = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]

  // Enable
  if (enable) {
 8002c2c:	793b      	ldrb	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <DRV_CANFDSPI_FilterToFifoLink+0x32>
      fCtrl.bF.Enable = 1;
 8002c32:	7a3b      	ldrb	r3, [r7, #8]
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	723b      	strb	r3, [r7, #8]
 8002c3a:	e003      	b.n	8002c44 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
  } else {
      fCtrl.bF.Enable = 0;
 8002c3c:	7a3b      	ldrb	r3, [r7, #8]
 8002c3e:	f36f 13c7 	bfc	r3, #7, #1
 8002c42:	723b      	strb	r3, [r7, #8]
  }

  // Link
  fCtrl.bF.BufferPointer = channel;
 8002c44:	797b      	ldrb	r3, [r7, #5]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	7a3b      	ldrb	r3, [r7, #8]
 8002c4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002c52:	723b      	strb	r3, [r7, #8]
  a = cREGADDR_CiFLTCON + filter;
 8002c54:	79bb      	ldrb	r3, [r7, #6]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002c5c:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8002c5e:	7a3a      	ldrb	r2, [r7, #8]
 8002c60:	89b9      	ldrh	r1, [r7, #12]
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f963 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
	...

08002c7c <DRV_CANFDSPI_ReceiveChannelConfigure>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	603a      	str	r2, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	81bb      	strh	r3, [r7, #12]

  if (channel == CAN_TXQUEUE_CH0) {
 8002c94:	79bb      	ldrb	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
      return -100;
 8002c9a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002c9e:	e033      	b.n	8002d08 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
  }

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002ca2:	60bb      	str	r3, [r7, #8]

  ciFifoCon.rxBF.TxEnable = 0;
 8002ca4:	7a3b      	ldrb	r3, [r7, #8]
 8002ca6:	f36f 13c7 	bfc	r3, #7, #1
 8002caa:	723b      	strb	r3, [r7, #8]
  ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f362 0304 	bfi	r3, r2, #0, #5
 8002cbc:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	f362 1347 	bfi	r3, r2, #5, #3
 8002cce:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	7a3b      	ldrb	r3, [r7, #8]
 8002cdc:	f362 1345 	bfi	r3, r2, #5, #1
 8002ce0:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002ce2:	79bb      	ldrb	r3, [r7, #6]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	0052      	lsls	r2, r2, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3350      	adds	r3, #80	; 0x50
 8002cf2:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	89b9      	ldrh	r1, [r7, #12]
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f9b8 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8002d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00600400 	.word	0x00600400

08002d14 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 8002d1e:	60fb      	str	r3, [r7, #12]

  config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d26:	b2d9      	uxtb	r1, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	7813      	ldrb	r3, [r2, #0]
 8002d2c:	f361 0345 	bfi	r3, r1, #1, #5
 8002d30:	7013      	strb	r3, [r2, #0]
  config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002d38:	b2d9      	uxtb	r1, r3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	8813      	ldrh	r3, [r2, #0]
 8002d3e:	f361 1388 	bfi	r3, r1, #6, #3
 8002d42:	8013      	strh	r3, [r2, #0]
  config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8002d44:	7b3b      	ldrb	r3, [r7, #12]
 8002d46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d4a:	b2d9      	uxtb	r1, r3
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	7813      	ldrb	r3, [r2, #0]
 8002d50:	f361 0300 	bfi	r3, r1, #0, #1
 8002d54:	7013      	strb	r3, [r2, #0]

  return 0;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	00600400 	.word	0x00600400

08002d68 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0a0      	sub	sp, #128	; 0x80
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60ba      	str	r2, [r7, #8]
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	460b      	mov	r3, r1
 8002d78:	73bb      	strb	r3, [r7, #14]
  uint8_t n = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint8_t i = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  uint16_t a;
  uint32_t fifoReg[3];
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002d8c:	7bbb      	ldrb	r3, [r7, #14]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	0052      	lsls	r2, r2, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3350      	adds	r3, #80	; 0x50
 8002d9c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002da0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002da4:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8002da8:	7bf8      	ldrb	r0, [r7, #15]
 8002daa:	2303      	movs	r3, #3
 8002dac:	f7ff fb22 	bl	80023f4 <DRV_CANFDSPI_ReadWordArray>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8002db6:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
      return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e0cd      	b.n	8002f60 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Check that it is a receive buffer
  ciFifoCon.word = fifoReg[0];
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (ciFifoCon.txBF.TxEnable) {
 8002dc8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <DRV_CANFDSPI_ReceiveMessageGet+0x74>
      return -2;
 8002dd6:	f06f 0301 	mvn.w	r3, #1
 8002dda:	e0c1      	b.n	8002f60 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Get Status
  ciFifoSta.word = fifoReg[1];
 8002ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dde:	667b      	str	r3, [r7, #100]	; 0x64

  // Get address
  ciFifoUa.word = fifoReg[2];
 8002de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de2:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8002de4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
  a += cRAMADDR_START;
 8002df2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dfa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  // Number of bytes to read
  n = nBytes + 8; // Add 8 header bytes
 8002dfe:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002e02:	3308      	adds	r3, #8
 8002e04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002e08:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
      n += 4; // Add 4 time stamp bytes
 8002e16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Make sure we read a multiple of 4 bytes from RAM
  if (n % 4) {
 8002e20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
      n = n + 4 - (n % 4);
 8002e2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3304      	adds	r3, #4
 8002e3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Read rxObj using one access
  uint8_t ba[MAX_MSG_SIZE];

  if (n > MAX_MSG_SIZE) {
 8002e3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e42:	2b4c      	cmp	r3, #76	; 0x4c
 8002e44:	d902      	bls.n	8002e4c <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
      n = MAX_MSG_SIZE;
 8002e46:	234c      	movs	r3, #76	; 0x4c
 8002e48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8002e4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f107 0214 	add.w	r2, r7, #20
 8002e56:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8002e5a:	7bf8      	ldrb	r0, [r7, #15]
 8002e5c:	f7ff fa08 	bl	8002270 <DRV_CANFDSPI_ReadByteArray>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8002e66:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
      return -3;
 8002e6e:	f06f 0302 	mvn.w	r3, #2
 8002e72:	e075      	b.n	8002f60 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Assign message header
  REG_t myReg;

  myReg.byte[0] = ba[0];
 8002e74:	7d3b      	ldrb	r3, [r7, #20]
 8002e76:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[1];
 8002e78:	7d7b      	ldrb	r3, [r7, #21]
 8002e7a:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[2];
 8002e7c:	7dbb      	ldrb	r3, [r7, #22]
 8002e7e:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[3];
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	74fb      	strb	r3, [r7, #19]
  rxObj->word[0] = myReg.word;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	601a      	str	r2, [r3, #0]

  myReg.byte[0] = ba[4];
 8002e8a:	7e3b      	ldrb	r3, [r7, #24]
 8002e8c:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[5];
 8002e8e:	7e7b      	ldrb	r3, [r7, #25]
 8002e90:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[6];
 8002e92:	7ebb      	ldrb	r3, [r7, #26]
 8002e94:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[7];
 8002e96:	7efb      	ldrb	r3, [r7, #27]
 8002e98:	74fb      	strb	r3, [r7, #19]
  rxObj->word[1] = myReg.word;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	605a      	str	r2, [r3, #4]

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002ea0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d027      	beq.n	8002efe <DRV_CANFDSPI_ReceiveMessageGet+0x196>
      myReg.byte[0] = ba[8];
 8002eae:	7f3b      	ldrb	r3, [r7, #28]
 8002eb0:	743b      	strb	r3, [r7, #16]
      myReg.byte[1] = ba[9];
 8002eb2:	7f7b      	ldrb	r3, [r7, #29]
 8002eb4:	747b      	strb	r3, [r7, #17]
      myReg.byte[2] = ba[10];
 8002eb6:	7fbb      	ldrb	r3, [r7, #30]
 8002eb8:	74bb      	strb	r3, [r7, #18]
      myReg.byte[3] = ba[11];
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	74fb      	strb	r3, [r7, #19]
      rxObj->word[2] = myReg.word;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002eca:	e011      	b.n	8002ef0 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
          rxd[i] = ba[i + 12];
 8002ecc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002ed0:	f103 020c 	add.w	r2, r3, #12
 8002ed4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	440b      	add	r3, r1
 8002edc:	3280      	adds	r2, #128	; 0x80
 8002ede:	443a      	add	r2, r7
 8002ee0:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002ee4:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 8002ee6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002eea:	3301      	adds	r3, #1
 8002eec:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002ef0:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002ef4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d3e7      	bcc.n	8002ecc <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8002efc:	e01e      	b.n	8002f3c <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
      }
  } else {
      rxObj->word[2] = 0;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002f0a:	e011      	b.n	8002f30 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
          rxd[i] = ba[i + 8];
 8002f0c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002f10:	f103 0208 	add.w	r2, r3, #8
 8002f14:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3280      	adds	r2, #128	; 0x80
 8002f1e:	443a      	add	r2, r7
 8002f20:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002f24:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 8002f26:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002f30:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002f34:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d3e7      	bcc.n	8002f0c <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
      }
  }

  // UINC channel
  spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8002f3c:	7bba      	ldrb	r2, [r7, #14]
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f839 	bl	8002fba <DRV_CANFDSPI_ReceiveChannelUpdate>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8002f4e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
      return -4;
 8002f56:	f06f 0303 	mvn.w	r3, #3
 8002f5a:	e001      	b.n	8002f60 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  return spiTransferError;
 8002f5c:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3780      	adds	r7, #128	; 0x80
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <DRV_CANFDSPI_ReceiveChannelReset>:

int8_t DRV_CANFDSPI_ReceiveChannelReset(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460a      	mov	r2, r1
 8002f72:	71fb      	strb	r3, [r7, #7]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71bb      	strb	r3, [r7, #6]
  uint16_t a = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	81fb      	strh	r3, [r7, #14]
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	737b      	strb	r3, [r7, #13]

  // Address and data
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	0052      	lsls	r2, r2, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3351      	adds	r3, #81	; 0x51
 8002f90:	81fb      	strh	r3, [r7, #14]
  ciFifoCon.word = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  ciFifoCon.rxBF.FRESET = 1;
 8002f96:	7a7b      	ldrb	r3, [r7, #9]
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	727b      	strb	r3, [r7, #9]

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002f9e:	7a7a      	ldrb	r2, [r7, #9]
 8002fa0:	89f9      	ldrh	r1, [r7, #14]
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe ffc3 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	737b      	strb	r3, [r7, #13]

  return spiTransferError;
 8002fae:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <DRV_CANFDSPI_ReceiveChannelUpdate>:

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
      CAN_FIFO_CHANNEL channel)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	460a      	mov	r2, r1
 8002fc4:	71fb      	strb	r3, [r7, #7]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	71bb      	strb	r3, [r7, #6]
  uint16_t a = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	81fb      	strh	r3, [r7, #14]
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	737b      	strb	r3, [r7, #13]
  ciFifoCon.word = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002fd6:	79bb      	ldrb	r3, [r7, #6]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	0052      	lsls	r2, r2, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3351      	adds	r3, #81	; 0x51
 8002fe6:	81fb      	strh	r3, [r7, #14]
  ciFifoCon.rxBF.UINC = 1;
 8002fe8:	7a7b      	ldrb	r3, [r7, #9]
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	727b      	strb	r3, [r7, #9]

  // Write byte
  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002ff0:	7a7a      	ldrb	r2, [r7, #9]
 8002ff2:	89f9      	ldrh	r1, [r7, #14]
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe ff9a 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	737b      	strb	r3, [r7, #13]

  return spiTransferError;
 8003000:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	460a      	mov	r2, r1
 8003016:	71fb      	strb	r3, [r7, #7]
 8003018:	4613      	mov	r3, r2
 800301a:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8003024:	231e      	movs	r3, #30
 8003026:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800302c:	f107 0208 	add.w	r2, r7, #8
 8003030:	89b9      	ldrh	r1, [r7, #12]
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f86b 	bl	8002110 <DRV_CANFDSPI_ReadHalfWord>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e01b      	b.n	8003084 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800304c:	893b      	ldrh	r3, [r7, #8]
 800304e:	b21a      	sxth	r2, r3
 8003050:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003054:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003058:	b21b      	sxth	r3, r3
 800305a:	4313      	orrs	r3, r2
 800305c:	b21b      	sxth	r3, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8003062:	893a      	ldrh	r2, [r7, #8]
 8003064:	89b9      	ldrh	r1, [r7, #12]
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f8b1 	bl	80021d0 <DRV_CANFDSPI_WriteHalfWord>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 800307a:	f06f 0301 	mvn.w	r3, #1
 800307e:	e001      	b.n	8003084 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8003080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	603a      	str	r2, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
 8003098:	460b      	mov	r3, r1
 800309a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	0052      	lsls	r2, r2, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3354      	adds	r3, #84	; 0x54
 80030b8:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80030ba:	f107 0208 	add.w	r2, r7, #8
 80030be:	89b9      	ldrh	r1, [r7, #12]
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fef0 	bl	8001ea8 <DRV_CANFDSPI_ReadByte>
 80030c8:	4603      	mov	r3, r0
 80030ca:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e007      	b.n	80030ea <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 80030da:	7a3b      	ldrb	r3, [r7, #8]
 80030dc:	f003 0317 	and.w	r3, r3, #23
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	603a      	str	r2, [r7, #0]
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8003110:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003114:	e022      	b.n	800315c <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800311a:	79bb      	ldrb	r3, [r7, #6]
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	0052      	lsls	r2, r2, #1
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	b29b      	uxth	r3, r3
 8003128:	3354      	adds	r3, #84	; 0x54
 800312a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800312c:	f107 0208 	add.w	r2, r7, #8
 8003130:	89b9      	ldrh	r1, [r7, #12]
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe feb7 	bl	8001ea8 <DRV_CANFDSPI_ReadByte>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e007      	b.n	800315c <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800314c:	7a3b      	ldrb	r3, [r7, #8]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	b2da      	uxtb	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
 800316e:	460b      	mov	r3, r1
 8003170:	71bb      	strb	r3, [r7, #6]
 8003172:	4613      	mov	r3, r2
 8003174:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 800317e:	79bb      	ldrb	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8003184:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003188:	e036      	b.n	80031f8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800318a:	79bb      	ldrb	r3, [r7, #6]
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	0052      	lsls	r2, r2, #1
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	b29b      	uxth	r3, r3
 8003198:	3350      	adds	r3, #80	; 0x50
 800319a:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80031a0:	f107 0208 	add.w	r2, r7, #8
 80031a4:	89b9      	ldrh	r1, [r7, #12]
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fe7d 	bl	8001ea8 <DRV_CANFDSPI_ReadByte>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	e01b      	b.n	80031f8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80031c0:	7a3b      	ldrb	r3, [r7, #8]
 80031c2:	b25a      	sxtb	r2, r3
 80031c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b25b      	sxtb	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 80031d6:	7a3a      	ldrb	r2, [r7, #8]
 80031d8:	89b9      	ldrh	r1, [r7, #12]
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fea7 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 80031ee:	f06f 0301 	mvn.w	r3, #1
 80031f2:	e001      	b.n	80031f8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8003218:	2334      	movs	r3, #52	; 0x34
 800321a:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8003220:	f107 0210 	add.w	r2, r7, #16
 8003224:	8ab9      	ldrh	r1, [r7, #20]
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fec3 	bl	8001fb4 <DRV_CANFDSPI_ReadWord>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e00d      	b.n	800325c <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8003240:	7c7a      	ldrb	r2, [r7, #17]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8003246:	7c3a      	ldrb	r2, [r7, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800324c:	7cbb      	ldrb	r3, [r7, #18]
 800324e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8003276:	f107 020e 	add.w	r2, r7, #14
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fe11 	bl	8001ea8 <DRV_CANFDSPI_ReadByte>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e015      	b.n	80032c4 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80032a2:	7bba      	ldrb	r2, [r7, #14]
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f640 610c 	movw	r1, #3596	; 0xe0c
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fe40 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80032b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80032bc:	f06f 0301 	mvn.w	r3, #1
 80032c0:	e000      	b.n	80032c4 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b090      	sub	sp, #64	; 0x40
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	460a      	mov	r2, r1
 80032d6:	71fb      	strb	r3, [r7, #7]
 80032d8:	4613      	mov	r3, r2
 80032da:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e6:	e008      	b.n	80032fa <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 80032e8:	f107 0208 	add.w	r2, r7, #8
 80032ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ee:	4413      	add	r3, r2
 80032f0:	79ba      	ldrb	r2, [r7, #6]
 80032f2:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80032f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f6:	3301      	adds	r3, #1
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	2b2f      	cmp	r3, #47	; 0x2f
 80032fe:	d9f3      	bls.n	80032e8 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8003300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003304:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330a:	e016      	b.n	800333a <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 800330c:	f107 0208 	add.w	r2, r7, #8
 8003310:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003312:	79f8      	ldrb	r0, [r7, #7]
 8003314:	2330      	movs	r3, #48	; 0x30
 8003316:	f7ff f813 	bl	8002340 <DRV_CANFDSPI_WriteByteArray>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8003320:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	e00a      	b.n	8003344 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 800332e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003330:	3330      	adds	r3, #48	; 0x30
 8003332:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	3301      	adds	r3, #1
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333c:	2b29      	cmp	r3, #41	; 0x29
 800333e:	d9e5      	bls.n	800330c <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8003340:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8003344:	4618      	mov	r0, r3
 8003346:	3740      	adds	r7, #64	; 0x40
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	4603      	mov	r3, r0
 8003360:	71bb      	strb	r3, [r7, #6]
 8003362:	460b      	mov	r3, r1
 8003364:	717b      	strb	r3, [r7, #5]
 8003366:	4613      	mov	r3, r2
 8003368:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 800336e:	793b      	ldrb	r3, [r7, #4]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d036      	beq.n	80033e2 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8003374:	2b02      	cmp	r3, #2
 8003376:	dc4c      	bgt.n	8003412 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 800337c:	2b01      	cmp	r3, #1
 800337e:	d018      	beq.n	80033b2 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8003380:	e047      	b.n	8003412 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8003382:	79ba      	ldrb	r2, [r7, #6]
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f84b 	bl	8003424 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 800339a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339e:	e03d      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80033a0:	797a      	ldrb	r2, [r7, #5]
 80033a2:	79b9      	ldrb	r1, [r7, #6]
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f8c2 	bl	8003530 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
            break;
 80033b0:	e032      	b.n	8003418 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 80033b2:	79ba      	ldrb	r2, [r7, #6]
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 faf1 	bl	80039a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 80033ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ce:	e025      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 80033d0:	797a      	ldrb	r2, [r7, #5]
 80033d2:	79b9      	ldrb	r1, [r7, #6]
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fb6e 	bl	8003ab8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]
            break;
 80033e0:	e01a      	b.n	8003418 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 80033e2:	79ba      	ldrb	r2, [r7, #6]
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fd0f 	bl	8003e0c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	e00d      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8003400:	797a      	ldrb	r2, [r7, #5]
 8003402:	79b9      	ldrb	r1, [r7, #6]
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fd8c 	bl	8003f24 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]
            break;
 8003410:	e002      	b.n	8003418 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8003412:	23ff      	movs	r3, #255	; 0xff
 8003414:	73fb      	strb	r3, [r7, #15]
            break;
 8003416:	bf00      	nop
    }

    return spiTransferError;
 8003418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}

08003424 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	460a      	mov	r2, r1
 800342e:	71fb      	strb	r3, [r7, #7]
 8003430:	4613      	mov	r3, r2
 8003432:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003438:	4b3c      	ldr	r3, [pc, #240]	; (800352c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 800343a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 800343c:	79bb      	ldrb	r3, [r7, #6]
 800343e:	2b11      	cmp	r3, #17
 8003440:	d862      	bhi.n	8003508 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003491 	.word	0x08003491
 800344c:	08003491 	.word	0x08003491
 8003450:	08003491 	.word	0x08003491
 8003454:	08003491 	.word	0x08003491
 8003458:	08003491 	.word	0x08003491
 800345c:	08003491 	.word	0x08003491
 8003460:	08003491 	.word	0x08003491
 8003464:	08003491 	.word	0x08003491
 8003468:	080034af 	.word	0x080034af
 800346c:	080034af 	.word	0x080034af
 8003470:	080034af 	.word	0x080034af
 8003474:	080034af 	.word	0x080034af
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034cd 	.word	0x080034cd
 8003488:	080034cd 	.word	0x080034cd
 800348c:	080034eb 	.word	0x080034eb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003494:	233e      	movs	r3, #62	; 0x3e
 8003496:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003498:	7a7b      	ldrb	r3, [r7, #9]
 800349a:	220f      	movs	r2, #15
 800349c:	f362 0306 	bfi	r3, r2, #0, #7
 80034a0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80034a2:	7a3b      	ldrb	r3, [r7, #8]
 80034a4:	220f      	movs	r2, #15
 80034a6:	f362 0306 	bfi	r3, r2, #0, #7
 80034aa:	723b      	strb	r3, [r7, #8]
            break;
 80034ac:	e02f      	b.n	800350e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 80034b2:	237e      	movs	r3, #126	; 0x7e
 80034b4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 80034b6:	7a7b      	ldrb	r3, [r7, #9]
 80034b8:	221f      	movs	r2, #31
 80034ba:	f362 0306 	bfi	r3, r2, #0, #7
 80034be:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80034c0:	7a3b      	ldrb	r3, [r7, #8]
 80034c2:	221f      	movs	r2, #31
 80034c4:	f362 0306 	bfi	r3, r2, #0, #7
 80034c8:	723b      	strb	r3, [r7, #8]
            break;
 80034ca:	e020      	b.n	800350e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80034d0:	231e      	movs	r3, #30
 80034d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80034d4:	7a7b      	ldrb	r3, [r7, #9]
 80034d6:	2207      	movs	r2, #7
 80034d8:	f362 0306 	bfi	r3, r2, #0, #7
 80034dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80034de:	7a3b      	ldrb	r3, [r7, #8]
 80034e0:	2207      	movs	r2, #7
 80034e2:	f362 0306 	bfi	r3, r2, #0, #7
 80034e6:	723b      	strb	r3, [r7, #8]
            break;
 80034e8:	e011      	b.n	800350e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 80034ee:	23fe      	movs	r3, #254	; 0xfe
 80034f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 80034f2:	7a7b      	ldrb	r3, [r7, #9]
 80034f4:	223f      	movs	r2, #63	; 0x3f
 80034f6:	f362 0306 	bfi	r3, r2, #0, #7
 80034fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 80034fc:	7a3b      	ldrb	r3, [r7, #8]
 80034fe:	223f      	movs	r2, #63	; 0x3f
 8003500:	f362 0306 	bfi	r3, r2, #0, #7
 8003504:	723b      	strb	r3, [r7, #8]
            break;
 8003506:	e002      	b.n	800350e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	e009      	b.n	8003522 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	2104      	movs	r1, #4
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fdab 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 800351a:	4603      	mov	r3, r0
 800351c:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	003e0f0f 	.word	0x003e0f0f

08003530 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
 800353a:	460b      	mov	r3, r1
 800353c:	71bb      	strb	r3, [r7, #6]
 800353e:	4613      	mov	r3, r2
 8003540:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003546:	4be2      	ldr	r3, [pc, #904]	; (80038d0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8003548:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800354e:	7abb      	ldrb	r3, [r7, #10]
 8003550:	2202      	movs	r2, #2
 8003552:	f362 0301 	bfi	r3, r2, #0, #2
 8003556:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	2b11      	cmp	r3, #17
 8003560:	f200 81f6 	bhi.w	8003950 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035b5 	.word	0x080035b5
 8003570:	080035f3 	.word	0x080035f3
 8003574:	08003631 	.word	0x08003631
 8003578:	0800366f 	.word	0x0800366f
 800357c:	080036ad 	.word	0x080036ad
 8003580:	080036eb 	.word	0x080036eb
 8003584:	08003725 	.word	0x08003725
 8003588:	08003759 	.word	0x08003759
 800358c:	0800378b 	.word	0x0800378b
 8003590:	080037d1 	.word	0x080037d1
 8003594:	08003817 	.word	0x08003817
 8003598:	08003855 	.word	0x08003855
 800359c:	08003893 	.word	0x08003893
 80035a0:	080038d5 	.word	0x080038d5
 80035a4:	08003913 	.word	0x08003913
 80035a8:	0800366f 	.word	0x0800366f
 80035ac:	08003725 	.word	0x08003725
 80035b0:	0800378b 	.word	0x0800378b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 80035b8:	7bbb      	ldrb	r3, [r7, #14]
 80035ba:	221e      	movs	r2, #30
 80035bc:	f362 0304 	bfi	r3, r2, #0, #5
 80035c0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 80035c2:	7b7b      	ldrb	r3, [r7, #13]
 80035c4:	2207      	movs	r2, #7
 80035c6:	f362 0303 	bfi	r3, r2, #0, #4
 80035ca:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80035cc:	7b3b      	ldrb	r3, [r7, #12]
 80035ce:	2207      	movs	r2, #7
 80035d0:	f362 0303 	bfi	r3, r2, #0, #4
 80035d4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80035d6:	7a7b      	ldrb	r3, [r7, #9]
 80035d8:	221f      	movs	r2, #31
 80035da:	f362 0306 	bfi	r3, r2, #0, #7
 80035de:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	7a3b      	ldrb	r3, [r7, #8]
 80035ea:	f362 0305 	bfi	r3, r2, #0, #6
 80035ee:	723b      	strb	r3, [r7, #8]
            break;
 80035f0:	e1b1      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80035f6:	7bbb      	ldrb	r3, [r7, #14]
 80035f8:	220e      	movs	r2, #14
 80035fa:	f362 0304 	bfi	r3, r2, #0, #5
 80035fe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003600:	7b7b      	ldrb	r3, [r7, #13]
 8003602:	2203      	movs	r2, #3
 8003604:	f362 0303 	bfi	r3, r2, #0, #4
 8003608:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800360a:	7b3b      	ldrb	r3, [r7, #12]
 800360c:	2203      	movs	r2, #3
 800360e:	f362 0303 	bfi	r3, r2, #0, #4
 8003612:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003614:	7a7b      	ldrb	r3, [r7, #9]
 8003616:	220f      	movs	r2, #15
 8003618:	f362 0306 	bfi	r3, r2, #0, #7
 800361c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003624:	b2da      	uxtb	r2, r3
 8003626:	7a3b      	ldrb	r3, [r7, #8]
 8003628:	f362 0305 	bfi	r3, r2, #0, #6
 800362c:	723b      	strb	r3, [r7, #8]
            break;
 800362e:	e192      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	2208      	movs	r2, #8
 8003638:	f362 0304 	bfi	r3, r2, #0, #5
 800363c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800363e:	7b7b      	ldrb	r3, [r7, #13]
 8003640:	2202      	movs	r2, #2
 8003642:	f362 0303 	bfi	r3, r2, #0, #4
 8003646:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003648:	7b3b      	ldrb	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	f362 0303 	bfi	r3, r2, #0, #4
 8003650:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003652:	7a7b      	ldrb	r3, [r7, #9]
 8003654:	2209      	movs	r2, #9
 8003656:	f362 0306 	bfi	r3, r2, #0, #7
 800365a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003662:	b2da      	uxtb	r2, r3
 8003664:	7a3b      	ldrb	r3, [r7, #8]
 8003666:	f362 0305 	bfi	r3, r2, #0, #6
 800366a:	723b      	strb	r3, [r7, #8]
            break;
 800366c:	e173      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	2206      	movs	r2, #6
 8003676:	f362 0304 	bfi	r3, r2, #0, #5
 800367a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800367c:	7b7b      	ldrb	r3, [r7, #13]
 800367e:	2201      	movs	r2, #1
 8003680:	f362 0303 	bfi	r3, r2, #0, #4
 8003684:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003686:	7b3b      	ldrb	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f362 0303 	bfi	r3, r2, #0, #4
 800368e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003690:	7a7b      	ldrb	r3, [r7, #9]
 8003692:	2207      	movs	r2, #7
 8003694:	f362 0306 	bfi	r3, r2, #0, #7
 8003698:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	7a3b      	ldrb	r3, [r7, #8]
 80036a4:	f362 0305 	bfi	r3, r2, #0, #6
 80036a8:	723b      	strb	r3, [r7, #8]
            break;
 80036aa:	e154      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 80036b0:	7bbb      	ldrb	r3, [r7, #14]
 80036b2:	2204      	movs	r2, #4
 80036b4:	f362 0304 	bfi	r3, r2, #0, #5
 80036b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036ba:	7b7b      	ldrb	r3, [r7, #13]
 80036bc:	2201      	movs	r2, #1
 80036be:	f362 0303 	bfi	r3, r2, #0, #4
 80036c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036c4:	7b3b      	ldrb	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f362 0303 	bfi	r3, r2, #0, #4
 80036cc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 80036ce:	7a7b      	ldrb	r3, [r7, #9]
 80036d0:	2205      	movs	r2, #5
 80036d2:	f362 0306 	bfi	r3, r2, #0, #7
 80036d6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	7a3b      	ldrb	r3, [r7, #8]
 80036e2:	f362 0305 	bfi	r3, r2, #0, #6
 80036e6:	723b      	strb	r3, [r7, #8]
            break;
 80036e8:	e135      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 80036ee:	7bbb      	ldrb	r3, [r7, #14]
 80036f0:	2203      	movs	r2, #3
 80036f2:	f362 0304 	bfi	r3, r2, #0, #5
 80036f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	f36f 0303 	bfc	r3, #0, #4
 80036fe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003700:	7b3b      	ldrb	r3, [r7, #12]
 8003702:	f36f 0303 	bfc	r3, #0, #4
 8003706:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8003708:	7a7b      	ldrb	r3, [r7, #9]
 800370a:	2204      	movs	r2, #4
 800370c:	f362 0306 	bfi	r3, r2, #0, #7
 8003710:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003718:	b2da      	uxtb	r2, r3
 800371a:	7a3b      	ldrb	r3, [r7, #8]
 800371c:	f362 0305 	bfi	r3, r2, #0, #6
 8003720:	723b      	strb	r3, [r7, #8]
            break;
 8003722:	e118      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003728:	7bbb      	ldrb	r3, [r7, #14]
 800372a:	2202      	movs	r2, #2
 800372c:	f362 0304 	bfi	r3, r2, #0, #5
 8003730:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003732:	7b7b      	ldrb	r3, [r7, #13]
 8003734:	f36f 0303 	bfc	r3, #0, #4
 8003738:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800373a:	7b3b      	ldrb	r3, [r7, #12]
 800373c:	f36f 0303 	bfc	r3, #0, #4
 8003740:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003742:	7a7b      	ldrb	r3, [r7, #9]
 8003744:	2203      	movs	r2, #3
 8003746:	f362 0306 	bfi	r3, r2, #0, #7
 800374a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 800374c:	7a3b      	ldrb	r3, [r7, #8]
 800374e:	2201      	movs	r2, #1
 8003750:	f362 0305 	bfi	r3, r2, #0, #6
 8003754:	723b      	strb	r3, [r7, #8]
            break;
 8003756:	e0fe      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800375c:	7bbb      	ldrb	r3, [r7, #14]
 800375e:	2201      	movs	r2, #1
 8003760:	f362 0304 	bfi	r3, r2, #0, #5
 8003764:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003766:	7b7b      	ldrb	r3, [r7, #13]
 8003768:	f36f 0303 	bfc	r3, #0, #4
 800376c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	f36f 0303 	bfc	r3, #0, #4
 8003774:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003776:	7a7b      	ldrb	r3, [r7, #9]
 8003778:	2202      	movs	r2, #2
 800377a:	f362 0306 	bfi	r3, r2, #0, #7
 800377e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8003780:	7a3b      	ldrb	r3, [r7, #8]
 8003782:	f36f 0305 	bfc	r3, #0, #6
 8003786:	723b      	strb	r3, [r7, #8]
            break;
 8003788:	e0e5      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800378e:	7bbb      	ldrb	r3, [r7, #14]
 8003790:	221e      	movs	r2, #30
 8003792:	f362 0304 	bfi	r3, r2, #0, #5
 8003796:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003798:	7b7b      	ldrb	r3, [r7, #13]
 800379a:	2207      	movs	r2, #7
 800379c:	f362 0303 	bfi	r3, r2, #0, #4
 80037a0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80037a2:	7b3b      	ldrb	r3, [r7, #12]
 80037a4:	2207      	movs	r2, #7
 80037a6:	f362 0303 	bfi	r3, r2, #0, #4
 80037aa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80037ac:	7a7b      	ldrb	r3, [r7, #9]
 80037ae:	221f      	movs	r2, #31
 80037b0:	f362 0306 	bfi	r3, r2, #0, #7
 80037b4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	7a3b      	ldrb	r3, [r7, #8]
 80037c0:	f362 0305 	bfi	r3, r2, #0, #6
 80037c4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80037c6:	7abb      	ldrb	r3, [r7, #10]
 80037c8:	f36f 0301 	bfc	r3, #0, #2
 80037cc:	72bb      	strb	r3, [r7, #10]
            break;
 80037ce:	e0c2      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80037d4:	7bbb      	ldrb	r3, [r7, #14]
 80037d6:	2211      	movs	r2, #17
 80037d8:	f362 0304 	bfi	r3, r2, #0, #5
 80037dc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80037de:	7b7b      	ldrb	r3, [r7, #13]
 80037e0:	2204      	movs	r2, #4
 80037e2:	f362 0303 	bfi	r3, r2, #0, #4
 80037e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80037e8:	7b3b      	ldrb	r3, [r7, #12]
 80037ea:	2204      	movs	r2, #4
 80037ec:	f362 0303 	bfi	r3, r2, #0, #4
 80037f0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80037f2:	7a7b      	ldrb	r3, [r7, #9]
 80037f4:	2212      	movs	r2, #18
 80037f6:	f362 0306 	bfi	r3, r2, #0, #7
 80037fa:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003802:	b2da      	uxtb	r2, r3
 8003804:	7a3b      	ldrb	r3, [r7, #8]
 8003806:	f362 0305 	bfi	r3, r2, #0, #6
 800380a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800380c:	7abb      	ldrb	r3, [r7, #10]
 800380e:	f36f 0301 	bfc	r3, #0, #2
 8003812:	72bb      	strb	r3, [r7, #10]
            break;
 8003814:	e09f      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800381a:	7bbb      	ldrb	r3, [r7, #14]
 800381c:	221e      	movs	r2, #30
 800381e:	f362 0304 	bfi	r3, r2, #0, #5
 8003822:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003824:	7b7b      	ldrb	r3, [r7, #13]
 8003826:	2207      	movs	r2, #7
 8003828:	f362 0303 	bfi	r3, r2, #0, #4
 800382c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800382e:	7b3b      	ldrb	r3, [r7, #12]
 8003830:	2207      	movs	r2, #7
 8003832:	f362 0303 	bfi	r3, r2, #0, #4
 8003836:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003838:	7a7b      	ldrb	r3, [r7, #9]
 800383a:	221f      	movs	r2, #31
 800383c:	f362 0306 	bfi	r3, r2, #0, #7
 8003840:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003848:	b2da      	uxtb	r2, r3
 800384a:	7a3b      	ldrb	r3, [r7, #8]
 800384c:	f362 0305 	bfi	r3, r2, #0, #6
 8003850:	723b      	strb	r3, [r7, #8]
            break;
 8003852:	e080      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8003858:	7bbb      	ldrb	r3, [r7, #14]
 800385a:	2212      	movs	r2, #18
 800385c:	f362 0304 	bfi	r3, r2, #0, #5
 8003860:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	2205      	movs	r2, #5
 8003866:	f362 0303 	bfi	r3, r2, #0, #4
 800386a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 800386c:	7b3b      	ldrb	r3, [r7, #12]
 800386e:	2205      	movs	r2, #5
 8003870:	f362 0303 	bfi	r3, r2, #0, #4
 8003874:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8003876:	7a7b      	ldrb	r3, [r7, #9]
 8003878:	2213      	movs	r2, #19
 800387a:	f362 0306 	bfi	r3, r2, #0, #7
 800387e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003886:	b2da      	uxtb	r2, r3
 8003888:	7a3b      	ldrb	r3, [r7, #8]
 800388a:	f362 0305 	bfi	r3, r2, #0, #6
 800388e:	723b      	strb	r3, [r7, #8]
            break;
 8003890:	e061      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003896:	7bbb      	ldrb	r3, [r7, #14]
 8003898:	220e      	movs	r2, #14
 800389a:	f362 0304 	bfi	r3, r2, #0, #5
 800389e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80038a0:	7b7b      	ldrb	r3, [r7, #13]
 80038a2:	2203      	movs	r2, #3
 80038a4:	f362 0303 	bfi	r3, r2, #0, #4
 80038a8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80038aa:	7b3b      	ldrb	r3, [r7, #12]
 80038ac:	2203      	movs	r2, #3
 80038ae:	f362 0303 	bfi	r3, r2, #0, #4
 80038b2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80038b4:	7a7b      	ldrb	r3, [r7, #9]
 80038b6:	220f      	movs	r2, #15
 80038b8:	f362 0306 	bfi	r3, r2, #0, #7
 80038bc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	7a3b      	ldrb	r3, [r7, #8]
 80038c8:	f362 0305 	bfi	r3, r2, #0, #6
 80038cc:	723b      	strb	r3, [r7, #8]
            break;
 80038ce:	e042      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 80038d0:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	2208      	movs	r2, #8
 80038dc:	f362 0304 	bfi	r3, r2, #0, #5
 80038e0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80038e2:	7b7b      	ldrb	r3, [r7, #13]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f362 0303 	bfi	r3, r2, #0, #4
 80038ea:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80038ec:	7b3b      	ldrb	r3, [r7, #12]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f362 0303 	bfi	r3, r2, #0, #4
 80038f4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80038f6:	7a7b      	ldrb	r3, [r7, #9]
 80038f8:	2209      	movs	r2, #9
 80038fa:	f362 0306 	bfi	r3, r2, #0, #7
 80038fe:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003906:	b2da      	uxtb	r2, r3
 8003908:	7a3b      	ldrb	r3, [r7, #8]
 800390a:	f362 0305 	bfi	r3, r2, #0, #6
 800390e:	723b      	strb	r3, [r7, #8]
            break;
 8003910:	e021      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003916:	7bbb      	ldrb	r3, [r7, #14]
 8003918:	2206      	movs	r2, #6
 800391a:	f362 0304 	bfi	r3, r2, #0, #5
 800391e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003920:	7b7b      	ldrb	r3, [r7, #13]
 8003922:	2201      	movs	r2, #1
 8003924:	f362 0303 	bfi	r3, r2, #0, #4
 8003928:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800392a:	7b3b      	ldrb	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f362 0303 	bfi	r3, r2, #0, #4
 8003932:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003934:	7a7b      	ldrb	r3, [r7, #9]
 8003936:	2207      	movs	r2, #7
 8003938:	f362 0306 	bfi	r3, r2, #0, #7
 800393c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	b2da      	uxtb	r2, r3
 8003946:	7a3b      	ldrb	r3, [r7, #8]
 8003948:	f362 0305 	bfi	r3, r2, #0, #6
 800394c:	723b      	strb	r3, [r7, #8]
            break;
 800394e:	e002      	b.n	8003956 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e01f      	b.n	8003996 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	2108      	movs	r1, #8
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fb87 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003966:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 800396e:	f06f 0301 	mvn.w	r3, #1
 8003972:	e010      	b.n	8003996 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	210c      	movs	r1, #12
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fb78 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 800398c:	f06f 0302 	mvn.w	r3, #2
 8003990:	e001      	b.n	8003996 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8003992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop

080039a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	460a      	mov	r2, r1
 80039aa:	71fb      	strb	r3, [r7, #7]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80039b4:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80039b6:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80039b8:	79bb      	ldrb	r3, [r7, #6]
 80039ba:	2b11      	cmp	r3, #17
 80039bc:	d862      	bhi.n	8003a84 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	08003a0d 	.word	0x08003a0d
 80039c8:	08003a0d 	.word	0x08003a0d
 80039cc:	08003a85 	.word	0x08003a85
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a0d 	.word	0x08003a0d
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a0d 	.word	0x08003a0d
 80039e0:	08003a0d 	.word	0x08003a0d
 80039e4:	08003a2b 	.word	0x08003a2b
 80039e8:	08003a2b 	.word	0x08003a2b
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a2b 	.word	0x08003a2b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a49 	.word	0x08003a49
 8003a04:	08003a49 	.word	0x08003a49
 8003a08:	08003a67 	.word	0x08003a67
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003a10:	231e      	movs	r3, #30
 8003a12:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003a14:	7a7b      	ldrb	r3, [r7, #9]
 8003a16:	2207      	movs	r2, #7
 8003a18:	f362 0306 	bfi	r3, r2, #0, #7
 8003a1c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003a1e:	7a3b      	ldrb	r3, [r7, #8]
 8003a20:	2207      	movs	r2, #7
 8003a22:	f362 0306 	bfi	r3, r2, #0, #7
 8003a26:	723b      	strb	r3, [r7, #8]
            break;
 8003a28:	e02f      	b.n	8003a8a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003a2e:	233e      	movs	r3, #62	; 0x3e
 8003a30:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003a32:	7a7b      	ldrb	r3, [r7, #9]
 8003a34:	220f      	movs	r2, #15
 8003a36:	f362 0306 	bfi	r3, r2, #0, #7
 8003a3a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003a3c:	7a3b      	ldrb	r3, [r7, #8]
 8003a3e:	220f      	movs	r2, #15
 8003a40:	f362 0306 	bfi	r3, r2, #0, #7
 8003a44:	723b      	strb	r3, [r7, #8]
            break;
 8003a46:	e020      	b.n	8003a8a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003a4c:	230e      	movs	r3, #14
 8003a4e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003a50:	7a7b      	ldrb	r3, [r7, #9]
 8003a52:	2203      	movs	r2, #3
 8003a54:	f362 0306 	bfi	r3, r2, #0, #7
 8003a58:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8003a5a:	7a3b      	ldrb	r3, [r7, #8]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f362 0306 	bfi	r3, r2, #0, #7
 8003a62:	723b      	strb	r3, [r7, #8]
            break;
 8003a64:	e011      	b.n	8003a8a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8003a6a:	237e      	movs	r3, #126	; 0x7e
 8003a6c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8003a6e:	7a7b      	ldrb	r3, [r7, #9]
 8003a70:	221f      	movs	r2, #31
 8003a72:	f362 0306 	bfi	r3, r2, #0, #7
 8003a76:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8003a78:	7a3b      	ldrb	r3, [r7, #8]
 8003a7a:	221f      	movs	r2, #31
 8003a7c:	f362 0306 	bfi	r3, r2, #0, #7
 8003a80:	723b      	strb	r3, [r7, #8]
            break;
 8003a82:	e002      	b.n	8003a8a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	e010      	b.n	8003aac <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	2104      	movs	r1, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe faed 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8003aa2:	f06f 0301 	mvn.w	r3, #1
 8003aa6:	e001      	b.n	8003aac <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8003aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	003e0f0f 	.word	0x003e0f0f

08003ab8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	71bb      	strb	r3, [r7, #6]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003ace:	4bce      	ldr	r3, [pc, #824]	; (8003e08 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8003ad0:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003ad6:	7abb      	ldrb	r3, [r7, #10]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f362 0301 	bfi	r3, r2, #0, #2
 8003ade:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003ae4:	79bb      	ldrb	r3, [r7, #6]
 8003ae6:	2b11      	cmp	r3, #17
 8003ae8:	f200 8166 	bhi.w	8003db8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b7b 	.word	0x08003b7b
 8003afc:	08003db9 	.word	0x08003db9
 8003b00:	08003bb9 	.word	0x08003bb9
 8003b04:	08003bf3 	.word	0x08003bf3
 8003b08:	08003c2d 	.word	0x08003c2d
 8003b0c:	08003c2d 	.word	0x08003c2d
 8003b10:	08003c2d 	.word	0x08003c2d
 8003b14:	08003c33 	.word	0x08003c33
 8003b18:	08003c79 	.word	0x08003c79
 8003b1c:	08003cbf 	.word	0x08003cbf
 8003b20:	08003cfd 	.word	0x08003cfd
 8003b24:	08003d3b 	.word	0x08003d3b
 8003b28:	08003d79 	.word	0x08003d79
 8003b2c:	08003d7f 	.word	0x08003d7f
 8003b30:	08003bb9 	.word	0x08003bb9
 8003b34:	08003c2d 	.word	0x08003c2d
 8003b38:	08003c33 	.word	0x08003c33
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003b40:	7bbb      	ldrb	r3, [r7, #14]
 8003b42:	220e      	movs	r2, #14
 8003b44:	f362 0304 	bfi	r3, r2, #0, #5
 8003b48:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003b4a:	7b7b      	ldrb	r3, [r7, #13]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	f362 0303 	bfi	r3, r2, #0, #4
 8003b52:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003b54:	7b3b      	ldrb	r3, [r7, #12]
 8003b56:	2203      	movs	r2, #3
 8003b58:	f362 0303 	bfi	r3, r2, #0, #4
 8003b5c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003b5e:	7a7b      	ldrb	r3, [r7, #9]
 8003b60:	220f      	movs	r2, #15
 8003b62:	f362 0306 	bfi	r3, r2, #0, #7
 8003b66:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	7a3b      	ldrb	r3, [r7, #8]
 8003b72:	f362 0305 	bfi	r3, r2, #0, #6
 8003b76:	723b      	strb	r3, [r7, #8]
            break;
 8003b78:	e121      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003b7e:	7bbb      	ldrb	r3, [r7, #14]
 8003b80:	2206      	movs	r2, #6
 8003b82:	f362 0304 	bfi	r3, r2, #0, #5
 8003b86:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003b88:	7b7b      	ldrb	r3, [r7, #13]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f362 0303 	bfi	r3, r2, #0, #4
 8003b90:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003b92:	7b3b      	ldrb	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f362 0303 	bfi	r3, r2, #0, #4
 8003b9a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003b9c:	7a7b      	ldrb	r3, [r7, #9]
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	f362 0306 	bfi	r3, r2, #0, #7
 8003ba4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	7a3b      	ldrb	r3, [r7, #8]
 8003bb0:	f362 0305 	bfi	r3, r2, #0, #6
 8003bb4:	723b      	strb	r3, [r7, #8]
            break;
 8003bb6:	e102      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f362 0304 	bfi	r3, r2, #0, #5
 8003bc4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003bc6:	7b7b      	ldrb	r3, [r7, #13]
 8003bc8:	f36f 0303 	bfc	r3, #0, #4
 8003bcc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003bce:	7b3b      	ldrb	r3, [r7, #12]
 8003bd0:	f36f 0303 	bfc	r3, #0, #4
 8003bd4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003bd6:	7a7b      	ldrb	r3, [r7, #9]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f362 0306 	bfi	r3, r2, #0, #7
 8003bde:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	7a3b      	ldrb	r3, [r7, #8]
 8003bea:	f362 0305 	bfi	r3, r2, #0, #6
 8003bee:	723b      	strb	r3, [r7, #8]
            break;
 8003bf0:	e0e5      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8003bf6:	7bbb      	ldrb	r3, [r7, #14]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f362 0304 	bfi	r3, r2, #0, #5
 8003bfe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003c00:	7b7b      	ldrb	r3, [r7, #13]
 8003c02:	f36f 0303 	bfc	r3, #0, #4
 8003c06:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	f36f 0303 	bfc	r3, #0, #4
 8003c0e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003c10:	7a7b      	ldrb	r3, [r7, #9]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f362 0306 	bfi	r3, r2, #0, #7
 8003c18:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	7a3b      	ldrb	r3, [r7, #8]
 8003c24:	f362 0305 	bfi	r3, r2, #0, #6
 8003c28:	723b      	strb	r3, [r7, #8]
            break;
 8003c2a:	e0c8      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	e0e5      	b.n	8003dfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003c36:	7bbb      	ldrb	r3, [r7, #14]
 8003c38:	221e      	movs	r2, #30
 8003c3a:	f362 0304 	bfi	r3, r2, #0, #5
 8003c3e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003c40:	7b7b      	ldrb	r3, [r7, #13]
 8003c42:	2207      	movs	r2, #7
 8003c44:	f362 0303 	bfi	r3, r2, #0, #4
 8003c48:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003c4a:	7b3b      	ldrb	r3, [r7, #12]
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	f362 0303 	bfi	r3, r2, #0, #4
 8003c52:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003c54:	7a7b      	ldrb	r3, [r7, #9]
 8003c56:	221f      	movs	r2, #31
 8003c58:	f362 0306 	bfi	r3, r2, #0, #7
 8003c5c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	7a3b      	ldrb	r3, [r7, #8]
 8003c68:	f362 0305 	bfi	r3, r2, #0, #6
 8003c6c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003c6e:	7abb      	ldrb	r3, [r7, #10]
 8003c70:	f36f 0301 	bfc	r3, #0, #2
 8003c74:	72bb      	strb	r3, [r7, #10]
            break;
 8003c76:	e0a2      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8003c7c:	7bbb      	ldrb	r3, [r7, #14]
 8003c7e:	2211      	movs	r2, #17
 8003c80:	f362 0304 	bfi	r3, r2, #0, #5
 8003c84:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8003c86:	7b7b      	ldrb	r3, [r7, #13]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	f362 0303 	bfi	r3, r2, #0, #4
 8003c8e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8003c90:	7b3b      	ldrb	r3, [r7, #12]
 8003c92:	2204      	movs	r2, #4
 8003c94:	f362 0303 	bfi	r3, r2, #0, #4
 8003c98:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8003c9a:	7a7b      	ldrb	r3, [r7, #9]
 8003c9c:	2212      	movs	r2, #18
 8003c9e:	f362 0306 	bfi	r3, r2, #0, #7
 8003ca2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	7a3b      	ldrb	r3, [r7, #8]
 8003cae:	f362 0305 	bfi	r3, r2, #0, #6
 8003cb2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003cb4:	7abb      	ldrb	r3, [r7, #10]
 8003cb6:	f36f 0301 	bfc	r3, #0, #2
 8003cba:	72bb      	strb	r3, [r7, #10]
            break;
 8003cbc:	e07f      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003cc2:	7bbb      	ldrb	r3, [r7, #14]
 8003cc4:	220e      	movs	r2, #14
 8003cc6:	f362 0304 	bfi	r3, r2, #0, #5
 8003cca:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003ccc:	7b7b      	ldrb	r3, [r7, #13]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	f362 0303 	bfi	r3, r2, #0, #4
 8003cd4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003cd6:	7b3b      	ldrb	r3, [r7, #12]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f362 0303 	bfi	r3, r2, #0, #4
 8003cde:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003ce0:	7a7b      	ldrb	r3, [r7, #9]
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	f362 0306 	bfi	r3, r2, #0, #7
 8003ce8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	7a3b      	ldrb	r3, [r7, #8]
 8003cf4:	f362 0305 	bfi	r3, r2, #0, #6
 8003cf8:	723b      	strb	r3, [r7, #8]
            break;
 8003cfa:	e060      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003d00:	7bbb      	ldrb	r3, [r7, #14]
 8003d02:	2208      	movs	r2, #8
 8003d04:	f362 0304 	bfi	r3, r2, #0, #5
 8003d08:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003d0a:	7b7b      	ldrb	r3, [r7, #13]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f362 0303 	bfi	r3, r2, #0, #4
 8003d12:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003d14:	7b3b      	ldrb	r3, [r7, #12]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f362 0303 	bfi	r3, r2, #0, #4
 8003d1c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003d1e:	7a7b      	ldrb	r3, [r7, #9]
 8003d20:	2209      	movs	r2, #9
 8003d22:	f362 0306 	bfi	r3, r2, #0, #7
 8003d26:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	7a3b      	ldrb	r3, [r7, #8]
 8003d32:	f362 0305 	bfi	r3, r2, #0, #6
 8003d36:	723b      	strb	r3, [r7, #8]
            break;
 8003d38:	e041      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003d3e:	7bbb      	ldrb	r3, [r7, #14]
 8003d40:	2206      	movs	r2, #6
 8003d42:	f362 0304 	bfi	r3, r2, #0, #5
 8003d46:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003d48:	7b7b      	ldrb	r3, [r7, #13]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f362 0303 	bfi	r3, r2, #0, #4
 8003d50:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003d52:	7b3b      	ldrb	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f362 0303 	bfi	r3, r2, #0, #4
 8003d5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003d5c:	7a7b      	ldrb	r3, [r7, #9]
 8003d5e:	2207      	movs	r2, #7
 8003d60:	f362 0306 	bfi	r3, r2, #0, #7
 8003d64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	7a3b      	ldrb	r3, [r7, #8]
 8003d70:	f362 0305 	bfi	r3, r2, #0, #6
 8003d74:	723b      	strb	r3, [r7, #8]
            break;
 8003d76:	e022      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	e03f      	b.n	8003dfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f362 0304 	bfi	r3, r2, #0, #5
 8003d8a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003d8c:	7b7b      	ldrb	r3, [r7, #13]
 8003d8e:	f36f 0303 	bfc	r3, #0, #4
 8003d92:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003d94:	7b3b      	ldrb	r3, [r7, #12]
 8003d96:	f36f 0303 	bfc	r3, #0, #4
 8003d9a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003d9c:	7a7b      	ldrb	r3, [r7, #9]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	f362 0306 	bfi	r3, r2, #0, #7
 8003da4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	7a3b      	ldrb	r3, [r7, #8]
 8003db0:	f362 0305 	bfi	r3, r2, #0, #6
 8003db4:	723b      	strb	r3, [r7, #8]
            break;
 8003db6:	e002      	b.n	8003dbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	e01f      	b.n	8003dfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	2108      	movs	r1, #8
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe f953 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8003dd6:	f06f 0301 	mvn.w	r3, #1
 8003dda:	e010      	b.n	8003dfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	210c      	movs	r1, #12
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe f944 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003df4:	f06f 0302 	mvn.w	r3, #2
 8003df8:	e001      	b.n	8003dfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8003dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	000e0303 	.word	0x000e0303

08003e0c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	460a      	mov	r2, r1
 8003e16:	71fb      	strb	r3, [r7, #7]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003e20:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003e22:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003e24:	79bb      	ldrb	r3, [r7, #6]
 8003e26:	2b11      	cmp	r3, #17
 8003e28:	d862      	bhi.n	8003ef0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003ef1 	.word	0x08003ef1
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e97 	.word	0x08003e97
 8003e54:	08003e97 	.word	0x08003e97
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e97 	.word	0x08003e97
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e97 	.word	0x08003e97
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003eb5 	.word	0x08003eb5
 8003e70:	08003eb5 	.word	0x08003eb5
 8003e74:	08003ed3 	.word	0x08003ed3
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003e7c:	230e      	movs	r3, #14
 8003e7e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003e80:	7a7b      	ldrb	r3, [r7, #9]
 8003e82:	2203      	movs	r2, #3
 8003e84:	f362 0306 	bfi	r3, r2, #0, #7
 8003e88:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8003e8a:	7a3b      	ldrb	r3, [r7, #8]
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	f362 0306 	bfi	r3, r2, #0, #7
 8003e92:	723b      	strb	r3, [r7, #8]
            break;
 8003e94:	e02f      	b.n	8003ef6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003e9a:	231e      	movs	r3, #30
 8003e9c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003e9e:	7a7b      	ldrb	r3, [r7, #9]
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	f362 0306 	bfi	r3, r2, #0, #7
 8003ea6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003ea8:	7a3b      	ldrb	r3, [r7, #8]
 8003eaa:	2207      	movs	r2, #7
 8003eac:	f362 0306 	bfi	r3, r2, #0, #7
 8003eb0:	723b      	strb	r3, [r7, #8]
            break;
 8003eb2:	e020      	b.n	8003ef6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8003eb8:	2307      	movs	r3, #7
 8003eba:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003ebc:	7a7b      	ldrb	r3, [r7, #9]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f362 0306 	bfi	r3, r2, #0, #7
 8003ec4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8003ec6:	7a3b      	ldrb	r3, [r7, #8]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f362 0306 	bfi	r3, r2, #0, #7
 8003ece:	723b      	strb	r3, [r7, #8]
            break;
 8003ed0:	e011      	b.n	8003ef6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003ed6:	233e      	movs	r3, #62	; 0x3e
 8003ed8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003eda:	7a7b      	ldrb	r3, [r7, #9]
 8003edc:	220f      	movs	r2, #15
 8003ede:	f362 0306 	bfi	r3, r2, #0, #7
 8003ee2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003ee4:	7a3b      	ldrb	r3, [r7, #8]
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	f362 0306 	bfi	r3, r2, #0, #7
 8003eec:	723b      	strb	r3, [r7, #8]
            break;
 8003eee:	e002      	b.n	8003ef6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	e010      	b.n	8003f18 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	2104      	movs	r1, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe f8b7 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8003f02:	4603      	mov	r3, r0
 8003f04:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003f0e:	f06f 0301 	mvn.w	r3, #1
 8003f12:	e001      	b.n	8003f18 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	003e0f0f 	.word	0x003e0f0f

08003f24 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	71bb      	strb	r3, [r7, #6]
 8003f32:	4613      	mov	r3, r2
 8003f34:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003f3a:	4b92      	ldr	r3, [pc, #584]	; (8004184 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003f3c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003f42:	7abb      	ldrb	r3, [r7, #10]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f362 0301 	bfi	r3, r2, #0, #2
 8003f4a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003f50:	79bb      	ldrb	r3, [r7, #6]
 8003f52:	2b11      	cmp	r3, #17
 8003f54:	f200 80ef 	bhi.w	8004136 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003fa9 	.word	0x08003fa9
 8003f64:	08003fe7 	.word	0x08003fe7
 8003f68:	08004137 	.word	0x08004137
 8003f6c:	08004021 	.word	0x08004021
 8003f70:	08004021 	.word	0x08004021
 8003f74:	08004021 	.word	0x08004021
 8003f78:	08004021 	.word	0x08004021
 8003f7c:	08004021 	.word	0x08004021
 8003f80:	08004027 	.word	0x08004027
 8003f84:	0800406d 	.word	0x0800406d
 8003f88:	080040b3 	.word	0x080040b3
 8003f8c:	080040f1 	.word	0x080040f1
 8003f90:	080040f7 	.word	0x080040f7
 8003f94:	08004131 	.word	0x08004131
 8003f98:	08004131 	.word	0x08004131
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004021 	.word	0x08004021
 8003fa4:	08004027 	.word	0x08004027
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	2206      	movs	r2, #6
 8003fb0:	f362 0304 	bfi	r3, r2, #0, #5
 8003fb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003fb6:	7b7b      	ldrb	r3, [r7, #13]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f362 0303 	bfi	r3, r2, #0, #4
 8003fbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003fc0:	7b3b      	ldrb	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f362 0303 	bfi	r3, r2, #0, #4
 8003fc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003fca:	7a7b      	ldrb	r3, [r7, #9]
 8003fcc:	2207      	movs	r2, #7
 8003fce:	f362 0306 	bfi	r3, r2, #0, #7
 8003fd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	7a3b      	ldrb	r3, [r7, #8]
 8003fde:	f362 0305 	bfi	r3, r2, #0, #6
 8003fe2:	723b      	strb	r3, [r7, #8]
            break;
 8003fe4:	e0aa      	b.n	800413c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f362 0304 	bfi	r3, r2, #0, #5
 8003ff2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003ff4:	7b7b      	ldrb	r3, [r7, #13]
 8003ff6:	f36f 0303 	bfc	r3, #0, #4
 8003ffa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003ffc:	7b3b      	ldrb	r3, [r7, #12]
 8003ffe:	f36f 0303 	bfc	r3, #0, #4
 8004002:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004004:	7a7b      	ldrb	r3, [r7, #9]
 8004006:	2203      	movs	r2, #3
 8004008:	f362 0306 	bfi	r3, r2, #0, #7
 800400c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004014:	b2da      	uxtb	r2, r3
 8004016:	7a3b      	ldrb	r3, [r7, #8]
 8004018:	f362 0305 	bfi	r3, r2, #0, #6
 800401c:	723b      	strb	r3, [r7, #8]
            break;
 800401e:	e08d      	b.n	800413c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	e0aa      	b.n	800417c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	220e      	movs	r2, #14
 800402e:	f362 0304 	bfi	r3, r2, #0, #5
 8004032:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004034:	7b7b      	ldrb	r3, [r7, #13]
 8004036:	2203      	movs	r2, #3
 8004038:	f362 0303 	bfi	r3, r2, #0, #4
 800403c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800403e:	7b3b      	ldrb	r3, [r7, #12]
 8004040:	2203      	movs	r2, #3
 8004042:	f362 0303 	bfi	r3, r2, #0, #4
 8004046:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004048:	7a7b      	ldrb	r3, [r7, #9]
 800404a:	220f      	movs	r2, #15
 800404c:	f362 0306 	bfi	r3, r2, #0, #7
 8004050:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	b2da      	uxtb	r2, r3
 800405a:	7a3b      	ldrb	r3, [r7, #8]
 800405c:	f362 0305 	bfi	r3, r2, #0, #6
 8004060:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004062:	7abb      	ldrb	r3, [r7, #10]
 8004064:	f36f 0301 	bfc	r3, #0, #2
 8004068:	72bb      	strb	r3, [r7, #10]
            break;
 800406a:	e067      	b.n	800413c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	2207      	movs	r2, #7
 8004074:	f362 0304 	bfi	r3, r2, #0, #5
 8004078:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	2202      	movs	r2, #2
 800407e:	f362 0303 	bfi	r3, r2, #0, #4
 8004082:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004084:	7b3b      	ldrb	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	f362 0303 	bfi	r3, r2, #0, #4
 800408c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 800408e:	7a7b      	ldrb	r3, [r7, #9]
 8004090:	2208      	movs	r2, #8
 8004092:	f362 0306 	bfi	r3, r2, #0, #7
 8004096:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	7a3b      	ldrb	r3, [r7, #8]
 80040a2:	f362 0305 	bfi	r3, r2, #0, #6
 80040a6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80040a8:	7abb      	ldrb	r3, [r7, #10]
 80040aa:	f36f 0301 	bfc	r3, #0, #2
 80040ae:	72bb      	strb	r3, [r7, #10]
            break;
 80040b0:	e044      	b.n	800413c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80040b6:	7bbb      	ldrb	r3, [r7, #14]
 80040b8:	2206      	movs	r2, #6
 80040ba:	f362 0304 	bfi	r3, r2, #0, #5
 80040be:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80040c0:	7b7b      	ldrb	r3, [r7, #13]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f362 0303 	bfi	r3, r2, #0, #4
 80040c8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80040ca:	7b3b      	ldrb	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f362 0303 	bfi	r3, r2, #0, #4
 80040d2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80040d4:	7a7b      	ldrb	r3, [r7, #9]
 80040d6:	2207      	movs	r2, #7
 80040d8:	f362 0306 	bfi	r3, r2, #0, #7
 80040dc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	7a3b      	ldrb	r3, [r7, #8]
 80040e8:	f362 0305 	bfi	r3, r2, #0, #6
 80040ec:	723b      	strb	r3, [r7, #8]
            break;
 80040ee:	e025      	b.n	800413c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e042      	b.n	800417c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f362 0304 	bfi	r3, r2, #0, #5
 8004102:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004104:	7b7b      	ldrb	r3, [r7, #13]
 8004106:	f36f 0303 	bfc	r3, #0, #4
 800410a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800410c:	7b3b      	ldrb	r3, [r7, #12]
 800410e:	f36f 0303 	bfc	r3, #0, #4
 8004112:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004114:	7a7b      	ldrb	r3, [r7, #9]
 8004116:	2203      	movs	r2, #3
 8004118:	f362 0306 	bfi	r3, r2, #0, #7
 800411c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	b2da      	uxtb	r2, r3
 8004126:	7a3b      	ldrb	r3, [r7, #8]
 8004128:	f362 0305 	bfi	r3, r2, #0, #6
 800412c:	723b      	strb	r3, [r7, #8]
            break;
 800412e:	e005      	b.n	800413c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	e022      	b.n	800417c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8004136:	f04f 33ff 	mov.w	r3, #4294967295
 800413a:	e01f      	b.n	800417c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2108      	movs	r1, #8
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd ff94 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800414c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8004154:	f06f 0301 	mvn.w	r3, #1
 8004158:	e010      	b.n	800417c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	210c      	movs	r1, #12
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd ff85 	bl	8002070 <DRV_CANFDSPI_WriteWord>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800416a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8004172:	f06f 0302 	mvn.w	r3, #2
 8004176:	e001      	b.n	800417c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8004178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	000e0303 	.word	0x000e0303

08004188 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
 8004192:	460b      	mov	r3, r1
 8004194:	71bb      	strb	r3, [r7, #6]
 8004196:	4613      	mov	r3, r2
 8004198:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80041a2:	f640 6307 	movw	r3, #3591	; 0xe07
 80041a6:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80041ac:	f107 0308 	add.w	r3, r7, #8
 80041b0:	1cda      	adds	r2, r3, #3
 80041b2:	89b9      	ldrh	r1, [r7, #12]
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd fe76 	bl	8001ea8 <DRV_CANFDSPI_ReadByte>
 80041bc:	4603      	mov	r3, r0
 80041be:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80041c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e020      	b.n	8004210 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80041ce:	79bb      	ldrb	r3, [r7, #6]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f362 0300 	bfi	r3, r2, #0, #1
 80041dc:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 80041de:	797b      	ldrb	r3, [r7, #5]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	f362 0341 	bfi	r3, r2, #1, #1
 80041ec:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 80041ee:	7afa      	ldrb	r2, [r7, #11]
 80041f0:	89b9      	ldrh	r1, [r7, #12]
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fd fe9b 	bl	8001f30 <DRV_CANFDSPI_WriteByte>
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80041fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8004206:	f06f 0301 	mvn.w	r3, #1
 800420a:	e001      	b.n	8004210 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 800420c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d802      	bhi.n	8004232 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e02a      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	3b09      	subs	r3, #9
 8004236:	2b06      	cmp	r3, #6
 8004238:	d825      	bhi.n	8004286 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	0800425d 	.word	0x0800425d
 8004244:	08004263 	.word	0x08004263
 8004248:	08004269 	.word	0x08004269
 800424c:	0800426f 	.word	0x0800426f
 8004250:	08004275 	.word	0x08004275
 8004254:	0800427b 	.word	0x0800427b
 8004258:	08004281 	.word	0x08004281
            case CAN_DLC_12:
                dataBytesInObject = 12;
 800425c:	230c      	movs	r3, #12
 800425e:	60fb      	str	r3, [r7, #12]
                break;
 8004260:	e012      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8004262:	2310      	movs	r3, #16
 8004264:	60fb      	str	r3, [r7, #12]
                break;
 8004266:	e00f      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8004268:	2314      	movs	r3, #20
 800426a:	60fb      	str	r3, [r7, #12]
                break;
 800426c:	e00c      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800426e:	2318      	movs	r3, #24
 8004270:	60fb      	str	r3, [r7, #12]
                break;
 8004272:	e009      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8004274:	2320      	movs	r3, #32
 8004276:	60fb      	str	r3, [r7, #12]
                break;
 8004278:	e006      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 800427a:	2330      	movs	r3, #48	; 0x30
 800427c:	60fb      	str	r3, [r7, #12]
                break;
 800427e:	e003      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8004280:	2340      	movs	r3, #64	; 0x40
 8004282:	60fb      	str	r3, [r7, #12]
                break;
 8004284:	e000      	b.n	8004288 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8004286:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop

08004298 <serialOut>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/***************************************************************************************************************
*     S E R I A L   O U T                                                              P A C K   E M U L A T O R
***************************************************************************************************************/
void serialOut(char* message){
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  getTime();
 80042a0:	f000 f822 	bl	80042e8 <getTime>
  sprintf(txBuffer,"%s %s\r\n",logTime, message);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <serialOut+0x40>)
 80042a8:	490c      	ldr	r1, [pc, #48]	; (80042dc <serialOut+0x44>)
 80042aa:	480d      	ldr	r0, [pc, #52]	; (80042e0 <serialOut+0x48>)
 80042ac:	f003 f860 	bl	8007370 <siprintf>

  if (HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 80042b0:	480b      	ldr	r0, [pc, #44]	; (80042e0 <serialOut+0x48>)
 80042b2:	f7fb ff97 	bl	80001e4 <strlen>
 80042b6:	4603      	mov	r3, r0
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80042be:	4908      	ldr	r1, [pc, #32]	; (80042e0 <serialOut+0x48>)
 80042c0:	4808      	ldr	r0, [pc, #32]	; (80042e4 <serialOut+0x4c>)
 80042c2:	f002 fbe0 	bl	8006a86 <HAL_UART_Transmit>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <serialOut+0x38>
    Error_Handler();
 80042cc:	f000 fa62 	bl	8004794 <Error_Handler>
  }
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	2000c8ac 	.word	0x2000c8ac
 80042dc:	08009db8 	.word	0x08009db8
 80042e0:	2000c8b8 	.word	0x2000c8b8
 80042e4:	2000c868 	.word	0x2000c868

080042e8 <getTime>:

/***************************************************************************************************************
*     T I M E S T A M P                                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void getTime(void){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	609a      	str	r2, [r3, #8]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	2201      	movs	r2, #1
 8004308:	4619      	mov	r1, r3
 800430a:	480e      	ldr	r0, [pc, #56]	; (8004344 <getTime+0x5c>)
 800430c:	f001 fe70 	bl	8005ff0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	2201      	movs	r2, #1
 8004314:	4619      	mov	r1, r3
 8004316:	480b      	ldr	r0, [pc, #44]	; (8004344 <getTime+0x5c>)
 8004318:	f001 ff4c 	bl	80061b4 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 800431c:	7abb      	ldrb	r3, [r7, #10]
 800431e:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 8004320:	7a7b      	ldrb	r3, [r7, #9]
 8004322:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8004324:	7a3b      	ldrb	r3, [r7, #8]
 8004326:	777b      	strb	r3, [r7, #29]
  sprintf(logTime,"%02x:%02x:%02x",hours,minutes,seconds);
 8004328:	7f7a      	ldrb	r2, [r7, #29]
 800432a:	7fb9      	ldrb	r1, [r7, #30]
 800432c:	7ffb      	ldrb	r3, [r7, #31]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	460b      	mov	r3, r1
 8004332:	4905      	ldr	r1, [pc, #20]	; (8004348 <getTime+0x60>)
 8004334:	4805      	ldr	r0, [pc, #20]	; (800434c <getTime+0x64>)
 8004336:	f003 f81b 	bl	8007370 <siprintf>
}
 800433a:	bf00      	nop
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2000c7f0 	.word	0x2000c7f0
 8004348:	08009dc0 	.word	0x08009dc0
 800434c:	2000c8ac 	.word	0x2000c8ac

08004350 <HAL_GPIO_EXTI_Callback>:

/***************************************************************************************************************
 *     G P I O     I N T E R R U P T    H A N D L E R   &   C A L L B A C              P A C K   E M U L A T O R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN_INT_Pin){
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d011      	beq.n	8004386 <HAL_GPIO_EXTI_Callback+0x36>
    // Interrupt
  }
  else if (GPIO_Pin == CAN_INT0_Pin){
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004368:	d103      	bne.n	8004372 <HAL_GPIO_EXTI_Callback+0x22>
    // TX Interrupt
    canTxInterrupt = 1;
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_GPIO_EXTI_Callback+0x44>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
    appData.state = APP_STATE_RECEIVE;
  }
  else if(GPIO_Pin == USER_BUTTON_Pin){
    // Spawn a new module?
  }
}
 8004370:	e009      	b.n	8004386 <HAL_GPIO_EXTI_Callback+0x36>
  else if (GPIO_Pin == CAN_INT1_Pin){
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004378:	d105      	bne.n	8004386 <HAL_GPIO_EXTI_Callback+0x36>
    canRxInterrupt = 1;
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <HAL_GPIO_EXTI_Callback+0x48>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
    appData.state = APP_STATE_RECEIVE;
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004382:	2205      	movs	r2, #5
 8004384:	701a      	strb	r2, [r3, #0]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	2000c981 	.word	0x2000c981
 8004398:	2000c980 	.word	0x2000c980
 800439c:	2000c670 	.word	0x2000c670

080043a0 <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b092      	sub	sp, #72	; 0x48
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 80043aa:	463b      	mov	r3, r7
 80043ac:	4618      	mov	r0, r3
 80043ae:	f003 f84d 	bl	800744c <localtime>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f107 040c 	add.w	r4, r7, #12
 80043b8:	461d      	mov	r5, r3
 80043ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80043de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043e2:	2200      	movs	r2, #0
 80043e4:	4619      	mov	r1, r3
 80043e6:	4820      	ldr	r0, [pc, #128]	; (8004468 <writeRTC+0xc8>)
 80043e8:	f001 fd68 	bl	8005ebc <HAL_RTC_SetTime>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <writeRTC+0x60>
 {
   sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);
 80043f2:	491e      	ldr	r1, [pc, #120]	; (800446c <writeRTC+0xcc>)
 80043f4:	481e      	ldr	r0, [pc, #120]	; (8004470 <writeRTC+0xd0>)
 80043f6:	f002 ffbb 	bl	8007370 <siprintf>
 80043fa:	481d      	ldr	r0, [pc, #116]	; (8004470 <writeRTC+0xd0>)
 80043fc:	f7ff ff4c 	bl	8004298 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <writeRTC+0x6a>
 8004406:	2307      	movs	r3, #7
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	3301      	adds	r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3b64      	subs	r3, #100	; 0x64
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004436:	2200      	movs	r2, #0
 8004438:	4619      	mov	r1, r3
 800443a:	480b      	ldr	r0, [pc, #44]	; (8004468 <writeRTC+0xc8>)
 800443c:	f001 fe36 	bl	80060ac <HAL_RTC_SetDate>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <writeRTC+0xb4>
 {
  sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);
 8004446:	490b      	ldr	r1, [pc, #44]	; (8004474 <writeRTC+0xd4>)
 8004448:	4809      	ldr	r0, [pc, #36]	; (8004470 <writeRTC+0xd0>)
 800444a:	f002 ff91 	bl	8007370 <siprintf>
 800444e:	4808      	ldr	r0, [pc, #32]	; (8004470 <writeRTC+0xd0>)
 8004450:	f7ff ff22 	bl	8004298 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 8004454:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004458:	2100      	movs	r1, #0
 800445a:	4803      	ldr	r0, [pc, #12]	; (8004468 <writeRTC+0xc8>)
 800445c:	f001 ffb6 	bl	80063cc <HAL_RTCEx_BKUPWrite>

}
 8004460:	bf00      	nop
 8004462:	3748      	adds	r7, #72	; 0x48
 8004464:	46bd      	mov	sp, r7
 8004466:	bdb0      	pop	{r4, r5, r7, pc}
 8004468:	2000c7f0 	.word	0x2000c7f0
 800446c:	08009dd0 	.word	0x08009dd0
 8004470:	2000c91c 	.word	0x2000c91c
 8004474:	08009df8 	.word	0x08009df8

08004478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800447c:	f000 fbb8 	bl	8004bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004480:	f000 f810 	bl	80044a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004484:	f000 f8fe 	bl	8004684 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004488:	f000 f89c 	bl	80045c4 <MX_SPI1_Init>
  MX_RTC_Init();
 800448c:	f000 f874 	bl	8004578 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8004490:	f000 f8ce 	bl	8004630 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 8004494:	2000      	movs	r0, #0
 8004496:	f7fd fcd5 	bl	8001e44 <DRV_CANFDSPI_Reset>
  APP_Initialize();
 800449a:	f7fc f927 	bl	80006ec <APP_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    APP_Tasks();
 800449e:	f7fc fab9 	bl	8000a14 <APP_Tasks>
 80044a2:	e7fc      	b.n	800449e <main+0x26>

080044a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b094      	sub	sp, #80	; 0x50
 80044a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044aa:	f107 0320 	add.w	r3, r7, #32
 80044ae:	2230      	movs	r2, #48	; 0x30
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f002 ffc1 	bl	800743a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <SystemClock_Config+0xcc>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <SystemClock_Config+0xcc>)
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6413      	str	r3, [r2, #64]	; 0x40
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <SystemClock_Config+0xcc>)
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044e4:	2300      	movs	r3, #0
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <SystemClock_Config+0xd0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a21      	ldr	r2, [pc, #132]	; (8004574 <SystemClock_Config+0xd0>)
 80044ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <SystemClock_Config+0xd0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004500:	2309      	movs	r3, #9
 8004502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800450a:	2301      	movs	r3, #1
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800450e:	2302      	movs	r3, #2
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004518:	2304      	movs	r3, #4
 800451a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800451c:	2340      	movs	r3, #64	; 0x40
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004520:	2304      	movs	r3, #4
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004524:	2304      	movs	r3, #4
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004528:	f107 0320 	add.w	r3, r7, #32
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fed5 	bl	80052dc <HAL_RCC_OscConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004538:	f000 f92c 	bl	8004794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800453c:	230f      	movs	r3, #15
 800453e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004540:	2302      	movs	r3, #2
 8004542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004552:	f107 030c 	add.w	r3, r7, #12
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f001 f937 	bl	80057cc <HAL_RCC_ClockConfig>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004564:	f000 f916 	bl	8004794 <Error_Handler>
  }
}
 8004568:	bf00      	nop
 800456a:	3750      	adds	r7, #80	; 0x50
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000

08004578 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <MX_RTC_Init+0x44>)
 800457e:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <MX_RTC_Init+0x48>)
 8004580:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <MX_RTC_Init+0x44>)
 8004584:	2200      	movs	r2, #0
 8004586:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <MX_RTC_Init+0x44>)
 800458a:	227f      	movs	r2, #127	; 0x7f
 800458c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <MX_RTC_Init+0x44>)
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <MX_RTC_Init+0x44>)
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <MX_RTC_Init+0x44>)
 800459c:	2200      	movs	r2, #0
 800459e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <MX_RTC_Init+0x44>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80045a6:	4805      	ldr	r0, [pc, #20]	; (80045bc <MX_RTC_Init+0x44>)
 80045a8:	f001 fc12 	bl	8005dd0 <HAL_RTC_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80045b2:	f000 f8ef 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	2000c7f0 	.word	0x2000c7f0
 80045c0:	40002800 	.word	0x40002800

080045c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80045c8:	4b17      	ldr	r3, [pc, #92]	; (8004628 <MX_SPI1_Init+0x64>)
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <MX_SPI1_Init+0x68>)
 80045cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045ce:	4b16      	ldr	r3, [pc, #88]	; (8004628 <MX_SPI1_Init+0x64>)
 80045d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <MX_SPI1_Init+0x64>)
 80045d8:	2200      	movs	r2, #0
 80045da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80045dc:	4b12      	ldr	r3, [pc, #72]	; (8004628 <MX_SPI1_Init+0x64>)
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <MX_SPI1_Init+0x64>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <MX_SPI1_Init+0x64>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <MX_SPI1_Init+0x64>)
 80045f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <MX_SPI1_Init+0x64>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <MX_SPI1_Init+0x64>)
 80045fe:	2200      	movs	r2, #0
 8004600:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <MX_SPI1_Init+0x64>)
 8004604:	2200      	movs	r2, #0
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <MX_SPI1_Init+0x64>)
 800460a:	2200      	movs	r2, #0
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <MX_SPI1_Init+0x64>)
 8004610:	220a      	movs	r2, #10
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004614:	4804      	ldr	r0, [pc, #16]	; (8004628 <MX_SPI1_Init+0x64>)
 8004616:	f001 fef3 	bl	8006400 <HAL_SPI_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004620:	f000 f8b8 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004624:	bf00      	nop
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000c810 	.word	0x2000c810
 800462c:	40013000 	.word	0x40013000

08004630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 1 */


  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <MX_USART2_UART_Init+0x4c>)
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <MX_USART2_UART_Init+0x50>)
 8004638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <MX_USART2_UART_Init+0x4c>)
 800463c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <MX_USART2_UART_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <MX_USART2_UART_Init+0x4c>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <MX_USART2_UART_Init+0x4c>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <MX_USART2_UART_Init+0x4c>)
 8004656:	220c      	movs	r2, #12
 8004658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <MX_USART2_UART_Init+0x4c>)
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <MX_USART2_UART_Init+0x4c>)
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <MX_USART2_UART_Init+0x4c>)
 8004668:	f002 f9c0 	bl	80069ec <HAL_UART_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004672:	f000 f88f 	bl	8004794 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2000c868 	.word	0x2000c868
 8004680:	40004400 	.word	0x40004400

08004684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	f107 030c 	add.w	r3, r7, #12
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <MX_GPIO_Init+0x104>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4a39      	ldr	r2, [pc, #228]	; (8004788 <MX_GPIO_Init+0x104>)
 80046a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a8:	6313      	str	r3, [r2, #48]	; 0x30
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <MX_GPIO_Init+0x104>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <MX_GPIO_Init+0x104>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a32      	ldr	r2, [pc, #200]	; (8004788 <MX_GPIO_Init+0x104>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <MX_GPIO_Init+0x104>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <MX_GPIO_Init+0x104>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a2b      	ldr	r2, [pc, #172]	; (8004788 <MX_GPIO_Init+0x104>)
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <MX_GPIO_Init+0x104>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAN_CS_Pin|LED4_GREEN_Pin|LED3_ORANGE_Pin|LED5_RED_Pin
 80046ee:	2200      	movs	r2, #0
 80046f0:	f44f 4171 	mov.w	r1, #61696	; 0xf100
 80046f4:	4825      	ldr	r0, [pc, #148]	; (800478c <MX_GPIO_Init+0x108>)
 80046f6:	f000 fdbf 	bl	8005278 <HAL_GPIO_WritePin>
                          |LED6_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80046fa:	2301      	movs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004708:	f107 030c 	add.w	r3, r7, #12
 800470c:	4619      	mov	r1, r3
 800470e:	4820      	ldr	r0, [pc, #128]	; (8004790 <MX_GPIO_Init+0x10c>)
 8004710:	f000 fc16 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_CS_Pin LED4_GREEN_Pin LED3_ORANGE_Pin LED5_RED_Pin
                           LED6_BLUE_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin|LED4_GREEN_Pin|LED3_ORANGE_Pin|LED5_RED_Pin
 8004714:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8004718:	60fb      	str	r3, [r7, #12]
                          |LED6_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471a:	2301      	movs	r3, #1
 800471c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004726:	f107 030c 	add.w	r3, r7, #12
 800472a:	4619      	mov	r1, r3
 800472c:	4817      	ldr	r0, [pc, #92]	; (800478c <MX_GPIO_Init+0x108>)
 800472e:	f000 fc07 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_INT_Pin CAN_INT1_Pin CAN_INT0_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin|CAN_INT1_Pin|CAN_INT0_Pin;
 8004732:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8004736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004738:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800473c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	4619      	mov	r1, r3
 8004748:	4810      	ldr	r0, [pc, #64]	; (800478c <MX_GPIO_Init+0x108>)
 800474a:	f000 fbf9 	bl	8004f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800474e:	2200      	movs	r2, #0
 8004750:	2100      	movs	r1, #0
 8004752:	2006      	movs	r0, #6
 8004754:	f000 fbbd 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004758:	2006      	movs	r0, #6
 800475a:	f000 fbd6 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	2017      	movs	r0, #23
 8004764:	f000 fbb5 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004768:	2017      	movs	r0, #23
 800476a:	f000 fbce 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800476e:	2200      	movs	r2, #0
 8004770:	2100      	movs	r1, #0
 8004772:	2028      	movs	r0, #40	; 0x28
 8004774:	f000 fbad 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004778:	2028      	movs	r0, #40	; 0x28
 800477a:	f000 fbc6 	bl	8004f0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800477e:	bf00      	nop
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	40020c00 	.word	0x40020c00
 8004790:	40020000 	.word	0x40020000

08004794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004798:	b672      	cpsid	i
}
 800479a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800479c:	e7fe      	b.n	800479c <Error_Handler+0x8>
	...

080047a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_MspInit+0x4c>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <HAL_MspInit+0x4c>)
 80047b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b4:	6453      	str	r3, [r2, #68]	; 0x44
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_MspInit+0x4c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_MspInit+0x4c>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_MspInit+0x4c>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_MspInit+0x4c>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800

080047f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a0c      	ldr	r2, [pc, #48]	; (800483c <HAL_RTC_MspInit+0x4c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004810:	2302      	movs	r3, #2
 8004812:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004818:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	4618      	mov	r0, r3
 8004820:	f001 f9f4 	bl	8005c0c <HAL_RCCEx_PeriphCLKConfig>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800482a:	f7ff ffb3 	bl	8004794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800482e:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_RTC_MspInit+0x50>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40002800 	.word	0x40002800
 8004840:	42470e3c 	.word	0x42470e3c

08004844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <HAL_SPI_MspInit+0x84>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d12b      	bne.n	80048be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	4b18      	ldr	r3, [pc, #96]	; (80048cc <HAL_SPI_MspInit+0x88>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	4a17      	ldr	r2, [pc, #92]	; (80048cc <HAL_SPI_MspInit+0x88>)
 8004870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004874:	6453      	str	r3, [r2, #68]	; 0x44
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_SPI_MspInit+0x88>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_SPI_MspInit+0x88>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	4a10      	ldr	r2, [pc, #64]	; (80048cc <HAL_SPI_MspInit+0x88>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <HAL_SPI_MspInit+0x88>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800489e:	23e0      	movs	r3, #224	; 0xe0
 80048a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	2302      	movs	r3, #2
 80048a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048aa:	2303      	movs	r3, #3
 80048ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048ae:	2305      	movs	r3, #5
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b2:	f107 0314 	add.w	r3, r7, #20
 80048b6:	4619      	mov	r1, r3
 80048b8:	4805      	ldr	r0, [pc, #20]	; (80048d0 <HAL_SPI_MspInit+0x8c>)
 80048ba:	f000 fb41 	bl	8004f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80048be:	bf00      	nop
 80048c0:	3728      	adds	r7, #40	; 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40013000 	.word	0x40013000
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40020000 	.word	0x40020000

080048d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <HAL_UART_MspInit+0x84>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d12b      	bne.n	800494e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	4b18      	ldr	r3, [pc, #96]	; (800495c <HAL_UART_MspInit+0x88>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4a17      	ldr	r2, [pc, #92]	; (800495c <HAL_UART_MspInit+0x88>)
 8004900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004904:	6413      	str	r3, [r2, #64]	; 0x40
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <HAL_UART_MspInit+0x88>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <HAL_UART_MspInit+0x88>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a10      	ldr	r2, [pc, #64]	; (800495c <HAL_UART_MspInit+0x88>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <HAL_UART_MspInit+0x88>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800492e:	230c      	movs	r3, #12
 8004930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493a:	2303      	movs	r3, #3
 800493c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800493e:	2307      	movs	r3, #7
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	4619      	mov	r1, r3
 8004948:	4805      	ldr	r0, [pc, #20]	; (8004960 <HAL_UART_MspInit+0x8c>)
 800494a:	f000 faf9 	bl	8004f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800494e:	bf00      	nop
 8004950:	3728      	adds	r7, #40	; 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40004400 	.word	0x40004400
 800495c:	40023800 	.word	0x40023800
 8004960:	40020000 	.word	0x40020000

08004964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004968:	e7fe      	b.n	8004968 <NMI_Handler+0x4>

0800496a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800496e:	e7fe      	b.n	800496e <HardFault_Handler+0x4>

08004970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004974:	e7fe      	b.n	8004974 <MemManage_Handler+0x4>

08004976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800497a:	e7fe      	b.n	800497a <BusFault_Handler+0x4>

0800497c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004980:	e7fe      	b.n	8004980 <UsageFault_Handler+0x4>

08004982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b0:	f000 f970 	bl	8004c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80049bc:	2001      	movs	r0, #1
 80049be:	f000 fc75 	bl	80052ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 80049ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049ce:	f000 fc6d 	bl	80052ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT1_Pin);
 80049da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80049de:	f000 fc65 	bl	80052ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT0_Pin);
 80049e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80049e6:	f000 fc61 	bl	80052ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0
  return 1;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <_kill>:

int _kill(int pid, int sig)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a08:	f003 f952 	bl	8007cb0 <__errno>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2216      	movs	r2, #22
 8004a10:	601a      	str	r2, [r3, #0]
  return -1;
 8004a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <_exit>:

void _exit (int status)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a26:	f04f 31ff 	mov.w	r1, #4294967295
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ffe7 	bl	80049fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a30:	e7fe      	b.n	8004a30 <_exit+0x12>

08004a32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e00a      	b.n	8004a5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a44:	f3af 8000 	nop.w
 8004a48:	4601      	mov	r1, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	60ba      	str	r2, [r7, #8]
 8004a50:	b2ca      	uxtb	r2, r1
 8004a52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	dbf0      	blt.n	8004a44 <_read+0x12>
  }

  return len;
 8004a62:	687b      	ldr	r3, [r7, #4]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e009      	b.n	8004a92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	60ba      	str	r2, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	dbf1      	blt.n	8004a7e <_write+0x12>
  }
  return len;
 8004a9a:	687b      	ldr	r3, [r7, #4]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <_close>:

int _close(int file)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004acc:	605a      	str	r2, [r3, #4]
  return 0;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <_isatty>:

int _isatty(int file)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ae4:	2301      	movs	r3, #1
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <_sbrk+0x5c>)
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <_sbrk+0x60>)
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b20:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <_sbrk+0x64>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <_sbrk+0x64>)
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <_sbrk+0x68>)
 8004b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <_sbrk+0x64>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d207      	bcs.n	8004b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b3c:	f003 f8b8 	bl	8007cb0 <__errno>
 8004b40:	4603      	mov	r3, r0
 8004b42:	220c      	movs	r2, #12
 8004b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4a:	e009      	b.n	8004b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <_sbrk+0x64>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <_sbrk+0x64>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	4a05      	ldr	r2, [pc, #20]	; (8004b70 <_sbrk+0x64>)
 8004b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20020000 	.word	0x20020000
 8004b6c:	00000400 	.word	0x00000400
 8004b70:	2000c988 	.word	0x2000c988
 8004b74:	2000cb00 	.word	0x2000cb00

08004b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <SystemInit+0x20>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <SystemInit+0x20>)
 8004b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ba0:	480d      	ldr	r0, [pc, #52]	; (8004bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ba2:	490e      	ldr	r1, [pc, #56]	; (8004bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ba4:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ba8:	e002      	b.n	8004bb0 <LoopCopyDataInit>

08004baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bae:	3304      	adds	r3, #4

08004bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb4:	d3f9      	bcc.n	8004baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bb6:	4a0b      	ldr	r2, [pc, #44]	; (8004be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bb8:	4c0b      	ldr	r4, [pc, #44]	; (8004be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bbc:	e001      	b.n	8004bc2 <LoopFillZerobss>

08004bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc0:	3204      	adds	r2, #4

08004bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc4:	d3fb      	bcc.n	8004bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bc6:	f7ff ffd7 	bl	8004b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bca:	f003 f877 	bl	8007cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bce:	f7ff fc53 	bl	8004478 <main>
  bx  lr    
 8004bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bdc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8004be0:	0800a158 	.word	0x0800a158
  ldr r2, =_sbss
 8004be4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8004be8:	2000cb00 	.word	0x2000cb00

08004bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bec:	e7fe      	b.n	8004bec <ADC_IRQHandler>
	...

08004bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_Init+0x40>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <HAL_Init+0x40>)
 8004bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_Init+0x40>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <HAL_Init+0x40>)
 8004c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <HAL_Init+0x40>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <HAL_Init+0x40>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c18:	2003      	movs	r0, #3
 8004c1a:	f000 f94f 	bl	8004ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c1e:	200f      	movs	r0, #15
 8004c20:	f000 f808 	bl	8004c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c24:	f7ff fdbc 	bl	80047a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023c00 	.word	0x40023c00

08004c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <HAL_InitTick+0x54>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_InitTick+0x58>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	4619      	mov	r1, r3
 8004c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f967 	bl	8004f26 <HAL_SYSTICK_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e00e      	b.n	8004c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b0f      	cmp	r3, #15
 8004c66:	d80a      	bhi.n	8004c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	f000 f92f 	bl	8004ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <HAL_InitTick+0x5c>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000004 	.word	0x20000004
 8004c8c:	2000000c 	.word	0x2000000c
 8004c90:	20000008 	.word	0x20000008

08004c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <HAL_IncTick+0x20>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_IncTick+0x24>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <HAL_IncTick+0x24>)
 8004ca6:	6013      	str	r3, [r2, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000000c 	.word	0x2000000c
 8004cb8:	2000c98c 	.word	0x2000c98c

08004cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_GetTick+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000c98c 	.word	0x2000c98c

08004cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cdc:	f7ff ffee 	bl	8004cbc <HAL_GetTick>
 8004ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d005      	beq.n	8004cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_Delay+0x44>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cfa:	bf00      	nop
 8004cfc:	f7ff ffde 	bl	8004cbc <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d8f7      	bhi.n	8004cfc <HAL_Delay+0x28>
  {
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000000c 	.word	0x2000000c

08004d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	60d3      	str	r3, [r2, #12]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__NVIC_GetPriorityGrouping+0x18>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 0307 	and.w	r3, r3, #7
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	db0b      	blt.n	8004daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4907      	ldr	r1, [pc, #28]	; (8004db8 <__NVIC_EnableIRQ+0x38>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2001      	movs	r0, #1
 8004da2:	fa00 f202 	lsl.w	r2, r0, r2
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e100 	.word	0xe000e100

08004dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db0a      	blt.n	8004de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	490c      	ldr	r1, [pc, #48]	; (8004e08 <__NVIC_SetPriority+0x4c>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	0112      	lsls	r2, r2, #4
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de4:	e00a      	b.n	8004dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4908      	ldr	r1, [pc, #32]	; (8004e0c <__NVIC_SetPriority+0x50>)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	3b04      	subs	r3, #4
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	440b      	add	r3, r1
 8004dfa:	761a      	strb	r2, [r3, #24]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f1c3 0307 	rsb	r3, r3, #7
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf28      	it	cs
 8004e2e:	2304      	movcs	r3, #4
 8004e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d902      	bls.n	8004e40 <NVIC_EncodePriority+0x30>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3b03      	subs	r3, #3
 8004e3e:	e000      	b.n	8004e42 <NVIC_EncodePriority+0x32>
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	401a      	ands	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e58:	f04f 31ff 	mov.w	r1, #4294967295
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	43d9      	mvns	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	4313      	orrs	r3, r2
         );
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e88:	d301      	bcc.n	8004e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00f      	b.n	8004eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <SysTick_Config+0x40>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e96:	210f      	movs	r1, #15
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	f7ff ff8e 	bl	8004dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <SysTick_Config+0x40>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <SysTick_Config+0x40>)
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010

08004ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff29 	bl	8004d1c <__NVIC_SetPriorityGrouping>
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	4603      	mov	r3, r0
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee4:	f7ff ff3e 	bl	8004d64 <__NVIC_GetPriorityGrouping>
 8004ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	6978      	ldr	r0, [r7, #20]
 8004ef0:	f7ff ff8e 	bl	8004e10 <NVIC_EncodePriority>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff5d 	bl	8004dbc <__NVIC_SetPriority>
}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff31 	bl	8004d80 <__NVIC_EnableIRQ>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ffa2 	bl	8004e78 <SysTick_Config>
 8004f34:	4603      	mov	r3, r0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	e16b      	b.n	8005234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	f040 815a 	bne.w	800522e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d005      	beq.n	8004f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d130      	bne.n	8004ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 0201 	and.w	r2, r3, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d017      	beq.n	8005030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	2203      	movs	r2, #3
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d123      	bne.n	8005084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3208      	adds	r2, #8
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	08da      	lsrs	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3208      	adds	r2, #8
 800507e:	69b9      	ldr	r1, [r7, #24]
 8005080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2203      	movs	r2, #3
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0203 	and.w	r2, r3, #3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80b4 	beq.w	800522e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b60      	ldr	r3, [pc, #384]	; (800524c <HAL_GPIO_Init+0x30c>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4a5f      	ldr	r2, [pc, #380]	; (800524c <HAL_GPIO_Init+0x30c>)
 80050d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d4:	6453      	str	r3, [r2, #68]	; 0x44
 80050d6:	4b5d      	ldr	r3, [pc, #372]	; (800524c <HAL_GPIO_Init+0x30c>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050e2:	4a5b      	ldr	r2, [pc, #364]	; (8005250 <HAL_GPIO_Init+0x310>)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	3302      	adds	r3, #2
 80050ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	220f      	movs	r2, #15
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a52      	ldr	r2, [pc, #328]	; (8005254 <HAL_GPIO_Init+0x314>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02b      	beq.n	8005166 <HAL_GPIO_Init+0x226>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a51      	ldr	r2, [pc, #324]	; (8005258 <HAL_GPIO_Init+0x318>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d025      	beq.n	8005162 <HAL_GPIO_Init+0x222>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a50      	ldr	r2, [pc, #320]	; (800525c <HAL_GPIO_Init+0x31c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <HAL_GPIO_Init+0x21e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a4f      	ldr	r2, [pc, #316]	; (8005260 <HAL_GPIO_Init+0x320>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d019      	beq.n	800515a <HAL_GPIO_Init+0x21a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a4e      	ldr	r2, [pc, #312]	; (8005264 <HAL_GPIO_Init+0x324>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_GPIO_Init+0x216>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a4d      	ldr	r2, [pc, #308]	; (8005268 <HAL_GPIO_Init+0x328>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00d      	beq.n	8005152 <HAL_GPIO_Init+0x212>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a4c      	ldr	r2, [pc, #304]	; (800526c <HAL_GPIO_Init+0x32c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <HAL_GPIO_Init+0x20e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a4b      	ldr	r2, [pc, #300]	; (8005270 <HAL_GPIO_Init+0x330>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_GPIO_Init+0x20a>
 8005146:	2307      	movs	r3, #7
 8005148:	e00e      	b.n	8005168 <HAL_GPIO_Init+0x228>
 800514a:	2308      	movs	r3, #8
 800514c:	e00c      	b.n	8005168 <HAL_GPIO_Init+0x228>
 800514e:	2306      	movs	r3, #6
 8005150:	e00a      	b.n	8005168 <HAL_GPIO_Init+0x228>
 8005152:	2305      	movs	r3, #5
 8005154:	e008      	b.n	8005168 <HAL_GPIO_Init+0x228>
 8005156:	2304      	movs	r3, #4
 8005158:	e006      	b.n	8005168 <HAL_GPIO_Init+0x228>
 800515a:	2303      	movs	r3, #3
 800515c:	e004      	b.n	8005168 <HAL_GPIO_Init+0x228>
 800515e:	2302      	movs	r3, #2
 8005160:	e002      	b.n	8005168 <HAL_GPIO_Init+0x228>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_GPIO_Init+0x228>
 8005166:	2300      	movs	r3, #0
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	f002 0203 	and.w	r2, r2, #3
 800516e:	0092      	lsls	r2, r2, #2
 8005170:	4093      	lsls	r3, r2
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005178:	4935      	ldr	r1, [pc, #212]	; (8005250 <HAL_GPIO_Init+0x310>)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	3302      	adds	r3, #2
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005186:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <HAL_GPIO_Init+0x334>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	43db      	mvns	r3, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4013      	ands	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051aa:	4a32      	ldr	r2, [pc, #200]	; (8005274 <HAL_GPIO_Init+0x334>)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051b0:	4b30      	ldr	r3, [pc, #192]	; (8005274 <HAL_GPIO_Init+0x334>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <HAL_GPIO_Init+0x334>)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051da:	4b26      	ldr	r3, [pc, #152]	; (8005274 <HAL_GPIO_Init+0x334>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051fe:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <HAL_GPIO_Init+0x334>)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_GPIO_Init+0x334>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005228:	4a12      	ldr	r2, [pc, #72]	; (8005274 <HAL_GPIO_Init+0x334>)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3301      	adds	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	f67f ae90 	bls.w	8004f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	3724      	adds	r7, #36	; 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	40013800 	.word	0x40013800
 8005254:	40020000 	.word	0x40020000
 8005258:	40020400 	.word	0x40020400
 800525c:	40020800 	.word	0x40020800
 8005260:	40020c00 	.word	0x40020c00
 8005264:	40021000 	.word	0x40021000
 8005268:	40021400 	.word	0x40021400
 800526c:	40021800 	.word	0x40021800
 8005270:	40021c00 	.word	0x40021c00
 8005274:	40013c00 	.word	0x40013c00

08005278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
 8005284:	4613      	mov	r3, r2
 8005286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005288:	787b      	ldrb	r3, [r7, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005294:	e003      	b.n	800529e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	041a      	lsls	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	619a      	str	r2, [r3, #24]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052c2:	4a05      	ldr	r2, [pc, #20]	; (80052d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f840 	bl	8004350 <HAL_GPIO_EXTI_Callback>
  }
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40013c00 	.word	0x40013c00

080052dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e267      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d075      	beq.n	80053e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052fa:	4b88      	ldr	r3, [pc, #544]	; (800551c <HAL_RCC_OscConfig+0x240>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b04      	cmp	r3, #4
 8005304:	d00c      	beq.n	8005320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005306:	4b85      	ldr	r3, [pc, #532]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800530e:	2b08      	cmp	r3, #8
 8005310:	d112      	bne.n	8005338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005312:	4b82      	ldr	r3, [pc, #520]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800531e:	d10b      	bne.n	8005338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	4b7e      	ldr	r3, [pc, #504]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d05b      	beq.n	80053e4 <HAL_RCC_OscConfig+0x108>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d157      	bne.n	80053e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e242      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d106      	bne.n	8005350 <HAL_RCC_OscConfig+0x74>
 8005342:	4b76      	ldr	r3, [pc, #472]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a75      	ldr	r2, [pc, #468]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e01d      	b.n	800538c <HAL_RCC_OscConfig+0xb0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0x98>
 800535a:	4b70      	ldr	r3, [pc, #448]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a6f      	ldr	r2, [pc, #444]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b6d      	ldr	r3, [pc, #436]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a6c      	ldr	r2, [pc, #432]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00b      	b.n	800538c <HAL_RCC_OscConfig+0xb0>
 8005374:	4b69      	ldr	r3, [pc, #420]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a68      	ldr	r2, [pc, #416]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b66      	ldr	r3, [pc, #408]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a65      	ldr	r2, [pc, #404]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800538a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7ff fc92 	bl	8004cbc <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800539c:	f7ff fc8e 	bl	8004cbc <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e207      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b5b      	ldr	r3, [pc, #364]	; (800551c <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0xc0>
 80053ba:	e014      	b.n	80053e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7ff fc7e 	bl	8004cbc <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c4:	f7ff fc7a 	bl	8004cbc <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1f3      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	4b51      	ldr	r3, [pc, #324]	; (800551c <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0xe8>
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d063      	beq.n	80054ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053f2:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_RCC_OscConfig+0x240>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005406:	2b08      	cmp	r3, #8
 8005408:	d11c      	bne.n	8005444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800540a:	4b44      	ldr	r3, [pc, #272]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d116      	bne.n	8005444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005416:	4b41      	ldr	r3, [pc, #260]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_OscConfig+0x152>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d001      	beq.n	800542e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e1c7      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542e:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4937      	ldr	r1, [pc, #220]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005442:	e03a      	b.n	80054ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d020      	beq.n	800548e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <HAL_RCC_OscConfig+0x244>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7ff fc33 	bl	8004cbc <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800545a:	f7ff fc2f 	bl	8004cbc <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e1a8      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	4b2b      	ldr	r3, [pc, #172]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005478:	4b28      	ldr	r3, [pc, #160]	; (800551c <HAL_RCC_OscConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4925      	ldr	r1, [pc, #148]	; (800551c <HAL_RCC_OscConfig+0x240>)
 8005488:	4313      	orrs	r3, r2
 800548a:	600b      	str	r3, [r1, #0]
 800548c:	e015      	b.n	80054ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_OscConfig+0x244>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7ff fc12 	bl	8004cbc <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549c:	f7ff fc0e 	bl	8004cbc <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e187      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	4b1b      	ldr	r3, [pc, #108]	; (800551c <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d036      	beq.n	8005534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d016      	beq.n	80054fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ce:	4b15      	ldr	r3, [pc, #84]	; (8005524 <HAL_RCC_OscConfig+0x248>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7ff fbf2 	bl	8004cbc <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054dc:	f7ff fbee 	bl	8004cbc <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e167      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_RCC_OscConfig+0x240>)
 80054f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0x200>
 80054fa:	e01b      	b.n	8005534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <HAL_RCC_OscConfig+0x248>)
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005502:	f7ff fbdb 	bl	8004cbc <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005508:	e00e      	b.n	8005528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800550a:	f7ff fbd7 	bl	8004cbc <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d907      	bls.n	8005528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e150      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
 800551c:	40023800 	.word	0x40023800
 8005520:	42470000 	.word	0x42470000
 8005524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005528:	4b88      	ldr	r3, [pc, #544]	; (800574c <HAL_RCC_OscConfig+0x470>)
 800552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ea      	bne.n	800550a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8097 	beq.w	8005670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005542:	2300      	movs	r3, #0
 8005544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005546:	4b81      	ldr	r3, [pc, #516]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	4b7d      	ldr	r3, [pc, #500]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	4a7c      	ldr	r2, [pc, #496]	; (800574c <HAL_RCC_OscConfig+0x470>)
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005560:	6413      	str	r3, [r2, #64]	; 0x40
 8005562:	4b7a      	ldr	r3, [pc, #488]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005572:	4b77      	ldr	r3, [pc, #476]	; (8005750 <HAL_RCC_OscConfig+0x474>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d118      	bne.n	80055b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557e:	4b74      	ldr	r3, [pc, #464]	; (8005750 <HAL_RCC_OscConfig+0x474>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a73      	ldr	r2, [pc, #460]	; (8005750 <HAL_RCC_OscConfig+0x474>)
 8005584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558a:	f7ff fb97 	bl	8004cbc <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005592:	f7ff fb93 	bl	8004cbc <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e10c      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	4b6a      	ldr	r3, [pc, #424]	; (8005750 <HAL_RCC_OscConfig+0x474>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2ea>
 80055b8:	4b64      	ldr	r3, [pc, #400]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a63      	ldr	r2, [pc, #396]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
 80055c4:	e01c      	b.n	8005600 <HAL_RCC_OscConfig+0x324>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x30c>
 80055ce:	4b5f      	ldr	r3, [pc, #380]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4a5e      	ldr	r2, [pc, #376]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	6713      	str	r3, [r2, #112]	; 0x70
 80055da:	4b5c      	ldr	r3, [pc, #368]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	4a5b      	ldr	r2, [pc, #364]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6713      	str	r3, [r2, #112]	; 0x70
 80055e6:	e00b      	b.n	8005600 <HAL_RCC_OscConfig+0x324>
 80055e8:	4b58      	ldr	r3, [pc, #352]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a57      	ldr	r2, [pc, #348]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	4b55      	ldr	r3, [pc, #340]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a54      	ldr	r2, [pc, #336]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80055fa:	f023 0304 	bic.w	r3, r3, #4
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7ff fb58 	bl	8004cbc <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7ff fb54 	bl	8004cbc <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0cb      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005626:	4b49      	ldr	r3, [pc, #292]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0ee      	beq.n	8005610 <HAL_RCC_OscConfig+0x334>
 8005632:	e014      	b.n	800565e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005634:	f7ff fb42 	bl	8004cbc <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563a:	e00a      	b.n	8005652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800563c:	f7ff fb3e 	bl	8004cbc <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	; 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0b5      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005652:	4b3e      	ldr	r3, [pc, #248]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ee      	bne.n	800563c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	4a38      	ldr	r2, [pc, #224]	; (800574c <HAL_RCC_OscConfig+0x470>)
 800566a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a1 	beq.w	80057bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800567a:	4b34      	ldr	r3, [pc, #208]	; (800574c <HAL_RCC_OscConfig+0x470>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b08      	cmp	r3, #8
 8005684:	d05c      	beq.n	8005740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d141      	bne.n	8005712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <HAL_RCC_OscConfig+0x478>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7ff fb12 	bl	8004cbc <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800569c:	f7ff fb0e 	bl	8004cbc <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e087      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ae:	4b27      	ldr	r3, [pc, #156]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	019b      	lsls	r3, r3, #6
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	3b01      	subs	r3, #1
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	491b      	ldr	r1, [pc, #108]	; (800574c <HAL_RCC_OscConfig+0x470>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e4:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <HAL_RCC_OscConfig+0x478>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ea:	f7ff fae7 	bl	8004cbc <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f2:	f7ff fae3 	bl	8004cbc <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e05c      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x416>
 8005710:	e054      	b.n	80057bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_RCC_OscConfig+0x478>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7ff fad0 	bl	8004cbc <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005720:	f7ff facc 	bl	8004cbc <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e045      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <HAL_RCC_OscConfig+0x470>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x444>
 800573e:	e03d      	b.n	80057bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d107      	bne.n	8005758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e038      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
 800574c:	40023800 	.word	0x40023800
 8005750:	40007000 	.word	0x40007000
 8005754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005758:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <HAL_RCC_OscConfig+0x4ec>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d028      	beq.n	80057b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d121      	bne.n	80057b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577e:	429a      	cmp	r2, r3
 8005780:	d11a      	bne.n	80057b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800578e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005790:	4293      	cmp	r3, r2
 8005792:	d111      	bne.n	80057b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	3b01      	subs	r3, #1
 80057a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d107      	bne.n	80057b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800

080057cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0cc      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057e0:	4b68      	ldr	r3, [pc, #416]	; (8005984 <HAL_RCC_ClockConfig+0x1b8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d90c      	bls.n	8005808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ee:	4b65      	ldr	r3, [pc, #404]	; (8005984 <HAL_RCC_ClockConfig+0x1b8>)
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b63      	ldr	r3, [pc, #396]	; (8005984 <HAL_RCC_ClockConfig+0x1b8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0b8      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005820:	4b59      	ldr	r3, [pc, #356]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a58      	ldr	r2, [pc, #352]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800582a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005838:	4b53      	ldr	r3, [pc, #332]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4a52      	ldr	r2, [pc, #328]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005844:	4b50      	ldr	r3, [pc, #320]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	494d      	ldr	r1, [pc, #308]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d044      	beq.n	80058ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	4b47      	ldr	r3, [pc, #284]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d119      	bne.n	80058aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e07f      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d003      	beq.n	800588a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005886:	2b03      	cmp	r3, #3
 8005888:	d107      	bne.n	800589a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588a:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e06f      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589a:	4b3b      	ldr	r3, [pc, #236]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e067      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058aa:	4b37      	ldr	r3, [pc, #220]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f023 0203 	bic.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4934      	ldr	r1, [pc, #208]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058bc:	f7ff f9fe 	bl	8004cbc <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c2:	e00a      	b.n	80058da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c4:	f7ff f9fa 	bl	8004cbc <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e04f      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058da:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 020c 	and.w	r2, r3, #12
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d1eb      	bne.n	80058c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058ec:	4b25      	ldr	r3, [pc, #148]	; (8005984 <HAL_RCC_ClockConfig+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d20c      	bcs.n	8005914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	4b22      	ldr	r3, [pc, #136]	; (8005984 <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e032      	b.n	800597a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4916      	ldr	r1, [pc, #88]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	490e      	ldr	r1, [pc, #56]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005952:	f000 f821 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 8005956:	4602      	mov	r2, r0
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	490a      	ldr	r1, [pc, #40]	; (800598c <HAL_RCC_ClockConfig+0x1c0>)
 8005964:	5ccb      	ldrb	r3, [r1, r3]
 8005966:	fa22 f303 	lsr.w	r3, r2, r3
 800596a:	4a09      	ldr	r2, [pc, #36]	; (8005990 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <HAL_RCC_ClockConfig+0x1c8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff f95e 	bl	8004c34 <HAL_InitTick>

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40023c00 	.word	0x40023c00
 8005988:	40023800 	.word	0x40023800
 800598c:	08009e2c 	.word	0x08009e2c
 8005990:	20000004 	.word	0x20000004
 8005994:	20000008 	.word	0x20000008

08005998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800599c:	b094      	sub	sp, #80	; 0x50
 800599e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	647b      	str	r3, [r7, #68]	; 0x44
 80059a4:	2300      	movs	r3, #0
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	2300      	movs	r3, #0
 80059aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b0:	4b79      	ldr	r3, [pc, #484]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 030c 	and.w	r3, r3, #12
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d00d      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x40>
 80059bc:	2b08      	cmp	r3, #8
 80059be:	f200 80e1 	bhi.w	8005b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x34>
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d003      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059ca:	e0db      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059cc:	4b73      	ldr	r3, [pc, #460]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059d0:	e0db      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059d2:	4b73      	ldr	r3, [pc, #460]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80059d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059d6:	e0d8      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d8:	4b6f      	ldr	r3, [pc, #444]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059e2:	4b6d      	ldr	r3, [pc, #436]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d063      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ee:	4b6a      	ldr	r3, [pc, #424]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	099b      	lsrs	r3, r3, #6
 80059f4:	2200      	movs	r2, #0
 80059f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30
 8005a02:	2300      	movs	r3, #0
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
 8005a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	462b      	mov	r3, r5
 8005a0e:	f04f 0000 	mov.w	r0, #0
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	0159      	lsls	r1, r3, #5
 8005a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1c:	0150      	lsls	r0, r2, #5
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4621      	mov	r1, r4
 8005a24:	1a51      	subs	r1, r2, r1
 8005a26:	6139      	str	r1, [r7, #16]
 8005a28:	4629      	mov	r1, r5
 8005a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	018b      	lsls	r3, r1, #6
 8005a40:	4651      	mov	r1, sl
 8005a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a46:	4651      	mov	r1, sl
 8005a48:	018a      	lsls	r2, r1, #6
 8005a4a:	4651      	mov	r1, sl
 8005a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a50:	4659      	mov	r1, fp
 8005a52:	eb63 0901 	sbc.w	r9, r3, r1
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a6a:	4690      	mov	r8, r2
 8005a6c:	4699      	mov	r9, r3
 8005a6e:	4623      	mov	r3, r4
 8005a70:	eb18 0303 	adds.w	r3, r8, r3
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	462b      	mov	r3, r5
 8005a78:	eb49 0303 	adc.w	r3, r9, r3
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	024b      	lsls	r3, r1, #9
 8005a8e:	4621      	mov	r1, r4
 8005a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a94:	4621      	mov	r1, r4
 8005a96:	024a      	lsls	r2, r1, #9
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aa8:	f7fa fc4a 	bl	8000340 <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	e058      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	2200      	movs	r2, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
 8005acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	0159      	lsls	r1, r3, #5
 8005ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae2:	0150      	lsls	r0, r2, #5
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4641      	mov	r1, r8
 8005aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8005aee:	4649      	mov	r1, r9
 8005af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b08:	ebb2 040a 	subs.w	r4, r2, sl
 8005b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	00eb      	lsls	r3, r5, #3
 8005b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b1e:	00e2      	lsls	r2, r4, #3
 8005b20:	4614      	mov	r4, r2
 8005b22:	461d      	mov	r5, r3
 8005b24:	4643      	mov	r3, r8
 8005b26:	18e3      	adds	r3, r4, r3
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	eb45 0303 	adc.w	r3, r5, r3
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b3e:	4629      	mov	r1, r5
 8005b40:	028b      	lsls	r3, r1, #10
 8005b42:	4621      	mov	r1, r4
 8005b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b48:	4621      	mov	r1, r4
 8005b4a:	028a      	lsls	r2, r1, #10
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	2200      	movs	r2, #0
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	61fa      	str	r2, [r7, #28]
 8005b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b5c:	f7fa fbf0 	bl	8000340 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4613      	mov	r3, r2
 8005b66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	3301      	adds	r3, #1
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b82:	e002      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3750      	adds	r7, #80	; 0x50
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	00f42400 	.word	0x00f42400
 8005ba0:	007a1200 	.word	0x007a1200

08005ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba8:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20000004 	.word	0x20000004

08005bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bc0:	f7ff fff0 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	0a9b      	lsrs	r3, r3, #10
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4903      	ldr	r1, [pc, #12]	; (8005be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	08009e3c 	.word	0x08009e3c

08005be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005be8:	f7ff ffdc 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	0b5b      	lsrs	r3, r3, #13
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4903      	ldr	r1, [pc, #12]	; (8005c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40023800 	.word	0x40023800
 8005c08:	08009e3c 	.word	0x08009e3c

08005c0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d035      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c34:	4b62      	ldr	r3, [pc, #392]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3a:	f7ff f83f 	bl	8004cbc <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c42:	f7ff f83b 	bl	8004cbc <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e0b0      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c54:	4b5b      	ldr	r3, [pc, #364]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f0      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	019a      	lsls	r2, r3, #6
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	071b      	lsls	r3, r3, #28
 8005c6c:	4955      	ldr	r1, [pc, #340]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c74:	4b52      	ldr	r3, [pc, #328]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7a:	f7ff f81f 	bl	8004cbc <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c82:	f7ff f81b 	bl	8004cbc <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e090      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c94:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8083 	beq.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4b44      	ldr	r3, [pc, #272]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a43      	ldr	r2, [pc, #268]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cbe:	4b41      	ldr	r3, [pc, #260]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cca:	4b3f      	ldr	r3, [pc, #252]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3e      	ldr	r2, [pc, #248]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd6:	f7fe fff1 	bl	8004cbc <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fe ffed 	bl	8004cbc <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e062      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cf0:	4b35      	ldr	r3, [pc, #212]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cfc:	4b31      	ldr	r3, [pc, #196]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02f      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d028      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d24:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d2a:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d30:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d36:	4b23      	ldr	r3, [pc, #140]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d114      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fe ffbb 	bl	8004cbc <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fe ffb7 	bl	8004cbc <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e02a      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d60:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ee      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d78:	d10d      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8e:	490d      	ldr	r1, [pc, #52]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]
 8005d94:	e005      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005da0:	6093      	str	r3, [r2, #8]
 8005da2:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	4905      	ldr	r1, [pc, #20]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	42470068 	.word	0x42470068
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40007000 	.word	0x40007000
 8005dcc:	42470e40 	.word	0x42470e40

08005dd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e066      	b.n	8005eb4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7f5b      	ldrb	r3, [r3, #29]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fe fcfa 	bl	80047f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	22ca      	movs	r2, #202	; 0xca
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2253      	movs	r2, #83	; 0x53
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa45 	bl	80062a2 <RTC_EnterInitMode>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d12c      	bne.n	8005e7c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6899      	ldr	r1, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	68d2      	ldr	r2, [r2, #12]
 8005e5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6919      	ldr	r1, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	041a      	lsls	r2, r3, #16
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa4c 	bl	8006310 <RTC_ExitInitMode>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	7f1b      	ldrb	r3, [r3, #28]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RTC_SetTime+0x1c>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e087      	b.n	8005fe8 <HAL_RTC_SetTime+0x12c>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d126      	bne.n	8005f38 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fa29 	bl	800635a <RTC_ByteToBcd2>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fa22 	bl	800635a <RTC_ByteToBcd2>
 8005f16:	4603      	mov	r3, r0
 8005f18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f1a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	789b      	ldrb	r3, [r3, #2]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fa1a 	bl	800635a <RTC_ByteToBcd2>
 8005f26:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e018      	b.n	8005f6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	22ca      	movs	r2, #202	; 0xca
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2253      	movs	r2, #83	; 0x53
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f991 	bl	80062a2 <RTC_EnterInitMode>
 8005f80:	4603      	mov	r3, r0
 8005f82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d120      	bne.n	8005fcc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6899      	ldr	r1, [r3, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f9a4 	bl	8006310 <RTC_ExitInitMode>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d102      	bne.n	8005fd8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	771a      	strb	r2, [r3, #28]

  return status;
 8005fe6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}

08005ff0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006022:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006026:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006042:	b2da      	uxtb	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	0d9b      	lsrs	r3, r3, #22
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11a      	bne.n	80060a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f98f 	bl	8006394 <RTC_Bcd2ToByte>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f986 	bl	8006394 <RTC_Bcd2ToByte>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	789b      	ldrb	r3, [r3, #2]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 f97d 	bl	8006394 <RTC_Bcd2ToByte>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060ac:	b590      	push	{r4, r7, lr}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	7f1b      	ldrb	r3, [r3, #28]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_RTC_SetDate+0x1c>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e071      	b.n	80061ac <HAL_RTC_SetDate+0x100>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2202      	movs	r2, #2
 80060d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10e      	bne.n	80060f8 <HAL_RTC_SetDate+0x4c>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	785b      	ldrb	r3, [r3, #1]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	f023 0310 	bic.w	r3, r3, #16
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	330a      	adds	r3, #10
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11c      	bne.n	8006138 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	78db      	ldrb	r3, [r3, #3]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f929 	bl	800635a <RTC_ByteToBcd2>
 8006108:	4603      	mov	r3, r0
 800610a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f922 	bl	800635a <RTC_ByteToBcd2>
 8006116:	4603      	mov	r3, r0
 8006118:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800611a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	789b      	ldrb	r3, [r3, #2]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f91a 	bl	800635a <RTC_ByteToBcd2>
 8006126:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006128:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e00e      	b.n	8006156 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006144:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800614a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	22ca      	movs	r2, #202	; 0xca
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2253      	movs	r2, #83	; 0x53
 8006164:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f89b 	bl	80062a2 <RTC_EnterInitMode>
 800616c:	4603      	mov	r3, r0
 800616e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006170:	7cfb      	ldrb	r3, [r7, #19]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10c      	bne.n	8006190 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006184:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f8c2 	bl	8006310 <RTC_ExitInitMode>
 800618c:	4603      	mov	r3, r0
 800618e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	22ff      	movs	r2, #255	; 0xff
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]

  return status;
 80061aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd90      	pop	{r4, r7, pc}

080061b4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	0a1b      	lsrs	r3, r3, #8
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	0b5b      	lsrs	r3, r3, #13
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11a      	bne.n	8006248 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	78db      	ldrb	r3, [r3, #3]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f8bc 	bl	8006394 <RTC_Bcd2ToByte>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 f8b3 	bl	8006394 <RTC_Bcd2ToByte>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	789b      	ldrb	r3, [r3, #2]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f8aa 	bl	8006394 <RTC_Bcd2ToByte>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800626c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800626e:	f7fe fd25 	bl	8004cbc <HAL_GetTick>
 8006272:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006274:	e009      	b.n	800628a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006276:	f7fe fd21 	bl	8004cbc <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006284:	d901      	bls.n	800628a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e007      	b.n	800629a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ee      	beq.n	8006276 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d122      	bne.n	8006306 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062d0:	f7fe fcf4 	bl	8004cbc <HAL_GetTick>
 80062d4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062d6:	e00c      	b.n	80062f2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062d8:	f7fe fcf0 	bl	8004cbc <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e6:	d904      	bls.n	80062f2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2204      	movs	r2, #4
 80062ec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <RTC_EnterInitMode+0x64>
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d1e8      	bne.n	80062d8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800632a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff ff89 	bl	8006252 <HAL_RTC_WaitForSynchro>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2204      	movs	r2, #4
 800634a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	4603      	mov	r3, r0
 8006362:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006368:	e005      	b.n	8006376 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	3301      	adds	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	3b0a      	subs	r3, #10
 8006374:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	2b09      	cmp	r3, #9
 800637a:	d8f6      	bhi.n	800636a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	b2da      	uxtb	r2, r3
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	4313      	orrs	r3, r2
 8006386:	b2db      	uxtb	r3, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	0092      	lsls	r2, r2, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	4413      	add	r3, r2
 80063be:	b2db      	uxtb	r3, r3
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3350      	adds	r3, #80	; 0x50
 80063e2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e07b      	b.n	800650a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d108      	bne.n	800642c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006422:	d009      	beq.n	8006438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	61da      	str	r2, [r3, #28]
 800642a:	e005      	b.n	8006438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fe f9f6 	bl	8004844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064bc:	ea42 0103 	orr.w	r1, r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	f003 0104 	and.w	r1, r3, #4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	f003 0210 	and.w	r2, r3, #16
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69da      	ldr	r2, [r3, #28]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b08c      	sub	sp, #48	; 0x30
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
 800651e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006520:	2301      	movs	r3, #1
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x26>
 8006534:	2302      	movs	r3, #2
 8006536:	e18a      	b.n	800684e <HAL_SPI_TransmitReceive+0x33c>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006540:	f7fe fbbc 	bl	8004cbc <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800654c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006556:	887b      	ldrh	r3, [r7, #2]
 8006558:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800655a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800655e:	2b01      	cmp	r3, #1
 8006560:	d00f      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x70>
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006568:	d107      	bne.n	800657a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <HAL_SPI_TransmitReceive+0x68>
 8006572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006576:	2b04      	cmp	r3, #4
 8006578:	d003      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800657a:	2302      	movs	r3, #2
 800657c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006580:	e15b      	b.n	800683a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_SPI_TransmitReceive+0x82>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_SPI_TransmitReceive+0x82>
 800658e:	887b      	ldrh	r3, [r7, #2]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800659a:	e14e      	b.n	800683a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d003      	beq.n	80065b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2205      	movs	r2, #5
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	887a      	ldrh	r2, [r7, #2]
 80065c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	887a      	ldrh	r2, [r7, #2]
 80065c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	887a      	ldrh	r2, [r7, #2]
 80065d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d007      	beq.n	8006604 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006602:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660c:	d178      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_SPI_TransmitReceive+0x10a>
 8006616:	8b7b      	ldrh	r3, [r7, #26]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d166      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	881a      	ldrh	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	1c9a      	adds	r2, r3, #2
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006640:	e053      	b.n	80066ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	d11b      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x176>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <HAL_SPI_TransmitReceive+0x176>
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d113      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	881a      	ldrh	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	1c9a      	adds	r2, r3, #2
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d119      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x1b8>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d014      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	b292      	uxth	r2, r2
 80066ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	1c9a      	adds	r2, r3, #2
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c6:	2301      	movs	r3, #1
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066ca:	f7fe faf7 	bl	8004cbc <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d807      	bhi.n	80066ea <HAL_SPI_TransmitReceive+0x1d8>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d003      	beq.n	80066ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066e8:	e0a7      	b.n	800683a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1a6      	bne.n	8006642 <HAL_SPI_TransmitReceive+0x130>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1a1      	bne.n	8006642 <HAL_SPI_TransmitReceive+0x130>
 80066fe:	e07c      	b.n	80067fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <HAL_SPI_TransmitReceive+0x1fc>
 8006708:	8b7b      	ldrh	r3, [r7, #26]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d16b      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006734:	e057      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b02      	cmp	r3, #2
 8006742:	d11c      	bne.n	800677e <HAL_SPI_TransmitReceive+0x26c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_SPI_TransmitReceive+0x26c>
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d114      	bne.n	800677e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d119      	bne.n	80067c0 <HAL_SPI_TransmitReceive+0x2ae>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d014      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067bc:	2301      	movs	r3, #1
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067c0:	f7fe fa7c 	bl	8004cbc <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d803      	bhi.n	80067d8 <HAL_SPI_TransmitReceive+0x2c6>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d102      	bne.n	80067de <HAL_SPI_TransmitReceive+0x2cc>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067e4:	e029      	b.n	800683a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1a2      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x224>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d19d      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f8b2 	bl	8006968 <SPI_EndRxTxTransaction>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006816:	e010      	b.n	800683a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10b      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	e000      	b.n	800683a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006838:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800684a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800684e:	4618      	mov	r0, r3
 8006850:	3730      	adds	r7, #48	; 0x30
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006868:	f7fe fa28 	bl	8004cbc <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4413      	add	r3, r2
 8006876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006878:	f7fe fa20 	bl	8004cbc <HAL_GetTick>
 800687c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800687e:	4b39      	ldr	r3, [pc, #228]	; (8006964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	015b      	lsls	r3, r3, #5
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688e:	e054      	b.n	800693a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d050      	beq.n	800693a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006898:	f7fe fa10 	bl	8004cbc <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d902      	bls.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13d      	bne.n	800692a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c6:	d111      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d0:	d004      	beq.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d107      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d10f      	bne.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e017      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3b01      	subs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	bf0c      	ite	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	2300      	movne	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	429a      	cmp	r2, r3
 8006956:	d19b      	bne.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000004 	.word	0x20000004

08006968 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006974:	4b1b      	ldr	r3, [pc, #108]	; (80069e4 <SPI_EndRxTxTransaction+0x7c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <SPI_EndRxTxTransaction+0x80>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	0d5b      	lsrs	r3, r3, #21
 8006980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006984:	fb02 f303 	mul.w	r3, r2, r3
 8006988:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006992:	d112      	bne.n	80069ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ff5a 	bl	8006858 <SPI_WaitFlagStateUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e00f      	b.n	80069da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b80      	cmp	r3, #128	; 0x80
 80069d2:	d0f2      	beq.n	80069ba <SPI_EndRxTxTransaction+0x52>
 80069d4:	e000      	b.n	80069d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80069d6:	bf00      	nop
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000004 	.word	0x20000004
 80069e8:	165e9f81 	.word	0x165e9f81

080069ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e03f      	b.n	8006a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fd ff5e 	bl	80048d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2224      	movs	r2, #36	; 0x24
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f929 	bl	8006c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08a      	sub	sp, #40	; 0x28
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d17c      	bne.n	8006ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_UART_Transmit+0x2c>
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e075      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_UART_Transmit+0x3e>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e06e      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2221      	movs	r2, #33	; 0x21
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ada:	f7fe f8ef 	bl	8004cbc <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d108      	bne.n	8006b08 <HAL_UART_Transmit+0x82>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e003      	b.n	8006b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b18:	e02a      	b.n	8006b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f840 	bl	8006baa <UART_WaitOnFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e036      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	e007      	b.n	8006b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1cf      	bne.n	8006b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2140      	movs	r1, #64	; 0x40
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f810 	bl	8006baa <UART_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e006      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e000      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ba0:	2302      	movs	r3, #2
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b090      	sub	sp, #64	; 0x40
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bba:	e050      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d04c      	beq.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <UART_WaitOnFlagUntilTimeout+0x30>
 8006bca:	f7fe f877 	bl	8004cbc <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d241      	bcs.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	330c      	adds	r3, #12
 8006bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bfa:	637a      	str	r2, [r7, #52]	; 0x34
 8006bfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e5      	bne.n	8006bda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3314      	adds	r3, #20
 8006c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c2e:	623a      	str	r2, [r7, #32]
 8006c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e5      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e00f      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4013      	ands	r3, r2
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2301      	moveq	r3, #1
 8006c70:	2300      	movne	r3, #0
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d09f      	beq.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3740      	adds	r7, #64	; 0x40
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c8c:	b0c0      	sub	sp, #256	; 0x100
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	ea40 0301 	orr.w	r3, r0, r1
 8006cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ce0:	f021 010c 	bic.w	r1, r1, #12
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d02:	6999      	ldr	r1, [r3, #24]
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	ea40 0301 	orr.w	r3, r0, r1
 8006d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b8f      	ldr	r3, [pc, #572]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d005      	beq.n	8006d28 <UART_SetConfig+0xa0>
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b8d      	ldr	r3, [pc, #564]	; (8006f58 <UART_SetConfig+0x2d0>)
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d104      	bne.n	8006d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d28:	f7fe ff5c 	bl	8005be4 <HAL_RCC_GetPCLK2Freq>
 8006d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d30:	e003      	b.n	8006d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d32:	f7fe ff43 	bl	8005bbc <HAL_RCC_GetPCLK1Freq>
 8006d36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d44:	f040 810c 	bne.w	8006f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	1891      	adds	r1, r2, r2
 8006d60:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d62:	415b      	adcs	r3, r3
 8006d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	eb12 0801 	adds.w	r8, r2, r1
 8006d70:	4629      	mov	r1, r5
 8006d72:	eb43 0901 	adc.w	r9, r3, r1
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d8a:	4690      	mov	r8, r2
 8006d8c:	4699      	mov	r9, r3
 8006d8e:	4623      	mov	r3, r4
 8006d90:	eb18 0303 	adds.w	r3, r8, r3
 8006d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d98:	462b      	mov	r3, r5
 8006d9a:	eb49 0303 	adc.w	r3, r9, r3
 8006d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006db6:	460b      	mov	r3, r1
 8006db8:	18db      	adds	r3, r3, r3
 8006dba:	653b      	str	r3, [r7, #80]	; 0x50
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	eb42 0303 	adc.w	r3, r2, r3
 8006dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006dcc:	f7f9 fab8 	bl	8000340 <__aeabi_uldivmod>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <UART_SetConfig+0x2d4>)
 8006dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	011c      	lsls	r4, r3, #4
 8006dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006de8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	1891      	adds	r1, r2, r2
 8006df6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006df8:	415b      	adcs	r3, r3
 8006dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e00:	4641      	mov	r1, r8
 8006e02:	eb12 0a01 	adds.w	sl, r2, r1
 8006e06:	4649      	mov	r1, r9
 8006e08:	eb43 0b01 	adc.w	fp, r3, r1
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e20:	4692      	mov	sl, r2
 8006e22:	469b      	mov	fp, r3
 8006e24:	4643      	mov	r3, r8
 8006e26:	eb1a 0303 	adds.w	r3, sl, r3
 8006e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	eb4b 0303 	adc.w	r3, fp, r3
 8006e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	18db      	adds	r3, r3, r3
 8006e50:	643b      	str	r3, [r7, #64]	; 0x40
 8006e52:	4613      	mov	r3, r2
 8006e54:	eb42 0303 	adc.w	r3, r2, r3
 8006e58:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e62:	f7f9 fa6d 	bl	8000340 <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4b3b      	ldr	r3, [pc, #236]	; (8006f5c <UART_SetConfig+0x2d4>)
 8006e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2264      	movs	r2, #100	; 0x64
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	1acb      	subs	r3, r1, r3
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e82:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <UART_SetConfig+0x2d4>)
 8006e84:	fba3 2302 	umull	r2, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e90:	441c      	add	r4, r3
 8006e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	1891      	adds	r1, r2, r2
 8006eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006eac:	415b      	adcs	r3, r3
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006eb4:	4641      	mov	r1, r8
 8006eb6:	1851      	adds	r1, r2, r1
 8006eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8006eba:	4649      	mov	r1, r9
 8006ebc:	414b      	adcs	r3, r1
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ecc:	4659      	mov	r1, fp
 8006ece:	00cb      	lsls	r3, r1, #3
 8006ed0:	4651      	mov	r1, sl
 8006ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	00ca      	lsls	r2, r1, #3
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	189b      	adds	r3, r3, r2
 8006ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee8:	464b      	mov	r3, r9
 8006eea:	460a      	mov	r2, r1
 8006eec:	eb42 0303 	adc.w	r3, r2, r3
 8006ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f08:	460b      	mov	r3, r1
 8006f0a:	18db      	adds	r3, r3, r3
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0e:	4613      	mov	r3, r2
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f1e:	f7f9 fa0f 	bl	8000340 <__aeabi_uldivmod>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <UART_SetConfig+0x2d4>)
 8006f28:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	2164      	movs	r1, #100	; 0x64
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	3332      	adds	r3, #50	; 0x32
 8006f3a:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <UART_SetConfig+0x2d4>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	f003 0207 	and.w	r2, r3, #7
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4422      	add	r2, r4
 8006f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f50:	e106      	b.n	8007160 <UART_SetConfig+0x4d8>
 8006f52:	bf00      	nop
 8006f54:	40011000 	.word	0x40011000
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f72:	4642      	mov	r2, r8
 8006f74:	464b      	mov	r3, r9
 8006f76:	1891      	adds	r1, r2, r2
 8006f78:	6239      	str	r1, [r7, #32]
 8006f7a:	415b      	adcs	r3, r3
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f82:	4641      	mov	r1, r8
 8006f84:	1854      	adds	r4, r2, r1
 8006f86:	4649      	mov	r1, r9
 8006f88:	eb43 0501 	adc.w	r5, r3, r1
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	00eb      	lsls	r3, r5, #3
 8006f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f9a:	00e2      	lsls	r2, r4, #3
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	461d      	mov	r5, r3
 8006fa0:	4643      	mov	r3, r8
 8006fa2:	18e3      	adds	r3, r4, r3
 8006fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fa8:	464b      	mov	r3, r9
 8006faa:	eb45 0303 	adc.w	r3, r5, r3
 8006fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fce:	4629      	mov	r1, r5
 8006fd0:	008b      	lsls	r3, r1, #2
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd8:	4621      	mov	r1, r4
 8006fda:	008a      	lsls	r2, r1, #2
 8006fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fe0:	f7f9 f9ae 	bl	8000340 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4b60      	ldr	r3, [pc, #384]	; (800716c <UART_SetConfig+0x4e4>)
 8006fea:	fba3 2302 	umull	r2, r3, r3, r2
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	011c      	lsls	r4, r3, #4
 8006ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	1891      	adds	r1, r2, r2
 800700a:	61b9      	str	r1, [r7, #24]
 800700c:	415b      	adcs	r3, r3
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007014:	4641      	mov	r1, r8
 8007016:	1851      	adds	r1, r2, r1
 8007018:	6139      	str	r1, [r7, #16]
 800701a:	4649      	mov	r1, r9
 800701c:	414b      	adcs	r3, r1
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800702c:	4659      	mov	r1, fp
 800702e:	00cb      	lsls	r3, r1, #3
 8007030:	4651      	mov	r1, sl
 8007032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007036:	4651      	mov	r1, sl
 8007038:	00ca      	lsls	r2, r1, #3
 800703a:	4610      	mov	r0, r2
 800703c:	4619      	mov	r1, r3
 800703e:	4603      	mov	r3, r0
 8007040:	4642      	mov	r2, r8
 8007042:	189b      	adds	r3, r3, r2
 8007044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007048:	464b      	mov	r3, r9
 800704a:	460a      	mov	r2, r1
 800704c:	eb42 0303 	adc.w	r3, r2, r3
 8007050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	67bb      	str	r3, [r7, #120]	; 0x78
 800705e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800706c:	4649      	mov	r1, r9
 800706e:	008b      	lsls	r3, r1, #2
 8007070:	4641      	mov	r1, r8
 8007072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007076:	4641      	mov	r1, r8
 8007078:	008a      	lsls	r2, r1, #2
 800707a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800707e:	f7f9 f95f 	bl	8000340 <__aeabi_uldivmod>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4611      	mov	r1, r2
 8007088:	4b38      	ldr	r3, [pc, #224]	; (800716c <UART_SetConfig+0x4e4>)
 800708a:	fba3 2301 	umull	r2, r3, r3, r1
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	2264      	movs	r2, #100	; 0x64
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	1acb      	subs	r3, r1, r3
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	3332      	adds	r3, #50	; 0x32
 800709c:	4a33      	ldr	r2, [pc, #204]	; (800716c <UART_SetConfig+0x4e4>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070a8:	441c      	add	r4, r3
 80070aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ae:	2200      	movs	r2, #0
 80070b0:	673b      	str	r3, [r7, #112]	; 0x70
 80070b2:	677a      	str	r2, [r7, #116]	; 0x74
 80070b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	1891      	adds	r1, r2, r2
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	415b      	adcs	r3, r3
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070c8:	4641      	mov	r1, r8
 80070ca:	1851      	adds	r1, r2, r1
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	4649      	mov	r1, r9
 80070d0:	414b      	adcs	r3, r1
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070e0:	4659      	mov	r1, fp
 80070e2:	00cb      	lsls	r3, r1, #3
 80070e4:	4651      	mov	r1, sl
 80070e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ea:	4651      	mov	r1, sl
 80070ec:	00ca      	lsls	r2, r1, #3
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	4642      	mov	r2, r8
 80070f6:	189b      	adds	r3, r3, r2
 80070f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80070fa:	464b      	mov	r3, r9
 80070fc:	460a      	mov	r2, r1
 80070fe:	eb42 0303 	adc.w	r3, r2, r3
 8007102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	663b      	str	r3, [r7, #96]	; 0x60
 800710e:	667a      	str	r2, [r7, #100]	; 0x64
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800711c:	4649      	mov	r1, r9
 800711e:	008b      	lsls	r3, r1, #2
 8007120:	4641      	mov	r1, r8
 8007122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007126:	4641      	mov	r1, r8
 8007128:	008a      	lsls	r2, r1, #2
 800712a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800712e:	f7f9 f907 	bl	8000340 <__aeabi_uldivmod>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4b0d      	ldr	r3, [pc, #52]	; (800716c <UART_SetConfig+0x4e4>)
 8007138:	fba3 1302 	umull	r1, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	2164      	movs	r1, #100	; 0x64
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	3332      	adds	r3, #50	; 0x32
 800714a:	4a08      	ldr	r2, [pc, #32]	; (800716c <UART_SetConfig+0x4e4>)
 800714c:	fba2 2303 	umull	r2, r3, r2, r3
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	f003 020f 	and.w	r2, r3, #15
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4422      	add	r2, r4
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007166:	46bd      	mov	sp, r7
 8007168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800716c:	51eb851f 	.word	0x51eb851f

08007170 <rand>:
 8007170:	4b16      	ldr	r3, [pc, #88]	; (80071cc <rand+0x5c>)
 8007172:	b510      	push	{r4, lr}
 8007174:	681c      	ldr	r4, [r3, #0]
 8007176:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007178:	b9b3      	cbnz	r3, 80071a8 <rand+0x38>
 800717a:	2018      	movs	r0, #24
 800717c:	f000 fe8c 	bl	8007e98 <malloc>
 8007180:	4602      	mov	r2, r0
 8007182:	6320      	str	r0, [r4, #48]	; 0x30
 8007184:	b920      	cbnz	r0, 8007190 <rand+0x20>
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <rand+0x60>)
 8007188:	4812      	ldr	r0, [pc, #72]	; (80071d4 <rand+0x64>)
 800718a:	2152      	movs	r1, #82	; 0x52
 800718c:	f000 fdd6 	bl	8007d3c <__assert_func>
 8007190:	4911      	ldr	r1, [pc, #68]	; (80071d8 <rand+0x68>)
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <rand+0x6c>)
 8007194:	e9c0 1300 	strd	r1, r3, [r0]
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <rand+0x70>)
 800719a:	6083      	str	r3, [r0, #8]
 800719c:	230b      	movs	r3, #11
 800719e:	8183      	strh	r3, [r0, #12]
 80071a0:	2100      	movs	r1, #0
 80071a2:	2001      	movs	r0, #1
 80071a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80071a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071aa:	480e      	ldr	r0, [pc, #56]	; (80071e4 <rand+0x74>)
 80071ac:	690b      	ldr	r3, [r1, #16]
 80071ae:	694c      	ldr	r4, [r1, #20]
 80071b0:	4a0d      	ldr	r2, [pc, #52]	; (80071e8 <rand+0x78>)
 80071b2:	4358      	muls	r0, r3
 80071b4:	fb02 0004 	mla	r0, r2, r4, r0
 80071b8:	fba3 3202 	umull	r3, r2, r3, r2
 80071bc:	3301      	adds	r3, #1
 80071be:	eb40 0002 	adc.w	r0, r0, r2
 80071c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80071c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	20000070 	.word	0x20000070
 80071d0:	08009e44 	.word	0x08009e44
 80071d4:	08009e5b 	.word	0x08009e5b
 80071d8:	abcd330e 	.word	0xabcd330e
 80071dc:	e66d1234 	.word	0xe66d1234
 80071e0:	0005deec 	.word	0x0005deec
 80071e4:	5851f42d 	.word	0x5851f42d
 80071e8:	4c957f2d 	.word	0x4c957f2d

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f000 f916 	bl	800743a <memset>
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <std+0x58>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <std+0x5c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <std+0x60>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <std+0x64>)
 800721c:	6323      	str	r3, [r4, #48]	; 0x30
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x68>)
 8007220:	6224      	str	r4, [r4, #32]
 8007222:	429c      	cmp	r4, r3
 8007224:	d006      	beq.n	8007234 <std+0x48>
 8007226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800722a:	4294      	cmp	r4, r2
 800722c:	d002      	beq.n	8007234 <std+0x48>
 800722e:	33d0      	adds	r3, #208	; 0xd0
 8007230:	429c      	cmp	r4, r3
 8007232:	d105      	bne.n	8007240 <std+0x54>
 8007234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f000 bd62 	b.w	8007d04 <__retarget_lock_init_recursive>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	080073b1 	.word	0x080073b1
 8007248:	080073d7 	.word	0x080073d7
 800724c:	0800740f 	.word	0x0800740f
 8007250:	08007433 	.word	0x08007433
 8007254:	2000c990 	.word	0x2000c990

08007258 <stdio_exit_handler>:
 8007258:	4a02      	ldr	r2, [pc, #8]	; (8007264 <stdio_exit_handler+0xc>)
 800725a:	4903      	ldr	r1, [pc, #12]	; (8007268 <stdio_exit_handler+0x10>)
 800725c:	4803      	ldr	r0, [pc, #12]	; (800726c <stdio_exit_handler+0x14>)
 800725e:	f000 b869 	b.w	8007334 <_fwalk_sglue>
 8007262:	bf00      	nop
 8007264:	20000010 	.word	0x20000010
 8007268:	080087e9 	.word	0x080087e9
 800726c:	20000024 	.word	0x20000024

08007270 <cleanup_stdio>:
 8007270:	6841      	ldr	r1, [r0, #4]
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <cleanup_stdio+0x34>)
 8007274:	4299      	cmp	r1, r3
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	d001      	beq.n	8007280 <cleanup_stdio+0x10>
 800727c:	f001 fab4 	bl	80087e8 <_fflush_r>
 8007280:	68a1      	ldr	r1, [r4, #8]
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <cleanup_stdio+0x38>)
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <cleanup_stdio+0x1e>
 8007288:	4620      	mov	r0, r4
 800728a:	f001 faad 	bl	80087e8 <_fflush_r>
 800728e:	68e1      	ldr	r1, [r4, #12]
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <cleanup_stdio+0x3c>)
 8007292:	4299      	cmp	r1, r3
 8007294:	d004      	beq.n	80072a0 <cleanup_stdio+0x30>
 8007296:	4620      	mov	r0, r4
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f001 baa4 	b.w	80087e8 <_fflush_r>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	2000c990 	.word	0x2000c990
 80072a8:	2000c9f8 	.word	0x2000c9f8
 80072ac:	2000ca60 	.word	0x2000ca60

080072b0 <global_stdio_init.part.0>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <global_stdio_init.part.0+0x30>)
 80072b4:	4c0b      	ldr	r4, [pc, #44]	; (80072e4 <global_stdio_init.part.0+0x34>)
 80072b6:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <global_stdio_init.part.0+0x38>)
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4620      	mov	r0, r4
 80072bc:	2200      	movs	r2, #0
 80072be:	2104      	movs	r1, #4
 80072c0:	f7ff ff94 	bl	80071ec <std>
 80072c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072c8:	2201      	movs	r2, #1
 80072ca:	2109      	movs	r1, #9
 80072cc:	f7ff ff8e 	bl	80071ec <std>
 80072d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072d4:	2202      	movs	r2, #2
 80072d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072da:	2112      	movs	r1, #18
 80072dc:	f7ff bf86 	b.w	80071ec <std>
 80072e0:	2000cac8 	.word	0x2000cac8
 80072e4:	2000c990 	.word	0x2000c990
 80072e8:	08007259 	.word	0x08007259

080072ec <__sfp_lock_acquire>:
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__sfp_lock_acquire+0x8>)
 80072ee:	f000 bd0b 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	2000caf6 	.word	0x2000caf6

080072f8 <__sfp_lock_release>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_release+0x8>)
 80072fa:	f000 bd07 	b.w	8007d0c <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	2000caf6 	.word	0x2000caf6

08007304 <__sinit>:
 8007304:	b510      	push	{r4, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	f7ff fff0 	bl	80072ec <__sfp_lock_acquire>
 800730c:	6a23      	ldr	r3, [r4, #32]
 800730e:	b11b      	cbz	r3, 8007318 <__sinit+0x14>
 8007310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007314:	f7ff bff0 	b.w	80072f8 <__sfp_lock_release>
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <__sinit+0x28>)
 800731a:	6223      	str	r3, [r4, #32]
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <__sinit+0x2c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f5      	bne.n	8007310 <__sinit+0xc>
 8007324:	f7ff ffc4 	bl	80072b0 <global_stdio_init.part.0>
 8007328:	e7f2      	b.n	8007310 <__sinit+0xc>
 800732a:	bf00      	nop
 800732c:	08007271 	.word	0x08007271
 8007330:	2000cac8 	.word	0x2000cac8

08007334 <_fwalk_sglue>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4607      	mov	r7, r0
 800733a:	4688      	mov	r8, r1
 800733c:	4614      	mov	r4, r2
 800733e:	2600      	movs	r6, #0
 8007340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007344:	f1b9 0901 	subs.w	r9, r9, #1
 8007348:	d505      	bpl.n	8007356 <_fwalk_sglue+0x22>
 800734a:	6824      	ldr	r4, [r4, #0]
 800734c:	2c00      	cmp	r4, #0
 800734e:	d1f7      	bne.n	8007340 <_fwalk_sglue+0xc>
 8007350:	4630      	mov	r0, r6
 8007352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d907      	bls.n	800736c <_fwalk_sglue+0x38>
 800735c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007360:	3301      	adds	r3, #1
 8007362:	d003      	beq.n	800736c <_fwalk_sglue+0x38>
 8007364:	4629      	mov	r1, r5
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	4306      	orrs	r6, r0
 800736c:	3568      	adds	r5, #104	; 0x68
 800736e:	e7e9      	b.n	8007344 <_fwalk_sglue+0x10>

08007370 <siprintf>:
 8007370:	b40e      	push	{r1, r2, r3}
 8007372:	b500      	push	{lr}
 8007374:	b09c      	sub	sp, #112	; 0x70
 8007376:	ab1d      	add	r3, sp, #116	; 0x74
 8007378:	9002      	str	r0, [sp, #8]
 800737a:	9006      	str	r0, [sp, #24]
 800737c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007380:	4809      	ldr	r0, [pc, #36]	; (80073a8 <siprintf+0x38>)
 8007382:	9107      	str	r1, [sp, #28]
 8007384:	9104      	str	r1, [sp, #16]
 8007386:	4909      	ldr	r1, [pc, #36]	; (80073ac <siprintf+0x3c>)
 8007388:	f853 2b04 	ldr.w	r2, [r3], #4
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	a902      	add	r1, sp, #8
 8007394:	f000 ff14 	bl	80081c0 <_svfiprintf_r>
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	b01c      	add	sp, #112	; 0x70
 80073a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a4:	b003      	add	sp, #12
 80073a6:	4770      	bx	lr
 80073a8:	20000070 	.word	0x20000070
 80073ac:	ffff0208 	.word	0xffff0208

080073b0 <__sread>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	f000 fc56 	bl	8007c68 <_read_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	bfab      	itete	ge
 80073c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrhlt	r3, [r4, #12]
 80073c4:	181b      	addge	r3, r3, r0
 80073c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ca:	bfac      	ite	ge
 80073cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ce:	81a3      	strhlt	r3, [r4, #12]
 80073d0:	bd10      	pop	{r4, pc}

080073d2 <__seofread>:
 80073d2:	2000      	movs	r0, #0
 80073d4:	4770      	bx	lr

080073d6 <__swrite>:
 80073d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073da:	461f      	mov	r7, r3
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	05db      	lsls	r3, r3, #23
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4616      	mov	r6, r2
 80073e6:	d505      	bpl.n	80073f4 <__swrite+0x1e>
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	2302      	movs	r3, #2
 80073ee:	2200      	movs	r2, #0
 80073f0:	f000 fc28 	bl	8007c44 <_lseek_r>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	4628      	mov	r0, r5
 8007406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	f000 bc3f 	b.w	8007c8c <_write_r>

0800740e <__sseek>:
 800740e:	b510      	push	{r4, lr}
 8007410:	460c      	mov	r4, r1
 8007412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007416:	f000 fc15 	bl	8007c44 <_lseek_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	bf15      	itete	ne
 8007420:	6560      	strne	r0, [r4, #84]	; 0x54
 8007422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800742a:	81a3      	strheq	r3, [r4, #12]
 800742c:	bf18      	it	ne
 800742e:	81a3      	strhne	r3, [r4, #12]
 8007430:	bd10      	pop	{r4, pc}

08007432 <__sclose>:
 8007432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007436:	f000 bbf5 	b.w	8007c24 <_close_r>

0800743a <memset>:
 800743a:	4402      	add	r2, r0
 800743c:	4603      	mov	r3, r0
 800743e:	4293      	cmp	r3, r2
 8007440:	d100      	bne.n	8007444 <memset+0xa>
 8007442:	4770      	bx	lr
 8007444:	f803 1b01 	strb.w	r1, [r3], #1
 8007448:	e7f9      	b.n	800743e <memset+0x4>
	...

0800744c <localtime>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <localtime+0x30>)
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007454:	4604      	mov	r4, r0
 8007456:	b953      	cbnz	r3, 800746e <localtime+0x22>
 8007458:	2024      	movs	r0, #36	; 0x24
 800745a:	f000 fd1d 	bl	8007e98 <malloc>
 800745e:	4602      	mov	r2, r0
 8007460:	6368      	str	r0, [r5, #52]	; 0x34
 8007462:	b920      	cbnz	r0, 800746e <localtime+0x22>
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <localtime+0x34>)
 8007466:	4807      	ldr	r0, [pc, #28]	; (8007484 <localtime+0x38>)
 8007468:	2132      	movs	r1, #50	; 0x32
 800746a:	f000 fc67 	bl	8007d3c <__assert_func>
 800746e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8007470:	4620      	mov	r0, r4
 8007472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007476:	f000 b807 	b.w	8007488 <localtime_r>
 800747a:	bf00      	nop
 800747c:	20000070 	.word	0x20000070
 8007480:	08009e44 	.word	0x08009e44
 8007484:	08009eb3 	.word	0x08009eb3

08007488 <localtime_r>:
 8007488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800748c:	4680      	mov	r8, r0
 800748e:	9101      	str	r1, [sp, #4]
 8007490:	f001 fa3c 	bl	800890c <__gettzinfo>
 8007494:	9901      	ldr	r1, [sp, #4]
 8007496:	4605      	mov	r5, r0
 8007498:	4640      	mov	r0, r8
 800749a:	f001 fa3b 	bl	8008914 <gmtime_r>
 800749e:	6943      	ldr	r3, [r0, #20]
 80074a0:	0799      	lsls	r1, r3, #30
 80074a2:	4604      	mov	r4, r0
 80074a4:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80074a8:	d105      	bne.n	80074b6 <localtime_r+0x2e>
 80074aa:	2264      	movs	r2, #100	; 0x64
 80074ac:	fb97 f3f2 	sdiv	r3, r7, r2
 80074b0:	fb02 7313 	mls	r3, r2, r3, r7
 80074b4:	bb7b      	cbnz	r3, 8007516 <localtime_r+0x8e>
 80074b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80074ba:	fb97 f3f2 	sdiv	r3, r7, r2
 80074be:	fb02 7313 	mls	r3, r2, r3, r7
 80074c2:	fab3 f383 	clz	r3, r3
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	4e68      	ldr	r6, [pc, #416]	; (800766c <localtime_r+0x1e4>)
 80074ca:	2230      	movs	r2, #48	; 0x30
 80074cc:	fb02 6603 	mla	r6, r2, r3, r6
 80074d0:	f000 f976 	bl	80077c0 <__tz_lock>
 80074d4:	f000 f980 	bl	80077d8 <_tzset_unlocked>
 80074d8:	4b65      	ldr	r3, [pc, #404]	; (8007670 <localtime_r+0x1e8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	b353      	cbz	r3, 8007534 <localtime_r+0xac>
 80074de:	686b      	ldr	r3, [r5, #4]
 80074e0:	42bb      	cmp	r3, r7
 80074e2:	d11a      	bne.n	800751a <localtime_r+0x92>
 80074e4:	682f      	ldr	r7, [r5, #0]
 80074e6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80074ea:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80074ee:	b9e7      	cbnz	r7, 800752a <localtime_r+0xa2>
 80074f0:	4282      	cmp	r2, r0
 80074f2:	eb73 0101 	sbcs.w	r1, r3, r1
 80074f6:	da25      	bge.n	8007544 <localtime_r+0xbc>
 80074f8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80074fc:	4282      	cmp	r2, r0
 80074fe:	eb73 0701 	sbcs.w	r7, r3, r1
 8007502:	bfb4      	ite	lt
 8007504:	2701      	movlt	r7, #1
 8007506:	2700      	movge	r7, #0
 8007508:	4282      	cmp	r2, r0
 800750a:	eb73 0101 	sbcs.w	r1, r3, r1
 800750e:	6227      	str	r7, [r4, #32]
 8007510:	db1a      	blt.n	8007548 <localtime_r+0xc0>
 8007512:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007514:	e019      	b.n	800754a <localtime_r+0xc2>
 8007516:	2301      	movs	r3, #1
 8007518:	e7d6      	b.n	80074c8 <localtime_r+0x40>
 800751a:	4638      	mov	r0, r7
 800751c:	f000 f8aa 	bl	8007674 <__tzcalc_limits>
 8007520:	2800      	cmp	r0, #0
 8007522:	d1df      	bne.n	80074e4 <localtime_r+0x5c>
 8007524:	f04f 33ff 	mov.w	r3, #4294967295
 8007528:	e004      	b.n	8007534 <localtime_r+0xac>
 800752a:	4282      	cmp	r2, r0
 800752c:	eb73 0101 	sbcs.w	r1, r3, r1
 8007530:	da02      	bge.n	8007538 <localtime_r+0xb0>
 8007532:	2300      	movs	r3, #0
 8007534:	6223      	str	r3, [r4, #32]
 8007536:	e7ec      	b.n	8007512 <localtime_r+0x8a>
 8007538:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800753c:	4282      	cmp	r2, r0
 800753e:	eb73 0101 	sbcs.w	r1, r3, r1
 8007542:	daf6      	bge.n	8007532 <localtime_r+0xaa>
 8007544:	2301      	movs	r3, #1
 8007546:	6223      	str	r3, [r4, #32]
 8007548:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800754a:	6861      	ldr	r1, [r4, #4]
 800754c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8007550:	fb93 f0f2 	sdiv	r0, r3, r2
 8007554:	fb02 3310 	mls	r3, r2, r0, r3
 8007558:	223c      	movs	r2, #60	; 0x3c
 800755a:	fb93 f5f2 	sdiv	r5, r3, r2
 800755e:	fb02 3215 	mls	r2, r2, r5, r3
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	68a2      	ldr	r2, [r4, #8]
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	1b49      	subs	r1, r1, r5
 800756c:	1a12      	subs	r2, r2, r0
 800756e:	2b3b      	cmp	r3, #59	; 0x3b
 8007570:	6061      	str	r1, [r4, #4]
 8007572:	60a2      	str	r2, [r4, #8]
 8007574:	dd35      	ble.n	80075e2 <localtime_r+0x15a>
 8007576:	3101      	adds	r1, #1
 8007578:	6061      	str	r1, [r4, #4]
 800757a:	3b3c      	subs	r3, #60	; 0x3c
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	6863      	ldr	r3, [r4, #4]
 8007580:	2b3b      	cmp	r3, #59	; 0x3b
 8007582:	dd34      	ble.n	80075ee <localtime_r+0x166>
 8007584:	3201      	adds	r2, #1
 8007586:	60a2      	str	r2, [r4, #8]
 8007588:	3b3c      	subs	r3, #60	; 0x3c
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	68a3      	ldr	r3, [r4, #8]
 800758e:	2b17      	cmp	r3, #23
 8007590:	dd33      	ble.n	80075fa <localtime_r+0x172>
 8007592:	69e2      	ldr	r2, [r4, #28]
 8007594:	3201      	adds	r2, #1
 8007596:	61e2      	str	r2, [r4, #28]
 8007598:	69a2      	ldr	r2, [r4, #24]
 800759a:	3201      	adds	r2, #1
 800759c:	2a07      	cmp	r2, #7
 800759e:	bfa8      	it	ge
 80075a0:	2200      	movge	r2, #0
 80075a2:	61a2      	str	r2, [r4, #24]
 80075a4:	68e2      	ldr	r2, [r4, #12]
 80075a6:	3b18      	subs	r3, #24
 80075a8:	3201      	adds	r2, #1
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	60e2      	str	r2, [r4, #12]
 80075b0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80075b4:	428a      	cmp	r2, r1
 80075b6:	dd0e      	ble.n	80075d6 <localtime_r+0x14e>
 80075b8:	2b0b      	cmp	r3, #11
 80075ba:	eba2 0201 	sub.w	r2, r2, r1
 80075be:	60e2      	str	r2, [r4, #12]
 80075c0:	f103 0201 	add.w	r2, r3, #1
 80075c4:	bf09      	itett	eq
 80075c6:	6963      	ldreq	r3, [r4, #20]
 80075c8:	6122      	strne	r2, [r4, #16]
 80075ca:	2200      	moveq	r2, #0
 80075cc:	3301      	addeq	r3, #1
 80075ce:	bf02      	ittt	eq
 80075d0:	6122      	streq	r2, [r4, #16]
 80075d2:	6163      	streq	r3, [r4, #20]
 80075d4:	61e2      	streq	r2, [r4, #28]
 80075d6:	f000 f8f9 	bl	80077cc <__tz_unlock>
 80075da:	4620      	mov	r0, r4
 80075dc:	b002      	add	sp, #8
 80075de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dacb      	bge.n	800757e <localtime_r+0xf6>
 80075e6:	3901      	subs	r1, #1
 80075e8:	6061      	str	r1, [r4, #4]
 80075ea:	333c      	adds	r3, #60	; 0x3c
 80075ec:	e7c6      	b.n	800757c <localtime_r+0xf4>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	dacc      	bge.n	800758c <localtime_r+0x104>
 80075f2:	3a01      	subs	r2, #1
 80075f4:	60a2      	str	r2, [r4, #8]
 80075f6:	333c      	adds	r3, #60	; 0x3c
 80075f8:	e7c7      	b.n	800758a <localtime_r+0x102>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	daeb      	bge.n	80075d6 <localtime_r+0x14e>
 80075fe:	69e2      	ldr	r2, [r4, #28]
 8007600:	3a01      	subs	r2, #1
 8007602:	61e2      	str	r2, [r4, #28]
 8007604:	69a2      	ldr	r2, [r4, #24]
 8007606:	3a01      	subs	r2, #1
 8007608:	bf48      	it	mi
 800760a:	2206      	movmi	r2, #6
 800760c:	61a2      	str	r2, [r4, #24]
 800760e:	68e2      	ldr	r2, [r4, #12]
 8007610:	3318      	adds	r3, #24
 8007612:	3a01      	subs	r2, #1
 8007614:	60e2      	str	r2, [r4, #12]
 8007616:	60a3      	str	r3, [r4, #8]
 8007618:	2a00      	cmp	r2, #0
 800761a:	d1dc      	bne.n	80075d6 <localtime_r+0x14e>
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	3b01      	subs	r3, #1
 8007620:	d405      	bmi.n	800762e <localtime_r+0x1a6>
 8007622:	6123      	str	r3, [r4, #16]
 8007624:	6923      	ldr	r3, [r4, #16]
 8007626:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800762a:	60e3      	str	r3, [r4, #12]
 800762c:	e7d3      	b.n	80075d6 <localtime_r+0x14e>
 800762e:	230b      	movs	r3, #11
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	6963      	ldr	r3, [r4, #20]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800763a:	6162      	str	r2, [r4, #20]
 800763c:	079a      	lsls	r2, r3, #30
 800763e:	d105      	bne.n	800764c <localtime_r+0x1c4>
 8007640:	2164      	movs	r1, #100	; 0x64
 8007642:	fb93 f2f1 	sdiv	r2, r3, r1
 8007646:	fb01 3212 	mls	r2, r1, r2, r3
 800764a:	b962      	cbnz	r2, 8007666 <localtime_r+0x1de>
 800764c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007650:	fb93 f1f2 	sdiv	r1, r3, r2
 8007654:	fb02 3311 	mls	r3, r2, r1, r3
 8007658:	fab3 f383 	clz	r3, r3
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8007662:	61e3      	str	r3, [r4, #28]
 8007664:	e7de      	b.n	8007624 <localtime_r+0x19c>
 8007666:	2301      	movs	r3, #1
 8007668:	e7f9      	b.n	800765e <localtime_r+0x1d6>
 800766a:	bf00      	nop
 800766c:	08009f0c 	.word	0x08009f0c
 8007670:	2000cae8 	.word	0x2000cae8

08007674 <__tzcalc_limits>:
 8007674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	4605      	mov	r5, r0
 800767a:	f001 f947 	bl	800890c <__gettzinfo>
 800767e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007682:	429d      	cmp	r5, r3
 8007684:	f340 8095 	ble.w	80077b2 <__tzcalc_limits+0x13e>
 8007688:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800768c:	18ac      	adds	r4, r5, r2
 800768e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8007692:	f240 126d 	movw	r2, #365	; 0x16d
 8007696:	10a4      	asrs	r4, r4, #2
 8007698:	fb02 4403 	mla	r4, r2, r3, r4
 800769c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80076a0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80076a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80076a8:	441c      	add	r4, r3
 80076aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80076ae:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80076b2:	fb95 fcf3 	sdiv	ip, r5, r3
 80076b6:	fb03 5c1c 	mls	ip, r3, ip, r5
 80076ba:	186a      	adds	r2, r5, r1
 80076bc:	fabc f68c 	clz	r6, ip
 80076c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076c4:	f005 0303 	and.w	r3, r5, #3
 80076c8:	4414      	add	r4, r2
 80076ca:	2264      	movs	r2, #100	; 0x64
 80076cc:	6045      	str	r5, [r0, #4]
 80076ce:	fb95 f7f2 	sdiv	r7, r5, r2
 80076d2:	0976      	lsrs	r6, r6, #5
 80076d4:	fb02 5717 	mls	r7, r2, r7, r5
 80076d8:	4601      	mov	r1, r0
 80076da:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	f04f 0a07 	mov.w	sl, #7
 80076e4:	7a0d      	ldrb	r5, [r1, #8]
 80076e6:	694b      	ldr	r3, [r1, #20]
 80076e8:	2d4a      	cmp	r5, #74	; 0x4a
 80076ea:	d12b      	bne.n	8007744 <__tzcalc_limits+0xd0>
 80076ec:	9a00      	ldr	r2, [sp, #0]
 80076ee:	18e5      	adds	r5, r4, r3
 80076f0:	b902      	cbnz	r2, 80076f4 <__tzcalc_limits+0x80>
 80076f2:	b917      	cbnz	r7, 80076fa <__tzcalc_limits+0x86>
 80076f4:	f1bc 0f00 	cmp.w	ip, #0
 80076f8:	d122      	bne.n	8007740 <__tzcalc_limits+0xcc>
 80076fa:	2b3b      	cmp	r3, #59	; 0x3b
 80076fc:	bfd4      	ite	le
 80076fe:	2300      	movle	r3, #0
 8007700:	2301      	movgt	r3, #1
 8007702:	442b      	add	r3, r5
 8007704:	3b01      	subs	r3, #1
 8007706:	698d      	ldr	r5, [r1, #24]
 8007708:	4a2b      	ldr	r2, [pc, #172]	; (80077b8 <__tzcalc_limits+0x144>)
 800770a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800770e:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8007712:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007714:	18ed      	adds	r5, r5, r3
 8007716:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800771a:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800771e:	3128      	adds	r1, #40	; 0x28
 8007720:	458b      	cmp	fp, r1
 8007722:	d1df      	bne.n	80076e4 <__tzcalc_limits+0x70>
 8007724:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8007728:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 800772c:	428c      	cmp	r4, r1
 800772e:	4193      	sbcs	r3, r2
 8007730:	bfb4      	ite	lt
 8007732:	2301      	movlt	r3, #1
 8007734:	2300      	movge	r3, #0
 8007736:	6003      	str	r3, [r0, #0]
 8007738:	2001      	movs	r0, #1
 800773a:	b003      	add	sp, #12
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	2300      	movs	r3, #0
 8007742:	e7de      	b.n	8007702 <__tzcalc_limits+0x8e>
 8007744:	2d44      	cmp	r5, #68	; 0x44
 8007746:	d101      	bne.n	800774c <__tzcalc_limits+0xd8>
 8007748:	4423      	add	r3, r4
 800774a:	e7dc      	b.n	8007706 <__tzcalc_limits+0x92>
 800774c:	9a00      	ldr	r2, [sp, #0]
 800774e:	bb52      	cbnz	r2, 80077a6 <__tzcalc_limits+0x132>
 8007750:	2f00      	cmp	r7, #0
 8007752:	bf0c      	ite	eq
 8007754:	4635      	moveq	r5, r6
 8007756:	2501      	movne	r5, #1
 8007758:	68ca      	ldr	r2, [r1, #12]
 800775a:	9201      	str	r2, [sp, #4]
 800775c:	4a17      	ldr	r2, [pc, #92]	; (80077bc <__tzcalc_limits+0x148>)
 800775e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8007762:	fb09 2505 	mla	r5, r9, r5, r2
 8007766:	46a6      	mov	lr, r4
 8007768:	f04f 0800 	mov.w	r8, #0
 800776c:	3d04      	subs	r5, #4
 800776e:	9a01      	ldr	r2, [sp, #4]
 8007770:	f108 0801 	add.w	r8, r8, #1
 8007774:	4542      	cmp	r2, r8
 8007776:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800777a:	dc16      	bgt.n	80077aa <__tzcalc_limits+0x136>
 800777c:	f10e 0504 	add.w	r5, lr, #4
 8007780:	fb95 f8fa 	sdiv	r8, r5, sl
 8007784:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8007788:	eba5 0508 	sub.w	r5, r5, r8
 800778c:	1b5d      	subs	r5, r3, r5
 800778e:	690b      	ldr	r3, [r1, #16]
 8007790:	f103 33ff 	add.w	r3, r3, #4294967295
 8007794:	bf48      	it	mi
 8007796:	3507      	addmi	r5, #7
 8007798:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800779c:	442b      	add	r3, r5
 800779e:	454b      	cmp	r3, r9
 80077a0:	da05      	bge.n	80077ae <__tzcalc_limits+0x13a>
 80077a2:	4473      	add	r3, lr
 80077a4:	e7af      	b.n	8007706 <__tzcalc_limits+0x92>
 80077a6:	4635      	mov	r5, r6
 80077a8:	e7d6      	b.n	8007758 <__tzcalc_limits+0xe4>
 80077aa:	44ce      	add	lr, r9
 80077ac:	e7df      	b.n	800776e <__tzcalc_limits+0xfa>
 80077ae:	3b07      	subs	r3, #7
 80077b0:	e7f5      	b.n	800779e <__tzcalc_limits+0x12a>
 80077b2:	2000      	movs	r0, #0
 80077b4:	e7c1      	b.n	800773a <__tzcalc_limits+0xc6>
 80077b6:	bf00      	nop
 80077b8:	00015180 	.word	0x00015180
 80077bc:	08009f0c 	.word	0x08009f0c

080077c0 <__tz_lock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	; (80077c8 <__tz_lock+0x8>)
 80077c2:	f000 baa0 	b.w	8007d06 <__retarget_lock_acquire>
 80077c6:	bf00      	nop
 80077c8:	2000caf7 	.word	0x2000caf7

080077cc <__tz_unlock>:
 80077cc:	4801      	ldr	r0, [pc, #4]	; (80077d4 <__tz_unlock+0x8>)
 80077ce:	f000 ba9c 	b.w	8007d0a <__retarget_lock_release>
 80077d2:	bf00      	nop
 80077d4:	2000caf7 	.word	0x2000caf7

080077d8 <_tzset_unlocked>:
 80077d8:	4b01      	ldr	r3, [pc, #4]	; (80077e0 <_tzset_unlocked+0x8>)
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	f000 b802 	b.w	80077e4 <_tzset_unlocked_r>
 80077e0:	20000070 	.word	0x20000070

080077e4 <_tzset_unlocked_r>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	b08d      	sub	sp, #52	; 0x34
 80077ea:	4607      	mov	r7, r0
 80077ec:	f001 f88e 	bl	800890c <__gettzinfo>
 80077f0:	49bb      	ldr	r1, [pc, #748]	; (8007ae0 <_tzset_unlocked_r+0x2fc>)
 80077f2:	4dbc      	ldr	r5, [pc, #752]	; (8007ae4 <_tzset_unlocked_r+0x300>)
 80077f4:	4604      	mov	r4, r0
 80077f6:	4638      	mov	r0, r7
 80077f8:	f000 fb46 	bl	8007e88 <_getenv_r>
 80077fc:	4606      	mov	r6, r0
 80077fe:	bb10      	cbnz	r0, 8007846 <_tzset_unlocked_r+0x62>
 8007800:	4bb9      	ldr	r3, [pc, #740]	; (8007ae8 <_tzset_unlocked_r+0x304>)
 8007802:	4aba      	ldr	r2, [pc, #744]	; (8007aec <_tzset_unlocked_r+0x308>)
 8007804:	6018      	str	r0, [r3, #0]
 8007806:	4bba      	ldr	r3, [pc, #744]	; (8007af0 <_tzset_unlocked_r+0x30c>)
 8007808:	62a0      	str	r0, [r4, #40]	; 0x28
 800780a:	6018      	str	r0, [r3, #0]
 800780c:	4bb9      	ldr	r3, [pc, #740]	; (8007af4 <_tzset_unlocked_r+0x310>)
 800780e:	6520      	str	r0, [r4, #80]	; 0x50
 8007810:	e9c3 2200 	strd	r2, r2, [r3]
 8007814:	214a      	movs	r1, #74	; 0x4a
 8007816:	2200      	movs	r2, #0
 8007818:	2300      	movs	r3, #0
 800781a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800781e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8007822:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8007826:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800782a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800782e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007832:	6828      	ldr	r0, [r5, #0]
 8007834:	7221      	strb	r1, [r4, #8]
 8007836:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800783a:	f000 fb35 	bl	8007ea8 <free>
 800783e:	602e      	str	r6, [r5, #0]
 8007840:	b00d      	add	sp, #52	; 0x34
 8007842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007846:	6829      	ldr	r1, [r5, #0]
 8007848:	2900      	cmp	r1, #0
 800784a:	f040 808e 	bne.w	800796a <_tzset_unlocked_r+0x186>
 800784e:	6828      	ldr	r0, [r5, #0]
 8007850:	f000 fb2a 	bl	8007ea8 <free>
 8007854:	4630      	mov	r0, r6
 8007856:	f7f8 fcc5 	bl	80001e4 <strlen>
 800785a:	1c41      	adds	r1, r0, #1
 800785c:	4638      	mov	r0, r7
 800785e:	f000 fb4b 	bl	8007ef8 <_malloc_r>
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	2800      	cmp	r0, #0
 8007866:	f040 8086 	bne.w	8007976 <_tzset_unlocked_r+0x192>
 800786a:	4aa1      	ldr	r2, [pc, #644]	; (8007af0 <_tzset_unlocked_r+0x30c>)
 800786c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8007af4 <_tzset_unlocked_r+0x310>
 8007870:	f8df a274 	ldr.w	sl, [pc, #628]	; 8007ae8 <_tzset_unlocked_r+0x304>
 8007874:	2300      	movs	r3, #0
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	4a9f      	ldr	r2, [pc, #636]	; (8007af8 <_tzset_unlocked_r+0x314>)
 800787a:	f8ca 3000 	str.w	r3, [sl]
 800787e:	2000      	movs	r0, #0
 8007880:	2100      	movs	r1, #0
 8007882:	e9c8 2200 	strd	r2, r2, [r8]
 8007886:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800788a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800788e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8007892:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8007896:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800789a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800789e:	224a      	movs	r2, #74	; 0x4a
 80078a0:	7222      	strb	r2, [r4, #8]
 80078a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80078a4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 80078a8:	6523      	str	r3, [r4, #80]	; 0x50
 80078aa:	7833      	ldrb	r3, [r6, #0]
 80078ac:	2b3a      	cmp	r3, #58	; 0x3a
 80078ae:	bf08      	it	eq
 80078b0:	3601      	addeq	r6, #1
 80078b2:	7833      	ldrb	r3, [r6, #0]
 80078b4:	2b3c      	cmp	r3, #60	; 0x3c
 80078b6:	d162      	bne.n	800797e <_tzset_unlocked_r+0x19a>
 80078b8:	1c75      	adds	r5, r6, #1
 80078ba:	4a90      	ldr	r2, [pc, #576]	; (8007afc <_tzset_unlocked_r+0x318>)
 80078bc:	4990      	ldr	r1, [pc, #576]	; (8007b00 <_tzset_unlocked_r+0x31c>)
 80078be:	ab0a      	add	r3, sp, #40	; 0x28
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 ffcb 	bl	800885c <siscanf>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	ddba      	ble.n	8007840 <_tzset_unlocked_r+0x5c>
 80078ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078cc:	1eda      	subs	r2, r3, #3
 80078ce:	2a07      	cmp	r2, #7
 80078d0:	d8b6      	bhi.n	8007840 <_tzset_unlocked_r+0x5c>
 80078d2:	5ceb      	ldrb	r3, [r5, r3]
 80078d4:	2b3e      	cmp	r3, #62	; 0x3e
 80078d6:	d1b3      	bne.n	8007840 <_tzset_unlocked_r+0x5c>
 80078d8:	3602      	adds	r6, #2
 80078da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078dc:	18f5      	adds	r5, r6, r3
 80078de:	5cf3      	ldrb	r3, [r6, r3]
 80078e0:	2b2d      	cmp	r3, #45	; 0x2d
 80078e2:	d15a      	bne.n	800799a <_tzset_unlocked_r+0x1b6>
 80078e4:	3501      	adds	r5, #1
 80078e6:	f04f 39ff 	mov.w	r9, #4294967295
 80078ea:	2300      	movs	r3, #0
 80078ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80078f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80078f4:	af08      	add	r7, sp, #32
 80078f6:	ab0a      	add	r3, sp, #40	; 0x28
 80078f8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	f10d 031e 	add.w	r3, sp, #30
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	497f      	ldr	r1, [pc, #508]	; (8007b04 <_tzset_unlocked_r+0x320>)
 8007906:	ab0a      	add	r3, sp, #40	; 0x28
 8007908:	aa07      	add	r2, sp, #28
 800790a:	4628      	mov	r0, r5
 800790c:	f000 ffa6 	bl	800885c <siscanf>
 8007910:	2800      	cmp	r0, #0
 8007912:	dd95      	ble.n	8007840 <_tzset_unlocked_r+0x5c>
 8007914:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007918:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800791c:	223c      	movs	r2, #60	; 0x3c
 800791e:	fb02 6603 	mla	r6, r2, r3, r6
 8007922:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007926:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800792a:	fb02 6603 	mla	r6, r2, r3, r6
 800792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007930:	fb09 f606 	mul.w	r6, r9, r6
 8007934:	eb05 0903 	add.w	r9, r5, r3
 8007938:	5ceb      	ldrb	r3, [r5, r3]
 800793a:	2b3c      	cmp	r3, #60	; 0x3c
 800793c:	f040 80ec 	bne.w	8007b18 <_tzset_unlocked_r+0x334>
 8007940:	f109 0501 	add.w	r5, r9, #1
 8007944:	4a70      	ldr	r2, [pc, #448]	; (8007b08 <_tzset_unlocked_r+0x324>)
 8007946:	496e      	ldr	r1, [pc, #440]	; (8007b00 <_tzset_unlocked_r+0x31c>)
 8007948:	ab0a      	add	r3, sp, #40	; 0x28
 800794a:	4628      	mov	r0, r5
 800794c:	f000 ff86 	bl	800885c <siscanf>
 8007950:	2800      	cmp	r0, #0
 8007952:	dc28      	bgt.n	80079a6 <_tzset_unlocked_r+0x1c2>
 8007954:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007958:	2b3e      	cmp	r3, #62	; 0x3e
 800795a:	d124      	bne.n	80079a6 <_tzset_unlocked_r+0x1c2>
 800795c:	4b67      	ldr	r3, [pc, #412]	; (8007afc <_tzset_unlocked_r+0x318>)
 800795e:	62a6      	str	r6, [r4, #40]	; 0x28
 8007960:	e9c8 3300 	strd	r3, r3, [r8]
 8007964:	f8ca 6000 	str.w	r6, [sl]
 8007968:	e76a      	b.n	8007840 <_tzset_unlocked_r+0x5c>
 800796a:	f7f8 fc31 	bl	80001d0 <strcmp>
 800796e:	2800      	cmp	r0, #0
 8007970:	f47f af6d 	bne.w	800784e <_tzset_unlocked_r+0x6a>
 8007974:	e764      	b.n	8007840 <_tzset_unlocked_r+0x5c>
 8007976:	4631      	mov	r1, r6
 8007978:	f000 f9c9 	bl	8007d0e <strcpy>
 800797c:	e775      	b.n	800786a <_tzset_unlocked_r+0x86>
 800797e:	4a5f      	ldr	r2, [pc, #380]	; (8007afc <_tzset_unlocked_r+0x318>)
 8007980:	4962      	ldr	r1, [pc, #392]	; (8007b0c <_tzset_unlocked_r+0x328>)
 8007982:	ab0a      	add	r3, sp, #40	; 0x28
 8007984:	4630      	mov	r0, r6
 8007986:	f000 ff69 	bl	800885c <siscanf>
 800798a:	2800      	cmp	r0, #0
 800798c:	f77f af58 	ble.w	8007840 <_tzset_unlocked_r+0x5c>
 8007990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007992:	3b03      	subs	r3, #3
 8007994:	2b07      	cmp	r3, #7
 8007996:	d9a0      	bls.n	80078da <_tzset_unlocked_r+0xf6>
 8007998:	e752      	b.n	8007840 <_tzset_unlocked_r+0x5c>
 800799a:	2b2b      	cmp	r3, #43	; 0x2b
 800799c:	bf08      	it	eq
 800799e:	3501      	addeq	r5, #1
 80079a0:	f04f 0901 	mov.w	r9, #1
 80079a4:	e7a1      	b.n	80078ea <_tzset_unlocked_r+0x106>
 80079a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a8:	1eda      	subs	r2, r3, #3
 80079aa:	2a07      	cmp	r2, #7
 80079ac:	f63f af48 	bhi.w	8007840 <_tzset_unlocked_r+0x5c>
 80079b0:	5ceb      	ldrb	r3, [r5, r3]
 80079b2:	2b3e      	cmp	r3, #62	; 0x3e
 80079b4:	f47f af44 	bne.w	8007840 <_tzset_unlocked_r+0x5c>
 80079b8:	f109 0902 	add.w	r9, r9, #2
 80079bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079be:	eb09 0503 	add.w	r5, r9, r3
 80079c2:	f819 3003 	ldrb.w	r3, [r9, r3]
 80079c6:	2b2d      	cmp	r3, #45	; 0x2d
 80079c8:	f040 80b5 	bne.w	8007b36 <_tzset_unlocked_r+0x352>
 80079cc:	3501      	adds	r5, #1
 80079ce:	f04f 39ff 	mov.w	r9, #4294967295
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80079d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80079dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80079e0:	930a      	str	r3, [sp, #40]	; 0x28
 80079e2:	ab0a      	add	r3, sp, #40	; 0x28
 80079e4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	f10d 031e 	add.w	r3, sp, #30
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4944      	ldr	r1, [pc, #272]	; (8007b04 <_tzset_unlocked_r+0x320>)
 80079f2:	ab0a      	add	r3, sp, #40	; 0x28
 80079f4:	aa07      	add	r2, sp, #28
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 ff30 	bl	800885c <siscanf>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f300 80a0 	bgt.w	8007b42 <_tzset_unlocked_r+0x35e>
 8007a02:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0a:	4627      	mov	r7, r4
 8007a0c:	441d      	add	r5, r3
 8007a0e:	f04f 0b00 	mov.w	fp, #0
 8007a12:	782b      	ldrb	r3, [r5, #0]
 8007a14:	2b2c      	cmp	r3, #44	; 0x2c
 8007a16:	bf08      	it	eq
 8007a18:	3501      	addeq	r5, #1
 8007a1a:	f895 9000 	ldrb.w	r9, [r5]
 8007a1e:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8007a22:	f040 80a1 	bne.w	8007b68 <_tzset_unlocked_r+0x384>
 8007a26:	ab0a      	add	r3, sp, #40	; 0x28
 8007a28:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8007a2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007a30:	aa09      	add	r2, sp, #36	; 0x24
 8007a32:	9200      	str	r2, [sp, #0]
 8007a34:	4936      	ldr	r1, [pc, #216]	; (8007b10 <_tzset_unlocked_r+0x32c>)
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 ff0d 	bl	800885c <siscanf>
 8007a42:	2803      	cmp	r0, #3
 8007a44:	f47f aefc 	bne.w	8007840 <_tzset_unlocked_r+0x5c>
 8007a48:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8007a4c:	1e4b      	subs	r3, r1, #1
 8007a4e:	2b0b      	cmp	r3, #11
 8007a50:	f63f aef6 	bhi.w	8007840 <_tzset_unlocked_r+0x5c>
 8007a54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007a58:	1e53      	subs	r3, r2, #1
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	f63f aef0 	bhi.w	8007840 <_tzset_unlocked_r+0x5c>
 8007a60:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007a64:	2b06      	cmp	r3, #6
 8007a66:	f63f aeeb 	bhi.w	8007840 <_tzset_unlocked_r+0x5c>
 8007a6a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007a6e:	f887 9008 	strb.w	r9, [r7, #8]
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a76:	eb05 0903 	add.w	r9, r5, r3
 8007a7a:	2500      	movs	r5, #0
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007a82:	f8ad 501e 	strh.w	r5, [sp, #30]
 8007a86:	f8ad 5020 	strh.w	r5, [sp, #32]
 8007a8a:	950a      	str	r5, [sp, #40]	; 0x28
 8007a8c:	f899 3000 	ldrb.w	r3, [r9]
 8007a90:	2b2f      	cmp	r3, #47	; 0x2f
 8007a92:	f040 8095 	bne.w	8007bc0 <_tzset_unlocked_r+0x3dc>
 8007a96:	ab0a      	add	r3, sp, #40	; 0x28
 8007a98:	aa08      	add	r2, sp, #32
 8007a9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007a9e:	f10d 021e 	add.w	r2, sp, #30
 8007aa2:	9200      	str	r2, [sp, #0]
 8007aa4:	491b      	ldr	r1, [pc, #108]	; (8007b14 <_tzset_unlocked_r+0x330>)
 8007aa6:	9303      	str	r3, [sp, #12]
 8007aa8:	aa07      	add	r2, sp, #28
 8007aaa:	4648      	mov	r0, r9
 8007aac:	f000 fed6 	bl	800885c <siscanf>
 8007ab0:	42a8      	cmp	r0, r5
 8007ab2:	f300 8085 	bgt.w	8007bc0 <_tzset_unlocked_r+0x3dc>
 8007ab6:	214a      	movs	r1, #74	; 0x4a
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2300      	movs	r3, #0
 8007abc:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8007ac0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ac4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007acc:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8007ad0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ad4:	7221      	strb	r1, [r4, #8]
 8007ad6:	62a5      	str	r5, [r4, #40]	; 0x28
 8007ad8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8007adc:	6525      	str	r5, [r4, #80]	; 0x50
 8007ade:	e6af      	b.n	8007840 <_tzset_unlocked_r+0x5c>
 8007ae0:	08009f6c 	.word	0x08009f6c
 8007ae4:	2000cae4 	.word	0x2000cae4
 8007ae8:	2000caec 	.word	0x2000caec
 8007aec:	08009f6f 	.word	0x08009f6f
 8007af0:	2000cae8 	.word	0x2000cae8
 8007af4:	2000001c 	.word	0x2000001c
 8007af8:	08009ff5 	.word	0x08009ff5
 8007afc:	2000cad8 	.word	0x2000cad8
 8007b00:	08009f73 	.word	0x08009f73
 8007b04:	08009fa8 	.word	0x08009fa8
 8007b08:	2000cacc 	.word	0x2000cacc
 8007b0c:	08009f86 	.word	0x08009f86
 8007b10:	08009f94 	.word	0x08009f94
 8007b14:	08009fa7 	.word	0x08009fa7
 8007b18:	4a3e      	ldr	r2, [pc, #248]	; (8007c14 <_tzset_unlocked_r+0x430>)
 8007b1a:	493f      	ldr	r1, [pc, #252]	; (8007c18 <_tzset_unlocked_r+0x434>)
 8007b1c:	ab0a      	add	r3, sp, #40	; 0x28
 8007b1e:	4648      	mov	r0, r9
 8007b20:	f000 fe9c 	bl	800885c <siscanf>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f77f af19 	ble.w	800795c <_tzset_unlocked_r+0x178>
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2c:	3b03      	subs	r3, #3
 8007b2e:	2b07      	cmp	r3, #7
 8007b30:	f67f af44 	bls.w	80079bc <_tzset_unlocked_r+0x1d8>
 8007b34:	e684      	b.n	8007840 <_tzset_unlocked_r+0x5c>
 8007b36:	2b2b      	cmp	r3, #43	; 0x2b
 8007b38:	bf08      	it	eq
 8007b3a:	3501      	addeq	r5, #1
 8007b3c:	f04f 0901 	mov.w	r9, #1
 8007b40:	e747      	b.n	80079d2 <_tzset_unlocked_r+0x1ee>
 8007b42:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007b46:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007b4a:	213c      	movs	r1, #60	; 0x3c
 8007b4c:	fb01 3302 	mla	r3, r1, r2, r3
 8007b50:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007b54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007b58:	fb01 3302 	mla	r3, r1, r2, r3
 8007b5c:	fb09 f303 	mul.w	r3, r9, r3
 8007b60:	e751      	b.n	8007a06 <_tzset_unlocked_r+0x222>
 8007b62:	f04f 0b01 	mov.w	fp, #1
 8007b66:	e754      	b.n	8007a12 <_tzset_unlocked_r+0x22e>
 8007b68:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8007b6c:	bf06      	itte	eq
 8007b6e:	3501      	addeq	r5, #1
 8007b70:	464b      	moveq	r3, r9
 8007b72:	2344      	movne	r3, #68	; 0x44
 8007b74:	220a      	movs	r2, #10
 8007b76:	a90b      	add	r1, sp, #44	; 0x2c
 8007b78:	4628      	mov	r0, r5
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	f000 fabc 	bl	80080f8 <strtoul>
 8007b80:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007b84:	9b05      	ldr	r3, [sp, #20]
 8007b86:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007b8a:	45a9      	cmp	r9, r5
 8007b8c:	d114      	bne.n	8007bb8 <_tzset_unlocked_r+0x3d4>
 8007b8e:	234d      	movs	r3, #77	; 0x4d
 8007b90:	f1bb 0f00 	cmp.w	fp, #0
 8007b94:	d107      	bne.n	8007ba6 <_tzset_unlocked_r+0x3c2>
 8007b96:	7223      	strb	r3, [r4, #8]
 8007b98:	2103      	movs	r1, #3
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8007ba0:	f8c4 b014 	str.w	fp, [r4, #20]
 8007ba4:	e769      	b.n	8007a7a <_tzset_unlocked_r+0x296>
 8007ba6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007baa:	220b      	movs	r2, #11
 8007bac:	2301      	movs	r3, #1
 8007bae:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007bb6:	e760      	b.n	8007a7a <_tzset_unlocked_r+0x296>
 8007bb8:	b280      	uxth	r0, r0
 8007bba:	723b      	strb	r3, [r7, #8]
 8007bbc:	6178      	str	r0, [r7, #20]
 8007bbe:	e75c      	b.n	8007a7a <_tzset_unlocked_r+0x296>
 8007bc0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007bc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007bc8:	213c      	movs	r1, #60	; 0x3c
 8007bca:	fb01 3302 	mla	r3, r1, r2, r3
 8007bce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007bd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007bd6:	fb01 3302 	mla	r3, r1, r2, r3
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007bde:	3728      	adds	r7, #40	; 0x28
 8007be0:	444d      	add	r5, r9
 8007be2:	f1bb 0f00 	cmp.w	fp, #0
 8007be6:	d0bc      	beq.n	8007b62 <_tzset_unlocked_r+0x37e>
 8007be8:	9b04      	ldr	r3, [sp, #16]
 8007bea:	6523      	str	r3, [r4, #80]	; 0x50
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <_tzset_unlocked_r+0x438>)
 8007bee:	f8c8 3000 	str.w	r3, [r8]
 8007bf2:	6860      	ldr	r0, [r4, #4]
 8007bf4:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <_tzset_unlocked_r+0x430>)
 8007bf6:	62a6      	str	r6, [r4, #40]	; 0x28
 8007bf8:	f8c8 3004 	str.w	r3, [r8, #4]
 8007bfc:	f7ff fd3a 	bl	8007674 <__tzcalc_limits>
 8007c00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007c02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007c04:	f8ca 2000 	str.w	r2, [sl]
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	4a05      	ldr	r2, [pc, #20]	; (8007c20 <_tzset_unlocked_r+0x43c>)
 8007c0c:	bf18      	it	ne
 8007c0e:	2301      	movne	r3, #1
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e615      	b.n	8007840 <_tzset_unlocked_r+0x5c>
 8007c14:	2000cacc 	.word	0x2000cacc
 8007c18:	08009f86 	.word	0x08009f86
 8007c1c:	2000cad8 	.word	0x2000cad8
 8007c20:	2000cae8 	.word	0x2000cae8

08007c24 <_close_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d06      	ldr	r5, [pc, #24]	; (8007c40 <_close_r+0x1c>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	f7fc ff38 	bl	8004aa4 <_close>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_close_r+0x1a>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_close_r+0x1a>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	2000caf0 	.word	0x2000caf0

08007c44 <_lseek_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	; (8007c64 <_lseek_r+0x20>)
 8007c48:	4604      	mov	r4, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f7fc ff4d 	bl	8004af2 <_lseek>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_lseek_r+0x1e>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_lseek_r+0x1e>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	2000caf0 	.word	0x2000caf0

08007c68 <_read_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d07      	ldr	r5, [pc, #28]	; (8007c88 <_read_r+0x20>)
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4608      	mov	r0, r1
 8007c70:	4611      	mov	r1, r2
 8007c72:	2200      	movs	r2, #0
 8007c74:	602a      	str	r2, [r5, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	f7fc fedb 	bl	8004a32 <_read>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_read_r+0x1e>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_read_r+0x1e>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	2000caf0 	.word	0x2000caf0

08007c8c <_write_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d07      	ldr	r5, [pc, #28]	; (8007cac <_write_r+0x20>)
 8007c90:	4604      	mov	r4, r0
 8007c92:	4608      	mov	r0, r1
 8007c94:	4611      	mov	r1, r2
 8007c96:	2200      	movs	r2, #0
 8007c98:	602a      	str	r2, [r5, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f7fc fee6 	bl	8004a6c <_write>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_write_r+0x1e>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_write_r+0x1e>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	2000caf0 	.word	0x2000caf0

08007cb0 <__errno>:
 8007cb0:	4b01      	ldr	r3, [pc, #4]	; (8007cb8 <__errno+0x8>)
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000070 	.word	0x20000070

08007cbc <__libc_init_array>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	4d0d      	ldr	r5, [pc, #52]	; (8007cf4 <__libc_init_array+0x38>)
 8007cc0:	4c0d      	ldr	r4, [pc, #52]	; (8007cf8 <__libc_init_array+0x3c>)
 8007cc2:	1b64      	subs	r4, r4, r5
 8007cc4:	10a4      	asrs	r4, r4, #2
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	42a6      	cmp	r6, r4
 8007cca:	d109      	bne.n	8007ce0 <__libc_init_array+0x24>
 8007ccc:	4d0b      	ldr	r5, [pc, #44]	; (8007cfc <__libc_init_array+0x40>)
 8007cce:	4c0c      	ldr	r4, [pc, #48]	; (8007d00 <__libc_init_array+0x44>)
 8007cd0:	f001 fdda 	bl	8009888 <_init>
 8007cd4:	1b64      	subs	r4, r4, r5
 8007cd6:	10a4      	asrs	r4, r4, #2
 8007cd8:	2600      	movs	r6, #0
 8007cda:	42a6      	cmp	r6, r4
 8007cdc:	d105      	bne.n	8007cea <__libc_init_array+0x2e>
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce4:	4798      	blx	r3
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7ee      	b.n	8007cc8 <__libc_init_array+0xc>
 8007cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cee:	4798      	blx	r3
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	e7f2      	b.n	8007cda <__libc_init_array+0x1e>
 8007cf4:	0800a150 	.word	0x0800a150
 8007cf8:	0800a150 	.word	0x0800a150
 8007cfc:	0800a150 	.word	0x0800a150
 8007d00:	0800a154 	.word	0x0800a154

08007d04 <__retarget_lock_init_recursive>:
 8007d04:	4770      	bx	lr

08007d06 <__retarget_lock_acquire>:
 8007d06:	4770      	bx	lr

08007d08 <__retarget_lock_acquire_recursive>:
 8007d08:	4770      	bx	lr

08007d0a <__retarget_lock_release>:
 8007d0a:	4770      	bx	lr

08007d0c <__retarget_lock_release_recursive>:
 8007d0c:	4770      	bx	lr

08007d0e <strcpy>:
 8007d0e:	4603      	mov	r3, r0
 8007d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d14:	f803 2b01 	strb.w	r2, [r3], #1
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	d1f9      	bne.n	8007d10 <strcpy+0x2>
 8007d1c:	4770      	bx	lr

08007d1e <memcpy>:
 8007d1e:	440a      	add	r2, r1
 8007d20:	4291      	cmp	r1, r2
 8007d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d26:	d100      	bne.n	8007d2a <memcpy+0xc>
 8007d28:	4770      	bx	lr
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d34:	4291      	cmp	r1, r2
 8007d36:	d1f9      	bne.n	8007d2c <memcpy+0xe>
 8007d38:	bd10      	pop	{r4, pc}
	...

08007d3c <__assert_func>:
 8007d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d3e:	4614      	mov	r4, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <__assert_func+0x2c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4605      	mov	r5, r0
 8007d48:	68d8      	ldr	r0, [r3, #12]
 8007d4a:	b14c      	cbz	r4, 8007d60 <__assert_func+0x24>
 8007d4c:	4b07      	ldr	r3, [pc, #28]	; (8007d6c <__assert_func+0x30>)
 8007d4e:	9100      	str	r1, [sp, #0]
 8007d50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d54:	4906      	ldr	r1, [pc, #24]	; (8007d70 <__assert_func+0x34>)
 8007d56:	462b      	mov	r3, r5
 8007d58:	f000 fd6e 	bl	8008838 <fiprintf>
 8007d5c:	f000 fe90 	bl	8008a80 <abort>
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <__assert_func+0x38>)
 8007d62:	461c      	mov	r4, r3
 8007d64:	e7f3      	b.n	8007d4e <__assert_func+0x12>
 8007d66:	bf00      	nop
 8007d68:	20000070 	.word	0x20000070
 8007d6c:	08009fba 	.word	0x08009fba
 8007d70:	08009fc7 	.word	0x08009fc7
 8007d74:	08009ff5 	.word	0x08009ff5

08007d78 <_free_r>:
 8007d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d7a:	2900      	cmp	r1, #0
 8007d7c:	d044      	beq.n	8007e08 <_free_r+0x90>
 8007d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d82:	9001      	str	r0, [sp, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f1a1 0404 	sub.w	r4, r1, #4
 8007d8a:	bfb8      	it	lt
 8007d8c:	18e4      	addlt	r4, r4, r3
 8007d8e:	f000 f933 	bl	8007ff8 <__malloc_lock>
 8007d92:	4a1e      	ldr	r2, [pc, #120]	; (8007e0c <_free_r+0x94>)
 8007d94:	9801      	ldr	r0, [sp, #4]
 8007d96:	6813      	ldr	r3, [r2, #0]
 8007d98:	b933      	cbnz	r3, 8007da8 <_free_r+0x30>
 8007d9a:	6063      	str	r3, [r4, #4]
 8007d9c:	6014      	str	r4, [r2, #0]
 8007d9e:	b003      	add	sp, #12
 8007da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da4:	f000 b92e 	b.w	8008004 <__malloc_unlock>
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	d908      	bls.n	8007dbe <_free_r+0x46>
 8007dac:	6825      	ldr	r5, [r4, #0]
 8007dae:	1961      	adds	r1, r4, r5
 8007db0:	428b      	cmp	r3, r1
 8007db2:	bf01      	itttt	eq
 8007db4:	6819      	ldreq	r1, [r3, #0]
 8007db6:	685b      	ldreq	r3, [r3, #4]
 8007db8:	1949      	addeq	r1, r1, r5
 8007dba:	6021      	streq	r1, [r4, #0]
 8007dbc:	e7ed      	b.n	8007d9a <_free_r+0x22>
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b10b      	cbz	r3, 8007dc8 <_free_r+0x50>
 8007dc4:	42a3      	cmp	r3, r4
 8007dc6:	d9fa      	bls.n	8007dbe <_free_r+0x46>
 8007dc8:	6811      	ldr	r1, [r2, #0]
 8007dca:	1855      	adds	r5, r2, r1
 8007dcc:	42a5      	cmp	r5, r4
 8007dce:	d10b      	bne.n	8007de8 <_free_r+0x70>
 8007dd0:	6824      	ldr	r4, [r4, #0]
 8007dd2:	4421      	add	r1, r4
 8007dd4:	1854      	adds	r4, r2, r1
 8007dd6:	42a3      	cmp	r3, r4
 8007dd8:	6011      	str	r1, [r2, #0]
 8007dda:	d1e0      	bne.n	8007d9e <_free_r+0x26>
 8007ddc:	681c      	ldr	r4, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	6053      	str	r3, [r2, #4]
 8007de2:	440c      	add	r4, r1
 8007de4:	6014      	str	r4, [r2, #0]
 8007de6:	e7da      	b.n	8007d9e <_free_r+0x26>
 8007de8:	d902      	bls.n	8007df0 <_free_r+0x78>
 8007dea:	230c      	movs	r3, #12
 8007dec:	6003      	str	r3, [r0, #0]
 8007dee:	e7d6      	b.n	8007d9e <_free_r+0x26>
 8007df0:	6825      	ldr	r5, [r4, #0]
 8007df2:	1961      	adds	r1, r4, r5
 8007df4:	428b      	cmp	r3, r1
 8007df6:	bf04      	itt	eq
 8007df8:	6819      	ldreq	r1, [r3, #0]
 8007dfa:	685b      	ldreq	r3, [r3, #4]
 8007dfc:	6063      	str	r3, [r4, #4]
 8007dfe:	bf04      	itt	eq
 8007e00:	1949      	addeq	r1, r1, r5
 8007e02:	6021      	streq	r1, [r4, #0]
 8007e04:	6054      	str	r4, [r2, #4]
 8007e06:	e7ca      	b.n	8007d9e <_free_r+0x26>
 8007e08:	b003      	add	sp, #12
 8007e0a:	bd30      	pop	{r4, r5, pc}
 8007e0c:	2000caf8 	.word	0x2000caf8

08007e10 <_findenv_r>:
 8007e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8007e84 <_findenv_r+0x74>
 8007e18:	4607      	mov	r7, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	f000 fe37 	bl	8008a90 <__env_lock>
 8007e22:	f8da 4000 	ldr.w	r4, [sl]
 8007e26:	b134      	cbz	r4, 8007e36 <_findenv_r+0x26>
 8007e28:	464b      	mov	r3, r9
 8007e2a:	4698      	mov	r8, r3
 8007e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e30:	b13a      	cbz	r2, 8007e42 <_findenv_r+0x32>
 8007e32:	2a3d      	cmp	r2, #61	; 0x3d
 8007e34:	d1f9      	bne.n	8007e2a <_findenv_r+0x1a>
 8007e36:	4638      	mov	r0, r7
 8007e38:	f000 fe30 	bl	8008a9c <__env_unlock>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	eba8 0809 	sub.w	r8, r8, r9
 8007e46:	46a3      	mov	fp, r4
 8007e48:	f854 0b04 	ldr.w	r0, [r4], #4
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d0f2      	beq.n	8007e36 <_findenv_r+0x26>
 8007e50:	4642      	mov	r2, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	f000 fd48 	bl	80088e8 <strncmp>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d1f4      	bne.n	8007e46 <_findenv_r+0x36>
 8007e5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e60:	eb03 0508 	add.w	r5, r3, r8
 8007e64:	f813 3008 	ldrb.w	r3, [r3, r8]
 8007e68:	2b3d      	cmp	r3, #61	; 0x3d
 8007e6a:	d1ec      	bne.n	8007e46 <_findenv_r+0x36>
 8007e6c:	f8da 3000 	ldr.w	r3, [sl]
 8007e70:	ebab 0303 	sub.w	r3, fp, r3
 8007e74:	109b      	asrs	r3, r3, #2
 8007e76:	4638      	mov	r0, r7
 8007e78:	6033      	str	r3, [r6, #0]
 8007e7a:	f000 fe0f 	bl	8008a9c <__env_unlock>
 8007e7e:	1c68      	adds	r0, r5, #1
 8007e80:	e7dd      	b.n	8007e3e <_findenv_r+0x2e>
 8007e82:	bf00      	nop
 8007e84:	20000000 	.word	0x20000000

08007e88 <_getenv_r>:
 8007e88:	b507      	push	{r0, r1, r2, lr}
 8007e8a:	aa01      	add	r2, sp, #4
 8007e8c:	f7ff ffc0 	bl	8007e10 <_findenv_r>
 8007e90:	b003      	add	sp, #12
 8007e92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007e98 <malloc>:
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <malloc+0xc>)
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f000 b82b 	b.w	8007ef8 <_malloc_r>
 8007ea2:	bf00      	nop
 8007ea4:	20000070 	.word	0x20000070

08007ea8 <free>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <free+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f7ff bf63 	b.w	8007d78 <_free_r>
 8007eb2:	bf00      	nop
 8007eb4:	20000070 	.word	0x20000070

08007eb8 <sbrk_aligned>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0e      	ldr	r6, [pc, #56]	; (8007ef4 <sbrk_aligned+0x3c>)
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	6831      	ldr	r1, [r6, #0]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b911      	cbnz	r1, 8007eca <sbrk_aligned+0x12>
 8007ec4:	f000 fdcc 	bl	8008a60 <_sbrk_r>
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 fdc7 	bl	8008a60 <_sbrk_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d00a      	beq.n	8007eec <sbrk_aligned+0x34>
 8007ed6:	1cc4      	adds	r4, r0, #3
 8007ed8:	f024 0403 	bic.w	r4, r4, #3
 8007edc:	42a0      	cmp	r0, r4
 8007ede:	d007      	beq.n	8007ef0 <sbrk_aligned+0x38>
 8007ee0:	1a21      	subs	r1, r4, r0
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 fdbc 	bl	8008a60 <_sbrk_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d101      	bne.n	8007ef0 <sbrk_aligned+0x38>
 8007eec:	f04f 34ff 	mov.w	r4, #4294967295
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	2000cafc 	.word	0x2000cafc

08007ef8 <_malloc_r>:
 8007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efc:	1ccd      	adds	r5, r1, #3
 8007efe:	f025 0503 	bic.w	r5, r5, #3
 8007f02:	3508      	adds	r5, #8
 8007f04:	2d0c      	cmp	r5, #12
 8007f06:	bf38      	it	cc
 8007f08:	250c      	movcc	r5, #12
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	db01      	blt.n	8007f14 <_malloc_r+0x1c>
 8007f10:	42a9      	cmp	r1, r5
 8007f12:	d905      	bls.n	8007f20 <_malloc_r+0x28>
 8007f14:	230c      	movs	r3, #12
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	2600      	movs	r6, #0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ff4 <_malloc_r+0xfc>
 8007f24:	f000 f868 	bl	8007ff8 <__malloc_lock>
 8007f28:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2c:	461c      	mov	r4, r3
 8007f2e:	bb5c      	cbnz	r4, 8007f88 <_malloc_r+0x90>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4638      	mov	r0, r7
 8007f34:	f7ff ffc0 	bl	8007eb8 <sbrk_aligned>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	d155      	bne.n	8007fea <_malloc_r+0xf2>
 8007f3e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f42:	4626      	mov	r6, r4
 8007f44:	2e00      	cmp	r6, #0
 8007f46:	d145      	bne.n	8007fd4 <_malloc_r+0xdc>
 8007f48:	2c00      	cmp	r4, #0
 8007f4a:	d048      	beq.n	8007fde <_malloc_r+0xe6>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4638      	mov	r0, r7
 8007f52:	eb04 0903 	add.w	r9, r4, r3
 8007f56:	f000 fd83 	bl	8008a60 <_sbrk_r>
 8007f5a:	4581      	cmp	r9, r0
 8007f5c:	d13f      	bne.n	8007fde <_malloc_r+0xe6>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	1a6d      	subs	r5, r5, r1
 8007f62:	4629      	mov	r1, r5
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ffa7 	bl	8007eb8 <sbrk_aligned>
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d037      	beq.n	8007fde <_malloc_r+0xe6>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	442b      	add	r3, r5
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	f8d8 3000 	ldr.w	r3, [r8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d038      	beq.n	8007fee <_malloc_r+0xf6>
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	42a2      	cmp	r2, r4
 8007f80:	d12b      	bne.n	8007fda <_malloc_r+0xe2>
 8007f82:	2200      	movs	r2, #0
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	e00f      	b.n	8007fa8 <_malloc_r+0xb0>
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	1b52      	subs	r2, r2, r5
 8007f8c:	d41f      	bmi.n	8007fce <_malloc_r+0xd6>
 8007f8e:	2a0b      	cmp	r2, #11
 8007f90:	d917      	bls.n	8007fc2 <_malloc_r+0xca>
 8007f92:	1961      	adds	r1, r4, r5
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	6025      	str	r5, [r4, #0]
 8007f98:	bf18      	it	ne
 8007f9a:	6059      	strne	r1, [r3, #4]
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	bf08      	it	eq
 8007fa0:	f8c8 1000 	streq.w	r1, [r8]
 8007fa4:	5162      	str	r2, [r4, r5]
 8007fa6:	604b      	str	r3, [r1, #4]
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f104 060b 	add.w	r6, r4, #11
 8007fae:	f000 f829 	bl	8008004 <__malloc_unlock>
 8007fb2:	f026 0607 	bic.w	r6, r6, #7
 8007fb6:	1d23      	adds	r3, r4, #4
 8007fb8:	1af2      	subs	r2, r6, r3
 8007fba:	d0ae      	beq.n	8007f1a <_malloc_r+0x22>
 8007fbc:	1b9b      	subs	r3, r3, r6
 8007fbe:	50a3      	str	r3, [r4, r2]
 8007fc0:	e7ab      	b.n	8007f1a <_malloc_r+0x22>
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	6862      	ldr	r2, [r4, #4]
 8007fc6:	d1dd      	bne.n	8007f84 <_malloc_r+0x8c>
 8007fc8:	f8c8 2000 	str.w	r2, [r8]
 8007fcc:	e7ec      	b.n	8007fa8 <_malloc_r+0xb0>
 8007fce:	4623      	mov	r3, r4
 8007fd0:	6864      	ldr	r4, [r4, #4]
 8007fd2:	e7ac      	b.n	8007f2e <_malloc_r+0x36>
 8007fd4:	4634      	mov	r4, r6
 8007fd6:	6876      	ldr	r6, [r6, #4]
 8007fd8:	e7b4      	b.n	8007f44 <_malloc_r+0x4c>
 8007fda:	4613      	mov	r3, r2
 8007fdc:	e7cc      	b.n	8007f78 <_malloc_r+0x80>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f000 f80e 	bl	8008004 <__malloc_unlock>
 8007fe8:	e797      	b.n	8007f1a <_malloc_r+0x22>
 8007fea:	6025      	str	r5, [r4, #0]
 8007fec:	e7dc      	b.n	8007fa8 <_malloc_r+0xb0>
 8007fee:	605b      	str	r3, [r3, #4]
 8007ff0:	deff      	udf	#255	; 0xff
 8007ff2:	bf00      	nop
 8007ff4:	2000caf8 	.word	0x2000caf8

08007ff8 <__malloc_lock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__malloc_lock+0x8>)
 8007ffa:	f7ff be85 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	2000caf5 	.word	0x2000caf5

08008004 <__malloc_unlock>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__malloc_unlock+0x8>)
 8008006:	f7ff be81 	b.w	8007d0c <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	2000caf5 	.word	0x2000caf5

08008010 <_strtoul_l.constprop.0>:
 8008010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008014:	4f36      	ldr	r7, [pc, #216]	; (80080f0 <_strtoul_l.constprop.0+0xe0>)
 8008016:	4686      	mov	lr, r0
 8008018:	460d      	mov	r5, r1
 800801a:	4628      	mov	r0, r5
 800801c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008020:	5d3e      	ldrb	r6, [r7, r4]
 8008022:	f016 0608 	ands.w	r6, r6, #8
 8008026:	d1f8      	bne.n	800801a <_strtoul_l.constprop.0+0xa>
 8008028:	2c2d      	cmp	r4, #45	; 0x2d
 800802a:	d130      	bne.n	800808e <_strtoul_l.constprop.0+0x7e>
 800802c:	782c      	ldrb	r4, [r5, #0]
 800802e:	2601      	movs	r6, #1
 8008030:	1c85      	adds	r5, r0, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d057      	beq.n	80080e6 <_strtoul_l.constprop.0+0xd6>
 8008036:	2b10      	cmp	r3, #16
 8008038:	d109      	bne.n	800804e <_strtoul_l.constprop.0+0x3e>
 800803a:	2c30      	cmp	r4, #48	; 0x30
 800803c:	d107      	bne.n	800804e <_strtoul_l.constprop.0+0x3e>
 800803e:	7828      	ldrb	r0, [r5, #0]
 8008040:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008044:	2858      	cmp	r0, #88	; 0x58
 8008046:	d149      	bne.n	80080dc <_strtoul_l.constprop.0+0xcc>
 8008048:	786c      	ldrb	r4, [r5, #1]
 800804a:	2310      	movs	r3, #16
 800804c:	3502      	adds	r5, #2
 800804e:	f04f 38ff 	mov.w	r8, #4294967295
 8008052:	2700      	movs	r7, #0
 8008054:	fbb8 f8f3 	udiv	r8, r8, r3
 8008058:	fb03 f908 	mul.w	r9, r3, r8
 800805c:	ea6f 0909 	mvn.w	r9, r9
 8008060:	4638      	mov	r0, r7
 8008062:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008066:	f1bc 0f09 	cmp.w	ip, #9
 800806a:	d815      	bhi.n	8008098 <_strtoul_l.constprop.0+0x88>
 800806c:	4664      	mov	r4, ip
 800806e:	42a3      	cmp	r3, r4
 8008070:	dd23      	ble.n	80080ba <_strtoul_l.constprop.0+0xaa>
 8008072:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008076:	d007      	beq.n	8008088 <_strtoul_l.constprop.0+0x78>
 8008078:	4580      	cmp	r8, r0
 800807a:	d31b      	bcc.n	80080b4 <_strtoul_l.constprop.0+0xa4>
 800807c:	d101      	bne.n	8008082 <_strtoul_l.constprop.0+0x72>
 800807e:	45a1      	cmp	r9, r4
 8008080:	db18      	blt.n	80080b4 <_strtoul_l.constprop.0+0xa4>
 8008082:	fb00 4003 	mla	r0, r0, r3, r4
 8008086:	2701      	movs	r7, #1
 8008088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800808c:	e7e9      	b.n	8008062 <_strtoul_l.constprop.0+0x52>
 800808e:	2c2b      	cmp	r4, #43	; 0x2b
 8008090:	bf04      	itt	eq
 8008092:	782c      	ldrbeq	r4, [r5, #0]
 8008094:	1c85      	addeq	r5, r0, #2
 8008096:	e7cc      	b.n	8008032 <_strtoul_l.constprop.0+0x22>
 8008098:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800809c:	f1bc 0f19 	cmp.w	ip, #25
 80080a0:	d801      	bhi.n	80080a6 <_strtoul_l.constprop.0+0x96>
 80080a2:	3c37      	subs	r4, #55	; 0x37
 80080a4:	e7e3      	b.n	800806e <_strtoul_l.constprop.0+0x5e>
 80080a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080aa:	f1bc 0f19 	cmp.w	ip, #25
 80080ae:	d804      	bhi.n	80080ba <_strtoul_l.constprop.0+0xaa>
 80080b0:	3c57      	subs	r4, #87	; 0x57
 80080b2:	e7dc      	b.n	800806e <_strtoul_l.constprop.0+0x5e>
 80080b4:	f04f 37ff 	mov.w	r7, #4294967295
 80080b8:	e7e6      	b.n	8008088 <_strtoul_l.constprop.0+0x78>
 80080ba:	1c7b      	adds	r3, r7, #1
 80080bc:	d106      	bne.n	80080cc <_strtoul_l.constprop.0+0xbc>
 80080be:	2322      	movs	r3, #34	; 0x22
 80080c0:	f8ce 3000 	str.w	r3, [lr]
 80080c4:	4638      	mov	r0, r7
 80080c6:	b932      	cbnz	r2, 80080d6 <_strtoul_l.constprop.0+0xc6>
 80080c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080cc:	b106      	cbz	r6, 80080d0 <_strtoul_l.constprop.0+0xc0>
 80080ce:	4240      	negs	r0, r0
 80080d0:	2a00      	cmp	r2, #0
 80080d2:	d0f9      	beq.n	80080c8 <_strtoul_l.constprop.0+0xb8>
 80080d4:	b107      	cbz	r7, 80080d8 <_strtoul_l.constprop.0+0xc8>
 80080d6:	1e69      	subs	r1, r5, #1
 80080d8:	6011      	str	r1, [r2, #0]
 80080da:	e7f5      	b.n	80080c8 <_strtoul_l.constprop.0+0xb8>
 80080dc:	2430      	movs	r4, #48	; 0x30
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1b5      	bne.n	800804e <_strtoul_l.constprop.0+0x3e>
 80080e2:	2308      	movs	r3, #8
 80080e4:	e7b3      	b.n	800804e <_strtoul_l.constprop.0+0x3e>
 80080e6:	2c30      	cmp	r4, #48	; 0x30
 80080e8:	d0a9      	beq.n	800803e <_strtoul_l.constprop.0+0x2e>
 80080ea:	230a      	movs	r3, #10
 80080ec:	e7af      	b.n	800804e <_strtoul_l.constprop.0+0x3e>
 80080ee:	bf00      	nop
 80080f0:	08009ff7 	.word	0x08009ff7

080080f4 <_strtoul_r>:
 80080f4:	f7ff bf8c 	b.w	8008010 <_strtoul_l.constprop.0>

080080f8 <strtoul>:
 80080f8:	4613      	mov	r3, r2
 80080fa:	460a      	mov	r2, r1
 80080fc:	4601      	mov	r1, r0
 80080fe:	4802      	ldr	r0, [pc, #8]	; (8008108 <strtoul+0x10>)
 8008100:	6800      	ldr	r0, [r0, #0]
 8008102:	f7ff bf85 	b.w	8008010 <_strtoul_l.constprop.0>
 8008106:	bf00      	nop
 8008108:	20000070 	.word	0x20000070

0800810c <__ssputs_r>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	688e      	ldr	r6, [r1, #8]
 8008112:	461f      	mov	r7, r3
 8008114:	42be      	cmp	r6, r7
 8008116:	680b      	ldr	r3, [r1, #0]
 8008118:	4682      	mov	sl, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4690      	mov	r8, r2
 800811e:	d82c      	bhi.n	800817a <__ssputs_r+0x6e>
 8008120:	898a      	ldrh	r2, [r1, #12]
 8008122:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008126:	d026      	beq.n	8008176 <__ssputs_r+0x6a>
 8008128:	6965      	ldr	r5, [r4, #20]
 800812a:	6909      	ldr	r1, [r1, #16]
 800812c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008130:	eba3 0901 	sub.w	r9, r3, r1
 8008134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008138:	1c7b      	adds	r3, r7, #1
 800813a:	444b      	add	r3, r9
 800813c:	106d      	asrs	r5, r5, #1
 800813e:	429d      	cmp	r5, r3
 8008140:	bf38      	it	cc
 8008142:	461d      	movcc	r5, r3
 8008144:	0553      	lsls	r3, r2, #21
 8008146:	d527      	bpl.n	8008198 <__ssputs_r+0x8c>
 8008148:	4629      	mov	r1, r5
 800814a:	f7ff fed5 	bl	8007ef8 <_malloc_r>
 800814e:	4606      	mov	r6, r0
 8008150:	b360      	cbz	r0, 80081ac <__ssputs_r+0xa0>
 8008152:	6921      	ldr	r1, [r4, #16]
 8008154:	464a      	mov	r2, r9
 8008156:	f7ff fde2 	bl	8007d1e <memcpy>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	6126      	str	r6, [r4, #16]
 8008168:	6165      	str	r5, [r4, #20]
 800816a:	444e      	add	r6, r9
 800816c:	eba5 0509 	sub.w	r5, r5, r9
 8008170:	6026      	str	r6, [r4, #0]
 8008172:	60a5      	str	r5, [r4, #8]
 8008174:	463e      	mov	r6, r7
 8008176:	42be      	cmp	r6, r7
 8008178:	d900      	bls.n	800817c <__ssputs_r+0x70>
 800817a:	463e      	mov	r6, r7
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	4632      	mov	r2, r6
 8008180:	4641      	mov	r1, r8
 8008182:	f000 fb97 	bl	80088b4 <memmove>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	1b9b      	subs	r3, r3, r6
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	4433      	add	r3, r6
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	2000      	movs	r0, #0
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	462a      	mov	r2, r5
 800819a:	f000 fc85 	bl	8008aa8 <_realloc_r>
 800819e:	4606      	mov	r6, r0
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1e0      	bne.n	8008166 <__ssputs_r+0x5a>
 80081a4:	6921      	ldr	r1, [r4, #16]
 80081a6:	4650      	mov	r0, sl
 80081a8:	f7ff fde6 	bl	8007d78 <_free_r>
 80081ac:	230c      	movs	r3, #12
 80081ae:	f8ca 3000 	str.w	r3, [sl]
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	e7e9      	b.n	8008194 <__ssputs_r+0x88>

080081c0 <_svfiprintf_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	4698      	mov	r8, r3
 80081c6:	898b      	ldrh	r3, [r1, #12]
 80081c8:	061b      	lsls	r3, r3, #24
 80081ca:	b09d      	sub	sp, #116	; 0x74
 80081cc:	4607      	mov	r7, r0
 80081ce:	460d      	mov	r5, r1
 80081d0:	4614      	mov	r4, r2
 80081d2:	d50e      	bpl.n	80081f2 <_svfiprintf_r+0x32>
 80081d4:	690b      	ldr	r3, [r1, #16]
 80081d6:	b963      	cbnz	r3, 80081f2 <_svfiprintf_r+0x32>
 80081d8:	2140      	movs	r1, #64	; 0x40
 80081da:	f7ff fe8d 	bl	8007ef8 <_malloc_r>
 80081de:	6028      	str	r0, [r5, #0]
 80081e0:	6128      	str	r0, [r5, #16]
 80081e2:	b920      	cbnz	r0, 80081ee <_svfiprintf_r+0x2e>
 80081e4:	230c      	movs	r3, #12
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e0d0      	b.n	8008390 <_svfiprintf_r+0x1d0>
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	616b      	str	r3, [r5, #20]
 80081f2:	2300      	movs	r3, #0
 80081f4:	9309      	str	r3, [sp, #36]	; 0x24
 80081f6:	2320      	movs	r3, #32
 80081f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008200:	2330      	movs	r3, #48	; 0x30
 8008202:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083a8 <_svfiprintf_r+0x1e8>
 8008206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800820a:	f04f 0901 	mov.w	r9, #1
 800820e:	4623      	mov	r3, r4
 8008210:	469a      	mov	sl, r3
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	b10a      	cbz	r2, 800821c <_svfiprintf_r+0x5c>
 8008218:	2a25      	cmp	r2, #37	; 0x25
 800821a:	d1f9      	bne.n	8008210 <_svfiprintf_r+0x50>
 800821c:	ebba 0b04 	subs.w	fp, sl, r4
 8008220:	d00b      	beq.n	800823a <_svfiprintf_r+0x7a>
 8008222:	465b      	mov	r3, fp
 8008224:	4622      	mov	r2, r4
 8008226:	4629      	mov	r1, r5
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ff6f 	bl	800810c <__ssputs_r>
 800822e:	3001      	adds	r0, #1
 8008230:	f000 80a9 	beq.w	8008386 <_svfiprintf_r+0x1c6>
 8008234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008236:	445a      	add	r2, fp
 8008238:	9209      	str	r2, [sp, #36]	; 0x24
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80a1 	beq.w	8008386 <_svfiprintf_r+0x1c6>
 8008244:	2300      	movs	r3, #0
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824e:	f10a 0a01 	add.w	sl, sl, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	9307      	str	r3, [sp, #28]
 8008256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800825a:	931a      	str	r3, [sp, #104]	; 0x68
 800825c:	4654      	mov	r4, sl
 800825e:	2205      	movs	r2, #5
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	4850      	ldr	r0, [pc, #320]	; (80083a8 <_svfiprintf_r+0x1e8>)
 8008266:	f7f7 ffcb 	bl	8000200 <memchr>
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	b9d8      	cbnz	r0, 80082a6 <_svfiprintf_r+0xe6>
 800826e:	06d0      	lsls	r0, r2, #27
 8008270:	bf44      	itt	mi
 8008272:	2320      	movmi	r3, #32
 8008274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008278:	0711      	lsls	r1, r2, #28
 800827a:	bf44      	itt	mi
 800827c:	232b      	movmi	r3, #43	; 0x2b
 800827e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008282:	f89a 3000 	ldrb.w	r3, [sl]
 8008286:	2b2a      	cmp	r3, #42	; 0x2a
 8008288:	d015      	beq.n	80082b6 <_svfiprintf_r+0xf6>
 800828a:	9a07      	ldr	r2, [sp, #28]
 800828c:	4654      	mov	r4, sl
 800828e:	2000      	movs	r0, #0
 8008290:	f04f 0c0a 	mov.w	ip, #10
 8008294:	4621      	mov	r1, r4
 8008296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829a:	3b30      	subs	r3, #48	; 0x30
 800829c:	2b09      	cmp	r3, #9
 800829e:	d94d      	bls.n	800833c <_svfiprintf_r+0x17c>
 80082a0:	b1b0      	cbz	r0, 80082d0 <_svfiprintf_r+0x110>
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	e014      	b.n	80082d0 <_svfiprintf_r+0x110>
 80082a6:	eba0 0308 	sub.w	r3, r0, r8
 80082aa:	fa09 f303 	lsl.w	r3, r9, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	46a2      	mov	sl, r4
 80082b4:	e7d2      	b.n	800825c <_svfiprintf_r+0x9c>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	9103      	str	r1, [sp, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfbb      	ittet	lt
 80082c2:	425b      	neglt	r3, r3
 80082c4:	f042 0202 	orrlt.w	r2, r2, #2
 80082c8:	9307      	strge	r3, [sp, #28]
 80082ca:	9307      	strlt	r3, [sp, #28]
 80082cc:	bfb8      	it	lt
 80082ce:	9204      	strlt	r2, [sp, #16]
 80082d0:	7823      	ldrb	r3, [r4, #0]
 80082d2:	2b2e      	cmp	r3, #46	; 0x2e
 80082d4:	d10c      	bne.n	80082f0 <_svfiprintf_r+0x130>
 80082d6:	7863      	ldrb	r3, [r4, #1]
 80082d8:	2b2a      	cmp	r3, #42	; 0x2a
 80082da:	d134      	bne.n	8008346 <_svfiprintf_r+0x186>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9203      	str	r2, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfb8      	it	lt
 80082e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ec:	3402      	adds	r4, #2
 80082ee:	9305      	str	r3, [sp, #20]
 80082f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083b8 <_svfiprintf_r+0x1f8>
 80082f4:	7821      	ldrb	r1, [r4, #0]
 80082f6:	2203      	movs	r2, #3
 80082f8:	4650      	mov	r0, sl
 80082fa:	f7f7 ff81 	bl	8000200 <memchr>
 80082fe:	b138      	cbz	r0, 8008310 <_svfiprintf_r+0x150>
 8008300:	9b04      	ldr	r3, [sp, #16]
 8008302:	eba0 000a 	sub.w	r0, r0, sl
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	4082      	lsls	r2, r0
 800830a:	4313      	orrs	r3, r2
 800830c:	3401      	adds	r4, #1
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	4825      	ldr	r0, [pc, #148]	; (80083ac <_svfiprintf_r+0x1ec>)
 8008316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800831a:	2206      	movs	r2, #6
 800831c:	f7f7 ff70 	bl	8000200 <memchr>
 8008320:	2800      	cmp	r0, #0
 8008322:	d038      	beq.n	8008396 <_svfiprintf_r+0x1d6>
 8008324:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <_svfiprintf_r+0x1f0>)
 8008326:	bb1b      	cbnz	r3, 8008370 <_svfiprintf_r+0x1b0>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	3307      	adds	r3, #7
 800832c:	f023 0307 	bic.w	r3, r3, #7
 8008330:	3308      	adds	r3, #8
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	4433      	add	r3, r6
 8008338:	9309      	str	r3, [sp, #36]	; 0x24
 800833a:	e768      	b.n	800820e <_svfiprintf_r+0x4e>
 800833c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008340:	460c      	mov	r4, r1
 8008342:	2001      	movs	r0, #1
 8008344:	e7a6      	b.n	8008294 <_svfiprintf_r+0xd4>
 8008346:	2300      	movs	r3, #0
 8008348:	3401      	adds	r4, #1
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	4619      	mov	r1, r3
 800834e:	f04f 0c0a 	mov.w	ip, #10
 8008352:	4620      	mov	r0, r4
 8008354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008358:	3a30      	subs	r2, #48	; 0x30
 800835a:	2a09      	cmp	r2, #9
 800835c:	d903      	bls.n	8008366 <_svfiprintf_r+0x1a6>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0c6      	beq.n	80082f0 <_svfiprintf_r+0x130>
 8008362:	9105      	str	r1, [sp, #20]
 8008364:	e7c4      	b.n	80082f0 <_svfiprintf_r+0x130>
 8008366:	fb0c 2101 	mla	r1, ip, r1, r2
 800836a:	4604      	mov	r4, r0
 800836c:	2301      	movs	r3, #1
 800836e:	e7f0      	b.n	8008352 <_svfiprintf_r+0x192>
 8008370:	ab03      	add	r3, sp, #12
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	462a      	mov	r2, r5
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <_svfiprintf_r+0x1f4>)
 8008378:	a904      	add	r1, sp, #16
 800837a:	4638      	mov	r0, r7
 800837c:	f3af 8000 	nop.w
 8008380:	1c42      	adds	r2, r0, #1
 8008382:	4606      	mov	r6, r0
 8008384:	d1d6      	bne.n	8008334 <_svfiprintf_r+0x174>
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	065b      	lsls	r3, r3, #25
 800838a:	f53f af2d 	bmi.w	80081e8 <_svfiprintf_r+0x28>
 800838e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008390:	b01d      	add	sp, #116	; 0x74
 8008392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008396:	ab03      	add	r3, sp, #12
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	462a      	mov	r2, r5
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <_svfiprintf_r+0x1f4>)
 800839e:	a904      	add	r1, sp, #16
 80083a0:	4638      	mov	r0, r7
 80083a2:	f000 f879 	bl	8008498 <_printf_i>
 80083a6:	e7eb      	b.n	8008380 <_svfiprintf_r+0x1c0>
 80083a8:	0800a0f7 	.word	0x0800a0f7
 80083ac:	0800a101 	.word	0x0800a101
 80083b0:	00000000 	.word	0x00000000
 80083b4:	0800810d 	.word	0x0800810d
 80083b8:	0800a0fd 	.word	0x0800a0fd

080083bc <_printf_common>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	4616      	mov	r6, r2
 80083c2:	4699      	mov	r9, r3
 80083c4:	688a      	ldr	r2, [r1, #8]
 80083c6:	690b      	ldr	r3, [r1, #16]
 80083c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	bfb8      	it	lt
 80083d0:	4613      	movlt	r3, r2
 80083d2:	6033      	str	r3, [r6, #0]
 80083d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083d8:	4607      	mov	r7, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	b10a      	cbz	r2, 80083e2 <_printf_common+0x26>
 80083de:	3301      	adds	r3, #1
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	0699      	lsls	r1, r3, #26
 80083e6:	bf42      	ittt	mi
 80083e8:	6833      	ldrmi	r3, [r6, #0]
 80083ea:	3302      	addmi	r3, #2
 80083ec:	6033      	strmi	r3, [r6, #0]
 80083ee:	6825      	ldr	r5, [r4, #0]
 80083f0:	f015 0506 	ands.w	r5, r5, #6
 80083f4:	d106      	bne.n	8008404 <_printf_common+0x48>
 80083f6:	f104 0a19 	add.w	sl, r4, #25
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	6832      	ldr	r2, [r6, #0]
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	42ab      	cmp	r3, r5
 8008402:	dc26      	bgt.n	8008452 <_printf_common+0x96>
 8008404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008408:	1e13      	subs	r3, r2, #0
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	bf18      	it	ne
 800840e:	2301      	movne	r3, #1
 8008410:	0692      	lsls	r2, r2, #26
 8008412:	d42b      	bmi.n	800846c <_printf_common+0xb0>
 8008414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008418:	4649      	mov	r1, r9
 800841a:	4638      	mov	r0, r7
 800841c:	47c0      	blx	r8
 800841e:	3001      	adds	r0, #1
 8008420:	d01e      	beq.n	8008460 <_printf_common+0xa4>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	f003 0306 	and.w	r3, r3, #6
 800842a:	2b04      	cmp	r3, #4
 800842c:	bf02      	ittt	eq
 800842e:	68e5      	ldreq	r5, [r4, #12]
 8008430:	6833      	ldreq	r3, [r6, #0]
 8008432:	1aed      	subeq	r5, r5, r3
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	bf0c      	ite	eq
 8008438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800843c:	2500      	movne	r5, #0
 800843e:	4293      	cmp	r3, r2
 8008440:	bfc4      	itt	gt
 8008442:	1a9b      	subgt	r3, r3, r2
 8008444:	18ed      	addgt	r5, r5, r3
 8008446:	2600      	movs	r6, #0
 8008448:	341a      	adds	r4, #26
 800844a:	42b5      	cmp	r5, r6
 800844c:	d11a      	bne.n	8008484 <_printf_common+0xc8>
 800844e:	2000      	movs	r0, #0
 8008450:	e008      	b.n	8008464 <_printf_common+0xa8>
 8008452:	2301      	movs	r3, #1
 8008454:	4652      	mov	r2, sl
 8008456:	4649      	mov	r1, r9
 8008458:	4638      	mov	r0, r7
 800845a:	47c0      	blx	r8
 800845c:	3001      	adds	r0, #1
 800845e:	d103      	bne.n	8008468 <_printf_common+0xac>
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	3501      	adds	r5, #1
 800846a:	e7c6      	b.n	80083fa <_printf_common+0x3e>
 800846c:	18e1      	adds	r1, r4, r3
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	2030      	movs	r0, #48	; 0x30
 8008472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008476:	4422      	add	r2, r4
 8008478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800847c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008480:	3302      	adds	r3, #2
 8008482:	e7c7      	b.n	8008414 <_printf_common+0x58>
 8008484:	2301      	movs	r3, #1
 8008486:	4622      	mov	r2, r4
 8008488:	4649      	mov	r1, r9
 800848a:	4638      	mov	r0, r7
 800848c:	47c0      	blx	r8
 800848e:	3001      	adds	r0, #1
 8008490:	d0e6      	beq.n	8008460 <_printf_common+0xa4>
 8008492:	3601      	adds	r6, #1
 8008494:	e7d9      	b.n	800844a <_printf_common+0x8e>
	...

08008498 <_printf_i>:
 8008498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	7e0f      	ldrb	r7, [r1, #24]
 800849e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084a0:	2f78      	cmp	r7, #120	; 0x78
 80084a2:	4691      	mov	r9, r2
 80084a4:	4680      	mov	r8, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	469a      	mov	sl, r3
 80084aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ae:	d807      	bhi.n	80084c0 <_printf_i+0x28>
 80084b0:	2f62      	cmp	r7, #98	; 0x62
 80084b2:	d80a      	bhi.n	80084ca <_printf_i+0x32>
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	f000 80d4 	beq.w	8008662 <_printf_i+0x1ca>
 80084ba:	2f58      	cmp	r7, #88	; 0x58
 80084bc:	f000 80c0 	beq.w	8008640 <_printf_i+0x1a8>
 80084c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084c8:	e03a      	b.n	8008540 <_printf_i+0xa8>
 80084ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ce:	2b15      	cmp	r3, #21
 80084d0:	d8f6      	bhi.n	80084c0 <_printf_i+0x28>
 80084d2:	a101      	add	r1, pc, #4	; (adr r1, 80084d8 <_printf_i+0x40>)
 80084d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008545 	.word	0x08008545
 80084e0:	080084c1 	.word	0x080084c1
 80084e4:	080084c1 	.word	0x080084c1
 80084e8:	080084c1 	.word	0x080084c1
 80084ec:	080084c1 	.word	0x080084c1
 80084f0:	08008545 	.word	0x08008545
 80084f4:	080084c1 	.word	0x080084c1
 80084f8:	080084c1 	.word	0x080084c1
 80084fc:	080084c1 	.word	0x080084c1
 8008500:	080084c1 	.word	0x080084c1
 8008504:	08008649 	.word	0x08008649
 8008508:	08008571 	.word	0x08008571
 800850c:	08008603 	.word	0x08008603
 8008510:	080084c1 	.word	0x080084c1
 8008514:	080084c1 	.word	0x080084c1
 8008518:	0800866b 	.word	0x0800866b
 800851c:	080084c1 	.word	0x080084c1
 8008520:	08008571 	.word	0x08008571
 8008524:	080084c1 	.word	0x080084c1
 8008528:	080084c1 	.word	0x080084c1
 800852c:	0800860b 	.word	0x0800860b
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	602a      	str	r2, [r5, #0]
 8008538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800853c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008540:	2301      	movs	r3, #1
 8008542:	e09f      	b.n	8008684 <_printf_i+0x1ec>
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	0607      	lsls	r7, r0, #24
 800854a:	f103 0104 	add.w	r1, r3, #4
 800854e:	6029      	str	r1, [r5, #0]
 8008550:	d501      	bpl.n	8008556 <_printf_i+0xbe>
 8008552:	681e      	ldr	r6, [r3, #0]
 8008554:	e003      	b.n	800855e <_printf_i+0xc6>
 8008556:	0646      	lsls	r6, r0, #25
 8008558:	d5fb      	bpl.n	8008552 <_printf_i+0xba>
 800855a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800855e:	2e00      	cmp	r6, #0
 8008560:	da03      	bge.n	800856a <_printf_i+0xd2>
 8008562:	232d      	movs	r3, #45	; 0x2d
 8008564:	4276      	negs	r6, r6
 8008566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800856a:	485a      	ldr	r0, [pc, #360]	; (80086d4 <_printf_i+0x23c>)
 800856c:	230a      	movs	r3, #10
 800856e:	e012      	b.n	8008596 <_printf_i+0xfe>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	1d19      	adds	r1, r3, #4
 8008576:	6029      	str	r1, [r5, #0]
 8008578:	0605      	lsls	r5, r0, #24
 800857a:	d501      	bpl.n	8008580 <_printf_i+0xe8>
 800857c:	681e      	ldr	r6, [r3, #0]
 800857e:	e002      	b.n	8008586 <_printf_i+0xee>
 8008580:	0641      	lsls	r1, r0, #25
 8008582:	d5fb      	bpl.n	800857c <_printf_i+0xe4>
 8008584:	881e      	ldrh	r6, [r3, #0]
 8008586:	4853      	ldr	r0, [pc, #332]	; (80086d4 <_printf_i+0x23c>)
 8008588:	2f6f      	cmp	r7, #111	; 0x6f
 800858a:	bf0c      	ite	eq
 800858c:	2308      	moveq	r3, #8
 800858e:	230a      	movne	r3, #10
 8008590:	2100      	movs	r1, #0
 8008592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008596:	6865      	ldr	r5, [r4, #4]
 8008598:	60a5      	str	r5, [r4, #8]
 800859a:	2d00      	cmp	r5, #0
 800859c:	bfa2      	ittt	ge
 800859e:	6821      	ldrge	r1, [r4, #0]
 80085a0:	f021 0104 	bicge.w	r1, r1, #4
 80085a4:	6021      	strge	r1, [r4, #0]
 80085a6:	b90e      	cbnz	r6, 80085ac <_printf_i+0x114>
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	d04b      	beq.n	8008644 <_printf_i+0x1ac>
 80085ac:	4615      	mov	r5, r2
 80085ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80085b2:	fb03 6711 	mls	r7, r3, r1, r6
 80085b6:	5dc7      	ldrb	r7, [r0, r7]
 80085b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085bc:	4637      	mov	r7, r6
 80085be:	42bb      	cmp	r3, r7
 80085c0:	460e      	mov	r6, r1
 80085c2:	d9f4      	bls.n	80085ae <_printf_i+0x116>
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d10b      	bne.n	80085e0 <_printf_i+0x148>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	07de      	lsls	r6, r3, #31
 80085cc:	d508      	bpl.n	80085e0 <_printf_i+0x148>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	4299      	cmp	r1, r3
 80085d4:	bfde      	ittt	le
 80085d6:	2330      	movle	r3, #48	; 0x30
 80085d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085e0:	1b52      	subs	r2, r2, r5
 80085e2:	6122      	str	r2, [r4, #16]
 80085e4:	f8cd a000 	str.w	sl, [sp]
 80085e8:	464b      	mov	r3, r9
 80085ea:	aa03      	add	r2, sp, #12
 80085ec:	4621      	mov	r1, r4
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7ff fee4 	bl	80083bc <_printf_common>
 80085f4:	3001      	adds	r0, #1
 80085f6:	d14a      	bne.n	800868e <_printf_i+0x1f6>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	b004      	add	sp, #16
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	f043 0320 	orr.w	r3, r3, #32
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	4833      	ldr	r0, [pc, #204]	; (80086d8 <_printf_i+0x240>)
 800860c:	2778      	movs	r7, #120	; 0x78
 800860e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	6829      	ldr	r1, [r5, #0]
 8008616:	061f      	lsls	r7, r3, #24
 8008618:	f851 6b04 	ldr.w	r6, [r1], #4
 800861c:	d402      	bmi.n	8008624 <_printf_i+0x18c>
 800861e:	065f      	lsls	r7, r3, #25
 8008620:	bf48      	it	mi
 8008622:	b2b6      	uxthmi	r6, r6
 8008624:	07df      	lsls	r7, r3, #31
 8008626:	bf48      	it	mi
 8008628:	f043 0320 	orrmi.w	r3, r3, #32
 800862c:	6029      	str	r1, [r5, #0]
 800862e:	bf48      	it	mi
 8008630:	6023      	strmi	r3, [r4, #0]
 8008632:	b91e      	cbnz	r6, 800863c <_printf_i+0x1a4>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	f023 0320 	bic.w	r3, r3, #32
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	2310      	movs	r3, #16
 800863e:	e7a7      	b.n	8008590 <_printf_i+0xf8>
 8008640:	4824      	ldr	r0, [pc, #144]	; (80086d4 <_printf_i+0x23c>)
 8008642:	e7e4      	b.n	800860e <_printf_i+0x176>
 8008644:	4615      	mov	r5, r2
 8008646:	e7bd      	b.n	80085c4 <_printf_i+0x12c>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	6826      	ldr	r6, [r4, #0]
 800864c:	6961      	ldr	r1, [r4, #20]
 800864e:	1d18      	adds	r0, r3, #4
 8008650:	6028      	str	r0, [r5, #0]
 8008652:	0635      	lsls	r5, r6, #24
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	d501      	bpl.n	800865c <_printf_i+0x1c4>
 8008658:	6019      	str	r1, [r3, #0]
 800865a:	e002      	b.n	8008662 <_printf_i+0x1ca>
 800865c:	0670      	lsls	r0, r6, #25
 800865e:	d5fb      	bpl.n	8008658 <_printf_i+0x1c0>
 8008660:	8019      	strh	r1, [r3, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	4615      	mov	r5, r2
 8008668:	e7bc      	b.n	80085e4 <_printf_i+0x14c>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	602a      	str	r2, [r5, #0]
 8008670:	681d      	ldr	r5, [r3, #0]
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	2100      	movs	r1, #0
 8008676:	4628      	mov	r0, r5
 8008678:	f7f7 fdc2 	bl	8000200 <memchr>
 800867c:	b108      	cbz	r0, 8008682 <_printf_i+0x1ea>
 800867e:	1b40      	subs	r0, r0, r5
 8008680:	6060      	str	r0, [r4, #4]
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	2300      	movs	r3, #0
 8008688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800868c:	e7aa      	b.n	80085e4 <_printf_i+0x14c>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	462a      	mov	r2, r5
 8008692:	4649      	mov	r1, r9
 8008694:	4640      	mov	r0, r8
 8008696:	47d0      	blx	sl
 8008698:	3001      	adds	r0, #1
 800869a:	d0ad      	beq.n	80085f8 <_printf_i+0x160>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	079b      	lsls	r3, r3, #30
 80086a0:	d413      	bmi.n	80086ca <_printf_i+0x232>
 80086a2:	68e0      	ldr	r0, [r4, #12]
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	4298      	cmp	r0, r3
 80086a8:	bfb8      	it	lt
 80086aa:	4618      	movlt	r0, r3
 80086ac:	e7a6      	b.n	80085fc <_printf_i+0x164>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4632      	mov	r2, r6
 80086b2:	4649      	mov	r1, r9
 80086b4:	4640      	mov	r0, r8
 80086b6:	47d0      	blx	sl
 80086b8:	3001      	adds	r0, #1
 80086ba:	d09d      	beq.n	80085f8 <_printf_i+0x160>
 80086bc:	3501      	adds	r5, #1
 80086be:	68e3      	ldr	r3, [r4, #12]
 80086c0:	9903      	ldr	r1, [sp, #12]
 80086c2:	1a5b      	subs	r3, r3, r1
 80086c4:	42ab      	cmp	r3, r5
 80086c6:	dcf2      	bgt.n	80086ae <_printf_i+0x216>
 80086c8:	e7eb      	b.n	80086a2 <_printf_i+0x20a>
 80086ca:	2500      	movs	r5, #0
 80086cc:	f104 0619 	add.w	r6, r4, #25
 80086d0:	e7f5      	b.n	80086be <_printf_i+0x226>
 80086d2:	bf00      	nop
 80086d4:	0800a108 	.word	0x0800a108
 80086d8:	0800a119 	.word	0x0800a119

080086dc <__sflush_r>:
 80086dc:	898a      	ldrh	r2, [r1, #12]
 80086de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e2:	4605      	mov	r5, r0
 80086e4:	0710      	lsls	r0, r2, #28
 80086e6:	460c      	mov	r4, r1
 80086e8:	d458      	bmi.n	800879c <__sflush_r+0xc0>
 80086ea:	684b      	ldr	r3, [r1, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc05      	bgt.n	80086fc <__sflush_r+0x20>
 80086f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dc02      	bgt.n	80086fc <__sflush_r+0x20>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086fe:	2e00      	cmp	r6, #0
 8008700:	d0f9      	beq.n	80086f6 <__sflush_r+0x1a>
 8008702:	2300      	movs	r3, #0
 8008704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008708:	682f      	ldr	r7, [r5, #0]
 800870a:	6a21      	ldr	r1, [r4, #32]
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	d032      	beq.n	8008776 <__sflush_r+0x9a>
 8008710:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	075a      	lsls	r2, r3, #29
 8008716:	d505      	bpl.n	8008724 <__sflush_r+0x48>
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	1ac0      	subs	r0, r0, r3
 800871c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800871e:	b10b      	cbz	r3, 8008724 <__sflush_r+0x48>
 8008720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008722:	1ac0      	subs	r0, r0, r3
 8008724:	2300      	movs	r3, #0
 8008726:	4602      	mov	r2, r0
 8008728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	4628      	mov	r0, r5
 800872e:	47b0      	blx	r6
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	d106      	bne.n	8008744 <__sflush_r+0x68>
 8008736:	6829      	ldr	r1, [r5, #0]
 8008738:	291d      	cmp	r1, #29
 800873a:	d82b      	bhi.n	8008794 <__sflush_r+0xb8>
 800873c:	4a29      	ldr	r2, [pc, #164]	; (80087e4 <__sflush_r+0x108>)
 800873e:	410a      	asrs	r2, r1
 8008740:	07d6      	lsls	r6, r2, #31
 8008742:	d427      	bmi.n	8008794 <__sflush_r+0xb8>
 8008744:	2200      	movs	r2, #0
 8008746:	6062      	str	r2, [r4, #4]
 8008748:	04d9      	lsls	r1, r3, #19
 800874a:	6922      	ldr	r2, [r4, #16]
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	d504      	bpl.n	800875a <__sflush_r+0x7e>
 8008750:	1c42      	adds	r2, r0, #1
 8008752:	d101      	bne.n	8008758 <__sflush_r+0x7c>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b903      	cbnz	r3, 800875a <__sflush_r+0x7e>
 8008758:	6560      	str	r0, [r4, #84]	; 0x54
 800875a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875c:	602f      	str	r7, [r5, #0]
 800875e:	2900      	cmp	r1, #0
 8008760:	d0c9      	beq.n	80086f6 <__sflush_r+0x1a>
 8008762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008766:	4299      	cmp	r1, r3
 8008768:	d002      	beq.n	8008770 <__sflush_r+0x94>
 800876a:	4628      	mov	r0, r5
 800876c:	f7ff fb04 	bl	8007d78 <_free_r>
 8008770:	2000      	movs	r0, #0
 8008772:	6360      	str	r0, [r4, #52]	; 0x34
 8008774:	e7c0      	b.n	80086f8 <__sflush_r+0x1c>
 8008776:	2301      	movs	r3, #1
 8008778:	4628      	mov	r0, r5
 800877a:	47b0      	blx	r6
 800877c:	1c41      	adds	r1, r0, #1
 800877e:	d1c8      	bne.n	8008712 <__sflush_r+0x36>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c5      	beq.n	8008712 <__sflush_r+0x36>
 8008786:	2b1d      	cmp	r3, #29
 8008788:	d001      	beq.n	800878e <__sflush_r+0xb2>
 800878a:	2b16      	cmp	r3, #22
 800878c:	d101      	bne.n	8008792 <__sflush_r+0xb6>
 800878e:	602f      	str	r7, [r5, #0]
 8008790:	e7b1      	b.n	80086f6 <__sflush_r+0x1a>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008798:	81a3      	strh	r3, [r4, #12]
 800879a:	e7ad      	b.n	80086f8 <__sflush_r+0x1c>
 800879c:	690f      	ldr	r7, [r1, #16]
 800879e:	2f00      	cmp	r7, #0
 80087a0:	d0a9      	beq.n	80086f6 <__sflush_r+0x1a>
 80087a2:	0793      	lsls	r3, r2, #30
 80087a4:	680e      	ldr	r6, [r1, #0]
 80087a6:	bf08      	it	eq
 80087a8:	694b      	ldreq	r3, [r1, #20]
 80087aa:	600f      	str	r7, [r1, #0]
 80087ac:	bf18      	it	ne
 80087ae:	2300      	movne	r3, #0
 80087b0:	eba6 0807 	sub.w	r8, r6, r7
 80087b4:	608b      	str	r3, [r1, #8]
 80087b6:	f1b8 0f00 	cmp.w	r8, #0
 80087ba:	dd9c      	ble.n	80086f6 <__sflush_r+0x1a>
 80087bc:	6a21      	ldr	r1, [r4, #32]
 80087be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087c0:	4643      	mov	r3, r8
 80087c2:	463a      	mov	r2, r7
 80087c4:	4628      	mov	r0, r5
 80087c6:	47b0      	blx	r6
 80087c8:	2800      	cmp	r0, #0
 80087ca:	dc06      	bgt.n	80087da <__sflush_r+0xfe>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	e78e      	b.n	80086f8 <__sflush_r+0x1c>
 80087da:	4407      	add	r7, r0
 80087dc:	eba8 0800 	sub.w	r8, r8, r0
 80087e0:	e7e9      	b.n	80087b6 <__sflush_r+0xda>
 80087e2:	bf00      	nop
 80087e4:	dfbffffe 	.word	0xdfbffffe

080087e8 <_fflush_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	690b      	ldr	r3, [r1, #16]
 80087ec:	4605      	mov	r5, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	b913      	cbnz	r3, 80087f8 <_fflush_r+0x10>
 80087f2:	2500      	movs	r5, #0
 80087f4:	4628      	mov	r0, r5
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	b118      	cbz	r0, 8008802 <_fflush_r+0x1a>
 80087fa:	6a03      	ldr	r3, [r0, #32]
 80087fc:	b90b      	cbnz	r3, 8008802 <_fflush_r+0x1a>
 80087fe:	f7fe fd81 	bl	8007304 <__sinit>
 8008802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f3      	beq.n	80087f2 <_fflush_r+0xa>
 800880a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800880c:	07d0      	lsls	r0, r2, #31
 800880e:	d404      	bmi.n	800881a <_fflush_r+0x32>
 8008810:	0599      	lsls	r1, r3, #22
 8008812:	d402      	bmi.n	800881a <_fflush_r+0x32>
 8008814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008816:	f7ff fa77 	bl	8007d08 <__retarget_lock_acquire_recursive>
 800881a:	4628      	mov	r0, r5
 800881c:	4621      	mov	r1, r4
 800881e:	f7ff ff5d 	bl	80086dc <__sflush_r>
 8008822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008824:	07da      	lsls	r2, r3, #31
 8008826:	4605      	mov	r5, r0
 8008828:	d4e4      	bmi.n	80087f4 <_fflush_r+0xc>
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	059b      	lsls	r3, r3, #22
 800882e:	d4e1      	bmi.n	80087f4 <_fflush_r+0xc>
 8008830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008832:	f7ff fa6b 	bl	8007d0c <__retarget_lock_release_recursive>
 8008836:	e7dd      	b.n	80087f4 <_fflush_r+0xc>

08008838 <fiprintf>:
 8008838:	b40e      	push	{r1, r2, r3}
 800883a:	b503      	push	{r0, r1, lr}
 800883c:	4601      	mov	r1, r0
 800883e:	ab03      	add	r3, sp, #12
 8008840:	4805      	ldr	r0, [pc, #20]	; (8008858 <fiprintf+0x20>)
 8008842:	f853 2b04 	ldr.w	r2, [r3], #4
 8008846:	6800      	ldr	r0, [r0, #0]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	f000 fb59 	bl	8008f00 <_vfiprintf_r>
 800884e:	b002      	add	sp, #8
 8008850:	f85d eb04 	ldr.w	lr, [sp], #4
 8008854:	b003      	add	sp, #12
 8008856:	4770      	bx	lr
 8008858:	20000070 	.word	0x20000070

0800885c <siscanf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b510      	push	{r4, lr}
 8008860:	b09f      	sub	sp, #124	; 0x7c
 8008862:	ac21      	add	r4, sp, #132	; 0x84
 8008864:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008868:	f854 2b04 	ldr.w	r2, [r4], #4
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008872:	9004      	str	r0, [sp, #16]
 8008874:	9008      	str	r0, [sp, #32]
 8008876:	f7f7 fcb5 	bl	80001e4 <strlen>
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <siscanf+0x50>)
 800887c:	9005      	str	r0, [sp, #20]
 800887e:	9009      	str	r0, [sp, #36]	; 0x24
 8008880:	930d      	str	r3, [sp, #52]	; 0x34
 8008882:	480b      	ldr	r0, [pc, #44]	; (80088b0 <siscanf+0x54>)
 8008884:	9a01      	ldr	r2, [sp, #4]
 8008886:	6800      	ldr	r0, [r0, #0]
 8008888:	9403      	str	r4, [sp, #12]
 800888a:	2300      	movs	r3, #0
 800888c:	9311      	str	r3, [sp, #68]	; 0x44
 800888e:	9316      	str	r3, [sp, #88]	; 0x58
 8008890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008894:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008898:	a904      	add	r1, sp, #16
 800889a:	4623      	mov	r3, r4
 800889c:	f000 f98e 	bl	8008bbc <__ssvfiscanf_r>
 80088a0:	b01f      	add	sp, #124	; 0x7c
 80088a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a6:	b003      	add	sp, #12
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	080073d3 	.word	0x080073d3
 80088b0:	20000070 	.word	0x20000070

080088b4 <memmove>:
 80088b4:	4288      	cmp	r0, r1
 80088b6:	b510      	push	{r4, lr}
 80088b8:	eb01 0402 	add.w	r4, r1, r2
 80088bc:	d902      	bls.n	80088c4 <memmove+0x10>
 80088be:	4284      	cmp	r4, r0
 80088c0:	4623      	mov	r3, r4
 80088c2:	d807      	bhi.n	80088d4 <memmove+0x20>
 80088c4:	1e43      	subs	r3, r0, #1
 80088c6:	42a1      	cmp	r1, r4
 80088c8:	d008      	beq.n	80088dc <memmove+0x28>
 80088ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088d2:	e7f8      	b.n	80088c6 <memmove+0x12>
 80088d4:	4402      	add	r2, r0
 80088d6:	4601      	mov	r1, r0
 80088d8:	428a      	cmp	r2, r1
 80088da:	d100      	bne.n	80088de <memmove+0x2a>
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088e6:	e7f7      	b.n	80088d8 <memmove+0x24>

080088e8 <strncmp>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	b16a      	cbz	r2, 8008908 <strncmp+0x20>
 80088ec:	3901      	subs	r1, #1
 80088ee:	1884      	adds	r4, r0, r2
 80088f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d103      	bne.n	8008904 <strncmp+0x1c>
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d001      	beq.n	8008904 <strncmp+0x1c>
 8008900:	2a00      	cmp	r2, #0
 8008902:	d1f5      	bne.n	80088f0 <strncmp+0x8>
 8008904:	1ad0      	subs	r0, r2, r3
 8008906:	bd10      	pop	{r4, pc}
 8008908:	4610      	mov	r0, r2
 800890a:	e7fc      	b.n	8008906 <strncmp+0x1e>

0800890c <__gettzinfo>:
 800890c:	4800      	ldr	r0, [pc, #0]	; (8008910 <__gettzinfo+0x4>)
 800890e:	4770      	bx	lr
 8008910:	20000078 	.word	0x20000078

08008914 <gmtime_r>:
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	4a4d      	ldr	r2, [pc, #308]	; (8008a50 <gmtime_r+0x13c>)
 800891a:	460c      	mov	r4, r1
 800891c:	2300      	movs	r3, #0
 800891e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8008922:	f7f7 fcbd 	bl	80002a0 <__aeabi_ldivmod>
 8008926:	2a00      	cmp	r2, #0
 8008928:	bfbc      	itt	lt
 800892a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800892e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8008932:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008936:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 800893a:	fbb2 f3f1 	udiv	r3, r2, r1
 800893e:	fb01 2213 	mls	r2, r1, r3, r2
 8008942:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8008946:	bfac      	ite	ge
 8008948:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800894c:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8008950:	60a3      	str	r3, [r4, #8]
 8008952:	fbb2 f3f1 	udiv	r3, r2, r1
 8008956:	fb01 2213 	mls	r2, r1, r3, r2
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	6022      	str	r2, [r4, #0]
 800895e:	1cc3      	adds	r3, r0, #3
 8008960:	2207      	movs	r2, #7
 8008962:	fb93 f2f2 	sdiv	r2, r3, r2
 8008966:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	bf48      	it	mi
 800896e:	3307      	addmi	r3, #7
 8008970:	2800      	cmp	r0, #0
 8008972:	61a3      	str	r3, [r4, #24]
 8008974:	bfb8      	it	lt
 8008976:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800897a:	4936      	ldr	r1, [pc, #216]	; (8008a54 <gmtime_r+0x140>)
 800897c:	bfae      	itee	ge
 800897e:	fb90 f1f1 	sdivge	r1, r0, r1
 8008982:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8008986:	fb93 f1f1 	sdivlt	r1, r3, r1
 800898a:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <gmtime_r+0x144>)
 800898c:	fb03 0001 	mla	r0, r3, r1, r0
 8008990:	f648 63ac 	movw	r3, #36524	; 0x8eac
 8008994:	fbb0 f3f3 	udiv	r3, r0, r3
 8008998:	4403      	add	r3, r0
 800899a:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800899e:	fbb0 f2fc 	udiv	r2, r0, ip
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	f240 176d 	movw	r7, #365	; 0x16d
 80089a8:	4a2c      	ldr	r2, [pc, #176]	; (8008a5c <gmtime_r+0x148>)
 80089aa:	fbb0 f2f2 	udiv	r2, r0, r2
 80089ae:	2664      	movs	r6, #100	; 0x64
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	fbb3 f2f7 	udiv	r2, r3, r7
 80089b6:	fbb3 f3fc 	udiv	r3, r3, ip
 80089ba:	fbb2 f5f6 	udiv	r5, r2, r6
 80089be:	1aeb      	subs	r3, r5, r3
 80089c0:	4403      	add	r3, r0
 80089c2:	fb07 3312 	mls	r3, r7, r2, r3
 80089c6:	2099      	movs	r0, #153	; 0x99
 80089c8:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80089cc:	3702      	adds	r7, #2
 80089ce:	f103 0e01 	add.w	lr, r3, #1
 80089d2:	fbb7 fcf0 	udiv	ip, r7, r0
 80089d6:	fb00 f00c 	mul.w	r0, r0, ip
 80089da:	3002      	adds	r0, #2
 80089dc:	f04f 0805 	mov.w	r8, #5
 80089e0:	fbb0 f0f8 	udiv	r0, r0, r8
 80089e4:	ebae 0000 	sub.w	r0, lr, r0
 80089e8:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80089ec:	4577      	cmp	r7, lr
 80089ee:	bf94      	ite	ls
 80089f0:	2702      	movls	r7, #2
 80089f2:	f06f 0709 	mvnhi.w	r7, #9
 80089f6:	4467      	add	r7, ip
 80089f8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80089fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a00:	2f01      	cmp	r7, #1
 8008a02:	bf98      	it	ls
 8008a04:	3101      	addls	r1, #1
 8008a06:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008a0a:	d30c      	bcc.n	8008a26 <gmtime_r+0x112>
 8008a0c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008a10:	61e3      	str	r3, [r4, #28]
 8008a12:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8008a16:	2300      	movs	r3, #0
 8008a18:	60e0      	str	r0, [r4, #12]
 8008a1a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8008a1e:	6223      	str	r3, [r4, #32]
 8008a20:	4620      	mov	r0, r4
 8008a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a26:	f012 0f03 	tst.w	r2, #3
 8008a2a:	d102      	bne.n	8008a32 <gmtime_r+0x11e>
 8008a2c:	fb06 2515 	mls	r5, r6, r5, r2
 8008a30:	b95d      	cbnz	r5, 8008a4a <gmtime_r+0x136>
 8008a32:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008a36:	fbb2 f6f5 	udiv	r6, r2, r5
 8008a3a:	fb05 2216 	mls	r2, r5, r6, r2
 8008a3e:	fab2 f282 	clz	r2, r2
 8008a42:	0952      	lsrs	r2, r2, #5
 8008a44:	333b      	adds	r3, #59	; 0x3b
 8008a46:	4413      	add	r3, r2
 8008a48:	e7e2      	b.n	8008a10 <gmtime_r+0xfc>
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	e7fa      	b.n	8008a44 <gmtime_r+0x130>
 8008a4e:	bf00      	nop
 8008a50:	00015180 	.word	0x00015180
 8008a54:	00023ab1 	.word	0x00023ab1
 8008a58:	fffdc54f 	.word	0xfffdc54f
 8008a5c:	00023ab0 	.word	0x00023ab0

08008a60 <_sbrk_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d06      	ldr	r5, [pc, #24]	; (8008a7c <_sbrk_r+0x1c>)
 8008a64:	2300      	movs	r3, #0
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	f7fc f84e 	bl	8004b0c <_sbrk>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_sbrk_r+0x1a>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_sbrk_r+0x1a>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	2000caf0 	.word	0x2000caf0

08008a80 <abort>:
 8008a80:	b508      	push	{r3, lr}
 8008a82:	2006      	movs	r0, #6
 8008a84:	f000 fdd4 	bl	8009630 <raise>
 8008a88:	2001      	movs	r0, #1
 8008a8a:	f7fb ffc8 	bl	8004a1e <_exit>
	...

08008a90 <__env_lock>:
 8008a90:	4801      	ldr	r0, [pc, #4]	; (8008a98 <__env_lock+0x8>)
 8008a92:	f7ff b939 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 8008a96:	bf00      	nop
 8008a98:	2000caf4 	.word	0x2000caf4

08008a9c <__env_unlock>:
 8008a9c:	4801      	ldr	r0, [pc, #4]	; (8008aa4 <__env_unlock+0x8>)
 8008a9e:	f7ff b935 	b.w	8007d0c <__retarget_lock_release_recursive>
 8008aa2:	bf00      	nop
 8008aa4:	2000caf4 	.word	0x2000caf4

08008aa8 <_realloc_r>:
 8008aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4680      	mov	r8, r0
 8008aae:	4614      	mov	r4, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	b921      	cbnz	r1, 8008abe <_realloc_r+0x16>
 8008ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	4611      	mov	r1, r2
 8008aba:	f7ff ba1d 	b.w	8007ef8 <_malloc_r>
 8008abe:	b92a      	cbnz	r2, 8008acc <_realloc_r+0x24>
 8008ac0:	f7ff f95a 	bl	8007d78 <_free_r>
 8008ac4:	4625      	mov	r5, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	f000 fdcc 	bl	8009668 <_malloc_usable_size_r>
 8008ad0:	4284      	cmp	r4, r0
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	d802      	bhi.n	8008adc <_realloc_r+0x34>
 8008ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ada:	d812      	bhi.n	8008b02 <_realloc_r+0x5a>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7ff fa0a 	bl	8007ef8 <_malloc_r>
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0ed      	beq.n	8008ac6 <_realloc_r+0x1e>
 8008aea:	42bc      	cmp	r4, r7
 8008aec:	4622      	mov	r2, r4
 8008aee:	4631      	mov	r1, r6
 8008af0:	bf28      	it	cs
 8008af2:	463a      	movcs	r2, r7
 8008af4:	f7ff f913 	bl	8007d1e <memcpy>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7ff f93c 	bl	8007d78 <_free_r>
 8008b00:	e7e1      	b.n	8008ac6 <_realloc_r+0x1e>
 8008b02:	4635      	mov	r5, r6
 8008b04:	e7df      	b.n	8008ac6 <_realloc_r+0x1e>

08008b06 <_sungetc_r>:
 8008b06:	b538      	push	{r3, r4, r5, lr}
 8008b08:	1c4b      	adds	r3, r1, #1
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	d103      	bne.n	8008b16 <_sungetc_r+0x10>
 8008b0e:	f04f 35ff 	mov.w	r5, #4294967295
 8008b12:	4628      	mov	r0, r5
 8008b14:	bd38      	pop	{r3, r4, r5, pc}
 8008b16:	8993      	ldrh	r3, [r2, #12]
 8008b18:	f023 0320 	bic.w	r3, r3, #32
 8008b1c:	8193      	strh	r3, [r2, #12]
 8008b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b20:	6852      	ldr	r2, [r2, #4]
 8008b22:	b2cd      	uxtb	r5, r1
 8008b24:	b18b      	cbz	r3, 8008b4a <_sungetc_r+0x44>
 8008b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	dd08      	ble.n	8008b3e <_sungetc_r+0x38>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	1e5a      	subs	r2, r3, #1
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	6063      	str	r3, [r4, #4]
 8008b3c:	e7e9      	b.n	8008b12 <_sungetc_r+0xc>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	f000 fc7f 	bl	8009442 <__submore>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d0f1      	beq.n	8008b2c <_sungetc_r+0x26>
 8008b48:	e7e1      	b.n	8008b0e <_sungetc_r+0x8>
 8008b4a:	6921      	ldr	r1, [r4, #16]
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	b151      	cbz	r1, 8008b66 <_sungetc_r+0x60>
 8008b50:	4299      	cmp	r1, r3
 8008b52:	d208      	bcs.n	8008b66 <_sungetc_r+0x60>
 8008b54:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008b58:	42a9      	cmp	r1, r5
 8008b5a:	d104      	bne.n	8008b66 <_sungetc_r+0x60>
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	3201      	adds	r2, #1
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	6062      	str	r2, [r4, #4]
 8008b64:	e7d5      	b.n	8008b12 <_sungetc_r+0xc>
 8008b66:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008b6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b6e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b70:	2303      	movs	r3, #3
 8008b72:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b74:	4623      	mov	r3, r4
 8008b76:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e7dc      	b.n	8008b3a <_sungetc_r+0x34>

08008b80 <__ssrefill_r>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b86:	b169      	cbz	r1, 8008ba4 <__ssrefill_r+0x24>
 8008b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	d001      	beq.n	8008b94 <__ssrefill_r+0x14>
 8008b90:	f7ff f8f2 	bl	8007d78 <_free_r>
 8008b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b96:	6063      	str	r3, [r4, #4]
 8008b98:	2000      	movs	r0, #0
 8008b9a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b9c:	b113      	cbz	r3, 8008ba4 <__ssrefill_r+0x24>
 8008b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6063      	str	r3, [r4, #4]
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f043 0320 	orr.w	r3, r3, #32
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	e7f3      	b.n	8008ba2 <__ssrefill_r+0x22>
	...

08008bbc <__ssvfiscanf_r>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008bcc:	49a6      	ldr	r1, [pc, #664]	; (8008e68 <__ssvfiscanf_r+0x2ac>)
 8008bce:	91a0      	str	r1, [sp, #640]	; 0x280
 8008bd0:	f10d 0804 	add.w	r8, sp, #4
 8008bd4:	49a5      	ldr	r1, [pc, #660]	; (8008e6c <__ssvfiscanf_r+0x2b0>)
 8008bd6:	4fa6      	ldr	r7, [pc, #664]	; (8008e70 <__ssvfiscanf_r+0x2b4>)
 8008bd8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008e74 <__ssvfiscanf_r+0x2b8>
 8008bdc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008be0:	4606      	mov	r6, r0
 8008be2:	91a1      	str	r1, [sp, #644]	; 0x284
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	7813      	ldrb	r3, [r2, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 815a 	beq.w	8008ea2 <__ssvfiscanf_r+0x2e6>
 8008bee:	5cf9      	ldrb	r1, [r7, r3]
 8008bf0:	f011 0108 	ands.w	r1, r1, #8
 8008bf4:	f102 0501 	add.w	r5, r2, #1
 8008bf8:	d019      	beq.n	8008c2e <__ssvfiscanf_r+0x72>
 8008bfa:	6863      	ldr	r3, [r4, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dd0f      	ble.n	8008c20 <__ssvfiscanf_r+0x64>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	5cba      	ldrb	r2, [r7, r2]
 8008c06:	0712      	lsls	r2, r2, #28
 8008c08:	d401      	bmi.n	8008c0e <__ssvfiscanf_r+0x52>
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	e7eb      	b.n	8008be6 <__ssvfiscanf_r+0x2a>
 8008c0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c10:	3201      	adds	r2, #1
 8008c12:	9245      	str	r2, [sp, #276]	; 0x114
 8008c14:	6862      	ldr	r2, [r4, #4]
 8008c16:	3301      	adds	r3, #1
 8008c18:	3a01      	subs	r2, #1
 8008c1a:	6062      	str	r2, [r4, #4]
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	e7ec      	b.n	8008bfa <__ssvfiscanf_r+0x3e>
 8008c20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c22:	4621      	mov	r1, r4
 8008c24:	4630      	mov	r0, r6
 8008c26:	4798      	blx	r3
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d0e9      	beq.n	8008c00 <__ssvfiscanf_r+0x44>
 8008c2c:	e7ed      	b.n	8008c0a <__ssvfiscanf_r+0x4e>
 8008c2e:	2b25      	cmp	r3, #37	; 0x25
 8008c30:	d012      	beq.n	8008c58 <__ssvfiscanf_r+0x9c>
 8008c32:	469a      	mov	sl, r3
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f340 8091 	ble.w	8008d5e <__ssvfiscanf_r+0x1a2>
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	7813      	ldrb	r3, [r2, #0]
 8008c40:	4553      	cmp	r3, sl
 8008c42:	f040 812e 	bne.w	8008ea2 <__ssvfiscanf_r+0x2e6>
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	6063      	str	r3, [r4, #4]
 8008c4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008c4e:	3201      	adds	r2, #1
 8008c50:	3301      	adds	r3, #1
 8008c52:	6022      	str	r2, [r4, #0]
 8008c54:	9345      	str	r3, [sp, #276]	; 0x114
 8008c56:	e7d8      	b.n	8008c0a <__ssvfiscanf_r+0x4e>
 8008c58:	9141      	str	r1, [sp, #260]	; 0x104
 8008c5a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008c5c:	7853      	ldrb	r3, [r2, #1]
 8008c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c60:	bf02      	ittt	eq
 8008c62:	2310      	moveq	r3, #16
 8008c64:	1c95      	addeq	r5, r2, #2
 8008c66:	9341      	streq	r3, [sp, #260]	; 0x104
 8008c68:	220a      	movs	r2, #10
 8008c6a:	46aa      	mov	sl, r5
 8008c6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008c70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d91c      	bls.n	8008cb2 <__ssvfiscanf_r+0xf6>
 8008c78:	487e      	ldr	r0, [pc, #504]	; (8008e74 <__ssvfiscanf_r+0x2b8>)
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	f7f7 fac0 	bl	8000200 <memchr>
 8008c80:	b138      	cbz	r0, 8008c92 <__ssvfiscanf_r+0xd6>
 8008c82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c84:	eba0 0009 	sub.w	r0, r0, r9
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4083      	lsls	r3, r0
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	9341      	str	r3, [sp, #260]	; 0x104
 8008c90:	4655      	mov	r5, sl
 8008c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c96:	2b78      	cmp	r3, #120	; 0x78
 8008c98:	d806      	bhi.n	8008ca8 <__ssvfiscanf_r+0xec>
 8008c9a:	2b57      	cmp	r3, #87	; 0x57
 8008c9c:	d810      	bhi.n	8008cc0 <__ssvfiscanf_r+0x104>
 8008c9e:	2b25      	cmp	r3, #37	; 0x25
 8008ca0:	d0c7      	beq.n	8008c32 <__ssvfiscanf_r+0x76>
 8008ca2:	d857      	bhi.n	8008d54 <__ssvfiscanf_r+0x198>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d065      	beq.n	8008d74 <__ssvfiscanf_r+0x1b8>
 8008ca8:	2303      	movs	r3, #3
 8008caa:	9347      	str	r3, [sp, #284]	; 0x11c
 8008cac:	230a      	movs	r3, #10
 8008cae:	9342      	str	r3, [sp, #264]	; 0x108
 8008cb0:	e076      	b.n	8008da0 <__ssvfiscanf_r+0x1e4>
 8008cb2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008cb4:	fb02 1103 	mla	r1, r2, r3, r1
 8008cb8:	3930      	subs	r1, #48	; 0x30
 8008cba:	9143      	str	r1, [sp, #268]	; 0x10c
 8008cbc:	4655      	mov	r5, sl
 8008cbe:	e7d4      	b.n	8008c6a <__ssvfiscanf_r+0xae>
 8008cc0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008cc4:	2a20      	cmp	r2, #32
 8008cc6:	d8ef      	bhi.n	8008ca8 <__ssvfiscanf_r+0xec>
 8008cc8:	a101      	add	r1, pc, #4	; (adr r1, 8008cd0 <__ssvfiscanf_r+0x114>)
 8008cca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008d83 	.word	0x08008d83
 8008cd4:	08008ca9 	.word	0x08008ca9
 8008cd8:	08008ca9 	.word	0x08008ca9
 8008cdc:	08008de1 	.word	0x08008de1
 8008ce0:	08008ca9 	.word	0x08008ca9
 8008ce4:	08008ca9 	.word	0x08008ca9
 8008ce8:	08008ca9 	.word	0x08008ca9
 8008cec:	08008ca9 	.word	0x08008ca9
 8008cf0:	08008ca9 	.word	0x08008ca9
 8008cf4:	08008ca9 	.word	0x08008ca9
 8008cf8:	08008ca9 	.word	0x08008ca9
 8008cfc:	08008df7 	.word	0x08008df7
 8008d00:	08008ddd 	.word	0x08008ddd
 8008d04:	08008d5b 	.word	0x08008d5b
 8008d08:	08008d5b 	.word	0x08008d5b
 8008d0c:	08008d5b 	.word	0x08008d5b
 8008d10:	08008ca9 	.word	0x08008ca9
 8008d14:	08008d99 	.word	0x08008d99
 8008d18:	08008ca9 	.word	0x08008ca9
 8008d1c:	08008ca9 	.word	0x08008ca9
 8008d20:	08008ca9 	.word	0x08008ca9
 8008d24:	08008ca9 	.word	0x08008ca9
 8008d28:	08008e07 	.word	0x08008e07
 8008d2c:	08008dd5 	.word	0x08008dd5
 8008d30:	08008d7b 	.word	0x08008d7b
 8008d34:	08008ca9 	.word	0x08008ca9
 8008d38:	08008ca9 	.word	0x08008ca9
 8008d3c:	08008e03 	.word	0x08008e03
 8008d40:	08008ca9 	.word	0x08008ca9
 8008d44:	08008ddd 	.word	0x08008ddd
 8008d48:	08008ca9 	.word	0x08008ca9
 8008d4c:	08008ca9 	.word	0x08008ca9
 8008d50:	08008d83 	.word	0x08008d83
 8008d54:	3b45      	subs	r3, #69	; 0x45
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d8a6      	bhi.n	8008ca8 <__ssvfiscanf_r+0xec>
 8008d5a:	2305      	movs	r3, #5
 8008d5c:	e01f      	b.n	8008d9e <__ssvfiscanf_r+0x1e2>
 8008d5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d60:	4621      	mov	r1, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	4798      	blx	r3
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f af68 	beq.w	8008c3c <__ssvfiscanf_r+0x80>
 8008d6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f040 808d 	bne.w	8008e8e <__ssvfiscanf_r+0x2d2>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e08f      	b.n	8008e9a <__ssvfiscanf_r+0x2de>
 8008d7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d7c:	f042 0220 	orr.w	r2, r2, #32
 8008d80:	9241      	str	r2, [sp, #260]	; 0x104
 8008d82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d88:	9241      	str	r2, [sp, #260]	; 0x104
 8008d8a:	2210      	movs	r2, #16
 8008d8c:	2b6f      	cmp	r3, #111	; 0x6f
 8008d8e:	9242      	str	r2, [sp, #264]	; 0x108
 8008d90:	bf34      	ite	cc
 8008d92:	2303      	movcc	r3, #3
 8008d94:	2304      	movcs	r3, #4
 8008d96:	e002      	b.n	8008d9e <__ssvfiscanf_r+0x1e2>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9342      	str	r3, [sp, #264]	; 0x108
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd3d      	ble.n	8008e22 <__ssvfiscanf_r+0x266>
 8008da6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008da8:	0659      	lsls	r1, r3, #25
 8008daa:	d404      	bmi.n	8008db6 <__ssvfiscanf_r+0x1fa>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	5cba      	ldrb	r2, [r7, r2]
 8008db2:	0712      	lsls	r2, r2, #28
 8008db4:	d43c      	bmi.n	8008e30 <__ssvfiscanf_r+0x274>
 8008db6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	dc4b      	bgt.n	8008e54 <__ssvfiscanf_r+0x298>
 8008dbc:	466b      	mov	r3, sp
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	a941      	add	r1, sp, #260	; 0x104
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 f9b6 	bl	8009134 <_scanf_chars>
 8008dc8:	2801      	cmp	r0, #1
 8008dca:	d06a      	beq.n	8008ea2 <__ssvfiscanf_r+0x2e6>
 8008dcc:	2802      	cmp	r0, #2
 8008dce:	f47f af1c 	bne.w	8008c0a <__ssvfiscanf_r+0x4e>
 8008dd2:	e7cb      	b.n	8008d6c <__ssvfiscanf_r+0x1b0>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	9342      	str	r3, [sp, #264]	; 0x108
 8008dd8:	2304      	movs	r3, #4
 8008dda:	e7e0      	b.n	8008d9e <__ssvfiscanf_r+0x1e2>
 8008ddc:	220a      	movs	r2, #10
 8008dde:	e7d5      	b.n	8008d8c <__ssvfiscanf_r+0x1d0>
 8008de0:	4629      	mov	r1, r5
 8008de2:	4640      	mov	r0, r8
 8008de4:	f000 faf4 	bl	80093d0 <__sccl>
 8008de8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dee:	9341      	str	r3, [sp, #260]	; 0x104
 8008df0:	4605      	mov	r5, r0
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7d3      	b.n	8008d9e <__ssvfiscanf_r+0x1e2>
 8008df6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfc:	9341      	str	r3, [sp, #260]	; 0x104
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e7cd      	b.n	8008d9e <__ssvfiscanf_r+0x1e2>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e7cb      	b.n	8008d9e <__ssvfiscanf_r+0x1e2>
 8008e06:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008e08:	06c3      	lsls	r3, r0, #27
 8008e0a:	f53f aefe 	bmi.w	8008c0a <__ssvfiscanf_r+0x4e>
 8008e0e:	9b00      	ldr	r3, [sp, #0]
 8008e10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008e12:	1d19      	adds	r1, r3, #4
 8008e14:	9100      	str	r1, [sp, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	07c0      	lsls	r0, r0, #31
 8008e1a:	bf4c      	ite	mi
 8008e1c:	801a      	strhmi	r2, [r3, #0]
 8008e1e:	601a      	strpl	r2, [r3, #0]
 8008e20:	e6f3      	b.n	8008c0a <__ssvfiscanf_r+0x4e>
 8008e22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e24:	4621      	mov	r1, r4
 8008e26:	4630      	mov	r0, r6
 8008e28:	4798      	blx	r3
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d0bb      	beq.n	8008da6 <__ssvfiscanf_r+0x1ea>
 8008e2e:	e79d      	b.n	8008d6c <__ssvfiscanf_r+0x1b0>
 8008e30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008e32:	3201      	adds	r2, #1
 8008e34:	9245      	str	r2, [sp, #276]	; 0x114
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	3a01      	subs	r2, #1
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	6062      	str	r2, [r4, #4]
 8008e3e:	dd02      	ble.n	8008e46 <__ssvfiscanf_r+0x28a>
 8008e40:	3301      	adds	r3, #1
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	e7b2      	b.n	8008dac <__ssvfiscanf_r+0x1f0>
 8008e46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4798      	blx	r3
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d0ac      	beq.n	8008dac <__ssvfiscanf_r+0x1f0>
 8008e52:	e78b      	b.n	8008d6c <__ssvfiscanf_r+0x1b0>
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	dc0f      	bgt.n	8008e78 <__ssvfiscanf_r+0x2bc>
 8008e58:	466b      	mov	r3, sp
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	a941      	add	r1, sp, #260	; 0x104
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 f9c2 	bl	80091e8 <_scanf_i>
 8008e64:	e7b0      	b.n	8008dc8 <__ssvfiscanf_r+0x20c>
 8008e66:	bf00      	nop
 8008e68:	08008b07 	.word	0x08008b07
 8008e6c:	08008b81 	.word	0x08008b81
 8008e70:	08009ff7 	.word	0x08009ff7
 8008e74:	0800a0fd 	.word	0x0800a0fd
 8008e78:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <__ssvfiscanf_r+0x2ec>)
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f43f aec5 	beq.w	8008c0a <__ssvfiscanf_r+0x4e>
 8008e80:	466b      	mov	r3, sp
 8008e82:	4622      	mov	r2, r4
 8008e84:	a941      	add	r1, sp, #260	; 0x104
 8008e86:	4630      	mov	r0, r6
 8008e88:	f3af 8000 	nop.w
 8008e8c:	e79c      	b.n	8008dc8 <__ssvfiscanf_r+0x20c>
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e94:	bf18      	it	ne
 8008e96:	f04f 30ff 	movne.w	r0, #4294967295
 8008e9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ea4:	e7f9      	b.n	8008e9a <__ssvfiscanf_r+0x2de>
 8008ea6:	bf00      	nop
 8008ea8:	00000000 	.word	0x00000000

08008eac <__sfputc_r>:
 8008eac:	6893      	ldr	r3, [r2, #8]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	b410      	push	{r4}
 8008eb4:	6093      	str	r3, [r2, #8]
 8008eb6:	da08      	bge.n	8008eca <__sfputc_r+0x1e>
 8008eb8:	6994      	ldr	r4, [r2, #24]
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	db01      	blt.n	8008ec2 <__sfputc_r+0x16>
 8008ebe:	290a      	cmp	r1, #10
 8008ec0:	d103      	bne.n	8008eca <__sfputc_r+0x1e>
 8008ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec6:	f000 baf6 	b.w	80094b6 <__swbuf_r>
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	1c58      	adds	r0, r3, #1
 8008ece:	6010      	str	r0, [r2, #0]
 8008ed0:	7019      	strb	r1, [r3, #0]
 8008ed2:	4608      	mov	r0, r1
 8008ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <__sfputs_r>:
 8008eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	18d5      	adds	r5, r2, r3
 8008ee4:	42ac      	cmp	r4, r5
 8008ee6:	d101      	bne.n	8008eec <__sfputs_r+0x12>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	e007      	b.n	8008efc <__sfputs_r+0x22>
 8008eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef0:	463a      	mov	r2, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7ff ffda 	bl	8008eac <__sfputc_r>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d1f3      	bne.n	8008ee4 <__sfputs_r+0xa>
 8008efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f00 <_vfiprintf_r>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	460d      	mov	r5, r1
 8008f06:	b09d      	sub	sp, #116	; 0x74
 8008f08:	4614      	mov	r4, r2
 8008f0a:	4698      	mov	r8, r3
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	b118      	cbz	r0, 8008f18 <_vfiprintf_r+0x18>
 8008f10:	6a03      	ldr	r3, [r0, #32]
 8008f12:	b90b      	cbnz	r3, 8008f18 <_vfiprintf_r+0x18>
 8008f14:	f7fe f9f6 	bl	8007304 <__sinit>
 8008f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f1a:	07d9      	lsls	r1, r3, #31
 8008f1c:	d405      	bmi.n	8008f2a <_vfiprintf_r+0x2a>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d402      	bmi.n	8008f2a <_vfiprintf_r+0x2a>
 8008f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f26:	f7fe feef 	bl	8007d08 <__retarget_lock_acquire_recursive>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	071b      	lsls	r3, r3, #28
 8008f2e:	d501      	bpl.n	8008f34 <_vfiprintf_r+0x34>
 8008f30:	692b      	ldr	r3, [r5, #16]
 8008f32:	b99b      	cbnz	r3, 8008f5c <_vfiprintf_r+0x5c>
 8008f34:	4629      	mov	r1, r5
 8008f36:	4630      	mov	r0, r6
 8008f38:	f000 fafa 	bl	8009530 <__swsetup_r>
 8008f3c:	b170      	cbz	r0, 8008f5c <_vfiprintf_r+0x5c>
 8008f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f40:	07dc      	lsls	r4, r3, #31
 8008f42:	d504      	bpl.n	8008f4e <_vfiprintf_r+0x4e>
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	b01d      	add	sp, #116	; 0x74
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	89ab      	ldrh	r3, [r5, #12]
 8008f50:	0598      	lsls	r0, r3, #22
 8008f52:	d4f7      	bmi.n	8008f44 <_vfiprintf_r+0x44>
 8008f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f56:	f7fe fed9 	bl	8007d0c <__retarget_lock_release_recursive>
 8008f5a:	e7f3      	b.n	8008f44 <_vfiprintf_r+0x44>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	2320      	movs	r3, #32
 8008f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f6a:	2330      	movs	r3, #48	; 0x30
 8008f6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009120 <_vfiprintf_r+0x220>
 8008f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f74:	f04f 0901 	mov.w	r9, #1
 8008f78:	4623      	mov	r3, r4
 8008f7a:	469a      	mov	sl, r3
 8008f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f80:	b10a      	cbz	r2, 8008f86 <_vfiprintf_r+0x86>
 8008f82:	2a25      	cmp	r2, #37	; 0x25
 8008f84:	d1f9      	bne.n	8008f7a <_vfiprintf_r+0x7a>
 8008f86:	ebba 0b04 	subs.w	fp, sl, r4
 8008f8a:	d00b      	beq.n	8008fa4 <_vfiprintf_r+0xa4>
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ffa1 	bl	8008eda <__sfputs_r>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	f000 80a9 	beq.w	80090f0 <_vfiprintf_r+0x1f0>
 8008f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa0:	445a      	add	r2, fp
 8008fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80a1 	beq.w	80090f0 <_vfiprintf_r+0x1f0>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb8:	f10a 0a01 	add.w	sl, sl, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	2205      	movs	r2, #5
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	4854      	ldr	r0, [pc, #336]	; (8009120 <_vfiprintf_r+0x220>)
 8008fd0:	f7f7 f916 	bl	8000200 <memchr>
 8008fd4:	9a04      	ldr	r2, [sp, #16]
 8008fd6:	b9d8      	cbnz	r0, 8009010 <_vfiprintf_r+0x110>
 8008fd8:	06d1      	lsls	r1, r2, #27
 8008fda:	bf44      	itt	mi
 8008fdc:	2320      	movmi	r3, #32
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe2:	0713      	lsls	r3, r2, #28
 8008fe4:	bf44      	itt	mi
 8008fe6:	232b      	movmi	r3, #43	; 0x2b
 8008fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fec:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff2:	d015      	beq.n	8009020 <_vfiprintf_r+0x120>
 8008ff4:	9a07      	ldr	r2, [sp, #28]
 8008ff6:	4654      	mov	r4, sl
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f04f 0c0a 	mov.w	ip, #10
 8008ffe:	4621      	mov	r1, r4
 8009000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009004:	3b30      	subs	r3, #48	; 0x30
 8009006:	2b09      	cmp	r3, #9
 8009008:	d94d      	bls.n	80090a6 <_vfiprintf_r+0x1a6>
 800900a:	b1b0      	cbz	r0, 800903a <_vfiprintf_r+0x13a>
 800900c:	9207      	str	r2, [sp, #28]
 800900e:	e014      	b.n	800903a <_vfiprintf_r+0x13a>
 8009010:	eba0 0308 	sub.w	r3, r0, r8
 8009014:	fa09 f303 	lsl.w	r3, r9, r3
 8009018:	4313      	orrs	r3, r2
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	46a2      	mov	sl, r4
 800901e:	e7d2      	b.n	8008fc6 <_vfiprintf_r+0xc6>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d19      	adds	r1, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9103      	str	r1, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfbb      	ittet	lt
 800902c:	425b      	neglt	r3, r3
 800902e:	f042 0202 	orrlt.w	r2, r2, #2
 8009032:	9307      	strge	r3, [sp, #28]
 8009034:	9307      	strlt	r3, [sp, #28]
 8009036:	bfb8      	it	lt
 8009038:	9204      	strlt	r2, [sp, #16]
 800903a:	7823      	ldrb	r3, [r4, #0]
 800903c:	2b2e      	cmp	r3, #46	; 0x2e
 800903e:	d10c      	bne.n	800905a <_vfiprintf_r+0x15a>
 8009040:	7863      	ldrb	r3, [r4, #1]
 8009042:	2b2a      	cmp	r3, #42	; 0x2a
 8009044:	d134      	bne.n	80090b0 <_vfiprintf_r+0x1b0>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	9203      	str	r2, [sp, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	bfb8      	it	lt
 8009052:	f04f 33ff 	movlt.w	r3, #4294967295
 8009056:	3402      	adds	r4, #2
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009130 <_vfiprintf_r+0x230>
 800905e:	7821      	ldrb	r1, [r4, #0]
 8009060:	2203      	movs	r2, #3
 8009062:	4650      	mov	r0, sl
 8009064:	f7f7 f8cc 	bl	8000200 <memchr>
 8009068:	b138      	cbz	r0, 800907a <_vfiprintf_r+0x17a>
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	eba0 000a 	sub.w	r0, r0, sl
 8009070:	2240      	movs	r2, #64	; 0x40
 8009072:	4082      	lsls	r2, r0
 8009074:	4313      	orrs	r3, r2
 8009076:	3401      	adds	r4, #1
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907e:	4829      	ldr	r0, [pc, #164]	; (8009124 <_vfiprintf_r+0x224>)
 8009080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009084:	2206      	movs	r2, #6
 8009086:	f7f7 f8bb 	bl	8000200 <memchr>
 800908a:	2800      	cmp	r0, #0
 800908c:	d03f      	beq.n	800910e <_vfiprintf_r+0x20e>
 800908e:	4b26      	ldr	r3, [pc, #152]	; (8009128 <_vfiprintf_r+0x228>)
 8009090:	bb1b      	cbnz	r3, 80090da <_vfiprintf_r+0x1da>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	3307      	adds	r3, #7
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	3308      	adds	r3, #8
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a0:	443b      	add	r3, r7
 80090a2:	9309      	str	r3, [sp, #36]	; 0x24
 80090a4:	e768      	b.n	8008f78 <_vfiprintf_r+0x78>
 80090a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090aa:	460c      	mov	r4, r1
 80090ac:	2001      	movs	r0, #1
 80090ae:	e7a6      	b.n	8008ffe <_vfiprintf_r+0xfe>
 80090b0:	2300      	movs	r3, #0
 80090b2:	3401      	adds	r4, #1
 80090b4:	9305      	str	r3, [sp, #20]
 80090b6:	4619      	mov	r1, r3
 80090b8:	f04f 0c0a 	mov.w	ip, #10
 80090bc:	4620      	mov	r0, r4
 80090be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c2:	3a30      	subs	r2, #48	; 0x30
 80090c4:	2a09      	cmp	r2, #9
 80090c6:	d903      	bls.n	80090d0 <_vfiprintf_r+0x1d0>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0c6      	beq.n	800905a <_vfiprintf_r+0x15a>
 80090cc:	9105      	str	r1, [sp, #20]
 80090ce:	e7c4      	b.n	800905a <_vfiprintf_r+0x15a>
 80090d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d4:	4604      	mov	r4, r0
 80090d6:	2301      	movs	r3, #1
 80090d8:	e7f0      	b.n	80090bc <_vfiprintf_r+0x1bc>
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	462a      	mov	r2, r5
 80090e0:	4b12      	ldr	r3, [pc, #72]	; (800912c <_vfiprintf_r+0x22c>)
 80090e2:	a904      	add	r1, sp, #16
 80090e4:	4630      	mov	r0, r6
 80090e6:	f3af 8000 	nop.w
 80090ea:	4607      	mov	r7, r0
 80090ec:	1c78      	adds	r0, r7, #1
 80090ee:	d1d6      	bne.n	800909e <_vfiprintf_r+0x19e>
 80090f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	d405      	bmi.n	8009102 <_vfiprintf_r+0x202>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	059a      	lsls	r2, r3, #22
 80090fa:	d402      	bmi.n	8009102 <_vfiprintf_r+0x202>
 80090fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090fe:	f7fe fe05 	bl	8007d0c <__retarget_lock_release_recursive>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	065b      	lsls	r3, r3, #25
 8009106:	f53f af1d 	bmi.w	8008f44 <_vfiprintf_r+0x44>
 800910a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800910c:	e71c      	b.n	8008f48 <_vfiprintf_r+0x48>
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_vfiprintf_r+0x22c>)
 8009116:	a904      	add	r1, sp, #16
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff f9bd 	bl	8008498 <_printf_i>
 800911e:	e7e4      	b.n	80090ea <_vfiprintf_r+0x1ea>
 8009120:	0800a0f7 	.word	0x0800a0f7
 8009124:	0800a101 	.word	0x0800a101
 8009128:	00000000 	.word	0x00000000
 800912c:	08008edb 	.word	0x08008edb
 8009130:	0800a0fd 	.word	0x0800a0fd

08009134 <_scanf_chars>:
 8009134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009138:	4615      	mov	r5, r2
 800913a:	688a      	ldr	r2, [r1, #8]
 800913c:	4680      	mov	r8, r0
 800913e:	460c      	mov	r4, r1
 8009140:	b932      	cbnz	r2, 8009150 <_scanf_chars+0x1c>
 8009142:	698a      	ldr	r2, [r1, #24]
 8009144:	2a00      	cmp	r2, #0
 8009146:	bf0c      	ite	eq
 8009148:	2201      	moveq	r2, #1
 800914a:	f04f 32ff 	movne.w	r2, #4294967295
 800914e:	608a      	str	r2, [r1, #8]
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80091e4 <_scanf_chars+0xb0>
 8009156:	06d1      	lsls	r1, r2, #27
 8009158:	bf5f      	itttt	pl
 800915a:	681a      	ldrpl	r2, [r3, #0]
 800915c:	1d11      	addpl	r1, r2, #4
 800915e:	6019      	strpl	r1, [r3, #0]
 8009160:	6816      	ldrpl	r6, [r2, #0]
 8009162:	2700      	movs	r7, #0
 8009164:	69a0      	ldr	r0, [r4, #24]
 8009166:	b188      	cbz	r0, 800918c <_scanf_chars+0x58>
 8009168:	2801      	cmp	r0, #1
 800916a:	d107      	bne.n	800917c <_scanf_chars+0x48>
 800916c:	682a      	ldr	r2, [r5, #0]
 800916e:	7811      	ldrb	r1, [r2, #0]
 8009170:	6962      	ldr	r2, [r4, #20]
 8009172:	5c52      	ldrb	r2, [r2, r1]
 8009174:	b952      	cbnz	r2, 800918c <_scanf_chars+0x58>
 8009176:	2f00      	cmp	r7, #0
 8009178:	d031      	beq.n	80091de <_scanf_chars+0xaa>
 800917a:	e022      	b.n	80091c2 <_scanf_chars+0x8e>
 800917c:	2802      	cmp	r0, #2
 800917e:	d120      	bne.n	80091c2 <_scanf_chars+0x8e>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009188:	071b      	lsls	r3, r3, #28
 800918a:	d41a      	bmi.n	80091c2 <_scanf_chars+0x8e>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	06da      	lsls	r2, r3, #27
 8009190:	bf5e      	ittt	pl
 8009192:	682b      	ldrpl	r3, [r5, #0]
 8009194:	781b      	ldrbpl	r3, [r3, #0]
 8009196:	f806 3b01 	strbpl.w	r3, [r6], #1
 800919a:	682a      	ldr	r2, [r5, #0]
 800919c:	686b      	ldr	r3, [r5, #4]
 800919e:	3201      	adds	r2, #1
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	68a2      	ldr	r2, [r4, #8]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	3a01      	subs	r2, #1
 80091a8:	606b      	str	r3, [r5, #4]
 80091aa:	3701      	adds	r7, #1
 80091ac:	60a2      	str	r2, [r4, #8]
 80091ae:	b142      	cbz	r2, 80091c2 <_scanf_chars+0x8e>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dcd7      	bgt.n	8009164 <_scanf_chars+0x30>
 80091b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091b8:	4629      	mov	r1, r5
 80091ba:	4640      	mov	r0, r8
 80091bc:	4798      	blx	r3
 80091be:	2800      	cmp	r0, #0
 80091c0:	d0d0      	beq.n	8009164 <_scanf_chars+0x30>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f013 0310 	ands.w	r3, r3, #16
 80091c8:	d105      	bne.n	80091d6 <_scanf_chars+0xa2>
 80091ca:	68e2      	ldr	r2, [r4, #12]
 80091cc:	3201      	adds	r2, #1
 80091ce:	60e2      	str	r2, [r4, #12]
 80091d0:	69a2      	ldr	r2, [r4, #24]
 80091d2:	b102      	cbz	r2, 80091d6 <_scanf_chars+0xa2>
 80091d4:	7033      	strb	r3, [r6, #0]
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	443b      	add	r3, r7
 80091da:	6123      	str	r3, [r4, #16]
 80091dc:	2000      	movs	r0, #0
 80091de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e2:	bf00      	nop
 80091e4:	08009ff7 	.word	0x08009ff7

080091e8 <_scanf_i>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	4698      	mov	r8, r3
 80091ee:	4b74      	ldr	r3, [pc, #464]	; (80093c0 <_scanf_i+0x1d8>)
 80091f0:	460c      	mov	r4, r1
 80091f2:	4682      	mov	sl, r0
 80091f4:	4616      	mov	r6, r2
 80091f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091fa:	b087      	sub	sp, #28
 80091fc:	ab03      	add	r3, sp, #12
 80091fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009202:	4b70      	ldr	r3, [pc, #448]	; (80093c4 <_scanf_i+0x1dc>)
 8009204:	69a1      	ldr	r1, [r4, #24]
 8009206:	4a70      	ldr	r2, [pc, #448]	; (80093c8 <_scanf_i+0x1e0>)
 8009208:	2903      	cmp	r1, #3
 800920a:	bf18      	it	ne
 800920c:	461a      	movne	r2, r3
 800920e:	68a3      	ldr	r3, [r4, #8]
 8009210:	9201      	str	r2, [sp, #4]
 8009212:	1e5a      	subs	r2, r3, #1
 8009214:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009218:	bf88      	it	hi
 800921a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800921e:	4627      	mov	r7, r4
 8009220:	bf82      	ittt	hi
 8009222:	eb03 0905 	addhi.w	r9, r3, r5
 8009226:	f240 135d 	movwhi	r3, #349	; 0x15d
 800922a:	60a3      	strhi	r3, [r4, #8]
 800922c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009230:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009234:	bf98      	it	ls
 8009236:	f04f 0900 	movls.w	r9, #0
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	463d      	mov	r5, r7
 800923e:	f04f 0b00 	mov.w	fp, #0
 8009242:	6831      	ldr	r1, [r6, #0]
 8009244:	ab03      	add	r3, sp, #12
 8009246:	7809      	ldrb	r1, [r1, #0]
 8009248:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800924c:	2202      	movs	r2, #2
 800924e:	f7f6 ffd7 	bl	8000200 <memchr>
 8009252:	b328      	cbz	r0, 80092a0 <_scanf_i+0xb8>
 8009254:	f1bb 0f01 	cmp.w	fp, #1
 8009258:	d159      	bne.n	800930e <_scanf_i+0x126>
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	b92a      	cbnz	r2, 800926a <_scanf_i+0x82>
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	2308      	movs	r3, #8
 8009262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	6022      	str	r2, [r4, #0]
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009270:	6022      	str	r2, [r4, #0]
 8009272:	68a2      	ldr	r2, [r4, #8]
 8009274:	1e51      	subs	r1, r2, #1
 8009276:	60a1      	str	r1, [r4, #8]
 8009278:	b192      	cbz	r2, 80092a0 <_scanf_i+0xb8>
 800927a:	6832      	ldr	r2, [r6, #0]
 800927c:	1c51      	adds	r1, r2, #1
 800927e:	6031      	str	r1, [r6, #0]
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	f805 2b01 	strb.w	r2, [r5], #1
 8009286:	6872      	ldr	r2, [r6, #4]
 8009288:	3a01      	subs	r2, #1
 800928a:	2a00      	cmp	r2, #0
 800928c:	6072      	str	r2, [r6, #4]
 800928e:	dc07      	bgt.n	80092a0 <_scanf_i+0xb8>
 8009290:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009294:	4631      	mov	r1, r6
 8009296:	4650      	mov	r0, sl
 8009298:	4790      	blx	r2
 800929a:	2800      	cmp	r0, #0
 800929c:	f040 8085 	bne.w	80093aa <_scanf_i+0x1c2>
 80092a0:	f10b 0b01 	add.w	fp, fp, #1
 80092a4:	f1bb 0f03 	cmp.w	fp, #3
 80092a8:	d1cb      	bne.n	8009242 <_scanf_i+0x5a>
 80092aa:	6863      	ldr	r3, [r4, #4]
 80092ac:	b90b      	cbnz	r3, 80092b2 <_scanf_i+0xca>
 80092ae:	230a      	movs	r3, #10
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	4945      	ldr	r1, [pc, #276]	; (80093cc <_scanf_i+0x1e4>)
 80092b6:	6960      	ldr	r0, [r4, #20]
 80092b8:	1ac9      	subs	r1, r1, r3
 80092ba:	f000 f889 	bl	80093d0 <__sccl>
 80092be:	f04f 0b00 	mov.w	fp, #0
 80092c2:	68a3      	ldr	r3, [r4, #8]
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d03d      	beq.n	8009346 <_scanf_i+0x15e>
 80092ca:	6831      	ldr	r1, [r6, #0]
 80092cc:	6960      	ldr	r0, [r4, #20]
 80092ce:	f891 c000 	ldrb.w	ip, [r1]
 80092d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d035      	beq.n	8009346 <_scanf_i+0x15e>
 80092da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80092de:	d124      	bne.n	800932a <_scanf_i+0x142>
 80092e0:	0510      	lsls	r0, r2, #20
 80092e2:	d522      	bpl.n	800932a <_scanf_i+0x142>
 80092e4:	f10b 0b01 	add.w	fp, fp, #1
 80092e8:	f1b9 0f00 	cmp.w	r9, #0
 80092ec:	d003      	beq.n	80092f6 <_scanf_i+0x10e>
 80092ee:	3301      	adds	r3, #1
 80092f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80092f4:	60a3      	str	r3, [r4, #8]
 80092f6:	6873      	ldr	r3, [r6, #4]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	6073      	str	r3, [r6, #4]
 80092fe:	dd1b      	ble.n	8009338 <_scanf_i+0x150>
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	6033      	str	r3, [r6, #0]
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	3b01      	subs	r3, #1
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	e7d9      	b.n	80092c2 <_scanf_i+0xda>
 800930e:	f1bb 0f02 	cmp.w	fp, #2
 8009312:	d1ae      	bne.n	8009272 <_scanf_i+0x8a>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800931a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800931e:	d1bf      	bne.n	80092a0 <_scanf_i+0xb8>
 8009320:	2310      	movs	r3, #16
 8009322:	6063      	str	r3, [r4, #4]
 8009324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009328:	e7a2      	b.n	8009270 <_scanf_i+0x88>
 800932a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800932e:	6022      	str	r2, [r4, #0]
 8009330:	780b      	ldrb	r3, [r1, #0]
 8009332:	f805 3b01 	strb.w	r3, [r5], #1
 8009336:	e7de      	b.n	80092f6 <_scanf_i+0x10e>
 8009338:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800933c:	4631      	mov	r1, r6
 800933e:	4650      	mov	r0, sl
 8009340:	4798      	blx	r3
 8009342:	2800      	cmp	r0, #0
 8009344:	d0df      	beq.n	8009306 <_scanf_i+0x11e>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	05d9      	lsls	r1, r3, #23
 800934a:	d50d      	bpl.n	8009368 <_scanf_i+0x180>
 800934c:	42bd      	cmp	r5, r7
 800934e:	d909      	bls.n	8009364 <_scanf_i+0x17c>
 8009350:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009358:	4632      	mov	r2, r6
 800935a:	4650      	mov	r0, sl
 800935c:	4798      	blx	r3
 800935e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009362:	464d      	mov	r5, r9
 8009364:	42bd      	cmp	r5, r7
 8009366:	d028      	beq.n	80093ba <_scanf_i+0x1d2>
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	f012 0210 	ands.w	r2, r2, #16
 800936e:	d113      	bne.n	8009398 <_scanf_i+0x1b0>
 8009370:	702a      	strb	r2, [r5, #0]
 8009372:	6863      	ldr	r3, [r4, #4]
 8009374:	9e01      	ldr	r6, [sp, #4]
 8009376:	4639      	mov	r1, r7
 8009378:	4650      	mov	r0, sl
 800937a:	47b0      	blx	r6
 800937c:	f8d8 3000 	ldr.w	r3, [r8]
 8009380:	6821      	ldr	r1, [r4, #0]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	f8c8 2000 	str.w	r2, [r8]
 8009388:	f011 0f20 	tst.w	r1, #32
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	d00f      	beq.n	80093b0 <_scanf_i+0x1c8>
 8009390:	6018      	str	r0, [r3, #0]
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	60e3      	str	r3, [r4, #12]
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	1bed      	subs	r5, r5, r7
 800939c:	445d      	add	r5, fp
 800939e:	442b      	add	r3, r5
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	2000      	movs	r0, #0
 80093a4:	b007      	add	sp, #28
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	f04f 0b00 	mov.w	fp, #0
 80093ae:	e7ca      	b.n	8009346 <_scanf_i+0x15e>
 80093b0:	07ca      	lsls	r2, r1, #31
 80093b2:	bf4c      	ite	mi
 80093b4:	8018      	strhmi	r0, [r3, #0]
 80093b6:	6018      	strpl	r0, [r3, #0]
 80093b8:	e7eb      	b.n	8009392 <_scanf_i+0x1aa>
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7f2      	b.n	80093a4 <_scanf_i+0x1bc>
 80093be:	bf00      	nop
 80093c0:	08009e20 	.word	0x08009e20
 80093c4:	080080f5 	.word	0x080080f5
 80093c8:	0800977d 	.word	0x0800977d
 80093cc:	0800a13a 	.word	0x0800a13a

080093d0 <__sccl>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	780b      	ldrb	r3, [r1, #0]
 80093d4:	4604      	mov	r4, r0
 80093d6:	2b5e      	cmp	r3, #94	; 0x5e
 80093d8:	bf0b      	itete	eq
 80093da:	784b      	ldrbeq	r3, [r1, #1]
 80093dc:	1c4a      	addne	r2, r1, #1
 80093de:	1c8a      	addeq	r2, r1, #2
 80093e0:	2100      	movne	r1, #0
 80093e2:	bf08      	it	eq
 80093e4:	2101      	moveq	r1, #1
 80093e6:	3801      	subs	r0, #1
 80093e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80093ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 80093f0:	42a8      	cmp	r0, r5
 80093f2:	d1fb      	bne.n	80093ec <__sccl+0x1c>
 80093f4:	b90b      	cbnz	r3, 80093fa <__sccl+0x2a>
 80093f6:	1e50      	subs	r0, r2, #1
 80093f8:	bd70      	pop	{r4, r5, r6, pc}
 80093fa:	f081 0101 	eor.w	r1, r1, #1
 80093fe:	54e1      	strb	r1, [r4, r3]
 8009400:	4610      	mov	r0, r2
 8009402:	4602      	mov	r2, r0
 8009404:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009408:	2d2d      	cmp	r5, #45	; 0x2d
 800940a:	d005      	beq.n	8009418 <__sccl+0x48>
 800940c:	2d5d      	cmp	r5, #93	; 0x5d
 800940e:	d016      	beq.n	800943e <__sccl+0x6e>
 8009410:	2d00      	cmp	r5, #0
 8009412:	d0f1      	beq.n	80093f8 <__sccl+0x28>
 8009414:	462b      	mov	r3, r5
 8009416:	e7f2      	b.n	80093fe <__sccl+0x2e>
 8009418:	7846      	ldrb	r6, [r0, #1]
 800941a:	2e5d      	cmp	r6, #93	; 0x5d
 800941c:	d0fa      	beq.n	8009414 <__sccl+0x44>
 800941e:	42b3      	cmp	r3, r6
 8009420:	dcf8      	bgt.n	8009414 <__sccl+0x44>
 8009422:	3002      	adds	r0, #2
 8009424:	461a      	mov	r2, r3
 8009426:	3201      	adds	r2, #1
 8009428:	4296      	cmp	r6, r2
 800942a:	54a1      	strb	r1, [r4, r2]
 800942c:	dcfb      	bgt.n	8009426 <__sccl+0x56>
 800942e:	1af2      	subs	r2, r6, r3
 8009430:	3a01      	subs	r2, #1
 8009432:	1c5d      	adds	r5, r3, #1
 8009434:	42b3      	cmp	r3, r6
 8009436:	bfa8      	it	ge
 8009438:	2200      	movge	r2, #0
 800943a:	18ab      	adds	r3, r5, r2
 800943c:	e7e1      	b.n	8009402 <__sccl+0x32>
 800943e:	4610      	mov	r0, r2
 8009440:	e7da      	b.n	80093f8 <__sccl+0x28>

08009442 <__submore>:
 8009442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800944a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800944e:	4299      	cmp	r1, r3
 8009450:	d11d      	bne.n	800948e <__submore+0x4c>
 8009452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009456:	f7fe fd4f 	bl	8007ef8 <_malloc_r>
 800945a:	b918      	cbnz	r0, 8009464 <__submore+0x22>
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009468:	63a3      	str	r3, [r4, #56]	; 0x38
 800946a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800946e:	6360      	str	r0, [r4, #52]	; 0x34
 8009470:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009474:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009478:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800947c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009480:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009484:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009488:	6020      	str	r0, [r4, #0]
 800948a:	2000      	movs	r0, #0
 800948c:	e7e8      	b.n	8009460 <__submore+0x1e>
 800948e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009490:	0077      	lsls	r7, r6, #1
 8009492:	463a      	mov	r2, r7
 8009494:	f7ff fb08 	bl	8008aa8 <_realloc_r>
 8009498:	4605      	mov	r5, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	d0de      	beq.n	800945c <__submore+0x1a>
 800949e:	eb00 0806 	add.w	r8, r0, r6
 80094a2:	4601      	mov	r1, r0
 80094a4:	4632      	mov	r2, r6
 80094a6:	4640      	mov	r0, r8
 80094a8:	f7fe fc39 	bl	8007d1e <memcpy>
 80094ac:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80094b0:	f8c4 8000 	str.w	r8, [r4]
 80094b4:	e7e9      	b.n	800948a <__submore+0x48>

080094b6 <__swbuf_r>:
 80094b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b8:	460e      	mov	r6, r1
 80094ba:	4614      	mov	r4, r2
 80094bc:	4605      	mov	r5, r0
 80094be:	b118      	cbz	r0, 80094c8 <__swbuf_r+0x12>
 80094c0:	6a03      	ldr	r3, [r0, #32]
 80094c2:	b90b      	cbnz	r3, 80094c8 <__swbuf_r+0x12>
 80094c4:	f7fd ff1e 	bl	8007304 <__sinit>
 80094c8:	69a3      	ldr	r3, [r4, #24]
 80094ca:	60a3      	str	r3, [r4, #8]
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	071a      	lsls	r2, r3, #28
 80094d0:	d525      	bpl.n	800951e <__swbuf_r+0x68>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	b31b      	cbz	r3, 800951e <__swbuf_r+0x68>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	6922      	ldr	r2, [r4, #16]
 80094da:	1a98      	subs	r0, r3, r2
 80094dc:	6963      	ldr	r3, [r4, #20]
 80094de:	b2f6      	uxtb	r6, r6
 80094e0:	4283      	cmp	r3, r0
 80094e2:	4637      	mov	r7, r6
 80094e4:	dc04      	bgt.n	80094f0 <__swbuf_r+0x3a>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff f97d 	bl	80087e8 <_fflush_r>
 80094ee:	b9e0      	cbnz	r0, 800952a <__swbuf_r+0x74>
 80094f0:	68a3      	ldr	r3, [r4, #8]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	6022      	str	r2, [r4, #0]
 80094fc:	701e      	strb	r6, [r3, #0]
 80094fe:	6962      	ldr	r2, [r4, #20]
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	429a      	cmp	r2, r3
 8009504:	d004      	beq.n	8009510 <__swbuf_r+0x5a>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	07db      	lsls	r3, r3, #31
 800950a:	d506      	bpl.n	800951a <__swbuf_r+0x64>
 800950c:	2e0a      	cmp	r6, #10
 800950e:	d104      	bne.n	800951a <__swbuf_r+0x64>
 8009510:	4621      	mov	r1, r4
 8009512:	4628      	mov	r0, r5
 8009514:	f7ff f968 	bl	80087e8 <_fflush_r>
 8009518:	b938      	cbnz	r0, 800952a <__swbuf_r+0x74>
 800951a:	4638      	mov	r0, r7
 800951c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 f805 	bl	8009530 <__swsetup_r>
 8009526:	2800      	cmp	r0, #0
 8009528:	d0d5      	beq.n	80094d6 <__swbuf_r+0x20>
 800952a:	f04f 37ff 	mov.w	r7, #4294967295
 800952e:	e7f4      	b.n	800951a <__swbuf_r+0x64>

08009530 <__swsetup_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4b2a      	ldr	r3, [pc, #168]	; (80095dc <__swsetup_r+0xac>)
 8009534:	4605      	mov	r5, r0
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	460c      	mov	r4, r1
 800953a:	b118      	cbz	r0, 8009544 <__swsetup_r+0x14>
 800953c:	6a03      	ldr	r3, [r0, #32]
 800953e:	b90b      	cbnz	r3, 8009544 <__swsetup_r+0x14>
 8009540:	f7fd fee0 	bl	8007304 <__sinit>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800954a:	0718      	lsls	r0, r3, #28
 800954c:	d422      	bmi.n	8009594 <__swsetup_r+0x64>
 800954e:	06d9      	lsls	r1, r3, #27
 8009550:	d407      	bmi.n	8009562 <__swsetup_r+0x32>
 8009552:	2309      	movs	r3, #9
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	e034      	b.n	80095cc <__swsetup_r+0x9c>
 8009562:	0758      	lsls	r0, r3, #29
 8009564:	d512      	bpl.n	800958c <__swsetup_r+0x5c>
 8009566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009568:	b141      	cbz	r1, 800957c <__swsetup_r+0x4c>
 800956a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800956e:	4299      	cmp	r1, r3
 8009570:	d002      	beq.n	8009578 <__swsetup_r+0x48>
 8009572:	4628      	mov	r0, r5
 8009574:	f7fe fc00 	bl	8007d78 <_free_r>
 8009578:	2300      	movs	r3, #0
 800957a:	6363      	str	r3, [r4, #52]	; 0x34
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	2300      	movs	r3, #0
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f043 0308 	orr.w	r3, r3, #8
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	b94b      	cbnz	r3, 80095ac <__swsetup_r+0x7c>
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800959e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a2:	d003      	beq.n	80095ac <__swsetup_r+0x7c>
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f000 f910 	bl	80097cc <__smakebuf_r>
 80095ac:	89a0      	ldrh	r0, [r4, #12]
 80095ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095b2:	f010 0301 	ands.w	r3, r0, #1
 80095b6:	d00a      	beq.n	80095ce <__swsetup_r+0x9e>
 80095b8:	2300      	movs	r3, #0
 80095ba:	60a3      	str	r3, [r4, #8]
 80095bc:	6963      	ldr	r3, [r4, #20]
 80095be:	425b      	negs	r3, r3
 80095c0:	61a3      	str	r3, [r4, #24]
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	b943      	cbnz	r3, 80095d8 <__swsetup_r+0xa8>
 80095c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095ca:	d1c4      	bne.n	8009556 <__swsetup_r+0x26>
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
 80095ce:	0781      	lsls	r1, r0, #30
 80095d0:	bf58      	it	pl
 80095d2:	6963      	ldrpl	r3, [r4, #20]
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	e7f4      	b.n	80095c2 <__swsetup_r+0x92>
 80095d8:	2000      	movs	r0, #0
 80095da:	e7f7      	b.n	80095cc <__swsetup_r+0x9c>
 80095dc:	20000070 	.word	0x20000070

080095e0 <_raise_r>:
 80095e0:	291f      	cmp	r1, #31
 80095e2:	b538      	push	{r3, r4, r5, lr}
 80095e4:	4604      	mov	r4, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	d904      	bls.n	80095f4 <_raise_r+0x14>
 80095ea:	2316      	movs	r3, #22
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	f04f 30ff 	mov.w	r0, #4294967295
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095f6:	b112      	cbz	r2, 80095fe <_raise_r+0x1e>
 80095f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095fc:	b94b      	cbnz	r3, 8009612 <_raise_r+0x32>
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f830 	bl	8009664 <_getpid_r>
 8009604:	462a      	mov	r2, r5
 8009606:	4601      	mov	r1, r0
 8009608:	4620      	mov	r0, r4
 800960a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800960e:	f000 b817 	b.w	8009640 <_kill_r>
 8009612:	2b01      	cmp	r3, #1
 8009614:	d00a      	beq.n	800962c <_raise_r+0x4c>
 8009616:	1c59      	adds	r1, r3, #1
 8009618:	d103      	bne.n	8009622 <_raise_r+0x42>
 800961a:	2316      	movs	r3, #22
 800961c:	6003      	str	r3, [r0, #0]
 800961e:	2001      	movs	r0, #1
 8009620:	e7e7      	b.n	80095f2 <_raise_r+0x12>
 8009622:	2400      	movs	r4, #0
 8009624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009628:	4628      	mov	r0, r5
 800962a:	4798      	blx	r3
 800962c:	2000      	movs	r0, #0
 800962e:	e7e0      	b.n	80095f2 <_raise_r+0x12>

08009630 <raise>:
 8009630:	4b02      	ldr	r3, [pc, #8]	; (800963c <raise+0xc>)
 8009632:	4601      	mov	r1, r0
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	f7ff bfd3 	b.w	80095e0 <_raise_r>
 800963a:	bf00      	nop
 800963c:	20000070 	.word	0x20000070

08009640 <_kill_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d07      	ldr	r5, [pc, #28]	; (8009660 <_kill_r+0x20>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	602b      	str	r3, [r5, #0]
 800964e:	f7fb f9d6 	bl	80049fe <_kill>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d102      	bne.n	800965c <_kill_r+0x1c>
 8009656:	682b      	ldr	r3, [r5, #0]
 8009658:	b103      	cbz	r3, 800965c <_kill_r+0x1c>
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	bd38      	pop	{r3, r4, r5, pc}
 800965e:	bf00      	nop
 8009660:	2000caf0 	.word	0x2000caf0

08009664 <_getpid_r>:
 8009664:	f7fb b9c3 	b.w	80049ee <_getpid>

08009668 <_malloc_usable_size_r>:
 8009668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800966c:	1f18      	subs	r0, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbc      	itt	lt
 8009672:	580b      	ldrlt	r3, [r1, r0]
 8009674:	18c0      	addlt	r0, r0, r3
 8009676:	4770      	bx	lr

08009678 <_strtol_l.constprop.0>:
 8009678:	2b01      	cmp	r3, #1
 800967a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967e:	d001      	beq.n	8009684 <_strtol_l.constprop.0+0xc>
 8009680:	2b24      	cmp	r3, #36	; 0x24
 8009682:	d906      	bls.n	8009692 <_strtol_l.constprop.0+0x1a>
 8009684:	f7fe fb14 	bl	8007cb0 <__errno>
 8009688:	2316      	movs	r3, #22
 800968a:	6003      	str	r3, [r0, #0]
 800968c:	2000      	movs	r0, #0
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009778 <_strtol_l.constprop.0+0x100>
 8009696:	460d      	mov	r5, r1
 8009698:	462e      	mov	r6, r5
 800969a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800969e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80096a2:	f017 0708 	ands.w	r7, r7, #8
 80096a6:	d1f7      	bne.n	8009698 <_strtol_l.constprop.0+0x20>
 80096a8:	2c2d      	cmp	r4, #45	; 0x2d
 80096aa:	d132      	bne.n	8009712 <_strtol_l.constprop.0+0x9a>
 80096ac:	782c      	ldrb	r4, [r5, #0]
 80096ae:	2701      	movs	r7, #1
 80096b0:	1cb5      	adds	r5, r6, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d05b      	beq.n	800976e <_strtol_l.constprop.0+0xf6>
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d109      	bne.n	80096ce <_strtol_l.constprop.0+0x56>
 80096ba:	2c30      	cmp	r4, #48	; 0x30
 80096bc:	d107      	bne.n	80096ce <_strtol_l.constprop.0+0x56>
 80096be:	782c      	ldrb	r4, [r5, #0]
 80096c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096c4:	2c58      	cmp	r4, #88	; 0x58
 80096c6:	d14d      	bne.n	8009764 <_strtol_l.constprop.0+0xec>
 80096c8:	786c      	ldrb	r4, [r5, #1]
 80096ca:	2310      	movs	r3, #16
 80096cc:	3502      	adds	r5, #2
 80096ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80096d6:	f04f 0e00 	mov.w	lr, #0
 80096da:	fbb8 f9f3 	udiv	r9, r8, r3
 80096de:	4676      	mov	r6, lr
 80096e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80096e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80096e8:	f1bc 0f09 	cmp.w	ip, #9
 80096ec:	d816      	bhi.n	800971c <_strtol_l.constprop.0+0xa4>
 80096ee:	4664      	mov	r4, ip
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	dd24      	ble.n	800973e <_strtol_l.constprop.0+0xc6>
 80096f4:	f1be 3fff 	cmp.w	lr, #4294967295
 80096f8:	d008      	beq.n	800970c <_strtol_l.constprop.0+0x94>
 80096fa:	45b1      	cmp	r9, r6
 80096fc:	d31c      	bcc.n	8009738 <_strtol_l.constprop.0+0xc0>
 80096fe:	d101      	bne.n	8009704 <_strtol_l.constprop.0+0x8c>
 8009700:	45a2      	cmp	sl, r4
 8009702:	db19      	blt.n	8009738 <_strtol_l.constprop.0+0xc0>
 8009704:	fb06 4603 	mla	r6, r6, r3, r4
 8009708:	f04f 0e01 	mov.w	lr, #1
 800970c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009710:	e7e8      	b.n	80096e4 <_strtol_l.constprop.0+0x6c>
 8009712:	2c2b      	cmp	r4, #43	; 0x2b
 8009714:	bf04      	itt	eq
 8009716:	782c      	ldrbeq	r4, [r5, #0]
 8009718:	1cb5      	addeq	r5, r6, #2
 800971a:	e7ca      	b.n	80096b2 <_strtol_l.constprop.0+0x3a>
 800971c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009720:	f1bc 0f19 	cmp.w	ip, #25
 8009724:	d801      	bhi.n	800972a <_strtol_l.constprop.0+0xb2>
 8009726:	3c37      	subs	r4, #55	; 0x37
 8009728:	e7e2      	b.n	80096f0 <_strtol_l.constprop.0+0x78>
 800972a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800972e:	f1bc 0f19 	cmp.w	ip, #25
 8009732:	d804      	bhi.n	800973e <_strtol_l.constprop.0+0xc6>
 8009734:	3c57      	subs	r4, #87	; 0x57
 8009736:	e7db      	b.n	80096f0 <_strtol_l.constprop.0+0x78>
 8009738:	f04f 3eff 	mov.w	lr, #4294967295
 800973c:	e7e6      	b.n	800970c <_strtol_l.constprop.0+0x94>
 800973e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009742:	d105      	bne.n	8009750 <_strtol_l.constprop.0+0xd8>
 8009744:	2322      	movs	r3, #34	; 0x22
 8009746:	6003      	str	r3, [r0, #0]
 8009748:	4646      	mov	r6, r8
 800974a:	b942      	cbnz	r2, 800975e <_strtol_l.constprop.0+0xe6>
 800974c:	4630      	mov	r0, r6
 800974e:	e79e      	b.n	800968e <_strtol_l.constprop.0+0x16>
 8009750:	b107      	cbz	r7, 8009754 <_strtol_l.constprop.0+0xdc>
 8009752:	4276      	negs	r6, r6
 8009754:	2a00      	cmp	r2, #0
 8009756:	d0f9      	beq.n	800974c <_strtol_l.constprop.0+0xd4>
 8009758:	f1be 0f00 	cmp.w	lr, #0
 800975c:	d000      	beq.n	8009760 <_strtol_l.constprop.0+0xe8>
 800975e:	1e69      	subs	r1, r5, #1
 8009760:	6011      	str	r1, [r2, #0]
 8009762:	e7f3      	b.n	800974c <_strtol_l.constprop.0+0xd4>
 8009764:	2430      	movs	r4, #48	; 0x30
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1b1      	bne.n	80096ce <_strtol_l.constprop.0+0x56>
 800976a:	2308      	movs	r3, #8
 800976c:	e7af      	b.n	80096ce <_strtol_l.constprop.0+0x56>
 800976e:	2c30      	cmp	r4, #48	; 0x30
 8009770:	d0a5      	beq.n	80096be <_strtol_l.constprop.0+0x46>
 8009772:	230a      	movs	r3, #10
 8009774:	e7ab      	b.n	80096ce <_strtol_l.constprop.0+0x56>
 8009776:	bf00      	nop
 8009778:	08009ff7 	.word	0x08009ff7

0800977c <_strtol_r>:
 800977c:	f7ff bf7c 	b.w	8009678 <_strtol_l.constprop.0>

08009780 <__swhatbuf_r>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	460c      	mov	r4, r1
 8009784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009788:	2900      	cmp	r1, #0
 800978a:	b096      	sub	sp, #88	; 0x58
 800978c:	4615      	mov	r5, r2
 800978e:	461e      	mov	r6, r3
 8009790:	da0d      	bge.n	80097ae <__swhatbuf_r+0x2e>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009798:	f04f 0100 	mov.w	r1, #0
 800979c:	bf0c      	ite	eq
 800979e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097a2:	2340      	movne	r3, #64	; 0x40
 80097a4:	2000      	movs	r0, #0
 80097a6:	6031      	str	r1, [r6, #0]
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	b016      	add	sp, #88	; 0x58
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
 80097ae:	466a      	mov	r2, sp
 80097b0:	f000 f848 	bl	8009844 <_fstat_r>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	dbec      	blt.n	8009792 <__swhatbuf_r+0x12>
 80097b8:	9901      	ldr	r1, [sp, #4]
 80097ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80097c2:	4259      	negs	r1, r3
 80097c4:	4159      	adcs	r1, r3
 80097c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ca:	e7eb      	b.n	80097a4 <__swhatbuf_r+0x24>

080097cc <__smakebuf_r>:
 80097cc:	898b      	ldrh	r3, [r1, #12]
 80097ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d0:	079d      	lsls	r5, r3, #30
 80097d2:	4606      	mov	r6, r0
 80097d4:	460c      	mov	r4, r1
 80097d6:	d507      	bpl.n	80097e8 <__smakebuf_r+0x1c>
 80097d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	2301      	movs	r3, #1
 80097e2:	6163      	str	r3, [r4, #20]
 80097e4:	b002      	add	sp, #8
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	ab01      	add	r3, sp, #4
 80097ea:	466a      	mov	r2, sp
 80097ec:	f7ff ffc8 	bl	8009780 <__swhatbuf_r>
 80097f0:	9900      	ldr	r1, [sp, #0]
 80097f2:	4605      	mov	r5, r0
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7fe fb7f 	bl	8007ef8 <_malloc_r>
 80097fa:	b948      	cbnz	r0, 8009810 <__smakebuf_r+0x44>
 80097fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d4ef      	bmi.n	80097e4 <__smakebuf_r+0x18>
 8009804:	f023 0303 	bic.w	r3, r3, #3
 8009808:	f043 0302 	orr.w	r3, r3, #2
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	e7e3      	b.n	80097d8 <__smakebuf_r+0xc>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	6020      	str	r0, [r4, #0]
 8009814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	6163      	str	r3, [r4, #20]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	6120      	str	r0, [r4, #16]
 8009822:	b15b      	cbz	r3, 800983c <__smakebuf_r+0x70>
 8009824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f81d 	bl	8009868 <_isatty_r>
 800982e:	b128      	cbz	r0, 800983c <__smakebuf_r+0x70>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f023 0303 	bic.w	r3, r3, #3
 8009836:	f043 0301 	orr.w	r3, r3, #1
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	431d      	orrs	r5, r3
 8009840:	81a5      	strh	r5, [r4, #12]
 8009842:	e7cf      	b.n	80097e4 <__smakebuf_r+0x18>

08009844 <_fstat_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d07      	ldr	r5, [pc, #28]	; (8009864 <_fstat_r+0x20>)
 8009848:	2300      	movs	r3, #0
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	4611      	mov	r1, r2
 8009850:	602b      	str	r3, [r5, #0]
 8009852:	f7fb f933 	bl	8004abc <_fstat>
 8009856:	1c43      	adds	r3, r0, #1
 8009858:	d102      	bne.n	8009860 <_fstat_r+0x1c>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b103      	cbz	r3, 8009860 <_fstat_r+0x1c>
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	bd38      	pop	{r3, r4, r5, pc}
 8009862:	bf00      	nop
 8009864:	2000caf0 	.word	0x2000caf0

08009868 <_isatty_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_isatty_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7fb f932 	bl	8004adc <_isatty>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_isatty_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_isatty_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	2000caf0 	.word	0x2000caf0

08009888 <_init>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	bf00      	nop
 800988c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988e:	bc08      	pop	{r3}
 8009890:	469e      	mov	lr, r3
 8009892:	4770      	bx	lr

08009894 <_fini>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr
